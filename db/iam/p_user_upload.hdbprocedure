procedure "SAP_INO"."sap.ino.db.iam::p_user_upload" (
    in  iv_appl_user_id                           INTEGER,
    in  it_user                                   "SAP_INO"."sap.ino.db.iam::tt_user_import_input",
    out ov_failed_to_recompute_transitive_closure tinyint,
    out ot_user_message                           "SAP_INO"."sap.ino.db.iam::tt_user_import_output"
)
language sqlscript
sql security invoker
default schema sap_ino
as
begin 
    lt_user = select 
        "LINE_NO"          as "LINE_NO",
        "NAME"             as "NAME",
        "FIRST_NAME"       as "FIRST_NAME",
        "LAST_NAME"        as "LAST_NAME",
        "EMAIL"            as "EMAIL",
        upper("USER_NAME") as "USER_NAME",
        "IS_EXTERNAL"      as "IS_EXTERNAL",
        "PHONE"            as "PHONE",
        "MOBILE"           as "MOBILE",
        "COST_CENTER"      as "COST_CENTER",
        "ORGANIZATION"     as "ORGANIZATION",
        "OFFICE"           as "OFFICE",
        "DESCRIPTION"      as "DESCRIPTION", 
        "COMPANY"          as "COMPANY",
        "STREET"           as "STREET",
        "CITY"             as "CITY",
        "COUNTRY"          as "COUNTRY",
        "ZIP_CODE"         as "ZIP_CODE",
        "VALIDATION_TO"    as "VALIDATION_TO"
    from :it_user;
  
    -- map all rows without a user_name to an error message
    lt_message_no_user_name =
        select
            "LINE_NO",
            "NAME",
            "FIRST_NAME",
            "LAST_NAME",
            "EMAIL",
            "USER_NAME",
            "IS_EXTERNAL",
            "PHONE",
            "MOBILE",
            "COST_CENTER",
            "ORGANIZATION",
            "OFFICE",
            "DESCRIPTION",
            "COMPANY",
            "STREET",
            "CITY",
            "COUNTRY",
            "ZIP_CODE",
            "VALIDATION_TO",
            'E' as "TYPE",
            'MSG_IDENTITY_USER_NAME_MANDATORY' as "MESSAGE",
            'USER_NAME'  as "REF_FIELD",
            "USER_NAME"  as "PARAM_0",
            "FIRST_NAME" as "PARAM_1",
            "LAST_NAME"  as "PARAM_2",
            ''           as "PARAM_3"
        from :lt_user
        where (user_name = '' or user_name is null);

    -- map all rows with a duplicate user_name to an error message
    lt_message_duplicate_user_name =
        select distinct
            input."LINE_NO",
            input."NAME",
            input."FIRST_NAME",
            input."LAST_NAME",
            input."EMAIL",
            input."USER_NAME",
            input."IS_EXTERNAL",
            input."PHONE",
            input."MOBILE",
            input."COST_CENTER",
            input."ORGANIZATION",
            input."OFFICE",
            input."DESCRIPTION",
            input."COMPANY",
            input."STREET",
            input."CITY",
            input."COUNTRY",
            input."ZIP_CODE",
            input."VALIDATION_TO",
            'E' as "TYPE",
            'MSG_IDENTITY_USER_NAME_UNIQUE' as "MESSAGE",
            'USER_NAME'        as "REF_FIELD",
            input."USER_NAME"  as "PARAM_0",
            input."FIRST_NAME" as "PARAM_1",
            input."LAST_NAME"  as "PARAM_2",
            ''                 as "PARAM_3"
        from :lt_user as input, :lt_user as self
        where
            input.user_name = self.user_name
        and input.user_name <> ''
        -- and input.user_name is not null -- implicitly checked
        and input.line_no > self.line_no;

    -- map all rows without a name to an error message
    lt_message_name_mandatory =
        select
            "LINE_NO",
            "NAME",
            "FIRST_NAME",
            "LAST_NAME",
            "EMAIL",
            "USER_NAME",
            "IS_EXTERNAL",
            "PHONE",
            "MOBILE",
            "COST_CENTER",
            "ORGANIZATION",
            "OFFICE",
            "DESCRIPTION",
            "COMPANY",
            "STREET",
            "CITY",
            "COUNTRY",
            "ZIP_CODE",
            "VALIDATION_TO",
            'E' as "TYPE",
            'MSG_IDENTITY_NAME_MANDATORY' as "MESSAGE",
            'NAME'       as "REF_FIELD",
            "USER_NAME"  as "PARAM_0",
            "FIRST_NAME" as "PARAM_1",
            "LAST_NAME"  as "PARAM_2",
            ''           as "PARAM_3"
        FROM :lt_user
        WHERE (NAME = '' OR NAME IS NULL);

    -- collect all error messages
    lt_user_failed =
        select * from :lt_message_no_user_name
        union all
        select * from :lt_message_duplicate_user_name
        union all
        select * from :lt_message_name_mandatory;

    -- rows without an error are considered good
    lt_user_ok =
        select * from :lt_user as user
        where line_no not in (select line_no from :lt_user_failed);

    -- determine which users already exist on the DB
    lt_user_historic_data =
        select
            id,
            user_name,
            created_at,
            created_by_id,
            staged,
            name,
            first_name,
            last_name,
            email,
            is_external,
            phone,
            mobile,
            cost_center,
            organization,
            office,
            description,
            company,
            street,
            city,
            country,
            zip_code,
            validation_to,
            source_type_code,
            last_login            
        from
            "SAP_INO"."sap.ino.db.iam::t_identity"
        where
            user_name in (select user_name from :lt_user_ok);

    -- for existing users do not touch the id, created_at, created_by_id fields
    lt_user_for_update =
        select
            hist.id               as id,
            hist.created_at       as created_at,
            hist.created_by_id    as created_by_id,
            current_utctimestamp  as changed_at,
            :iv_appl_user_id      as changed_by_id,
            'USER'                as type_code,
            usr.name              as name,
            usr.first_name        as first_name,
            usr.last_name         as last_name,
            usr.email             as email,
            usr.user_name         as user_name,
            usr.is_external       as is_external,
            0                     as erased,
            usr.phone             as phone,
            usr.mobile            as mobile,
            usr.cost_center       as cost_center,
            usr.organization      as organization,
            usr.office            as office,
            usr.description       as description,
            usr.company           as company,
            usr.street            as street,
            usr.city              as city,
            usr.country           as country,
            usr.zip_code          as zip_code,
            usr.validation_to     as validation_to,
            hist.staged           as staged,
            'UPLOAD'              as source_type_code,
            hist.last_login       as  last_login           
        from
            :lt_user_ok            as usr,
            :lt_user_historic_data as hist
        where
            usr.user_name = hist.user_name
        -- only update if there are changes besides the metadata
        and not( usr.name         = hist.name
             and usr.first_name   = hist.first_name
             and usr.last_name    = hist.last_name
             and usr.email        = hist.email
             and usr.user_name    = hist.user_name
             and usr.is_external  = hist.is_external
             and usr.phone        = hist.phone
             and usr.mobile       = hist.mobile
             and usr.cost_center  = hist.cost_center
             and usr.organization = hist.organization
             and usr.office       = hist.office
             and usr.description  = hist.description
             and usr.company      = hist.company
             and usr.street       = hist.street
             and usr.city         = hist.city
             and usr.country      = hist.country
             and usr.zip_code     = hist.zip_code
             and usr.validation_to = hist.validation_to
        );

    -- for new users fill all fields, especially generate a new ID
    lt_user_for_insert =
        select
            "SAP_INO"."sap.ino.db.iam::s_identity".nextval as id,
            current_utctimestamp as created_at,
            :iv_appl_user_id     as created_by_id,
            current_utctimestamp as changed_at,
            :iv_appl_user_id     as changed_by_id,
            'USER'               as type_code,
            usr.name             as name,
            usr.first_name       as first_name,
            usr.last_name        as last_name,
            usr.email            as email,
            usr.user_name        as user_name,
            usr.is_external      as is_external,
            0                    as erased,
            usr.phone            as phone,
            usr.mobile           as mobile,
            usr.cost_center      as cost_center,
            usr.organization     as organization,
            usr.office           as office,
            usr.description      as description,
            usr.company          as company,
            usr.street           as street,
            usr.city             as city,
            usr.country          as country,
            usr.zip_code         as zip_code,
            usr.validation_to    as validation_to,
            1                    as staged,
            'UPLOAD'             as source_type_code,
            null                 as last_login
        from :lt_user_ok as usr
        where user_name not in (select user_name from :lt_user_historic_data);

    -- collect all record both old and new
    lt_all_records =
        select * from :lt_user_for_insert
        union all
        select * from :lt_user_for_update;
    
    lt_user_for_insert_change = 
        SELECT 
            ID,
            EMAIL,
            PHONE,
            MOBILE,
            COST_CENTER,
            OFFICE,
            COMPANY,
            STREET,
            CITY,
            COUNTRY,
            ZIP_CODE,
            VALIDATION_TO
        FROM :lt_user_for_insert;
        
    lt_user_for_update_change = 
        SELECT 
            ID,
            EMAIL,
            PHONE,
            MOBILE,
            COST_CENTER,
            OFFICE,
            COMPANY,
            STREET,
            CITY,
            COUNTRY,
            ZIP_CODE,
            VALIDATION_TO
        FROM :lt_user_for_update;
    
    call "SAP_INO"."sap.ino.db.iam::p_user_log" (
        :iv_appl_user_id, -- in iv_appl_user_id  INTEGER,
        :lt_user_for_insert_change,  -- in it_user "SAP_INO"."sap.ino.db.iam::tt_identity_change_log"
        :lt_user_for_update_change
    );

    -- upsert everything, upsert should never be slower than insert as insert
    -- will also check for record existence
    upsert "SAP_INO"."sap.ino.db.iam::t_identity" 
        (id, created_at, created_by_id, changed_at, changed_by_id, type_code, 
         name, first_name, last_name, email, user_name, is_external, erased, 
         phone, mobile, cost_center, organization, office, description, 
         staged, source_type_code, company, street, city, country, zip_code, validation_to)
    select 
        id, created_at, created_by_id, changed_at, changed_by_id, type_code, 
        name, first_name, last_name, email, user_name, is_external, erased, 
        phone, mobile, cost_center, organization, office, description, 
        staged, source_type_code, company, street, city, country, zip_code, validation_to 
    from :lt_all_records;

    -- write history records
    insert into "sap.ino.db.iam::t_identity_h"
        (history_db_event, history_biz_event, history_at, history_actor_id,
         id, created_at, created_by_id, changed_at, changed_by_id, type_code, 
         name, first_name, last_name, email, user_name, is_external, erased, 
         phone, mobile, cost_center, organization, office, description, 
         staged, source_type_code, company, street, city, country, zip_code, validation_to)
        select
            'UPSERT'            as history_db_event,
            'ALTER'             as history_biz_event,
            changed_at          as history_at,
            changed_by_id       as history_actor_id,
            id                  as id,
            created_at          as created_at,
            created_by_id       as created_by_id,
            changed_at          as changed_at,
            changed_by_id       as changed_by_id,
            type_code           as type_code,
            name                as name,
            first_name          as first_name,
            last_name           as last_name,
            email               as email,
            user_name           as user_name,
            is_external         as is_external,
            0                   as erased,
            phone               as phone,
            mobile              as mobile,
            cost_center         as cost_center,
            organization        as organization,
            office              as office,
            description         as description,
            staged              as staged,
            source_type_code    as source_type_code,
            company             as company,
            street              as street,
            city                as city,
            country             as country,
            zip_code            as zip_code,
            validation_to       as validation_to
        from :lt_all_records;
      
    -- update automatic group memberships
    call "SAP_INO"."sap.ino.db.iam::p_auto_group" (
            :iv_appl_user_id, -- in iv_appl_user_id  INTEGER,
            :lt_all_records,  -- in it_user         "SAP_INO"."sap.ino.db.iam::t_identity"
            :ov_failed_to_recompute_transitive_closure
    );

    -- echo the successful user entries
    lt_user_no_message =
        select
            "LINE_NO",
            "NAME",
            "FIRST_NAME",
            "LAST_NAME",
            "EMAIL",
            "USER_NAME",
            "IS_EXTERNAL",
            "PHONE",
            "MOBILE",
            "COST_CENTER",
            "ORGANIZATION",
            "OFFICE",
            "DESCRIPTION",
            "COMPANY",
            "STREET",
            "CITY",
            "COUNTRY",
            "ZIP_CODE",
            "VALIDATION_TO",
            '' as "TYPE",
            '' as "MESSAGE",
            '' as "REF_FIELD",
            '' as "PARAM_0",
            '' as "PARAM_1",
            '' as "PARAM_2",
            '' as "PARAM_3"
        from :lt_user_ok;

    -- collect all messages
    ot_user_message = select * from
        (
            select * from :lt_user_failed 
            union all
            select * from :lt_user_no_message
        )
        order by line_no asc;
end;
