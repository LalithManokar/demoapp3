procedure "SAP_INO"."sap.ino.db.iam::p_user_upload_delete" (
    in  iv_appl_user_id  INTEGER,
    in  it_user         "SAP_INO"."sap.ino.db.iam::tt_user_delete_input",
    out ot_user_message "SAP_INO"."sap.ino.db.iam::tt_user_delete_output"
)
language sqlscript
sql security invoker
default schema sap_ino
as
begin
    lt_user = select 
        "LINE_NO"          as "LINE_NO",
        upper("USER_NAME") as "USER_NAME"
    from :it_user;

    -- map all rows without a user_name to an error message
    lt_message_no_user_name =
        select
            "LINE_NO",
            "USER_NAME",
            'E' as "TYPE",
            'MSG_IDENTITY_USER_NAME_MANDATORY' as "MESSAGE",
            'USER_NAME' as "REF_FIELD",
            USER_NAME   as "PARAM_0",
            ''          as "PARAM_1",
            ''          as "PARAM_2",
            ''          as "PARAM_3"
        from :lt_user
        where (user_name = '' or user_name is null);

    -- deny to delete own user 
    lt_message_must_not_delete_own_user =
        select
            "LINE_NO",
            lt_user."USER_NAME",
            'E' as "TYPE",
            'MSG_MUST_NOT_DELETE_OWN_USER' as "MESSAGE",
            'USER_NAME' as "REF_FIELD",
            lt_user.USER_NAME   as "PARAM_0",
            ''          as "PARAM_1",
            ''          as "PARAM_2",
            ''          as "PARAM_3"
        from
            :lt_user                               as lt_user,
            "SAP_INO"."sap.ino.db.iam::t_identity" as idt
        where
            idt.user_name = lt_user.user_name
        and idt.type_code = 'USER'
        and idt.id        = :iv_appl_user_id;
        
    -- create warnings for not existing users
    lt_message_user_name_unknown =
        select
            "LINE_NO",
            "USER_NAME",
            'W' as "TYPE",
            'MSG_IDENTITY_USER_NAME_UNKNOWN' as "MESSAGE",
            'USER_NAME' as "REF_FIELD",
            USER_NAME   as "PARAM_0",
            ''          as "PARAM_1",
            ''          as "PARAM_2",
            ''          as "PARAM_3"
        from :lt_user
        where
            user_name not in (select user_name from "SAP_INO"."sap.ino.db.iam::t_identity" where type_code = 'USER' and erased = 0)
        -- and user_name is not null -- implicitly checked
        and user_name <> '';
        
    -- collect all messages
    lt_user_failed =
        select * from :lt_message_no_user_name
        union all
        select * from :lt_message_must_not_delete_own_user
        union all
        select * from :lt_message_user_name_unknown;

    -- rows without an error are considered good
    lt_user_ok =
        select * from :lt_user as user
        where line_no not in (select line_no from :lt_user_failed);

    -- determine which users already exist on the DB
    lt_user_historic_data =
        select
            id,
            created_at,
            created_by_id,
            user_name,
            staged
        from
            "SAP_INO"."sap.ino.db.iam::t_identity"
        where
            user_name in (select user_name from :lt_user_ok);

    -- for existing users do not touch the id, created_at, created_by_id fields
    lt_user_for_erase =
        select
            hist.id              as id,
            hist.created_at      as created_at,
            hist.created_by_id   as created_by_id,
            current_utctimestamp as changed_at,
            :iv_appl_user_id     as changed_by_id,
            'USER'               as type_code,
            'erased'             as name,
            'erased'             as first_name,
            'erased'             as last_name,
            'erased'             as email,
            'erased'             as user_name,
            0                    as is_external,
            1                    as erased,
            'erased'             as phone,
            'erased'             as mobile,
            'erased'             as cost_center,
            'erased'             as organization,
            'erased'             as office,
            'erased'             as description,
            0                    as staged,
            'UPLOAD'             as source_type_code
        from
            :lt_user_ok            as usr,
            :lt_user_historic_data as hist
        where
            usr.user_name = hist.user_name;

    -- upsert to 'erased'
    upsert "SAP_INO"."sap.ino.db.iam::t_identity"
        (id, created_at, created_by_id, changed_at, changed_by_id, type_code, 
         name, first_name, last_name, email, user_name, is_external, erased, 
         phone, mobile, cost_center, organization, office, description, 
         staged, source_type_code)
    select
        id, created_at, created_by_id, changed_at, changed_by_id, type_code, 
        name, first_name, last_name, email, user_name, is_external, erased, 
        phone, mobile, cost_center, organization, office, description, 
        staged , source_type_code
    from :lt_user_for_erase;

    -- write history records
    insert into "sap.ino.db.iam::t_identity_h"
        (history_db_event, history_biz_event, history_at, history_actor_id,
         id, created_at, created_by_id, changed_at, changed_by_id, type_code, 
         name, first_name, last_name, email, user_name, is_external, erased, 
         phone, mobile, cost_center, organization, office, description, 
         staged, source_type_code)
        select
            'UPSERT'            as history_db_event,
            'ALTER'             as history_biz_event,
            changed_at          as history_at,
            changed_by_id       as history_actor_id,
            id                  as id,
            created_at          as created_at,
            created_by_id       as created_by_id,
            changed_at          as changed_at,
            changed_by_id       as changed_by_id,
            type_code           as type_code,
            name                as name,
            first_name          as first_name,
            last_name           as last_name,
            email               as email,
            user_name           as user_name,
            is_external         as is_external,
            0                   as erased,
            phone               as phone,
            mobile              as mobile,
            cost_center         as cost_center,
            organization        as organization,
            office              as office,
            description         as description,
            staged              as staged,
            source_type_code    as source_type_code
        from :lt_user_for_erase;
        
    -- delete all group assignments of the deleted users
    -- determine which group memberships in automatic groups already exist on the DB
    lt_group_member_to_delete_historic_data =
        select
            member.id,
            member.member_id,
            member.group_id
        from
            "SAP_INO"."sap.ino.db.iam::t_identity_group_member" as member
        where member_id in (select id from :lt_user_for_erase);

    --do the actual deletion
    delete from "SAP_INO"."sap.ino.db.iam::t_identity_group_member"
        where id in (select id from :lt_group_member_to_delete_historic_data);

    -- write history records
    insert into "SAP_INO"."sap.ino.db.iam::t_identity_group_member_h" 
        (history_db_event, history_biz_event, history_at, history_actor_id, id, member_id, group_id)
        select
            'DELETE'             as history_db_event,
            'ALTER'              as history_biz_event,
            current_utctimestamp as history_at,
            :iv_appl_user_id     as history_actor_id,
            grp.id               as id,
            0                    as member_id,
            0                    as group_id
        from :lt_group_member_to_delete_historic_data as grp;
   
   --recalculate the transitive closure
   call "SAP_INO"."sap.ino.db.iam::p_update_identity_group_member_transitive" ();

    -- echo the successful user entries
    lt_user_no_message =
        select
            "LINE_NO",
            "USER_NAME",
            '' as "TYPE",
            '' as "MESSAGE",
            '' as "REF_FIELD",
            '' as "PARAM_0",
            '' as "PARAM_1",
            '' as "PARAM_2",
            '' as "PARAM_3"
        from :lt_user_ok;

    -- collect all messages
    ot_user_message = select * from
        (
            select * from :lt_user_failed 
            union all
            select * from :lt_user_no_message
        )
        order by line_no asc;
end;
