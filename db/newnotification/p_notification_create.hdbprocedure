procedure "SAP_INO"."sap.ino.db.newnotification::p_notification_create" () 
language sqlscript
sql security invoker
default schema sap_ino
as
begin
    lt_current = select * from "sap.ino.db.notification::v_notification_latest_time";
    
    lt_notification_for_campaign_date = select distinct campaign_id,action_code from "sap.ino.db.notification::t_notification" where action_code in ('CAMPAIGN_START_SOON','CAMPAIGN_DUE_TO_EXPIRE','IDEA_SUBMISSION_SOON','IDEA_SUBMISSION_DUE_TO_EXPIRE','CAMPAIGN_REGISTRATION_SOON','CAMPAIGN_REGISTRATION_DUE_TO_EXPIRE'); 
                                                       

    lt_object = select id, campaign_id, name, 'IDEA' as type_code, created_by_id
            from "sap.ino.db.idea::t_idea"
        union all select id, id as campaign_id, name, 'CAMPAIGN' as type_code, created_by_id 
            from (select campaign.id, campaign.created_by_id, camp_locale.name 
                      from "sap.ino.db.campaign::t_campaign" as campaign
                      inner join "sap.ino.db.campaign::v_campaign_t_locale" as camp_locale
                          on campaign.id = camp_locale.campaign_id);
    -- convert the null value into empty string for further processing
    lt_decision = select
            idea.id as object_id, 'IDEA' as object_type_code,
            idea.history_at as event_at, idea.history_biz_event as notification_code, 
            idea.history_actor_id as actor_id, idea.created_by_id as owner_id, 
            left(idea.name, 100) as object_text, null as sub_text, 0 as involved_id,
            idea.campaign_id, 
            IFNULL(response.text_module_code, '') as text_module_code, 
            IFNULL(response.reason_code, '') as reason_code,
            IFNULL(response.reason, '') as reason_text,
            IFNULL(response.link_label, '') as link_label,
            IFNULL(response.link_url, '') as link_url,
            response.response as response,
            'NOTIFY_AUTHOR' AS ACTION_CODE,
            idea.PRE_STATUS_CODE || '_PRE_STATUS_CODE_' ||  transition.CODE || '_TRANSITION_ID_' || 'STATUS'  || '_ACTION_TYPE_'|| response.DECIDER_ID || '_DECIDER_ID_'as HISTORY_OBJECT_INFO
        from
            :lt_current as time,
            (select  t_h.*,lag(t_h.status_code, 1, NULL) over (partition by t_h.id order by t_h.history_at asc) as PRE_STATUS_CODE
                from "sap.ino.db.idea::t_idea_h" as t_h) as idea
            inner join "sap.ino.db.campaign::t_campaign_phase" as campaign_phase
            on campaign_phase.PHASE_CODE = idea.PHASE_CODE and campaign_phase.CAMPAIGN_ID = idea.CAMPAIGN_ID
            left outer join 
                "sap.ino.db.idea::t_decision" as response
            on idea.id = response.idea_id and
                idea.history_at = response.created_at
            left outer join "sap.ino.db.status::t_status_model_transition_stage" as transition
                on transition.current_status_code = idea.PRE_STATUS_CODE 
                and transition.next_status_code = idea.status_code 
                and transition.STATUS_MODEL_CODE = campaign_phase.STATUS_MODEL_CODE
                and transition.status_action_code = response.status_action_code 
        where 
            (history_biz_event like 'STATUS_ACTION%' or history_biz_event = 'IDEA_CREATED') and (history_biz_event <> 'STATUS_ACTION_sap.ino.config.START_NEXT_PHASE' and history_biz_event <> 'STATUS_ACTION_sap.ino.config.RESTART_PREV_PHASE') and
            history_at > time.latest and response.send_response = 1
            
        union all
        select
            idea.id as object_id, 'IDEA' as object_type_code,
            idea.history_at as event_at, idea.history_biz_event as notification_code, 
            idea.history_actor_id as actor_id, idea.created_by_id as owner_id, 
            left(idea.name, 100) as object_text, null as sub_text, 0 as involved_id,
            idea.campaign_id, 
            IFNULL(response.text_module_code, '') as text_module_code, 
            IFNULL(response.reason_code, '') as reason_code,
            IFNULL(response.reason, '') as reason_text,
            IFNULL(response.link_label, '') as link_label,
            IFNULL(response.link_url, '') as link_url,
            response.response as response,
            'NOTIFY_AUTHOR' AS ACTION_CODE,
            idea.PRE_STATUS_CODE || '_PRE_STATUS_CODE_' ||  transition.CODE || '_TRANSITION_ID_' || 'PHASE' || '_ACTION_TYPE_'as HISTORY_OBJECT_INFO
        from
            :lt_current as time,
            (select  t_h.*,lag(t_h.status_code, 1, NULL) over (partition by t_h.id order by t_h.history_at asc) as PRE_STATUS_CODE
            ,lag(t_h.PHASE_CODE, 1, NULL) over (partition by t_h.id order by t_h.history_at asc) as PRE_PHASE_CODE
                from "sap.ino.db.idea::t_idea_h" as t_h) as idea
            inner join "sap.ino.db.campaign::t_campaign_phase" as campaign_phase
            on campaign_phase.PHASE_CODE = idea.PRE_PHASE_CODE and campaign_phase.CAMPAIGN_ID = idea.CAMPAIGN_ID
            left outer join 
                "sap.ino.db.idea::t_decision" as response
            on idea.id = response.idea_id and
                idea.history_at = response.created_at
            left outer join "sap.ino.db.status::t_status_model_transition_stage" as transition
                on transition.current_status_code = idea.PRE_STATUS_CODE 
                and transition.STATUS_MODEL_CODE = campaign_phase.STATUS_MODEL_CODE
                and transition.status_action_code = response.status_action_code 
        where 
             ((history_biz_event = 'STATUS_ACTION_sap.ino.config.START_NEXT_PHASE' and transition.status_action_code='sap.ino.config.START_NEXT_PHASE') or
            (history_biz_event = 'STATUS_ACTION_sap.ino.config.RESTART_PREV_PHASE' and transition.status_action_code='sap.ino.config.RESTART_PREV_PHASE') ) 
            and history_at > time.latest and response.send_response = 1
        union all
        select
            idea.id as object_id, 'IDEA' as object_type_code,
            idea.history_at as event_at, idea.history_biz_event as notification_code, 
            idea.history_actor_id as actor_id, idea.created_by_id as owner_id, 
            left(idea.name, 100) as object_text, null as sub_text, campaign_status_setting.ID as involved_id,
            idea.campaign_id, 
            IFNULL(response.text_module_code, '') as text_module_code, 
            IFNULL(response.reason_code, '') as reason_code,
            IFNULL(response.reason, '') as reason_text,
            IFNULL(response.link_label, '') as link_label,
            IFNULL(response.link_url, '') as link_url,
            response.response as response,
            'CHANGE_STATUS' AS ACTION_CODE,
            idea.PRE_STATUS_CODE || '_PRE_STATUS_CODE_' ||  transition.CODE || '_TRANSITION_ID_' || IFNULL(response.DECIDER_ID,0) || '_DECIDER_ID_'as HISTORY_OBJECT_INFO
        from
            :lt_current as time,
             (select  t_h.*,lag(t_h.status_code, 1, NULL) over (partition by t_h.id order by t_h.history_at asc) as PRE_STATUS_CODE 
                from "sap.ino.db.idea::t_idea_h" as t_h) as idea
            inner join "sap.ino.db.campaign::t_campaign_phase" as campaign_phase
            on campaign_phase.PHASE_CODE = idea.PHASE_CODE and campaign_phase.CAMPAIGN_ID = idea.CAMPAIGN_ID
            left outer join 
                "sap.ino.db.idea::t_decision" as response
            on idea.id = response.idea_id and
                idea.history_at = response.created_at
            left outer join "sap.ino.db.status::t_status_model_transition_stage" as transition
            on transition.current_status_code = idea.PRE_STATUS_CODE and transition.next_status_code = idea.status_code and transition.STATUS_MODEL_CODE = campaign_phase.STATUS_MODEL_CODE
            left outer join "sap.ino.db.newnotification::t_notification_campaign_status_setting" as campaign_status_setting
            on campaign_status_setting.CAMPAIGN_PHASE_ID = campaign_phase.ID and transition.CODE = campaign_status_setting.STATUS_ACTION_CODE
        where 
            (history_biz_event like 'STATUS_ACTION%' or history_biz_event = 'IDEA_CREATED') and (history_biz_event <> 'STATUS_ACTION_sap.ino.config.START_NEXT_PHASE' and history_biz_event <> 'STATUS_ACTION_sap.ino.config.RESTART_PREV_PHASE') and
            history_at > time.latest 
        ;
    -- ldea change author
    lt_Idea_change_author = select
            id as object_id, 'IDEA' as object_type_code,
            history_at as event_at, history_biz_event as notification_code,
            history_actor_id as actor_id, created_by_id as owner_id,
            left(name, 100) as object_text, null as sub_text, 0 as involved_id,
            campaign_id, null as response,
            'CHANGE_AUTHOR' as ACTION_CODE,
            lag(I_H.created_by_id, 1, null) over (partition by I_H.id order by I_H.history_at asc) || '_PRE_AUTHOR_ID' as HISTORY_OBJECT_INFO
        from
            "sap.ino.db.idea::t_idea_h" AS I_H
        where 
            (history_biz_event = 'IDEA_CHANGE_AUTHOR' or history_biz_event = 'IDEA_CREATED');
    -- ldea reassign campaign
    lt_Idea_reassign_campaign = select
            idea_h.id as object_id, 'IDEA' as object_type_code, idea_h.history_at as event_at, idea_h.history_biz_event as notification_code,
            idea_h.history_actor_id  as actor_id, idea_h.created_by_id as OWNER_ID,
            LEFT(idea_h.name, 100) as OBJECT_TEXT, null as SUB_TEXT, 0 as INVOLVED_ID,
            idea_h.campaign_id, null as response,
            'REASSIGN_CAMPAIGN' as ACTION_CODE,
            lag(idea_h.campaign_id, 1, NULL) over (partition by idea_h.id order by idea_h.history_at asc) || '_PRE_CAMPAIGN_ID' as HISTORY_OBJECT_INFO
        from
            :lt_current as time,
            "sap.ino.db.idea::t_idea_h" as idea_h
        where
            (idea_h.history_biz_event = 'IDEA_CAMPAIGN_REASSIGN' or idea_h.history_biz_event = 'IDEA_CREATED' )and 
            idea_h.campaign_id is not null;  
    -- Idea phase change
    lt_Idea_Phase_Change = select
            idea.id as object_id, 'IDEA' as object_type_code,
            idea.history_at as event_at, idea.history_biz_event as notification_code, 
            idea.history_actor_id as actor_id, idea.created_by_id as owner_id, 
            left(idea.name, 100) as object_text, null as sub_text, 0 as involved_id,
            campaign_id, 
            IFNULL(response.text_module_code, ' ') as text_module_code, 
            IFNULL(response.reason_code, ' ') as reason_code,
            IFNULL(response.reason, ' ') as reason_text,
            IFNULL(response.link_label, ' ') as link_label,
            IFNULL(response.link_url, ' ') as link_url,
            response.response as response,
            'CHANGE_IDEA_PHASE' AS ACTION_CODE,
            lag(idea.status_code, 1, NULL) over (partition by idea.id order by idea.history_at asc) || '_PRE_STATUS_CODE_' ||  lag(idea.phase_code, 1, NULL) over (partition by idea.id order by idea.history_at asc) 
            || '_PRE_PHASE_CODE_' || response.DECIDER_ID || '_DECIDER_ID_' as HISTORY_OBJECT_INFO
        from
            "sap.ino.db.idea::t_idea_h" as idea
            left outer join 
                "sap.ino.db.idea::t_decision" as response
            on idea.id = response.idea_id and
                idea.history_at = response.created_at 
        where 
            (history_biz_event = 'STATUS_ACTION_sap.ino.config.START_NEXT_PHASE' or history_biz_event = 'STATUS_ACTION_sap.ino.config.RESTART_PREV_PHASE' or history_biz_event = 'STATUS_ACTION_SUBMIT');
    -- Idea decision change
    lt_Idea_Decision_Change = select
            idea.id as object_id, 'IDEA' as object_type_code,
            idea.history_at as event_at, idea.history_biz_event as notification_code, 
            idea.history_actor_id as actor_id, idea.created_by_id as owner_id, 
            left(idea.name, 100) as object_text, null as sub_text, 0 as involved_id,
            campaign_id, 
            IFNULL(response.text_module_code, '') as text_module_code, 
            IFNULL(response.reason_code, '') as reason_code,
            IFNULL(response.reason, '') as reason_text,
            IFNULL(response.link_label, '') as link_label,
            IFNULL(response.link_url, '') as link_url,
            response.response as response,
            'CHANGE_DECISION' AS ACTION_CODE,
             response.DECIDER_ID || '_DECIDER_ID_' as HISTORY_OBJECT_INFO
        from
            :lt_current as time,
            "sap.ino.db.idea::t_idea_h" as idea
            left outer join 
                "sap.ino.db.idea::t_decision_h" as response
            on idea.id = response.idea_id and
                idea.history_at = response.history_at 
        where 
            (idea.history_biz_event = 'CHANGE_DECISION') and
            idea.history_at > time.latest 
        UNION ALL 
        select
            idea.id as object_id, 'IDEA' as object_type_code,
            idea.history_at as event_at, idea.history_biz_event as notification_code, 
            idea.history_actor_id as actor_id, idea.created_by_id as owner_id, 
            left(idea.name, 100) as object_text, null as sub_text, 0 as involved_id,
            campaign_id, 
            IFNULL(response.text_module_code, '') as text_module_code, 
            IFNULL(response.reason_code, '') as reason_code,
            IFNULL(response.reason, '') as reason_text,
            IFNULL(response.link_label, '') as link_label,
            IFNULL(response.link_url, '') as link_url,
            response.response as response,
            'NOTIFY_AUTHOR' AS ACTION_CODE,
            'DECISION'  || '_ACTION_TYPE_' || response.DECIDER_ID || '_DECIDER_ID_'as HISTORY_OBJECT_INFO
        from
            :lt_current as time,
            "sap.ino.db.idea::t_idea_h" as idea
            left outer join 
                "sap.ino.db.idea::t_decision_h" as response
            on idea.id = response.idea_id and
                idea.history_at = response.history_at 
        where 
            (idea.history_biz_event = 'CHANGE_DECISION') and
            idea.history_at > time.latest and response.send_response = 1; 
    lt_eval_req =
--for newly created evaluation request item    
        select
           eval_req.id                as object_id,   'EVAL_REQUEST'                                            as object_type_code,
           eval_req.history_at        as event_at,    'EVAL_REQ_CREATED'                                        as notification_code,
           eval_req.history_actor_id  as actor_id,    ifnull(eval_req.created_by_id, eval_req.created_by_id)    as owner_id,
           left(idea.name, 100)            as object_text, null                                                           as sub_text,
           idea.ID                               as involved_id,
           idea.campaign_id,
           'EVALUATION_REQUEST_CREATED' AS ACTION_CODE
        from 
            :lt_current as time,
            "sap.ino.db.evaluation::t_evaluation_request_h" as eval_req
            left outer join 
               "sap.ino.db.idea::t_idea"                         as idea
               on idea.id = eval_req.idea_id
        where 
             history_at > time.latest and eval_req.history_biz_event = 'EVAL_REQ_CREATED' 
--for re-assigned situation
        union
        select
           eval_req_item.id                as object_id,   'EVAL_REQUEST_ITEM'                                            as object_type_code,
           eval_req_item.history_at        as event_at,    'EVAL_REQ_ITEM_CREATED'                                        as notification_code,
           eval_req_item.history_actor_id  as actor_id,    ifnull(eval_req_item.created_by_id, eval_req.created_by_id)    as owner_id,
           left(idea.name, 100)            as object_text, null                                                           as sub_text,
           idea.ID                               as involved_id,
           idea.campaign_id,
           'EVALUATION_REQUEST_CREATED' AS ACTION_CODE
        from 
            :lt_current as time,
            "sap.ino.db.evaluation::t_evaluation_request_item_h" as eval_req_item
            left outer join
               "sap.ino.db.evaluation::t_evaluation_request"     as eval_req
               on eval_req.id = eval_req_item.eval_req_id
            left outer join 
               "sap.ino.db.idea::t_idea"                         as idea
               on idea.id = eval_req.idea_id
        where 
             history_at > time.latest and eval_req_item.history_biz_event = 'EVAL_REQ_UPDATED' and eval_req_item.history_db_event = 'CREATED' and not exists(
                 select * from "sap.ino.db.evaluation::t_evaluation_request_item_h" as delete_item where (delete_item.history_biz_event = 'EVAL_REQ_DELETED' or delete_item.history_biz_event = 'EVAL_REQ_ITEM_DELETED') and
                                                                                                         delete_item.id = eval_req_item.id and
                                                                                                         delete_item.eval_req_id = eval_req_item.eval_req_id
             )
        union
        select
           eval_req.id                as object_id,   'EVAL_REQUEST'                                            as object_type_code,
           eval_req.history_at        as event_at,    'EVAL_REQ_DELETED'                                        as notification_code,
           eval_req.history_actor_id  as actor_id,    eval_req.created_by_id    as owner_id,
           left(idea.name, 100)            as object_text, null                                                           as sub_text,
           idea.ID                                as involved_id,
           idea.campaign_id,
           'EVALUATION_REQUEST_DELETED' AS ACTION_CODE
        from 
            :lt_current as time,
            "sap.ino.db.evaluation::t_evaluation_request_h" as eval_req
            left outer join 
               "sap.ino.db.idea::t_idea"                         as idea
               on idea.id = eval_req.idea_id
        where 
             history_at > time.latest and eval_req.history_biz_event = 'EVAL_REQ_DELETED' and eval_req.history_db_event = 'DELETED' 
        union
        -- select
        --   eval_req_item.eval_req_id       as object_id,   'EVAL_REQUEST_ITEM'                                                 as object_type_code,
        --   eval_req_item.history_at        as event_at,    eval_req_item.history_biz_event                                as notification_code,
        --   eval_req_item.history_actor_id  as actor_id,    ifnull(eval_req_item.created_by_id, eval_req.created_by_id)    as owner_id,
        --   left(idea.name, 100)            as object_text, null                                                           as sub_text,
        --   idea.ID                               as involved_id,
        --   idea.campaign_id,
        --   'EVALUATION_REQUEST_START_PROCESS' AS ACTION_CODE
        -- from 
        --     :lt_current as time,
        --     "sap.ino.db.evaluation::t_evaluation_request_item_h" as eval_req_item
        --     left outer join
        --       "sap.ino.db.evaluation::t_evaluation_request"     as eval_req
        --       on eval_req.id = eval_req_item.eval_req_id
        --     left outer join 
        --       "sap.ino.db.idea::t_idea"                         as idea
        --       on idea.id = eval_req.idea_id
        -- where 
        --      history_at > time.latest and eval_req_item.history_biz_event = 'STATUS_ACTION_sap.ino.config.EVAL_REQ_START_PROCESS' and not exists(
        --          select * from "sap.ino.db.evaluation::t_evaluation_request_item_h" as delete_item where (delete_item.history_biz_event = 'EVAL_REQ_DELETED' or delete_item.history_biz_event = 'EVAL_REQ_ITEM_DELETED') and
        --                                                                                                  delete_item.id = eval_req_item.id and
        --                                                                                                  delete_item.eval_req_id = eval_req_item.eval_req_id
        --      )
        -- union
        select
           eval_req_item.id       as object_id,   'EVAL_REQUEST_ITEM'                                                 as object_type_code,
           eval_req_item.history_at        as event_at,    eval_req_item.history_biz_event                                as notification_code,
           eval_req_item.history_actor_id  as actor_id,    ifnull(eval_req_item.created_by_id, eval_req.created_by_id)    as owner_id,
           left(idea.name, 100)            as object_text, null                                                           as sub_text,
           idea.ID                               as involved_id,
           idea.campaign_id,
           'EVALUATION_REQUEST_COMPLETED' AS ACTION_CODE
        from 
            :lt_current as time,
            "sap.ino.db.evaluation::t_evaluation_request_item_h" as eval_req_item
            left outer join
               "sap.ino.db.evaluation::t_evaluation_request"     as eval_req
               on eval_req.id = eval_req_item.eval_req_id
            left outer join 
               "sap.ino.db.idea::t_idea"                         as idea
               on idea.id = eval_req.idea_id
        where 
             history_at > time.latest and eval_req_item.history_biz_event = 'STATUS_ACTION_sap.ino.config.EVAL_REQ_COMPLETE' and not exists(
                 select * from "sap.ino.db.evaluation::t_evaluation_request_item_h" as delete_item where (delete_item.history_biz_event = 'EVAL_REQ_DELETED' or delete_item.history_biz_event = 'EVAL_REQ_ITEM_DELETED') and
                                                                                                         delete_item.id = eval_req_item.id and
                                                                                                         delete_item.eval_req_id = eval_req_item.eval_req_id
             )
        union
        select
           eval_req_item.id       as object_id,   'EVAL_REQUEST_ITEM'                                                 as object_type_code,
           eval_req_item.history_at        as event_at,    eval_req_item.history_biz_event                                as notification_code,
           eval_req_item.history_actor_id  as actor_id,    ifnull(eval_req_item.created_by_id, eval_req.created_by_id)    as owner_id,
           left(idea.name, 100)            as object_text, null                                                           as sub_text,
           idea.ID                               as involved_id,
           idea.campaign_id,
           'EVALUATION_REQUEST_ACCEPTED' AS ACTION_CODE
        from 
            :lt_current as time,
            "sap.ino.db.evaluation::t_evaluation_request_item_h" as eval_req_item
            left outer join
               "sap.ino.db.evaluation::t_evaluation_request"     as eval_req
               on eval_req.id = eval_req_item.eval_req_id
            left outer join 
               "sap.ino.db.idea::t_idea"                         as idea
               on idea.id = eval_req.idea_id
        where 
             history_at > time.latest and eval_req_item.history_biz_event = 'STATUS_ACTION_sap.ino.config.EVAL_REQ_ACCEPT' and not exists(
                 select * from "sap.ino.db.evaluation::t_evaluation_request_item_h" as delete_item where (delete_item.history_biz_event = 'EVAL_REQ_DELETED' or delete_item.history_biz_event = 'EVAL_REQ_ITEM_DELETED') and
                                                                                                         delete_item.id = eval_req_item.id and
                                                                                                         delete_item.eval_req_id = eval_req_item.eval_req_id
             )
        union
        select
           eval_req_item.id       as object_id,   'EVAL_REQUEST_ITEM'                                                 as object_type_code,
           eval_req_item.history_at        as event_at,    eval_req_item.history_biz_event                                as notification_code,
           eval_req_item.history_actor_id  as actor_id,    ifnull(eval_req_item.created_by_id, eval_req.created_by_id)    as owner_id,
           left(idea.name, 100)            as object_text, null                                                           as sub_text,
           idea.ID                               as involved_id,
           idea.campaign_id,
           'EVALUATION_REQUEST_REJECTED' AS ACTION_CODE
        from 
            :lt_current as time,
            "sap.ino.db.evaluation::t_evaluation_request_item_h" as eval_req_item
            left outer join
               "sap.ino.db.evaluation::t_evaluation_request"     as eval_req
               on eval_req.id = eval_req_item.eval_req_id
            left outer join 
               "sap.ino.db.idea::t_idea"                         as idea
               on idea.id = eval_req.idea_id
        where 
             history_at > time.latest and eval_req_item.history_biz_event = 'STATUS_ACTION_sap.ino.config.EVAL_REQ_REJECT' and not exists(
                 select * from "sap.ino.db.evaluation::t_evaluation_request_item_h" as delete_item where (delete_item.history_biz_event = 'EVAL_REQ_DELETED' or delete_item.history_biz_event = 'EVAL_REQ_ITEM_DELETED') and
                                                                                                         delete_item.id = eval_req_item.id and
                                                                                                         delete_item.eval_req_id = eval_req_item.eval_req_id
             )
        union
        --Retrieve those items which will be expired in 1 day
        select
           eval_req_item.id                as object_id,   'EVAL_REQUEST_ITEM'                                            as object_type_code,
           CURRENT_UTCTIMESTAMP            as event_at,    'EVAL_REQ_EXPIRE_IN_ONE_DAY'                                   as notification_code,
           eval_req.created_by_id          as actor_id,    eval_req.created_by_id                                         as owner_id,
           left(idea.name, 100)            as object_text, null                                                              as sub_text,
           idea.ID                               as involved_id,
           idea.campaign_id,
           'EVALUATION_REQUEST_DUE_TO_EXPIRE' AS ACTION_CODE
        from 
            :lt_current as time,
            "sap.ino.db.evaluation::t_evaluation_request_item" as eval_req_item
            left outer join
               "sap.ino.db.evaluation::t_evaluation_request"     as eval_req
               on eval_req.id = eval_req_item.eval_req_id
            left outer join 
               "sap.ino.db.idea::t_idea"                         as idea
               on idea.id = eval_req.idea_id
        where 
             eval_req_item.status_code <> 'sap.ino.config.EVAL_REQ_ITEM_EXPIRED' and add_days(CURRENT_UTCTIMESTAMP, 1) >= eval_req.accept_date  and CURRENT_UTCTIMESTAMP <= eval_req.accept_date and  
             NOT exists( select * from "sap.ino.db.notification::t_notification" where object_id = eval_req_item.id and object_type_code = 'EVAL_REQUEST_ITEM' and
                                                                                       notification_code = 'EVAL_REQ_EXPIRE_IN_ONE_DAY')
        --for clarification case
        union
        select
           eval_req_item.id                           as object_id,             'EVAL_REQUEST_ITEM'                          as object_type_code,
           eval_req_item_clarification.created_at     as event_at,              
           case when eval_req_owner.id is not null then
                      'EVAL_REQ_ITEM_CLARIFICATION_RECEIVED'          
                when eval_req_item_expert.id is not null then
                      'EVAL_REQ_ITEM_CLARIFICATION_SENT'      
           end as notification_code,
           eval_req_item_clarification.created_by_id  as actor_id,              eval_req_item_clarification.created_by_id    as owner_id,
           left(idea.name, 100)                       as object_text,           null                                         as sub_text,
           idea.ID                                          as involved_id,
           idea.campaign_id,
           case when eval_req_owner.id is not null then
                      'RECEIPT_OF_REQUEST_CLARIFICATION'           
                when eval_req_item_expert.id is not null then
                      'DELIVERY_OF_REQUEST_CLARIFICATION'      
           end as ACTION_CODE
        from 
            :lt_current as time,
            "sap.ino.db.evaluation::t_evaluation_request_item_clarification" as eval_req_item_clarification
            left outer join
               "sap.ino.db.evaluation::t_evaluation_request_item" as eval_req_item
               on eval_req_item.id = eval_req_item_clarification.eval_req_item_id
            left outer join
               "sap.ino.db.evaluation::t_evaluation_request"     as eval_req
               on eval_req.id = eval_req_item.eval_req_id
            left outer join 
               "sap.ino.db.evaluation::v_evaluation_request_owner"  as eval_req_owner
               on eval_req_item_clarification.eval_req_id = eval_req_owner.eval_req_id and
                  eval_req_item_clarification.created_by_id = eval_req_owner.identity_id
            left outer join 
               "sap.ino.db.evaluation::v_evaluation_request_expert"  as eval_req_item_expert
               on eval_req_item_clarification.eval_req_item_id = eval_req_item_expert.eval_req_item_id  and
                  eval_req_item_clarification.created_by_id = eval_req_item_expert.identity_id
            left outer join 
               "sap.ino.db.idea::t_idea"                         as idea
               on idea.id = eval_req.idea_id
        where 
             eval_req_item_clarification.created_at > time.latest
        -- union
        -- select
        --   eval_req_item.id                as object_id,   'EVAL_REQUEST_ITEM'                                            as object_type_code,
        --   eval_req_item.history_at        as event_at,    eval_req_item.history_biz_event                                as notification_code,
        --   eval_req_item.history_actor_id  as actor_id,    ifnull(eval_req_item.created_by_id, eval_req.created_by_id)    as owner_id,
        --   left(idea.name, 100)            as object_text, null                                                           as sub_text,
        --   idea.ID                               as involved_id,
        --   idea.campaign_id,
        --   'EVALUATION_REQUEST_DUE_TO_EXPIRE' AS ACTION_CODE
        -- from 
        --     :lt_current as time,
        --     "sap.ino.db.evaluation::t_evaluation_request_item_h" as eval_req_item
        --     left outer join
        --       "sap.ino.db.evaluation::t_evaluation_request"     as eval_req
        --       on eval_req.id = eval_req_item.eval_req_id
        --     left outer join 
        --       "sap.ino.db.idea::t_idea"                         as idea
        --       on idea.id = eval_req.idea_id
        -- where 
        --      history_at > time.latest and eval_req_item.history_biz_event = 'EVAL_REQ_ITEM_EXPIRED' and not exists(
        --          select * from "sap.ino.db.evaluation::t_evaluation_request_item_h" as delete_item where (delete_item.history_biz_event = 'EVAL_REQ_DELETED' or delete_item.history_biz_event = 'EVAL_REQ_ITEM_DELETED') and
        --                                                                                                  delete_item.id = eval_req_item.id and
        --                                                                                                  delete_item.eval_req_id = eval_req_item.eval_req_id
        --      )
        union
        select
           eval_req_item.id                as object_id,   'EVAL_REQUEST_ITEM'                                            as object_type_code,
           item_forward.forwarded_at       as event_at,    'EVAL_REQ_ITEM_FORWARDED'                                      as notification_code,
           item_forward.from_identity      as actor_id,    item_forward.from_identity                                     as owner_id,
           left(idea.name, 100)            as object_text, null                                                           as sub_text,
           idea.ID                               as involved_id,
           idea.campaign_id,
           'EVALUATION_REQUEST_FORWARDED' AS ACTION_CODE
        from 
            :lt_current as time,
            "sap.ino.db.evaluation::t_evaluation_request_item_forward" as item_forward
            left outer join "sap.ino.db.evaluation::t_evaluation_request" as eval_req
               on eval_req.id = item_forward.eval_req_id
            left outer join "sap.ino.db.evaluation::t_evaluation_request_item" as eval_req_item
               on eval_req_item.id = item_forward.eval_req_item_id
            left outer join "sap.ino.db.idea::t_idea" as idea
               on idea.id = eval_req.idea_id
        where forwarded_at > time.latest;
        
    -- get all history events that happened since last notification run 
    lt_history = 
    --Notification for vote idea 
    select vote.IDEA_ID as object_id, 'IDEA' as object_type_code,
        vote.CREATED_AT as event_at, 'VOTE_IDEA' as notification_code,
        vote.USER_ID as actor_id, vote.USER_ID as owner_id,
        left(object.name, 100) as object_text, null as sub_text, 0 as involved_id,
        object.CAMPAIGN_ID, null as response,
        'VOTE_IDEA' as action_code,
        null as HISTORY_OBJECT_INFO
        from :lt_current as time,
            "sap.ino.db.idea::t_vote" as vote
        inner join
         :lt_object as object
            on vote.IDEA_ID = object.id and
            object.type_code = 'IDEA'
        where
            CREATED_AT > time.latest
    UNION ALL
    --Notification for create campaign 
    select campaign.ID as object_id, 'CAMPAIGN' as object_type_code,
        campaign.history_at as event_at, campaign.history_biz_event as notification_code,
        campaign.HISTORY_ACTOR_ID as actor_id, campaign.CREATED_BY_ID as owner_id,
        left(object.name, 100) as object_text, null as sub_text, 0 as involved_id,
        object.CAMPAIGN_ID, null as response,
        case when campaign.history_biz_event = 'CAMP_CREATED' then 'CREATE_DRAFT_CAMPAIGN'  
        when (campaign.history_biz_event = 'CAMP_SUBMITTED' or campaign.history_biz_event = 'CAMP_MAJOR_PUBLISH') and campaign.status_code = 'sap.ino.config.CAMP_PUBLISHED' 
            and campaign.register_from <= current_utctimestamp 
            and current_utctimestamp <= campaign.register_to
        then 'PUBLISH_FOR_REGISTRATION' end as action_code,
        null as HISTORY_OBJECT_INFO
        from :lt_current as time,
            "sap.ino.db.campaign::t_campaign_h" as campaign
        inner join
         :lt_object as object
            on campaign.ID = object.id and
            object.type_code = 'CAMPAIGN'
        where 
            ((campaign.history_biz_event = 'CAMP_CREATED' AND (NOT EXISTS (SELECT 1 FROM "sap.ino.db.campaign::t_campaign_h" AS CAMP WHERE CAMP.ID = campaign.ID AND CAMP.history_biz_event = 'CAMP_SUBMITTED' AND CAMP.history_at > time.latest)))
             or campaign.history_biz_event = 'CAMP_SUBMITTED' or campaign.history_biz_event = 'CAMP_MAJOR_PUBLISH') and
            history_at > time.latest
            
    UNION ALL
    --Notification for create campaign 
    select campaign.ID as object_id, 'CAMPAIGN' as object_type_code,
        campaign.history_at as event_at, campaign.history_biz_event as notification_code,
        campaign.HISTORY_ACTOR_ID as actor_id, campaign.CREATED_BY_ID as owner_id,
        left(object.name, 100) as object_text, null as sub_text, 0 as involved_id,
        object.CAMPAIGN_ID, null as response,
        'PUBLISH_CAMPAIGN' as action_code,
        null as HISTORY_OBJECT_INFO
        from :lt_current as time,
            "sap.ino.db.campaign::t_campaign_h" as campaign
        inner join
         :lt_object as object
            on campaign.ID = object.id and
            object.type_code = 'CAMPAIGN'
        where 
             campaign.history_biz_event = 'CAMP_SUBMITTED' and
            history_at > time.latest
    UNION ALL
    --Notification for updating and deleting campaign blog
    select object.CAMPAIGN_ID as object_id, 'CAMPAIGN' as object_type_code,
        blog.history_at as event_at, blog.history_biz_event as notification_code,
        blog.HISTORY_ACTOR_ID as actor_id, blog.CREATED_BY_ID as owner_id,
        left(object.name, 100) as object_text, null as sub_text, 0 as involved_id,
        object.CAMPAIGN_ID, null as response,
        case when blog.history_biz_event = 'BLOG_DELETED' then 'DELETE_CAMPAIGN_BLOG'  
        ELSE 'EDIT_CAMPAIGN_BLOG' end as action_code,
        null as HISTORY_OBJECT_INFO
        from :lt_current as time,
            "sap.ino.db.blog::t_blog_h" as blog
        inner join
         :lt_object as object
            on blog.object_id = object.id and
            object.type_code = 'CAMPAIGN'
        where 
            ( blog.history_biz_event = 'BLOG_DELETED' or blog.history_biz_event = 'BLOG_UPDATED')and
            history_at > time.latest
    UNION ALL
    --Notification for publish campaign blog
    select object.CAMPAIGN_ID as object_id, 'CAMPAIGN' as object_type_code,
        blog.history_at as event_at, blog.history_biz_event as notification_code,
        blog.HISTORY_ACTOR_ID as actor_id, blog.CREATED_BY_ID as owner_id,
        left(object.name, 100) as object_text, null as sub_text, blog.id as involved_id,
        object.CAMPAIGN_ID, null as response,
        'PUBLISH_CAMPAIGN_BLOG' as action_code,
        null as HISTORY_OBJECT_INFO
        from :lt_current as time,
            "sap.ino.db.blog::t_blog_h" as blog
        inner join
         :lt_object as object
            on blog.object_id = object.id and
            object.type_code = 'CAMPAIGN'
        where 
            ( blog.history_biz_event = 'BLOG_MAJORPUBLISH')and
            history_at > time.latest
    UNION ALL 
    --Notification for follow idea
    select follow.object_id as object_id, 'FOLLOW' as object_type_code,
        follow.history_at as event_at, follow.history_biz_event as notification_code,
        follow.HISTORY_ACTOR_ID as actor_id, follow.CREATED_BY_ID as owner_id,
        left(object.name, 100) as object_text, null as sub_text, 0 as involved_id,
        object.CAMPAIGN_ID, null as response,
        case when follow.history_biz_event = 'FOLLOW_CREATED' then 'FOLLOW_IDEA'  
        ELSE 'UNFOLLOW_IDEA' end as action_code,
        null as HISTORY_OBJECT_INFO
        from :lt_current as time,
            "sap.ino.db.follow::t_follow_h" as follow
        inner join
         :lt_object as object
            on follow.object_id = object.id and
            object.type_code = 'IDEA'
        where 
            (follow.history_biz_event = 'FOLLOW_CREATED' or follow.history_biz_event = 'FOLLOW_DELETED') and follow.OBJECT_TYPE_CODE = 'IDEA' and
            history_at > time.latest
    --Notification for follow campaign
    union all
    select follow.object_id as object_id, 'FOLLOW' as object_type_code,
        follow.history_at as event_at, follow.history_biz_event as notification_code,
        follow.HISTORY_ACTOR_ID as actor_id, follow.CREATED_BY_ID as owner_id,
        left(object.name, 100) as object_text, null as sub_text, 0 as involved_id,
        object.ID AS CAMPAIGN_ID, null as response,
        case when follow.history_biz_event = 'FOLLOW_CREATED' then 'FOLLOW_CAMPAIGN'  
        ELSE 'UNFOLLOW_CAMPAIGN' end as action_code,
        null as HISTORY_OBJECT_INFO
        from :lt_current as time,
            "sap.ino.db.follow::t_follow_h" as follow
        inner join
         :lt_object as object
            on follow.object_id = object.id and
            object.type_code = 'CAMPAIGN'
        where 
            (follow.history_biz_event = 'FOLLOW_CREATED' or follow.history_biz_event = 'FOLLOW_DELETED') and  follow.OBJECT_TYPE_CODE = 'CAMPAIGN' and
            history_at > time.latest
    --Notification for follow tag
    union all
    select object.id as object_id, 'FOLLOW' as object_type_code,
        follow.history_at as event_at, follow.history_biz_event as notification_code,
        follow.HISTORY_ACTOR_ID as actor_id, follow.CREATED_BY_ID as owner_id,
        left(object.name, 100) as object_text, null as sub_text, 0 as involved_id,
        0 AS CAMPAIGN_ID, null as response,
        case when follow.history_biz_event = 'FOLLOW_CREATED' then 'FOLLOW_TAG'  
        ELSE 'UNFOLLOW_TAG' end as action_code,
        null as HISTORY_OBJECT_INFO
        from :lt_current as time,
            "sap.ino.db.follow::t_follow_h" as follow
        inner join
         "sap.ino.db.tag::t_tag" as object
            on follow.object_id = object.id 
        where 
            (follow.history_biz_event = 'FOLLOW_CREATED' or follow.history_biz_event = 'FOLLOW_DELETED') and  follow.OBJECT_TYPE_CODE = 'TAG' and
            history_at > time.latest
    union all
    --Notification for integration object
    select integration.IDEA_ID as object_id, 'IDEA' as object_type_code,
        integration.history_at as event_at, integration.history_biz_event as notification_code,
        integration.HISTORY_ACTOR_ID as actor_id, integration.HISTORY_ACTOR_ID as owner_id,
        left(object.name, 100) as object_text, null as sub_text, 0 as involved_id,
        integration.CAMPAIGN_ID, null as response,
        case when integration.history_biz_event = 'OBJECT_UPDATE' then 'UPDATE_OBJECT'  
        when integration.history_biz_event = 'OBJECT_CREATE' then 'CREATE_OBJECT' 
        ELSE 'REMOVE_OBJECT' end as action_code,
        integration.INTEGRATION_OBJECT_UUID || '_INTEGRATION_OBJECT_UUID' as HISTORY_OBJECT_INFO
        from :lt_current as time,
            "sap.ino.db.integration::t_idea_object_integration_h" as integration
        inner join
         :lt_object as object
            on integration.IDEA_ID = object.id and
            object.type_code = 'IDEA'
        where 
            (integration.history_biz_event = 'OBJECT_UPDATE' or integration.history_biz_event = 'OBJECT_CREATE' or integration.history_biz_event = 'OBJECT_DELETE')and
            history_at > time.latest
            
    union all
    --Notification for reward
    select rewards.IDEA_ID as object_id, 'IDEA' as object_type_code,
        rewards.history_at as event_at, rewards.history_biz_event as notification_code,
        rewards.HISTORY_ACTOR_ID as actor_id, rewards.CREATED_BY_ID as owner_id,
        left(object.name, 100) as object_text, rewards.STATUS_CODE as sub_text, 0 as involved_id,
        object.campaign_id, null as response,
        case rewards.history_biz_event when 'REWARD_CREATED' then 'CREATE_REWARD' else 'DELETE_REWARD' end as action_code,
        rewards.IDEA_PHASE_CODE || '_IDEA_PHASE_CODE' || (select STRING_AGG(AUTHOR_ID,',') from"sap.ino.db.reward::t_reward" where REWARD_LIST_ID = rewards.ID and history_at = rewards.HISTORY_AT) || '_AUTHOR_ID' as HISTORY_OBJECT_INFO
        from :lt_current as time,
            "sap.ino.db.reward::t_reward_list_h" as rewards
        inner join
         :lt_object as object
            on rewards.IDEA_ID = object.id and
            object.type_code = 'IDEA'
        where 
            (rewards.history_biz_event = 'REWARD_CREATED' or rewards.history_biz_event = 'REWARDS_DELETE' or rewards.history_biz_event = 'REWARD_DELETED')and
            history_at > time.latest
            
    -- union all
    -- --Notification for feeds
    -- select
    --         feed.object_id as object_id, feed.object_type_code as object_type_code, event_at, 'FOLLOW_' || feed.feed_code as notification_code,
    --         feed.actor_id as actor_id, feed.followed_by_id as owner_id,
    --         feed.object_text as object_text, feed.involved_obj_text as sub_text, IFNULL(feed.involved_id, feed.object_id) as involved_id, 
    --         feed.campaign_id as campaign_id, null as response,
    --         'FEED' as ACTION_CODE,
    --         null as HISTORY_OBJECT_INFO
    --     from
    --         "sap.ino.db.notification::v_notification_campaign_feeds" as feed
    --     where
    --         (feed_code = 'DATE_REACHED_SUBMIT_TO' or feed_code = 'DATE_REACHED_SUBMIT_FROM'
    --         or feed_code = 'DATE_REACHED_REGISTER_TO' or feed_code = 'DATE_REACHED_REGISTER_FROM'
    --         or feed_code = 'BLOG_MAJORPUBLISH' or feed_code = 'STATUS_ACTION_SUBMIT' or feed_code = 'DATE_REACHED_VALID_TO') and object_type_code = 'CAMPAIGN'
            
    union all
    select 
        campaign.id as object_id, 'CAMPAIGN' as object_type_code,
        current_utctimestamp as event_at, 'IDEA_SUBMISSION_SOON' as notification_code,
        0 as actor_id, 0 as owner_id,
        left(local.name, 100) as object_text, null as sub_text, campaign.id as involved_id,
        campaign.id as campaign_id, null as response,
        'IDEA_SUBMISSION_SOON' as ACTION_CODE,
        NULL AS HISTORY_OBJECT_INFO
        from "sap.ino.db.campaign::t_campaign" as campaign
        inner join "sap.ino.db.campaign::v_campaign_t_locale" as local
            on campaign.id = local.campaign_id
        where campaign.status_code = 'sap.ino.config.CAMP_PUBLISHED' and TO_DATE(campaign.submit_from) >= TO_DATE(current_utctimestamp) and TO_DATE(campaign.submit_from) <= TO_DATE(ADD_DAYS (current_utctimestamp, 1)) and
                campaign.id not in (select campaign_id from :lt_notification_for_campaign_date where action_code = 'IDEA_SUBMISSION_SOON')
    union all
    select 
        campaign.id as object_id, 'CAMPAIGN' as object_type_code,
        current_utctimestamp as event_at, 'IDEA_SUBMISSION_DUE_TO_EXPIRE' as notification_code,
        0 as actor_id, 0 as owner_id,
        left(local.name, 100) as object_text, null as sub_text, campaign.id as involved_id,
        campaign.id as campaign_id, null as response,
        'IDEA_SUBMISSION_DUE_TO_EXPIRE' as ACTION_CODE,
        NULL AS HISTORY_OBJECT_INFO
        from "sap.ino.db.campaign::t_campaign" as campaign
        inner join "sap.ino.db.campaign::v_campaign_t_locale" as local
            on campaign.id = local.campaign_id 
        where campaign.status_code = 'sap.ino.config.CAMP_PUBLISHED' and TO_DATE(campaign.submit_to) >= TO_DATE(current_utctimestamp) and TO_DATE(campaign.submit_to) <= TO_DATE(ADD_DAYS (current_utctimestamp, 1)) and
                campaign.id not in (select campaign_id from :lt_notification_for_campaign_date where action_code = 'IDEA_SUBMISSION_DUE_TO_EXPIRE')
    union all
    select 
        campaign.id as object_id, 'CAMPAIGN' as object_type_code,
        current_utctimestamp as event_at, 'CAMPAIGN_START_SOON' as notification_code,
        0 as actor_id, 0 as owner_id,
        left(local.name, 100) as object_text, null as sub_text, campaign.id as involved_id,
        campaign.id as campaign_id, null as response,
        'CAMPAIGN_START_SOON' as ACTION_CODE,
        NULL AS HISTORY_OBJECT_INFO
        from "sap.ino.db.campaign::t_campaign" as campaign
        inner join "sap.ino.db.campaign::v_campaign_t_locale" as local
            on campaign.id = local.campaign_id 
        where campaign.status_code = 'sap.ino.config.CAMP_PUBLISHED' and TO_DATE(campaign.VALID_FROM) >= TO_DATE(current_utctimestamp) and TO_DATE(campaign.VALID_FROM) <= TO_DATE(ADD_DAYS (current_utctimestamp, 1)) and
                campaign.id not in (select campaign_id from :lt_notification_for_campaign_date where action_code = 'CAMPAIGN_START_SOON')
    union all
    select 
        campaign.id as object_id, 'CAMPAIGN' as object_type_code,
        current_utctimestamp as event_at, 'CAMPAIGN_DUE_TO_EXPIRE' as notification_code,
        0 as actor_id, 0 as owner_id,
        left(local.name, 100) as object_text, null as sub_text, campaign.id as involved_id,
        campaign.id as campaign_id, null as response,
        'CAMPAIGN_DUE_TO_EXPIRE' as ACTION_CODE,
        NULL AS HISTORY_OBJECT_INFO
        from "sap.ino.db.campaign::t_campaign" as campaign
        inner join "sap.ino.db.campaign::v_campaign_t_locale" as local
            on campaign.id = local.campaign_id 
        where campaign.status_code = 'sap.ino.config.CAMP_PUBLISHED' and TO_DATE(campaign.VALID_TO) >= TO_DATE(current_utctimestamp) and TO_DATE(campaign.VALID_TO) <= TO_DATE(ADD_DAYS (current_utctimestamp, 1)) and
                campaign.id not in (select campaign_id from :lt_notification_for_campaign_date where action_code = 'CAMPAIGN_DUE_TO_EXPIRE')
    union all
    select 
        campaign.id as object_id, 'CAMPAIGN' as object_type_code,
        current_utctimestamp as event_at, 'CAMPAIGN_REGISTRATION_SOON' as notification_code,
        0 as actor_id, 0 as owner_id,
        left(local.name, 100) as object_text, null as sub_text, campaign.id as involved_id,
        campaign.id as campaign_id, null as response,
        'CAMPAIGN_REGISTRATION_SOON' as ACTION_CODE,
        NULL AS HISTORY_OBJECT_INFO
        from "sap.ino.db.campaign::t_campaign" as campaign
        inner join "sap.ino.db.campaign::v_campaign_t_locale" as local
            on campaign.id = local.campaign_id 
        where campaign.status_code = 'sap.ino.config.CAMP_PUBLISHED' and TO_DATE(campaign.REGISTER_FROM) >= TO_DATE(current_utctimestamp) and TO_DATE(campaign.REGISTER_FROM) <= TO_DATE(ADD_DAYS (current_utctimestamp, 1)) and
                campaign.id not in (select campaign_id from :lt_notification_for_campaign_date where action_code = 'CAMPAIGN_REGISTRATION_SOON')
    union all
    select 
        campaign.id as object_id, 'CAMPAIGN' as object_type_code,
        current_utctimestamp as event_at, 'CAMPAIGN_REGISTRATION_DUE_TO_EXPIRE' as notification_code,
        0 as actor_id, 0 as owner_id,
        left(local.name, 100) as object_text, null as sub_text, campaign.id as involved_id,
        campaign.id as campaign_id, null as response,
        'CAMPAIGN_REGISTRATION_DUE_TO_EXPIRE' as ACTION_CODE,
        NULL AS HISTORY_OBJECT_INFO
        from "sap.ino.db.campaign::t_campaign" as campaign
        inner join "sap.ino.db.campaign::v_campaign_t_locale" as local
            on campaign.id = local.campaign_id 
        where campaign.status_code = 'sap.ino.config.CAMP_PUBLISHED' and TO_DATE(campaign.REGISTER_TO) >= TO_DATE(current_utctimestamp) and TO_DATE(campaign.REGISTER_TO) <= TO_DATE(ADD_DAYS (current_utctimestamp, 1)) and
                campaign.id not in (select campaign_id from :lt_notification_for_campaign_date where action_code = 'CAMPAIGN_REGISTRATION_DUE_TO_EXPIRE')
    union all
    --notification for registration request creation
    select register.campaign_id as object_id, 'REGISTRATION_REQUEST' as object_type_code,
        register.history_at as event_at, register.history_biz_event as notification_code,
        register.applicant_id as actor_id, register.applicant_id as owner_id,
        register.history_biz_event as object_text, null as sub_text, 0 as involved_id,
        register.campaign_id, null as response,
        'REGISTER_FOR_CAMPAIGN' as ACTION_CODE,
        NULL AS HISTORY_OBJECT_INFO
        from :lt_current as time,
            "sap.ino.db.campaign::t_registration_h" as register
            inner join "sap.ino.db.campaign::t_campaign" as campaign on 
                campaign_id = campaign.id 
            where  (is_register_auto_approve <> 1 or is_register_auto_approve is null) and
                register.history_biz_event = 'CAMP_REGISTER_CREATED' and
                history_at > time.latest
                and register.applicant_id is not null
    union all
    --notification for registration request update
        select register.campaign_id as object_id, 'REGISTRATION_REQUEST' as object_type_code,
        register.history_at as event_at, register.history_biz_event as notification_code,
        register.approver_id as actor_id, register.applicant_id as owner_id,
        left(object.name, 100) as object_text, register.status as sub_text, 0 as involved_id,
        register.campaign_id, null as response,
        'REJECT_LETTER_FOR_REGISTRATION' as ACTION_CODE,
        register.REASON AS HISTORY_OBJECT_INFO
        from :lt_current as time,
            "sap.ino.db.campaign::t_registration_h" as register
        inner join
         :lt_object as object
            on register.campaign_id = object.id and
            object.type_code = 'CAMPAIGN'
        where 
            register.history_biz_event = 'CAMP_REGISTER_UPDATED' and
            history_at > time.latest
            and register.status = 'sap.ino.config.REGISTER_REJECTED'
    union all
    --notification for registration request update
        select register.campaign_id as object_id, 'REGISTRATION_REQUEST' as object_type_code,
        register.history_at as event_at, register.history_biz_event as notification_code,
        IFNULL(register.approver_id,0) as actor_id, register.applicant_id as owner_id,
        left(object.name, 100) as object_text, register.status as sub_text, 0 as involved_id,
        register.campaign_id, null as response,
        'APPROVAL_LETTER_FOR_REGISTRATION' as ACTION_CODE,
        register.REASON AS HISTORY_OBJECT_INFO
        from :lt_current as time,
            "sap.ino.db.campaign::t_registration_h" as register
        inner join
         :lt_object as object
            on register.campaign_id = object.id and
            object.type_code = 'CAMPAIGN'
        where 
            register.history_biz_event = 'CAMP_REGISTER_UPDATED' and
            history_at > time.latest
            and register.status = 'sap.ino.config.REGISTER_APPROVED'
    union all
        select
            id as object_id, 'IDEA' as object_type_code,
            history_at as event_at, history_biz_event as notification_code,
            history_actor_id as actor_id, created_by_id as owner_id,
            left(name, 100) as object_text, null as sub_text, 0 as involved_id,
            campaign_id, null as response,
            'LOOKING_FOR_CONTRIBUTOR' as ACTION_CODE,
            null as HISTORY_OBJECT_INFO
        from
            :lt_current as time,
            "sap.ino.db.idea::t_idea_h" AS I_H
        where 
            (history_biz_event = 'IDEA_CREATED'  AND EXISTS (SELECT 1 FROM "sap.ino.db.idea::t_idea" AS I WHERE I.ID = I_H.ID AND I.status_code <> 'sap.ino.config.DRAFT')) and
            history_at > time.latest and I_H.IS_OPEN_FOR_CONTRIBUTORS = 1
    union all
        select
            author.object_id, author.object_type_code,author.event_at, author.notification_code, author.actor_id, author.owner_id, 
            author.object_text, author.sub_text, author.involved_id,  author.campaign_id, 
            author.response,
            author.ACTION_CODE,
            author.HISTORY_OBJECT_INFO
        from
            :lt_current as time,
            :lt_Idea_change_author as author
        where 
            notification_code = 'IDEA_CHANGE_AUTHOR'  and
            event_at > time.latest
    union all
        select
            id as object_id, 'IDEA' as object_type_code,
            history_at as event_at, history_biz_event as notification_code,
            history_actor_id as actor_id, created_by_id as owner_id,
            left(name, 100) as object_text, null as sub_text, 0 as involved_id,
            I_H.campaign_id, null as response,
            'SUBMIT_IDEA' as ACTION_CODE,
            NULL AS HISTORY_OBJECT_INFO
        from
            :lt_current as time,
            "sap.ino.db.idea::t_idea_h" AS I_H
        where 
            history_biz_event = 'STATUS_ACTION_SUBMIT'  AND history_at > time.latest
    union all
        select
            id as object_id, 'IDEA' as object_type_code,
            history_at as event_at, history_biz_event as notification_code,
            history_actor_id as actor_id, created_by_id as owner_id,
            left(name, 100) as object_text, null as sub_text, 0 as involved_id,
            campaign_id, null as response,
            'DELETE_IDEA' as ACTION_CODE,
            NULL AS HISTORY_OBJECT_INFO
        from
            :lt_current as time,
            "sap.ino.db.idea::t_idea_h" AS I_H
        where 
            history_biz_event = 'IDEA_DELETED' and history_at > time.latest
    union all
        select
            id as object_id, 'IDEA' as object_type_code,
            history_at as event_at, history_biz_event as notification_code,
            history_actor_id as actor_id, created_by_id as owner_id,
            left(name, 100) as object_text, null as sub_text, 0 as involved_id,
            campaign_id, null as response,
            'CHANGE_IDEA' as ACTION_CODE,
            NULL AS HISTORY_OBJECT_INFO
        from
            :lt_current as time,
            "sap.ino.db.idea::t_idea_h" AS I_H
        where 
             history_biz_event = 'IDEA_UPDATED' AND I_H.status_code <> 'sap.ino.config.DRAFT' and history_at > time.latest
    union all
        select
            object_id, object_type_code,event_at, notification_code, actor_id, owner_id, 
            object_text, sub_text, involved_id,  campaign_id, 
            IFNULL(text_module_code, ' ') || '_INO_TEXT_CODE_' || 
            IFNULL(reason_code, ' ') || '_INO_REASON_CODE_' ||
            IFNULL(reason_text, ' ') || '_INO_REASON_TEXT_' ||
            IFNULL(link_label, ' ') || '_INO_LINK_LABEL_' ||
            IFNULL(link_url, ' ') || '_INO_LINK_URL_' ||
            IFNULL(response, ' ') as response,
            ACTION_CODE,
            HISTORY_OBJECT_INFO
        from
            :lt_decision
            where notification_code like 'STATUS_ACTION%' and notification_code <> 'STATUS_ACTION_SUBMIT'
    union all
        select
            object_id, object_type_code,event_at, notification_code, actor_id, owner_id, 
            object_text, sub_text, involved_id,  campaign_id, 
            IFNULL(phase_change.text_module_code, ' ') || '_INO_TEXT_CODE_' || 
            IFNULL(phase_change.reason_code, ' ') || '_INO_REASON_CODE_' ||
            IFNULL(phase_change.reason_text, ' ') || '_INO_REASON_TEXT_' ||
            IFNULL(phase_change.link_label, ' ') || '_INO_LINK_LABEL_' ||
            IFNULL(phase_change.link_url, ' ') || '_INO_LINK_URL_' ||
            IFNULL(phase_change.response, ' ') as response,
            ACTION_CODE,
            HISTORY_OBJECT_INFO
        from
            :lt_current as time,
            :lt_Idea_Phase_Change   as phase_change
            where (phase_change.notification_code = 'STATUS_ACTION_sap.ino.config.START_NEXT_PHASE' or phase_change.notification_code = 'STATUS_ACTION_sap.ino.config.RESTART_PREV_PHASE') and event_at > time.latest
    union all
        select
            object_id, object_type_code,event_at, notification_code, actor_id, owner_id, 
            object_text, sub_text, involved_id,  campaign_id, 
            IFNULL(text_module_code, ' ') || '_INO_TEXT_CODE_' || 
            IFNULL(reason_code, ' ') || '_INO_REASON_CODE_' ||
            IFNULL(reason_text, ' ') || '_INO_REASON_TEXT_' ||
            IFNULL(link_label, ' ') || '_INO_LINK_LABEL_' ||
            IFNULL(link_url, ' ') || '_INO_LINK_URL_' ||
            IFNULL(response, ' ') as response,
            ACTION_CODE,
            HISTORY_OBJECT_INFO
        from
            :lt_Idea_Decision_Change  
    union all
        select
            object.id as object_id, comment.object_type_code,
            comment.history_at as event_at, comment.history_biz_event as notification_code, 
            comment.history_actor_id as actor_id, object.created_by_id as owner_id,
            left(object.name, 100) as object_text, comment.comment as sub_text, IFNULL(comment.OBJECT_ID,0) as involved_id,
            object.campaign_id, null as response,
            'DELETE_IDEA_COMMENT' AS ACTION_CODE,
            NULL AS HISTORY_OBJECT_INFO
        from
            :lt_current as time,
            "sap.ino.db.comment::v_community_comment_h" as comment
        inner join
            :lt_object as object
            on comment.object_id = object.id and
                comment.object_type_code = object.type_code
        where
            comment.history_biz_event = 'COMMENT_DELETED' and comment.history_at > time.latest and comment.object_type_code='IDEA'
    union all
        select
            object.id as object_id, comment.object_type_code,
            comment.history_at as event_at, comment.history_biz_event as notification_code, 
            comment.history_actor_id as actor_id, object.created_by_id as owner_id,
            left(object.name, 100) as object_text, comment.comment as sub_text, IFNULL(comment.OBJECT_ID,0) as involved_id,
            object.campaign_id, null as response,
            'DELETE_CAMPAIGN_COMMENT' AS ACTION_CODE,
            NULL AS HISTORY_OBJECT_INFO
        from
            :lt_current as time,
            "sap.ino.db.comment::v_community_comment_h" as comment
        inner join
            :lt_object as object
            on comment.object_id = object.id and
                comment.object_type_code = object.type_code
        where
            comment.history_biz_event = 'COMMENT_DELETED' and comment.history_at > time.latest and comment.object_type_code='CAMPAIGN'
    union all
        select
            object.id as object_id, comment.object_type_code,
            comment.history_at as event_at, comment.history_biz_event as notification_code, 
            comment.history_actor_id as actor_id, object.created_by_id as owner_id,
            left(object.name, 100) as object_text, comment.comment as sub_text, IFNULL(comment.OBJECT_ID,0) as involved_id,
            object.campaign_id, null as response,
            'REPLY_IDEA_COMMENT' AS ACTION_CODE,
            NULL AS HISTORY_OBJECT_INFO
        from
            :lt_current as time,
            "sap.ino.db.comment::v_community_comment_h" as comment
        inner join
            :lt_object as object
            on comment.object_id = object.id and
                comment.object_type_code = object.type_code
        where
            comment.history_biz_event = 'COMMENT_CREATED' and comment.history_at > time.latest and comment.parent_id is not null
    union all
        select
            object.id as object_id, comment.object_type_code,
            comment.history_at as event_at, comment.history_biz_event as notification_code, 
            comment.history_actor_id as actor_id, object.created_by_id as owner_id,
            left(object.name, 100) as object_text, comment.comment as sub_text, IFNULL(comment.OBJECT_ID,0) as involved_id,
            object.campaign_id, null as response,
            'EDIT_IDEA_COMMENT' AS ACTION_CODE,
            NULL AS HISTORY_OBJECT_INFO
        from
            :lt_current as time,
            "sap.ino.db.comment::v_community_comment_h" as comment
        inner join
            :lt_object as object
            on comment.object_id = object.id and
                comment.object_type_code = object.type_code
        where
            comment.history_biz_event = 'COMMENT_UPDATED' and comment.history_at > time.latest and comment.object_type_code='IDEA'
     union all
        select
            object.id as object_id, comment.object_type_code,
            comment.history_at as event_at, comment.history_biz_event as notification_code, 
            comment.history_actor_id as actor_id, object.created_by_id as owner_id,
            left(object.name, 100) as object_text, comment.comment as sub_text, IFNULL(comment.OBJECT_ID,0) as involved_id,
            object.campaign_id, null as response,
            'EDIT_CAMPAIGN_COMMENT' AS ACTION_CODE,
            NULL AS HISTORY_OBJECT_INFO
        from
            :lt_current as time,
            "sap.ino.db.comment::v_community_comment_h" as comment
        inner join
            :lt_object as object
            on comment.object_id = object.id and
                comment.object_type_code = object.type_code
        where
            comment.history_biz_event = 'COMMENT_UPDATED' and comment.history_at > time.latest and comment.object_type_code='CAMPAIGN'
    union all
        select
            object_id, object_type_code, history_at as event_at,
            case history_db_event when 'CREATED' then 'CONTRIB_ADDED' else 'CONTRIB_REMOVED' end as notification_code,
            history_actor_id as actor_id, idea.created_by_id as owner_id,
            left(idea.name, 100) as object_text, null as sub_text, idea_role_h.identity_id as involved_id,
            idea.campaign_id, null as response,
            case history_db_event when 'CREATED' then 'ADD_COAUTHOR' else 'REMOVE_COAUTHOR' end as ACTION_CODE,
            (select STRING_AGG(con_identity.IDENTITY_ID,',') FROM"sap.ino.db.iam::t_object_identity_role_h" as con_identity where con_identity.HISTORY_AT = idea_role_h.HISTORY_AT and con_identity.history_db_event = idea_role_h.history_db_event ) || '_CONTRIBUTOR_ID' AS HISTORY_OBJECT_INFO
        from
            :lt_current as time,
            (SELECT *,row_number() over(partition by object_id,history_at order by history_at asc) as r FROM"sap.ino.db.iam::t_object_identity_role_h" ) as idea_role_h
        inner join
            "sap.ino.db.idea::t_idea" as idea
            on idea_role_h.object_type_code = 'IDEA' and 
                idea_role_h.object_id = idea.id
        where
            history_db_event <> 'UPDATED' and 
            idea_role_h.role_code = 'IDEA_CONTRIBUTOR' and
            idea_role_h.object_type_code = 'IDEA' and 
            history_at > time.latest and idea_role_h.r = 1
    union all
        select
            object_id, object_type_code, history_at as event_at,
            case history_db_event when 'CREATED' then 'EXPERT_ASSIGNED' else 'EXPERT_UNASSIGNED' end as notification_code,
            history_actor_id as actor_id, idea.created_by_id as owner_id,
            left(idea.name, 100) as object_text, null as sub_text, idea_role_h.identity_id as involved_id,
            idea.campaign_id, null as response,
            case history_db_event when 'CREATED' then 'ASSIGN_EXPERT' else 'UNASSIGN_EXPERT' end as action_code,
            null as HISTORY_OBJECT_INFO
        from
            :lt_current as time,
            "sap.ino.db.iam::t_object_identity_role_h" as idea_role_h
        inner join
            "sap.ino.db.idea::t_idea" as idea
            on idea_role_h.object_type_code = 'IDEA' and 
                idea_role_h.object_id = idea.id
        where
            history_db_event <> 'UPDATED' and 
            idea_role_h.role_code = 'IDEA_EXPERT' and
            idea_role_h.object_type_code = 'IDEA' and 
            history_at > time.latest
    union all
        select
            object_id, object_type_code, history_at as event_at,
            case history_db_event when 'CREATED' then 'COACH_ASSIGNED' else 'COACH_UNASSIGNED' end as notification_code,
            history_actor_id as actor_id, idea.created_by_id as owner_id,
            left(idea.name, 100) as object_text, null as sub_text, idea_role_h.identity_id as involved_id,
            idea.campaign_id, null as response,
            case history_db_event when 'CREATED' then 'ASSIGN_COACH' else 'UNASSIGN_COACH' end as ACTION_CODE,
            null as HISTORY_OBJECT_INFO
        from 
            :lt_current as time,
            "sap.ino.db.iam::t_object_identity_role_h" as idea_role_h 
            inner join
                "sap.ino.db.idea::t_idea" as idea
                on idea_role_h.object_type_code = 'IDEA' and 
                    idea_role_h.object_id = idea.id
        where 
            ( history_biz_event = 'COACH_ASSIGNED' or history_biz_event = 'COACH_UNASSIGNED' ) and  
            idea_role_h.role_code = 'IDEA_COACH' and idea_role_h.object_type_code = 'IDEA' and
            history_at > time.latest
    union all
        select
            object_id, object_type_code, history_at as event_at,
            case history_db_event when 'CREATED' then 'COACH_ASSIGNED' else 'COACH_UNASSIGNED' end as notification_code,
            history_actor_id as actor_id, idea.created_by_id as owner_id,
            left(idea.name, 100) as object_text, null as sub_text, idea_role_h.identity_id as involved_id,
            idea.campaign_id, null as response,
            case history_db_event when 'CREATED' then 'ASSIGN_COACH' else 'UNASSIGN_COACH' end as ACTION_CODE,
            NULL AS HISTORY_OBJECT_INFO
        from
            :lt_current as time,
            "sap.ino.db.iam::t_object_identity_role_h" as idea_role_h
            inner join
                "sap.ino.db.idea::t_idea" as idea
                on idea_role_h.object_type_code = 'IDEA' and 
                    idea_role_h.object_id = idea.id
        where
            history_db_event <> 'UPDATED' and 
            idea_role_h.role_code = 'IDEA_COACH' and
            idea_role_h.object_type_code = 'IDEA' and 
            history_at > time.latest
    union all
        select
            comment.object_id, comment.object_type_code, identity_role.history_at as event_at, identity_role.history_biz_event as notification_code, 
            identity_role.history_actor_id as actor_id, object.created_by_id as owner_id,
            left(object.name, 100) as object_text, comment.comment as sub_text, IFNULL(comment.OBJECT_ID,0) as involved_id,
            object.campaign_id, null as response,
            CASE comment.object_type_code WHEN 'IDEA' THEN 'CREATE_IDEA_COMMENT'
            ELSE 'CREATE_CAMPAIGN_COMMENT' END AS  ACTION_CODE,
            NULL AS HISTORY_OBJECT_INFO
        from
            :lt_current as time,
            "sap.ino.db.iam::t_object_identity_role_h" as identity_role
            inner join
                "sap.ino.db.comment::v_community_comment" as comment
                on identity_role.object_id = comment.id
            inner join
                :lt_object as object
                on comment.object_id = object.id and
                    comment.object_type_code = object.type_code
            where
                (identity_role.object_type_code = 'COMMENT' or
                identity_role.object_type_code = 'CAMPAIGN_COMMENT') and
                identity_role.history_at > time.latest and comment.parent_id is null
    union all 
        select 
            idea_id, 'IDEA' as object_type_code, history_at as event_at, history_biz_event as notification_code, 
            history_actor_id as actor_id, evaluation.created_by_id as owner_id,
            left(idea.name, 100) as object_text, null as sub_text, evaluation.id as involved_id,
            idea.campaign_id, null as response,
            'EVALUATION_UNPUBLISHED' AS ACTION_CODE,
            null as HISTORY_OBJECT_INFO
        from
            :lt_current as time,
            "sap.ino.db.evaluation::t_evaluation_h" as evaluation
            inner join
                "sap.ino.db.idea::t_idea" as idea
                    on idea.id = evaluation.idea_id 
        where
            history_biz_event = 'STATUS_ACTION_sap.ino.config.EVAL_UNPUBLISH' and 
            history_at > time.latest
    union all 
        select 
            idea_id, 'IDEA' as object_type_code, history_at as event_at, history_biz_event as notification_code, 
            history_actor_id as actor_id, evaluation.created_by_id as owner_id,
            left(idea.name, 100) as object_text, null as sub_text, evaluation.id as involved_id,
            idea.campaign_id, null as response,
            'EVALUATION_SUBMITTED' AS ACTION_CODE,
            null as HISTORY_OBJECT_INFO
        from
            :lt_current as time,
            "sap.ino.db.evaluation::t_evaluation_h" as evaluation
            inner join
                "sap.ino.db.idea::t_idea" as idea
                    on idea.id = evaluation.idea_id 
        where
            history_biz_event = 'STATUS_ACTION_sap.ino.config.EVAL_SUBMIT' and 
            history_at > time.latest 
    union all 
        select 
            idea_id, 'IDEA' as object_type_code, history_at as event_at, history_biz_event as notification_code, 
            history_actor_id as actor_id, evaluation.created_by_id as owner_id,
            left(idea.name, 100) as object_text, null as sub_text, evaluation.id as involved_id,
            idea.campaign_id, null as response,
            'EVALUATION_REWORKED' AS ACTION_CODE,
            null as HISTORY_OBJECT_INFO
        from
            :lt_current as time,
            "sap.ino.db.evaluation::t_evaluation_h" as evaluation
            inner join
                "sap.ino.db.idea::t_idea" as idea
                    on idea.id = evaluation.idea_id 
        where
            history_biz_event = 'STATUS_ACTION_sap.ino.config.EVAL_REWORK' and 
            history_at > time.latest 
    union all 
        select 
            idea_id, 'IDEA' as object_type_code, history_at as event_at, history_biz_event as notification_code, 
            history_actor_id as actor_id, evaluation.created_by_id as owner_id,
            left(idea.name, 100) as object_text, null as sub_text, evaluation.id as involved_id,
            idea.campaign_id, null as response,
            'EVALUATION_PUBLISHED_TO_AUTHOR' AS ACTION_CODE,
            null as HISTORY_OBJECT_INFO
        from
            :lt_current as time,
            "sap.ino.db.evaluation::t_evaluation_h" as evaluation
            inner join
                "sap.ino.db.idea::t_idea" as idea
                    on idea.id = evaluation.idea_id 
        where
            history_biz_event = 'STATUS_ACTION_sap.ino.config.EVAL_PUB_SUBMITTER' and 
            history_at > time.latest 
    union all 
        select 
            idea_id, 'IDEA' as object_type_code, history_at as event_at, history_biz_event as notification_code, 
            history_actor_id as actor_id, evaluation.created_by_id as owner_id,
            left(idea.name, 100) as object_text, null as sub_text, evaluation.id as involved_id,
            idea.campaign_id, null as response,
            'EVALUATION_PUBLISHED_TO_COMMUNITY' AS ACTION_CODE,
            null as HISTORY_OBJECT_INFO
        from
            :lt_current as time,
            "sap.ino.db.evaluation::t_evaluation_h" as evaluation
            inner join
                "sap.ino.db.idea::t_idea" as idea
                    on idea.id = evaluation.idea_id 
        where
            history_biz_event = 'STATUS_ACTION_sap.ino.config.EVAL_PUB_COMMUNITY' and 
            history_at > time.latest
    union all 
        select 
            idea_id, 'IDEA' as object_type_code, history_at as event_at, history_biz_event as notification_code, 
            history_actor_id as actor_id, evaluation.created_by_id as owner_id,
            left(idea.name, 100) as object_text, null as sub_text, evaluation.id as involved_id,
            idea.campaign_id, null as response,
            'EVALUATION_DELETED' AS ACTION_CODE,
            null as HISTORY_OBJECT_INFO
        from
            :lt_current as time,
            "sap.ino.db.evaluation::t_evaluation_h" as evaluation
            inner join
                "sap.ino.db.idea::t_idea" as idea
                    on idea.id = evaluation.idea_id 
        where
            history_biz_event = 'EVAL_DELETED' and 
            history_at > time.latest         
    -- union all 
    --     select
    --         id as object_id, type_code as object_type_code, history_at as event_at, history_biz_event as notification_code, 
    --         history_actor_id as actor_id, created_by_id as owner_id,
    --         left(name, 100) as object_text, null as sub_text, id as involved_id,
    --         null as campaign_id, null as response,
    --         'CREATE_USER' AS ACTION_CODE,
    --         NULL AS HISTORY_OBJECT_INFO
    --     from
    --         :lt_current as time,
    --         "sap.ino.db.iam::t_identity_h"
    --     where
    --         history_at > time.latest and history_biz_event = 'IDENTITY_CREATED'
    union all
        select
            object_id, object_type_code,event_at, notification_code, actor_id, owner_id, 
            object_text, sub_text, involved_id,  campaign_id, 
            response,
            ACTION_CODE,
            HISTORY_OBJECT_INFO
        from
            :lt_current as time,
            :lt_Idea_reassign_campaign 
        where 
            notification_code = 'IDEA_CAMPAIGN_REASSIGN'  and
            event_at > time.latest
    union all
        select 
			relation_h.object_id as object_id, 'IDEA' as object_type_code, relation_h.history_at as event_at,
			case relation_h.source when 1 then 'IDEA_RELATION_' || relation_h.semantic || '_SOURCE' else 'IDEA_RELATION_' || relation_h.semantic || '_TARGET' end as notification_code,
			relation_h.history_actor_id, case when idea.created_by_id is not null then idea.created_by_id else 0 end as OWNER_ID, 
			LEFT(idea.name, 100) as OBJECT_TEXT, null as SUB_TEXT,  relation_h.OTHER_OBJECT_ID  as INVOLVED_ID,
			idea.campaign_id, null as response,
			'MERGE_IDEA' AS ACTION_OCDE,
			case when relation_h.semantic = 'sap.ino.config.MERGED' and relation_h.SOURCE = 1 
			THEN (select STRING_AGG(TARGET_OBJECT_ID,',') from"sap.ino.db.link::t_link_h" where OBJECT_ID = relation_h.object_id AND HISTORY_AT > time.latest) || '_SOURCE_IDEA_ID'
			ELSE NULL END AS HISTORY_OBJECT_INFO
		from
		    :lt_current as time,
			"sap.ino.db.link::v_relation_h" as relation_h
			inner join
				(select
				     idea_h.campaign_id,
                     idea_h.id,
                     idea_h.name,
                     idea_h.created_by_id,
                     idea_h.history_at 
                 from				    
                 (select
                     id,
                     max(history_at) as history_at
                 from 
                     "sap.ino.db.idea::t_idea_h" group by id) as idea_h_latest
                     inner join "sap.ino.db.idea::t_idea_h" as idea_h
                     on idea_h.id = idea_h_latest.id and
                         idea_h.history_at = idea_h_latest.history_at
			    ) as idea
		    on idea.id = relation_h.object_id
			where
		    ( relation_h.history_biz_event = 'RELATION_UPDATED') and 
			(relation_h.history_db_event <> 'UPDATED' and relation_h.history_db_event <> 'DELETED') and 
			relation_h.object_type_code = 'IDEA' and 
			relation_h.other_object_type_code = 'IDEA' and
			relation_h.history_at > time.latest
    union all
        select
            follow_up.object_id as object_id, 'IDEA' as object_type_code, follow_up.changed_at as event_at, 'IDEA_FOLLOW_UP' as notification_code,
            follow_up.changed_by_id as actor_id, follow_up.CREATED_BY_ID as owner_id,
            left(idea.name, 100) as object_text, null as sub_text, 0 as involved_id,
            idea.campaign_id, null as response,
            'IDEA_FOLLOW_UP' AS ACTION_CODE,
            follow_up.DATE || '_FOLLOW_UP_DATE' as HISTORY_OBJECT_INFO
        from
            "sap.ino.db.followup::t_follow_up" as follow_up
            inner join
                "sap.ino.db.idea::t_idea" as idea
            on follow_up.object_id = idea.id 
            WHERE (follow_up.is_notification_generated is null or follow_up.is_notification_generated = 0)
                AND add_days(CURRENT_UTCDATE, 1) >= follow_up.DATE  
                AND CURRENT_UTCDATE <= follow_up.DATE 
                
    union all
        --volunteer notification
        select 
            idea.id as object_id, 'IDEA' as object_type_code, 
			volunteer_h.history_at as event_at, volunteer_h.history_biz_event as notification_code, 
            volunteer_h.history_actor_id as actor_id, volunteer_h.created_by_id as owner_id,
            left(idea.name, 100) as object_text, null as sub_text, volunteer_h.IDENTITY_ID as involved_id,
            idea.campaign_id, null as response,
            'ADD_VOLUNTEER' AS ACTION_CODE,
            null as HISTORY_OBJECT_INFO
		from
            :lt_current as time,
             "sap.ino.db.idea::t_volunteers_h" as volunteer_h
            inner join
                "sap.ino.db.idea::t_idea" as idea
                on volunteer_h.idea_id = idea.id
        where
            history_at > time.latest
            and history_biz_event = 'IDEA_VOLUNTEERS_CREATE'
	union all
	    -- Evaluation request
	    select
	        eval_req.object_id, eval_req.object_type_code, eval_req.event_at, eval_req.notification_code,
	        eval_req.actor_id, eval_req.owner_id,eval_req.object_text, eval_req.sub_text, eval_req.involved_id,
	        eval_req.campaign_id, null as response,
	        eval_req.ACTION_CODE,
	        null as HISTORY_OBJECT_INFO
	    from 
	        :lt_eval_req  as eval_req where eval_req.owner_id is not null and eval_req.notification_code is not null;
 
    -- distinct notifications
    lt_notification_input = 
        select 
            "sap.ino.db.notification::s_notification".nextval as notification_id, 
            history.OBJECT_TYPE_CODE, history.OBJECT_ID, history.EVENT_AT, history.NOTIFICATION_CODE,
            history.ACTOR_ID, history.OWNER_ID, history.OBJECT_TEXT, history.SUB_TEXT, history.INVOLVED_ID,
            history.CAMPAIGN_ID, history.RESPONSE,history.ACTION_CODE as ACTION_CODE,
            history.HISTORY_OBJECT_INFO
        from
            :lt_history as history 
        where history.ACTION_CODE is not null 
        group by 
            object_type_code, object_id, event_at, notification_code, actor_id, owner_id, object_text, sub_text, involved_id, campaign_id, response,ACTION_CODE,HISTORY_OBJECT_INFO;


    -- this biz event may already been written to the notification table during another history table update
    -- lt_count = select count(*) as count 
    --     from :lt_history as history, 
    --          "sap.ino.db.notification::t_notification" as notification 
    --     where notification.OBJECT_TYPE_CODE = history.OBJECT_TYPE_CODE and 
    --           notification.OBJECT_ID = history.OBJECT_ID and 
    --           notification.EVENT_AT = history.EVENT_AT and 
    --           notification.NOTIFICATION_CODE = history.NOTIFICATION_CODE and
    --           notification.ACTION_CODE = history.ACTION_CODE and
    --           notification.HISTORY_OBJECT_INFO = history.HISTORY_OBJECT_INFO;

    insert into "sap.ino.db.notification::t_notification" 
    select input.notification_id as ID, input.OBJECT_TYPE_CODE, input.OBJECT_ID, input.EVENT_AT, input.NOTIFICATION_CODE, input.ACTOR_ID, 
          input.OWNER_ID, LEFT(input.OBJECT_TEXT, 100) as OBJECT_TEXT, input.SUB_TEXT, input.INVOLVED_ID, 'NEW' as STATUS_CODE, input.CAMPAIGN_ID, input.RESPONSE,input.ACTION_CODE,input.HISTORY_OBJECT_INFO    
        from  
        -- :lt_count as c,
        :lt_notification_input as input
        inner join "sap.ino.db.newnotification::v_notification_system_setting" as system_setting
        on system_setting.action_code = input.ACTION_CODE
        where 
            -- c.count = 0 and 
            (system_setting.ALLOW_EMAIL_NOTIFICATION = 1 or system_setting.ALLOW_INBOX_NOTIFICATION = 1);
        
    insert into "sap.ino.db.notification::t_notification" 
    select input.notification_id as ID, input.OBJECT_TYPE_CODE, input.OBJECT_ID, input.EVENT_AT, input.NOTIFICATION_CODE, input.ACTOR_ID, 
          input.OWNER_ID, LEFT(input.OBJECT_TEXT, 100) as OBJECT_TEXT, input.SUB_TEXT, input.INVOLVED_ID, 'NEW' as STATUS_CODE, input.CAMPAIGN_ID, input.RESPONSE,input.ACTION_CODE,input.HISTORY_OBJECT_INFO    
        from :lt_notification_input as input
            -- ,:lt_count as c
        where 
            -- c.count = 0 and 
            input.action_code not in(select distinct action_code from"sap.ino.db.newnotification::t_notification_system_setting");
end;
