// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ino.wall.library-all');
if ( !jQuery.sap.isDeclared('sap.ino.wall.ColorPickerRenderer') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.ColorPickerRenderer");

(function() {
    "use strict";

    /**
     * @class ColorPicker renderer.
     * @static
     */
    sap.ino.wall.ColorPickerRenderer = {};

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be rendered
     */
    sap.ino.wall.ColorPickerRenderer.render = function(oRM, oControl) {
        // write the HTML into the render manager
        oRM.write("<span");
        oRM.writeControlData(oControl);
        oRM.addClass("sapInoWallColorPicker");
        oRM.writeClasses();
        oRM.write(">"); // span element
        oRM.write("</span>");
    };

})();
}; // end of sap/ino/wall/ColorPickerRenderer.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.DocumentType') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.DocumentType");

(function() {
    "use strict";
    
    /**
     * @class Specifies a document type for layouting and structuring.
     * 
     * @version 1.16.4
     * @static
     * @public
     * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
     */
    sap.ino.wall.DocumentType = {

        /**
         * A general link without further specifications.
         * 
         * @public
         */
        Misc : "Misc",

        /**
         * A Word document
         * 
         * @public
         */
        Word : "Word",

        /**
         * An Excel document
         * 
         * @public
         */
        Excel : "Excel",

        /**
         * A PowerPoint document
         * 
         * @public
         */
        PowerPoint : "PowerPoint",

        /**
         * A PDF document
         * 
         * @public
         */
        PDF : "PDF",

        /**
         * A Text document
         * 
         * @public
         */
        Text : "Text",

        /**
         * zip file
         * 
         * @public
         */
        Zip : "Zip",

        /**
         * video file
         * 
         * @public
         */
        Video : "Video"

    };
})();
}; // end of sap/ino/wall/DocumentType.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.DragButton') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.DragButton");

(function() {
    "use strict";

    /**
     * Constructor for a new DragButton.
     * 
     * Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and
     * associated objects as well as event handlers.
     * 
     * If the name of a setting is ambiguous (e.g. a property has the same name as an event), then the framework assumes
     * property, aggregation, association, event in that order. To override this automatic resolution, one of the
     * prefixes "aggregation:", "association:" or "event:" can be added to the name of the setting (such a prefixed name
     * must be enclosed in single or double quotes).
     * 
     * The supported settings are:
     * <ul>
     * <li>Properties
     * <ul>
     * </ul>
     * </li>
     * <li>Aggregations
     * <ul>
     * </ul>
     * </li>
     * <li>Associations
     * <ul>
     * </ul>
     * </li>
     * <li>Events
     * <ul>
     * <li>{@link sap.ino.wall.DragButton#event:drag drag} : fnListenerFunction or [fnListenerFunction,
     * oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
     * </ul>
     * </li>
     * </ul>
     * 
     * 
     * In addition, all settings applicable to the base type {@link sap.m.Button#constructor sap.m.Button} can be used
     * as well.
     * 
     * @param {string}
     *            [sId] id for the new control, generated automatically if no id is given
     * @param {object}
     *            [mSettings] initial settings for the new control
     * 
     * @class A button that additionally fires an event when the touchout event on the button
     * @extends sap.m.Button
     * @version 1.16.4
     * 
     * @constructor
     * @public
     * @name sap.ino.wall.DragButton
     * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
     */
    sap.m.Button.extend("sap.ino.wall.DragButton", {
        metadata : {
            events : {
                "drag" : {},
                "activateByKey" : {}
            }
        }
    });

    /**
     * Creates a new subclass of class sap.ino.wall.DragButton with name <code>sClassName</code> and enriches it
     * with the information contained in <code>oClassInfo</code>.
     * 
     * <code>oClassInfo</code> might contain the same kind of informations as described in
     * {@link sap.ui.core.Element.extend Element.extend}.
     * 
     * @param {string}
     *            sClassName name of the class to be created
     * @param {object}
     *            [oClassInfo] object literal with informations about the class
     * @param {function}
     *            [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to
     *            sap.ui.core.ElementMetadata.
     * @return {function} the created class / constructor function
     * @public
     * @static
     * @name sap.ino.wall.DragButton.extend
     * @function
     */

    sap.ino.wall.DragButton.M_EVENTS = {
        'drag' : 'drag',
        'activateByKey' : 'activateByKey'
    };

    /**
     * 
     * @name sap.ino.wall.DragButton#drag
     * @event
     * @param {sap.ui.base.Event}
     *            oControlEvent
     * @param {sap.ui.base.EventProvider}
     *            oControlEvent.getSource
     * @param {object}
     *            oControlEvent.getParameters
     * @public
     */

    /**
     * Attach event handler <code>fnFunction</code> to the 'drag' event of this
     * <code>sap.ino.wall.DragButton</code>.<br/>. When called, the context of the event handler (its
     * <code>this</code>) will be bound to <code>oListener<code> if specified
     * otherwise to this <code>sap.ino.wall.DragButton</code>.<br/> itself. 
     *  
     *
     * @param {object}
     *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
     * @param {function}
     *            fnFunction The function to call, when the event occurs.  
     * @param {object}
     *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ino.wall.DragButton</code>.<br/> itself.
     *
     * @return {sap.ino.wall.DragButton} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.DragButton#attachDrag
     * @function
     */

    /**
     * Detach event handler <code>fnFunction</code> from the 'drag' event of this
     * <code>sap.ino.wall.DragButton</code>.<br/>
     * 
     * The passed function and listener object must match the ones used for event registration.
     * 
     * @param {function}
     *            fnFunction The function to call, when the event occurs.
     * @param {object}
     *            oListener Context object on which the given function had to be called.
     * @return {sap.ino.wall.DragButton} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.DragButton#detachDrag
     * @function
     */

    /**
     * Fire event drag to attached listeners.
     * 
     * @param {Map}
     *            [mArguments] the arguments to pass along with the event.
     * @return {sap.ino.wall.DragButton} <code>this</code> to allow method chaining
     * @protected
     * @name sap.ino.wall.DragButton#fireDrag
     * @function
     */

    /**
     * Initializes the control.
     * 
     * @private
     */
    sap.ino.wall.DragButton.prototype.init = function() {
        this.addStyleClass("sapInoWallDragButton");
    };

    /**
     * Handle the touch start event.
     * 
     * @param {jQuery.EventObject}
     *            oEvent The event object
     * @private
     */
    sap.ino.wall.DragButton.prototype.ontouchstart = function(oEvent) {
        if (sap.ui.Device.system.desktop) {
            // fire the drag event
            this.__wall_bTouchStartHappenedOnThisControl = true;
        }
        if (sap.m.Button.prototype.ontouchstart) {
            sap.m.Button.prototype.ontouchstart.apply(this, arguments);
        }
    };

    /**
     * Handle the touch end event.
     * 
     * @param {jQuery.EventObject}
     *            oEvent The event object
     * @private
     */
    sap.ino.wall.DragButton.prototype.ontouchend = function(oEvent) {
        if (sap.ui.Device.system.desktop) {
            // fire the drag event
            if (this.__wall_bTouchStartHappenedOnThisControl) {
                this.fireDrag();            
            }
            this.__wall_bTouchStartHappenedOnThisControl = false;
            oEvent.stopPropagation();
        }
        if (sap.m.Button.prototype.ontouchend) {
            return sap.m.Button.prototype.ontouchend.apply(this, arguments);
        }
        return false;
    };
    
    /**
     * Handle the key down event.
     * 
     * @param {jQuery.EventObject}
     *            oEvent The event object
     * @private
     */
    sap.ino.wall.DragButton.prototype.onkeydown = function(oEvent) {
        if (oEvent.keyCode === jQuery.sap.KeyCodes.ENTER || oEvent.keyCode === jQuery.sap.KeyCodes.SPACE) {
            this.__wall_bKeyPressStartHappenedOnThisControl = true;
        }

        if (sap.m.Button.prototype.onkeydown) {
            sap.m.Button.prototype.onkeydown.apply(this, arguments);
        }
    };

    /**
     * Handle the key up event.
     * 
     * @param {jQuery.EventObject}
     *            oEvent The event object
     * @private
     */
    sap.ino.wall.DragButton.prototype.onkeyup = function(oEvent) {
        if (oEvent.keyCode === jQuery.sap.KeyCodes.ENTER || oEvent.keyCode === jQuery.sap.KeyCodes.SPACE) {
            if (this.__wall_bKeyPressStartHappenedOnThisControl) {
                this.fireActivateByKey(oEvent);            
            }
            this.__wall_bKeyPressStartHappenedOnThisControl = false;
        }
        
        if (sap.m.Button.prototype.onkeyup) {
            sap.m.Button.prototype.onkeyup.apply(this, arguments);
        }

        oEvent.stopPropagation();
        return false;
    };
})();
}; // end of sap/ino/wall/DragButton.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.DragButtonRenderer') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.DragButtonRenderer");

(function() {
    "use strict";
 
    jQuery.sap.require('sap.m.ButtonRenderer'); // unlisted dependency retained


    /**
     * @class DragButton renderer. 
     * @static
     */
    sap.ino.wall.DragButtonRenderer = sap.m.ButtonRenderer;
    
})();
}; // end of sap/ino/wall/DragButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.DropUpload') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.DropUpload");

(function() {
    "use strict";

    /**
     * Constructor for a new DropUpload.
     * 
     * Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and
     * associated objects as well as event handlers.
     * 
     * If the name of a setting is ambiguous (e.g. a property has the same name as an event), then the framework assumes
     * property, aggregation, association, event in that order. To override this automatic resolution, one of the
     * prefixes "aggregation:", "association:" or "event:" can be added to the name of the setting (such a prefixed name
     * must be enclosed in single or double quotes).
     * 
     * The supported settings are:
     * <ul>
     * <li>Properties
     * <ul>
     * <li>{@link #getSize size} : string (default: 'M')</li>
     * <li>{@link #getIcon icon} : sap.ui.core.URI (default: 'sap-icon://add-photo')</li>
     * <li>{@link #getAccept accept} : string (default: 'image/*')</li>
     * </ul>
     * </li>
     * <li>Aggregations
     * <ul>
     * </ul>
     * </li>
     * <li>Associations
     * <ul>
     * </ul>
     * </li>
     * <li>Events
     * <ul>
     * <li>{@link sap.ino.wall.DropUpload#event:change change} : fnListenerFunction or [fnListenerFunction,
     * oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
     * </ul>
     * </li>
     * </ul>
     * 
     * 
     * @param {string}
     *            [sId] id for the new control, generated automatically if no id is given
     * @param {object}
     *            [mSettings] initial settings for the new control
     * 
     * @class Add your documentation for the newDropUpload
     * @extends sap.ui.core.Control
     * @version 1.16.4
     * 
     * @constructor
     * @public
     * @name sap.ino.wall.DropUpload
     * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
     */
    sap.ui.core.Control.extend("sap.ino.wall.DropUpload", {
        metadata : {
            properties : {
                "size" : {
                    type : "string",
                    group : "Misc",
                    defaultValue : 'M'
                },
                "icon" : {
                    type : "sap.ui.core.URI",
                    group : "Appearance",
                    defaultValue : 'sap-icon://add-photo'
                },
                "accept" : {
                    type : "string",
                    group : "Behavior",
                    defaultValue : 'image/*'
                },
                "tooltip" : {
                    type : "string",
                    group : "Misc",
                    defaultValue : "{i18n>WALL_DROPUPLOAD_STATUSMSG_DROP}"
                }
            },
            aggregations : {
                "_icon" : {
                    type : "sap.ui.core.Icon",
                    multiple : false,
                    visibility : "hidden"
                }
            },
            events : {
                "change" : {}
            }
        }
    });

    /**
     * Creates a new subclass of class sap.ino.wall.DropUpload with name <code>sClassName</code> and enriches it
     * with the information contained in <code>oClassInfo</code>.
     * 
     * <code>oClassInfo</code> might contain the same kind of informations as described in
     * {@link sap.ui.core.Element.extend Element.extend}.
     * 
     * @param {string}
     *            sClassName name of the class to be created
     * @param {object}
     *            [oClassInfo] object literal with informations about the class
     * @param {function}
     *            [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to
     *            sap.ui.core.ElementMetadata.
     * @return {function} the created class / constructor function
     * @public
     * @static
     * @name sap.ino.wall.DropUpload.extend
     * @function
     */

    sap.ino.wall.DropUpload.M_EVENTS = {
        'change' : 'change'
    };

    /**
     * Getter for property <code>size</code>. The T-Shirt size of the upload control.
     * 
     * Default value is <code>M</code>
     * 
     * @return {string} the value of property <code>size</code>
     * @public
     * @name sap.ino.wall.DropUpload#getSize
     * @function
     */

    /**
     * Setter for property <code>size</code>.
     * 
     * Default value is <code>M</code>
     * 
     * @param {string}
     *            sSize new value for property <code>size</code>
     * @return {sap.ino.wall.DropUpload} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.DropUpload#setSize
     * @function
     */

    /**
     * Getter for property <code>icon</code>. The icon that is displayed within the upload control.
     * 
     * Default value is <code>sap-icon://add-photo</code>
     * 
     * @return {sap.ui.core.URI} the value of property <code>icon</code>
     * @public
     * @name sap.ino.wall.DropUpload#getIcon
     * @function
     */

    /**
     * Setter for property <code>icon</code>.
     * 
     * Default value is <code>sap-icon://add-photo</code>
     * 
     * @param {sap.ui.core.URI}
     *            sIcon new value for property <code>icon</code>
     * @return {sap.ino.wall.DropUpload} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.DropUpload#setIcon
     * @function
     */

    /**
     * Getter for property <code>accept</code>. The icon that is displayed within the upload control.
     * 
     * Default value is <code>image/*</code>
     * 
     * @return {string} the value of property <code>accept</code>
     * @public
     * @name sap.ino.wall.DropUpload#getAccept
     * @function
     */

    /**
     * Setter for property <code>accept</code>.
     * 
     * Default value is <code>image/*</code>
     * 
     * @param {string}
     *            sAccept new value for property <code>accept</code>
     * @return {sap.ino.wall.DropUpload} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.DropUpload#setAccept
     * @function
     */

    /**
     * 
     * @name sap.ino.wall.DropUpload#change
     * @event
     * @param {sap.ui.base.Event}
     *            oControlEvent
     * @param {sap.ui.base.EventProvider}
     *            oControlEvent.getSource
     * @param {object}
     *            oControlEvent.getParameters
     * @param {string}
     *            oControlEvent.getParameters.mode The input mode of the upload (Drop or Select).
     * @param {any}
     *            oControlEvent.getParameters.files An array of files to upload.
     * @public
     */

    /**
     * Attach event handler <code>fnFunction</code> to the 'change' event of this
     * <code>sap.ino.wall.DropUpload</code>.<br/>. When called, the context of the event handler (its
     * <code>this</code>) will be bound to <code>oListener<code> if specified
     * otherwise to this <code>sap.ino.wall.DropUpload</code>.<br/> itself. 
     *  
     *
     * @param {object}
     *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
     * @param {function}
     *            fnFunction The function to call, when the event occurs.  
     * @param {object}
     *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ino.wall.DropUpload</code>.<br/> itself.
     *
     * @return {sap.ino.wall.DropUpload} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.DropUpload#attachChange
     * @function
     */

    /**
     * Detach event handler <code>fnFunction</code> from the 'change' event of this
     * <code>sap.ino.wall.DropUpload</code>.<br/>
     * 
     * The passed function and listener object must match the ones used for event registration.
     * 
     * @param {function}
     *            fnFunction The function to call, when the event occurs.
     * @param {object}
     *            oListener Context object on which the given function had to be called.
     * @return {sap.ino.wall.DropUpload} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.DropUpload#detachChange
     * @function
     */

    /**
     * Fire event change to attached listeners.
     * 
     * Expects following event parameters:
     * <ul>
     * <li>'mode' of type <code>string</code> The input mode of the upload (Drop or Select).</li>
     * <li>'files' of type <code>any</code> An array of files to upload.</li>
     * </ul>
     * 
     * @param {Map}
     *            [mArguments] the arguments to pass along with the event.
     * @return {sap.ino.wall.DropUpload} <code>this</code> to allow method chaining
     * @protected
     * @name sap.ino.wall.DropUpload#fireChange
     * @function
     */

    /**
     * Initializes the control.
     * 
     * @private
     */
    sap.ino.wall.DropUpload.prototype.init = function() {
        this._onclickProxy = jQuery.proxy(this._onclick, this);
        this._onkeydownProxy = jQuery.proxy(this._onkeydown, this);
        this._ondropProxy = jQuery.proxy(this._ondrop, this);
        this._onchangeProxy = jQuery.proxy(this._onchange, this);
    };

    /**
     * Destroys the control.
     * 
     * @private
     */
    sap.ino.wall.DropUpload.prototype.exit = function() {
        this._onclickProxy = null;
        this._onkeydownProxy = null;
        this._ondropProxy = null;
        this._onchangeProxy = null;
    };

    /**
     * Adjusts control before rendering. Were place the original events with our delegate functions that fire the hover
     * events-
     * 
     * @private
     */
    sap.ino.wall.DropUpload.prototype.onBeforeRendering = function() {
        this.$().find("#" + this.getId() + "-fileDrop").unbind('drop.dropupload', this._ondropProxy);
        this.$().find("#" + this.getId() + "-fileDrop").unbind('keydown.dropupload', this._onkeydownProxy);
        this.$().find("#" + this.getId() + "-fileDrop").unbind('click.dropupload', this._onclickProxy);
        this.$().find("#" + this.getId() + "-fileUpload").unbind("change.dropupload", this._onchangeProxy);
    };

    /**
     * Adjusts control after rendering.
     * 
     * @private
     */
    sap.ino.wall.DropUpload.prototype.onAfterRendering = function() {
        var iMargin, sSize;

        // create a file drop area
        this.$().find("#" + this.getId() + "-fileDrop").bind('drop.dropupload', this._ondropProxy);
        // when clicking on the drop area open the file selector
        this.$().find("#" + this.getId() + "-fileDrop").bind('click.dropupload', this._onclickProxy);
        // when hitting the drop area open the file selector
        this.$().find("#" + this.getId() + "-fileDrop").bind('keydown.dropupload', this._onkeydownProxy);
        // add change handler to the hidden upload field
        this.$().find("#" + this.getId() + "-fileUpload").bind("change.dropupload", this._onchangeProxy);

        if (!jQuery.support.hasFlexBoxSupport || sap.ui.Device.browser.safari || sap.ui.Device.browser.internet_explorer && sap.ui.Device.browser.version === 10) {
            this.$().addClass("sapUiNoFlex");
            iMargin = -24;
            sSize = this.getSize();
            if (sSize === "S") {
                iMargin = -15;
            } else if (sSize === "L") {
                iMargin = -30;
            }

            //this.$().find(".sapInoWallDropUploadAreaInner").css("margin-top", (iMargin - 10) + "px");
        }
    };

    /**
     * Setter for the size property that also updates the icon.
     * 
     * @public
     * @param {string}
     *            sSize the size property (default M)
     */
    sap.ino.wall.DropUpload.prototype.setSize = function(sSize) {
        var iSize = 48, oIcon = this._getIcon();

        this.setProperty("size", sSize, true);

        if (sSize === "S") {
            iSize = 30;
        } else if (sSize === "L") {
            iSize = 66;
        }

        oIcon.setSize(iSize + "px");
        oIcon.setWidth(iSize + "px");
        oIcon.setHeight((iSize + 10) + "px");
    };

    /* =========================================================== */
    /* begin: internal methods */
    /* =========================================================== */

    /**
     * An internal event handler for the click event. It will open the native upload dialog.
     * 
     * @param oEvent
     */
    sap.ino.wall.DropUpload.prototype._onclick = function(oEvent) {
        this.$().find("#" + this.getId() + "-fileUpload").trigger('click');

        // stop browsers default behavior
        if (oEvent) {
            oEvent.preventDefault();
            oEvent.stopPropagation();
        }
    };

    /**
     * An internal event handler for the keydown event. It will open the native upload dialog.
     * 
     * @param oEvent
     */
    sap.ino.wall.DropUpload.prototype._onkeydown = function(oEvent) {
        if (oEvent) {
            if (oEvent.keyCode === jQuery.sap.KeyCodes.ENTER || oEvent.keyCode === jQuery.sap.KeyCodes.SPACE) {
                this.$().find("#" + this.getId() + "-fileUpload").trigger('click');

                // stop browsers default behavior
                oEvent.preventDefault();
                oEvent.stopPropagation();
            }
        }
    };

    /**
     * An internal event handler for the drop event. it will fire the change event of this control.
     * 
     * @param oEvent
     */
    sap.ino.wall.DropUpload.prototype._ondrop = function(oEvent) {
        this.fireChange({
            mode : "Drop",
            files : oEvent.originalEvent.dataTransfer.files
        });

        // stop browsers default behavior
        if (oEvent) {
            oEvent.preventDefault();
            oEvent.stopPropagation();
        }
    };

    /**
     * Lazy initialization of a control managed in an internal aggregation.
     * 
     * @private
     * @returns {sap.ui.core/Icon} the control
     */
    sap.ino.wall.DropUpload.prototype._onchange = function(oEvent) {
        var $fileUpload = this.$().find("#" + this.getId() + "-fileUpload");

        this.fireChange({
            mode : "Select",
            files : this.$().find("#" + this.getId() + "-fileUpload")[0].files
        });

        // clear the upload form to be able to upload the same file twice
        $fileUpload.replaceWith($fileUpload.clone(true));
    };

    /**
     * Lazy initialization of a control managed in an internal aggregation.
     * 
     * @private
     * @returns {sap.ui.core/Icon} the control
     */
    sap.ino.wall.DropUpload.prototype._getIcon = function() {
        var oControl = this.getAggregation("_icon"), sSize = this.getSize(), iSize = 40;

        if (sSize === "S") {
            iSize = 22;
        } else if (sSize === "L") {
            iSize = 58;
        }

        if (!oControl) {
            // create control
            oControl = new sap.ui.core.Icon({
                src : this.getIcon(),
                size : iSize + "px",
                width : iSize + "px",
                height : (iSize + 10) + "px",
                decorative : true,
                tooltip : this.getTooltip()
            });

            // set hidden aggregation without rerendering
            this.setAggregation("_icon", oControl, true);
        }

        // update icon every access
        oControl.setSrc(this.getIcon());

        return oControl;
    };

})();
}; // end of sap/ino/wall/DropUpload.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.DropUploadRenderer') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.DropUploadRenderer");

(function() {
    "use strict";

    /**
     * @class DropUpload renderer.
     * @static
     */
    sap.ino.wall.DropUploadRenderer = {};

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be rendered
     */
    sap.ino.wall.DropUploadRenderer.render = function(oRM, oControl) {
        var oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ino.wall");

        // write the HTML into the render manager
        oRM.write("<div");
        oRM.writeControlData(oControl);
        oRM.addClass("sapInoWallDropUpload");
        oRM.writeClasses();
        oRM.write(">");

        oRM.write('<div id="' + oControl.getId() + '-fileDrop" tabindex="0" class="sapInoWallDropUploadArea">');
        oRM.write('<div class="sapInoWallDropUploadAreaInner noflip" title="' + oRB.getText("WALL_DROPUPLOAD_STATUSMSG_DROP") + '">');
        oRM.renderControl(oControl._getIcon());
        oRM.write('</div>');
        oRM.write('</div>');
        // upload form (hidden)
        oRM.write('<form><input name="' + oControl.getId() + '-fileUpload" id="' + oControl.getId() + '-fileUpload" class="sapInoWallDropUploadForm" type="file" accept="');
        oRM.writeEscaped(oControl.getAccept());
        oRM.write('"></form>');

        oRM.write("</div>");
    };

})();
}; // end of sap/ino/wall/DropUploadRenderer.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.HeadlineSize') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.HeadlineSize");

(function() {
    "use strict";

    /**
     * @class Specifies a headline size from H1-H6.
     * 
     * @static
     * @public
     */
    sap.ino.wall.HeadlineSize = {

        /**
         * Largest
         * 
         * @public
         */
        H1 : "H1",

        /**
         * Second-largest
         * 
         * @public
         */
        H2 : "H2",

        /**
         * Medium
         * 
         * @public
         */
        H3 : "H3",

        /**
         * smallish
         * 
         * @public
         */
        H4 : "H4",

        /**
         * Second-smallest
         * 
         * @public
         */
        H5 : "H5",

        /**
         * Smallest
         * 
         * @public
         */
        H6 : "H6"

    };
})();
}; // end of sap/ino/wall/HeadlineSize.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.HeadlineType') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.HeadlineType");

(function() {
    "use strict";

    /**
     * @class Specifies a headline type for layouting and structuring.
     * 
     * @static
     * @public
     */
    sap.ino.wall.HeadlineType = {

        /**
         * No background.
         * 
         * @public
         */
        CLEAR : "CLEAR",

        /**
         * A simple box design
         * 
         * @public
         */
        SIMPLE : "SIMPLE",

        /**
         * Bikablo-style brag container
         * 
         * @public
         */
        BRAG : "BRAG",

        /**
         * Elegant dark headline style
         * 
         * @public
         */
        ELEGANT : "ELEGANT",

        /**
         * Cool blueish headline style
         * 
         * @public
         */
        COOL : "COOL"

    };

})();
}; // end of sap/ino/wall/HeadlineType.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.Hoverable') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.Hoverable");

(function() {
    "use strict";

    /**
     * Constructor for a new Hoverable.
     * 
     * Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and
     * associated objects as well as event handlers.
     * 
     * If the name of a setting is ambiguous (e.g. a property has the same name as an event), then the framework assumes
     * property, aggregation, association, event in that order. To override this automatic resolution, one of the
     * prefixes "aggregation:", "association:" or "event:" can be added to the name of the setting (such a prefixed name
     * must be enclosed in single or double quotes).
     * 
     * The supported settings are:
     * <ul>
     * <li>Properties
     * <ul>
     * </ul>
     * </li>
     * <li>Aggregations
     * <ul>
     * <li>{@link #getContent content} : sap.ui.core.Control</li>
     * </ul>
     * </li>
     * <li>Associations
     * <ul>
     * </ul>
     * </li>
     * <li>Events
     * <ul>
     * <li>{@link sap.ino.wall.Hoverable#event:enter enter} : fnListenerFunction or [fnListenerFunction,
     * oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
     * <li>{@link sap.ino.wall.Hoverable#event:leave leave} : fnListenerFunction or [fnListenerFunction,
     * oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
     * </ul>
     * </li>
     * </ul>
     * 
     * 
     * @param {string}
     *            [sId] id for the new control, generated automatically if no id is given
     * @param {object}
     *            [mSettings] initial settings for the new control
     * 
     * @class A Hoverable wraps a control and adds enter and leave events to it.
     * @extends sap.ui.core.Control
     * @version 1.16.4
     * 
     * @constructor
     * @public
     * @name sap.ino.wall.Hoverable
     * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
     */
    sap.ui.core.Control.extend("sap.ino.wall.Hoverable", {
        metadata : {
            aggregations : {
                "content" : {
                    type : "sap.ui.core.Control",
                    multiple : false
                }
            },
            events : {
                "enter" : {},
                "leave" : {}
            }
        }
    });

    /**
     * Creates a new subclass of class sap.ino.wall.Hoverable with name <code>sClassName</code> and enriches it with
     * the information contained in <code>oClassInfo</code>.
     * 
     * <code>oClassInfo</code> might contain the same kind of informations as described in
     * {@link sap.ui.core.Element.extend Element.extend}.
     * 
     * @param {string}
     *            sClassName name of the class to be created
     * @param {object}
     *            [oClassInfo] object literal with informations about the class
     * @param {function}
     *            [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to
     *            sap.ui.core.ElementMetadata.
     * @return {function} the created class / constructor function
     * @public
     * @static
     * @name sap.ino.wall.Hoverable.extend
     * @function
     */

    sap.ino.wall.Hoverable.M_EVENTS = {
        'enter' : 'enter',
        'leave' : 'leave'
    };

    /**
     * Getter for aggregation <code>content</code>.<br/> The control that should be hoverable.
     * 
     * @return {sap.ui.core.Control}
     * @public
     * @name sap.ino.wall.Hoverable#getContent
     * @function
     */

    /**
     * Setter for the aggregated <code>content</code>.
     * 
     * @param {sap.ui.core.Control}
     *            oContent
     * @return {sap.ino.wall.Hoverable} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Hoverable#setContent
     * @function
     */

    /**
     * Destroys the content in the aggregation named <code>content</code>.
     * 
     * @return {sap.ino.wall.Hoverable} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Hoverable#destroyContent
     * @function
     */

    /**
     * 
     * @name sap.ino.wall.Hoverable#enter
     * @event
     * @param {sap.ui.base.Event}
     *            oControlEvent
     * @param {sap.ui.base.EventProvider}
     *            oControlEvent.getSource
     * @param {object}
     *            oControlEvent.getParameters
     * @param {object}
     *            oControlEvent.getParameters.event
     * @public
     */

    /**
     * Attach event handler <code>fnFunction</code> to the 'enter' event of this <code>sap.ino.wall.Hoverable</code>.<br/>.
     * When called, the context of the event handler (its <code>this</code>) will be bound to
     * <code>oListener<code> if specified
     * otherwise to this <code>sap.ino.wall.Hoverable</code>.<br/> itself. 
     *  
     *
     * @param {object}
     *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
     * @param {function}
     *            fnFunction The function to call, when the event occurs.  
     * @param {object}
     *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ino.wall.Hoverable</code>.<br/> itself.
     *
     * @return {sap.ino.wall.Hoverable} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Hoverable#attachEnter
     * @function
     */

    /**
     * Detach event handler <code>fnFunction</code> from the 'enter' event of this <code>sap.ino.wall.Hoverable</code>.<br/>
     * 
     * The passed function and listener object must match the ones used for event registration.
     * 
     * @param {function}
     *            fnFunction The function to call, when the event occurs.
     * @param {object}
     *            oListener Context object on which the given function had to be called.
     * @return {sap.ino.wall.Hoverable} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Hoverable#detachEnter
     * @function
     */

    /**
     * Fire event enter to attached listeners.
     * 
     * Expects following event parameters:
     * <ul>
     * <li>'event' of type <code>object</code> </li>
     * </ul>
     * 
     * @param {Map}
     *            [mArguments] the arguments to pass along with the event.
     * @return {sap.ino.wall.Hoverable} <code>this</code> to allow method chaining
     * @protected
     * @name sap.ino.wall.Hoverable#fireEnter
     * @function
     */

    /**
     * 
     * @name sap.ino.wall.Hoverable#leave
     * @event
     * @param {sap.ui.base.Event}
     *            oControlEvent
     * @param {sap.ui.base.EventProvider}
     *            oControlEvent.getSource
     * @param {object}
     *            oControlEvent.getParameters
     * @param {object}
     *            oControlEvent.getParameters.event
     * @public
     */

    /**
     * Attach event handler <code>fnFunction</code> to the 'leave' event of this <code>sap.ino.wall.Hoverable</code>.<br/>.
     * When called, the context of the event handler (its <code>this</code>) will be bound to
     * <code>oListener<code> if specified
     * otherwise to this <code>sap.ino.wall.Hoverable</code>.<br/> itself. 
     *  
     *
     * @param {object}
     *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
     * @param {function}
     *            fnFunction The function to call, when the event occurs.  
     * @param {object}
     *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ino.wall.Hoverable</code>.<br/> itself.
     *
     * @return {sap.ino.wall.Hoverable} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Hoverable#attachLeave
     * @function
     */

    /**
     * Detach event handler <code>fnFunction</code> from the 'leave' event of this <code>sap.ino.wall.Hoverable</code>.<br/>
     * 
     * The passed function and listener object must match the ones used for event registration.
     * 
     * @param {function}
     *            fnFunction The function to call, when the event occurs.
     * @param {object}
     *            oListener Context object on which the given function had to be called.
     * @return {sap.ino.wall.Hoverable} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Hoverable#detachLeave
     * @function
     */

    /**
     * Fire event leave to attached listeners.
     * 
     * Expects following event parameters:
     * <ul>
     * <li>'event' of type <code>object</code> </li>
     * </ul>
     * 
     * @param {Map}
     *            [mArguments] the arguments to pass along with the event.
     * @return {sap.ino.wall.Hoverable} <code>this</code> to allow method chaining
     * @protected
     * @name sap.ino.wall.Hoverable#fireLeave
     * @function
     */

    sap.ino.wall.Hoverable._TYPE_ENTER = 0;
    sap.ino.wall.Hoverable._TYPE_LEAVE = 1;

    /* =========================================================== */
    /* begin: control lifecycle methods */
    /* =========================================================== */

    /**
     * Initializes the control.
     * 
     * @private
     */
    sap.ino.wall.Hoverable.prototype.init = function() {
        this._iEventDelayTimerEnter = 0;
        this._iEventDelayTimerLeave = 0;
        this._blockEnter = false;
    };

    /**
     * Destroys the control.
     * 
     * @private
     */
    sap.ino.wall.Hoverable.prototype.exit = function() {
        this._iEventDelayTimerEnter = 0;
        this._iEventDelayTimerLeave = 0;
        this._blockEnter = false;
    };

    /**
     * Adjusts control before rendering. Were place the original events with our delegate functions that fire the hover
     * events
     * 
     * @private
     */
    sap.ino.wall.Hoverable.prototype.onBeforeRendering = function() {
        var that = this, oControl = this.getContent(), fnOldMouseEnter = oControl.onmouseover, fnOldMouseEnd = oControl.onmouseout, fnOldTouchStart = oControl.ontouchstart, fnOldTouchEnd = oControl.ontouchend;

        if (!this._initialized) {
            if (sap.ui.Device.system.desktop) {
                oControl.onmouseover = function(oEvent) {
                    that._fireDelayedEnter(oEvent);
                    if (fnOldMouseEnter) {
                        fnOldMouseEnter.apply(this, arguments);
                    }
                };
                oControl.onmouseout = function(oEvent) {
                    that._fireDelayedLeave(oEvent);
                    if (fnOldMouseEnd) {
                        fnOldMouseEnd.apply(this, arguments);
                    }
                };
            } else {
                // this causes flickering on desktop controls
                oControl.ontouchstart = function(oEvent) {
                    that._fireDelayedEnter(oEvent);
                    if (fnOldTouchStart) {
                        fnOldTouchStart.apply(this, arguments);
                    }
                };
                oControl.ontouchend = function(oEvent) {
                    that._fireDelayedLeave(oEvent);
                    if (fnOldTouchEnd) {
                        fnOldTouchEnd.apply(this, arguments);
                    }
                };
            }
            this._initialized = true;
        }

        // delegate call to inner control
        if (this.getContent().onBeforeRendering) {
            this.getContent().onBeforeRendering.apply(this.getContent(), arguments);
        }
    };

    /**
     * Adjusts control after rendering.
     * 
     * @private
     */
    sap.ino.wall.Hoverable.prototype.onAfterRendering = function() {
        // delegate call to inner control
        if (this.getContent().onAfterRendering) {
            this.getContent().onAfterRendering.apply(this.getContent(), arguments);
        }
    };

    /**
     * Re-renders inner control instead of this one.
     * 
     * @protected
     */
    sap.ino.wall.Hoverable.prototype.rerender = function() {
        sap.ui.core.Control.prototype.rerender.apply(this.getContent(), arguments);
    };

    /* =========================================================== */
    /* begin: internal methods and properties */
    /* =========================================================== */

    /**
     * Fires a delayed hover enter event so that multiple events from the control are only fired once
     * 
     * @private
     * @param {jQuery.Event}
     *            oEvent The browser event
     */
    sap.ino.wall.Hoverable.prototype._fireDelayedEnter = function(oEvent) {
        var that = this;
        clearTimeout(this._iEventDelayTimerEnter);
        this._iEventDelayTimerEnter = setTimeout(function() {
            if (!that._blockEnter) {
                that.fireEnter({
                    event : oEvent
                });
                that._blockEnter = true;
            }
        }, 100);
    };

    /**
     * Fires a delayed hoverleave event so that multiple events from the control are only fired once
     * 
     * @private
     * @param {jQuery.Event}
     *            oEvent The browser event
     */
    sap.ino.wall.Hoverable.prototype._fireDelayedLeave = function(oEvent) {
        var that = this;
        clearTimeout(this._iEventDelayTimerLeave);
        this._iEventDelayTimerLeave = setTimeout(function() {
            that.fireLeave({
                event : oEvent
            });
            that._blockEnter = false;
        }, 100);
    };
    
})();
}; // end of sap/ino/wall/Hoverable.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.HoverableRenderer') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.HoverableRenderer");

(function() {
    "use strict";

    /**
     * @class Hoverable renderer.
     * @static
     */
    sap.ino.wall.HoverableRenderer = {};

    /**
     * Renders the inner control
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be rendered
     */
    sap.ino.wall.HoverableRenderer.render = function(oRM, oControl) {
        oRM.renderControl(oControl.getContent());
    };

})();
}; // end of sap/ino/wall/HoverableRenderer.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.LightBoxRenderer') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.LightBoxRenderer");

(function() {
    "use strict";

    /**
     * @class LightBox renderer.
     * @static
     */
    sap.ino.wall.LightBoxRenderer = {};

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be rendered
     */
    sap.ino.wall.LightBoxRenderer.render = function(oRm, oControl) {
    };

})();
}; // end of sap/ino/wall/LightBoxRenderer.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.LinkType') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.LinkType");

(function() {
    "use strict";

    /**
     * @class Specifies a document type for layouting and structuring.
     * 
     * @static
     * @public
     */
    sap.ino.wall.LinkType = {

        /**
         * A general link without further specifications.
         * 
         * @public
         */
        MISC : "MISC",

        /**
         * A link to a collaboration group or post.
         * 
         * @public
         */
        COLLABORATE : "COLLABORATE",

        /**
         * A Wiki link
         * 
         * @public
         */
        WIKI : "WIKI", 

        /**
         * A private link.
         * 
         * @public
         */
        PRIVATE : "PRIVATE",

        /**
         * A wall link.
         * 
         * @public
         */
        WALL : "WALL",
            
        /**
         * A idea link.
         * 
         * @public
         */
        IDEA : "IDEA"
    };

})();
}; // end of sap/ino/wall/LinkType.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.Pos') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.Pos");

(function() {
    "use strict";

    /**
     * Constructor for a new Pos.
     * 
     * Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and
     * associated objects as well as event handlers.
     * 
     * If the name of a setting is ambiguous (e.g. a property has the same name as an event), then the framework assumes
     * property, aggregation, association, event in that order. To override this automatic resolution, one of the
     * prefixes "aggregation:", "association:" or "event:" can be added to the name of the setting (such a prefixed name
     * must be enclosed in single or double quotes).
     * 
     * The supported settings are:
     * <ul>
     * <li>Properties
     * <ul>
     * <li>{@link #getX x} : float (default: -1)</li>
     * <li>{@link #getY y} : float (default: -1)</li>
     * </ul>
     * </li>
     * <li>Aggregations
     * <ul>
     * </ul>
     * </li>
     * <li>Associations
     * <ul>
     * </ul>
     * </li>
     * <li>Events
     * <ul>
     * </ul>
     * </li>
     * </ul>
     * 
     * 
     * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
     * can be used as well.
     * 
     * @param {string}
     *            [sId] id for the new control, generated automatically if no id is given
     * @param {object}
     *            [mSettings] initial settings for the new control
     * 
     * @class Add your documentation for the newPos
     * @extends sap.ui.core.Element
     * @version 1.16.4
     * 
     * @constructor
     * @public
     * @name sap.ino.wall.Pos
     * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
     */
    sap.ui.core.Element.extend("sap.ino.wall.Pos", {
        metadata : {
            properties : {
                "x" : {
                    type : "float",
                    group : "Misc",
                    defaultValue : -1
                },
                "y" : {
                    type : "float",
                    group : "Misc",
                    defaultValue : -1
                }
            }
        }
    });

    /**
     * Creates a new subclass of class sap.ino.wall.Pos with name <code>sClassName</code> and enriches it with the
     * information contained in <code>oClassInfo</code>.
     * 
     * <code>oClassInfo</code> might contain the same kind of informations as described in
     * {@link sap.ui.core.Element.extend Element.extend}.
     * 
     * @param {string}
     *            sClassName name of the class to be created
     * @param {object}
     *            [oClassInfo] object literal with informations about the class
     * @param {function}
     *            [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to
     *            sap.ui.core.ElementMetadata.
     * @return {function} the created class / constructor function
     * @public
     * @static
     * @name sap.ino.wall.Pos.extend
     * @function
     */

    /**
     * Getter for property <code>x</code>. The x coordinate of the position
     * 
     * Default value is <code>-1</code>
     * 
     * @return {float} the value of property <code>x</code>
     * @public
     * @name sap.ino.wall.Pos#getX
     * @function
     */

    /**
     * Setter for property <code>x</code>.
     * 
     * Default value is <code>-1</code>
     * 
     * @param {float}
     *            fX new value for property <code>x</code>
     * @return {sap.ino.wall.Pos} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Pos#setX
     * @function
     */

    /**
     * Getter for property <code>y</code>. The y coordinate of the position
     * 
     * Default value is <code>-1</code>
     * 
     * @return {float} the value of property <code>y</code>
     * @public
     * @name sap.ino.wall.Pos#getY
     * @function
     */

    /**
     * Setter for property <code>y</code>.
     * 
     * Default value is <code>-1</code>
     * 
     * @param {float}
     *            fY new value for property <code>y</code>
     * @return {sap.ino.wall.Pos} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Pos#setY
     * @function
     */

    sap.ino.wall.Pos.prototype.floorify = function() {
        this.setX(Math.floor(this.getX()));
        this.setY(Math.floor(this.getY()));
    };

})();
}; // end of sap/ino/wall/Pos.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.ResponsiveOptionSelector') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.ResponsiveOptionSelector");

(function() {
    "use strict";

    /**
     * Constructor for a new ResponsiveOptionSelector.
     * 
     * Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and
     * associated objects as well as event handlers.
     * 
     * If the name of a setting is ambiguous (e.g. a property has the same name as an event), then the framework assumes
     * property, aggregation, association, event in that order. To override this automatic resolution, one of the
     * prefixes "aggregation:", "association:" or "event:" can be added to the name of the setting (such a prefixed name
     * must be enclosed in single or double quotes).
     * 
     * The supported settings are:
     * <ul>
     * <li>Properties
     * <ul>
     * <li>{@link #getMode mode} : string (default: 'Large')</li>
     * <li>{@link #getEditable editable} : boolean (default: true)</li>
     * </ul>
     * </li>
     * <li>Aggregations
     * <ul>
     * <li>{@link #get_segmentedButton _segmentedButton} : sap.m.SegmentedButton</li>
     * <li>{@link #get_label _label} : sap.m.Label</li>
     * <li>{@link #get_select _select} : sap.m.Select</li>
     * <li>{@link #getOptions options} : sap.ui.core.Item[]</li>
     * </ul>
     * </li>
     * <li>Associations
     * <ul>
     * <li>{@link #getSelectedOption selectedOption} : string | sap.ui.core.Item</li>
     * </ul>
     * </li>
     * <li>Events
     * <ul>
     * <li>{@link sap.ino.wall.ResponsiveOptionSelector#event:select select} : fnListenerFunction or
     * [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
     * </ul>
     * </li>
     * </ul>
     * 
     * 
     * @param {string}
     *            [sId] id for the new control, generated automatically if no id is given
     * @param {object}
     *            [mSettings] initial settings for the new control
     * 
     * @class Add your documentation for the new ResponsiveOptionSelector
     * @extends sap.ui.core.Control
     * @version 1.16.4
     * 
     * @constructor
     * @public
     * @name sap.ino.wall.ResponsiveOptionSelector
     * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
     */
    sap.ui.core.Control.extend("sap.ino.wall.ResponsiveOptionSelector", {
        metadata : {
            properties : {
                "selectedOptionKey" : {
                    type : "string",
                    defaultValue : undefined
                },
                "mode" : {
                    type : "string",
                    group : "Misc",
                    defaultValue : 'Large'
                },
                "editable" : {
                    type : "boolean",
                    group : "Misc",
                    defaultValue : true
                }
            },
            aggregations : {
                "_segmentedButton" : {
                    type : "sap.m.SegmentedButton",
                    multiple : false
                },
                "_label" : {
                    type : "sap.m.Label",
                    multiple : false
                },
                "_select" : {
                    type : "sap.m.Select",
                    multiple : false
                },
                "options" : {
                    type : "sap.ui.core.Item",
                    multiple : true,
                    singularName : "option"
                }
            },
            associations : {
                "selectedOption" : {
                    type : "sap.ui.core.Item",
                    multiple : false
                }
            },
            events : {
                "select" : {}
            }
        }
    });

    /**
     * Creates a new subclass of class sap.ino.wall.ResponsiveOptionSelector with name <code>sClassName</code> and
     * enriches it with the information contained in <code>oClassInfo</code>.
     * 
     * <code>oClassInfo</code> might contain the same kind of informations as described in
     * {@link sap.ui.core.Element.extend Element.extend}.
     * 
     * @param {string}
     *            sClassName name of the class to be created
     * @param {object}
     *            [oClassInfo] object literal with informations about the class
     * @param {function}
     *            [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to
     *            sap.ui.core.ElementMetadata.
     * @return {function} the created class / constructor function
     * @public
     * @static
     * @name sap.ino.wall.ResponsiveOptionSelector.extend
     * @function
     */

    sap.ino.wall.ResponsiveOptionSelector.M_EVENTS = {
        'select' : 'select'
    };

    /**
     * Getter for property <code>mode</code>. TODO
     * 
     * Default value is <code>Large</code>
     * 
     * @return {string} the value of property <code>mode</code>
     * @public
     * @name sap.ino.wall.ResponsiveOptionSelector#getMode
     * @function
     */

    /**
     * Setter for property <code>mode</code>.
     * 
     * Default value is <code>Large</code>
     * 
     * @param {string}
     *            sMode new value for property <code>mode</code>
     * @return {sap.ino.wall.ResponsiveOptionSelector} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.ResponsiveOptionSelector#setMode
     * @function
     */

    /**
     * Getter for property <code>editable</code>.
     * 
     * Default value is <code>true</code>
     * 
     * @return {boolean} the value of property <code>editable</code>
     * @public
     * @name sap.ino.wall.ResponsiveOptionSelector#getEditable
     * @function
     */

    /**
     * Setter for property <code>editable</code>.
     * 
     * Default value is <code>true</code>
     * 
     * @param {boolean}
     *            bEditable new value for property <code>editable</code>
     * @return {sap.ino.wall.ResponsiveOptionSelector} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.ResponsiveOptionSelector#setEditable
     * @function
     */

    /**
     * Getter for aggregation <code>_segmentedButton</code>.<br/> TODO
     * 
     * @return {sap.m.SegmentedButton}
     * @public
     * @name sap.ino.wall.ResponsiveOptionSelector#get_segmentedButton
     * @function
     */

    /**
     * Setter for the aggregated <code>_segmentedButton</code>.
     * 
     * @param {sap.m.SegmentedButton}
     *            o_segmentedButton
     * @return {sap.ino.wall.ResponsiveOptionSelector} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.ResponsiveOptionSelector#set_segmentedButton
     * @function
     */

    /**
     * Destroys the _segmentedButton in the aggregation named <code>_segmentedButton</code>.
     * 
     * @return {sap.ino.wall.ResponsiveOptionSelector} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.ResponsiveOptionSelector#destroy_segmentedButton
     * @function
     */

    /**
     * Getter for aggregation <code>_label</code>.<br/> TODO
     * 
     * @return {sap.m.Label}
     * @public
     * @name sap.ino.wall.ResponsiveOptionSelector#get_label
     * @function
     */

    /**
     * Setter for the aggregated <code>_label</code>.
     * 
     * @param {sap.m.Label}
     *            o_label
     * @return {sap.ino.wall.ResponsiveOptionSelector} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.ResponsiveOptionSelector#set_label
     * @function
     */

    /**
     * Destroys the _label in the aggregation named <code>_label</code>.
     * 
     * @return {sap.ino.wall.ResponsiveOptionSelector} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.ResponsiveOptionSelector#destroy_label
     * @function
     */

    /**
     * Getter for aggregation <code>_select</code>.<br/> TODO
     * 
     * @return {sap.m.Select}
     * @public
     * @name sap.ino.wall.ResponsiveOptionSelector#get_select
     * @function
     */

    /**
     * Setter for the aggregated <code>_select</code>.
     * 
     * @param {sap.m.Select}
     *            o_select
     * @return {sap.ino.wall.ResponsiveOptionSelector} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.ResponsiveOptionSelector#set_select
     * @function
     */

    /**
     * Destroys the _select in the aggregation named <code>_select</code>.
     * 
     * @return {sap.ino.wall.ResponsiveOptionSelector} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.ResponsiveOptionSelector#destroy_select
     * @function
     */

    /**
     * Getter for aggregation <code>options</code>.<br/> The options to be set by this control
     * 
     * @return {sap.ui.core.Item[]}
     * @public
     * @name sap.ino.wall.ResponsiveOptionSelector#getOptions
     * @function
     */

    /**
     * Inserts a option into the aggregation named <code>options</code>.
     * 
     * @param {sap.ui.core.Item}
     *            oOption the option to insert; if empty, nothing is inserted
     * @param {int}
     *            iIndex the <code>0</code>-based index the option should be inserted at; for a negative value of
     *            <code>iIndex</code>, the option is inserted at position 0; for a value greater than the current
     *            size of the aggregation, the option is inserted at the last position
     * @return {sap.ino.wall.ResponsiveOptionSelector} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.ResponsiveOptionSelector#insertOption
     * @function
     */

    /**
     * Adds some option <code>oOption</code> to the aggregation named <code>options</code>.
     * 
     * @param {sap.ui.core.Item}
     *            oOption the option to add; if empty, nothing is inserted
     * @return {sap.ino.wall.ResponsiveOptionSelector} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.ResponsiveOptionSelector#addOption
     * @function
     */

    /**
     * Removes an option from the aggregation named <code>options</code>.
     * 
     * @param {int |
     *            string | sap.ui.core.Item} vOption the option to remove or its index or id
     * @return {sap.ui.core.Item} the removed option or null
     * @public
     * @name sap.ino.wall.ResponsiveOptionSelector#removeOption
     * @function
     */

    /**
     * Removes all the controls in the aggregation named <code>options</code>.<br/> Additionally unregisters them
     * from the hosting UIArea.
     * 
     * @return {sap.ui.core.Item[]} an array of the removed elements (might be empty)
     * @public
     * @name sap.ino.wall.ResponsiveOptionSelector#removeAllOptions
     * @function
     */

    /**
     * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation named <code>options</code> and
     * returns its index if found or -1 otherwise.
     * 
     * @param {sap.ui.core.Item}
     *            oOption the option whose index is looked for.
     * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
     * @public
     * @name sap.ino.wall.ResponsiveOptionSelector#indexOfOption
     * @function
     */

    /**
     * Destroys all the options in the aggregation named <code>options</code>.
     * 
     * @return {sap.ino.wall.ResponsiveOptionSelector} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.ResponsiveOptionSelector#destroyOptions
     * @function
     */

    /**
     * TODO
     * 
     * @return {string} Id of the element which is the current target of the <code>selectedOption</code> association,
     *         or null
     * @public
     * @name sap.ino.wall.ResponsiveOptionSelector#getSelectedOption
     * @function
     */

    /**
     * TODO
     * 
     * @param {string |
     *            sap.ui.core.Item} vSelectedOption Id of an element which becomes the new target of this
     *            <code>selectedOption</code> association. Alternatively, an element instance may be given.
     * @return {sap.ino.wall.ResponsiveOptionSelector} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.ResponsiveOptionSelector#setSelectedOption
     * @function
     */

    /**
     * TODO
     * 
     * @name sap.ino.wall.ResponsiveOptionSelector#select
     * @event
     * @param {sap.ui.base.Event}
     *            oControlEvent
     * @param {sap.ui.base.EventProvider}
     *            oControlEvent.getSource
     * @param {object}
     *            oControlEvent.getParameters
     * @param {sap.ui.core.Item}
     *            oControlEvent.getParameters.option The authorization that has been selected
     * @public
     */

    /**
     * Attach event handler <code>fnFunction</code> to the 'select' event of this
     * <code>sap.ino.wall.ResponsiveOptionSelector</code>.<br/>. When called, the context of the event handler (its
     * <code>this</code>) will be bound to <code>oListener<code> if specified
     * otherwise to this <code>sap.ino.wall.ResponsiveOptionSelector</code>.<br/> itself. 
     *  
     * TODO
     *
     * @param {object}
     *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
     * @param {function}
     *            fnFunction The function to call, when the event occurs.  
     * @param {object}
     *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ino.wall.ResponsiveOptionSelector</code>.<br/> itself.
     *
     * @return {sap.ino.wall.ResponsiveOptionSelector} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.ResponsiveOptionSelector#attachSelect
     * @function
     */

    /**
     * Detach event handler <code>fnFunction</code> from the 'select' event of this
     * <code>sap.ino.wall.ResponsiveOptionSelector</code>.<br/>
     * 
     * The passed function and listener object must match the ones used for event registration.
     * 
     * @param {function}
     *            fnFunction The function to call, when the event occurs.
     * @param {object}
     *            oListener Context object on which the given function had to be called.
     * @return {sap.ino.wall.ResponsiveOptionSelector} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.ResponsiveOptionSelector#detachSelect
     * @function
     */

    /**
     * Fire event select to attached listeners.
     * 
     * Expects following event parameters:
     * <ul>
     * <li>'option' of type <code>sap.ui.core.Item</code> The authorization that has been selected</li>
     * </ul>
     * 
     * @param {Map}
     *            [mArguments] the arguments to pass along with the event.
     * @return {sap.ino.wall.ResponsiveOptionSelector} <code>this</code> to allow method chaining
     * @protected
     * @name sap.ino.wall.ResponsiveOptionSelector#fireSelect
     * @function
     */

    sap.ino.wall.ResponsiveOptionSelector.prototype._getLabel = function() {
        var oLabel = this.getAggregation("_label");

        if (!oLabel) {
            oLabel = new sap.m.Label({
                text : sap.ui.getCore().byId(this.getSelectedOption()).getText()
            });
            this.setAggregation("_label", oLabel);
            this._updateLabel();
        }

        return oLabel;
    };

    sap.ino.wall.ResponsiveOptionSelector.prototype._getSegmentedButton = function() {
        var that = this, oSegmentedButton = this.getAggregation("_segmentedButton"), aOptions, i = 0;

        if (!oSegmentedButton) {
            oSegmentedButton = new sap.m.SegmentedButton({
                width : "210px",
                select : function(oEvent) {
                    that._handleSegmentedButtonSelect(oEvent);
                }
            }).addStyleClass("sapInoWallROSSegmentedButton");

            // create buttons based on the options aggregation
            aOptions = this.getOptions();
            for (; i < aOptions.length; i++) {
                oSegmentedButton.addButton(new sap.m.Button({
                    text : aOptions[i].getText(),
                    customData : new sap.ui.core.CustomData({
                        key : "item",
                        value : aOptions[i]
                    })
                }));
            }
            this.setAggregation("_segmentedButton", oSegmentedButton);
            this._updateSegmentedButton();
        }

        return oSegmentedButton;
    };

    sap.ino.wall.ResponsiveOptionSelector.prototype._getSelect = function() {
        var that = this, oSelect = this.getAggregation("_select"), aOptions, i = 0;

        if (!oSelect) {
            oSelect = new sap.m.Select({
                change : function(oEvent) {
                    that._handleSelectChange(oEvent);
                }
            });
            // create buttons based on the options aggregation
            aOptions = this.getOptions();
            for (; i < aOptions.length; i++) {
                oSelect.addItem(aOptions[i]);
            }
            this.setAggregation("_select", oSelect);
            this._updateSelect();
        }

        return oSelect;
    };

    sap.ino.wall.ResponsiveOptionSelector.prototype.setSelectedOptionKey = function(sKey) {
        var aOptions = this.getOptions();
        for (var i=0; i < aOptions.length; i++) {
            if (aOptions[i].getKey() === sKey) {
                this.setSelectedOption(aOptions[i]);
                break;
            }
        }
    };    
    
    sap.ino.wall.ResponsiveOptionSelector.prototype.setSelectedOption = function(oItem) {
        var aOptions, i = 0;

        // convenience, also allow strings
        if (typeof oItem === "string") {
            aOptions = this.getOptions();
            // find item with this id
            for (; i < aOptions.length; i++) {
                if (aOptions[i].getKey() === oItem) {
                    oItem = aOptions[i];
                    break;
                }
            }
        }

        this.setAssociation("selectedOption", oItem, true);
        this.setProperty("selectedOptionKey", oItem.getKey(), true);
        this._updateInnerControls();
    };

    sap.ino.wall.ResponsiveOptionSelector.prototype.getSelectedOption = function() {
        var oSelectedOption = this.getAssociation("selectedOption");
        if (!oSelectedOption) { // default: first item is selected
            this.setAssociation("selectedOption", this.getOptions()[0], true);
            oSelectedOption = this.getAssociation("selectedOption");
        }
        return oSelectedOption;
    };

    sap.ino.wall.ResponsiveOptionSelector.prototype.setEditable = function(bEditable) {
        this.setProperty("editable", bEditable, false);
        this._updateInnerControls();
    };

    sap.ino.wall.ResponsiveOptionSelector.prototype.setMode = function(sMode) {
        this.setProperty("mode", sMode, false);
        this._updateInnerControls();
    };

    sap.ino.wall.ResponsiveOptionSelector.prototype._updateInnerControls = function() {
        var sMode = this.getMode(), bEditable = this.getEditable();

        if (bEditable) {
            switch (sMode) {
                case "Large" :
                    this._updateSegmentedButton();
                    break;
                case "Small" :
                    this._updateSelect();
                    break;
                default:
                    break;
            }
        } else {
            this._updateLabel();
        }
    };

    /**
     * Checks if the control is already written to the DOM to allow for layout changes
     * 
     * @returns {this} this pointer for chaining
     * @private
     */
    sap.ino.wall.ResponsiveOptionSelector.prototype._isRendered = function() {
        if (this._bIsInDOM === undefined || this._bIsInDOM === 0) {
            this._bIsInDOM = jQuery.sap.byId(this.getId()).length;
        }

        return this._bIsInDOM;
    };

    // TODO: comment this! update segmentedButton selection
    sap.ino.wall.ResponsiveOptionSelector.prototype._updateSegmentedButton = function() {
        var oSegmentedButton = this._getSegmentedButton(), oButtons = oSegmentedButton.getButtons(), oSelectedOption = sap.ui.getCore().byId(this.getSelectedOption()), i = 0;

        for (; i < oButtons.length; i++) {
            if (oButtons[i].getCustomData()[0].getValue() === oSelectedOption) {
                // oSegmentedButton.setSelectedButton(oButtons[i]);
                oSegmentedButton.setAssociation("selectedButton", oButtons[i]);
                if (this._isRendered()) {
                    oSegmentedButton.rerender();
                }
                break;
            }
        }
    };

    // TODO: comment this! update segmentedButton selection
    sap.ino.wall.ResponsiveOptionSelector.prototype._updateSelect = function() {
        var oSelect = this._getSelect();

        oSelect.setSelectedItem(sap.ui.getCore().byId(this.getSelectedOption()));
    };

    // TODO: comment this! update segmentedButton selection
    sap.ino.wall.ResponsiveOptionSelector.prototype._updateLabel = function() {
        var oLabel = this._getLabel(), oSelectedOption = sap.ui.getCore().byId(this.getSelectedOption());

        oLabel.setText(oSelectedOption.getText());
    };

    // Event handler for SegmentedButton
    sap.ino.wall.ResponsiveOptionSelector.prototype._handleSegmentedButtonSelect = function(oEvent) {
        var oSelectedOption = oEvent.getParameter("button").getCustomData()[0].getValue();
        this.setAssociation("selectedOption", oSelectedOption, true);
        this.setProperty("selectedOptionKey", oSelectedOption.getKey(), true);
        this.fireSelect({
            option : oSelectedOption
        });
    };

    // Event handler for Select
    sap.ino.wall.ResponsiveOptionSelector.prototype._handleSelectChange = function(oEvent) {
        var oSelectedOption = oEvent.getParameter("selectedItem");
        this.setAssociation("selectedOption", oSelectedOption, true);
        this.setProperty("selectedOptionKey", oSelectedOption.getKey(), true);
        this.fireSelect({
            option : oSelectedOption
        });
    };

})();
}; // end of sap/ino/wall/ResponsiveOptionSelector.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.ResponsiveOptionSelectorRenderer') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.ResponsiveOptionSelectorRenderer");

(function() {
    "use strict";

    /**
     * @class ResponsiveOptionSelector renderer.
     * @static
     */
    sap.ino.wall.ResponsiveOptionSelectorRenderer = {};

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be rendered
     */
    sap.ino.wall.ResponsiveOptionSelectorRenderer.render = function(oRM, oControl) {
        // begin wrapper
        oRM.write("<div");
        oRM.writeControlData(oControl);
        oRM.addClass("sapInoWallROS");
        oRM.writeClasses();
        oRM.write(">");

        // render the inner controls based on the state
        if (oControl.getEditable()) {
            if (oControl.getMode() === "Large") {
                oRM.renderControl(oControl._getSegmentedButton());
            } else if (oControl.getMode() === "Small") {
                oRM.renderControl(oControl._getSelect());
            }
        } else {
            oRM.renderControl(oControl._getLabel());
        }

        // end wrapper
        oRM.write("</div>");
    };

})();
}; // end of sap/ino/wall/ResponsiveOptionSelectorRenderer.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.ScrollableToolbar') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.ScrollableToolbar");

(function() {
    "use strict";

    /**
     * Constructor for a new ScrollableToolbar.
     * 
     * Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and
     * associated objects as well as event handlers.
     * 
     * If the name of a setting is ambiguous (e.g. a property has the same name as an event), then the framework assumes
     * property, aggregation, association, event in that order. To override this automatic resolution, one of the
     * prefixes "aggregation:", "association:" or "event:" can be added to the name of the setting (such a prefixed name
     * must be enclosed in single or double quotes).
     * 
     * The supported settings are:
     * <ul>
     * <li>Properties
     * <ul>
     * <li>{@link #getVisible visible} : boolean (default: true)</li>
     * <li>{@link #getOrientation orientation} : string (default: "Horizontal")</li>
     * </ul>
     * </li>
     * <li>Aggregations
     * <ul>
     * <li>{@link #getContent content} : sap.ui.core.Control[]</li>
     * </ul>
     * </li>
     * <li>Associations
     * <ul>
     * </ul>
     * </li>
     * <li>Events
     * <ul>
     * </ul>
     * </li>
     * </ul>
     * 
     * 
     * @param {string}
     *            [sId] id for the new control, generated automatically if no id is given
     * @param {object}
     *            [mSettings] initial settings for the new control
     * 
     * @class Add your documentation for the newScrollableToolbar
     * @extends sap.ui.core.Control
     * @version 1.16.4
     * 
     * @constructor
     * @public
     * @name sap.ino.wall.ScrollableToolbar
     * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
     */
    sap.ui.core.Control.extend("sap.ino.wall.ScrollableToolbar", {
        metadata : {
            properties : {
                "visible" : {
                    type : "boolean",
                    group : "Appearance",
                    defaultValue : true
                },
                "orientation" : {
                    type : "string",
                    group : "Appearance",
                    defaultValue : "Horizontal"
                },
                "scrollStep" : {
                    type : "float",
                    defaultValue : 500
                },
                "scrollIntoView" : {
                    type : "boolean",
                    defaultValue : true
                }
            },
            aggregations : {
                "content" : {
                    type : "sap.ui.core.Control",
                    multiple : true,
                    singularName : "content"
                }
            }
        }
    });

    /**
     * Creates a new subclass of class sap.ino.wall.ScrollableToolbar with name <code>sClassName</code> and
     * enriches it with the information contained in <code>oClassInfo</code>.
     * 
     * <code>oClassInfo</code> might contain the same kind of informations as described in
     * {@link sap.ui.core.Element.extend Element.extend}.
     * 
     * @param {string}
     *            sClassName name of the class to be created
     * @param {object}
     *            [oClassInfo] object literal with informations about the class
     * @param {function}
     *            [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to
     *            sap.ui.core.ElementMetadata.
     * @return {function} the created class / constructor function
     * @public
     * @static
     * @name sap.ino.wall.ScrollableToolbar.extend
     * @function
     */

    /**
     * Getter for property <code>visible</code>. Sets the visibility of the control.
     * 
     * Default value is <code>true</code>
     * 
     * @return {boolean} the value of property <code>visible</code>
     * @public
     * @name sap.ino.wall.ScrollableToolbar#getVisible
     * @function
     */

    /**
     * Setter for property <code>visible</code>.
     * 
     * Default value is <code>true</code>
     * 
     * @param {boolean}
     *            bVisible new value for property <code>visible</code>
     * @return {sap.ino.wall.ScrollableToolbar} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.ScrollableToolbar#setVisible
     * @function
     */

    /**
     * Getter for aggregation <code>content</code>.<br/> The content of the toolbar.
     * 
     * @return {sap.ui.core.Control[]}
     * @public
     * @name sap.ino.wall.ScrollableToolbar#getContent
     * @function
     */

    /**
     * Inserts a content into the aggregation named <code>content</code>.
     * 
     * @param {sap.ui.core.Control}
     *            oContent the content to insert; if empty, nothing is inserted
     * @param {int}
     *            iIndex the <code>0</code>-based index the content should be inserted at; for a negative value of
     *            <code>iIndex</code>, the content is inserted at position 0; for a value greater than the current
     *            size of the aggregation, the content is inserted at the last position
     * @return {sap.ino.wall.ScrollableToolbar} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.ScrollableToolbar#insertContent
     * @function
     */

    /**
     * Adds some content <code>oContent</code> to the aggregation named <code>content</code>.
     * 
     * @param {sap.ui.core.Control}
     *            oContent the content to add; if empty, nothing is inserted
     * @return {sap.ino.wall.ScrollableToolbar} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.ScrollableToolbar#addContent
     * @function
     */

    /**
     * Removes an content from the aggregation named <code>content</code>.
     * 
     * @param {int |
     *            string | sap.ui.core.Control} vContent the content to remove or its index or id
     * @return {sap.ui.core.Control} the removed content or null
     * @public
     * @name sap.ino.wall.ScrollableToolbar#removeContent
     * @function
     */

    /**
     * Removes all the controls in the aggregation named <code>content</code>.<br/> Additionally unregisters them
     * from the hosting UIArea.
     * 
     * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
     * @public
     * @name sap.ino.wall.ScrollableToolbar#removeAllContent
     * @function
     */

    /**
     * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> and
     * returns its index if found or -1 otherwise.
     * 
     * @param {sap.ui.core.Control}
     *            oContent the content whose index is looked for.
     * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
     * @public
     * @name sap.ino.wall.ScrollableToolbar#indexOfContent
     * @function
     */

    /**
     * Destroys all the content in the aggregation named <code>content</code>.
     * 
     * @return {sap.ino.wall.ScrollableToolbar} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.ScrollableToolbar#destroyContent
     * @function
     */

    // When to create a scroll delegate:
    sap.ino.wall.ScrollableToolbar.prototype._bDeviceDesktop = true; //sap.ui.Device.system.desktop;
    // Disable scroll container 
    sap.ino.wall.ScrollableToolbar.prototype._bDoScroll = false; //!sap.ui.Device.system.desktop || (sap.ui.Device.os.windows && sap.ui.Device.os.version === 8);

    /**
     * Init
     */
    sap.ino.wall.ScrollableToolbar.prototype.init = function() {
        this._bPreviousScrollForward = false; // remember the item overflow state
        this._bPreviousScrollBack = false;
        this._iCurrentScrollLeft = 0;
        this._iCurrentScrollTop = 0;
        this._bRtl = sap.ui.getCore().getConfiguration().getRTL();

        this.startScrollX = 0;
        this.startTouchX = 0;
        this.startScrollY = 0;
        this.startTouchY = 0;
        this._scrollable = null;

        // Initialize the ItemNavigation
        this._oItemNavigation = new sap.ui.core.delegate.ItemNavigation().setCycling(false);
        this._oItemNavigation.attachEvent(sap.ui.core.delegate.ItemNavigation.Events.AfterFocus, this._onItemNavigationAfterFocus, this);
        this.addDelegate(this._oItemNavigation);

        if (this._bDoScroll) {
            jQuery.sap.require("sap.ui.core.delegate.ScrollEnablement");
            this._oScroller = new sap.ui.core.delegate.ScrollEnablement(this, this.getId() + "-head", {
                horizontal : (this.getOrientation() === "Horizontal" ? true : false),
                vertical : (this.getOrientation() !== "Horizontal" ? true : false),
                nonTouchScrolling : true
            });
        }

    };

    /**
     * Exit
     */
    sap.ino.wall.ScrollableToolbar.prototype.exit = function() {
        if (this._oArrowLeft) {
            this._oArrowLeft.destroy();
        }
        if (this._oArrowRight) {
            this._oArrowRight.destroy();
        }

        if (this._oItemNavigation) {
            this.removeDelegate(this._oItemNavigation);
            this._oItemNavigation.destroy();
            delete this._oItemNavigation;
        }

        if (this._oScroller) {
            this._oScroller.destroy();
            this._oScroller = null;
        }

        if (this._sResizeListenerId) {
            sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
            this._sResizeListenerId = null;
        }
    };

    /**
     * Before Rendering
     */
    sap.ino.wall.ScrollableToolbar.prototype.onBeforeRendering = function() {
        if (this._sResizeListenerId) {
            sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
            this._sResizeListenerId = null;
        }
    };

    /*
     * adjusts arrows when keyboard is used for navigation and the beginning/end of the toolbar is reached
     */
    sap.ino.wall.ScrollableToolbar.prototype._onItemNavigationAfterFocus = function(oEvent) {
        var oHead = this.getDomRef("head"), oIndex = oEvent.getParameter("index"), $event = oEvent.getParameter('event');

        // handle only keyboard navigation here
        if ($event.keyCode === undefined) {
            return;
        }

        if (this.getOrientation() === "Horizontal") {
            this._iCurrentScrollLeft = oHead.scrollLeft;
        } else {
            this._iCurrentScrollTop = oHead.scrollTop;
        }
        this._checkOverflow(oHead, this.$());
        if (oIndex !== null && oIndex !== undefined) {
            this._scrollIntoView(this.getContent()[oIndex]);
        }
    };

    /**
     * return first visible item, which is needed for correct arrow calculation
     */
    sap.ino.wall.ScrollableToolbar.prototype._getFirstVisibleItem = function(aItems) {
        for (var i = 0; i < aItems.length; i++) {
            if (aItems[i].getVisible()) {
                return aItems[i];
            }
        }

        return null;
    };

    /**
     * afterRendering
     */

    sap.ino.wall.ScrollableToolbar.prototype.onAfterRendering = function() {
        var that = this, oHeadDomRef = this.getDomRef("head"), $bar = this.$(), aItems, aTabDomRefs;

        // initialize scrolling
        // we re-use the icon tab bar scrolling registration here
        if (this._oScroller) {
            this._oScroller.setIconTabBar(this, jQuery.proxy(this._afterIscroll, this), jQuery.proxy(this._scrollPreparation, this));
        }

        if (this._bDoScroll) {
            jQuery.sap.delayedCall(350, this, "_checkOverflow", [oHeadDomRef, $bar]);
        } else {
            this._checkOverflow(oHeadDomRef, $bar);
        }

        // reset scroll state after re-rendering for non-touch devices (iScroll will handle this internally)
        if (this.getOrientation() === "Horizontal") {
            if (this._iCurrentScrollLeft !== 0 && !this._bDoScroll) {
                // setTimeout needed here because the bar will only set a width when it detects that the content
                // is larger after this call
                setTimeout(function() {
                    oHeadDomRef.scrollLeft = that._iCurrentScrollLeft;
                }, 0);
            }
        } else {
            if (this._iCurrentScrollTop !== 0 && !this._bDoScroll) {
                // setTimeout needed here because the bar will only set a width when it detects that the content
                // is larger after this call
                setTimeout(function() {
                    oHeadDomRef.scrollTop = that._iCurrentScrollTop;
                }, 0);
            }
        }

        // use ItemNavigation for keyboardHandling
        aItems = this.getContent();
        aTabDomRefs = [];

        // find a collection of all tabs
        aItems.forEach(function(oItem) {
            var oItemDomRef = oItem.getFocusDomRef();
            jQuery(oItemDomRef).attr("tabindex", "-1");
            aTabDomRefs.push(oItemDomRef);
        });

        // Initialize the ItemNavigation
        if (!this._oItemNavigation) {
            this._oItemNavigation = new sap.ui.core.delegate.ItemNavigation();
            this._oItemNavigation.attachEvent(sap.ui.core.delegate.ItemNavigation.Events.AfterFocus, this._onItemNavigationAfterFocus, this);
            this.addDelegate(this._oItemNavigation);
        }

        // Reinitialize the ItemNavigation after rendering
        this._oItemNavigation.setRootDomRef(oHeadDomRef);
        this._oItemNavigation.setItemDomRefs(aTabDomRefs);

        // listen to resize
        this._sResizeListenerId = sap.ui.core.ResizeHandler.register(this.getDomRef(), jQuery.proxy(this._fnResize, this));
    };

    /**
     * Checks if scrolling is needed.
     * 
     * @private
     * @returns true if scrolling is needed, otherwise false
     */
    sap.ino.wall.ScrollableToolbar.prototype._checkScrolling = function(oHead, $bar) {
        var bScrolling = false, domScrollCont, domHead;

        if (this._bDoScroll) { // iScroll is used, therefore we need other calculation then in desktop mode
            domScrollCont = this.getDomRef("scrollContainer");
            domHead = this.getDomRef("head");
            if (this.getOrientation() === "Horizontal") {
                if (domHead.offsetWidth > domScrollCont.offsetWidth) {
                    bScrolling = true;
                }
            } else {
                if (domHead.offsetHeight > domScrollCont.offsetHeight) {
                    bScrolling = true;
                }
            }
        } else { // desktop mode
            // check if there are more tabs as displayed
            if (oHead) {
                if (this.getOrientation() === "Horizontal") {
                    if (oHead.scrollWidth > oHead.clientWidth) {
                        // scrolling possible
                        bScrolling = true;
                    }
                } else {
                    if (oHead.scrollHeight > oHead.clientHeight) {
                        // scrolling possible
                        bScrolling = true;
                    }
                }
            }
        }

        if (this._scrollable !== bScrolling) {
            $bar.toggleClass("sapInoWallScrollableToolbarScrollable", bScrolling);
            $bar.toggleClass("sapInoWallScrollableToolbarNotScrollable", !bScrolling);
            this._scrollable = bScrolling;
        }

        return bScrolling;
    };

    /**
     * Gets the icon of the requested arrow (left/right).
     * 
     * @private
     * @param sName
     *            left or right
     * @returns icon of the requested arrow
     */
    sap.ino.wall.ScrollableToolbar.prototype._getScrollingArrow = function(sName) {
        var mProperties = {
            src : "sap-icon://navigation-" + sName + "-arrow"
        }, sSuffix = this._bTextOnly ? "TextOnly" : "", sLeftArrowClass = "sapInoWallScrollableToolbarArrowScrollLeft" + sSuffix, sRightArrowClass = "sapInoWallScrollableToolbarArrowScrollRight" + sSuffix, aCssClassesToAddLeft = ["sapInoWallScrollableToolbarArrowScroll", sLeftArrowClass], aCssClassesToAddRight = ["sapInoWallScrollableToolbarArrowScroll", sRightArrowClass];

        if (sName === "left" || sName === "up") {
            if (!this._oArrowLeft) {
                this._oArrowLeft = sap.m.ImageHelper.getImageControl(this.getId() + "-arrowScrollLeft", this._oArrowLeft, this, mProperties, aCssClassesToAddLeft);
            }
            return this._oArrowLeft;
        }
        if (sName === "right" || sName === "down") {
            if (!this._oArrowRight) {
                this._oArrowRight = sap.m.ImageHelper.getImageControl(this.getId() + "-arrowScrollRight", this._oArrowRight, this, mProperties, aCssClassesToAddRight);
            }
            return this._oArrowRight;
        }
    };

    /**
     * Changes the state of the scroll arrows depending on whether they are required due to overflow.
     * 
     * @param oListDomRef
     *            the ul tag containing the items
     * @param of_back
     *            the backward scroll arrow
     * @param of_fw
     *            the forward scroll arrow
     * @private
     */
    sap.ino.wall.ScrollableToolbar.prototype._checkOverflow = function(oBarHead, $bar) {
        var bScrollBack, bScrollForward, domScrollCont, domHead, iScrollLeft, realWidth, availableWidth, iScrollTop, realHeight, availableHeight, $List;

        if (this._checkScrolling(oBarHead, $bar) && oBarHead) {
            // check whether scrolling to the left is possible
            bScrollBack = false;
            bScrollForward = false;

            if (this._bDoScroll) { // ScrollEnablement is used, therefore we need other calculation then in desktop
                // mode
                domScrollCont = this.getDomRef("scrollContainer");
                domHead = this.getDomRef("head");

                if (this.getOrientation() === "Horizontal") {
                    if (this._oScroller.getScrollLeft() > 0) {
                        bScrollBack = true;
                    }
                    if ((this._oScroller.getScrollLeft() + domScrollCont.offsetWidth) < domHead.offsetWidth) {
                        bScrollForward = true;
                    }
                } else {
                    if (this._oScroller.getScrollTop() > 0) {
                        bScrollBack = true;
                    }
                    if ((this._oScroller.getScrollTop() + domScrollCont.offsetHeight) < domHead.offsetHeight) {
                        bScrollForward = true;
                    }
                }

            } else { // desktop mode
                if (this.getOrientation() === "Horizontal") {
                    iScrollLeft = this._iCurrentScrollLeft;
                    realWidth = oBarHead.scrollWidth;
                    availableWidth = oBarHead.clientWidth;

                    if (Math.abs(realWidth - availableWidth) === 1) { // Avoid rounding issues see CSN 1316630 2013
                        realWidth = availableWidth;
                    }

                    if (!this._bRtl) { // normal LTR mode
                        if (iScrollLeft > 0) {
                            bScrollBack = true;
                        }
                        if ((realWidth > availableWidth) && (iScrollLeft + availableWidth < realWidth)) {
                            bScrollForward = true;
                        }
                    } else { // RTL mode
                        $List = jQuery(oBarHead);
                        if ($List.scrollLeftRTL() > 0) {
                            bScrollForward = true;
                        }
                        if ($List.scrollRightRTL() > 0) {
                            bScrollBack = true;
                        }
                    }
                } else {
                    iScrollTop = this._iCurrentScrollTop;
                    realHeight = oBarHead.scrollHeight;
                    availableHeight = oBarHead.clientHeight;

                    if (Math.abs(realHeight - availableHeight) === 1) { // Avoid rounding issues see CSN 1316630 2013
                        realHeight = availableHeight;
                    }

                    if (iScrollTop > 0) {
                        bScrollBack = true;
                    }
                    if ((realHeight > availableHeight) && (iScrollTop + availableHeight < realHeight)) {
                        bScrollForward = true;
                    }
                }
            }

            // only do DOM changes if the state changed to avoid periodic application of identical values
            if ((bScrollForward !== this._bPreviousScrollForward) || (bScrollBack !== this._bPreviousScrollBack)) {
                this._bPreviousScrollForward = bScrollForward;
                this._bPreviousScrollBack = bScrollBack;
                $bar.toggleClass("sapInoWallScrollableToolbarNoScrollBack", !bScrollBack);
                $bar.toggleClass("sapInoWallScrollableToolbarNoScrollForward", !bScrollForward);
            }
        } else {
            this._bPreviousScrollForward = false;
            this._bPreviousScrollBack = false;
        }
    };

    /**
     * Handles the activation of the tabs and arrows.
     * 
     * @private
     */
    sap.ino.wall.ScrollableToolbar.prototype._handleActivation = function(oEvent) {
        var sTargetId = oEvent.target.id, oControl = oEvent.srcControl, oChild, sId, iScrollLeft, iScrollTop, iContainerWidth, iContainerHeight, iHeadWidth, iHeadHeight;

        if (sTargetId) {
            sId = this.getId();

            // For items: do not navigate away! Stay on the page and handle the click in-place. Right-click + "Open in
            // new Tab" still works.
            // For scroll buttons: Prevent IE from firing beforeunload event -> see CSN 4378288 2012
            oEvent.preventDefault();

            // on mobile devices click on arrows has no effect
            if (sTargetId === sId + "-arrowScrollLeft" && this._bDeviceDesktop) {
                if (this._bDoScroll && sap.ui.Device.os.windows && sap.ui.Device.os.version === 8) {
                    // combi devices with windows 8 should also scroll on click on arrows
                    // need to use iscroll
                    if (this.getOrientation() === "Horizontal") {
                        iScrollLeft = this._oScroller.getScrollLeft() - this.getScrollStep();
                        if (iScrollLeft < 0) {
                            iScrollLeft = 0;
                        }
                    } else {
                        iScrollTop = this._oScroller.getScrollTop() - this.getScrollStep();
                        if (iScrollTop < 0) {
                            iScrollTop = 0;
                        }
                    }
                    // execute manual scrolling with iScroll's scrollTo method (delayedCall 0 is needed for positioning
                    // glitch)
                    this._scrollPreparation();
                    jQuery.sap.delayedCall(0, this._oScroller, "scrollTo", [iScrollLeft, 0, 500]);
                    jQuery.sap.delayedCall(500, this, "_afterIscroll");
                } else {
                    // scroll back/left button
                    this._scroll(-this.getScrollStep(), 500);
                }

            } else if (sTargetId === sId + "-arrowScrollRight" && this._bDeviceDesktop) {
                if (this._bDoScroll && sap.ui.Device.os.windows && sap.ui.Device.os.version === 8) {
                    // combi devices with windows 8 should also scroll on click on arrows
                    // need to use iscroll
                    if (this.getOrientation() === "Horizontal") {
                        iScrollLeft = this._oScroller.getScrollLeft() + this.getScrollStep();
                        iContainerWidth = this.$("scrollContainer").width();
                        iHeadWidth = this.$("head").width();
                        if (iScrollLeft > (iHeadWidth - iContainerWidth)) {
                            iScrollLeft = iHeadWidth - iContainerWidth;
                        }
                    } else {
                        iScrollTop = this._oScroller.getScrollTop() + this.getScrollStep();
                        iContainerHeight = this.$("scrollContainer").height();
                        iHeadHeight = this.$("head").height();
                        if (iScrollTop > (iHeadHeight - iContainerHeight)) {
                            iScrollTop = iHeadHeight - iContainerHeight;
                        }
                    }
                    // execute manual scrolling with iScroll's scrollTo method (delayedCall 0 is needed for positioning
                    // glitch)
                    this._scrollPreparation();
                    jQuery.sap.delayedCall(0, this._oScroller, "scrollTo", [iScrollLeft, 0, 500]);
                    jQuery.sap.delayedCall(500, this, "_afterIscroll");
                } else {
                    // scroll forward/right button
                    this._scroll(this.getScrollStep(), 500);
                }
            } else {
                // content item clicked, scroll into view if necessary
                if (!(oControl instanceof sap.ino.wall.ScrollableToolbar)) {
                    oChild = oControl;
                    // move up parent chain until we have the direct child of the toolbar
                    while (oChild && !(oChild.getParent() instanceof sap.ino.wall.ScrollableToolbar)) {
                        oChild = oChild.getParent();
                    }
                    if (oChild) {
                        this._scrollIntoView(oChild);
                    }
                }
            }
        }
    };

    /*
     * Scrolls to the item passed as parameter if it is not (fully) visible If the item is to the left of the viewport
     * it will be put leftmost. If the item is to the right of the viewport it will be put rightmost. @param
     * {sap.ui.core.Control} oItem The item to be scrolled into view @param {int} iDuration The duration of the
     * animation effect @private @return {sap.ino.wall.ScrollableToolbar} this pointer for chaining
     */
    sap.ino.wall.ScrollableToolbar.prototype._scrollIntoView = function(oItem, iDuration) {
        if (!this.getScrollIntoView()) {
            return this;
        }
        var $item = oItem.$(), $head, iHeadPaddingWidth, oHeadDomRef, iScrollLeft, iNewScrollLeft, iContainerWidth, iItemWidth, iItemPosLeft, iScrollTop, iNewScrollTop, iContainerHeight, iItemHeight, iItemPosTop;

        if ($item.length > 0) {
            if (this.getOrientation() === "Horizontal") {
                $head = this.$('head');
                iHeadPaddingWidth = $head.innerWidth() - $head.width();
                iItemWidth = $item.outerWidth(true);
                iItemPosLeft = $item.position().left - iHeadPaddingWidth / 2;

                // switch based on scrolling mode
                if (this._bDoScroll) { // ScrollEnablement
                    iScrollLeft = this._oScroller.getScrollLeft();
                    iContainerWidth = this.$("scrollContainer").width();
                    iNewScrollLeft = 0;

                    // check if item is outside of viewport
                    if (iItemPosLeft - iScrollLeft < 0 || iItemPosLeft - iScrollLeft > iContainerWidth - iItemWidth) {
                        if (iItemPosLeft - iScrollLeft < 0) { // left side: make this the first item
                            iNewScrollLeft += iItemPosLeft;
                        } else { // right side: make this the last item
                            iNewScrollLeft += iItemPosLeft + iItemWidth - iContainerWidth;
                        }

                        // execute manual scrolling with scrollTo method (delayedCall 0 is needed for positioning
                        // glitch)
                        this._scrollPreparation();
                        // store current scroll state to set it after rerendering
                        this._iCurrentScrollLeft = iNewScrollLeft;
                        jQuery.sap.delayedCall(0, this._oScroller, "scrollTo", [iNewScrollLeft, 0, iDuration]);
                        jQuery.sap.delayedCall(iDuration, this, "_afterIscroll");
                    }
                } else { // desktop scrolling with jQuery
                    oHeadDomRef = this.getDomRef("head");
                    iScrollLeft = oHeadDomRef.scrollLeft;
                    iContainerWidth = $item.parent().width();
                    iNewScrollLeft = iScrollLeft;

                    // check if item is outside of viewport
                    if (iItemPosLeft < 0 || iItemPosLeft > iContainerWidth - iItemWidth) {
                        if (iItemPosLeft < 0) { // left side: make this the first item
                            iNewScrollLeft += iItemPosLeft;
                        } else { // right side: make this the last item
                            iNewScrollLeft += iItemPosLeft + iItemWidth - iContainerWidth;
                        }

                        // execute scrolling
                        this._scrollPreparation();
                        // store current scroll state to set it after rerendering
                        this._iCurrentScrollLeft = iNewScrollLeft;
                        jQuery(oHeadDomRef).stop(true, true).animate({
                            scrollLeft : iNewScrollLeft
                        }, iDuration, jQuery.proxy(this._adjustAndShowArrow, this));
                    }
                }
            } else {
                iItemHeight = $item.outerHeight(true);
                iItemPosTop = $item.position().top;

                // switch based on scrolling mode
                if (this._bDoScroll) { // ScrollEnablement
                    iScrollTop = this._oScroller.getScrollTop();
                    iContainerHeight = this.$("scrollContainer").height();
                    iNewScrollTop = 0;

                    // check if item is outside of viewport
                    if (iItemPosTop - iScrollTop < 0 || iItemPosTop - iScrollTop > iContainerHeight - iItemHeight) {
                        if (iItemPosTop - iScrollTop < 0) { // left side: make this the first item
                            iNewScrollTop += iItemPosTop;
                        } else { // right side: make this the last item
                            iNewScrollTop += iItemPosTop + iItemHeight - iContainerHeight;
                        }

                        // execute manual scrolling with scrollTo method (delayedCall 0 is needed for positioning
                        // glitch)
                        this._scrollPreparation();
                        // store current scroll state to set it after rerendering
                        this._iCurrentScrollTop = iNewScrollTop;
                        jQuery.sap.delayedCall(0, this._oScroller, "scrollTo", [0, iNewScrollTop, iDuration]);
                        jQuery.sap.delayedCall(iDuration, this, "_afterIscroll");
                    }
                } else { // desktop scrolling with jQuery
                    oHeadDomRef = this.getDomRef("head");
                    iScrollTop = oHeadDomRef.scrollTop;
                    iContainerHeight = $item.parent().height();
                    iNewScrollTop = iScrollTop;

                    // check if item is outside of viewport
                    if (iItemPosTop < 0 || iItemPosTop > iContainerHeight - iItemHeight) {
                        if (iItemPosTop < 0) { // left side: make this the first item
                            iNewScrollTop += iItemPosTop;
                        } else { // right side: make this the last item
                            iNewScrollTop += iItemPosTop + iItemHeight - iContainerHeight;
                        }

                        // execute scrolling
                        this._scrollPreparation();
                        // store current scroll state to set it after rerendering
                        this._iCurrentScrollTop = iNewScrollTop;
                        jQuery(oHeadDomRef).stop(true, true).animate({
                            scrollTop : iNewScrollTop
                        }, iDuration, jQuery.proxy(this._adjustAndShowArrow, this));
                    }
                }
            }

        }

        return this;
    };

    /*
     * Scrolls the items if possible, using an animation.
     * 
     * @param iDelta how far to scroll @param iDuration how long to scroll (ms) @private
     */
    sap.ino.wall.ScrollableToolbar.prototype._scroll = function(iDelta, iDuration) {
        var oDomRef, iScrollLeft, iScrollTop, iScrollTarget;

        this._scrollPreparation();

        oDomRef = this.getDomRef("head");

        if (this.getOrientation() === "Horizontal") {
            iScrollLeft = oDomRef.scrollLeft;

            if (!!!sap.ui.Device.browser.internet_explorer && this._bRtl) {
                iDelta = -iDelta;
            } // RTL lives in the negative space
            iScrollTarget = iScrollLeft + iDelta;
            jQuery(oDomRef).stop(true, true).animate({
                scrollLeft : iScrollTarget
            }, iDuration, jQuery.proxy(this._adjustAndShowArrow, this));
            this._iCurrentScrollLeft = iScrollTarget;
        } else {
            iScrollTop = oDomRef.scrollTop;

            if (!!!sap.ui.Device.browser.internet_explorer && this._bRtl) {
                iDelta = -iDelta;
            } // RTL lives in the negative space
            iScrollTarget = iScrollTop + iDelta;
            jQuery(oDomRef).stop(true, true).animate({
                scrollTop : iScrollTarget
            }, iDuration, jQuery.proxy(this._adjustAndShowArrow, this));
            this._iCurrentScrollTop = iScrollTarget;
        }
    };

    /**
     * Adjusts the arrow position and shows the arrow.
     * 
     * @private
     */
    sap.ino.wall.ScrollableToolbar.prototype._adjustAndShowArrow = function() {
        if (this._$bar) {
            this._$bar.toggleClass("sapInoWallScrollableToolbarScroll", false);
        }
        this._$bar = null;
        // update the arrows on desktop
        if (this._bDeviceDesktop) {
            this._checkOverflow(this.getDomRef("head"), this.$());
        }
    };

    /**
     * Scroll preparation.
     * 
     * @private
     */
    sap.ino.wall.ScrollableToolbar.prototype._scrollPreparation = function() {
        if (!this._$bar) {
            this._$bar = this.$().toggleClass("sapInoWallScrollableToolbarScroll", true);
        }
    };

    /**
     * After iscroll.
     * 
     * @private
     */
    sap.ino.wall.ScrollableToolbar.prototype._afterIscroll = function() {
        var oHead = this.getDomRef("head");
        this._checkOverflow(oHead, this.$());
        this._adjustAndShowArrow();
    };

    /**
     * Resize handling.
     * 
     * @private
     */
    sap.ino.wall.ScrollableToolbar.prototype._fnResize = function() {
        var oHead = this.getDomRef("head");
        this._checkOverflow(oHead, this.$());
    };

    sap.ino.wall.ScrollableToolbar.prototype.applyFocusInfo = function(oFocusInfo) {
        // sets the focus depending on the used IconTabFilter
        if (oFocusInfo.focusDomRef) {
            jQuery(oFocusInfo.focusDomRef).focus();
        }
    };

    /* =========================================================== */
    /* begin: event handlers */
    /* =========================================================== */

    /**
     * Initializes scrolling on the IconTabHeader.
     * 
     * @param {jQuery.Event}
     *            oEvent
     * @private
     */
    sap.ino.wall.ScrollableToolbar.prototype.ontouchstart = function(oEvent) {
        if (oEvent.target != this._oArrowLeft.$()[0] && oEvent.target != this._oArrowRight.$()[0]) {
            return;
        }
        var oTargetTouch = oEvent.targetTouches[0];

        // store & init touch state
        this._iActiveTouch = oTargetTouch.identifier;
        this._iTouchStartPageX = oTargetTouch.pageX;
        this._iTouchDragX = 0;
        this._iTouchStartPageY = oTargetTouch.pageY;
        this._iTouchDragY = 0;
    };

    /**
     * Sets an internal flag if horizontal drag was executed.
     * 
     * @param {jQuery.Event}
     *            oEvent
     * @private
     */
    sap.ino.wall.ScrollableToolbar.prototype.ontouchmove = function(oEvent) {
        if (oEvent.target != this._oArrowLeft.$()[0] && oEvent.target != this._oArrowRight.$()[0]) {
            return;
        }
        var oTouch;

        if (!this._iActiveTouch) {
            return;
        }

        oTouch = sap.m.touch.find(oEvent.changedTouches, this._iActiveTouch);

        if (this.getOrientation() === "Horizontal") {
            // check for valid changes
            if (!oTouch || oTouch.pageX === this._iTouchStartPageX) {
                return;
            }

            // sum up movement to determine in touchend event if selection should be executed
            this._iTouchDragX += Math.abs(this._iTouchStartPageX - oTouch.pageX);
            this._iTouchStartPageX = oTouch.pageX;
        } else {
            // check for valid changes
            if (!oTouch || oTouch.pageY === this._iTouchStartPageY) {
                return;
            }

            // sum up movement to determine in touchend event if selection should be executed
            this._iTouchDragY += Math.abs(this._iTouchStartPageY - oTouch.pageY);
            this._iTouchStartPageY = oTouch.pageY;
        }
    };
    
    sap.ino.wall.ScrollableToolbar.prototype.validate = function() {
        var that = this;
        setTimeout(function() {
            var oHead = that.getDomRef("head");
            that._iCurrentScrollTop = oHead.scrollTop;
            that._iCurrentScrollLeft = oHead.scrollLeft;
            that._checkOverflow(oHead, that.$());
        }, 500 + 250);
    };

    /**
     * Handles touch end and events and trigger selection if bar was not dragged.
     * 
     * @param {jQuery.Event}
     *            oEvent
     * @private
     */
    sap.ino.wall.ScrollableToolbar.prototype.ontouchend = function(oEvent) {
        if (oEvent.target != this._oArrowLeft.$()[0] && oEvent.target != this._oArrowRight.$()[0]) {
            return;
        }
        // suppress selection if there was a drag (moved more than 20px)
        if (this.getOrientation() === "Horizontal") {
            if (this._iTouchDragX > 5 || oEvent.isMarked()) {
                return;
            }
        } else {
            if (this._iTouchDragY > 5 || oEvent.isMarked()) {
                return;
            }
        }
        // 
        this._handleActivation(oEvent);
    };

    /**
     * Handle the touch cancel event.
     * 
     * @param {jQuery.EventObject}
     *            oEvent The event object
     * @private
     */
    sap.ino.wall.ScrollableToolbar.prototype.ontouchcancel = sap.ino.wall.ScrollableToolbar.prototype.ontouchend;

    /**
     * Keyboard navigation event when the user presses Enter or Space.
     * 
     * @param {jQuery.Event}
     *            oEvent
     * @private
     */
    sap.ino.wall.ScrollableToolbar.prototype.onsapselect = function(oEvent) {
        this._handleActivation(oEvent);
    };

    /* =========================================================== */
    /* end: event handlers */
    /* =========================================================== */
})();
}; // end of sap/ino/wall/ScrollableToolbar.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.ScrollableToolbarRenderer') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.ScrollableToolbarRenderer");

(function() {
    "use strict";

    /**
     * @class ScrollableToolbar renderer. 
     * @static
     */
    sap.ino.wall.ScrollableToolbarRenderer = {
    };

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    sap.ino.wall.ScrollableToolbarRenderer.render = function (oRM, oControl) { 
        var aItems = oControl.getContent();

        // return immediately if control is not visible
        if (!oControl.getVisible()) {
            return;
        }

        // render wrapper div
        oRM.write("<div ");
        oRM.addClass("sapInoWallScrollableToolbar");
        oRM.addClass("sapInoWallScrollableToolbar" + oControl.getOrientation());
        if (oControl._scrollable) {
            oRM.addClass("sapInoWallScrollableToolbarScrollable");
            if (!oControl._bPreviousScrollForward) {
                oRM.addClass("sapInoWallScrollableToolbarNoScrollForward");
            }
            if (!oControl._bPreviousScrollBack) {
                oRM.addClass("sapInoWallScrollableToolbarNoScrollBack");
            }
        } else {
            oRM.addClass("sapInoWallScrollableToolbarNotScrollable");
        }

        oRM.writeControlData(oControl);
        oRM.writeClasses();
        oRM.write(">");

        // render left scroll arrow
        oRM.renderControl(oControl._getScrollingArrow(oControl.getOrientation() === "Horizontal" ? "left" : "up"));

        // render scroll container on touch devices
        if (oControl._bDoScroll) {
            oRM.write("<div id='" + oControl.getId() + "-scrollContainer' class='sapInoWallScrollableToolbarScrollContainer'>");
        }

        oRM.write("<div id='" + oControl.getId() + "-head'");
        oRM.addClass("sapInoWallScrollableToolbarInner");

        oRM.writeClasses();
        oRM.write(">");

        jQuery.each(aItems, function (iIndex, oItem) {
            if (!oItem.getVisible()) {
                return; // only render visible items
            }
            oRM.renderControl(oItem);
        });

        oRM.write("</div>");

        if (oControl._bDoScroll) {
            oRM.write("</div>"); //scrollContainer
        }

        // render right scroll arrow
        oRM.renderControl(oControl._getScrollingArrow(oControl.getOrientation() === "Horizontal" ? "right" : "down"));

        // end wrapper div
        oRM.write("</div>");
    };

})();
}; // end of sap/ino/wall/ScrollableToolbarRenderer.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.SpriteDesign') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.SpriteDesign");

(function() {
    "use strict";

    /**
     * @class Specifies a sprite design
     * 
     * @static
     * @public
     */
    sap.ino.wall.SpriteDesign = {

        /**
         * A round shape.
         * 
         * @public
         */
        ROUND : "ROUND",

        /**
         * A square shape.
         * 
         * @public
         */
        SQUARE : "SQUARE",

        /**
         * A rounded square shape-
         * 
         * @public
         */
        MELT : "MELT",

        /**
         * A leaf shield-
         * 
         * @public
         */
        LEAF : "LEAF",

        /**
         * A flower shape.
         * 
         * @public
         */
        FLOWER : "FLOWER",

        /**
         * A shield shape.
         * 
         * @public
         */
        SHIELD : "SHIELD"

    };

})();
}; // end of sap/ino/wall/SpriteDesign.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.StickerColor') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.StickerColor");

(function() {
    "use strict";

    /**
     * @class Specifies a sticker color
     * 
     * @static
     * @public
     */
    sap.ino.wall.StickerColor = {

        /**
         * [Enter description for newValue]
         * 
         * @public
         */
        Yellow : "Yellow",

        /**
         * [Enter description for newValue]
         * 
         * @public
         */
        Pink : "Pink",

        /**
         * [Enter description for newValue]
         * 
         * @public
         */
        Cyan : "Cyan",

        /**
         * [Enter description for newValue]
         * 
         * @public
         */
        Green : "Green",

        /**
         * [Enter description for newValue]
         * 
         * @public
         */
        Orange : "Orange",

        /**
         * [Enter description for newValue]
         * 
         * @public
         */
        Red : "Red",

        /**
         * [Enter description for newValue]
         * 
         * @public
         */
        Rose : "Rose",

        /**
         * [Enter description for newValue]
         * 
         * @public
         */
        Lavender : "Lavender",

        /**
         * [Enter description for newValue]
         * 
         * @public
         */
        Neutral : "Neutral",

        /**
         * [Enter description for newValue]
         * 
         * @public
         */
        Black : "Black"

    };

})();
}; // end of sap/ino/wall/StickerColor.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.TShirtSize') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.TShirtSize");

(function() {
    "use strict";

    /**
     * @class Specifies a size in t-shirt sizes
     * 
     * @static
     * @public
     */
    sap.ino.wall.TShirtSize = {

        /**
         * An extra-small size.
         * 
         * @public
         */
        XS : "XS",

        /**
         * A small size.
         * 
         * @public
         */
        S : "S",

        /**
         * A medium size.
         * 
         * @public
         */
        M : "M",

        /**
         * A large size.
         * 
         * @public
         */
        L : "L",

        /**
         * An extra-large size.
         * 
         * @public
         */
        XL : "XL"

    };

})();
}; // end of sap/ino/wall/TShirtSize.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.TextEditorRenderer') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.TextEditorRenderer");

(function() {
    "use strict";

    /**
     * @class TextEditor renderer.
     * @static
     */
    sap.ino.wall.TextEditorRenderer = {};

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be rendered
     */
    sap.ino.wall.TextEditorRenderer.render = function(oRM, oControl) {
        oRM.write("<div");
        oRM.writeControlData(oControl);
        oRM.addClass("sapInoWallTextEditor");
        oRM.writeClasses();
        oRM.write(">");

        // hide the original nicedit panel
        oRM.write("<div id=\"" + oControl.getId() + "-nicPanel\" class=\"sapInoWallInvisible\"></div>");
        // display our own editor controls instead of the ones from nicedit to have a UI5 look and feel
        oRM.write("<div id=\"" + oControl.getId() + "-editorControls\" class=\"sapInoWallTextEditorControls\" role=\"toolbar\" aria-label=\"" + oControl._oRB.getText("CRTL_WALL_TEXTEDITOR_EXP_CONTROLS_TOOLBAR") + "\">");
        oRM.renderControl(oControl._getEditorControls());
        oRM.write("</div>");
        // render a dummy textarea that will be replaced with the rich text editor
        oRM.write("<div id=\"" + oControl.getId() + "-nicContent\" class=\"sapInoWallTextEditorContent sapMInputBaseInner sapMTextAreaInner\"><textarea id=\"" + oControl.getId() + "-nicContentTA\" class=\"sapMInputBaseInner sapInoWallTextEditorContent\">");
        oRM.writeEscaped(oControl.getValue());
        oRM.write("</textarea>");
        oRM.write("</div>");
        oRM.write("</div>");
    };

})();
}; // end of sap/ino/wall/TextEditorRenderer.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.ThemeFactory') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.ThemeFactory");

(function() {
    "use strict";

    sap.ui.core.Element.extend("sap.ino.wall.ThemeFactory", {
        metadata : {

        }
    });

    sap.ino.wall.ThemeFactory.getImage = function(sImage, sPath) {
        if (!sPath) {
            sPath = "sap.ino.wall";
        }

        // always get the current theme
        var sCurrentTheme = sap.ui.getCore().getConfiguration().getTheme();
        var bRTL = sap.ui.getCore().getConfiguration().getRTL();

        return sap.ui.resource(sPath, "themes/" + sCurrentTheme + "/img" + (bRTL ? "-RTL" : "") + "/ThemeFactory/" + sImage);
    };
})();
}; // end of sap/ino/wall/ThemeFactory.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallConfig') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */

jQuery.sap.declare("sap.ino.wall.WallConfig");

(function() {
    "use strict";

    sap.ino.wall.WallConfig = {};

    /* =========================================================== */
    /* wall static varables                                        */
    /* =========================================================== */

    // static variables for z-index calculation
    sap.ino.wall.WallConfig._MIN_DEPTH = 100;
    sap.ino.wall.WallConfig._MAX_DEPTH = 9999;
    sap.ino.wall.WallConfig._DEPTH_STEP = 1;
    sap.ino.wall.WallConfig._MULTI_OFFSET = 30;
    sap.ino.wall.WallConfig._MAX_STICKY_NOTE_CREATION_LENGTH = 80;

    sap.ino.wall.WallConfig._TOUCHMODE_MOVE = 0;
    sap.ino.wall.WallConfig._TOUCHMODE_SELECT = 1;

    sap.ino.wall.WallConfig._COLLISION_ALL = 0;
    sap.ino.wall.WallConfig._COLLISION_NEIGHBOURS = 1;
    sap.ino.wall.WallConfig._COLLISION_INTERSECTIONS = 2;

    sap.ino.wall.WallConfig._ADD_MODE_MANUAL = 0;
    sap.ino.wall.WallConfig._ADD_MODE_DROP = 1;
    sap.ino.wall.WallConfig._ADD_MODE_COPYPASTE = 2;
    sap.ino.wall.WallConfig._ADD_MODE_CLONE = 3;
    sap.ino.wall.WallConfig._ADD_MODE_DETACHCHILD = 4;
    sap.ino.wall.WallConfig._ADD_MODE_DETACHGROUPITEM = 5;
    // sap.ino.wall.WallConfig._ADD_MODE_MOVEFROMOTHERWALL = 6;

    /* =========================================================== */
    /* wallItem static varables                                    */
    /* =========================================================== */

    // touch modes
    sap.ino.wall.WallConfig._ITEM_TOUCHMODE_MOVE = 0;
    sap.ino.wall.WallConfig._ITEM_TOUCHMODE_RESIZE = 1;
    sap.ino.wall.WallConfig._ITEM_TOUCHMODE_MOVECHILD = 2;
    sap.ino.wall.WallConfig._ITEM_TOUCHMODE_MOVEGROUPITEM = 3;
    sap.ino.wall.WallConfig._ITEM_TOUCHMODE_MOVE_START = 4;
    sap.ino.wall.WallConfig._ITEM_TOUCHMODE_MOVE_END = 5;

    // static variables
    sap.ino.wall.WallConfig._ITEM_MIN_SIZE = 155;
    sap.ino.wall.WallConfig._ITEM_CHILD_ZOOM = 0.7;
    sap.ino.wall.WallConfig._ITEM_CHILD_UNSNAP_DISTANCE = 15;

})();
}; // end of sap/ino/wall/WallConfig.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallMode') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallMode");

(function() {
    "use strict";

    /**
     * @class Defines the interaction mode for the wall.
     * 
     * @static
     * @public
     */
    sap.ino.wall.WallMode = {

        /**
         * Items are locked, new items cannot be added
         * 
         * @public
         */
        Readonly : "Readonly",

        /**
         * Standard mode, items can be added and moved
         * 
         * @public
         */
        Write : "Write"

    };

})();
}; // end of sap/ino/wall/WallMode.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallPreviewRenderer') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallPreviewRenderer");

(function() {
    "use strict";

    /**
     * @class wall renderer.
     * @static
     */
    sap.ino.wall.WallPreviewRenderer = {};

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be rendered
     */
    sap.ino.wall.WallPreviewRenderer.render = function(oRM, oControl) {
        var sMode = oControl.getMode(), oWall = oControl.getWallControl(), sTitle, sText = "";

        switch (sMode) {
            case "Wall" :
                sTitle = oWall.getTitle();
                break;
            default :
                sTitle = "";
                sText = "";
        }

        // debug
        jQuery.sap.log.info("Preview rendering \"" + oControl.getId() + "\" (wall: " + sTitle + ") was triggered!");

        // render control div
        oRM.write("<div");
        oRM.writeControlData(oControl);
        oRM.addClass("sapInoWallPreview");
        if (sMode === "New" || sMode === "NewTemplate") {
            oRM.addClass("new");
        } else if (sMode === "More") {
            oRM.addClass("more");
        } else if (sMode === "Error") {
            oRM.addClass("error");
        }
        
        oRM.writeClasses();
        oRM.write(">");

        // render preview wrapper (canvas will be displayed too bing in height otherwise)
        oRM.write('<div class="sapInoWallPreviewCanvasWrapper">');
        if (oWall && oWall.getType() === "Template") {
            oRM.write('<div class="sapInoWallTemplateIndicatorPreview"></div>');
        }
        // render preview (Wall = canvas, New/Error = div
        oRM.write('<' + (sMode === 'Wall' ? 'canvas' : 'div') + ' width="300" height="200" id="' + oControl.getId() + '-canvas"');
        oRM.addClass("sapInoWallPreviewCanvas");
        if (sMode === "New" || sMode === "NewTemplate") {
            oRM.addClass("new");
        } else if (sMode === "More") {
            oRM.addClass("more");
        } else if (sMode === "Error") {
            oRM.addClass("error");
        }
        oRM.writeClasses();
        oRM.write(">");
        if (sMode === "New") {
            oRM.write('<div class="sapInoWallPreviewCreateNew">');
            oRM.renderControl(oControl._getIconNew());
            oRM.write('</div>');
            oRM.write('<div class="sapInoWallPreviewCreateTemplate">');
            oRM.renderControl(oControl._getIconTemplate());
            oRM.write('</div>');
        } else if (sMode === "NewTemplate") {
            oRM.renderControl(oControl._getIconNew());
        } else if (sMode === "More") {
            oRM.write(sText);
        }
        oRM.write('</' + (sMode === 'Wall' ? 'canvas' : 'div') + '>');
        oRM.write('</div>');

        oRM.renderControl(oControl._getFooter(sTitle, oControl.getOwner() || ""));

        if (oControl.getShowRemoveIcon()) {
            oRM.renderControl(oControl._getIconRemove());
        }

        oRM.write("</div>");
    };

})();
}; // end of sap/ino/wall/WallPreviewRenderer.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.config.Config') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.config.Config");

(function() {
    "use strict";

    sap.ino.wall.config.Config = {

        getWallSaveDelay : function() {
            return 3000;
        },

        getWallSaveDelayAuto : function() {
            return 250;
        },

        getWallSyncDelay : function() {
            return 0;
        },

        getWallSyncDelayAuto : function() {
            return !sap.ui.Device.system.tablet ? 1000 : 3000;
        },

        getWallCollisionThreshold : function() {
            return 50;
        },

        getEnableRichtTextEditing : function() {
            return true;
        },

        getEnableChildItems : function() {
            return true;
        },

        getZoomCapable : function() {
            return !(sap.ui.Device.browser.internet_explorer || sap.ui.Device.browser.firefox || sap.ui.Device.browser.safari);
        },

        getDebugPositioning : function() {
            return false;
        }
    };
})();
}; // end of sap/ino/wall/config/Config.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.library') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.wall.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/ino/wall/library",[
    'sap/ui/core/library',
    'sap/m/library'
], function() {
    "use strict";
    
    sap.ui.getCore().initLibrary({
        name : "sap.ino.wall",
        dependencies : ["sap.ui.core", "sap.m"],
        types : [], 
        interfaces : [],
        controls : [
            "sap.ino.wall.ColorPicker",
            "sap.ino.wall.DragButton",
            "sap.ino.wall.DropUpload",
            "sap.ino.wall.Hoverable",
            "sap.ino.wall.LightBox",
            "sap.ino.wall.ResponsiveOptionSelector",
            "sap.ino.wall.ScrollableToolbar",
            "sap.ino.wall.TextEditor",
            "sap.ino.wall.Wall",
            "sap.ino.wall.WallItemAttachment",
            "sap.ino.wall.WallItemBase",
            "sap.ino.wall.WallItemDocument",
            "sap.ino.wall.WallItemGroup",
            "sap.ino.wall.WallItemHeadline",
            "sap.ino.wall.WallItemImage",
            "sap.ino.wall.WallItemLine",
            "sap.ino.wall.WallItemLink",
            "sap.ino.wall.WallItemPerson",
            "sap.ino.wall.WallItemSprite",
            "sap.ino.wall.WallItemSticker",
            "sap.ino.wall.WallItemText",
            "sap.ino.wall.WallItemVideo",
            "sap.ino.wall.WallPreview"
        ],
        elements : [
            "sap.ino.wall.Pos"
        ],
        version : "2.4.16"
    });
});
}; // end of sap/ino/wall/library.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.util.Formatter') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.util.Formatter");

(function() {
    "use strict";

    sap.ino.wall.util.Formatter = {

        /**
         * Format first and last name
         * 
         * @param {string}
         *            sFirst first name
         * @param {string}
         *            sLast last name
         * @returns {string} first and last name combined
         * @public
         */
        fullName : function(sFirst, sLast) {
            return sFirst + " " + sLast;
        },

        /**
         * Capitalizes first letter of a string
         * 
         * @param {sString}
         *            the string to be modified
         * @returns {string} string with first letter capitalized
         * @public
         */
        capitalizeFirstLetter : function(sString) {
            if (sString) {
                return sString.charAt(0).toUpperCase() + sString.slice(1);
            }
            return sString;
        },

        /**
         * Escapes { and } characters with a single quote so that they are not parsed as binding properties
         * 
         * @param {sString}
         *            the string to be modified
         * @returns {string} string with escaped curly brackets
         * @public
         */
        escapeBindingCharacters : function(sString) {
            if (typeof sString === "string") {
                return sString.replace(/\{/g, "\\{").replace(/\}/g, "\\}");
            }
            return sString;
        },

        /**
         * Escapes \\ characters with an additional backslash so that the UI5 controls contain the right properties
         * (constructor will interpret the string)
         * 
         * @param {sString}
         *            the string to be modified
         * @returns {string} string with escaped backslashes
         * @public
         */
        escapeNetworkPaths : function(sString) {
            if (typeof sString === "string") {
                return sString.replace(/\\/g, "\\\\");
            }
            return sString;
        },

        /**
         * Returns the date in DD.MM.YYYY when the timestamp is older than 24h otherwise, XXh XXm XXs ago to have a
         * readable representation of an edit date
         * 
         * @param {any}
         *            vDate either a date string or a date object
         * @returns {string} the formatted date
         * @public
         */
        readableDateDelta : function(vDate) {
            var oDate = (vDate instanceof Date ? vDate : new Date(vDate)), iDeltaSeconds, sShort = "", temp;

            // TODO: remove this!
            // Workaround for local derby db server timestamp format
            if (oDate == "Invalid Date" && typeof vDate === "string") {
                temp = vDate.split(" ");
                oDate = new Date(temp[0] + " " + temp[1] + " " + temp[2] + " " + temp[5] + " " + temp[3]);
            }

            if (oDate == "Invalid Date") { // == is on purpose here
                return null;
            } else {
                iDeltaSeconds = (new Date() - oDate) / 1000;
                if (iDeltaSeconds < 86400) {
                    // for the last 24h we write a shorter notation without date
                    if (Math.floor(iDeltaSeconds / 3600) > 0) {
                        // h m ago
                        sShort = Math.floor(iDeltaSeconds / 3600) + "h " + Math.floor(iDeltaSeconds % 3600 / 60) + "m";// ago";
                    } else if (Math.floor(iDeltaSeconds / 60) > 0) {
                        // m s ago
                        sShort = Math.floor(iDeltaSeconds / 60) + "m " + Math.floor(iDeltaSeconds % 60) + "s";// ago";
                    } else {
                        // s ago
                        sShort = Math.floor(iDeltaSeconds) + "s ago";
                    }
                    return sShort;
                } else {
                    // > 2h: write date in format dd.mm.yyyy
                    return oDate.getDate() + "." + (oDate.getMonth() + 1) + "." + oDate.getFullYear();
                }
            }
        },

        /**
         * Formats the number in a short formal 1.123 = 1.1k, 1.234.567 = 1.12m, 1.234.567.890 = 1.23b etc
         * 
         * @returns {string} the formatted string
         */
        readableLargeNumber : function(vNumber) {
            if (vNumber >= 1000) {
                vNumber = Math.floor(vNumber / 100) / 10;
                vNumber = vNumber + "K";
            } else if (vNumber >= 1000000) {
                vNumber = Math.floor(vNumber / 10000) / 100;
                vNumber = vNumber + "M";
            } else if (vNumber >= 1000000000) {
                vNumber = Math.floor(vNumber) / 1000;
                vNumber = vNumber + "B";
            }
            return vNumber;
        },

        /**
         * replaces all line breaks with <br/> tags for HTML display
         * 
         * @param {string}
         *            sString the string
         * @returns {string} the result string
         * @public
         */
        nl2br : function(sString) {
            if (sString) {
                return sString.replace(/([\r\n|\n\r|\r|\n]|&#xa;)/g, "<br/>");
            }
            return sString;
        },

        /**
         * removes the namespace from a UI5 className string (used for CSV export)
         * 
         * @param {string}
         *            sString the string
         * @returns {string} the result string
         * @public
         */
        formatClassName : function(sString) {
            if (sString) {
                return sString.split('.').pop();
            }
            return sString;
        },

        /**
         * removes trailing spaces and ands quotes at the front and back (used for CSV export)
         * 
         * @param {string}
         *            sString the string
         * @returns {string} the result string
         * @public
         */
        trimAndQuoteForCSV : function(sString) {
            if (sString) {
                return '"' + sString.trim().replace(/"/g, '""') + '"';
            }
            return sString;
        },

        /**
         * returns first filled argument (used for CSV export)
         * 
         * @param {any}
         *            aArguments an arbitrary amount of arguments
         * @returns {string} the result string
         * @public
         */
        chooseFirst : function() {
            var i = 0;

            for (; i < arguments.length; i++) {
                if (arguments[i] !== null && arguments[i] !== undefined) {
                    return arguments[i];
                }
            }
        },
        
        mapNullToInitialValues : function(oJSON) {
            if (oJSON.backgroundColor === null) {
                oJSON.backgroundColor = "";
            }
            if (oJSON.backgroundImage === null) {
                oJSON.backgroundImage = "";
            }
        }
        
    };
})();
}; // end of sap/ino/wall/util/Formatter.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.util.Helper') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.util.Helper");

(function() {
    "use strict";
 
    sap.ino.wall.util.Helper = {

        /**
         * fetches URL parameter from the Query String
         * 
         * @param {string}
         *            sName the name of the parameter
         * @returns {mixed} null or the string value of the parameter
         * @public
         */
        getURLParameter : function(sName, sStatus, sErrorThrown) {
            sName = sName.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
            var regex = new RegExp("[\\?&]" + sName + "=([^&#]*)"), results = regex.exec(location.search);

            return (results === null ? null : decodeURIComponent(results[1].replace(/\+/g, " ")));
        },

        /**
         * fetches error message from database (parses the internal server error page response)
         * 
         * @param {object}
         *            jqXHR the server response object
         * @param {string}
         *            sStatus the error status
         * @param {string}
         *            sErrorThrown the error type
         * @returns {string} the constructed error message (translated or technical as fallback)
         * @public
         */
        getErrorCodeFromServerResponse : function(jqXHR, sStatus, sErrorThrown) {
            var aTemp = /<h1>([^<]*)<\/h1>/.exec(jqXHR.responseText), // get text in <h1> tag
            sErrorCode;

            if (aTemp && aTemp[1]) {
                // extract the error code
                sErrorCode = aTemp[1].split(" - ")[1];
                return sErrorCode;
            }
        },

        /**
         * fetches error message from database (parses the internal server error page response)
         * 
         * @param {object}
         *            jqXHR the server response object
         * @param {string}
         *            sStatus the error status
         * @param {string}
         *            sErrorThrown the error type
         * @returns {string} the constructed error message (translated or technical as fallback)
         * @public
         */
        extractErrorCodeFromServerResponse : function(jqXHR, sStatus, sErrorThrown) {
            var sErrorCode = this.getErrorCodeFromServerResponse(jqXHR, sStatus, sErrorThrown), sErrorMessage = "";

            if (/^[A-Z0-9\d_]+$/.test(sErrorCode)) {
                // seems to be an error code for translation (only uppercase letters and _)
                var oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ino.wall");
                sErrorMessage = oRB.getText("WALL_APP_ERROR_" + sErrorCode);
            } else if (sErrorCode) {
                // is another technical string, just add it to the infos that we have
                sErrorThrown += " (" + sErrorCode + ")";
            }

            if (!sErrorMessage) {
                // fallback: construct an error string from status and response type
                sErrorMessage = sStatus.toUpperCase() + ": " + sErrorThrown;
            }

            return sErrorMessage;
        },

        /**
         * returns a random integer value in the range of the given parameters
         * 
         * @param {int}
         *            iMin the lower boundary
         * @param {int}
         *            iMax the upper boundary
         * @returns {int} random number
         * @public
         */
        randomMinMax : function(iMin, iMax) {
            return Math.floor(Math.random() * (iMax - iMin + 1) + iMin);
        },

        /**
         * returns a random entry from an array
         * 
         * @param {array}
         *            aAray the array
         * @returns {mixed} random array entry
         * @public
         */
        randomFromArray : function(aArray) {
            if (aArray.length) {
                return aArray[sap.ino.wall.util.Helper.randomMinMax(0, aArray.length - 1)];
            }
            return null;
        },

        /**
         * replaces variables {0}, {1}, {2} with arguments
         * 
         * @param {array}
         *            aAray the array
         * @returns {mixed} random array entry
         * @public
         */
        stringFormat : function(sString) {
            var aArgs = Array.prototype.slice.call(arguments, 1), rSprintfRegex = /\{(\d+)\}/g, fnSprintf = function(match, number) {
                return number in aArgs ? aArgs[number] : match;
            };

            return sString.replace(rSprintfRegex, fnSprintf);
        },

        /**
         * returns the current text selection
         * 
         * @public
         */
        getTextSelection : function() {
            var text = "";

            if (window.getSelection) {
                text = window.getSelection().toString();
            } else if (document.selection && document.selection.type != "Control") {
                text = document.selection.createRange().text;
            }
            return text;
        },

        /**
         * returns the node of the current text selection
         * 
         * @public
         */
        getTextSelectionNode : function() {
            if (document.selection) {
                return document.selection.createRange().parentElement();
            } else {
                var selection = window.getSelection();
                if (selection.rangeCount > 0) {
                    return selection.getRangeAt(0).startContainer.parentNode;
                }
            }
        },

        /**
         * deselect all text selections on the whole document
         * 
         * @public
         */
        deselectAllText : function() {
            var oSelection = (window.getSelection ? window.getSelection() : document.selection);

            if (oSelection) {
                if (oSelection.removeAllRanges) {
                    oSelection.removeAllRanges();
                } else if (oSelection.empty) {
                    oSelection.empty();
                }
            }
        },

        /**
         * select all text on the current DOM element
         * 
         * @public
         */
        selectAllText : function(oElement) {
            var oRange, oSelection;

            if (document.body.createTextRange) {
                oRange = document.body.createTextRange();
                oRange.moveToElementText(oElement);
                oRange.select();
            } else if (window.getSelection) {
                oSelection = window.getSelection();
                oRange = document.createRange();
                oRange.selectNodeContents(oElement);
                oSelection.removeAllRanges();
                oSelection.addRange(oRange);
            }
        },

        /**
         * checks if a DOM element is in the visible area of the user's screen
         * 
         * @param {jQueryObject}
         *            $elem the jQuery element
         * @returns {boolean} true=visible, false=invisible
         * @public
         */
        isScrolledIntoView : function($elem) {
            var docViewTop = jQuery(window).scrollTop(), docViewBottom = docViewTop + jQuery(window).height(), elemTop = $elem.offset().top, elemBottom = elemTop + $elem.height();

            return ((elemBottom <= docViewBottom) && (elemTop >= docViewTop));
        },

        /**
         * Displays an error dialog with the given message and an OK button. If a callback is given, it is called after
         * the alert dialog has been closed
         * 
         * @param {string}
         *            sMessage Message to be displayed in the dialog
         * @param {function}
         *            fnCallback callback function to be called when the user closes the dialog
         * @param {boolean}
         *            bReportThis if true, a "report a bug" link is displayed
         * @public
         */
        showError : function(sMessage, fnCallback, bReportThis) {
            sap.ino.wall.util.Helper._showErrorByType(sMessage, fnCallback, "Error", bReportThis);
        },

        /**
         * Displays an unexpected error dialog with the given message and an OK button. If a callback is given, it is
         * called after the alert dialog has been closed
         * 
         * @param {string}
         *            sMessage Message to be displayed in the dialog
         * @param {function}
         *            fnCallback callback function to be called when the user closes the dialog
         * @param {boolean}
         *            bReportThis if true, a "report a bug" link is displayed
         * @public
         */
        showErrorUnexpected : function(sMessage, fnCallback, bReportThis) {
            sap.ino.wall.util.Helper._showErrorByType(sMessage, fnCallback, "ErrorUnexpected", bReportThis);
        },

        /**
         * Displays a fatal error dialog with the given message and an OK button. If a callback is given, it is called
         * after the alert dialog has been closed
         * 
         * @param {string}
         *            sMessage Message to be displayed in the dialog
         * @param {function}
         *            fnCallback callback function to be called when the user closes the dialog
         * @param {boolean}
         *            bReportThis if true, a "report a bug" link is displayed
         * @public
         */
        showFatal : function(sMessage, fnCallback, bReportThis) {
            sap.ino.wall.util.Helper._showErrorByType(sMessage, fnCallback, "Fatal", bReportThis);
        },

        /**
         * Displays an unexpected fatal error dialog with the given message and an OK button. If a callback is given, it
         * is called after the alert dialog has been closed
         * 
         * @param {string}
         *            sMessage Message to be displayed in the dialog
         * @param {function}
         *            fnCallback callback function to be called when the user closes the dialog
         * @param {boolean}
         *            bReportThis if true, a "report a bug" link is displayed
         * @public
         */
        showFatalUnexpected : function(sMessage, fnCallback, bReportThis) {
            sap.ino.wall.util.Helper._showErrorByType(sMessage, fnCallback, "FatalUnexpected", bReportThis);
        },

        /**
         * Displays a fatal dialog with the given message and an OK button. If a callback is given, it is called after
         * the alert dialog has been closed
         * 
         * @param {string}
         *            sMessage Message to be displayed in the dialog
         * @param {function}
         *            fnCallback callback function to be called when the user closes the dialog
         * @param {string}
         *            sType error Type that defines the title and the icon of the dialog
         * @public
         */
        _showErrorByType : function(sMessage, fnCallback, sType, bReportThis) {
            var sTypeTitle = "", sIconUri = sap.m.MessageBox.Icon.ERROR;

            var oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ino.wall");
            
            // TODO: bReportThis is not implemented yet
            if (sType === undefined) {
                sTypeTitle = oRB.getText("WALL_APP_ERROR_EXPECTED");
                sIconUri = sap.ui.core.IconPool.getIconURI("alert");
            } else {
                switch (sType) {
                    case "Error" :
                        sTypeTitle = oRB.getText("WALL_APP_ERROR_EXPECTED");
                        sIconUri = sap.ui.core.IconPool.getIconURI("error");
                        break;
                    case "ErrorUnexpected" :
                        sTypeTitle = oRB.getText("WALL_APP_ERROR_UNEXPECTED");
                        sIconUri = sap.ui.core.IconPool.getIconURI("error");
                        break;
                    case "Fatal" :
                    case "FatalUnexpected" :
                        sTypeTitle = oRB.getText("WALL_APP_FATAL_UNEXPECTED");
                        sIconUri = sap.ui.core.IconPool.getIconURI("flag");
                        break;
                    default:
                        break;
                }
            }

            return sap.m.MessageBox.show(sMessage, {
                icon : sIconUri,
                title : sTypeTitle,
                onClose : fnCallback
            });
        },

        /**
         * Renders and flushes a control item into the DOM
         * 
         * @returns {this} this pointer for chaining
         * @public
         */
        renderItemIntoContainer : function(oDomRef, oItem, bDoNotPreserve, vInsert) {
            var oRM;

            if (oDomRef) {
                oRM = sap.ui.getCore().createRenderManager();
                oRM.renderControl(oItem);
                oRM.flush(oDomRef, bDoNotPreserve, vInsert);
                oRM.destroy();
            }

            return this;
        },

        /**
         * Creates a random hex color in format #123456
         * 
         * @returns {string} a hex color value in string format
         * @public
         */
        createRandomHexColor : function() {
            var sColor = Math.floor(Math.random() * 16777215).toString(16);

            // fill prepending 0s
            while (sColor.length < 6) {
                sColor = "0" + sColor;
            }

            return "#" + sColor;
        },

        /**
         * Darkens/Lightens a hex color by the given amount
         * 
         * @param {string}
         *            sHexColor the hex color prefixed with "#"
         * @param {integer}
         *            iPercent the percentage value (negative = darken, positive = lighten)
         * @returns {string} the shaded hex color value
         * @public
         */
        shadeColor : function(sHexColor, iPercent) {
            if (!sHexColor) {
                return;
            }
            if (sHexColor.charAt("0") != "#") {
                sHexColor = "#" + sHexColor;
            }
            // short hex format: rewrite to be able to process it (#fff -> #ffffff)
            if (sHexColor.length === 4) {
                sHexColor = sHexColor[0] + sHexColor[1] + sHexColor[1] + sHexColor[2] + sHexColor[2] + sHexColor[3] + sHexColor[3];
            }
            var num = parseInt(sHexColor.slice(1), 16), amt = Math.round(2.55 * iPercent), R = (num >> 16) + amt, G = (num >> 8 & 0x00FF) + amt, B = (num & 0x0000FF) + amt;

            return "#" + (0x1000000 + (R < 255 ? (R < 1 ? 0 : R) : 255) * 0x10000 + (G < 255 ? (G < 1 ? 0 : G) : 255) * 0x100 + (B < 255 ? (B < 1 ? 0 : B) : 255)).toString(16).slice(1);
        },

        /**
         * calculates the color luminance from a hex color value using farbtastic
         * 
         * @param {string}
         *            sHexColor the hex color prefixed with "#"
         * @returns {float} the luminance value of the color
         * @public
         */
        getColorLuminance : function(sHexColor) {
            if (!sHexColor) {
                return;
            }
            if (sHexColor.charAt("0") != "#") {
                sHexColor = "#" + sHexColor;
            }
            var aRGB, fLuminance = 0.0, fnUnpack, fnRGBToHSL;
            fnUnpack = function(sColor) {
                if (sColor.length === 7) {
                    return [parseInt('0x' + sColor.substring(1, 3), 16) / 255, parseInt('0x' + sColor.substring(3, 5), 16) / 255, parseInt('0x' + sColor.substring(5, 7), 16) / 255];
                } else if (sColor.length === 4) {
                    return [parseInt('0x' + sColor.substring(1, 2), 16) / 15, parseInt('0x' + sColor.substring(2, 3), 16) / 15, parseInt('0x' + sColor.substring(3, 4), 16) / 15];
                }
            };

            fnRGBToHSL = function(aRGB) {
                var min, max, delta, h, s, l, r = aRGB[0], g = aRGB[1], b = aRGB[2];

                min = Math.min(r, Math.min(g, b));
                max = Math.max(r, Math.max(g, b));
                delta = max - min;
                l = (min + max) / 2;
                s = 0;
                if (l > 0 && l < 1) {
                    s = delta / (l < 0.5 ? (2 * l) : (2 - 2 * l));
                }
                h = 0;
                if (delta > 0) {
                    if (max === r && max !== g) {
                        h += (g - b) / delta;
                    }
                    if (max === g && max !== b) {
                        h += (2 + (b - r) / delta);
                    }
                    if (max === b && max !== r) {
                        h += (4 + (r - g) / delta);
                    }
                    h /= 6;
                }
                return [h, s, l];
            };

            aRGB = fnUnpack(sHexColor);
            if (aRGB && aRGB.length) {
                fLuminance = fnRGBToHSL(aRGB)[2];
            }

            return fLuminance;
        },

        /**
         * adds transparency to the color value
         * 
         * @param {string}
         *            sHexColor the hex color prefixed with "#"
         * @param {integer}
         *            iOpacity the percentage value for the opacity
         * @returns {string} the shaded hex color value
         * @public
         */
        transparentColor : function(sHexColor, iOpacity) {
            var iR, iG, iB;
            if (!sHexColor) {
                return;
            }
            sHexColor = sHexColor.replace('#', '');
            iR = parseInt(sHexColor.substring(0, 2), 16);
            iG = parseInt(sHexColor.substring(2, 4), 16);
            iB = parseInt(sHexColor.substring(4, 6), 16);
            return 'rgba(' + iR + ',' + iG + ',' + iB + ',' + (iOpacity / 100) + ')';
        },

        /**
         * adds a browser prefix to the given style value using the device API
         * 
         * @param {string}
         *            sStyle the style string
         * @returns {string} the prefixed style string
         * @public
         */
        addBrowserPrefix : function(sStyle) {
            if (sap.ui.Device.browser.webkit) {
                return "-webkit-" + sStyle;
            } else if (sap.ui.Device.browser.firefox) {
                return "-moz-" + sStyle;
            } else if (sap.ui.Device.browser.internet_explorer) {
                return "-ms-" + sStyle;
            }
        },

        /**
         * removes unwanted HTML tags from a string
         * 
         * @param {string}
         *            sStyle the style string
         * @returns {string} the prefixed style string
         * @public
         */
        stripTags : function(sInput, sAllowed, bKeepParagraphs) {
            var sTags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi, sComments = /<!--[\s\S]*?-->/gi;
            sAllowed = (((sAllowed || '') + '').toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join('');
            if (!bKeepParagraphs) {
                sInput = sInput.replace(/<p>/g, "<div>");
                sInput = sInput.replace(/<\/p>/g, "</div>");
            }
            return sInput.replace(sComments, '').replace(sTags, function($0, $1) {
                return sAllowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : '';
            });
        },
        
        /**
         * returns correct X pos of an event for the different devices
         * 
         * @param {event}
         *            the event 
         * @returns {int} the X pos of the event or undefined
         * @public
         */
        getEventX : function(oEvent) {
            return oEvent.originalEvent.pageX || 
                ((oEvent.touches && oEvent.touches.length > 0) ? oEvent.touches[0].pageX : undefined) || 
                ((oEvent.changedTouches && oEvent.changedTouches.length > 0) ?  oEvent.changedTouches[0].pageX : undefined);
        },
    
        /**
         * returns correct Y pos of an event for the different devices
         * 
         * @param {event}
         *            the event 
         * @returns {int} the Y pos of the event or undefined
         * @public
         */
        getEventY : function(oEvent) {
            return oEvent.originalEvent.pageY || 
                ((oEvent.touches && oEvent.touches.length > 0) ? oEvent.touches[0].pageY : undefined) || 
                ((oEvent.changedTouches && oEvent.changedTouches.length > 0) ?  oEvent.changedTouches[0].pageY : undefined);
        },
        
        getStandardImages : function () {
            var oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ino.wall");
            var standardImages = [{
                file : "basket.jpg",
                preview : "basket_preview.jpg",
                name : oRB.getText("WALL_SETTING_BACKGROUND_STANDARD_IMG_BASKET")
            }, {
                file : "brick.jpg",
                preview : "brick_preview.jpg",
                name : oRB.getText("WALL_SETTING_BACKGROUND_STANDARD_IMG_BRICK")
            }, {
                file : "carpet.jpg",
                preview : "carpet_preview.jpg",
                name : oRB.getText("WALL_SETTING_BACKGROUND_STANDARD_IMG_CARPET")
            }, {
                file : "cork.jpg",
                preview : "cork_preview.jpg",
                name : oRB.getText("WALL_SETTING_BACKGROUND_STANDARD_IMG_CORK")
            }, {
                file : "dots_grey.jpg",
                preview : "dots_grey_preview.jpg",
                name : oRB.getText("WALL_SETTING_BACKGROUND_STANDARD_IMG_DOTS_GREY")
            }, {
                file : "dots_red.jpg",
                preview : "dots_red_preview.jpg",
                name : oRB.getText("WALL_SETTING_BACKGROUND_STANDARD_IMG_DOTS_RED")
            }, {
                file : "felt.jpg",
                preview : "felt_preview.jpg",
                name : oRB.getText("WALL_SETTING_BACKGROUND_STANDARD_IMG_FELT")
            }, {
                file : "flowers.jpg",
                preview : "flowers_preview.jpg",
                name : oRB.getText("WALL_SETTING_BACKGROUND_STANDARD_IMG_FLOWERS")
            }, {
                file : "gaze.jpg",
                preview : "gaze_preview.jpg",
                name : oRB.getText("WALL_SETTING_BACKGROUND_STANDARD_IMG_GAZE")
            }, {
                file : "graphpaper.jpg",
                preview : "graphpaper_preview.jpg",
                name : oRB.getText("WALL_SETTING_BACKGROUND_STANDARD_IMG_GRAPHPAPER")
            }, {
                file : "grass.jpg",
                preview : "grass_preview.jpg",
                name : oRB.getText("WALL_SETTING_BACKGROUND_STANDARD_IMG_GRASS")
            }, {
                file : "lined_paper.jpg",
                preview : "lined_paper_preview.jpg",
                name : oRB.getText("WALL_SETTING_BACKGROUND_STANDARD_IMG_LINED_PAPER")
            }, {
                file : "linen.jpg",
                preview : "linen_preview.jpg",
                name : oRB.getText("WALL_SETTING_BACKGROUND_STANDARD_IMG_LINEN")
            }, {
                file : "paper.jpg",
                preview : "paper_preview.jpg",
                name : oRB.getText("WALL_SETTING_BACKGROUND_STANDARD_IMG_PAPER")
            }, {
                file : "patchwork.jpg",
                preview : "patchwork_preview.jpg",
                name : oRB.getText("WALL_SETTING_BACKGROUND_STANDARD_IMG_PATCHWORK")
            }, {
                file : "squared_paper.jpg",
                preview : "squared_paper_preview.jpg",
                name : oRB.getText("WALL_SETTING_BACKGROUND_STANDARD_IMG_SQUARED_PAPER")
            }, {
                file : "stone.jpg",
                preview : "stone_preview.jpg",
                name : oRB.getText("WALL_SETTING_BACKGROUND_STANDARD_IMG_STONE")
            }, {
                file : "yellow_patchwork.jpg",
                preview : "yellow_patchwork_preview.jpg",
                name : oRB.getText("WALL_SETTING_BACKGROUND_STANDARD_IMG_YELLOW_PATCHWORK")
            }];
            return standardImages;
        }

    };
})();
}; // end of sap/ino/wall/util/Helper.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.util.Logger') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.util.Logger");

(function() {
    "use strict";

    var SAP_WALL_LOG_LEVEL = 3; // 0=None, 1=Fatal, 2=Error, 3=Warning, 4=Info, 5=Debug, 6=All
    var SAP_WALL_DEBUG_LOG = false;

    sap.ino.wall.util.Logger = {

        /* =========================================================== */
        /* begin: API methods */
        /* =========================================================== */

        /**
         * Logs a sapwall fatal message with callee information
         * 
         * @parameter {sMessage} the message to log
         * @public
         */
        fatal : function(sMessage) {
            var ui5LogLevel = jQuery.sap.log.getLevel(), wallLogLevel = SAP_WALL_LOG_LEVEL;

            jQuery.sap.log.setLevel(Math.max(ui5LogLevel, wallLogLevel));
            jQuery.sap.log.fatal("wallFatal: " + sMessage + (SAP_WALL_DEBUG_LOG ? " @ " + this._getCallerInfo() : ""));
            jQuery.sap.log.setLevel(ui5LogLevel);
        },

        /**
         * Logs a sapwall error message with callee information
         * 
         * @parameter {sMessage} the message to log
         * @public
         */
        error : function(sMessage) {
            var ui5LogLevel = jQuery.sap.log.getLevel(), wallLogLevel = SAP_WALL_LOG_LEVEL;

            jQuery.sap.log.setLevel(Math.max(ui5LogLevel, wallLogLevel));
            jQuery.sap.log.error("wallError: " + sMessage + (SAP_WALL_DEBUG_LOG ? " @ " + this._getCallerInfo() : ""));
            jQuery.sap.log.setLevel(ui5LogLevel);
        },

        /**
         * Logs a sapwall warning message with callee information
         * 
         * @parameter {sMessage} the message to log
         * @public
         */
        warning : function(sMessage) {
            var ui5LogLevel = jQuery.sap.log.getLevel(), wallLogLevel = SAP_WALL_LOG_LEVEL;

            jQuery.sap.log.setLevel(Math.max(ui5LogLevel, wallLogLevel));
            jQuery.sap.log.warning("wallWarning: " + sMessage + (SAP_WALL_DEBUG_LOG ? " @ " + this._getCallerInfo() : ""));
            jQuery.sap.log.setLevel(ui5LogLevel);
        },

        /**
         * Logs a sapwall info message with callee information
         * 
         * @parameter {sMessage} the message to log
         * @public
         */
        info : function(sMessage) {
            var ui5LogLevel = jQuery.sap.log.getLevel(), wallLogLevel = SAP_WALL_LOG_LEVEL;

            jQuery.sap.log.setLevel(Math.max(ui5LogLevel, wallLogLevel));
            jQuery.sap.log.info("wallInfo: " + sMessage + (SAP_WALL_DEBUG_LOG ? " @ " + this._getCallerInfo() : ""));
            jQuery.sap.log.setLevel(ui5LogLevel);
        },

        /**
         * Logs a sapwall debug message with callee information
         * 
         * @parameter {sMessage} the message to log
         * @public
         */
        debug : function(sMessage) {
            var ui5LogLevel = jQuery.sap.log.getLevel(), wallLogLevel = SAP_WALL_LOG_LEVEL;

            jQuery.sap.log.setLevel(Math.max(ui5LogLevel, wallLogLevel));
            jQuery.sap.log.debug("wallDebug: " + sMessage + (SAP_WALL_DEBUG_LOG ? " @ " + this._getCallerInfo() : ""));
            jQuery.sap.log.setLevel(ui5LogLevel);
        },

        /* =========================================================== */
        /* end: API methods */
        /* =========================================================== */

        /* =========================================================== */
        /* begin: internal methods */
        /* =========================================================== */

        /**
         * Returns the current callee information extracted from the call stack (file + line number + position) TODO:
         * Works well for Chrome, might have issues on other browsers
         * 
         * @returns {string} the current caller info
         * @private
         */
        _getCallerInfo : function() {
            var fnGetErrorObject = function() {
                try {
                    throw new Error('');
                } catch (oError) {
                    return oError;
                }
            }, oError = fnGetErrorObject(), sCallerLine, sCallerInfo;

            sCallerLine = oError.stack.split("\n")[5];
            if (!sCallerLine) { // when error occurs in evil() then caller info is on position 4
                sCallerLine = oError.stack.split("\n")[4];
            }
            sCallerInfo = (sCallerLine ? sCallerLine.slice(sCallerLine.indexOf("at ") + 2, sCallerLine.length) : "unknown caller");

            if (!sCallerLine) {
                debugger;
            }

            return sCallerInfo.trim();
        },

    /* =========================================================== */
    /* end: internal methods */
    /* =========================================================== */
    };

})();
}; // end of sap/ino/wall/util/Logger.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.util.WallPatches') ) {
  jQuery.sap.declare('sap.ino.wall.util.WallPatches');
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained

jQuery.sap.require('sap.m.Popover'); // unlisted dependency retained


/**
 * Wall patch for increase z-Index to allow for a custom range between 100-10000
 */
(function() {
    "use strict";

    for (var i = 0; i < 1000; i++) {
        sap.ui.core.Popup.prototype.getNextZIndex();
    }
})();

/**
 * Wall patch for the load module renderer, catch all url loading problems (e.g. user is not logged in anymore)
 */
(function() {
    "use strict";

    var ___jQuerySapRequire = jQuery.sap.require;
    jQuery.sap.require = function() {
        try {
            ___jQuerySapRequire.apply(this, arguments);
        } catch (oError) {
            if (/Unexpected token </.test(oError.message)) {
                // user is not logged in anymore: reload the page
                document.location.reload();
            } else {
                throw (oError);
            }
        }
    };

})();

/**
 * Wall patch for the popup to fix position issues with zoom css property
 */
(function() {
    "use strict";

    var ___sapUiCorePopupApplyPosition = sap.ui.core.Popup.prototype._applyPosition;
    sap.ui.core.Popup.prototype._applyPosition = function(oPosition) {
        ___sapUiCorePopupApplyPosition.apply(this, arguments);
        var $Ref = this._$();
        // mod start
        // wall position of the popups with zoom factor
        var $wall = jQuery(oPosition.of).closest(".sapInoWallWOuter"), oWall, fZoomFactor;
        if ($wall.length > 0) {
            oWall = sap.ui.getCore().byId($wall.attr("id"));
            fZoomFactor = oWall.getZoom() / 100;

            // add zoom/scale factor to popup
            if (sap.ui.Device.browser.internet_explorer) { // scale
                $Ref.css("-ms-transform", "scale(" + fZoomFactor + ")");
            } else if (sap.ui.Device.browser.firefox) { // scale
                $Ref.css("-moz-transform", "scale(" + fZoomFactor + ")");
            } else if (sap.ui.Device.browser.safari) { // scale
                $Ref.css("-webkit-transform", "scale(" + fZoomFactor + ")");
            } else { // zoom
                $Ref.css("zoom", fZoomFactor);
            }

            if (jQuery(this._oPosition.of).control(0) instanceof sap.m.Select) { // zoom
                // adopt select list to select width
                if (!sap.ino.wall.config.Config.getZoomCapable()) {
                    $Ref.css("width", parseInt(this._oLastOfRect.width, 10) / fZoomFactor);
                } else {
                    $Ref.css("width", parseInt(this._oLastOfRect.width, 10));
                }
                $Ref.css("min-width", "inherit");
                $Ref.find(".sapMList").css("width", "100%");
            }
            // Allow also top positioning and centering
            // ff+ie+sf: re-calculate the correct position (scaling the popup will center the dimensions)
            if (!sap.ino.wall.config.Config.getZoomCapable()) {
                var iWidth = parseInt($Ref.css("width"), 10), iHeight = parseInt($Ref.css("height"), 10);

                // we have to deduct the half of the difference to the normal size
                $Ref.css("left", parseInt(this._oLastOfRect.left, 10) + (iWidth * fZoomFactor - iWidth) / 2.0);
                $Ref.css("top", parseInt(this._oLastOfRect.top, 10) + (iHeight * fZoomFactor - iHeight) / 2.0 + parseInt(this._oLastOfRect.height, 10));
                $Ref.css("right", "");
            } else {
                $Ref.css("left", parseInt(this._oLastOfRect.left, 10));
                $Ref.css("top", (parseInt(this._oLastOfRect.top, 10) + this._oLastOfRect.height));
                $Ref.css("right", "");
            }
        }
        // mod end
    };

    
    // Suppress arrow positioning, which also repositions the popover 
    var ___sapMPopoverAdjustPositionAndArrow = sap.m.Popover.prototype._adjustPositionAndArrow;
    sap.m.Popover.prototype._adjustPositionAndArrow = function () {
        // mod start
        var $parent = jQuery(this._getOpenByDomRef());
        var $wall = jQuery($parent).closest(".sapInoWallWOuter"), oWall, fZoomFactor;
        if ($wall.length > 0) {
            this.addStyleClass("sapInoWallZoomableSelectPopup");
            return;
        }
        // mod end
        ___sapMPopoverAdjustPositionAndArrow.apply(this);
    };

})();
}; // end of sap/ino/wall/util/WallPatches.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.ColorPicker') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.ColorPicker");

(function() {
    "use strict";

    
        
    /**
     * Constructor for a new ColorPicker. 
     * 
     * Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and
     * associated objects as well as event handlers.
     * 
     * If the name of a setting is ambiguous (e.g. a property has the same name as an event), then the framework assumes
     * property, aggregation, association, event in that order. To override this automatic resolution, one of the
     * prefixes "aggregation:", "association:" or "event:" can be added to the name of the setting (such a prefixed name
     * must be enclosed in single or double quotes).
     * 
     * The supported settings are:
     * <ul>
     * <li>Properties
     * <ul>
     * <li>{@link #getColor color} : string (default: '#ffffff')</li>
     * <li>{@link #getPlacement placement} : sap.m.PlacementType (default: sap.m.PlacementType.Right)</li>
     * </ul>
     * </li>
     * <li>Aggregations
     * <ul>
     * <li>{@link #get_popoverColorSelector _popoverColorSelector} : sap.m.Popover</li>
     * </ul>
     * </li>
     * <li>Associations
     * <ul>
     * </ul>
     * </li>
     * <li>Events
     * <ul>
     * <li>{@link sap.ino.wall.ColorPicker#event:change change} : fnListenerFunction or [fnListenerFunction,
     * oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
     * </ul>
     * </li>
     * </ul>
     * 
     * 
     * @param {string}
     *            [sId] id for the new control, generated automatically if no id is given
     * @param {object}
     *            [mSettings] initial settings for the new control
     * 
     * @class A ColorPicker control that uses the default UI5 colorpicker inside a sap.m.Popover for display. The
     *        popover display the color picker wheel and an input field to enter color values directly.
     * @extends sap.ui.core.Control
     * @version 1.16.4
     * 
     * @constructor
     * @public
     * @name sap.ino.wall.ColorPicker
     * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
     */
    sap.ui.core.Control.extend("sap.ino.wall.ColorPicker", {
        metadata : {

            publicMethods : [
            // methods
            "close", "openBy", "isOpen"],
            properties : {
                "color" : {
                    type : "string",
                    group : "Misc",
                    defaultValue : '#ffffff'
                },
                "colorInputActive" : {
                    type : "boolean",
                    group : "Misc",
                    defaultValue : true
                },
                "placement" : {
                    type : "sap.m.PlacementType",
                    group : "Behavior",
                    defaultValue : sap.m.PlacementType.Right
                },
                "zoomable" : {
                    type : "boolean",
                    defaultValue : true
                },
                "autoClose" : {
                    type : "boolean",
                    defaultValue : false
                }
            },
            aggregations : {
                "_popoverColorSelector" : {
                    type : "sap.m.Popover",
                    multiple : false
                },
                "_colorPickerControl" : {
                    type : "sap.ino.controls.ColorPickerLite",
                    multiple : false,
                    visibility : "hidden"
                },
                "colorInputControl" : {
                    type : "sap.m.Input",
                    multiple : false
                }
            },
            events : {
                "change" : {}
            }
        }
    });

    /**
     * Creates a new subclass of class sap.ino.wall.ColorPicker with name <code>sClassName</code> and enriches it
     * with the information contained in <code>oClassInfo</code>.
     * 
     * <code>oClassInfo</code> might contain the same kind of informations as described in
     * {@link sap.ui.core.Element.extend Element.extend}.
     * 
     * @param {string}
     *            sClassName name of the class to be created
     * @param {object}
     *            [oClassInfo] object literal with informations about the class
     * @param {function}
     *            [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to
     *            sap.ui.core.ElementMetadata.
     * @return {function} the created class / constructor function
     * @public
     * @static
     * @name sap.ino.wall.ColorPicker.extend
     * @function
     */

    sap.ino.wall.ColorPicker.M_EVENTS = {
        'change' : 'change'
    };

    /**
     * Getter for property <code>color</code>. The color in hex value format with leading "#".
     * 
     * Default value is <code>#ffffff</code>
     * 
     * @return {string} the value of property <code>color</code>
     * @public
     * @name sap.ino.wall.ColorPicker#getColor
     * @function
     */

    /**
     * Setter for property <code>color</code>.
     * 
     * Default value is <code>#ffffff</code>
     * 
     * @param {string}
     *            sColor new value for property <code>color</code>
     * @return {sap.ino.wall.ColorPicker} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.ColorPicker#setColor
     * @function
     */

    /**
     * Getter for property <code>placement</code>. This is the information about on which side will the popover be
     * placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right, sap.m.PlacementType.Top,
     * sap.m.PlacementType.Bottom, sap.m.PlacementType.Vertical, sap.m.PlacementType.Left.Horizontal,
     * sap.m.PlacementType.Left.Auto. The default value is sap.m.PlacementType.Right. Setting this property while
     * popover is open won't cause any rerendering of the popover, but it will take effect when it's opened again.
     * 
     * Default value is <code>Right</code>
     * 
     * @return {sap.m.PlacementType} the value of property <code>placement</code>
     * @public
     * @name sap.ino.wall.ColorPicker#getPlacement
     * @function
     */

    /**
     * Setter for property <code>placement</code>.
     * 
     * Default value is <code>Right</code>
     * 
     * @param {sap.m.PlacementType}
     *            oPlacement new value for property <code>placement</code>
     * @return {sap.ino.wall.ColorPicker} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.ColorPicker#setPlacement
     * @function
     */

    /**
     * Getter for aggregation <code>_popoverColorSelector</code>.<br/> This is the hidden aggregation for managing
     * an internally created control.
     * 
     * @return {sap.m.Popover}
     * @public
     * @name sap.ino.wall.ColorPicker#get_popoverColorSelector
     * @function
     */

    /**
     * Setter for the aggregated <code>_popoverColorSelector</code>.
     * 
     * @param {sap.m.Popover}
     *            o_popoverColorSelector
     * @return {sap.ino.wall.ColorPicker} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.ColorPicker#set_popoverColorSelector
     * @function
     */

    /**
     * Destroys the _popoverColorSelector in the aggregation named <code>_popoverColorSelector</code>.
     * 
     * @return {sap.ino.wall.ColorPicker} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.ColorPicker#destroy_popoverColorSelector
     * @function
     */

    /**
     * 
     * @name sap.ino.wall.ColorPicker#change
     * @event
     * @param {sap.ui.base.Event}
     *            oControlEvent
     * @param {sap.ui.base.EventProvider}
     *            oControlEvent.getSource
     * @param {object}
     *            oControlEvent.getParameters
     * @param {string}
     *            oControlEvent.getParameters.color
     * @public
     */

    /**
     * Attach event handler <code>fnFunction</code> to the 'change' event of this
     * <code>sap.ino.wall.ColorPicker</code>.<br/>. When called, the context of the event handler (its
     * <code>this</code>) will be bound to <code>oListener<code> if specified
     * otherwise to this <code>sap.ino.wall.ColorPicker</code>.<br/> itself. 
     *  
     *
     * @param {object}
     *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
     * @param {function}
     *            fnFunction The function to call, when the event occurs.  
     * @param {object}
     *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ino.wall.ColorPicker</code>.<br/> itself.
     *
     * @return {sap.ino.wall.ColorPicker} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.ColorPicker#attachChange
     * @function
     */

    /**
     * Detach event handler <code>fnFunction</code> from the 'change' event of this
     * <code>sap.ino.wall.ColorPicker</code>.<br/>
     * 
     * The passed function and listener object must match the ones used for event registration.
     * 
     * @param {function}
     *            fnFunction The function to call, when the event occurs.
     * @param {object}
     *            oListener Context object on which the given function had to be called.
     * @return {sap.ino.wall.ColorPicker} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.ColorPicker#detachChange
     * @function
     */

    /**
     * Fire event change to attached listeners.
     * 
     * Expects following event parameters:
     * <ul>
     * <li>'color' of type <code>string</code> </li>
     * </ul>
     * 
     * @param {Map}
     *            [mArguments] the arguments to pass along with the event.
     * @return {sap.ino.wall.ColorPicker} <code>this</code> to allow method chaining
     * @protected
     * @name sap.ino.wall.ColorPicker#fireChange
     * @function
     */

    /**
     * Close the color picker popover.
     * 
     * @name sap.ino.wall.ColorPicker#close
     * @function
     * @type sap.m.Popover
     * @public
     * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
     */

    /**
     * Open the color picker popover.
     * 
     * @name sap.ino.wall.ColorPicker#openBy
     * @function
     * @param {object}
     *            oControl This is the control to which the popover will be placed. It can be not only a UI5 control,
     *            but also an existing dom reference. The side of the placement depends on the placement property set in
     *            the popover.
     * @type sap.m.Popover
     * @public
     * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
     */

    /**
     * The method checks if the Popover is open. It returns true when the Popover is currently open (this includes
     * opening and closing animations), otherwise it returns false.
     * 
     * @name sap.ino.wall.ColorPicker#isOpen
     * @function
     * @type boolean
     * @public
     * @since 1.9.1
     * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
     */

    /* =========================================================== */
    /* begin: API methods */
    /* =========================================================== */

    /**
     * Setter for the color property that surpesses re-rendering and updates.
     * 
     * @public
     * @override
     * @param {string}
     *            sColor a hex color representation starting with #
     * @returns {sap.ui.core/Control} this pointer for chaining
     */
    sap.ino.wall.ColorPicker.prototype.setColor = function(sColor) {
        var sPreviousColor = this.getColor();
        this.setProperty("color", sColor, true);

        // update button and input
        if (this.isOpen() && sPreviousColor != sColor) {
            var oColorPicker = this.getAggregation("_colorPickerControl");
            if (oColorPicker) {
                oColorPicker.setColor(sColor);
            }
        }

        return this;
    };

    sap.ino.wall.ColorPicker.prototype._setColor = function(sColor) {
        if (sColor.match(/NaN/)) {
            return;
        }
        // fire change event
        if (this.getColor() !== sColor) {
            this.setProperty("color", sColor, true);
            this.fireChange({
                color : sColor
            });
        }
        this._getPopoverColorSelector().focus();
    };

    /**
     * Get the internal Popover's placement property {@link sap.m.Popover}.
     * 
     * @override
     * @public
     * @returns {string} the placement mode
     */
    sap.ino.wall.ColorPicker.prototype.getPlacement = function() {
        return this._getPopoverColorSelector().getPlacement();
    };
    
    /**
     * Set the internal Popover's placement property {@link sap.m.Popover}.
     * 
     * @override
     * @public
     * @param {string}
     *            sPlacement the new placement mode
     * @returns {this} this pointer for chaining
     */
    sap.ino.wall.ColorPicker.prototype.setPlacement = function(sPlacement) {
        this._getPopoverColorSelector().setPlacement(sPlacement);

        return this;
    };

    /**
     * Returns true if the popover is open, else false.
     * 
     * @public
     * @returns {Boolean}
     */
    sap.ino.wall.ColorPicker.prototype.isOpen = function() {
        var oPopover = this.getAggregation("_popoverColorSelector");

        if (oPopover && oPopover.isOpen()) {
            return true;
        }

        return false;
    };

    /**
     * Returns true if the popover is open, else false.
     * 
     * @public
     * @param {sap.ui.core/Control}
     *            the reference control
     * @returns {sap.ui.core/Control} this pointer for chaining
     */
    sap.ino.wall.ColorPicker.prototype.openBy = function(oControl) {
        if (sap.ino.wall.ColorPicker.INSTANCE) {
            sap.ino.wall.ColorPicker.INSTANCE.close();
        }
        sap.ino.wall.ColorPicker.INSTANCE = this;
        
        this._getPopoverColorSelector().openBy(oControl);

        return this;
    };

    /**
     * Returns true if the popover is open, else false.
     * 
     * @public
     * @returns {sap.ui.core/Control} this pointer for chaining
     */
    sap.ino.wall.ColorPicker.prototype.close = function() {
        if (sap.ino.wall.ColorPicker.INSTANCE) {
            sap.ino.wall.ColorPicker.INSTANCE = null;
        }
        
        var oPopover = this.getAggregation("_popoverColorSelector");

        if (oPopover) {
            oPopover.close();
        }
        return this;
    };

      /* =========================================================== */
    /* begin: internal methods */
    /* =========================================================== */

    /**
     * Lazy initialization of the internal control.
     * 
     * @private
     * @returns {sap.m/Button} the button
     */
    sap.ino.wall.ColorPicker.prototype._getPopoverColorSelector = function() {
        var that = this;

        var oColorPicker = this.getAggregation("_colorPickerControl");
        if (!oColorPicker) {
            oColorPicker = new sap.ino.controls.ColorPickerLite({
                color : that.getColor(),
                change : function(oEvent) {
                    var sValue = oEvent.getParameter("hashValue");
                    // validate the hex value input
                    if (/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(sValue)) {
                        that._setColor(sValue);
                    }
                },
                preview : false,
                showValueStateMessage : false,
                showHex : false
            });
            
            this.setAggregation("_colorPickerControl", oColorPicker, true);
        }

        var oPopover = this.getAggregation("_popoverColorSelector");
        if (!oPopover) {
            
            var oPanel = new sap.m.Panel({
                content: [this.getAggregation("_colorPickerControl")]
            }).addStyleClass("sapInoWallColorPickerPopoverPanel");
            
            oPopover = new sap.m.Popover(this.getId() + "-popoverColorSelector", {
                showHeader : false,
                placement : sap.m.PlacementType.Auto,
                contentWidth : '154px',
                verticalScrolling : false,
                horizontalScrolling : false,
                content : [oPanel]
            }).addStyleClass("sapInoWallColorPickerPopover");
            oPopover.setHorizontalScrolling(false);
            
            var fnOnAfterRendering = oPopover.onAfterRendering;
            oPopover.onAfterRendering = function() {
                if (jQuery.type(fnOnAfterRendering) === "function") {
                    fnOnAfterRendering.apply(this, arguments);
                }      
                this.$().attr("tabindex", "");
            };
            
            // set hidden aggregation without rerendering
            this.setAggregation("_popoverColorSelector", oPopover, true);
            
            oPopover.oPopup.attachOpened(function() { this.setAutoClose(that.getAutoClose()); });
        }

        return oPopover;
    };
    
    sap.ino.wall.ColorPicker.INSTANCE = null;

})();
}; // end of sap/ino/wall/ColorPicker.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.LightBox') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.LightBox");

(function() {
    "use strict";

    
    
    /**
     * Constructor for a new LightBox.
     * 
     * Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and
     * associated objects as well as event handlers.
     * 
     * If the name of a setting is ambiguous (e.g. a property has the same name as an event), then the framework assumes
     * property, aggregation, association, event in that order. To override this automatic resolution, one of the
     * prefixes "aggregation:", "association:" or "event:" can be added to the name of the setting (such a prefixed name
     * must be enclosed in single or double quotes).
     * 
     * The supported settings are:
     * <ul>
     * <li>Properties
     * <ul>
     * <li>{@link #getTitle title} : string</li>
     * <li>{@link #getImage image} : sap.ui.core.URI</li>
     * <li>{@link #getAlt alt} : string</li>
     * </ul>
     * </li>
     * <li>Aggregations
     * <ul>
     * </ul>
     * </li>
     * <li>Associations
     * <ul>
     * </ul>
     * </li>
     * <li>Events
     * <ul>
     * </ul>
     * </li>
     * </ul>
     * 
     * 
     * @param {string}
     *            [sId] id for the new control, generated automatically if no id is given
     * @param {object}
     *            [mSettings] initial settings for the new control
     * 
     * @class A LightBox is used to display larger versions of an image insinde a dialog.
     * @extends sap.ui.core.Control
     * @version 1.16.4
     * 
     * @constructor
     * @public
     * @name sap.ino.wall.LightBox
     * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
     */
    sap.ui.core.Control.extend("sap.ino.wall.LightBox", {
        metadata : {

            publicMethods : [
            // methods
            "open"],
            properties : {
                "title" : {
                    type : "string",
                    group : "Appearance",
                    defaultValue : null
                },
                "image" : {
                    type : "sap.ui.core.URI",
                    group : "Data",
                    defaultValue : null
                },
                "alt" : {
                    type : "string",
                    group : "Data",
                    defaultValue : null
                }
            },
            aggregations : {
                "_dialog" : {
                    type : "sap.m.Dialog",
                    multiple : false,
                    visibility : "hidden"
                },
                "_busyDialog" : {
                    type : "sap.m.BusyDialog",
                    multiple : false,
                    visibility : "hidden"
                }
            }
        }
    });

    /**
     * Creates a new subclass of class sap.ino.wall.LightBox with name <code>sClassName</code> and enriches it with
     * the information contained in <code>oClassInfo</code>.
     * 
     * <code>oClassInfo</code> might contain the same kind of informations as described in
     * {@link sap.ui.core.Element.extend Element.extend}.
     * 
     * @param {string}
     *            sClassName name of the class to be created
     * @param {object}
     *            [oClassInfo] object literal with informations about the class
     * @param {function}
     *            [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to
     *            sap.ui.core.ElementMetadata.
     * @return {function} the created class / constructor function
     * @public
     * @static
     * @name sap.ino.wall.LightBox.extend
     * @function
     */

    /**
     * Getter for property <code>title</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @return {string} the value of property <code>title</code>
     * @public
     * @name sap.ino.wall.LightBox#getTitle
     * @function
     */

    /**
     * Setter for property <code>title</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @param {string}
     *            sTitle new value for property <code>title</code>
     * @return {sap.ino.wall.LightBox} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.LightBox#setTitle
     * @function
     */

    /**
     * Getter for property <code>image</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @return {sap.ui.core.URI} the value of property <code>image</code>
     * @public
     * @name sap.ino.wall.LightBox#getImage
     * @function
     */

    /**
     * Setter for property <code>image</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @param {sap.ui.core.URI}
     *            sImage new value for property <code>image</code>
     * @return {sap.ino.wall.LightBox} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.LightBox#setImage
     * @function
     */

    /**
     * Getter for property <code>alt</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @return {string} the value of property <code>alt</code>
     * @public
     * @name sap.ino.wall.LightBox#getAlt
     * @function
     */

    /**
     * Setter for property <code>alt</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @param {string}
     *            sAlt new value for property <code>alt</code>
     * @return {sap.ino.wall.LightBox} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.LightBox#setAlt
     * @function
     */

    /**
     * Opens the lightbox dialog.
     * 
     * @name sap.ino.wall.LightBox#open
     * @function
     * @type void
     * @public
     * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
     */

    /**
     * Initializes the control.
     * 
     * @private
     */
    sap.ino.wall.LightBox.prototype.init = function() {
        this._oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ino.wall");
    };

    /**
     * Destroys the control.
     * 
     * @private
     */
    sap.ino.wall.LightBox.prototype.exit = function() {
        this._oImage.destroy();
        this._oImage = null;

        sap.ui.Device.resize.detachHandler(this._getBoundResizeHandler());
    };

    /**
     * Lazy initialization of a control managed in an internal aggregation
     * 
     * @private
     * @returns {sap.ui.core/Control} the control
     */
    sap.ino.wall.LightBox.prototype._getDialog = function() {
        var that = this, oControl = this.getAggregation("_dialog"), fnClose = function() {
            sap.ui.Device.resize.detachHandler(that._getBoundResizeHandler());
            jQuery("#sap-ui-blocklayer-popup").off("click", fnClose);
            oControl.close();
        }, fnOpen = function() {
            // A click on the block layer also closes the dialog
            jQuery("#sap-ui-blocklayer-popup").on("click", fnClose);
        };

        if (!oControl) {
            // create control
            var oImage = this._getImage().clone();
            oImage.attachPress(fnClose);
            oControl = new sap.m.Dialog({
                stretch : sap.ui.Device.system.phone,
                showHeader : false,
                verticalScrolling : false,
                horizontalScrolling : false,
                afterClose : fnClose,
                afterOpen : fnOpen,
                content : [oImage, new sap.m.Label({
                    textAlign : (sap.ui.Device.system.phone ? "Center" : "Left"),
                    text : this.getTitle(),
                    design : sap.m.LabelDesign.Bold
                }).addStyleClass("sapInoWallLightBoxTitle")]
            }).addEventDelegate({
                ontap : fnClose
            }).addStyleClass("sapInoWallLightBoxDialog");

            // set hidden aggregation without rerendering
            this.setAggregation("_dialog", oControl, true);
        }

        return oControl;
    };

    /**
     * Lazy initialization of a control managed in an internal aggregation
     * 
     * @private
     * @returns {sap.ui.core/Control} the control
     */
    sap.ino.wall.LightBox.prototype._getBusyDialog = function() {
        var oControl = this.getAggregation("_busyDialog");

        if (!oControl) {
            // create control
            oControl = new sap.m.BusyDialog();

            // set hidden aggregation without rerendering
            this.setAggregation("_busyDialog", oControl, true);
        }

        return oControl;
    };

    /**
     * Lazy initialization of a control managed in an internal aggregation
     * 
     * @private
     * @returns {sap.ui.core/Control} the control
     */
    sap.ino.wall.LightBox.prototype._getImage = function() {
        if (!this._oImage) {
            // create control
            this._oImage = new sap.m.Image(this.getId() + "-image", {
                src : this.getImage(),
                alt : this.getAlt()
            });
        }

        return this._oImage;
    };

    /**
     * Adjusts an image size to the available screen space
     * 
     * @param {int}
     *            iImageWidth the image width
     * @param {int}
     *            iImageHeight the image height
     * @private
     * @returns {array} an array with the new width and height
     */
    sap.ino.wall.LightBox.prototype._adjustImageSizeToScreen = function(iImageWidth, iImageHeight) {
        var oDialog = this._getDialog(), iWindowWidth = sap.ui.Device.resize.width, iWindowHeight = sap.ui.Device.resize.height, iTemp, iTemp2;

        if (!iImageWidth || !iImageHeight) {
            return;
        }

        // the dynamic repositioning of the dialog control makes it really hard to read these values at run time
        // therefore we subtract some default values that might have to be adjusted when the UX spec changes
        // dialog has a minimum of 8px top and bottom spacing, 64px left and right spacing, and 1rem padding inside
        if (!oDialog.getStretch()) {
            // desktop and tablet
            iWindowWidth -= 2 * 64 + 2 * 16; // margin + padding
            iWindowHeight -= 2 * 8 + 2 * 16 + 48; // margin + padding + title
        } else {
            // phone
            iWindowWidth -= 2 * 16; // padding
            iWindowHeight -= 2 * 16 + 24; // padding + title height
        }

        // scale image dimensions: max width exceeded
        if (iImageWidth > iWindowWidth) {
            iTemp = iWindowWidth;
            iImageHeight = (iTemp / iImageWidth) * iImageHeight;
            iImageWidth = iTemp;
            if (!sap.ui.Device.system.phone) {
                iTemp2 = Math.max(iImageWidth, 368);
                iImageHeight = (iTemp2 / iImageWidth) * iImageHeight;
                iImageWidth = iTemp2;
            }
        }

        // scale image dimensions: max height exceeded
        if (iImageHeight > iWindowHeight) {
            iTemp = iWindowHeight;
            iImageWidth = (iTemp / iImageHeight) * iImageWidth;
            // dialog has a min width of 400 px - 32px padding inside, we do not want to scale smaller
            if (!sap.ui.Device.system.phone) {
                iImageWidth = Math.max(iImageWidth, 368);
            }
            iImageHeight = iTemp;
            // when the window is getting really small, it can happen that the height is getting < 0
            iImageHeight = Math.max(iImageHeight, 1);
        }

        return [iImageWidth, iImageHeight];
    };

    /**
     * Returns the resize handler bound to the this pointer
     * 
     * @private
     * @return {function} the bound function
     */
    sap.ino.wall.LightBox.prototype._getBoundResizeHandler = function() {
        if (!this._onResizeHandler) {
            this._onResizeHandler = this._onResize.bind(this);
        }

        return this._onResizeHandler;
    };

    /**
     * Updates the image dimensions when the dialog is resized or the orientation of the device is changed
     * 
     * @private
     */
    sap.ino.wall.LightBox.prototype._onResize = function() {
        var oDialog = this._getDialog(), oImage = oDialog.getContent()[0], aScaledImageDimensions = this._adjustImageSizeToScreen(this._iImageWidth, this._iImageHeight);

        if (aScaledImageDimensions) {
            oImage.setWidth(aScaledImageDimensions[0] + "px").setHeight((aScaledImageDimensions[1] - 50) + "px");
        }
    };

    /**
     * Opens the lightbox dialog with a description and the resized image
     * 
     * @private
     * @returns {sap.ui.core/Control} the control
     */
    sap.ino.wall.LightBox.prototype.open = function() {
        var that = this, oDialog = this._getDialog(), oBusyIndicator = this._getBusyDialog(), oPreload = new Image();

        // Preload image
        oBusyIndicator.open();
        oPreload.src = this.getImage();
        oPreload.onload = function() {
            var aScaledImageDimensions, oImage = oDialog.getContent()[0];

            // we need to store the real dimensions here because the sap.m.Image does not update the width and
            // height properties after loading the image
            that._iImageWidth = this.width;
            that._iImageHeight = this.height;

            aScaledImageDimensions = that._adjustImageSizeToScreen(that._iImageWidth, that._iImageHeight);

            // hide busy indicator
            oBusyIndicator.close();

            // set the maximum image width possible to fit on the screen
            if (aScaledImageDimensions) {
                oImage.setWidth(aScaledImageDimensions[0] + "px").setHeight((aScaledImageDimensions[1] - 50) + "px");
            }

            // add a resize handler to update the image dimensions
            sap.ui.Device.resize.attachHandler(that._getBoundResizeHandler());

            oDialog.open();
        };
        oPreload.onerror = function() {
            oBusyIndicator.close();
            sap.ino.wall.util.Helper.showErrorUnexpected(that._oRB.getText("WALL_LIGHTBOX_IMAGE_LOAD_ERROR", [oPreload.src]));
        };
    };

})();
}; // end of sap/ino/wall/LightBox.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallItemBase') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallItemBase");

(function() {
    "use strict";

    jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained

    
    
    
    
    
    
    
    /**
     * Constructor for a new WallItemBase.
     * 
     * Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and
     * associated objects as well as event handlers.
     * 
     * If the name of a setting is ambiguous (e.g. a property has the same name as an event), then the framework assumes
     * property, aggregation, association, event in that order. To override this automatic resolution, one of the
     * prefixes "aggregation:", "association:" or "event:" can be added to the name of the setting (such a prefixed name
     * must be enclosed in single or double quotes).
     * 
     * The supported settings are:
     * <ul>
     * <li>Properties
     * <ul>
     * <li>{@link #getTitle title} : string</li>
     * <li>{@link #getX x} : sap.ui.core.CSSSize</li>
     * <li>{@link #getY y} : sap.ui.core.CSSSize</li>
     * <li>{@link #getW w} : sap.ui.core.CSSSize</li>
     * <li>{@link #getH h} : sap.ui.core.CSSSize</li>
     * <li>{@link #getDepth depth} : int</li>
     * <li>{@link #getFlipped flipped} : boolean</li>
     * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
     * <li>{@link #getSelected selected} : boolean (default: false)</li>
     * <li>{@link #getStorageId storageId} : int (default: -1)</li>
     * <li>{@link #getResizable resizable} : boolean (default: false)</li>
     * </ul>
     * </li>
     * <li>Aggregations
     * <ul>
     * <li>{@link #getChilds childs} : sap.ino.wall.WallItemBase[]</li>
     * </ul>
     * </li>
     * <li>Associations
     * <ul>
     * </ul>
     * </li>
     * <li>Events
     * <ul>
     * <li>{@link sap.ino.wall.WallItemBase#event:dataChange dataChange} : fnListenerFunction or
     * [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
     * <li>{@link sap.ino.wall.WallItemBase#event:positionChange positionChange} : fnListenerFunction or
     * [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
     * </ul>
     * </li>
     * </ul>
     * 
     * 
     * @param {string}
     *            [sId] id for the new control, generated automatically if no id is given
     * @param {object}
     *            [mSettings] initial settings for the new control
     * 
     * @class Add your documentation for the newWallItemBase
     * @extends sap.ui.core.Control
     * @version 1.16.4
     * 
     * @constructor
     * @public
     * @name sap.ino.wall.WallItemBase
     * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
     */
    sap.ui.core.Control.extend("sap.ino.wall.WallItemBase", {
        metadata : {
            properties : {
                "title" : {
                    type : "string",
                    group : "Data",
                    defaultValue : null
                },
                "x" : {
                    type : "sap.ui.core.CSSSize",
                    group : "Appearance",
                    defaultValue : null
                },
                "y" : {
                    type : "sap.ui.core.CSSSize",
                    group : "Appearance",
                    defaultValue : null
                },
                "w" : {
                    type : "sap.ui.core.CSSSize",
                    group : "Appearance",
                    defaultValue : "200px"
                },
                "h" : {
                    type : "sap.ui.core.CSSSize",
                    group : "Appearance",
                    defaultValue : "200px"
                },
                "depth" : {
                    type : "int",
                    group : "Appearance",
                    defaultValue : null
                },
                "flipped" : {
                    type : "boolean",
                    group : "Behavior",
                    defaultValue : null
                },
                "enabled" : {
                    type : "boolean",
                    group : "Behavior",
                    defaultValue : true
                },
                "selected" : {
                    type : "boolean",
                    group : "Behavior",
                    defaultValue : false
                },
                "storageId" : {
                    type : "int",
                    group : "Identification",
                    defaultValue : -1
                },
                "resizable" : {
                    type : "boolean",
                    group : "Misc",
                    defaultValue : false
                }
            },
            aggregations : {
                "_buttonFlip" : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                },
                "_inputTitle" : {
                    type : "sap.m.Input",
                    multiple : false,
                    visibility : "hidden"
                },
                "_iconResize" : {
                    type : "sap.ui.core.Icon",
                    multiple : false,
                    visibility : "hidden"
                },
                "childs" : {
                    type : "sap.ino.wall.WallItemBase",
                    multiple : true,
                    singularName : "child",
                    bindable : "bindable"
                }
            },
            events : {
                "dataChange" : {},
                "positionChange" : {}
            }
        }
    });

    /**
     * Creates a new subclass of class sap.ino.wall.WallItemBase with name <code>sClassName</code> and enriches it
     * with the information contained in <code>oClassInfo</code>.
     * 
     * <code>oClassInfo</code> might contain the same kind of informations as described in
     * {@link sap.ui.core.Element.extend Element.extend}.
     * 
     * @param {string}
     *            sClassName name of the class to be created
     * @param {object}
     *            [oClassInfo] object literal with informations about the class
     * @param {function}
     *            [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to
     *            sap.ui.core.ElementMetadata.
     * @return {function} the created class / constructor function
     * @public
     * @static
     * @name sap.ino.wall.WallItemBase.extend
     * @function
     */

    sap.ino.wall.WallItemBase.M_EVENTS = {
        'dataChange' : 'dataChange',
        'positionChange' : 'positionChange'
    };

    /**
     * Getter for property <code>title</code>. The title of the item.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @return {string} the value of property <code>title</code>
     * @public
     * @name sap.ino.wall.WallItemBase#getTitle
     * @function
     */

    /**
     * Setter for property <code>title</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @param {string}
     *            sTitle new value for property <code>title</code>
     * @return {sap.ino.wall.WallItemBase} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemBase#setTitle
     * @function
     */

    /**
     * Getter for property <code>x</code>. The horizontal position of the item on the wall.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @return {sap.ui.core.CSSSize} the value of property <code>x</code>
     * @public
     * @name sap.ino.wall.WallItemBase#getX
     * @function
     */

    /**
     * Setter for property <code>x</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @param {sap.ui.core.CSSSize}
     *            sX new value for property <code>x</code>
     * @return {sap.ino.wall.WallItemBase} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemBase#setX
     * @function
     */

    /**
     * Getter for property <code>y</code>. The vertical position of the item on the wall.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @return {sap.ui.core.CSSSize} the value of property <code>y</code>
     * @public
     * @name sap.ino.wall.WallItemBase#getY
     * @function
     */

    /**
     * Setter for property <code>y</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @param {sap.ui.core.CSSSize}
     *            sY new value for property <code>y</code>
     * @return {sap.ino.wall.WallItemBase} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemBase#setY
     * @function
     */

    /**
     * Getter for property <code>w</code>. The width of the item.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @return {sap.ui.core.CSSSize} the value of property <code>w</code>
     * @public
     * @name sap.ino.wall.WallItemBase#getW
     * @function
     */

    /**
     * Setter for property <code>w</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @param {sap.ui.core.CSSSize}
     *            sW new value for property <code>w</code>
     * @return {sap.ino.wall.WallItemBase} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemBase#setW
     * @function
     */

    /**
     * Getter for property <code>h</code>. The height of the item.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @return {sap.ui.core.CSSSize} the value of property <code>h</code>
     * @public
     * @name sap.ino.wall.WallItemBase#getH
     * @function
     */

    /**
     * Setter for property <code>h</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @param {sap.ui.core.CSSSize}
     *            sH new value for property <code>h</code>
     * @return {sap.ino.wall.WallItemBase} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemBase#setH
     * @function
     */

    /**
     * Getter for property <code>depth</code>. The depth of the item.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @return {int} the value of property <code>depth</code>
     * @public
     * @name sap.ino.wall.WallItemBase#getDepth
     * @function
     */

    /**
     * Setter for property <code>depth</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @param {int}
     *            iDepth new value for property <code>depth</code>
     * @return {sap.ino.wall.WallItemBase} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemBase#setDepth
     * @function
     */

    /**
     * Getter for property <code>flipped</code>. Defines wheter the front or back side of the item is visible.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @return {boolean} the value of property <code>flipped</code>
     * @public
     * @name sap.ino.wall.WallItemBase#getFlipped
     * @function
     */

    /**
     * Setter for property <code>flipped</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @param {boolean}
     *            bFlipped new value for property <code>flipped</code>
     * @return {sap.ino.wall.WallItemBase} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemBase#setFlipped
     * @function
     */

    /**
     * Getter for property <code>enabled</code>. Boolean property to enable the control (default is true).
     * 
     * Default value is <code>true</code>
     * 
     * @return {boolean} the value of property <code>enabled</code>
     * @public
     * @name sap.ino.wall.WallItemBase#getEnabled
     * @function
     */

    /**
     * Setter for property <code>enabled</code>.
     * 
     * Default value is <code>true</code>
     * 
     * @param {boolean}
     *            bEnabled new value for property <code>enabled</code>
     * @return {sap.ino.wall.WallItemBase} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemBase#setEnabled
     * @function
     */

    /**
     * Getter for property <code>selected</code>. Boolean property to select the control (default is false).
     * 
     * Default value is <code>false</code>
     * 
     * @return {boolean} the value of property <code>selected</code>
     * @public
     * @name sap.ino.wall.WallItemBase#getSelected
     * @function
     */

    /**
     * Setter for property <code>selected</code>.
     * 
     * Default value is <code>false</code>
     * 
     * @param {boolean}
     *            bSelected new value for property <code>selected</code>
     * @return {sap.ino.wall.WallItemBase} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemBase#setSelected
     * @function
     */

    /**
     * Getter for property <code>storageId</code>. Temp: stores the db id of this wallItem
     * 
     * Default value is <code>-1</code>
     * 
     * @return {int} the value of property <code>storageId</code>
     * @public
     * @name sap.ino.wall.WallItemBase#getStorageId
     * @function
     */

    /**
     * Setter for property <code>storageId</code>.
     * 
     * Default value is <code>-1</code>
     * 
     * @param {int}
     *            iStorageId new value for property <code>storageId</code>
     * @return {sap.ino.wall.WallItemBase} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemBase#setStorageId
     * @function
     */

    /**
     * Getter for property <code>resizable</code>. This flag defines whether the WallItem can be resized or not.
     * 
     * Default value is <code>false</code>
     * 
     * @return {boolean} the value of property <code>resizable</code>
     * @public
     * @name sap.ino.wall.WallItemBase#getResizable
     * @function
     */

    /**
     * Setter for property <code>resizable</code>.
     * 
     * Default value is <code>false</code>
     * 
     * @param {boolean}
     *            bResizable new value for property <code>resizable</code>
     * @return {sap.ino.wall.WallItemBase} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemBase#setResizable
     * @function
     */

    /**
     * Getter for aggregation <code>childs</code>.<br/> Items attached to this item that should be moved together
     * 
     * @return {sap.ino.wall.WallItemBase[]}
     * @public
     * @name sap.ino.wall.WallItemBase#getChilds
     * @function
     */

    /**
     * Inserts a child into the aggregation named <code>childs</code>.
     * 
     * @param {sap.ino.wall.WallItemBase}
     *            oChild the child to insert; if empty, nothing is inserted
     * @param {int}
     *            iIndex the <code>0</code>-based index the child should be inserted at; for a negative value of
     *            <code>iIndex</code>, the child is inserted at position 0; for a value greater than the current size
     *            of the aggregation, the child is inserted at the last position
     * @return {sap.ino.wall.WallItemBase} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemBase#insertChild
     * @function
     */

    /**
     * Adds some child <code>oChild</code> to the aggregation named <code>childs</code>.
     * 
     * @param {sap.ino.wall.WallItemBase}
     *            oChild the child to add; if empty, nothing is inserted
     * @return {sap.ino.wall.WallItemBase} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemBase#addChild
     * @function
     */

    /**
     * Removes an child from the aggregation named <code>childs</code>.
     * 
     * @param {int |
     *            string | sap.ino.wall.WallItemBase} vChild the child to remove or its index or id
     * @return {sap.ino.wall.WallItemBase} the removed child or null
     * @public
     * @name sap.ino.wall.WallItemBase#removeChild
     * @function
     */

    /**
     * Removes all the controls in the aggregation named <code>childs</code>.<br/> Additionally unregisters them
     * from the hosting UIArea.
     * 
     * @return {sap.ino.wall.WallItemBase[]} an array of the removed elements (might be empty)
     * @public
     * @name sap.ino.wall.WallItemBase#removeAllChilds
     * @function
     */

    /**
     * Checks for the provided <code>sap.ino.wall.WallItemBase</code> in the aggregation named <code>childs</code>
     * and returns its index if found or -1 otherwise.
     * 
     * @param {sap.ino.wall.WallItemBase}
     *            oChild the child whose index is looked for.
     * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
     * @public
     * @name sap.ino.wall.WallItemBase#indexOfChild
     * @function
     */

    /**
     * Destroys all the childs in the aggregation named <code>childs</code>.
     * 
     * @return {sap.ino.wall.WallItemBase} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemBase#destroyChilds
     * @function
     */

    /**
     * Binder for aggregation <code>childs</code>.
     * 
     * @param {string}
     *            sPath path to a list in the model
     * @param {sap.ui.core.Element}
     *            oTemplate the control template for this aggregation
     * @param {sap.ui.model.Sorter}
     *            oSorter the initial sort order (optional)
     * @param {array}
     *            aFilters the predefined filters for this aggregation (optional)
     * @return {sap.ino.wall.WallItemBase} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemBase#bindChilds
     * @function
     */

    /**
     * Unbinder for aggregation <code>childs</code>.
     * 
     * @return {sap.ino.wall.WallItemBase} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemBase#unbindChilds
     * @function
     */

    /**
     * 
     * @name sap.ino.wall.WallItemBase#dataChange
     * @event
     * @param {sap.ui.base.Event}
     *            oControlEvent
     * @param {sap.ui.base.EventProvider}
     *            oControlEvent.getSource
     * @param {object}
     *            oControlEvent.getParameters
     * @public
     */

    /**
     * Attach event handler <code>fnFunction</code> to the 'dataChange' event of this
     * <code>sap.ino.wall.WallItemBase</code>.<br/>. When called, the context of the event handler (its
     * <code>this</code>) will be bound to <code>oListener<code> if specified
     * otherwise to this <code>sap.ino.wall.WallItemBase</code>.<br/> itself. 
     *  
     *
     * @param {object}
     *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
     * @param {function}
     *            fnFunction The function to call, when the event occurs.  
     * @param {object}
     *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ino.wall.WallItemBase</code>.<br/> itself.
     *
     * @return {sap.ino.wall.WallItemBase} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemBase#attachDataChange
     * @function
     */

    /**
     * Detach event handler <code>fnFunction</code> from the 'dataChange' event of this
     * <code>sap.ino.wall.WallItemBase</code>.<br/>
     * 
     * The passed function and listener object must match the ones used for event registration.
     * 
     * @param {function}
     *            fnFunction The function to call, when the event occurs.
     * @param {object}
     *            oListener Context object on which the given function had to be called.
     * @return {sap.ino.wall.WallItemBase} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemBase#detachDataChange
     * @function
     */

    /**
     * Fire event dataChange to attached listeners.
     * 
     * @param {Map}
     *            [mArguments] the arguments to pass along with the event.
     * @return {sap.ino.wall.WallItemBase} <code>this</code> to allow method chaining
     * @protected
     * @name sap.ino.wall.WallItemBase#fireDataChange
     * @function
     */

    /**
     * 
     * @name sap.ino.wall.WallItemBase#positionChange
     * @event
     * @param {sap.ui.base.Event}
     *            oControlEvent
     * @param {sap.ui.base.EventProvider}
     *            oControlEvent.getSource
     * @param {object}
     *            oControlEvent.getParameters
     * @public
     */

    /**
     * Attach event handler <code>fnFunction</code> to the 'positionChange' event of this
     * <code>sap.ino.wall.WallItemBase</code>.<br/>. When called, the context of the event handler (its
     * <code>this</code>) will be bound to <code>oListener<code> if specified
     * otherwise to this <code>sap.ino.wall.WallItemBase</code>.<br/> itself. 
     *  
     *
     * @param {object}
     *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
     * @param {function}
     *            fnFunction The function to call, when the event occurs.  
     * @param {object}
     *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ino.wall.WallItemBase</code>.<br/> itself.
     *
     * @return {sap.ino.wall.WallItemBase} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemBase#attachPositionChange
     * @function
     */

    /**
     * Detach event handler <code>fnFunction</code> from the 'positionChange' event of this
     * <code>sap.ino.wall.WallItemBase</code>.<br/>
     * 
     * The passed function and listener object must match the ones used for event registration.
     * 
     * @param {function}
     *            fnFunction The function to call, when the event occurs.
     * @param {object}
     *            oListener Context object on which the given function had to be called.
     * @return {sap.ino.wall.WallItemBase} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemBase#detachPositionChange
     * @function
     */

    /**
     * Fire event positionChange to attached listeners.
     * 
     * @param {Map}
     *            [mArguments] the arguments to pass along with the event.
     * @return {sap.ino.wall.WallItemBase} <code>this</code> to allow method chaining
     * @protected
     * @name sap.ino.wall.WallItemBase#firePositionChange
     * @function
     */

    /* =========================================================== */
    /* begin: control lifecycle methods */
    /* =========================================================== */

    /**
     * Initializes the control.
     * 
     * @private
     */
    sap.ino.wall.WallItemBase.prototype.init = function() {
        this._oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ino.wall");
        this._saveTimer = undefined;
    };

    /**
     * Destroys the control.
     * 
     * @private
     */
    sap.ino.wall.WallItemBase.prototype.exit = function() {
        this._saveTimer = undefined;
        this._totalDeltaX = 0;
        this._totalDeltaY = 0;
        this._snapDeltaX = 0;
        this._snapDeltaY = 0;
    };

    /**
     * Adjusts control after rendering.
     * 
     * @private
     */
    sap.ino.wall.WallItemBase.prototype.onAfterRendering = function() {
        var $this = this.$();

        // call item hook to react on initial resize changes
        if (this._onResize) {
            this._onResize(true);
        }
        // position child container relative to the parent dimensions
        if (this.getParent() instanceof sap.ino.wall.Wall || this.getParent() instanceof sap.ino.wall.WallItemGroup) {
            this._adjustChildContainerPositioning(this.$("childs"));
        }
        // adjust visibility for IE after re-rendering (this should not occur anyway)
        if (sap.ui.Device.browser.internet_explorer) {
            if (this.getFlipped()) {
                $this.children(".flippable").find(".back").css("backface-visibility", "visible");
                $this.children(".flippable").find(".front").css("display", "none");
            }
        }

        var $FlipButtonGroup = $this.find(".sapInoWallWIFlipBackButtonGroup");
        if ($FlipButtonGroup && $FlipButtonGroup.length > 0) {
            $FlipButtonGroup.attr("aria-label", this._oRB.getText("CTRL_WALL_ITEMBASE_EXP_FLIPBUTTON"));
        } else {
            var $FlipButton = $this.find(".sapInoWallWIFlipBackButton");
            if ($FlipButton && $FlipButton.length > 0) {
                $FlipButton.attr("aria-label", this._oRB.getText("CTRL_WALL_ITEMBASE_EXP_FLIPBUTTON"));
            }
        }
    };

    sap.ino.wall.WallItemBase.prototype.setFocusVisible = function(bVisible) {
        if (bVisible || bVisible === undefined) {
            this.addStyleClass("sapInoWallWIBVisibleFocus");
        } else {
            this.removeStyleClass("sapInoWallWIBVisibleFocus");
        }
    };

    sap.ino.wall.WallItemBase.prototype.onfocusout = function(oEvent) {
        this.removeStyleClass("sapInoWallWIBVisibleFocus");
    };

    sap.ino.wall.WallItemBase.prototype.onkeydown = function(oEvent) {
        var $this = this.$();
        
        // do nothing if wall is locked
        if (sap.ino.wall.WallMode.Write !== this.getWall().getMode()) {
        	if (this.getFlipped()) {
        		this.setFlipped(false, true);
                $this.focus();
        	}
        	return;
        }

        // enter the item
        if (!oEvent.ctrlKey && jQuery(oEvent.target).hasClass("sapInoWallWIB") && (oEvent.keyCode === jQuery.sap.KeyCodes.ENTER || oEvent.keyCode === jQuery.sap.KeyCodes.F2)) {
            this.setBackFocus(true);

            oEvent.preventDefault();
            oEvent.stopPropagation();
            oEvent.stopImmediatePropagation();
        } else if ((jQuery(oEvent.target).hasClass("sapInoWallWIFlipBackButton") || jQuery(oEvent.target).hasClass("sapInoWallWIFlipBackButtonNormal")) && oEvent.keyCode === jQuery.sap.KeyCodes.ENTER) {

            this.setFlipped(false, true);
            $this.focus();

            oEvent.preventDefault();
            oEvent.stopPropagation();
            oEvent.stopImmediatePropagation();
        } else if (oEvent.keyCode === jQuery.sap.KeyCodes.TAB && this.getProperty("flipped") && !jQuery(oEvent.target).hasClass("sapInoWallWIB")) {
            // loop item
            var iIndex;
            var aBack = $this.children(".flippable").children(".back").find('input[type=text], textarea, select[tabindex!="-1"], button, [tabindex="0"], .nicEdit-main, .sapInoWallDropUploadArea');
            var $FlipButton = $this.find(".sapInoWallWIFlipBackButton");
            if ($FlipButton && $FlipButton.length > 0) {
                aBack.push($FlipButton[0]);
            }

            aBack = jQuery.grep(aBack, function(oControl) {
                return jQuery(oControl).is(":visible");
            });

            if (aBack && aBack.length > 0) {
                var $Nice = $this.children(".flippable").children(".back").find('.nicEdit-main');
                var bTargetNice = jQuery(oEvent.target).hasClass("nicEdit-main");

                if (bTargetNice && $Nice && $Nice.length > 0) {
                    iIndex = aBack.indexOf($Nice[0]);
                    $Nice.control(0).blur();
                } else {
                    iIndex = aBack.indexOf(oEvent.target);
                }

                // if (iIndex === -1) let someone else handle this => do nothing
                if (iIndex !== -1) {
                    if (oEvent.shiftKey) {
                        iIndex--;
                        if (iIndex === -1) {
                            iIndex = aBack.length - 1;
                        }
                    } else {
                        iIndex++;
                        if (iIndex >= aBack.length) {
                            iIndex = 0;
                        }
                    }
                }

                var oFocus = aBack[iIndex];
                if ($Nice && $Nice.length > 0 && oFocus === $Nice[0]) {
                    jQuery(oFocus).control(0).focus();
                } else {
                    jQuery(oFocus).focus();
                }

                oEvent.preventDefault();
                oEvent.stopPropagation();
                oEvent.stopImmediatePropagation();
            }
        } else if (oEvent.keyCode === jQuery.sap.KeyCodes.ESCAPE && this.getProperty("flipped") && !jQuery(oEvent.target).hasClass("sapInoWallWIB")) {
            this.setFlipped(false, true);
            $this.focus();

            oEvent.preventDefault();
            oEvent.stopPropagation();
            oEvent.stopImmediatePropagation();
        }
    };

    /* =========================================================== */
    /* begin: API methods */
    /* =========================================================== */

    /**
     * Creates a minimalic JSON representation of the item to be stored in the db.
     * 
     * @returns {object} the JSON object representation of the item
     * @public
     */
    sap.ino.wall.WallItemBase.prototype.formatToJSON = function() {
        // TODO: this function is currently called by the items, do it the other way round to be consistent and be able
        // to modify the result?
        var oWall = this.getWall(), aChilds = this.getChilds() || [], oResult, i = 0;

        oResult = {
            "id" : this.getStorageId(),
            "parentId" : (this.getParent() instanceof sap.ino.wall.WallItemBase ? this.getParent().getStorageId() : "0"),
            "wallId" : oWall.getStorageId(),
            "title" : this.getTitle(),
            "className" : this.getMetadata()._sClassName,
            "position" : {
                "x" : this.getX(),
                "y" : this.getY()
            },
            "w" : this.getW(),
            "h" : this.getH(),
            "depth" : this.getDepth(),
            "content" : {
            // TODO: remove content, it is not needed and only brings overhead
            }
        };

        // add child items to JSON format
        if (aChilds.length) {
            oResult.childs = [];
            // add JSON for each child
            for (; i < aChilds.length; i++) {
                oResult.childs.push(aChilds[i].formatToJSON());
            }
        }

        return oResult;
    };

    /**
     * Setter for the title property to suppress re-rendering.
     * 
     * @param {string}
     *            sTitle the value
     * @param {boolean}
     *            bSuppressNotify flag to suppress notification of the wall
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemBase.prototype.setTitle = function(sTitle, bSuppressNotify) {
        if (this.getTitle() !== sTitle) {
            this.setProperty("title", sTitle, true);
            if (this._isRendered()) {
                if (this instanceof sap.ino.wall.WallItemGroup) {
                    this.$().children(".flippable").children(".front").find(".sapInoWallWIGTitle").find(".sapInoWallWITitleText").text(sTitle);
                } else {
                    this.$().children(".flippable").children(".front").find(".sapInoWallWITitleText").text(sTitle);
                }
            }
            // inform wall that this item has changed a persistence property
            if (this.getParent() && !bSuppressNotify) {
                this.getParent()._notifyItemChanged(this);
            }
        }
        return this;
    };

    /**
     * Setter for the depth property to suppress re-rendering.
     * 
     * @param {integer}
     *            iDepth the value
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemBase.prototype.setDepth = function(iDepth) {
        if (this.getDepth() !== iDepth) {
            this.setProperty("depth", iDepth, true);
            this.$().css("z-index", iDepth);
            // inform wall that this item has changed a persistence property
            if (this.getParent()) {
                this.getParent()._notifyItemChanged(this);
            }
        }
        return this;
    };

    /**
     * Setter for the enabled property to suppress re-rendering
     * 
     * @param {boolean}
     *            bEnabled the value
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemBase.prototype.setEnabled = function(bEnabled) {
        if (this.getEnabled() !== bEnabled) {
            this.setProperty("enabled", bEnabled, true);
            if (bEnabled) {
                this.removeStyleClass("sapInoWallWIBDisabled");
            } else {
                this.addStyleClass("sapInoWallWIBDisabled");
            }
        }
        return this;
    };

    /**
     * Setter for the selected property to suppress re-rendering
     * 
     * @param {boolean}
     *            bSelected the value
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemBase.prototype.setSelected = function(bSelected) {
        if (this.getSelected() !== bSelected) {
            this.setProperty("selected", bSelected, true);
            if (bSelected) {
                this.addStyleClass("sapInoWallWIBSelected");
            } else {
                this.removeStyleClass("sapInoWallWIBSelected");
            }
        }
        return this;
    };

    /**
     * Setter for the storageId property to suppress re-rendering
     * 
     * @param {integer}
     *            iValue the value
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemBase.prototype.setStorageId = function(iValue) {
        this.setProperty("storageId", iValue, true);
        return this;
    };

    /**
     * Setter for the x property to suppress re-rendering
     * 
     * @param {integer}
     *            iValue the value
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemBase.prototype.setX = function(iValue) {
        if (jQuery.type(iValue) === "number") {
            iValue += "px";
        }

        if (this.getX() !== iValue) {
            this.setProperty("x", iValue, true);
            this.$().css("left", iValue);
            // inform wall that this item has changed a persistence property
            if (this.getParent()) {
                this.getParent()._notifyItemChanged(this);
            }
        }
        return this;
    };

    /**
     * Setter for the y property to suppress re-rendering
     * 
     * @param {integer}
     *            iValue the value
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemBase.prototype.setY = function(iValue) {
        if (jQuery.type(iValue) === "number") {
            iValue += "px";
        }

        if (this.getY() !== iValue) {
            this.setProperty("y", iValue, true);
            this.$().css("top", iValue);
            // inform wall that this item has changed a persistence property
            if (this.getParent()) {
                this.getParent()._notifyItemChanged(this);
            }
        }
        return this;
    };

    /**
     * Helper method to set x and y property together
     * 
     * @param {integer}
     *            x the value
     * @param {integer}
     *            y the value
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemBase.prototype.setXY = function(x, y) {
        this.setX(x);
        this.setY(y);
        return this;
    };

    /**
     * Setter for the w property to suppress re-rendering
     * 
     * @param {CSSSize}
     *            sValue the value
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemBase.prototype.setW = function(sValue) {
        // minimum size of resizable items is 150px
        var iValue = parseInt(sValue, 10);

        if (jQuery.type(sValue) === "number") {
            sValue += "px";
        }

        if (this instanceof sap.ino.wall.WallItemSprite) {
            if (iValue <= 48) { // or 48px for Sprite
                sValue = "48px";
            }
        } else if (this instanceof sap.ino.wall.WallItemArrow) {
            if (iValue <= 1) { // or 0px for Arrow
                sValue = "1px";
            }
        } else if (iValue < sap.ino.wall.WallConfig._ITEM_MIN_SIZE) {
            sValue = sap.ino.wall.WallConfig._ITEM_MIN_SIZE + "px";
        }
        if (this.getW() !== sValue) {
            this.setProperty("w", sValue, true);
            this.$().css("width", sValue);
            this.$("front").css("width", sValue);
            this.$("back").css("width", sValue);
            // inform wall that this item has changed a persistence property
            if (this.getParent()) {
                this.getParent()._notifyItemChanged(this);
            }
        }
        return this;
    };

    /**
     * Setter for the h property to suppress re-rendering
     * 
     * @param {CSSSize}
     *            sValue the value
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemBase.prototype.setH = function(sValue) {
        // minimum size of resizable items is 150px
        var iValue = parseInt(sValue, 10);

        if (jQuery.type(sValue) === "number") {
            sValue += "px";
        }

        if (this instanceof sap.ino.wall.WallItemSprite) {
            if (iValue <= 48) { // or 48px for Sprite
                sValue = "48px";
            }
        } else if (this instanceof sap.ino.wall.WallItemArrow) {
            if (iValue <= 1) { // or 0px for Arrow
                sValue = "1px";
            }
        } else if (iValue < sap.ino.wall.WallConfig._ITEM_MIN_SIZE) {
            sValue = sap.ino.wall.WallConfig._ITEM_MIN_SIZE + "px";
        }
        if (this.getH() !== sValue) {
            this.setProperty("h", sValue, true);
            this.$().css("height", sValue);
            this.$("front").css("height", sValue);
            this.$("back").css("height", sValue);
            // inform wall that this item has changed a persistence property
            if (this.getParent()) {
                this.getParent()._notifyItemChanged(this);
            }
        }
        return this;
    };

    /**
     * Helper method to set w and h property together
     * 
     * @param {integer}
     *            w the value
     * @param {integer}
     *            h the value
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemBase.prototype.setWH = function(w, h) {
        this.setW(w);
        this.setH(h);
        return this;
    };

    /**
     * Setter for the flipped property to suppress re-rendering It displays the front/back side of the item and
     * implements worarounds for several browser issues
     * 
     * @param {boolean}
     *            bFlipped the value
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemBase.prototype.setFlipped = function(bFlipped, bVisualizeFocus) {
        var that = this, $this = this.$(), oWall = this.getWall();

        // cloned item does not have a parent yet
        if (!oWall) {
            return;
        }

        // no flipping in readonly mode / if already flipped, flip back to front
        if (oWall.getMode() === "Readonly") {
        	if (this.getFlipped()) {
        		bFlipped = false;
        	}
        	else {
        		return;
        	}
        }

        // fix for IE: do not flip again while transition is going on
        if (this._bFlipModeSquad) {
            return;
        }

        // TODO: rework this, it seems to be too complicated
        /* fix for firefox, there is a bug with backface-visibility for the front side */
        if (sap.ui.Device.browser.firefox) {
            if (bFlipped) {
                setTimeout(function() {
                    $this.children(".flippable").find(".front").css("display", "none");
                }, 180);
            } else {
                setTimeout(function() {
                    $this.children(".flippable").find(".front").css("display", "block");
                }, 200);
                // Firefox does not blur the fields when flipping the items, we do it manually
                this.$().children(".flippable").find("input[type=text], textarea, select").blur();
            }
        }
        /* fix for IE 10 (backface is not showing correctly otherwise) */
        else if (sap.ui.Device.browser.internet_explorer) {
            if (sap.ui.Device.browser.version >= 10) { // fixes for ie10
                if (bFlipped !== this.getFlipped() && !this._bFlipModeSquad) {
                    // set flipped is called twice, once by ontouchend and another time by the button press event
                    // we set a flag to remember that a flip is currently active and we handle only one event
                    this._bFlipModeSquad = true;

                    // show front side (for opacity animation)
                    if (!bFlipped) {
                        // $this.children(".flippable").find(".front").css("display", "block");
                        $this.children(".flippable").find(".back").css("backface-visibility", "visible");
                    }
                    // show trigger backface visibility and hide front side after 300ms (1/2 animation time
                    if (bFlipped) {
                        $this.children(".flippable").find(".back").css("backface-visibility", "hidden");
                        setTimeout(function() {
                            $this.children(".flippable").find(".back").css("backface-visibility", "visible");
                            $this.children(".flippable").find(".front").css("display", "none");
                        }, 250);
                    } else {
                        setTimeout(function() {
                            $this.children(".flippable").find(".back").css("backface-visibility", "hidden");
                            $this.children(".flippable").find(".front").css("display", "block");
                        }, 250);
                    }
                    // hide front side because it can be clicked even on the backside (due to opacity animation)
                    setTimeout(function() {
                        that._bFlipModeSquad = false;
                    }, 600);
                }
                // IE does not blur the fields when flipping the items, we do it manually
                this.$().children(".flippable").find("input[type=text], textarea, select").blur();
            } else { // fixes for ie9
                // ie9 does not support backface visibility, we just switch the display mode
                $this.children(".flippable").find(".front").css("display", (bFlipped ? "none" : "block"));
                $this.children(".flippable").find(".back").css("display", (!bFlipped ? "none" : "block"));
                // call item hook to react on resize changes after flip for IE9
                if (this._onResize) {
                    this._onResize(true);
                }
            }
        }

        // for all browsers, hide the not visible side (and show the visible)
        $this.children(".flippable").find(".front").css("visibility", "visible");
        $this.children(".flippable").find(".back").css("visibility", "visible");
        setTimeout(function() {
            $this.children(".flippable").find(".front").css("visibility", (bFlipped ? "hidden" : "visible"));
            $this.children(".flippable").find(".back").css("display", (bFlipped ? "visible" : "hidden"));
        }, 300);

        // focus first element if on back side
        if (bFlipped && !this.getFlipped()) {
            if (!sap.ui.Device.support.touch) {
                setTimeout(function() {
                    $this.children(".flippable").children(".back").find('input[type=text], textarea, select[tabindex!="-1"], button, [tabindex="0"], .sapInoWallDropUploadArea').filter(':visible:first').focus();
                    // nicEdit content needs to be focussed manually
                    if (that.$().find(".nicEdit-main").control(0)) {
                        that.$().find(".nicEdit-main").control(0).focus();
                    }
                }, 300);
            }
        } else {
            // nicEdit content needs to be blurred manually
            if (this.$().find(".nicEdit-main").control(0)) {
                this.$().find(".nicEdit-main").control(0).blur();
            }
        }

        if (!bFlipped) {
            setTimeout(function() {
                // select item
                that.setFocusVisible(bVisualizeFocus === true); /* explicit comparision required! */
                $this.focus();
            }, 200);
        }

        // save property without rerendering
        this.setProperty("flipped", bFlipped, true);

        // toggle css animation
        this.$().toggleClass("flipped", bFlipped);
    };

    sap.ino.wall.WallItemBase.prototype.setBackFocus = function() {
        var that = this, $this = this.$();

        if (this.getFlipped()) {
            if (!sap.ui.Device.support.touch) {
                $this.children(".flippable").children(".back").find('input[type=text], textarea, select[tabindex!="-1"], button, [tabindex="0"], .sapInoWallDropUploadArea').filter(':visible:first').focus();
                // nicEdit content needs to be focussed manually
                if (that.$().find(".nicEdit-main").control(0)) {
                    that.$().find(".nicEdit-main").control(0).focus();
                }
            }
        } else {
            this.setFlipped(true);
        }
    };

    /**
     * Adds a child item without rerendering the wall item
     * 
     * @override
     * @returns {this} this pointer for chaining
     * @private
     */
    sap.ino.wall.WallItemBase.prototype.addChildWithoutRendering = function(oItem) {
        var $childContainer = this.$("childs");

        // set initial width if child is added because the child container will push the container to a larger width
        // otherwise
        if (!this.getW() && !(this instanceof sap.ino.wall.WallItemHeadline)) {
            this.setW(sap.ino.wall.WallConfig._ITEM_MIN_SIZE + "px");
        }
        this.addAggregation("childs", oItem, true);
        sap.ino.wall.util.Helper.renderItemIntoContainer($childContainer[0], oItem, false, true);
        $childContainer.removeClass("sapInoWallInvisible");

        this._adjustChildContainerPositioning($childContainer);

        return this;
    };

    /**
     * Remove a child item without rerendering the wall item
     * 
     * @override
     * @returns {this} this pointer for chaining
     * @private
     */
    sap.ino.wall.WallItemBase.prototype.removeChildWithoutRendering = function(oItem) {
        var $childContainer = this.$("childs"), aChilds = this.getChilds() || [];

        this.removeAggregation("childs", oItem, true);
        oItem.$().remove();

        if (aChilds.length === 0) {
            $childContainer.addClass("sapInoWallInvisible");
        } else {
            this._adjustChildContainerPositioning($childContainer);
        }

        return this;
    };

    /**
     * Positions the childcontainer correctly for Firefox and IE (scale-based position centers the item)
     * 
     * @param {jQuery.Selector}
     *            $dom a jQuery selector
     * @returns {this} this pointer for chaining
     * @private
     */
    sap.ino.wall.WallItemBase.prototype._adjustChildContainerPositioning = function($container) {
        var fLeftPosition = parseInt(this.getW(), 10) - 20, iWidth, iHeight, fZoomFactor;
        // zoom based calculations do also zoom the position
        if (sap.ui.Device.browser.chrome) {
            fLeftPosition /= sap.ino.wall.WallConfig._ITEM_CHILD_ZOOM;
        }
        // adjust the child container position to the current size of the item
        $container.css("left", (isNaN(fLeftPosition) ? "0" : fLeftPosition) + "px");
        $container.css("top", "30px");

        // ff+ie+sf: scaling the container will center the dimensions, so we have to deduct the half of the difference
        // to the normal size
        if (!sap.ino.wall.config.Config.getZoomCapable()) {
            iWidth = parseInt($container.css("width"), 10);
            iHeight = parseInt($container.css("height"), 10);
            fZoomFactor = sap.ino.wall.WallConfig._ITEM_CHILD_ZOOM;

            // scaling the container will center the dimensions, so we have to deduct the half of the difference to the
            // normal size
            $container.css("left", parseInt($container.css("left"), 10) + (iWidth * fZoomFactor - iWidth) / 2.0);
            $container.css("top", parseInt($container.css("top"), 10) + (iHeight * fZoomFactor - iHeight) / 2.0);
        }

        return this;
    };

    /**
     * Returns the wall instance from the parent chain if the item is placed on a wall
     * 
     * @returns {Wall} the wall instance
     * @private
     */
    sap.ino.wall.WallItemBase.prototype.getWall = function() {
        var oParent = this, i = 0;

        // stop after three iterations (child of a member of a group is the deepest hirarchy it can get currently)
        while (i < 3 && oParent) {
            oParent = oParent.getParent();
            if (oParent instanceof sap.ino.wall.Wall) {
                return oParent;
            }
            i++;
        }
    };

    /* =========================================================== */
    /* begin: events */
    /* =========================================================== */

    /**
     * Do not select any text while the item is moving
     * 
     * @param {jQuery.EventObject}
     *            oEvent The event object
     * @override
     * @private
     */
    sap.ino.wall.WallItemBase.prototype.onselectstart = function(oEvent) {
        if (this._bMoving) {
            oEvent.preventDefault();
            oEvent.stopPropagation();
            return false;
        } else {
            sap.ui.core.Control.prototype.onselectstart.apply(this, arguments);
        }
    };

    sap.ino.wall.WallItemBase.prototype.ondragstart = function(oEvent) {
        // TODO: find out how to pass data by drag and drop
        // oEvent.preventDefault();
        // oEvent.stopPropagation();
        // oEvent.dataTransfer.effectAllowed = 'move';
        // oEvent.dataTransfer.setData('text/html', this.getStorageId());
        oEvent.data = this.getStorageId();
        // debugger;
        oEvent.preventDefault();
        oEvent.stopPropagation();
        // oEvent.dataTransfer.effectAllowed = 'move';
        // oEvent.dataTransfer.setData('text/html', this.getStorageId());
    };

    /**
     * Handle the touch start/click event.
     * 
     * @param {jQuery.EventObject}
     *            oEvent The event object
     * @private
     */
    sap.ino.wall.WallItemBase.prototype.ontouchstart = function(oEvent) {
        var oWall = this.getWall(), oClonedItem;

        if (oWall.getMode() === "Readonly" || oWall._bSpacePressed) {
            return;
        }

        // we don't process events on items while something is attached to the cursor on the wall (let the wall take
        // care of it
        if (oWall._hasFollowCursorItems()) {
            return;
        }

        // an inner item was moved (e.g. a group child), ignore this event
        if (oEvent.isMarked("_sapInoWallInnerItemMove")) {
            return;
        }

        // firefox fix: when clicking on scrollbar we do not want to move the item or flip
        // this calculates the click coordinates and checks if they are outside the container
        if (sap.ui.Device.browser.firefox && (jQuery(oEvent.target).parent().hasClass("sapMTextArea") || jQuery(oEvent.target).hasClass("sapInoWallScrollable")) && (oEvent.pageX - jQuery(oEvent.target).offset().left - jQuery(oEvent.target).width() * oWall.getZoom() / 100 > -16 * oWall.getZoom() / 100 || oEvent.pageY - $(oEvent.target).offset().top - $(oEvent.target).height() * oWall.getZoom() / 100 > -16 * oWall.getZoom() / 100)) {
            oEvent.preventDefault();
            oEvent.stopPropagation();
            return;
        }

        // internet explorer fix: no touchend event is fired when clicking scrollbar
        if (sap.ui.Device.browser.internet_explorer && (this instanceof sap.ino.wall.WallItemText && jQuery(oEvent.target).control(0) instanceof sap.m.ScrollContainer || jQuery(oEvent.target).hasClass("sapInoWallScrollable")) &&
        // check if we hit the vertical scroll bar
        oEvent.target.clientWidth && oEvent.offsetX - oEvent.target.clientWidth > 0 && oEvent.offsetX - oEvent.target.clientWidth < 20 * oWall.getZoom() / 100) {
            oEvent.preventDefault();
            oEvent.stopPropagation();
            return;
        }

        // when selecting text in input fields, we do not want to start dragging the item
        if ((jQuery(oEvent.target).filter('input[type=text],textarea,select').length) || oEvent.srcControl instanceof sap.ino.wall.TextEditor) {
            // increase depth so that the item is topmost
            if (this._touchMode !== sap.ino.wall.WallConfig._ITEM_TOUCHMODE_MOVECHILD) {
                this.setDepth(oWall._getNextDepth());
            }
            return;
        }

        // wall gets this event afterwards, we mark it so that the wall knows it was already processed
        // the buttons and inner controls get it even later so we cannot stop the propagation here
        oEvent.setMarked("_sapInoWallInnerItemMove");

        // detect touch move based on DOM element that was hit (resize icon or the resize div is a resize, otherwise
        // move)
        // the order is important here:
        // - children cannot be resized
        // - but group items can
        // - group items can also be moved
        // - everything else is just a normal move
        var bCustomItemTouchStart = false;
        if (typeof this.onTouchStartItem === "function") {
            bCustomItemTouchStart = this.onTouchStartItem(oEvent);
            if (bCustomItemTouchStart == null || bCustomItemTouchStart == undefined) {
                return true;
            }
        }
        if (!bCustomItemTouchStart) {
            if (this.getParent() instanceof sap.ino.wall.WallItemBase && !(this.getParent() instanceof sap.ino.wall.WallItemGroup)) {
                this._touchMode = sap.ino.wall.WallConfig._ITEM_TOUCHMODE_MOVECHILD;
            } else if (this.getResizable() && (jQuery(oEvent.target).hasClass("sapInoWallWIResizeHandle") || jQuery(oEvent.target).parent().hasClass("sapInoWallWIResizeHandle"))) {
                this._touchMode = sap.ino.wall.WallConfig._ITEM_TOUCHMODE_RESIZE;
                this._touchStartItemWidth = parseFloat(this.getW() ? this.getW() : "160px");
                this._touchStartItemHeight = parseFloat(this.getH() ? this.getH() : "160px");
                this._touchStartItemX = parseFloat(this.getX());
                this._touchStartItemY = parseFloat(this.getY());
            } else if (this.getParent() instanceof sap.ino.wall.WallItemGroup) {
                this._touchMode = sap.ino.wall.WallConfig._ITEM_TOUCHMODE_MOVEGROUPITEM;
            } else {
                this._touchMode = sap.ino.wall.WallConfig._ITEM_TOUCHMODE_MOVE;
            }
        }

        // disable text selection globally until touchend event
        jQuery(document).disableSelection();

        // just invert selection when using shift key
        if (oEvent.shiftKey && !oEvent.ctrlKey && this._touchMode !== sap.ino.wall.WallConfig._ITEM_TOUCHMODE_RESIZE) {
            oWall._toggleSelection(this);
            return false;
        }

        // clone item with CTRL key and move
        if (oEvent.ctrlKey && this._touchMode !== sap.ino.wall.WallConfig._ITEM_TOUCHMODE_RESIZE) {
            // we need this position to immediately place the item when it has been moved
            oWall._iItemClonePosition = [sap.ino.wall.util.Helper.getEventX(oEvent), sap.ino.wall.util.Helper.getEventY(oEvent)];
            oClonedItem = this._clone();
            // place the item
            oWall.placeItem(oClonedItem, sap.ino.wall.WallConfig._ADD_MODE_CLONE);

            // do not further proces
            oEvent.preventDefault();
            oEvent.stopPropagation();
            return false;
        }

        // init move/end proxy
        if (!this._touchEndProxy) {
            this._touchEndProxy = jQuery.proxy(this._ontouchend, this);
        }

        if (!this._touchMoveProxy) {
            this._touchMoveProxy = jQuery.proxy(this._ontouchmove, this);
        }

        // here also bound to the mouseup mousemove event to enable it working in desktop browsers
        jQuery(document).on("touchend touchcancel mouseup", this._touchEndProxy);
        jQuery(document).on("touchmove mousemove", this._touchMoveProxy);

        this._totalDeltaX = 0;
        this._totalDeltaY = 0;

        // for line item snapping
        if (this instanceof sap.ino.wall.WallItemLine) {
            this._snapDeltaX = 0;
            this._snapDeltaY = 0;
        }

        this._touchStartMousePositionX = sap.ino.wall.util.Helper.getEventX(oEvent);
        this._touchStartMousePositionY = sap.ino.wall.util.Helper.getEventY(oEvent);

        // increase depth so that the item is topmost
        if (this._touchMode !== sap.ino.wall.WallConfig._ITEM_TOUCHMODE_MOVECHILD) {
            this.setDepth(oWall._getNextDepth());
        }
    };

    sap.ino.wall.WallItemBase.prototype._clone = function() {
        var oClonedItem = this.clone();
        
        // for some unknown reason, the title property is automatically bound to the default value when cloning
        oClonedItem.unbindProperty("title");
        oClonedItem.setTitle(this.getTitle());

        // set some properties back to default
        var iCloneStorageId = -1;
        oClonedItem.setStorageId(iCloneStorageId--);
        oClonedItem.setSelected(false);
        
        resetItem(oClonedItem);
        
        function resetItem(oClonedItem) {
            jQuery.each(oClonedItem.getChilds(), function(index, oClonedChildItem) {
                oClonedChildItem.setStorageId(iCloneStorageId--);
                oClonedChildItem.setSelected(false);
                resetItem(oClonedChildItem);
            });
        }
        
        return oClonedItem;
    };
    
    /**
     * Handle the touch move event.
     * 
     * @param {jQuery.EventObject}
     *            oEvent The event object
     * @private
     */
    sap.ino.wall.WallItemBase.prototype._ontouchmove = function(oEvent) {
        var oWall = this.getWall(), oTarget, oTargetParent, fDeltaX = sap.ino.wall.util.Helper.getEventX(oEvent) - this._touchStartMousePositionX, fDeltaY = sap.ino.wall.util.Helper.getEventY(oEvent) - this._touchStartMousePositionY, offset = this.$().offset(), fZoomModifier, $trashAbove = null, // chrome
        // only
        // behavior
        $trash, iTrashDistanceX, iTrashDistanceY, $childContainer, aChilds, fCurrentX, fCurrentY, iCurrentW, iCurrentH, aSelectionItems, i = 0, iMaxDelta;
        
        if (!oWall) {
            // Item is currently in sync, and has no parent
            jQuery(document).unbind("touchend touchcancel mouseup", this._touchEndProxy);
            jQuery(document).unbind("touchmove mousemove", this._touchMoveProxy);
            this._bMoving = false;
            return;
        }

        fZoomModifier = 100 / oWall.getZoom();
        $trash = oWall.$("trash");
        if (sap.ui.Device.browser.chrome) {
            $trashAbove = oWall.$("trashAbove");
        }
        iTrashDistanceX = Math.abs(sap.ino.wall.util.Helper.getEventX(oEvent) - $trash.offset().left - 100);
        iTrashDistanceY = Math.abs(sap.ino.wall.util.Helper.getEventY(oEvent) - $trash.offset().top - 100);

        this._touchStartMousePositionX = sap.ino.wall.util.Helper.getEventX(oEvent);
        this._touchStartMousePositionY = sap.ino.wall.util.Helper.getEventY(oEvent);
        this._fDeltaX = fDeltaX;
        this._fDeltaY = fDeltaY;
        this._totalDeltaX += fDeltaX;
        this._totalDeltaY += fDeltaY;

        // when selecting text in input fields, we do not want to move the item
        if ((jQuery(oEvent.target).filter('input[type=text],textarea,select').length) || oEvent.srcControl instanceof sap.ino.wall.TextEditor) {
            return;
        }

        // check if the target or it's parent is an input control that we use inside wall objects (button, select,
        // segmentedButton, dropUpload)
        oTarget = jQuery(oEvent.target).control(0);
        if (oTarget) {
            oTargetParent = oTarget.getParent();
        }
        if (oTarget instanceof sap.m.Select || oTarget instanceof sap.m.Button || oTarget instanceof sap.m.SegmentedButton || oTarget instanceof sap.ino.wall.DropUpload) {
            return;
        } else if (oTargetParent && oTargetParent instanceof sap.m.Select || oTargetParent instanceof sap.m.Button || oTargetParent instanceof sap.m.SegmentedButton || oTargetParent instanceof sap.ino.wall.DropUpload) {
            return;
        }

        // the parent is getting the event after the child, but we don't move it when the child has been moved
        if (oEvent.isMarked("_sapInoWallChildMove")) {
            return;
        }

        if (this._touchMode === sap.ino.wall.WallConfig._ITEM_TOUCHMODE_MOVECHILD) {
            if (fDeltaX || fDeltaY) {
                // flag this item and the wall as moving
                this._bMoving = true;
                oWall._bMovingItem = true;
            }
            oEvent.setMarked("_sapInoWallChildMove", true);
            if (Math.abs(this._totalDeltaX) >= sap.ino.wall.WallConfig._ITEM_CHILD_UNSNAP_DISTANCE || Math.abs(this._totalDeltaY) >= sap.ino.wall.WallConfig._ITEM_CHILD_UNSNAP_DISTANCE) {
                // detach item and put it on cursor
                this.removeStyleClass("sapInoWallWIBUnsnap");
                this.getParent().removeChildWithoutRendering(this);
                oWall._onmousemoveItemUpdate(this, undefined, oEvent);
                oWall.placeItem(this, sap.ino.wall.WallConfig._ADD_MODE_DETACHGROUPITEM);
                // stop the move event chain here, the item is on the wall again
                jQuery(document).unbind("touchend touchcancel mouseup", this._touchEndProxy);
                jQuery(document).unbind("touchmove mousemove", this._touchMoveProxy);
                this._bMoving = false;
                oWall._bMovingItem = false;
                return;
            } else {
                this.addStyleClass("sapInoWallWIBUnsnap");
            }
        } else if (this._touchMode === sap.ino.wall.WallConfig._ITEM_TOUCHMODE_MOVE || this._touchMode === sap.ino.wall.WallConfig._ITEM_TOUCHMODE_MOVEGROUPITEM) {
            if (this._totalDeltaX > 0 || this._totalDeltaY > 0) {
                // set cursor to grabbing
                this.$().addClass("dragCursor");
            }

            // special case line: can only be moved in one direction, other direction swaps orientation
            if (this instanceof sap.ino.wall.WallItemLine) {
                // for line item snapping
                this._snapDeltaX += fDeltaX;
                this._snapDeltaY += fDeltaY;
                if (this.getOrientation() === "HORIZONTAL") {
                    fDeltaX = 0;
                    // switch to vertical mode
                    if (Math.abs(this._snapDeltaX) > 200) {
                        this.setOrientation("VERTICAL");
                        this._snapDeltaX = 0;
                        this._snapDeltaY = 0;
                    }
                } else if (this.getOrientation() === "VERTICAL") {
                    fDeltaY = 0;
                    // switch to horizontal mode
                    if (Math.abs(this._snapDeltaY) > 200) {
                        this.setOrientation("HORIZONTAL");
                        this._snapDeltaX = 0;
                        this._snapDeltaY = 0;
                    }
                }
            }
            if (fDeltaX || fDeltaY) {
                // flag this item and the wall as moving
                this._bMoving = true;
                oWall._bMovingItem = true;

                // move this item
                fCurrentX = parseFloat(this.getX()) || 0;
                fCurrentY = parseFloat(this.getY()) || 0;
                this.setXY((fCurrentX + fDeltaX * fZoomModifier) + "px", (fCurrentY + fDeltaY * fZoomModifier) + "px");

                // special case group item: if group boundaries are exceeded we need to remove the item from the group
                if (this._touchMode === sap.ino.wall.WallConfig._ITEM_TOUCHMODE_MOVEGROUPITEM) {
                    // make group calculations dirty, they need to be updated when a child moves
                    this.getParent()._recalculateItemDimensions = true;

                    // calculate current dimensions
                    iCurrentW = parseInt(this.getW(), 10) || sap.ino.wall.WallConfig._ITEM_MIN_SIZE;
                    iCurrentH = parseInt(this.getH(), 10) || sap.ino.wall.WallConfig._ITEM_MIN_SIZE;

                    if (fCurrentX < 0 || fCurrentY < 0 || fCurrentX + iCurrentW > (parseInt(this.getParent().getW(), 10 || sap.ino.wall.WallConfig._ITEM_MIN_SIZE)) || fCurrentY + iCurrentH > (parseInt(this.getParent().getH(), 10) || sap.ino.wall.WallConfig._ITEM_MIN_SIZE)) {
                        // remove item from group
                        this.getParent().removeChildWithoutRerendering(this);

                        // place item on the wall again (attach to mouse cursor)
                        oWall._onmousemoveItemUpdate(this, undefined, oEvent);
                        oWall.placeItem(this, sap.ino.wall.WallConfig._ADD_MODE_DETACHCHILD);

                        // stop the move event chain here, the item is on the wall again
                        jQuery(document).unbind("touchend touchcancel mouseup", this._touchEndProxy);
                        jQuery(document).unbind("touchmove mousemove", this._touchMoveProxy);

                        this._bMoving = false;
                        oWall._bMovingItem = false;
                        return false;
                    }
                }

                // move other selected items
                aSelectionItems = oWall._aSelectedItems || [];

                if (aSelectionItems.length) {
                    // only move other items if current item is part of the selection
                    if (!(this instanceof sap.ino.wall.WallItemLine) && $.inArray(this, aSelectionItems) >= 0) {
                        for (; i < aSelectionItems.length; i++) {
                            if (aSelectionItems[i].getId() === this.getId() || aSelectionItems[i] instanceof sap.ino.wall.WallItemLine) {
                                continue;
                            }
                            fCurrentX = parseFloat(aSelectionItems[i].getX()) || 0;
                            fCurrentY = parseFloat(aSelectionItems[i].getY()) || 0;
                            aSelectionItems[i].setXY((fCurrentX + fDeltaX * fZoomModifier) + "px", (fCurrentY + fDeltaY * fZoomModifier) + "px");
                        }
                    }
                }
            }

            // TODO: performance-optimize this
            // show trash based on position
            // if (iTrashDistanceX < 400 && iTrashDistanceY < 400) {
            $trash.clearQueue().css("opacity", 1);
            if (sap.ui.Device.browser.chrome) {
                $trashAbove.css("opacity", 1);
            }
            $trash.css("z-index", this.getDepth() - 1);

            if (iTrashDistanceX < 100 && iTrashDistanceY < 100 && (this._totalDeltaX > 25 || this._totalDeltaY > 25)) {
                $trash.addClass("active");
                if (sap.ui.Device.browser.chrome) {
                    $trashAbove.addClass("active");
                }
            } else {
                $trash.removeClass("active");
                if (sap.ui.Device.browser.chrome) {
                    $trashAbove.removeClass("active");
                }
            }
            /*
             * } else { $trash.clearQueue().css("opacity", 0); if (sap.ui.Device.browser.chrome) {
             * $trashAbove.css("opacity", 0); } $trash.css("z-index", 10000); }
             */
        } else if (this._touchMode === sap.ino.wall.WallConfig._ITEM_TOUCHMODE_RESIZE) {
            // prevent the resize event for the group if the item has already been resized
            if (oEvent.isMarked("_sapInoWallGroupItemResize")) {
                return;
            }

            fDeltaX = this._totalDeltaX;
            fDeltaY = this._totalDeltaY;

            if (fDeltaX || fDeltaY) {
                // flag this item and the wall as moving
                this._bMoving = true;
                oWall._bMovingItem = true;

                // resize according to the longest distance only
                if (oEvent.shiftKey) {
                    iMaxDelta = Math.max(this._totalDeltaX, this._totalDeltaY);
                    fDeltaX = iMaxDelta;
                    fDeltaY = iMaxDelta;
                }

                // in all cases resize the item based on the distance of the pointer event
                // when resizing with control key, the size has to be doubled (also moves item in opposite direction)
                this.setWH((this._touchStartItemWidth + (oEvent.ctrlKey ? fDeltaX * 2.0 : fDeltaX) * fZoomModifier) + "px", (this._touchStartItemHeight + (oEvent.ctrlKey ? fDeltaY * 2.0 : fDeltaY) * fZoomModifier) + "px");

                if (oEvent.ctrlKey) {
                    // only move item if it can be resized
                    if (parseInt(this.getW(), 10) > sap.ino.wall.WallConfig._ITEM_MIN_SIZE) {
                        this.setX((this._touchStartItemX - fDeltaX * fZoomModifier) + "px");
                    }
                    if (parseInt(this.getH(), 10) > sap.ino.wall.WallConfig._ITEM_MIN_SIZE) {
                        this.setY((this._touchStartItemY - fDeltaY * fZoomModifier) + "px");
                    }
                }

                aChilds = this.getChilds() || [];
                if (aChilds.length) {
                    $childContainer = this.$("childs");
                    this._adjustChildContainerPositioning($childContainer);
                }

                // call item hook to react on resize changes
                if (this._onResize) {
                    this._onResize(false, fDeltaX * fZoomModifier, fDeltaY * fZoomModifier);
                }

                if (this.getParent() instanceof sap.ino.wall.WallItemGroup) {
                    // mark the event so that the group is not resized as well
                    oEvent.setMarked("_sapInoWallGroupItemResize", true);
                }
            }
        }

        // show debug
        if (sap.ino.wall.config.Config.getDebugPositioning()) {
            oWall._calculateAllCollisions(this, sap.ino.wall.WallConfig._COLLISION_ALL, this);
        }

        // TODO: do not stop propagation, we need it for the dragstart event and text selection
        oEvent.preventDefault();
        oEvent.stopPropagation();
    };

    /**
     * Handle the touch end event.
     * 
     * @param {jQuery.EventObject}
     *            oEvent The event object
     * @private
     */
    sap.ino.wall.WallItemBase.prototype._ontouchend = function(oEvent) {
        var that = this, oWall = this.getWall(), $this = this.$(), $trashAbove = null, // chrome special behavior
        $trash, iTrashDistanceX, iTrashDistanceY, aChilds = this.getChilds() || [], bFlipable = true, aSelectionItems, i = 0, fDeltaXY, oOffset, fZoomModifier, fLeft, fTop, aCollisions = [], iCurrentDistance, iClosestDistance, fMiddleX, fMiddleY, oClosestItem, oGroup;
        
        if (!oWall) {
            // Item is currently in sync, and has no parent
            jQuery(document).unbind("touchend touchcancel mouseup", this._touchEndProxy);
            jQuery(document).unbind("touchmove mousemove", this._touchMoveProxy);
            this._bMoving = false;
            return false;
        }

        $trash = oWall.$("trash");
        if (sap.ui.Device.browser.chrome) {
            $trashAbove = oWall.$("trashAbove");
        }
        iTrashDistanceX = Math.abs(sap.ino.wall.util.Helper.getEventX(oEvent) - $trash.offset().left - 100);
        iTrashDistanceY = Math.abs(sap.ino.wall.util.Helper.getEventY(oEvent) - $trash.offset().top - 100);

        // enable text selection globally until touchend event
        jQuery(document).enableSelection();

        // do not process this event for childs
        if (this._touchMode === sap.ino.wall.WallConfig._ITEM_TOUCHMODE_MOVECHILD) {
            jQuery(document).unbind("touchend touchcancel mouseup", this._touchEndProxy);
            jQuery(document).unbind("touchmove mousemove", this._touchMoveProxy);
            this._bMoving = false;
            oWall._bMovingItem = false;
            return false;
        }

        if (!this._bMoving && this._touchMode !== sap.ino.wall.WallConfig._ITEM_TOUCHMODE_RESIZE) {
            if ($this[0].contains(oEvent.target)) {
                // special case, if it is a child we do not flip
                if (this.getParent() instanceof sap.ino.wall.WallItemBase && !(this.getParent() instanceof sap.ino.wall.WallItemGroup)) {
                    bFlipable = false;
                }

                // special case, scrolling in scroll container should not trigger flip
                if (jQuery(oEvent.target).hasClass("sapMScrollCont") || jQuery(oEvent.target).hasClass("sapInoWallScrollable")) {
                    fDeltaXY = sap.ino.wall.util.Helper.getEventX(oEvent) - this._touchStartMousePositionX + sap.ino.wall.util.Helper.getEventY(oEvent) - this._touchStartMousePositionY;
                    if (fDeltaXY) {
                        bFlipable = false;
                    }
                }

                // flip item if source was not an input element
                bFlipable = bFlipable && !(jQuery(oEvent.target).filter('.noflip,input[type=text],textarea,select,.sapMImg,.sapMBtnIcon').length) &&
                // or a UI5 control with noflip class set
                !((jQuery(oEvent.target).control(0)) && jQuery(oEvent.target).control(0).hasStyleClass("noflip")) &&
                // or a select
                !jQuery(oEvent.target).parent().hasClass("sapMSlt") &&
                // or a button (oEvent.target is either an image or the inner span element
                !jQuery(oEvent.target).parent().hasClass("noflip") &&
                // or nicEdit area clicked
                !(jQuery(oEvent.target).attr("class") && jQuery(oEvent.target).attr("class").trim().indexOf("nicEdit") === 0) &&
                // or a placeholder label of an input field in IE
                !jQuery(oEvent.target).filter(".sapMInputBasePlaceholder").length &&
                // overwritten event handlers for special situations (ScrollContainer scrollbar)
                !oEvent._sapwallDoNotFlip;

                if (bFlipable) {
                    // TODO: don't flip when placing other items (don't access wall members here)
                    if (!oWall._hasFollowCursorItems()) {
                        this.setFlipped(!this.getFlipped());
                        // stop propagation to prevent click actions
                        oEvent.preventDefault();
                        oEvent.stopPropagation();
                    }
                }
            }
        } else {
            oWall._updateBoundingBox();
        }

        // set cursor to normal
        this.$().removeClass("dragCursor");

        // check if item has been dropped on trash
        if ($trash.css("opacity") > 0) {
            $trash.css("opacity", 1).clearQueue().animate({
                opacity : "0"
            }, 500);
        }
        if (sap.ui.Device.browser.chrome) {
            $trashAbove.css("opacity", 0);
        }

        // delete item when not in resize mode and close to trash and item has been moved more than 30px
        if (this._touchMode !== sap.ino.wall.WallConfig._ITEM_TOUCHMODE_RESIZE && iTrashDistanceX < 100 && iTrashDistanceY < 100 && (this._totalDeltaX > 25 || this._totalDeltaY > 25) && !this._ignoreTrash) {

            // remove other selected items first
            aSelectionItems = oWall._aSelectedItems || [];

            if (aSelectionItems.length) {
                // only remove other items if current item is part of the selection
                if (!(this instanceof sap.ino.wall.WallItemLine) && $.inArray(this, aSelectionItems) >= 0) {
                    oWall.deleteItems(aSelectionItems);
                    oWall._clearSelection();
                }
            } else {
                oWall.deleteItems([this]);
            }

            // when deleting, we have to set this without timeout because the this point is not valid anymore
            oWall._bMovingItem = false;

            $trash.removeClass("active");
            if (sap.ui.Device.browser.chrome) {
                $trashAbove.removeClass("active");
            }
        }

        // add to childs when colliding with only one item
        // TODO: needs better logic, it is just adding it to the first collision currently
        if (this._touchMode !== sap.ino.wall.WallConfig._ITEM_TOUCHMODE_RESIZE && sap.ino.wall.config.Config.getEnableChildItems() && this._bMoving && !(this instanceof sap.ino.wall.WallItemLine) && !(this instanceof sap.ino.wall.WallItemGroup)) {

            oOffset = oWall.$("inner").offset();
            fZoomModifier = 100 / oWall.getZoom();

            // calculated mouse cursor coordinates of cursor position from screen coordinates
            fLeft = sap.ino.wall.util.Helper.getEventX(oEvent);
            fTop = sap.ino.wall.util.Helper.getEventY(oEvent);
            if (!sap.ino.wall.config.Config.getZoomCapable()) { // scale
                fLeft = (fLeft + Math.abs(oOffset.left)) * fZoomModifier;
                fTop = (fTop + Math.abs(oOffset.top)) * fZoomModifier;
            } else { // zoom
                fLeft = fLeft * fZoomModifier - oOffset.left;
                fTop = (fTop) * fZoomModifier - oOffset.top;
            }

            // calculate collisions with current mouse position
            if (!aChilds.length && this._touchMode === sap.ino.wall.WallConfig._ITEM_TOUCHMODE_MOVEGROUPITEM) {
                // calculate collisions inside group (relative to group)
                oGroup = this.getParent();
                fLeft -= parseInt(oGroup.getX(), 10);
                fTop -= parseInt(oGroup.getY(), 10);
                aCollisions = oWall._calculateCollisions(oGroup.getChilds(), [fLeft, fTop, 0, 0], sap.ino.wall.WallConfig._COLLISION_INTERSECTIONS, this)[0];
            } else if (this._touchMode === sap.ino.wall.WallConfig._ITEM_TOUCHMODE_MOVE_START || 
                       this._touchMode === sap.ino.wall.WallConfig._ITEM_TOUCHMODE_MOVE_END) {
                aCollisions = [];
            } else if (this._touchMode !== sap.ino.wall.WallConfig._ITEM_TOUCHMODE_MOVEGROUPITEM) {
                // calculate collisions with all items on wall (to add as child to an item or a group)
                aCollisions = oWall._calculateAllCollisions([fLeft, fTop, 0, 0], sap.ino.wall.WallConfig._COLLISION_INTERSECTIONS, this)[0];
            }

            // calculate the closest collision if needed
            if (aCollisions.length > 1) {
                i = 0;
                iCurrentDistance = 0;
                iClosestDistance = 99999;
                fMiddleX = 0;
                fMiddleY = 0;
                oClosestItem = null;

                for (; i < aCollisions.length; i++) {
                    fMiddleX = parseInt(aCollisions[i].getX(), 10) + (aCollisions[i].getW() ? parseInt(aCollisions[i].getW(), 10) : sap.ino.wall.WallConfig._ITEM_MIN_SIZE) / 2;
                    fMiddleY = parseInt(aCollisions[i].getY(), 10) + (aCollisions[i].getH() ? parseInt(aCollisions[i].getH(), 10) : sap.ino.wall.WallConfig._ITEM_MIN_SIZE) / 2;
                    // calculate distance between the mouse position and the middle of the item
                    iCurrentDistance = Math.sqrt(Math.pow(fMiddleX - fLeft, 2) + Math.pow(fMiddleY - fTop, 2));
                    if (iCurrentDistance < iClosestDistance) {
                        iClosestDistance = iCurrentDistance;
                        oClosestItem = aCollisions[i];
                    }
                }
                if (oClosestItem) {
                    aCollisions = [oClosestItem];
                }
            }

            // add this item as child to the closest collision
            if (aCollisions.length > 0) {
                if (!aChilds.length || aChilds.length && aCollisions[0] instanceof sap.ino.wall.WallItemGroup) {
                    if (aCollisions[0] instanceof sap.ino.wall.WallItemGroup || !(this instanceof sap.ino.wall.WallItemArrow)) {
                        this.setFlipped(false);
                        aCollisions[0].setFlipped(false);
                        oWall.removeItemWithoutRendering(this);
                        aCollisions[0].addChildWithoutRendering(this);
                        aCollisions[0].setDepth(oWall._getNextDepth());
                        if (!(aCollisions[0] instanceof sap.ino.wall.WallItemGroup)) {
                            sap.m.MessageToast.show(sap.ino.wall.util.Helper.stringFormat(this._oRB.getText("WALL_TOOLTIP_ADD_CHILD"), sap.ino.wall.util.Helper.stripTags(this.getTitle()), sap.ino.wall.util.Helper.stripTags(aCollisions[0].getTitle())));
                        } else {
                            sap.m.MessageToast.show(sap.ino.wall.util.Helper.stringFormat(this._oRB.getText("WALL_TOOLTIP_ADD_GROUP"), sap.ino.wall.util.Helper.stripTags(this.getTitle()), sap.ino.wall.util.Helper.stripTags(aCollisions[0].getTitle())));
                            // save the group as well to assign the child dependency
                            aCollisions[0]._notifyItemChanged(aCollisions[0]);
                        }
                        // when item is not moved anymore then the parent relation is not stored, so we save the item as well
                        this._notifyItemChanged(this);
                    }
                }
            }
        }

        // we set a timeout to allow other events (click) to also detect if item was moved
        setTimeout(function() {
            that._bMoving = false;
            if (oWall) { // will only work if the item has not been destroyed/deleted yet
                oWall._bMovingItem = false;
            }
        }, 0);

        // call the resize end hook
        if (this._touchMode === sap.ino.wall.WallConfig._ITEM_TOUCHMODE_RESIZE) {
            if (this._onResizeEnd) {
                this._onResizeEnd();
            }
        }

        jQuery(document).unbind("touchend touchcancel mouseup", this._touchEndProxy);
        jQuery(document).unbind("touchmove mousemove", this._touchMoveProxy);
    };

    /* =========================================================== */
    /* begin: internal methods */
    /* =========================================================== */

    /**
     * Checks if the control is already written to the DOM to allow for layout changes
     * 
     * @returns {this} this pointer for chaining
     * @private
     */
    sap.ino.wall.WallItemBase.prototype._isRendered = function() {
        if (this._bIsInDOM === undefined || this._bIsInDOM === 0) {
            this._bIsInDOM = jQuery.sap.byId(this.getId()).length;
        }

        return this._bIsInDOM;
    };

    /**
     * Renders and flushes a wall item without re-rendering the complete wall
     * 
     * @returns {this} this pointer for chaining
     * @private
     */
    // TODO: make this the same as in wall
    sap.ino.wall.WallItemBase.prototype._renderItemIntoContainer = function(oDomRef, oItem, bDoNotPreserve, vInsert) {
        var rm;

        if (oDomRef) {
            rm = sap.ui.getCore().createRenderManager();
            rm.renderControl(oItem);
            rm.flush(oDomRef, bDoNotPreserve, vInsert);
            rm.destroy();
        }

        return this;
    };

    /**
     * Calculates the current T-Shirt size after resizing the item
     * 
     * @private
     */
    // TODO: make hook so that items can also react to t-shirt size change in JS
    sap.ino.wall.WallItemBase.prototype._adjustTShirtSize = function() {
        var iW = parseInt(this.getW(), 10), iH = parseInt(this.getH(), 10), sSize = sap.ino.wall.TShirtSize.S;

        // do not adjust size when no width and height are set
        if (isNaN(iW) || isNaN(iH)) {
            return;
        }

        if (iW < 100 || iH < 100) {
            sSize = sap.ino.wall.TShirtSize.XS;
            this.addStyleClass(sSize);
            this.removeStyleClass(sap.ino.wall.TShirtSize.S);
            this.removeStyleClass(sap.ino.wall.TShirtSize.M);
            this.removeStyleClass(sap.ino.wall.TShirtSize.L);
            this.removeStyleClass(sap.ino.wall.TShirtSize.XL);
        } else if (iW < 300 || iH < 200) {
            sSize = sap.ino.wall.TShirtSize.S;
            this.removeStyleClass(sap.ino.wall.TShirtSize.XS);
            this.addStyleClass(sSize);
            this.removeStyleClass(sap.ino.wall.TShirtSize.M);
            this.removeStyleClass(sap.ino.wall.TShirtSize.L);
            this.removeStyleClass(sap.ino.wall.TShirtSize.XL);
        } else if (iW < 450 || iH < 400) {
            sSize = sap.ino.wall.TShirtSize.M;
            this.removeStyleClass(sap.ino.wall.TShirtSize.XS);
            this.removeStyleClass(sap.ino.wall.TShirtSize.S);
            this.addStyleClass(sSize);
            this.removeStyleClass(sap.ino.wall.TShirtSize.L);
            this.removeStyleClass(sap.ino.wall.TShirtSize.XL);
        } else if (iW < 600 || iH < 600) {
            sSize = "L";
            this.removeStyleClass(sap.ino.wall.TShirtSize.XS);
            this.removeStyleClass(sap.ino.wall.TShirtSize.S);
            this.removeStyleClass(sap.ino.wall.TShirtSize.M);
            this.addStyleClass(sSize);
            this.removeStyleClass(sap.ino.wall.TShirtSize.XL);
        } else {
            sSize = sap.ino.wall.TShirtSize.XL;
            this.removeStyleClass(sap.ino.wall.TShirtSize.XS);
            this.removeStyleClass(sap.ino.wall.TShirtSize.S);
            this.removeStyleClass(sap.ino.wall.TShirtSize.M);
            this.removeStyleClass(sap.ino.wall.TShirtSize.L);
            this.addStyleClass(sSize);
        }

        return sSize;
    };

    /**
     * Redirects child changes to the wall to update this item and its child in the DB
     * 
     * @private
     */
    sap.ino.wall.WallItemBase.prototype._notifyItemChanged = function(oItem) {
        if (oItem.getParent() instanceof sap.ino.wall.WallItemGroup && this.getWall()) {
            // do not save the whole group when only an item has been changed inside the group
            this.getWall()._notifyItemChanged(oItem);
        } else if (this.getParent()) {
            this.getParent()._notifyItemChanged(oItem);
        }
    };

    /* =========================================================== */
    /* begin: internal getters for lazy controls */
    /* =========================================================== */

    /*
     * Lazy initialization of the internal dialog @private @returns {sap.m/Button} the button
     */
    sap.ino.wall.WallItemBase.prototype._getButtonFlip = function() {
        var that = this, oButton = this.getAggregation("_buttonFlip");

        if (!oButton) {
            // create control
            oButton = new sap.m.Button({
                icon : sap.ui.core.IconPool.getIconURI("redo"),
                press : function(oEvent) {
                    // this is only the click handler
                    // keypress is handled in onkeydown
                    that.setFlipped(false);

                    if (oEvent) {
                        oEvent.preventDefault();
                    }
                },
                tooltip : this._oRB.getText("CTRL_WALL_ITEMBASE_EXP_FLIPBUTTON")
            }).addStyleClass("sapInoWallWIFlipBackButton");

            // set hidden aggregation without rerendering
            this.setAggregation("_buttonFlip", oButton, true);
        }

        return oButton;
    };

    /*
     * Lazy initialization of the internal resize icon @private @returns {sap.ui.core/Icon} the icon
     */
    sap.ino.wall.WallItemBase.prototype._getIconResize = function() {
        var oIcon = this.getAggregation("_iconResize");

        if (!oIcon) {
            // create control
            oIcon = new sap.ui.core.Icon({
                src : "sap-icon://dropdown",
                size : "15px",
                width : "12px",
                height : "15px",
                decorative : true
            });

            // set hidden aggregation without rerendering
            this.setAggregation("_iconResize", oIcon, true);
        }

        return oIcon;
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Input} the control
     */
    sap.ino.wall.WallItemBase.prototype._getInputTitle = function() {
        var that = this, oControl = this.getAggregation("_inputTitle"), sTitle = sap.ino.wall.util.Formatter.escapeBindingCharacters(this.getTitle()), sType = this.getMetadata()._sClassName.split(".").pop().replace("WallItem", "").toUpperCase();

        if (!oControl) {
            // create control
            oControl = new sap.m.Input({
                value : (sTitle === this._oRB.getText("WALL_ITEM" + sType + "_NEW_TEXT") ? "" : sTitle), // only set
                // title
                // when it
                // is not
                // the
                // inital
                // text
                maxLength : 500,
                change : function(oEvent) {
                    that.setTitle(oEvent.getParameter("newValue"), false, true);
                }
            }).addStyleClass("sapInoWallWIBTitle");

            // set hidden aggregation without rerendering
            this.setAggregation("_inputTitle", oControl, true);
        }

        return oControl;
    };

})();
}; // end of sap/ino/wall/WallItemBase.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallItemBaseRenderer') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallItemBaseRenderer");

(function() {
    "use strict";

    

    /**
     * @class WallItemBase renderer.
     * @static
     */
    sap.ino.wall.WallItemBaseRenderer = {};

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be rendered
     */
    sap.ino.wall.WallItemBaseRenderer.render = function(oRM, oControl) {
        var aChilds = oControl.getChilds() || [], 
            oParent = oControl.getParent(),
            bIsChild = oControl.getParent() instanceof sap.ino.wall.WallItemBase && !(oParent instanceof sap.ino.wall.WallItemGroup), 
            i = 0;

        // write outer wall item div
        oRM.write("<div");
        oRM.writeControlData(oControl);
        oRM.addClass("sapInoWallWIB");
        oRM.writeAttribute("tabindex", "-1"); // wall handles the tabchain
        oRM.writeAttribute("role", "group");
        oRM.writeAttribute("aria-labelledby", oControl.getId() + "-wallitem-description"); // description handled by specific item

        // callback to inherited control's method
        if (this.addOuterStyleClasses) {
            this.addOuterStyleClasses(oRM);
        }

        if (oControl.getFlipped()) {
            oRM.addClass("flipped");
        }
        if (!oControl.getEnabled()) {
            oRM.addClass("sapInoWallWIBDisabled");
        }
        if (oControl.getSelected()) {
            oRM.addClass("sapInoWallWIBSelected");
        }
        if (bIsChild) {
            oRM.addClass("sapInoWallWIBChild");
        }
        oRM.writeClasses();

        // write styles (childs do not have left and top, width and height only if set explicitly, z-index)
        oRM.writeAttribute("style", (!bIsChild ? "left: " + oControl.getX() + "; top: " + oControl.getY() + ";" : "") + (oControl.getW() ? " width: " + oControl.getW() + ";" : "") + (oControl.getH() ? " height: " + oControl.getH() + ";" : "") + (!bIsChild ? " z-index:" + oControl.getDepth() : ""));
        oRM.write(">");

        // callback to inherited control's method
        if (this.renderItem) {
            this.renderItem(oRM, oControl);
        }

        // render children container
        if (!(oControl instanceof sap.ino.wall.WallItemGroup)) {
            oRM.write('<div id="' + oControl.getId() + '-childs" class="sapInoWallWIBChilds' + (!aChilds.length ? " sapInoWallInvisible" : "") + '">');
            for (; i < aChilds.length; i++) {
                oRM.renderControl(aChilds[i]);
            }
            oRM.write('</div>'); 
        }
        
        // show bounding boxes for collision detection
        // TODO: use real front containers width and height here
        if (sap.ino.wall.config.Config.getDebugPositioning()) {
            oRM.write('<div class="sapInoWallWIBIntersectionBox"></div>');
            oRM.write('<div class="sapInoWallWIBNeighbourBox" style="padding: ' + sap.ino.wall.config.Config.getWallCollisionThreshold() + 'px; left: -' + sap.ino.wall.config.Config.getWallCollisionThreshold() + 'px; top: -' + sap.ino.wall.config.Config.getWallCollisionThreshold() + 'px"></div>');
        }
        
        oRM.write("</div>");
    };

    sap.ino.wall.WallItemBaseRenderer.renderResizeHandler = function(oRM, oControl) {
        if (oControl.getResizable()) {
            oRM.write("<div class=\"sapInoWallWIResizeHandle\">");
            // TODO: might be better performance if we write the DOM directly:
            // sap.ui.core.IconPool.getIconInfo("sap-icon://dropdown").content
            oRM.renderControl(oControl._getIconResize());
            oRM.write("</div>");
        }
    };
    
})();
}; // end of sap/ino/wall/WallItemBaseRenderer.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallItemDocument') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallItemDocument");

(function() {
    "use strict";

    
    
    

    /**
     * Constructor for a new WallItemDocument.
     * 
     * Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and
     * associated objects as well as event handlers.
     * 
     * If the name of a setting is ambiguous (e.g. a property has the same name as an event), then the framework assumes
     * property, aggregation, association, event in that order. To override this automatic resolution, one of the
     * prefixes "aggregation:", "association:" or "event:" can be added to the name of the setting (such a prefixed name
     * must be enclosed in single or double quotes).
     * 
     * The supported settings are:
     * <ul>
     * <li>Properties
     * <ul>
     * <li>{@link #getType type} : sap.ino.wall.DocumentType (default: sap.ino.wall.DocumentType.Misc)</li>
     * <li>{@link #getDescription description} : string</li>
     * </ul>
     * </li>
     * <li>Aggregations
     * <ul>
     * </ul>
     * </li>
     * <li>Associations
     * <ul>
     * </ul>
     * </li>
     * <li>Events
     * <ul>
     * </ul>
     * </li>
     * </ul>
     * 
     * 
     * In addition, all settings applicable to the base type
     * {@link sap.ino.wall.WallItemBase#constructor sap.ino.wall.WallItemBase} can be used as well.
     * 
     * @param {string}
     *            [sId] id for the new control, generated automatically if no id is given
     * @param {object}
     *            [mSettings] initial settings for the new control
     * 
     * @class Add your documentation for the WallItemDocument
     * @extends sap.ino.wall.WallItemBase
     * @version 1.16.4
     * 
     * @constructor
     * @public
     * @name sap.ino.wall.WallItemDocument
     * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
     */
    sap.ino.wall.WallItemBase.extend("sap.ino.wall.WallItemDocument", {
        metadata : {
            properties : {
                "type" : {
                    type : "sap.ino.wall.DocumentType",
                    group : "Misc",
                    defaultValue : sap.ino.wall.DocumentType.Misc
                },
                "description" : {
                    type : "string",
                    group : "Misc",
                    defaultValue : null
                }
            },
            aggregations : {
                "_icon" : {
                    type : "sap.ui.core.Icon",
                    multiple : false,
                    visibility : "hidden"
                },
                "_textAreaDescription" : {
                    type : "sap.m.TextArea",
                    multiple : false,
                    visibility : "hidden"
                },
                "_selectType" : {
                    type : "sap.m.Select",
                    multiple : false,
                    visibility : "hidden"
                },
                "_inputLink" : {
                    type : "sap.m.Input",
                    multiple : false,
                    visibility : "hidden"
                }
            }
        }
    });

    /**
     * Creates a new subclass of class sap.ino.wall.WallItemDocument with name <code>sClassName</code> and enriches
     * it with the information contained in <code>oClassInfo</code>.
     * 
     * <code>oClassInfo</code> might contain the same kind of informations as described in
     * {@link sap.ui.core.Element.extend Element.extend}.
     * 
     * @param {string}
     *            sClassName name of the class to be created
     * @param {object}
     *            [oClassInfo] object literal with informations about the class
     * @param {function}
     *            [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to
     *            sap.ui.core.ElementMetadata.
     * @return {function} the created class / constructor function
     * @public
     * @static
     * @name sap.ino.wall.WallItemDocument.extend
     * @function
     */

    /**
     * Getter for property <code>type</code>. The type of the link. See type definitions for more details.
     * 
     * Default value is <code>Misc</code>
     * 
     * @return {sap.ino.wall.DocumentType} the value of property <code>type</code>
     * @public
     * @name sap.ino.wall.WallItemDocument#getType
     * @function
     */

    /**
     * Setter for property <code>type</code>.
     * 
     * Default value is <code>Misc</code>
     * 
     * @param {sap.ino.wall.DocumentType}
     *            oType new value for property <code>type</code>
     * @return {sap.ino.wall.WallItemDocument} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemDocument#setType
     * @function
     */

    /**
     * Getter for property <code>description</code>. A description text.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @return {string} the value of property <code>description</code>
     * @public
     * @name sap.ino.wall.WallItemDocument#getDescription
     * @function
     */

    /**
     * Setter for property <code>description</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @param {string}
     *            sDescription new value for property <code>description</code>
     * @return {sap.ino.wall.WallItemDocument} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemDocument#setDescription
     * @function
     */

    sap.ino.wall.WallItemDocument.prototype._getIcon = function() {
        var that = this, oIcon = this.getAggregation("_icon"), sIconURI, sSize, sColor, sActiveColor;

        switch (this.getType()) {
            // TODO: add other types and simplify creation of icons here
            case sap.ino.wall.DocumentType.Word :
                sSize = "85px";
                sIconURI = sap.ui.core.IconPool.getIconURI("doc-attachment");
                sColor = "#1067C1";
                sActiveColor = "#1376D8";
                break;
            case sap.ino.wall.DocumentType.Excel :
                sSize = "85px";
                sIconURI = sap.ui.core.IconPool.getIconURI("excel-attachment");
                sColor = "#52A039";
                sActiveColor = "#5FB742";
                break;
            case sap.ino.wall.DocumentType.PowerPoint :
                sSize = "95px";
                sIconURI = sap.ui.core.IconPool.getIconURI("ppt-attachment");
                sColor = "#EB671B";
                sActiveColor = "#FF6D1E";
                break;
            case sap.ino.wall.DocumentType.PDF :
                sSize = "85px";
                sIconURI = sap.ui.core.IconPool.getIconURI("pdf-attachment");
                sColor = "#DC1414";
                sActiveColor = "#F41818";
                break;
            case sap.ino.wall.DocumentType.Zip :
                sSize = "85px";
                sIconURI = sap.ui.core.IconPool.getIconURI("attachment-zip-file");
                sColor = "#FBC121";
                sActiveColor = "#FFBD0A";
                break;
            case sap.ino.wall.DocumentType.Video :
                sSize = "85px";
                sIconURI = sap.ui.core.IconPool.getIconURI("attachment-video");
                sColor = "#8200E5";
                sActiveColor = "#9400FF";
                break;

            case sap.ino.wall.DocumentType.Text :
                sSize = "85px";
                sIconURI = sap.ui.core.IconPool.getIconURI("attachment-text-file");
                sColor = "#4CBDFF";
                sActiveColor = "#32B4FF";
                break;
            case sap.ino.wall.DocumentType.Misc :
                /* falls through */
            default :
                sSize = "85px";
                sIconURI = sap.ui.core.IconPool.getIconURI("document");
                sColor = "#bbbbbb";
                sActiveColor = "#cccccc";
        }
        if (sap.ui.Device.system.tablet) {
            sSize = (parseInt(sSize, 10) * 1.7) + "px";
        }

        // create new icon
        if (!oIcon) {
            oIcon = new sap.ui.core.Icon({
                press : function() {
                    var sDescription = this.getDescription();
                    if (!this._bMoving && sDescription) {
                        if (sDescription && sDescription !== "http://" && sDescription !== "https://" && sDescription !== "file://") {
                            var oWin = window.open(sDescription, '_blank');
                            oWin.opener = null;
                        } else {
                            this.setFlipped(true);
                        }
                    }
                }.bind(this)
            });

            // add custom styles
            oIcon.addStyleClass("sapInoWallWIDIcon").addStyleClass("noflip");

            // set hidden aggregation
            this.setAggregation("_icon", oIcon, true);
        }
        // update icon
        if (oIcon.getSrc() !== sIconURI) {
            oIcon.setSrc(sIconURI);
            oIcon.setSize(sSize);
            oIcon.setColor(sColor);
            oIcon.setActiveColor(sActiveColor);
        }
        // update icon
        if (oIcon.getSrc() !== sIconURI) {
            oIcon.setSrc(sIconURI);
            oIcon.setSize(sSize);
            oIcon.setColor(sColor);
            oIcon.setActiveColor(sActiveColor);
        }

        return oIcon;
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Select} the select
     */
    sap.ino.wall.WallItemDocument.prototype._getSelectType = function() {
        var that = this, oControl = this.getAggregation("_selectType"), sSelectedItemId = null, oItem, aItems, sType = this.getType(), sKey = null, i = 0;

        if (!oControl) {
            // create select control
            oControl = new sap.m.Select(this.getId() + "-type", {
                width : "100%",
                change : function(oEvent) {
                    that.setType(oEvent.getParameter("selectedItem").getText());
                }
            }).addStyleClass("sapInoWallWIBSelect").addStyleClass("noflip").addEventDelegate({
                onsapenter : function(oEvent) {
                    oEvent.preventDefault();
                    oEvent.stopPropagation();
                }
            });

            // add all link types
            for (sKey in sap.ino.wall.DocumentType) {
                if (sap.ino.wall.DocumentType.hasOwnProperty(sKey)) {
                    oItem = new sap.ui.core.Item({
                        key : sKey,
                        text : sKey
                    });
                    oControl.addItem(oItem);
                    // in the same step, define the selected item
                    if (sType === sKey && !sSelectedItemId) {
                        sSelectedItemId = oItem.getId();
                    }
                }
            }

            // set selected item
            oControl.setSelectedItem(sSelectedItemId);

            // set hidden aggregation
            this.setAggregation("_selectType", oControl, true);
        } else {
            // just set the selected item to the current state
            aItems = oControl.getItems();
            for (; i < aItems.length; i++) {
                if (aItems[i].getKey() === sType) {
                    oControl.setSelectedItem(aItems[i]);
                    break;
                }
            }
        }

        return oControl;
    };

    /*******************************************************************************************************************
     * overloaded setters to supress rendering and update ui
     ******************************************************************************************************************/

    sap.ino.wall.WallItemDocument.prototype.setDescription = function(sText, bSkipTypeUpdate) {
        var aMatches, sFileExtension = "";

        this.setProperty("description", sText, true);
        sText = this.getDescription();

        // detect link type by scanning the text
        if (!bSkipTypeUpdate) {
            // match file extension (followed by hash or query parameters ?foo=1 #hash)
            aMatches = /\.([0-9a-z]+)(?:[\?#]|$)/i.exec(sText);
            if (aMatches && aMatches.length > 1) {
                sFileExtension = aMatches[1].toLowerCase();
            } else {
                this.setType(sap.ino.wall.DocumentType.Misc);
            }

            // TODO: only do this when the URL is changes, it is currently done every time the item is loaded
            // set type based on extensions
            switch (sFileExtension) {
                case "doc" :
                case "docx" :
                case "docm" :
                case "dotx" :
                case "dotm" :
                    this.setType(sap.ino.wall.DocumentType.Word);
                    break;
                case "xls" :
                case "xlsx" :
                case "xlsm" :
                case "xlsb" :
                case "xltx" :
                case "xltm" :
                    this.setType(sap.ino.wall.DocumentType.Excel);
                    break;
                case "ppt" :
                case "pptx" :
                case "pptm" :
                case "pot" :
                case "potx" :
                case "potm" :
                    this.setType(sap.ino.wall.DocumentType.PowerPoint);
                    break;
                case "pdf" :
                    this.setType(sap.ino.wall.DocumentType.PDF);
                    break;
                case "txt" :
                    this.setType(sap.ino.wall.DocumentType.Text);
                    break;
                case "zip" :
                case "7z" :
                case "rar" :
                case "gz" :
                case "tar" :
                    this.setType(sap.ino.wall.DocumentType.Zip);
                    break;
                case "avi" :
                case "mp4" :
                case "mpg" :
                case "mov" :
                case "wmv" :
                    this.setType(sap.ino.wall.DocumentType.Video);
                    break;
                default :
                    this.setType(sap.ino.wall.DocumentType.Misc);
            }
        }

        // inform wall that this item has changed a persistence property
        if (this.getParent()) {
            this.getParent()._notifyItemChanged(this);
        }
        return this;
    };

    /**
     * Changes the document type without re-rendering
     * 
     * @override
     * @param (string)
     *            sType the new value
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemDocument.prototype.setType = function(sType) {
        // TODO: does not work yet with this version of UI5, replace with $("icon") later
        // var oDomRef = this.$("icon"),
        var oDomRef = jQuery.sap.domById(this.getId() + "-icon"), oIcon, sOldType = this.getType(), oRm;

        this.setProperty("type", sType, true);

        // render new icon into DOM without re-rendering
        if (sType !== sOldType && oDomRef) {
            oIcon = this._getIcon();
            oRm = sap.ui.getCore().createRenderManager();
            oRm.renderControl(oIcon);

            // flush & replace
            oRm.flush(oDomRef, true, false);
            oRm.destroy();
        }

        // inform wall that this item has changed a persistence property
        if (this.getParent()) {
            this.getParent()._notifyItemChanged(this);
        }
        return this;
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Input} the input
     */
    sap.ino.wall.WallItemDocument.prototype._getInputLink = function() {
        var that = this, oControl = this.getAggregation("_inputLink");

        if (!oControl) {
            // create control
            oControl = new sap.m.Input({
                value : sap.ino.wall.util.Formatter.escapeBindingCharacters(sap.ino.wall.util.Formatter.escapeNetworkPaths(this.getDescription())),
                placeholder : this._oRB.getText("WALL_ITEMDOCUMENT_PLACEHOLDER_LINK"),
                change : function(oEvent) {
                    that.setDescription(oEvent.getParameter("newValue"));
                }
            }).addStyleClass("sapInoWallWIDLinkEdit");

            // set hidden aggregation without rerendering
            this.setAggregation("_inputLink", oControl, true);
        }

        return oControl;
    };

    /**
     * creates a minimalic JSON representation of the item to be stored in the db
     * 
     * @param {string}
     *            sColor color identifier
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemDocument.prototype.formatToJSON = function() {
        // call the base object's JSON method
        var oJSON = sap.ino.wall.WallItemBase.prototype.formatToJSON.call(this);
        // add properties of this control
        oJSON.type = this.getType();
        oJSON.description = this.getDescription();
        // return the final object
        return oJSON;
    };

})();
}; // end of sap/ino/wall/WallItemDocument.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallItemDocumentRenderer') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallItemDocumentRenderer");

(function() {
    "use strict";

    
    jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

    

    /**
     * @class WallItemText renderer.
     * @static
     */
    sap.ino.wall.WallItemDocumentRenderer = sap.ui.core.Renderer.extend(sap.ino.wall.WallItemBaseRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be rendered
     */

    sap.ino.wall.WallItemDocumentRenderer.renderItem = function(oRM, oControl) {
        // start wrapper
        oRM.write("<div class=\"flippable\">");

        /* front panel (view) */

        oRM.write("<div id=" + oControl.getId() + "-front");
        oRM.addClass("front");
        oRM.writeClasses();
        // TODO: fix this: workaround for re-rendering issue (when selecting type)
        if (sap.ui.Device.browser.internet_explorer === true && oControl.getFlipped()) {
            oRM.write(" style=\"display: none\"");
        }
        oRM.write(">");

        oRM.write("<div id=" + oControl.getId() + "-frontInner");
        oRM.addClass("sapInoWallWID");
        oRM.writeClasses();
        oRM.write(">");

        // icon with surrounding div (content will be replaced dynamically when type changes)
        oRM.write("<div id=\"" + oControl.getId() + "-icon\" class=\"sapInoWallWIDIconWrapper\">");
        oRM.renderControl(oControl._getIcon());
        oRM.write("</div>");

        if (!sap.ino.wall.config.Config.getDebugPositioning()) {
            // title
            oRM.write("<div class=\"sapInoWallWITitle sapInoWallWITitleText\">");
            oRM.writeEscaped(oControl.getTitle());
            oRM.write("</div>");
        } else {
            oRM.write("front");
        }

        oRM.write("</div>");
        // dogear div
        oRM.write("<div id=" + oControl.getId() + "-frontRight");
        oRM.addClass("sapInoWallWIDRight");
        oRM.writeClasses();
        oRM.write(">");
        oRM.write("</div>");
        oRM.write("</div>");

        /* back panel (edit) */

        oRM.write("<div id=" + oControl.getId() + "-back");
        oRM.addClass("sapInoWallWID");
        oRM.addClass("gradients");
        oRM.addClass("back");
        oRM.writeClasses();
        // TODO: fix this: workaround for re-rendering issue (when selecting type)
        if (sap.ui.Device.browser.internet_explorer === true && oControl.getFlipped()) {
            oRM.write(" style=\"backface-visibility:visible\"");
        }
        oRM.write(">");

        if (!sap.ino.wall.config.Config.getDebugPositioning()) {
            // title
            oRM.write("<div class=\"sapInoWallWITitleEdit\">");
            oRM.renderControl(oControl._getInputTitle().setProperty("placeholder", oControl._oRB.getText("WALL_ITEMDOCUMENT_PLACEHOLDER_TITLE"), true));
            oRM.write("</div>");

            // type
            oRM.write("<div class=\"sapInoWallWIDTypeEdit\">");
            oRM.renderControl(oControl._getSelectType());
            oRM.write("</div>");

            // description
            oRM.write("<div class=\"sapInoWallWIDDescriptionEdit\">");
            oRM.renderControl(oControl._getInputLink());
            oRM.write("</div>");
        } else {
            oRM.write("back");
        }

        oRM.write("</div>");

        // back button
        oRM.renderControl(oControl._getButtonFlip());

        // end wrapper
        oRM.write("</div>");
    };

})();
}; // end of sap/ino/wall/WallItemDocumentRenderer.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallItemGroup') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallItemGroup");

(function() {
    "use strict";

    
    
    

    /**
     * Constructor for a new WallItemGroup.
     * 
     * Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and
     * associated objects as well as event handlers.
     * 
     * If the name of a setting is ambiguous (e.g. a property has the same name as an event), then the framework assumes
     * property, aggregation, association, event in that order. To override this automatic resolution, one of the
     * prefixes "aggregation:", "association:" or "event:" can be added to the name of the setting (such a prefixed name
     * must be enclosed in single or double quotes).
     * 
     * The supported settings are:
     * <ul>
     * <li>Properties
     * <ul>
     * </ul>
     * </li>
     * <li>Aggregations
     * <ul>
     * </ul>
     * </li>
     * <li>Associations
     * <ul>
     * </ul>
     * </li>
     * <li>Events
     * <ul>
     * </ul>
     * </li>
     * </ul>
     * 
     * 
     * In addition, all settings applicable to the base type
     * {@link sap.ino.wall.WallItemBase#constructor sap.ino.wall.WallItemBase} can be used as well.
     * 
     * @param {string}
     *            [sId] id for the new control, generated automatically if no id is given
     * @param {object}
     *            [mSettings] initial settings for the new control
     * 
     * @class A wall item group. Can be used to display multiple items.
     * @extends sap.ino.wall.WallItemBase
     * @version 1.16.4
     * 
     * @constructor
     * @public
     * @name sap.ino.wall.WallItemGroup
     * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
     */
    sap.ino.wall.WallItemBase.extend("sap.ino.wall.WallItemGroup", {
        metadata : {
            properties : {
                "color" : {
                    type : "string",
                    group : "Appearance",
                    defaultValue : '#ffffff'
                }
            },
            aggregations : {
                "_buttonColorSelector" : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                },
                "_colorPicker" : {
                    type : "sap.ino.wall.ColorPicker",
                    multiple : false,
                    visibility : "hidden"
                }
            }
        }
    });

    /**
     * Creates a new subclass of class sap.ino.wall.WallItemGroup with name <code>sClassName</code> and enriches it
     * with the information contained in <code>oClassInfo</code>.
     * 
     * <code>oClassInfo</code> might contain the same kind of informations as described in
     * {@link sap.ui.core.Element.extend Element.extend}.
     * 
     * @param {string}
     *            sClassName name of the class to be created
     * @param {object}
     *            [oClassInfo] object literal with informations about the class
     * @param {function}
     *            [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to
     *            sap.ui.core.ElementMetadata.
     * @return {function} the created class / constructor function
     * @public
     * @static
     * @name sap.ino.wall.WallItemGroup.extend
     * @function
     */

    /**
     * Initializes the control
     * 
     * @private
     */
    sap.ino.wall.WallItemGroup.prototype.init = function() {
        sap.ino.wall.WallItemBase.prototype.init.call(this);

        // make the group larger
        this.setW("300px");
        this.setH("300px");

        this._recalculateItemDimensions = true;

        this.setResizable(true);
    };

    sap.ino.wall.WallItemGroup.prototype.onAfterRendering = function() {
        var fLuminance = sap.ino.wall.util.Helper.getColorLuminance(this.getColor()), oButtonColorSelector = sap.ui.getCore().byId(this.getId() + "-buttonColorSelector");

        // call base class method
        sap.ino.wall.WallItemBase.prototype.onAfterRendering.apply(this, arguments);

        // update background color of button
        if (oButtonColorSelector) {
            sap.ui.getCore().byId(this.getId() + "-buttonColorSelector").$().find(".sapMBtnInner").css("background-color", this.getColor());
        }

        // update color picker icon based on luminosity of the color
        if (fLuminance <= 0.6) {
            this._getButtonColorSelector().addStyleClass("sapInoWallWIGroupColorSelectorButtonBright").removeStyleClass("sapInoWallWIGroupColorSelectorButtonNormal");
        } else {
            this._getButtonColorSelector().addStyleClass("sapInoWallWIGroupColorSelectorButtonNormal").removeStyleClass("sapInoWallWIGroupColorSelectorButtonBright");
        }
    };

    /**
     * Handle the touch start/click event.
     * 
     * @param {jQuery.EventObject}
     *            oEvent The event object
     * @private
     */
    sap.ino.wall.WallItemGroup.prototype.ontouchstart = function(oEvent) {
        sap.ino.wall.WallItemBase.prototype.ontouchstart.apply(this, arguments);
    };

    /**
     * Changes the color without re-rendering
     * 
     * @override
     * @param (string)
     *            sColor the new value
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemGroup.prototype.setColor = function(sColor, bSuppressNotify) {
        var fLuminance, $front = this.$().children(".flippable").children(".front"), $back = this.$().children(".flippable").children(".back"), $frontHeader = $front.find(".sapInoWallWIGTitle").children(0), sBackgroundColor = sap.ino.wall.util.Helper.transparentColor(sap.ino.wall.util.Helper.shadeColor(sColor, -30), 30);

        if (sColor !== this.getColor()) {
            this.setProperty("color", sColor, true);
            if (this._isRendered()) {
                fLuminance = sap.ino.wall.util.Helper.getColorLuminance(sap.ino.wall.util.Helper.shadeColor(sColor, -20));
                // update group color
                $front.css("border-color", sColor);
                $front.css("background-color", sBackgroundColor);
                $back.css("border-color", sColor);
                $back.css("background-color", sBackgroundColor);
                // update group header color
                $frontHeader.css("background-color", sap.ino.wall.util.Helper.shadeColor(sColor, -20));
                $frontHeader.css("color", (fLuminance <= 0.6 ? "#F5F5F5" : "#232323"));
                $frontHeader.css("border-color", sap.ino.wall.util.Helper.shadeColor(sColor, -10));
                $frontHeader.css("background-image", sap.ino.wall.util.Helper.addBrowserPrefix("linear-gradient(top, " + sap.ino.wall.util.Helper.shadeColor(sColor, 5) + " 0%, " + sap.ino.wall.util.Helper.shadeColor(sColor, -5) + " 100%)"));

                // update button color
                sap.ui.getCore().byId(this.getId() + "-buttonColorSelector").$().find(".sapMBtnInner").css("background-color", sColor);
                // update color picker icon based on luminosity of the color
                if (fLuminance <= 0.6) {
                    this._getButtonColorSelector().addStyleClass("sapInoWallWIGroupColorSelectorButtonBright").removeStyleClass("sapInoWallWIGroupColorSelectorButtonNormal");
                } else {
                    this._getButtonColorSelector().addStyleClass("sapInoWallWIGroupColorSelectorButtonNormal").removeStyleClass("sapInoWallWIGroupColorSelectorButtonBright");
                }
            }
            // inform wall that this item has changed a persistence property
            if (this.getParent() && !bSuppressNotify) {
                this.getParent()._notifyItemChanged(this);
            }
        }
    };

    /**
     * Adds a group item without rerendering the wall item
     * 
     * @override
     * @returns {this} this pointer for chaining
     * @private
     */
    sap.ino.wall.WallItemGroup.prototype.addChildWithoutRendering = function(oItem, bSuppressGroupOffset) {
        var $groupContainer = this.$().find(".sapInoWallWIGroupContent");

        // group items are positioned relatively to the group, remove the group position
        if (!bSuppressGroupOffset) {
            oItem.setX(Math.max(0, parseInt(oItem.getX(), 10) - parseInt(this.getX(), 10)) + "px");
            oItem.setY(Math.max(0, parseInt(oItem.getY(), 10) - parseInt(this.getY(), 10)) + "px");
        }

        // render item into the container
        this.addAggregation("childs", oItem, true);
        sap.ino.wall.util.Helper.renderItemIntoContainer($groupContainer[0], oItem, false, true);

        return this;
    };

    /**
     * Removes a group item without rerendering and adds it to the wall
     * 
     * @override
     * @returns {this} this pointer for chaining
     * @private
     */
    sap.ino.wall.WallItemGroup.prototype.removeChildWithoutRerendering = function(oItem) {
        // group items are positioned relatively to the group, restore the wall position
        oItem.setX(Math.max(0, parseInt(oItem.getX(), 10) + parseInt(this.getX(), 10)) + "px");
        oItem.setY(Math.max(0, parseInt(oItem.getY(), 10) + parseInt(this.getY(), 10)) + "px");

        // remove the DOM
        this.removeAggregation("childs", oItem, true);
        oItem.$().remove();

        return this;
    };

    /**
     * Hook called when the item has been resized by user interaction
     * @param {boolean} bSytemCall true when called by system call and not by user interaction
     * @oaram {float} fDeltaX the amount in px the item has been resized
     * @oaram {float} fDeltaY the amount in px the item has been resized
     * @protected
     */
    sap.ino.wall.WallItemGroup.prototype._onResize = function (bSystemCall, fDeltaX, fDeltaY) {
        var iBoundingBoxWidth,
            iBoundingBoxHeight,
            iWidthDifference,
            iHeightDifference,
            aGroupItems = this.getChilds(),
            iMinPadding = 10,
            fGroupWidth = parseFloat(this.getW(), 10),
            fGroupHeight = parseFloat(this.getH(), 10),
            iMinGroupWidth,
            iMinGroupHeight,
            i = 0;

        if (aGroupItems.length === 0) {
            return;
        }

        // TODO: calculate this only when an item is moved
        if (this._recalculateItemDimensions) {
            this._boundingBox = this.getParent()._calculateBoundingBox(aGroupItems);
            if (!this._boundingBox) {
                return;
            }
            this._recalculateItemDimensions = false;
        }

        iBoundingBoxWidth = this._boundingBox[1].getX() - this._boundingBox[0].getX();
        iBoundingBoxHeight = this._boundingBox[1].getY() - this._boundingBox[0].getY();
        iWidthDifference = fGroupWidth - iBoundingBoxWidth - this._boundingBox[0].getX() - iMinPadding;
        iHeightDifference = fGroupHeight - iBoundingBoxHeight - this._boundingBox[0].getY() - iMinPadding;

        if (iWidthDifference < 0) {
            // try to move the items to the left alltogether
            if (this._boundingBox[0].getX() > iMinPadding) {
                for (; i < aGroupItems.length; i++) {
                    aGroupItems[i].setX(Math.max(iMinPadding, parseInt(aGroupItems[i].getX(), 10) - Math.min(Math.abs(iWidthDifference), this._boundingBox[0].getX())) + "px");
                }
                this._recalculateItemDimensions = true;
            }

            // set the width to the minimum value (bouding box + padding)
            iMinGroupWidth = (this._boundingBox[1].getX() - this._boundingBox[0].getX() + 2 * iMinPadding);
            if (fGroupWidth - iMinGroupWidth < 0) {
                this.setW(iMinGroupWidth + "px");
            } 
        }

        if (iHeightDifference < 0) {
            // try to move the items to the left alltogether
            if (this._boundingBox[0].getY() > iMinPadding) {
                for (; i < aGroupItems.length; i++) {
                    aGroupItems[i].setY(Math.max(iMinPadding, parseInt(aGroupItems[i].getY(), 10) - Math.min(Math.abs(iHeightDifference), this._boundingBox[0].getY())) + "px");
                }
                this._recalculateItemDimensions = true;
            }

            // set the height to the minimum value (bouding box + padding)
            iMinGroupHeight = (this._boundingBox[1].getY() - this._boundingBox[0].getY() + 2 * iMinPadding);
            if (fGroupHeight - iMinGroupHeight < 0) {
                this.setH(iMinGroupHeight + "px");
            } 
        }
    };

    /**
     * Creates a minimalic JSON representation of the item to be stored in the db
     * 
     * @override
     * @returns {object} the JSON object representation of the item
     * @public
     */
    sap.ino.wall.WallItemGroup.prototype.formatToJSON = function() {
        var oJSON = sap.ino.wall.WallItemBase.prototype.formatToJSON.apply(this), oGroupItems = this.getChilds(), oChild, i = 0;

        // add properties of this control
        oJSON.color = this.getColor();

        oJSON.childs = [];
        for (; i < oGroupItems.length; i++) {
            oChild = sap.ino.wall.WallItemBase.prototype.formatToJSON.call(oGroupItems[i]);
            oJSON.childs.push(oChild);
        }

        return oJSON;
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Button} the button
     */
    sap.ino.wall.WallItemGroup.prototype._getButtonColorSelector = function() {
        var that = this, oControl = this.getAggregation("_buttonColorSelector");

        if (!oControl) {
            // create control
            oControl = new sap.m.Button(this.getId() + "-buttonColorSelector", {
                tooltip : this._oRB.getText("WALL_ITEMLINE_STATUSMSG_COLOR_SELECT"),
                press : function(oEvent) {
                    var oColorPicker = that._getColorPicker();

                    if (oColorPicker.isOpen()) {
                        oColorPicker.close();
                    }
                    else {
                        oColorPicker.openBy(oControl, 0, 0);
                    }
                },
                icon : "sap-icon://palette"
            }).addStyleClass("noflip").addStyleClass("sapInoWallWIGroupColorSelectorButton").addStyleClass("sapInoWallWIGroupColorSelectorButtonNormal");

            // set hidden aggregation without rerendering
            this.setAggregation("_buttonColorSelector", oControl, true);
        }

        return oControl;
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Button} the button
     */
    sap.ino.wall.WallItemGroup.prototype._getColorPicker = function() {
        var that = this, oControl = this.getAggregation("_colorPicker");

        if (!oControl) {
            // create control
            oControl = new sap.ino.wall.ColorPicker(this.getId() + "-colorPicker", {
                color : this.getColor(),
                change : function(oEvent) {
                    that.setColor(oEvent.getParameter("color"));
                }
            });

            // do not set during initialiting colorpicker => bug w/ setting the color to the colorpicker
            oControl.setPlacement(sap.m.PlacementType.Vertical);

            // set hidden aggregation without rerendering
            this.setAggregation("_colorPicker", oControl, true);
        }

        return oControl;
    };

})();
}; // end of sap/ino/wall/WallItemGroup.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallItemGroupRenderer') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallItemGroupRenderer");

(function() {
    "use strict";

    jQuery.sap.declare("sap.ino.wall.WallItemGroupRenderer");
    
    
    

    /**
     * @class WallItemGroup renderer.
     * @static
     */
    sap.ino.wall.WallItemGroupRenderer = sap.ui.core.Renderer.extend(sap.ino.wall.WallItemBaseRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be rendered
     */
    sap.ino.wall.WallItemGroupRenderer.renderItem = function(oRM, oControl) {
        var aGroupItems = oControl.getChilds(), sColor = oControl.getColor(), fLuminance = sap.ino.wall.util.Helper.getColorLuminance(sap.ino.wall.util.Helper.shadeColor(sColor, -20)), sBackgroundColor = sap.ino.wall.util.Helper.transparentColor(sap.ino.wall.util.Helper.shadeColor(sColor, -30), 30);

        var i = 0;

        // start wrapper
        oRM.write("<div class=\"flippable\">");

        /* front panel (view) */

        oRM.write("<div id=" + oControl.getId() + "-front");
        oRM.addClass("sapInoWallWallItemGroup");
        oRM.addClass("front");
        oRM.writeClasses();
        oRM.write("style=\"" + (oControl.getW() ? "; width: " + oControl.getW() : "") + (oControl.getH() ? "; height: " + oControl.getH() : "") + "; border-color: " + sColor + "; background-color: " + sBackgroundColor + "\"");
        oRM.write(">");

        if (!sap.ino.wall.config.Config.getDebugPositioning()) {
            // title
            oRM.write("<div class=\"sapInoWallWIGTitle\">");
            oRM.write("<div class=\"sapInoWallWITitle sapInoWallWITitleText\" style=\"background-color: " + sap.ino.wall.util.Helper.shadeColor(sColor, -20) + "; color : " + (fLuminance <= 0.6 ? "#F5F5F5" : "#232323") + "; border-color: " + sap.ino.wall.util.Helper.shadeColor(sColor, -10) + "; background-image: " + sap.ino.wall.util.Helper.addBrowserPrefix("linear-gradient(top, " + sap.ino.wall.util.Helper.shadeColor(sColor, 5) + " 0%, " + sap.ino.wall.util.Helper.shadeColor(sColor, -5) + " 100%)") + "\">");
            oRM.writeEscaped(oControl.getTitle());
            oRM.write("</div>");
            oRM.write("</div>");

            // group container
            oRM.write("<div class=\"sapInoWallWIGroupContent\">");
            for (; i < aGroupItems.length; i++) {
                oRM.renderControl(aGroupItems[i]);
            }
            oRM.write('</div>');
        } else {
            oRM.write("front");
        }

        // resize handle
        this.renderResizeHandler(oRM, oControl);

        oRM.write("</div>");

        /* back panel (edit) */

        oRM.write("<div id=" + oControl.getId() + "-back");
        oRM.addClass("sapInoWallWallItemGroup");
        oRM.addClass("back");
        oRM.writeClasses();
        oRM.write("style=\"" + (oControl.getW() ? "; width: " + oControl.getW() : "") + (oControl.getH() ? "; height: " + oControl.getH() : "") + "; border-color: " + sColor + "; background-color: " + sBackgroundColor + "\"");
        oRM.write(">"); // span element

        if (!sap.ino.wall.config.Config.getDebugPositioning()) {
            // title
            oRM.write("<div class=\"sapInoWallWITitleEdit\">");
            oRM.renderControl(oControl._getInputTitle().setProperty("placeholder", oControl._oRB.getText("WALL_ITEMGROUP_PLACEHOLDER_TITLE"), true));
            oRM.renderControl(oControl._getButtonColorSelector());
            oRM.write("</div>");
        }

        // resize handle
        this.renderResizeHandler(oRM, oControl);

        oRM.write("</div>");

        // back button
        oRM.renderControl(oControl._getButtonFlip());

        // end wrapper
        oRM.write("</div>");
    };

})();
}; // end of sap/ino/wall/WallItemGroupRenderer.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallItemHeadline') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallItemHeadline");

(function() {
    "use strict";

    
    
    

    /**
     * Constructor for a new WallItemHeadline.
     * 
     * Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and
     * associated objects as well as event handlers.
     * 
     * If the name of a setting is ambiguous (e.g. a property has the same name as an event), then the framework assumes
     * property, aggregation, association, event in that order. To override this automatic resolution, one of the
     * prefixes "aggregation:", "association:" or "event:" can be added to the name of the setting (such a prefixed name
     * must be enclosed in single or double quotes).
     * 
     * The supported settings are:
     * <ul>
     * <li>Properties
     * <ul>
     * <li>{@link #getType type} : string (default: 'CLEAR')</li>
     * <li>{@link #getSize size} : string (default: 'H3')</li>
     * </ul>
     * </li>
     * <li>Aggregations
     * <ul>
     * </ul>
     * </li>
     * <li>Associations
     * <ul>
     * </ul>
     * </li>
     * <li>Events
     * <ul>
     * </ul>
     * </li>
     * </ul>
     * 
     * 
     * In addition, all settings applicable to the base type
     * {@link sap.ino.wall.WallItemBase#constructor sap.ino.wall.WallItemBase} can be used as well.
     * 
     * @param {string}
     *            [sId] id for the new control, generated automatically if no id is given
     * @param {object}
     *            [mSettings] initial settings for the new control
     * 
     * @class Add your documentation for the WallItemHeadline
     * @extends sap.ino.wall.WallItemBase
     * @version 1.16.4
     * 
     * @constructor
     * @public
     * @name sap.ino.wall.WallItemHeadline
     * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
     */
    sap.ino.wall.WallItemBase.extend("sap.ino.wall.WallItemHeadline", {
        metadata : {
            properties : {
                "type" : {
                    type : "string",
                    group : "Misc",
                    defaultValue : 'CLEAR'
                },
                "size" : {
                    type : "string",
                    group : "Misc",
                    defaultValue : 'H3'
                }
            },
            aggregations : {
                "_selectType" : {
                    type : "sap.m.Select",
                    multiple : false,
                    visibility : "hidden"
                },
                "_selectSize" : {
                    type : "sap.m.Select",
                    multiple : false,
                    visibility : "hidden"
                }
            }
        }
    });

    /**
     * Creates a new subclass of class sap.ino.wall.WallItemHeadline with name <code>sClassName</code> and enriches
     * it with the information contained in <code>oClassInfo</code>.
     * 
     * <code>oClassInfo</code> might contain the same kind of informations as described in
     * {@link sap.ui.core.Element.extend Element.extend}.
     * 
     * @param {string}
     *            sClassName name of the class to be created
     * @param {object}
     *            [oClassInfo] object literal with informations about the class
     * @param {function}
     *            [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to
     *            sap.ui.core.ElementMetadata.
     * @return {function} the created class / constructor function
     * @public
     * @static
     * @name sap.ino.wall.WallItemHeadline.extend
     * @function
     */

    /**
     * Getter for property <code>type</code>. The type of the headline. See type definitions for more details.
     * 
     * Default value is <code>Clear</code>
     * 
     * @return {string} the value of property <code>type</code>
     * @public
     * @name sap.ino.wall.WallItemHeadline#getType
     * @function
     */

    /**
     * Setter for property <code>type</code>.
     * 
     * Default value is <code>Clear</code>
     * 
     * @param {string}
     *            sType new value for property <code>type</code>
     * @return {sap.ino.wall.WallItemHeadline} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemHeadline#setType
     * @function
     */

    /**
     * Getter for property <code>size</code>. The headline size (H1-H6)
     * 
     * Default value is <code>H3</code>
     * 
     * @return {string} the value of property <code>size</code>
     * @public
     * @name sap.ino.wall.WallItemHeadline#getSize
     * @function
     */

    /**
     * Setter for property <code>size</code>.
     * 
     * Default value is <code>H3</code>
     * 
     * @param {string}
     *            sSize new value for property <code>size</code>
     * @return {sap.ino.wall.WallItemHeadline} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemHeadline#setSize
     * @function
     */

    /**
     * Changes the type without re-rendering
     * 
     * @override
     * @param (string)
     *            sType the new value
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemHeadline.prototype.setType = function(sType) {
        var sKey = "";

        if (sType !== this.getType()) {
            // save property
            this.setProperty("type", sType, true);

            // toggle all available type classes
            for (sKey in sap.ino.wall.HeadlineType) {
                if (sap.ino.wall.HeadlineType.hasOwnProperty(sKey)) {
                    this.$().find(".front").toggleClass("sapInoWallWIH" + sap.ino.wall.HeadlineType[sKey], sType === sap.ino.wall.HeadlineType[sKey]);
                }
            }

            // inform wall that this item has changed a persistence property
            if (this.getParent()) {
                this.getParent()._notifyItemChanged(this);
            }
        }
        return this;
    };

    /**
     * Changes the size without re-rendering
     * 
     * @override
     * @param (string)
     *            sSize the new value
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemHeadline.prototype.setSize = function(sSize) {
        var sKey = "";

        if (sSize !== this.getSize()) {
            // save property
            this.setProperty("size", sSize, true);

            // toggle all available size classes
            for (sKey in sap.ino.wall.HeadlineSize) {
                if (sap.ino.wall.HeadlineSize.hasOwnProperty(sKey)) {
                    this.$().find(".front").toggleClass("sapInoWallWIH" + sKey, sSize === sKey);
                }
            }

            // inform wall that this item has changed a persistence property
            if (this.getParent()) {
                this.getParent()._notifyItemChanged(this);
            }
        }
        return this;
    };

    sap.ino.wall.WallItemHeadline.prototype._getSelectType = function() {
        var that = this, oSelect = this.getAggregation("_selectType"), sSelectedItemId = null, oItem, aItems, sType = this.getType(), sKey = null, i = 0;

        if (!oSelect) {
            // create select control
            oSelect = new sap.m.Select(this.getId() + "-type", {
                width : "100%",
                tooltip : this._oRB.getText("WALL_ITEMHEADLINE_STATUSMSG_TYPE"),
                change : function(oEvent) {
                    that.setType(oEvent.getParameter("selectedItem").getKey());
                }
            }).addStyleClass("sapInoWallWIBSelect").addStyleClass("noflip").addEventDelegate({
                onsapenter : function(oEvent) {
                    oEvent.preventDefault();
                    oEvent.stopPropagation();
                }
            });

            // add all link types
            for (sKey in sap.ino.wall.HeadlineType) {
                if (sap.ino.wall.HeadlineType.hasOwnProperty(sKey)) {
                    oItem = new sap.ui.core.Item({
                        key : sap.ino.wall.HeadlineType[sKey],
                        text : this._oRB.getText("WALL_ITEMHEADLINE_TYPE_" + sap.ino.wall.HeadlineType[sKey])
                    });
                    oSelect.addItem(oItem);
                    // in the same step, define the selected item
                    if (sType === sKey && !sSelectedItemId) {
                        sSelectedItemId = oItem.getId();
                    }
                }
            }

            // set selected item
            oSelect.setSelectedItem(sSelectedItemId);

            // set hidden aggregation
            this.setAggregation("_selectType", oSelect, true);
        } else {
            // just set the selected item to the current state
            aItems = oSelect.getItems();
            for (; i < aItems.length; i++) {
                if (aItems[i].getKey() === sType) {
                    oSelect.setSelectedItem(aItems[i]);
                    break;
                }
            }
        }

        return oSelect;
    };

    sap.ino.wall.WallItemHeadline.prototype._getSelectSize = function() {
        var that = this, oSelect = this.getAggregation("_selectSize"), sSelectedItemId = null, oItem, aItems, sSize = this.getSize(), sKey = null, i = 0;

        if (!oSelect) {
            // create select control
            oSelect = new sap.m.Select(this.getId() + "-size", {
                width : "100%",
                tooltip : this._oRB.getText("WALL_ITEMHEADLINE_STATUSMSG_SIZE"),
                change : function(oEvent) {
                    that.setSize(oEvent.getParameter("selectedItem").getKey());
                }
            }).addStyleClass("sapInoWallWIBSelect").addStyleClass("noflip").addEventDelegate({
                onsapenter : function(oEvent) {
                    oEvent.preventDefault();
                    oEvent.stopPropagation();
                }
            });

            // add all link types
            for (sKey in sap.ino.wall.HeadlineSize) {
                if (sap.ino.wall.HeadlineSize.hasOwnProperty(sKey)) {
                    oItem = new sap.ui.core.Item({
                        key : sKey,
                        text : this._oRB.getText("WALL_ITEMHEADLINE_SIZE_" + sKey)
                    });
                    oSelect.addItem(oItem);
                    // in the same step, define the selected item
                    if (sSize === sKey && !sSelectedItemId) {
                        sSelectedItemId = oItem.getId();
                    }
                }
            }

            // set selected item
            oSelect.setSelectedItem(sSelectedItemId);

            // set hidden aggregation
            this.setAggregation("_selectSize", oSelect, true);
        } else {
            // just set the selected item to the current state
            aItems = oSelect.getItems();
            for (; i < aItems.length; i++) {
                if (aItems[i].getKey() === sSize) {
                    oSelect.setSelectedItem(aItems[i]);
                    break;
                }
            }
        }

        return oSelect;
    };

    /**
     * creates a minimalic JSON representation of the item to be stored in the db
     * 
     * @param {string}
     *            sColor color identifier
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemHeadline.prototype.formatToJSON = function() {
        // call the base object's JSON method
        var oJSON = sap.ino.wall.WallItemBase.prototype.formatToJSON.call(this);
        // add properties of this control
        oJSON.type = this.getType();
        oJSON.size = this.getSize();
        // return the final object
        return oJSON;
    };

})();
}; // end of sap/ino/wall/WallItemHeadline.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallItemHeadlineRenderer') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallItemHeadlineRenderer");

(function() {
    "use strict";

    
    jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

    

    /**
     * @class WallItemHeadline renderer.
     * @static
     */
    sap.ino.wall.WallItemHeadlineRenderer = sap.ui.core.Renderer.extend(sap.ino.wall.WallItemBaseRenderer);

    /**
     * Adds style classes to the base item {@link sap.ui.core.RenderManager}.
     * 
     * @override
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render output buffer
     */
    sap.ino.wall.WallItemHeadlineRenderer.addOuterStyleClasses = function(oRM) {
        oRM.addClass("sapInoWallWIHeadline");
    };

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be rendered
     */
    sap.ino.wall.WallItemHeadlineRenderer.renderItem = function(oRM, oControl) {
        // start wrapper
        oRM.write("<div class=\"flippable sapInoWallWIHL\">");

        /* front panel (view) */

        oRM.write("<div id=" + oControl.getId() + "-front");
        oRM.addClass("sapInoWallWIHeadline");
        oRM.addClass("sapInoWallWIH" + oControl.getType());
        oRM.addClass("sapInoWallWIH" + oControl.getSize());
        oRM.addClass("front");
        oRM.writeClasses();
        oRM.write(">");

        if (!sap.ino.wall.config.Config.getDebugPositioning()) {
            // text
            oRM.write("<div class=\"sapInoWallWITitleText sapInoWallWIHeadlineText\">");
            oRM.writeEscaped(oControl.getTitle());
            oRM.write("</div>");
        } else {
            oRM.write("front");
        }

        oRM.write("</div>");

        /* back panel (edit) */

        oRM.write("<div id=" + oControl.getId() + "-back");
        oRM.addClass("sapInoWallWIHeadline");
        oRM.addClass("back");
        oRM.writeClasses();
        oRM.write(">");

        if (!sap.ino.wall.config.Config.getDebugPositioning()) {
            // title
            oRM.write("<div class=\"sapInoWallWITitleEdit\">");
            oRM.renderControl(oControl._getInputTitle().setProperty("placeholder", oControl._oRB.getText("WALL_ITEMHEADLINE_PLACEHOLDER_TITLE"), true));
            oRM.write("</div>");
            // type
            oRM.write("<div class=\"sapInoWallWIHTypeEdit\">");
            oRM.renderControl(oControl._getSelectType());
            oRM.write("</div>");
            // size
            oRM.write("<div class=\"sapInoWallWIHSizeEdit\">");
            oRM.renderControl(oControl._getSelectSize());
            oRM.write("</div>");
        } else {
            oRM.write("back");
        }

        oRM.write("</div>");

        // back button
        oRM.renderControl(oControl._getButtonFlip());

        // end wrapper
        oRM.write("</div>");
    };

})();
}; // end of sap/ino/wall/WallItemHeadlineRenderer.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallItemImage') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallItemImage");

(function() {
    "use strict";

    
    
    
    jQuery.sap.require('sap.ino.commons.models.object.Attachment'); // unlisted dependency retained

    jQuery.sap.require('sap.ino.commons.application.Configuration'); // unlisted dependency retained

    var Configuration = sap.ino.commons.application.Configuration;

    /**
     * Constructor for a new WallItemImage.
     * 
     * Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and
     * associated objects as well as event handlers.
     * 
     * If the name of a setting is ambiguous (e.g. a property has the same name as an event), then the framework assumes
     * property, aggregation, association, event in that order. To override this automatic resolution, one of the
     * prefixes "aggregation:", "association:" or "event:" can be added to the name of the setting (such a prefixed name
     * must be enclosed in single or double quotes).
     * 
     * The supported settings are:
     * <ul>
     * <li>Properties
     * <ul>
     * <li>{@link #getStatus status} : string (default: 'Normal')</li>
     * <li>{@link #getPreview preview} : sap.ui.core.URI</li>
     * <li>{@link #getImage image} : sap.ui.core.URI</li>
     * </ul>
     * </li>
     * <li>Aggregations
     * <ul>
     * </ul>
     * </li>
     * <li>Associations
     * <ul>
     * </ul>
     * </li>
     * <li>Events
     * <ul>
     * </ul>
     * </li>
     * </ul>
     * 
     * 
     * In addition, all settings applicable to the base type
     * {@link sap.ino.wall.WallItemBase#constructor sap.ino.wall.WallItemBase} can be used as well.
     * 
     * @param {string}
     *            [sId] id for the new control, generated automatically if no id is given
     * @param {object}
     *            [mSettings] initial settings for the new control
     * 
     * @class Add your documentation for the WallItemImage
     * @extends sap.ino.wall.WallItemBase
     * @version 1.16.4
     * 
     * @constructor
     * @public
     * @name sap.ino.wall.WallItemImage
     * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
     */
    sap.ino.wall.WallItemBase.extend("sap.ino.wall.WallItemImage", {
        metadata : {
            properties : {
                "status" : {
                    type : "string",
                    group : "Appearance",
                    defaultValue : 'Normal'
                },
                "preview" : {
                    type : "sap.ui.core.URI",
                    group : "Data",
                    defaultValue : null
                },
                "image" : {
                    type : "sap.ui.core.URI",
                    group : "Data",
                    defaultValue : null
                },
                "assignmentId" : {
                    type : "int",
                    group : "Identification",
                    defaultValue : -1
                },
                "showAsIcon" : {
                    type : "boolean",
                    group : "Appearance",
                    defaultValue : false
                }
            },
            aggregations : {
                "_icon" : {
                    type : "sap.ui.core.Icon",
                    multiple : false,
                    visibility : "hidden"
                },
                "imagePreview" : {
                    type : "sap.m.Image",
                    multiple : false,
                    visibility : "hidden"
                },
                "imageLarge" : {
                    type : "sap.m.Image",
                    multiple : false,
                    visibility : "hidden"
                },
                "_busyIndicator" : {
                    type : "sap.m.BusyIndicator",
                    multiple : false,
                    visibility : "hidden"
                },
                "_dropUpload" : {
                    type : "sap.ino.wall.DropUpload",
                    multiple : false,
                    visibility : "hidden"
                },
                "_checkBox" : {
                    type : "sap.m.CheckBox",
                    multiple : false,
                    visibility : "hidden"
                },
                "_lightBox" : {
                    type : "sap.ino.wall.LightBox",
                    multiple : false,
                    visibility : "hidden"
                }
            }
        }
    });

    /**
     * Creates a new subclass of class sap.ino.wall.WallItemImage with name <code>sClassName</code> and enriches it
     * with the information contained in <code>oClassInfo</code>.
     * 
     * <code>oClassInfo</code> might contain the same kind of informations as described in
     * {@link sap.ui.core.Element.extend Element.extend}.
     * 
     * @param {string}
     *            sClassName name of the class to be created
     * @param {object}
     *            [oClassInfo] object literal with informations about the class
     * @param {function}
     *            [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to
     *            sap.ui.core.ElementMetadata.
     * @return {function} the created class / constructor function
     * @public
     * @static
     * @name sap.ino.wall.WallItemImage.extend
     * @function
     */

    /**
     * Getter for property <code>status</code>. The status of the image item. If set to "Busy" a busy indicator will
     * overlay the preview to indicate that the image is currently uploaded.
     * 
     * Default value is <code>Normal</code>
     * 
     * @return {string} the value of property <code>status</code>
     * @public
     * @name sap.ino.wall.WallItemImage#getStatus
     * @function
     */

    /**
     * Setter for property <code>status</code>.
     * 
     * Default value is <code>Normal</code>
     * 
     * @param {string}
     *            sStatus new value for property <code>status</code>
     * @return {sap.ino.wall.WallItemImage} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemImage#setStatus
     * @function
     */

    /**
     * Getter for property <code>preview</code>. The preview image URI.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @return {sap.ui.core.URI} the value of property <code>preview</code>
     * @public
     * @name sap.ino.wall.WallItemImage#getPreview
     * @function
     */

    /**
     * Setter for property <code>preview</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @param {sap.ui.core.URI}
     *            sPreview new value for property <code>preview</code>
     * @return {sap.ino.wall.WallItemImage} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemImage#setPreview
     * @function
     */

    /**
     * Getter for property <code>image</code>. The large image URI to be displayed when clicking on the preview.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @return {sap.ui.core.URI} the value of property <code>image</code>
     * @public
     * @name sap.ino.wall.WallItemImage#getImage
     * @function
     */

    /**
     * Setter for property <code>image</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @param {sap.ui.core.URI}
     *            sImage new value for property <code>image</code>
     * @return {sap.ino.wall.WallItemImage} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemImage#setImage
     * @function
     */

    sap.ino.wall.WallItemImage._CAPTION_HEIGHT = 20;

    /**
     * Initializes the control
     * 
     * @private
     */
    sap.ino.wall.WallItemImage.prototype.init = function() {
        sap.ino.wall.WallItemBase.prototype.init.call(this);

        this.setResizable(true);
    };

    /*******************************************************************************************************************
     * overloaded setters to supress rendering and update ui
     ******************************************************************************************************************/

    sap.ino.wall.WallItemImage.prototype.setImage = function(sURI) {
        var oOldImage = this.getAggregation("imageLarge");

        // TODO: try this without re-rendering
        // this.setProperty("image", sURI, (oOldImage ? true : false));
        this.setProperty("image", sURI, true);
        if (oOldImage) {
            oOldImage.destroy(true);
        }
        this.setAggregation("imageLarge", new sap.m.Image({
            src : sURI,
            densityAware : false
        }), true);

        if (this._isRendered()) {
            this.$().find("#" + this.getId() + "-imagePreviewWrapper").children("a").attr("href", sURI);
            this._renderItemIntoContainer(this.$().find("#" + this.getId() + "-imagePreviewWrapper").children("a")[0], this.getAggregation("imagePreview"), false, true);
            // inform wall that this item has changed a persistence property
            if (this.getParent()) {
                this.getParent()._notifyItemChanged(this);
            }
        }
        return this;
    };

    sap.ino.wall.WallItemImage.prototype.setAssignmentId = function(iID) {

        this.setProperty("assignmentId", iID, true);

        // inform wall that this item has changed a persistence property
        if (this.getParent()) {
            this.getParent()._notifyItemChanged(this);
        }
        return this;
    };

    sap.ino.wall.WallItemImage.prototype.setShowAsIcon = function(bValue) {

        this.setProperty("showAsIcon", bValue, true);

        if (this._isRendered()) {
            jQuery(this._getCheckBox().getDomRef()).prop("'checked", bValue);
            var oFront = this.$().find(".front");
            var oTitle = oFront.find(".sapInoWallWITitle");
            var oResizeHandle = oFront.find(".sapInoWallWIResizeHandle");
            if (bValue) {
                oFront.removeClass("sapInoWallWII");
                oTitle.addClass("sapInoWallWIITitleIcon");
                oResizeHandle.addClass("sapInoWallWIResizeHandleHidden");
            } else {
                oFront.addClass("sapInoWallWII");
                oTitle.removeClass("sapInoWallWIITitleIcon");
                oResizeHandle.removeClass("sapInoWallWIResizeHandleHidden");
            }
        }

        // inform wall that this item has changed a persistence property
        if (this.getParent()) {
            this.getParent()._notifyItemChanged(this);
        }
        return this;
    };

    /**
     * sets the width of the item and the internal preview image
     * 
     * @param {string}
     *            sValue the css width value
     * @public
     * @override
     */
    sap.ino.wall.WallItemImage.prototype.setW = function(sValue) {
        var oPreview = this.getAggregation("imagePreview");
        if (oPreview) {
            if (parseInt(sValue, 10) < parseInt(this.$().css("min-width"), 10)) {
                sValue = this.$().css("min-width");
            }
            oPreview.setProperty("width", sValue, true);
            oPreview.$().width(sValue);
        }
        sap.ino.wall.WallItemBase.prototype.setW.apply(this, [sValue]);
    };

    /**
     * sets the width of the item and the internal preview image
     * 
     * @param {string}
     *            sValue the css height value
     * @public
     * @override
     */
    sap.ino.wall.WallItemImage.prototype.setH = function(sValue) {
        var oPreview = this.getAggregation("imagePreview"), sPreviewHeight = sValue;
        if (oPreview) {
            if (!this.getShowAsIcon()) {
                if (parseInt(sValue, 10) > sap.ino.wall.WallItemImage._CAPTION_HEIGHT) {
                    sPreviewHeight = (parseInt(sValue, 10) - sap.ino.wall.WallItemImage._CAPTION_HEIGHT) + "px";
                }
            }
            if (parseInt(sPreviewHeight, 10) < parseInt(this.$().css("min-height"), 10)) {
                sPreviewHeight = this.$().css("min-height");
            }
            oPreview.setProperty("height", sPreviewHeight, true);
            oPreview.$().height(sPreviewHeight);
        }
        sap.ino.wall.WallItemBase.prototype.setH.apply(this, [sValue]);
    };

    sap.ino.wall.WallItemImage.prototype.setPreview = function(sURI, bUpdateDimensions) {
        /* as we do not have a calculated preview, we always start w/ 150x130 px */
        // TODO keep aspect ratio
        if (isNaN(parseInt(this.getW(), 10)) || isNaN(parseInt(this.getH(), 10))) {
            this.setW("150px", true);
            this.setH("130px", true);
        }

        var that = this, oOldImage = this.getAggregation("imagePreview"), oNewImage = null, oDomRef, fnImageOnload = function(oEvent) {
            var $DomNode;

            // call original function
            if (sap.m.Image.prototype.onload) {
                sap.m.Image.prototype.onload.apply(this, arguments);
            }

            // hide busy indicator after loading the preview
            that.setStatus("Normal");

            $DomNode = this.$();

            var $that = sap.ui.getCore().byId(that.getId());
            var $Preview = sap.ui.getCore().byId(that.getId() + "-preview");

            if ($that) {
                $that.removeStyleClass("sapInoWallWIIImageError");
            }
            if ($Preview) {
                $Preview.removeStyleClass("sapInoWallInvisible");
            }

            // set width and height in image control (missing feature in sap.m.Image)
            if ($DomNode.width()) {
                this.setProperty("width", $DomNode.width() + "px", true);
            }
            if ($DomNode.height()) {
                this.setProperty("height", $DomNode.height() + "px", true);
            }

            if (bUpdateDimensions) {
                // set width and height in WallItemImage according to image
                var fImageWidth = parseFloat(this.getWidth(), 10);
                var fImageHeight = parseFloat(this.getHeight(), 10);
                var fItemWidth = parseFloat(that.getW(), 10)
                var fItemHeight = parseFloat(that.getH(), 10);
                if (fImageWidth > fItemWidth || fImageHeight > fItemHeight) {
                    var fImageRatio = fImageWidth / fImageHeight;
                    if (fImageRatio >= 1.0) {
                        var fNewItemWidth = fItemHeight * fImageRatio;
                        that.setWH(fNewItemWidth + "px", that.getH());
                    } else {
                        var fNewItemHeight = fItemWidth / fImageRatio;
                        fNewItemHeight = fNewItemHeight + (that.getTitle() ? sap.ino.wall.WallItemImage._CAPTION_HEIGHT : 0);
                        that.setWH(that.getW(), fNewItemHeight + "px");                    
                    }
                } else {
                    var fNewItemHeight = parseFloat(this.getHeight(), 10);
                    fNewItemHeight = fNewItemHeight + (that.getTitle() ? sap.ino.wall.WallItemImage._CAPTION_HEIGHT : 0);
                    that.setWH(this.getWidth(), fNewItemHeight + "px");
                }
                // for browsers with no flex support we have to recalc the dimensions here as well
                that._onResize(true);
            } else {
                // set width and height of image according to WallItemImage
                sap.ui.getCore().byId(that.getId() + "-preview").$().width(that.getW()).height(that.getTitle() ? parseFloat(that.getH(), 10) - sap.ino.wall.WallItemImage._CAPTION_HEIGHT + "px" : that.getH());
            }
        }, fnImageOnError = function(oEvent) {
            // set an error image if something went wrong
            var $that = sap.ui.getCore().byId(that.getId());
            var $Preview = sap.ui.getCore().byId(that.getId() + "-preview");

            that.setStatus("Normal");

            if ($that && !$that.hasStyleClass("sapInoWallWIIImageError")) {
                $that.addStyleClass("sapInoWallWIIImageError");
            }
            if ($Preview && !$Preview.hasStyleClass("sapInoWallInvisible")) {
                $Preview.addStyleClass("sapInoWallInvisible");
                $Preview.setSrc("");
            }
        }, sImageStorageId = (/.xsjs\/([0-9]*)$/.exec(sURI) || {})[1];

        // restore image storage id from URL (could also be a property)
        if (sImageStorageId) {
            this._iImageStorageId = parseInt(sImageStorageId, 10);
        }

        // re-rendering, replace it with a DOM manipulation
        this.setProperty("preview", sURI, true);
        if (oOldImage) {
            oOldImage.destroy(true);
        }

        // create new image and override onload event method to adjust our width and height
        oNewImage = new sap.m.Image(this.getId() + "-preview", {
            src : sURI,
            densityAware : false,
            //width : this.getW(),
            //height : this.getTitle() ? parseFloat(this.getH(), 10) - sap.ino.wall.WallItemImage._CAPTION_HEIGHT + "px" : this.getH(),
            press : function() {
                var oParent = this.getParent();
                // if it is a child, the wall is the parent's parent
                if (oParent instanceof sap.ino.wall.WallItemBase) {
                    oParent = oParent.getParent();
                }

                // only open the image when no drag is in progress
                if (!this._bMoving && this.getImage() && !oParent._hasFollowCursorItems()) {
                    if (this.getShowAsIcon()) {
                        this.setFlipped(true);
                    } else {
                        this._showLargeImage();
                    }
                }
            }.bind(this)
        }).addEventDelegate({
            // only density-aware images call onload/onerror in the current implementation but we don't have a
            // high-res picture so we need to register the handlers by ourselves
            onBeforeRendering : function(oEvent) {
                var oImage = oEvent.srcControl, $image = oImage.$();

                // unbind the load and error event handler
                $image.unbind("load", oImage.___onloadproxy);
                $image.unbind("error", oImage.___onloadproxy);
            },
            onAfterRendering : jQuery.proxy(function(oEvent) {
                var oImage = oEvent.srcControl, $image = oImage.$();

                // set an internal pointer inside sap.m.Image
                if (!oImage.___onloadproxy) {
                    oImage.___onloadproxy = jQuery.proxy(oImage.onload, oImage);
                    oImage.___onerrorproxy = jQuery.proxy(oImage.onerror, oImage);
                }
                // bind the load and error event handler
                $image.bind("load", jQuery.proxy(oImage.___onloadproxy, oImage));
                $image.bind("error", jQuery.proxy(oImage.___onerrorproxy, oImage));
            }, oNewImage)
        });
        // we add our custom handlers to do stuff that is currently not possible with sap.m.Image
        oNewImage.onload = fnImageOnload;
        oNewImage.onerror = fnImageOnError;

        this.setAggregation("imagePreview", oNewImage, true);

        if (this._isRendered()) {
            // set the old image dimensions first to remove flickering while new image is loaded
            if (!bUpdateDimensions && !isNaN(parseInt(that.getW(), 10)) && !isNaN(parseInt(that.getH(), 10))) {
                oNewImage.setProperty("width", that.getW(), true);
                oNewImage.setProperty("height", this.getTitle() ? parseFloat(this.getH(), 10) - sap.ino.wall.WallItemImage._CAPTION_HEIGHT + "px" : this.getH(), true);
            }
            this.setStatus("Busy");

            // render the image into the DOM structure without re-rendering the whole item
            oDomRef = this.$().find(".sapInoWallWIIImageWrapper")[0];
            this._renderItemIntoContainer(oDomRef, oNewImage, true, false);

            // inform wall that this item has changed a persistence property
            if (this.getParent()) {
                this.getParent()._notifyItemChanged(this);
            }
        }
        return this;
    };

    sap.ino.wall.WallItemImage.prototype._uploadImage = function(oEvent) {
        var that = this, aFiles = oEvent.getParameter("files"), oFile, sFilename, oFormData, oReader, iStorageId;

        // display an error if user tries to drop a file with IE9
        if (sap.ui.Device.browser.name === "ie" && sap.ui.Device.browser.version < 10 && aFiles === undefined) {
            return;
        }

        // hide drag preview
        jQuery.sap.byId(this.getParent().getId() + "-drag").css("display", "none");

        // reset cursor to normal
        this.$().removeClass("dragCursor");

        if (aFiles.length !== 0) {
            oFile = aFiles[0];
            if (!!oFile.type.match(/image\.*/)) {
                that.setStatus("Busy");
                that.setFlipped(false);
                sap.ino.commons.models.object.Attachment.uploadFile(oFile).done(function(oResponse) {
                    var iStorageId = oResponse.attachmentId;
                    var sFileName = oResponse.fileName;
                    setTimeout(function() {
                        that.setPreview(Configuration.getAttachmentDownloadURL(iStorageId), true);
                        that.setImage(Configuration.getAttachmentDownloadURL(iStorageId));
                        if (!that.getTitle() || that.getTitle() === that._oRB.getText("WALL_ITEMIMAGE_NEW_TEXT")) {
                            that.setTitle(sFileName);
                        }
                        that._iImageStorageId = iStorageId;
                    }, 500);
                }).fail(function(oResponse) {
                    // TODO: Handle error
                });
            }
        }
    };

    /**
     * Hook called when the item has been resized by user interaction
     * 
     * @param {boolean}
     *            bSytemCall true when called by system call and not by user interaction
     * @oaram {float} fDeltaX the amount in px the item has been resized
     * @oaram {float} fDeltaY the amount in px the item has been resized
     * @protected
     */
    sap.ino.wall.WallItemImage.prototype._onResize = function(bSystemCall, fDeltaX, fDeltaY) {
        var iFixHeight;

        /* we currently do not support a real preview => no rebind required */
        /*
         * // schedule preview re-rendering if (!bSystemCall && this._iImageStorageId && this.getStatus() !== "Busy") {
         * clearTimeout(this._iPreviewUpdateTimer); this._iPreviewUpdateTimer = setTimeout(function() { var fW =
         * parseFloat(this.getW(), 10), fH = parseFloat(this.getH(), 10); //
         * this.setPreview(Config.getBackendImageServiceProviderUrl() + // '?action=scalenew&x=' + (fW) + '&y=' +
         * (this.getTitle() ? fH - // sap.ino.wall.WallItemImage._CAPTION_HEIGHT : fH) + '&id=' +
         * this._iImageStorageId); this.setPreview(Configuration.getAttachmentDownloadURL(this._iImageStorageId));
         * }.bind(this), 1000); }
         */

        // back side: flex workaround
        // workaround for no flex support & Safari & IE10
        if (!jQuery.support.hasFlexBoxSupport || sap.ui.Device.browser.safari || sap.ui.Device.browser.internet_explorer && sap.ui.Device.browser.version === 10) {
            // back
            iFixHeight = this.$().find(".back .sapInoWallWIIitleEdit").outerHeight() + 10;
            this.$().find(".back .sapInoWallWIIPreviewEdit").height(this.$().find(".back").height() - iFixHeight);
            this.$().find(".back .sapInoWallDropUpload").height(this.$().find(".back .sapInoWallWIIPreviewEdit").height());
            this.$().find(".back .sapInoWallDropUploadArea").css("height", this.$().find(".back .sapInoWallDropUpload").height() + "px");
        }
        this._adjustTShirtSize();
    };

    /*******************************************************************************************************************
     * overloaded setters to supress rendering and update ui
     ******************************************************************************************************************/

    sap.ino.wall.WallItemImage.prototype.setTitle = function(sTitle, bSuppressNotify) {
        sap.ino.wall.WallItemBase.prototype.setTitle.apply(this, [sTitle, bSuppressNotify]);
        if (sTitle !== this._oRB.getText("WALL_ITEMIMAGE_NEW_TEXT")) {
            this._getInputTitle().setValue(sTitle);
            this._getInputTitle().$().children("input").attr("value", sTitle);
        }
    };

    /**
     * Lazy initialization of control managed in an internal aggregation
     * 
     * @private
     * @returns {sap.m/BusyIndicator} the control
     */

    sap.ino.wall.WallItemImage.prototype._getBusyIndicator = function() {
        var oBusyIndicator = this.getAggregation("_busyIndicator");

        if (!oBusyIndicator) {
            // create control
            oBusyIndicator = new sap.m.BusyIndicator(this.getId() + "-busy").addStyleClass("sapInoWallIndicatorBusy");

            // set hidden aggregation without rerendering
            this.setAggregation("_busyIndicator", oBusyIndicator, true);
        }

        return oBusyIndicator;
    };

    /**
     * Lazy initialization of a control managed in an internal aggregation
     * 
     * @private
     * @returns {sap.ui.core/Control} the control
     */
    sap.ino.wall.WallItemImage.prototype._getDropUpload = function() {
        var oControl = this.getAggregation("_dropUpload");

        if (!oControl) {
            // create control
            oControl = new sap.ino.wall.DropUpload({
                size : "L",
                change : [this._uploadImage, this]
            });

            // set hidden aggregation without rerendering
            this.setAggregation("_dropUpload", oControl, true);
        }

        return oControl;
    };

    /**
     * Lazy initialization of a control managed in an internal aggregation
     * 
     * @private
     * @returns {sap.ui.core/Control} the control
     */
    sap.ino.wall.WallItemImage.prototype._getLightBox = function() {
        var oControl = this.getAggregation("_lightBox");
        if (oControl) {
            this.removeAggregation("_lightBox");
            oControl = null;
        }
        // create control
        oControl = new sap.ino.wall.LightBox({
            image : this.getImage(),
            title : this.getTitle()
        });

        // set hidden aggregation without rerendering
        this.setAggregation("_lightBox", oControl, true);
        return oControl;
    };

    sap.ino.wall.WallItemImage.prototype._getCheckBox = function() {
        var that = this;
        var oControl = this.getAggregation("_checkBox");

        if (!oControl) {
            // create control
            oControl = new sap.m.CheckBox({
                text : this._oRB.getText("WALL_ITEMIMAGE_SHOW_AS_ICON"),
                selected : this.getShowAsIcon(),
                select : function(oEvent) {
                    that.setShowAsIcon(oEvent.getSource().getSelected());
                }
            });

            // set hidden aggregation without rerendering
            this.setAggregation("_checkBox", oControl, true);
        }

        return oControl;
    };

    sap.ino.wall.WallItemImage.prototype._getIcon = function() {
        var oControl = this.getAggregation("_icon");
        var that = this;
        var iSize = 100;
        var sIcon = "sap-icon://picture";
        if (!oControl) {
            // create control
            oControl = new sap.ui.core.Icon({
                src : sIcon,
                size : iSize + "px",
                width : "100%",
                height : "0px",
                decorative : true
            });
            // set hidden aggregation without rerendering
            this.setAggregation("_icon", oControl, true);
        }
        return oControl;
    };

    /**
     * Instantiates a dialog with the large version of the image
     * 
     * @private
     * @returns {sap.ui.core/Control} the control
     */
    sap.ino.wall.WallItemImage.prototype._showLargeImage = function() {
        this._getLightBox().open();
    };

    /*
     * Shows/hides a busy indicator when uploading imaged without rerendering @override
     */
    sap.ino.wall.WallItemImage.prototype.setStatus = function(sStatus) {
        this.setProperty("status", sStatus, true);
        if (this._isRendered()) {
            var $Busy = sap.ui.getCore().byId(this.getId() + "-busy");
            var $Preview = sap.ui.getCore().byId(this.getId() + "-preview");

            if (this.getStatus() === "Busy") {
                if ($Busy) {
                    $Busy.removeStyleClass("sapInoWallInvisible");
                }
                if ($Preview) {
                    $Preview.addStyleClass("sapInoWallImageBusy");
                }
            } else {
                if ($Busy) {
                    $Busy.addStyleClass("sapInoWallInvisible");
                }
                if ($Preview) {
                    $Preview.removeStyleClass("sapInoWallImageBusy");
                }
            }
        }
    };

    sap.ino.wall.WallItemImage.prototype.onAfterRendering = function() {
        if (this._isRendered()) {
            var oFront = this.$().find(".front");
            var oResizeHandle = oFront.find(".sapInoWallWIResizeHandle");
            if (this.getShowAsIcon()) {
                oResizeHandle.addClass("sapInoWallWIResizeHandleHidden");
            } else {
                oResizeHandle.removeClass("sapInoWallWIResizeHandleHidden");
            }
        }
    };

    /**
     * creates a minimalic JSON representation of the item to be stored in the db
     * 
     * @param {string}
     *            sColor color identifier
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemImage.prototype.formatToJSON = function() {
        // call the base object's JSON method
        var oJSON = sap.ino.wall.WallItemBase.prototype.formatToJSON.call(this);
        // add properties of this control
        if (this.getImage()) {
            oJSON.content.image = this.getImage();
            oJSON.content.assignmentId = this.getAssignmentId();
            oJSON.content.preview = this.getPreview();
        }
        oJSON.content.showAsIcon = this.getShowAsIcon();
        // return the final object
        return oJSON;
    };

})();
}; // end of sap/ino/wall/WallItemImage.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallItemImageRenderer') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallItemImageRenderer");

(function() {
    "use strict";

    
    jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

    
    

    /**
     * @class WallItemImage renderer.
     * @static
     */
    sap.ino.wall.WallItemImageRenderer = sap.ui.core.Renderer.extend(sap.ino.wall.WallItemBaseRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be rendered
     */

    sap.ino.wall.WallItemImageRenderer.renderItem = function(oRM, oControl) {
        var oInputTitle = oControl._getInputTitle(), oBusyIndicator = oControl._getBusyIndicator(), oPreview = oControl.getAggregation("imagePreview");
        var oDropUpload = oControl._getDropUpload();
        var oCheckBox = oControl._getCheckBox();

        // start wrapper
        oRM.write("<div class=\"flippable\">");

        /* front panel (view) */

        oRM.write("<div id=" + oControl.getId() + "-front");
        if (!oControl.getShowAsIcon()) {
            oRM.addClass("sapInoWallWII");
        }
        oRM.addClass("gradients");
        oRM.addClass("front");
        oRM.writeClasses();
        oRM.write("style=\"" + (oControl.getW() ? "; width: " + oControl.getW() : "") + (oControl.getH() ? "; height: " + oControl.getH() : "") + "\"");
        oRM.write(">");

        // add busy state to preview
        if (oControl.getStatus() === "Busy" && oPreview) {
            oPreview.addStyleClass("sapInoWallImageBusy");
        }

        // image wrapper
        oRM.write('<div id="' + oControl.getId() + '-imagePreviewWrapper" class="sapInoWallWIIImageWrapper">');

        // link
        // oRM.write("<a " + (oControl.getImage() ? "href=\"" + oControl.getImage() + "\" " : "") + "\">");
        // TODO: put this in onbeforeRendering
        if (!oPreview) {
            sap.ino.wall.util.Logger.warning("Preview image not found");
            oRM.renderControl(oControl._getIcon());
        } else {
            oRM.renderControl(oPreview.addStyleClass("noflip"));
        }

        // link end
        // oRM.write("</a>");

        // wrapper end
        oRM.write("</div>");

        // render a busy indicator
        if (oControl.getStatus() !== "Busy") {
            oBusyIndicator.addStyleClass("sapInoWallInvisible");
        }
        oRM.renderControl(oBusyIndicator);

        if (!sap.ino.wall.config.Config.getDebugPositioning()) {
            // title
            oRM.write("<div");
            oRM.addClass("sapInoWallWITitle sapInoWallWITitleText sapInoWallWIITitle");
            if (oControl.getShowAsIcon()) {
                oRM.addClass("sapInoWallWIITitleIcon");
            }
            oRM.writeClasses();
            oRM.write(">");
            oRM.writeEscaped(oControl.getTitle());
            oRM.write("</div>");
        } else {
            oRM.write("front");
        }

        // resize handle
        this.renderResizeHandler(oRM, oControl);

        // end front side
        oRM.write("</div>");

        /* back panel (edit) */

        oRM.write("<div id=" + oControl.getId() + "-back");
        oRM.addClass("sapInoWallWII");
        oRM.addClass("gradients");
        oRM.addClass("back");
        oRM.writeClasses();
        oRM.write("style=\"" + (oControl.getW() ? "; width: " + oControl.getW() : "") + (oControl.getH() ? "; height: " + oControl.getH() : "") + "\"");
        oRM.write(">");

        if (!sap.ino.wall.config.Config.getDebugPositioning()) {
            // icon drop / upload area
            oRM.write("<div class=\"sapInoWallWIIPreviewEdit\">");
            oRM.renderControl(oDropUpload);
            oRM.write("</div>");
            // title
            oRM.write("<div class=\"sapInoWallWIIitleEdit\">");
            oRM.renderControl(oInputTitle.setProperty("placeholder", oControl._oRB.getText("WALL_ITEMHEADLINE_PLACEHOLDER_TITLE"), true));
            oRM.write("</div>");
            // check box
            oRM.write("<div class=\"sapInoWallWIShowAsIcon\">");
            oRM.renderControl(oCheckBox);
            oRM.write("</div>");

        } else {
            oRM.write("back");
        }

        // resize handle
        this.renderResizeHandler(oRM, oControl);

        // end back side
        oRM.write("</div>");

        // back button
        oRM.renderControl(oControl._getButtonFlip());

        // end wrapper
        oRM.write("</div>");
    };

})();
}; // end of sap/ino/wall/WallItemImageRenderer.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallItemLine') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallItemLine");

(function() {
    "use strict";

    
    
    
    

    /**
     * Constructor for a new WallItemLine.
     * 
     * Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and
     * associated objects as well as event handlers.
     * 
     * If the name of a setting is ambiguous (e.g. a property has the same name as an event), then the framework assumes
     * property, aggregation, association, event in that order. To override this automatic resolution, one of the
     * prefixes "aggregation:", "association:" or "event:" can be added to the name of the setting (such a prefixed name
     * must be enclosed in single or double quotes).
     * 
     * The supported settings are:
     * <ul>
     * <li>Properties
     * <ul>
     * <li>{@link #getOrientation orientation} : string (default: 'Horizontal')</li>
     * <li>{@link #getThickness thickness} : int (default: 4)</li>
     * <li>{@link #getStyle style} : string (default: 'Solid')</li>
     * <li>{@link #getColor color} : string (default: '#888888')</li>
     * </ul>
     * </li>
     * <li>Aggregations
     * <ul>
     * </ul>
     * </li>
     * <li>Associations
     * <ul>
     * </ul>
     * </li>
     * <li>Events
     * <ul>
     * </ul>
     * </li>
     * </ul>
     * 
     * 
     * In addition, all settings applicable to the base type
     * {@link sap.ino.wall.WallItemBase#constructor sap.ino.wall.WallItemBase} can be used as well.
     * 
     * @param {string}
     *            [sId] id for the new control, generated automatically if no id is given
     * @param {object}
     *            [mSettings] initial settings for the new control
     * 
     * @class Add your documentation for the WallItemLine
     * @extends sap.ino.wall.WallItemBase
     * @version 1.16.4
     * 
     * @constructor
     * @public
     * @name sap.ino.wall.WallItemLine
     * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
     */
    sap.ino.wall.WallItemBase.extend("sap.ino.wall.WallItemLine", {
        metadata : {
            properties : {
                "orientation" : {
                    type : "string",
                    group : "Misc",
                    defaultValue : 'HORIZONTAL'
                },
                "thickness" : {
                    type : "int",
                    group : "Misc",
                    defaultValue : 4
                },
                "style" : {
                    type : "string",
                    group : "Misc",
                    defaultValue : 'SOLID'
                },
                "color" : {
                    type : "string",
                    group : "Misc",
                    defaultValue : '#888888'
                }
            },
            aggregations : {
                "_selectOrientation" : {
                    type : "sap.m.Select",
                    multiple : false,
                    visibility : "hidden"
                },
                "_selectThickness" : {
                    type : "sap.m.Select",
                    multiple : false,
                    visibility : "hidden"
                },
                "_inputColor" : {
                    type : "sap.m.Input",
                    multiple : false,
                    visibility : "hidden"
                },
                "_buttonOrientationH" : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                },
                "_buttonOrientationV" : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                },
                "_buttonStyleSolid" : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                },
                "_buttonStyleDashed" : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                },
                "_buttonStyleDotted" : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                },
                "_buttonThickness1px" : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                },
                "_buttonThickness3px" : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                },
                "_buttonThickness5px" : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                },
                "_buttonColorSelector" : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                },
                "_colorPicker" : {
                    type : "sap.ino.wall.ColorPicker",
                    multiple : false,
                    visibility : "hidden"
                }
            }
        }
    });

    /**
     * Creates a new subclass of class sap.ino.wall.WallItemLine with name <code>sClassName</code> and enriches it
     * with the information contained in <code>oClassInfo</code>.
     * 
     * <code>oClassInfo</code> might contain the same kind of informations as described in
     * {@link sap.ui.core.Element.extend Element.extend}.
     * 
     * @param {string}
     *            sClassName name of the class to be created
     * @param {object}
     *            [oClassInfo] object literal with informations about the class
     * @param {function}
     *            [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to
     *            sap.ui.core.ElementMetadata.
     * @return {function} the created class / constructor function
     * @public
     * @static
     * @name sap.ino.wall.WallItemLine.extend
     * @function
     */

    /**
     * Getter for property <code>orientation</code>. The orientation of the line. See type definitions for more
     * details.
     * 
     * Default value is <code>Horizontal</code>
     * 
     * @return {string} the value of property <code>orientation</code>
     * @public
     * @name sap.ino.wall.WallItemLine#getOrientation
     * @function
     */

    /**
     * Setter for property <code>orientation</code>.
     * 
     * Default value is <code>Horizontal</code>
     * 
     * @param {string}
     *            sOrientation new value for property <code>orientation</code>
     * @return {sap.ino.wall.WallItemLine} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemLine#setOrientation
     * @function
     */

    /**
     * Getter for property <code>thickness</code>. The thickness of the line
     * 
     * Default value is <code>4</code>
     * 
     * @return {int} the value of property <code>thickness</code>
     * @public
     * @name sap.ino.wall.WallItemLine#getThickness
     * @function
     */

    /**
     * Setter for property <code>thickness</code>.
     * 
     * Default value is <code>4</code>
     * 
     * @param {int}
     *            iThickness new value for property <code>thickness</code>
     * @return {sap.ino.wall.WallItemLine} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemLine#setThickness
     * @function
     */

    /**
     * Getter for property <code>style</code>. The style of the line
     * 
     * Default value is <code>Solid</code>
     * 
     * @return {string} the value of property <code>style</code>
     * @public
     * @name sap.ino.wall.WallItemLine#getStyle
     * @function
     */

    /**
     * Setter for property <code>style</code>.
     * 
     * Default value is <code>Solid</code>
     * 
     * @param {string}
     *            sStyle new value for property <code>style</code>
     * @return {sap.ino.wall.WallItemLine} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemLine#setStyle
     * @function
     */

    /**
     * Getter for property <code>color</code>. The color of the line
     * 
     * Default value is <code>#888888</code>
     * 
     * @return {string} the value of property <code>color</code>
     * @public
     * @name sap.ino.wall.WallItemLine#getColor
     * @function
     */

    /**
     * Setter for property <code>color</code>.
     * 
     * Default value is <code>#888888</code>
     * 
     * @param {string}
     *            sColor new value for property <code>color</code>
     * @return {sap.ino.wall.WallItemLine} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemLine#setColor
     * @function
     */

    sap.ino.wall.WallItemLine.prototype.init = function() {
        sap.ino.wall.WallItemBase.prototype.init.call(this);

        this.setTitle(this._oRB.getText("WALL_ITEMLINE_STATUSMSG_ORIENTATION_HORIZONTAL"), true);
    };

    sap.ino.wall.WallItemLine.prototype.onAfterRendering = function() {
        var fLuminance = sap.ino.wall.util.Helper.getColorLuminance(this.getColor()), oButtonColorSelector = sap.ui.getCore().byId(this.getId() + "-buttonColorSelector");

        // call base class method
        sap.ino.wall.WallItemBase.prototype.onAfterRendering.apply(this, arguments);
        // update background color of button
        if (oButtonColorSelector) {
            oButtonColorSelector.$().find(".sapMBtnInner").css("background-color", this.getColor());
        }
        // update color picker icon based on luminosity of the color
        if (fLuminance <= 0.6) {
            this._getButtonColorSelector().addStyleClass("sapInoWallWILineColorSelectorButtonBright").removeStyleClass("sapInoWallWILineColorSelectorButtonNormal");
        } else {
            this._getButtonColorSelector().addStyleClass("sapInoWallWILineColorSelectorButtonNormal").removeStyleClass("sapInoWallWILineColorSelectorButtonBright");
        }
    };

    // TODO: document this (override of setFlipped method)
    var fnWallItemBasebaseSetFlipped = sap.ino.wall.WallItemBase.prototype.setFlipped;
    sap.ino.wall.WallItemLine.prototype.setFlipped = function(bFlipped) {
        var oViewPoint;

        if (bFlipped && this._isRendered()) {
            oViewPoint = this.getParent().getViewPoint();
            if (this.getOrientation() === "HORIZONTAL") {
                // edit bar should be 512px long (10 buttons x 48px + 4 spacer x8px)
                this.$().find(".sapInoWallWILineEditButtons").css("left", oViewPoint.getX() - this.$().find(".sapInoWallWILineEditButtons").width() / 2).css("top", -33 - this.getThickness() / 2);
            } else {
                this.$().find(".sapInoWallWILineEditButtons").css("left", -10 /*- this.getThickness()/2*/).css("top", oViewPoint.getY() - this.$().find(".sapInoWallWILineEditButtons").height() / 2);
            }
        }

        // close color selector if it is initialized
        if (this.getAggregation("_colorPicker")) {
            this.getAggregation("_colorPicker").close();
        }

        fnWallItemBasebaseSetFlipped.apply(this, arguments);
    };

    /**
     * changes the orientation of a line without re-rendering (switches x/y coordinates)
     * 
     * @override
     * @param (string)
     *            sOrientation the new value
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemLine.prototype.setOrientation = function(sOrientation, bSuppressNotify) {
        var sOldOrientation = this.getOrientation(), fZoomModifier;

        this.setProperty("orientation", sOrientation, true);
        if (this._isRendered() && sOldOrientation !== sOrientation) {
            fZoomModifier = 100 / this.getParent().getZoom();
            if (sOldOrientation === "HORIZONTAL") {
                if (this._touchStartMousePositionX) {
                    if (!sap.ino.wall.config.Config.getZoomCapable()) {
                        this.setX(Math.abs((this.getParent().$("inner").offset().left - this._touchStartMousePositionX) * fZoomModifier) + "px");
                    } else {
                        this.setX(Math.abs(this.getParent().$("inner").offset().left - this._touchStartMousePositionX * fZoomModifier) + "px");
                    }
                } else {
                    this.setX(this.getY());
                }
                this.setY("0px");
                if (this._isRendered()) {
                    this.$().removeClass("sapInoWallWILineHORIZONTAL").addClass("sapInoWallWILineVERTICAL");
                    this.$().find("#" + this.getId() + "-front").removeClass("sapInoWallWILineHORIZONTAL").addClass("sapInoWallWILineVERTICAL");
                    this.$().find("#" + this.getId() + "-back").removeClass("sapInoWallWILineHORIZONTAL").addClass("sapInoWallWILineVERTICAL");
                    this.$().find(".sapInoWallWILineFirst").css("border-right-style", this.getStyle().toLowerCase());
                    this.$().find(".sapInoWallWILineFirst").css("border-bottom-style", "none");
                    
                    var sDim = this.$().find(".sapInoWallWILineFirst").css("height");
                    this.$().find(".sapInoWallWILineFirst").css("height", "");
                    this.$().find(".sapInoWallWILineFirst").css("width", sDim);
                    this.$().find(".sapInoWallWILineSecond").css("height", "");
                    this.$().find(".sapInoWallWILineSecond").css("width", sDim);    
                }
            } else if (sOldOrientation === "VERTICAL") {
                if (this._touchStartMousePositionY) {
                    if (!sap.ino.wall.config.Config.getZoomCapable()) {
                        this.setY(Math.abs((this.getParent().$("inner").offset().top - this._touchStartMousePositionY) * fZoomModifier) + "px");
                    } else {
                        this.setY(Math.abs(this.getParent().$("inner").offset().top - this._touchStartMousePositionY * fZoomModifier) + "px");
                    }
                } else {
                    this.setY(this.getX());
                }
                this.setX("0px");
                if (this._isRendered()) {
                    this.$().removeClass("sapInoWallWILineVERTICAL").addClass("sapInoWallWILineHORIZONTAL");
                    this.$().find("#" + this.getId() + "-front").removeClass("sapInoWallWILineVERTICAL").addClass("sapInoWallWILineHORIZONTAL");
                    this.$().find("#" + this.getId() + "-back").removeClass("sapInoWallWILineVERTICAL").addClass("sapInoWallWILineHORIZONTAL");
                    this.$().find(".sapInoWallWILineFirst").css("border-right-style", "none");
                    this.$().find(".sapInoWallWILineFirst").css("border-bottom-style", this.getStyle().toLowerCase());
                    
                    var sDim = this.$().find(".sapInoWallWILineFirst").css("width");
                    this.$().find(".sapInoWallWILineFirst").css("width", "");
                    this.$().find(".sapInoWallWILineFirst").css("height", sDim);
                    this.$().find(".sapInoWallWILineSecond").css("width", "");
                    this.$().find(".sapInoWallWILineSecond").css("height", sDim);
                }
            }
            // somehow the line flips back to front after the setX/setY (by setting left or top css attribute)
            // it keeps the flipped css class but shows the front side, thus it needs to be flipped again
            if (this.$().hasClass("flipped")) {
                this.setFlipped(true);
            }
            // set title to translated text for frontend: Horizontal line / Vertical line
            this.setTitle(this._oRB.getText("WALL_ITEMLINE_STATUSMSG_ORIENTATION_" + sOrientation.toUpperCase()), true);

            // update ui (in case it was flipped by moving the line)
            sap.ui.getCore().byId(this.getId() + "-buttonOrientation" + (sOrientation === "HORIZONTAL" ? "V" : "H")).setPressed(false);
            sap.ui.getCore().byId(this.getId() + "-buttonOrientation" + (sOrientation === "HORIZONTAL" ? "H" : "V")).setPressed(true);
        }

        // inform wall that this item has changed a persistence property
        if (this.getParent() && !bSuppressNotify) {
            this.getParent()._notifyItemChanged(this);
        }
    };

    /**
     * changes the style of a line without re-rendering (switches x/y coordinates)
     * 
     * @override
     * @param (string)
     *            sOrientation the new value
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemLine.prototype.setStyle = function(sStyle, bSuppressNotify) {
        this.setProperty("style", sStyle, true);
        if (this._isRendered()) {
            this.$().find(".sapInoWallWILineFirst").css("border-" + (this.getOrientation() === "HORIZONTAL" ? "bottom" : "right") + "-style", sStyle.toLowerCase());
        }
        // inform wall that this item has changed a persistence property
        if (this.getParent() && !bSuppressNotify) {
            this.getParent()._notifyItemChanged(this);
        }
    };

    /**
     * changes the thickness of a line without re-rendering
     * 
     * @override
     * @param (int)
     *            iThickness the new value
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemLine.prototype.setThickness = function(iThickness, bSuppressNotify) {
        var iOldThickness = this.getThickness(), $lineEditButtons = this.$().find(".sapInoWallWILineEditButtons");

        this.setProperty("thickness", iThickness, true);
        if (this._isRendered() && iOldThickness !== iThickness) {
            var iDim = 13 - parseInt(iThickness / 2);
            var sDim = (this.getOrientation() === "VERTICAL") ? "width" : "height";
            
            this.$().find(".sapInoWallWILineFirst").css("border-width", iThickness);
            this.$().find(".sapInoWallWILineFirst").css(sDim, iDim);
            this.$().find(".sapInoWallWILineSecond").css(sDim, iDim);            
            /*
            if (this.getOrientation() === "Horizontal") {
                $lineEditButtons.css("top", (parseInt($lineEditButtons.css("top"), 10) + (iOldThickness - iThickness) / 2) + "px");
            } else {
                $lineEditButtons.css("left", (parseInt($lineEditButtons.css("left"), 10) - (iOldThickness - iThickness) / 2) + "px");
            }
            */
        }
        // inform wall that this item has changed a persistence property
        if (this.getParent() && !bSuppressNotify) {
            this.getParent()._notifyItemChanged(this);
        }
    };

    /**
     * changes the color of a line without re-rendering
     * 
     * @override
     * @param (string)
     *            sColor the new value
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemLine.prototype.setColor = function(sColor, bSuppressNotify) {
        var fLuminance;
        var oButtonColorSelector = this._getButtonColorSelector();

        this.setProperty("color", sColor, true);
        if (this._isRendered()) {
            // update line color
            this.$().find(".sapInoWallWILineFirst").css("border-color", sColor);
            // update button color
            if (oButtonColorSelector) {
                sap.ui.getCore().byId(this.getId() + "-buttonColorSelector").$().find(".sapMBtnInner").css("background-color", this.getColor());
            }
            // update color picker icon
            fLuminance = sap.ino.wall.util.Helper.getColorLuminance(sColor);
            // switch picker icon based on luminosity of the color
            if (fLuminance <= 0.6) {
                this._getButtonColorSelector().addStyleClass("sapInoWallWILineColorSelectorButtonBright").removeStyleClass("sapInoWallWILineColorSelectorButtonNormal");
            } else {
                this._getButtonColorSelector().addStyleClass("sapInoWallWILineColorSelectorButtonNormal").removeStyleClass("sapInoWallWILineColorSelectorButtonBright");
            }
        }
        // inform wall that this item has changed a persistence property
        if (this.getParent() && !bSuppressNotify) {
            this.getParent()._notifyItemChanged(this);
        }
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Button} the button
     */
    sap.ino.wall.WallItemLine.prototype._getButtonOrientationH = function() {
        var that = this, oControl = this.getAggregation("_buttonOrientationH");

        if (!oControl) {
            // create control
            oControl = new sap.m.ToggleButton(this.getId() + "-buttonOrientationH", {
                tooltip : this._oRB.getText("WALL_ITEMLINE_STATUSMSG_ORIENTATION_HORIZONTAL"),
                press : function(oEvent) {
                    that.setOrientation("HORIZONTAL");
                    sap.ui.getCore().byId(that.getId() + "-buttonOrientationH").setPressed(true);
                    sap.ui.getCore().byId(that.getId() + "-buttonOrientationV").setPressed(false);
                }
            }).addStyleClass("noflip").addStyleClass("sapInoWallWILineButton").addStyleClass("sapInoWallWILineButtonHORIZONTAL");

            // set initial state
            if (this.getOrientation() === "HORIZONTAL") {
                oControl.setPressed(true);
            }

            // set hidden aggregation without rerendering
            this.setAggregation("_buttonOrientationH", oControl, true);
        }

        return oControl;
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Button} the button
     */
    sap.ino.wall.WallItemLine.prototype._getButtonOrientationV = function() {
        var that = this, oControl = this.getAggregation("_buttonOrientationV");

        if (!oControl) {
            // create control
            oControl = new sap.m.ToggleButton(this.getId() + "-buttonOrientationV", {
                tooltip : this._oRB.getText("WALL_ITEMLINE_STATUSMSG_ORIENTATION_VERTICAL"),
                press : function(oEvent) {
                    that.setOrientation("VERTICAL");
                    sap.ui.getCore().byId(that.getId() + "-buttonOrientationH").setPressed(false);
                    sap.ui.getCore().byId(that.getId() + "-buttonOrientationV").setPressed(true);
                }
            }).addStyleClass("noflip").addStyleClass("sapInoWallWILineButton").addStyleClass("sapInoWallWILineButtonEnd").addStyleClass("sapInoWallWILineButtonVERTICAL");

            // set initial state
            if (this.getOrientation() === "VERTICAL") {
                oControl.setPressed(true);
            }

            // set hidden aggregation without rerendering
            this.setAggregation("_buttonOrientationV", oControl, true);
        }

        return oControl;
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Button} the button
     */
    sap.ino.wall.WallItemLine.prototype._getButtonStyleSolid = function() {
        var that = this, oControl = this.getAggregation("_buttonStyleSolid");

        if (!oControl) {
            // create control
            oControl = new sap.m.ToggleButton(this.getId() + "-buttonStyleSolid", {
                tooltip : this._oRB.getText("WALL_ITEMLINE_STATUSMSG_STYLE_SOLID"),
                press : function(oEvent) {
                    that.setStyle("SOLID");
                    sap.ui.getCore().byId(that.getId() + "-buttonStyleSolid").setPressed(true);
                    sap.ui.getCore().byId(that.getId() + "-buttonStyleDashed").setPressed(false);
                    sap.ui.getCore().byId(that.getId() + "-buttonStyleDotted").setPressed(false);
                }
            }).addStyleClass("noflip").addStyleClass("sapInoWallWILineButton").addStyleClass("sapInoWallWILineButtonSOLID");

            // set initial state
            if (this.getStyle() === "SOLID") {
                oControl.setPressed(true);
            }

            // set hidden aggregation without rerendering
            this.setAggregation("_buttonStyleSolid", oControl, true);
        }

        return oControl;
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Button} the button
     */
    sap.ino.wall.WallItemLine.prototype._getButtonStyleDashed = function() {
        var that = this, oControl = this.getAggregation("_buttonStyleDashed");

        if (!oControl) {
            // create control
            oControl = new sap.m.ToggleButton(this.getId() + "-buttonStyleDashed", {
                tooltip : this._oRB.getText("WALL_ITEMLINE_STATUSMSG_STYLE_DASHED"),
                press : function(oEvent) {
                    that.setStyle("DASHED");
                    sap.ui.getCore().byId(that.getId() + "-buttonStyleSolid").setPressed(false);
                    sap.ui.getCore().byId(that.getId() + "-buttonStyleDashed").setPressed(true);
                    sap.ui.getCore().byId(that.getId() + "-buttonStyleDotted").setPressed(false);
                }
            }).addStyleClass("noflip").addStyleClass("sapInoWallWILineButton").addStyleClass("sapInoWallWILineButtonDASHED");

            // set initial state
            if (this.getStyle() === "DASHED") {
                oControl.setPressed(true);
            }

            // set hidden aggregation without rerendering
            this.setAggregation("_buttonStyleDashed", oControl, true);
        }

        return oControl;
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Button} the button
     */
    sap.ino.wall.WallItemLine.prototype._getButtonStyleDotted = function() {
        var that = this, oControl = this.getAggregation("_buttonStyleDotted");

        if (!oControl) {
            // create control
            oControl = new sap.m.ToggleButton(this.getId() + "-buttonStyleDotted", {
                tooltip : this._oRB.getText("WALL_ITEMLINE_STATUSMSG_STYLE_DOTTED"),
                press : function(oEvent) {
                    that.setStyle("DOTTED");
                    sap.ui.getCore().byId(that.getId() + "-buttonStyleSolid").setPressed(false);
                    sap.ui.getCore().byId(that.getId() + "-buttonStyleDashed").setPressed(false);
                    sap.ui.getCore().byId(that.getId() + "-buttonStyleDotted").setPressed(true);
                }
            }).addStyleClass("noflip").addStyleClass("sapInoWallWILineButton").addStyleClass("sapInoWallWILineButtonEnd").addStyleClass("sapInoWallWILineButtonDOTTED");

            // set initial state
            if (this.getStyle() === "DOTTED") {
                oControl.setPressed(true);
            }

            // set hidden aggregation without rerendering
            this.setAggregation("_buttonStyleDotted", oControl, true);
        }

        return oControl;
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Button} the button
     */
    sap.ino.wall.WallItemLine.prototype._getButtonThickness1px = function() {
        var that = this, oControl = this.getAggregation("_buttonThickness1px");

        if (!oControl) {
            // create control
            oControl = new sap.m.ToggleButton(this.getId() + "-buttonThickness1px", {
                tooltip : this._oRB.getText("WALL_ITEMLINE_STATUSMSG_THICKNESS_1"),
                press : function(oEvent) {
                    that.setThickness(2);
                    sap.ui.getCore().byId(that.getId() + "-buttonThickness1px").setPressed(true);
                    sap.ui.getCore().byId(that.getId() + "-buttonThickness3px").setPressed(false);
                    sap.ui.getCore().byId(that.getId() + "-buttonThickness5px").setPressed(false);
                }
            }).addStyleClass("noflip").addStyleClass("sapInoWallWILineButton").addStyleClass("sapInoWallWILineButtonThin");

            // set initial state
            if (this.getThickness() === 2) {
                oControl.setPressed(true);
            }

            // set hidden aggregation without rerendering
            this.setAggregation("_buttonThickness1px", oControl, true);
        }

        return oControl;
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Button} the button
     */
    sap.ino.wall.WallItemLine.prototype._getButtonThickness3px = function() {
        var that = this, oControl = this.getAggregation("_buttonThickness3px");

        if (!oControl) {
            // create control
            oControl = new sap.m.ToggleButton(this.getId() + "-buttonThickness3px", {
                tooltip : this._oRB.getText("WALL_ITEMLINE_STATUSMSG_THICKNESS_3"),
                press : function(oEvent) {
                    that.setThickness(4);
                    sap.ui.getCore().byId(that.getId() + "-buttonThickness1px").setPressed(false);
                    sap.ui.getCore().byId(that.getId() + "-buttonThickness3px").setPressed(true);
                    sap.ui.getCore().byId(that.getId() + "-buttonThickness5px").setPressed(false);
                }
            }).addStyleClass("noflip").addStyleClass("sapInoWallWILineButton").addStyleClass("sapInoWallWILineButtonMedium");

            // set initial state
            if (this.getThickness() === 4) {
                oControl.setPressed(true);
            }

            // set hidden aggregation without rerendering
            this.setAggregation("_buttonThickness3px", oControl, true);
        }

        return oControl;
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Button} the button
     */
    sap.ino.wall.WallItemLine.prototype._getButtonThickness5px = function() {
        var that = this, oControl = this.getAggregation("_buttonThickness5px");

        if (!oControl) {
            // create control
            oControl = new sap.m.ToggleButton(this.getId() + "-buttonThickness5px", {
                tooltip : this._oRB.getText("WALL_ITEMLINE_STATUSMSG_THICKNESS_5"),
                press : function(oEvent) {
                    that.setThickness(6);
                    sap.ui.getCore().byId(that.getId() + "-buttonThickness1px").setPressed(false);
                    sap.ui.getCore().byId(that.getId() + "-buttonThickness3px").setPressed(false);
                    sap.ui.getCore().byId(that.getId() + "-buttonThickness5px").setPressed(true);
                }
            }).addStyleClass("noflip").addStyleClass("sapInoWallWILineButton").addStyleClass("sapInoWallWILineButtonEnd").addStyleClass("sapInoWallWILineButtonThick");

            // set initial state
            if (this.getThickness() === 6) {
                oControl.setPressed(true);
            }

            // set hidden aggregation without rerendering
            this.setAggregation("_buttonThickness5px", oControl, true);
        }

        return oControl;
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Button} the button
     */
    sap.ino.wall.WallItemLine.prototype._getColorPicker = function() {
        var that = this, oControl = this.getAggregation("_colorPicker");

        if (!oControl) {
            // create control
            oControl = new sap.ino.wall.ColorPicker(this.getId() + "-colorPicker", {
                color : this.getColor(),
                change : function(oEvent) {
                    that.setColor(oEvent.getParameter("color"));
                }
            });
            
            // do not set during initialiting colorpicker => bug w/ setting the color to the colorpicker
            oControl.setPlacement(sap.m.PlacementType.Vertical);

            // set hidden aggregation without rerendering
            this.setAggregation("_colorPicker", oControl, true);
        }

        return oControl;
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Button} the button
     */
    sap.ino.wall.WallItemLine.prototype._getButtonColorSelector = function() {
        var that = this, oControl = this.getAggregation("_buttonColorSelector");

        if (!oControl) {
            // create control
            oControl = new sap.m.Button(this.getId() + "-buttonColorSelector", {
                tooltip : this._oRB.getText("WALL_ITEMLINE_STATUSMSG_COLOR_SELECT"),
                press : function(oEvent) {
                    var oColorPicker = that._getColorPicker();

                    // set placement orthogonal to line orientation
                    oColorPicker.setPlacement(that.getOrientation() === "HORIZONTAL" ? sap.m.PlacementType.Vertical : sap.m.PlacementType.Horizontal);

                    if (oColorPicker.isOpen()) {
                        oColorPicker.close();
                    } else {
                        oColorPicker.openBy(oControl, 40, 40);
                    }
                },
                icon : "sap-icon://palette"
            }).addStyleClass("noflip").addStyleClass("sapInoWallWILineColorSelectorButton").addStyleClass("sapInoWallWILineButton").addStyleClass("sapInoWallWILineButtonEnd").addStyleClass("sapInoWallWILineColorSelectorButtonNormal");

            // set hidden aggregation without rerendering
            this.setAggregation("_buttonColorSelector", oControl, true);
        }

        return oControl;
    };

    /**
     * creates a minimalic JSON representation of the item to be stored in the db
     * 
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemLine.prototype.formatToJSON = function() {
        // call the base object's JSON method
        var oJSON = sap.ino.wall.WallItemBase.prototype.formatToJSON.call(this);
        // add properties of this control
        oJSON.orientation = this.getOrientation();
        oJSON.thickness = this.getThickness();
        oJSON.style = this.getStyle();
        oJSON.color = this.getColor();
        // return the final object
        return oJSON;
    };
})();
}; // end of sap/ino/wall/WallItemLine.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallItemLineRenderer') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallItemLineRenderer");

(function() {
    "use strict";

    
    jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

    

    /**
     * @class WallItemText renderer.
     * @static
     */
    sap.ino.wall.WallItemLineRenderer = sap.ui.core.Renderer.extend(sap.ino.wall.WallItemBaseRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRM the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be rendered
     */
    sap.ino.wall.WallItemLineRenderer.render = function(oRM, oControl) {
        // write outer wall item div
        oRM.write("<div");
        oRM.writeControlData(oControl);
        oRM.writeAttribute("tabindex", "-1"); // wall handles the tabchain
        oRM.addClass("sapInoWallWIB");
        oRM.addClass("sapInoWallWILine" + oControl.getOrientation());// modification, we do this already on the base
                                                                    // class (to shrink the container size)
        if (oControl.getFlipped()) {
            oRM.addClass("flipped");
        }
        oRM.writeClasses();
        // TODO zooming, measurements
        oRM.writeAttribute("style", "left: " + (oControl.getOrientation() === "HORIZONTAL" ? "0px" : oControl.getX()) + "; top: " + (oControl.getOrientation() === "HORIZONTAL" ? oControl.getY() : "0px") + "; z-index:" + oControl.getDepth());
        oRM.write(">");

        // callback to inherited control's method
        if (this.renderItem) {
            this.renderItem(oRM, oControl);
        }

        // show bounding boxes for collision detection
        // TODO: use real front containers width and height here
        if (sap.ino.wall.config.Config.getDebugPositioning()) {
            oRM.write('<div class="sapInoWallWIBIntersectionBox"></div>');
            oRM.write('<div class="sapInoWallWIBNeighbourBox" style="padding: ' + sap.ino.wall.config.Config.getWallCollisionThreshold() + 'px; left: -' + sap.ino.wall.config.Config.getWallCollisionThreshold() + 'px; top: -' + sap.ino.wall.config.Config.getWallCollisionThreshold() + 'px"></div>');
        }

        oRM.write("</div>");
    };

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be rendered
     */

    sap.ino.wall.WallItemLineRenderer.renderItem = function(oRM, oControl) {
        var sId = oControl.getId(), sBorderStyle = oControl.getStyle();
        var iDim = 13 - parseInt(oControl.getThickness() / 2);
        var sDim = (oControl.getOrientation() === "VERTICAL") ? "width" : "height";
                
        // start wrapper
        oRM.write("<div class=\"flippable\">");

        /* front panel (view) */

        oRM.write("<div id=" + oControl.getId() + "-front");
        oRM.addClass("sapInoWallWILine");
        oRM.addClass("sapInoWallWILine" + oControl.getOrientation());
        oRM.addClass("sapInoWallWILine" + sBorderStyle);
        oRM.addClass("front");
        oRM.writeClasses();
        oRM.write(">");

        if (!sap.ino.wall.config.Config.getDebugPositioning()) {
            // text
            oRM.write("<div class=\"sapInoWallWILineFirst\" style=\"" + sDim + ": " + iDim + "px; border-width: ");
            oRM.writeEscaped(oControl.getThickness().toString());
            oRM.write("px; border-color: ");
            oRM.writeEscaped(oControl.getColor());
            oRM.write("; border-" + (oControl.getOrientation() === "HORIZONTAL" ? "bottom" : "right") + "-style: ");
            oRM.writeEscaped(sBorderStyle.toLowerCase());
            oRM.write("\">");
            oRM.write("</div>");
            oRM.write("<div class=\"sapInoWallWILineSecond\" style=\"" + sDim + ": " + iDim + "px;\">");
            oRM.write("</div>");
        } else {
            oRM.write("front");
        }

        oRM.write("</div>");

        /* back panel (edit) */

        oRM.write("<div id=" + oControl.getId() + "-back");
        oRM.addClass("sapInoWallWILine");
        oRM.addClass("sapInoWallWILine" + oControl.getOrientation());
        oRM.addClass("sapInoWallWILine" + sBorderStyle);
        oRM.addClass("back");
        oRM.writeClasses();
        oRM.write(">");

        if (!sap.ino.wall.config.Config.getDebugPositioning()) {
            // text
            oRM.write("<div class=\"sapInoWallWILineFirst\" style=\"" + sDim + ": " + iDim + "px; border-width: ");
            oRM.writeEscaped(oControl.getThickness().toString());
            oRM.write("px; border-color: ");
            oRM.writeEscaped(oControl.getColor());
            oRM.write("; border-" + (oControl.getOrientation() === "HORIZONTAL" ? "bottom" : "right") + "-style: ");
            oRM.writeEscaped(sBorderStyle.toLowerCase());
            oRM.write("\">");
            oRM.write("</div>");
            oRM.write("<div class=\"sapInoWallWILineSecond\" style=\"" + sDim + ": " + iDim + "px;\">");
            oRM.write("</div>");
            // edit buttons (keep style)
            var $Buttons = oControl.$().find(".sapInoWallWILineEditButtons");
            var sStyle = "";
            if ($Buttons) {
                sStyle = $Buttons.attr("style");
            }
            oRM.write("<div id=\"" + sId + "-editButtons\" style=\"" + sStyle + "\" class=\"sapInoWallWILineEditButtons\">");
            // orientation selector
            oRM.renderControl(oControl._getButtonOrientationH());
            oRM.renderControl(oControl._getButtonOrientationV());
            // type selector
            oRM.renderControl(oControl._getButtonStyleSolid());
            oRM.renderControl(oControl._getButtonStyleDashed());
            oRM.renderControl(oControl._getButtonStyleDotted());
            // thickness selector
            oRM.renderControl(oControl._getButtonThickness1px());
            oRM.renderControl(oControl._getButtonThickness3px());
            oRM.renderControl(oControl._getButtonThickness5px());
            // color selector
            oRM.renderControl(oControl._getButtonColorSelector());
            // back button (is not mirrored on line item, so we have to use the inverse icon to stay in sync)
            oRM.renderControl(oControl._getButtonFlip().setIcon("sap-icon://undo").removeStyleClass("sapInoWallWIFlipBackButton").addStyleClass("sapInoWallWILineButton"));
            oRM.write("</div>");
        } else {
            oRM.write("front");
        }
        oRM.write("</div>");

        // end wrapper
        oRM.write("</div>");
    };

})();
}; // end of sap/ino/wall/WallItemLineRenderer.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallItemLink') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallItemLink");

(function() {
    "use strict";

    
    
    

    /**
     * Constructor for a new WallItemLink.
     * 
     * Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and
     * associated objects as well as event handlers.
     * 
     * If the name of a setting is ambiguous (e.g. a property has the same name as an event), then the framework assumes
     * property, aggregation, association, event in that order. To override this automatic resolution, one of the
     * prefixes "aggregation:", "association:" or "event:" can be added to the name of the setting (such a prefixed name
     * must be enclosed in single or double quotes).
     * 
     * The supported settings are:
     * <ul>
     * <li>Properties
     * <ul>
     * <li>{@link #getType type} : sap.ino.wall.LinkType (default: sap.ino.wall.LinkType.Misc)</li>
     * <li>{@link #getDescription description} : string</li>
     * </ul>
     * </li>
     * <li>Aggregations
     * <ul>
     * </ul>
     * </li>
     * <li>Associations
     * <ul>
     * </ul>
     * </li>
     * <li>Events
     * <ul>
     * </ul>
     * </li>
     * </ul>
     * 
     * 
     * In addition, all settings applicable to the base type
     * {@link sap.ino.wall.WallItemBase#constructor sap.ino.wall.WallItemBase} can be used as well.
     * 
     * @param {string}
     *            [sId] id for the new control, generated automatically if no id is given
     * @param {object}
     *            [mSettings] initial settings for the new control
     * 
     * @class Add your documentation for the newWallItemLink
     * @extends sap.ino.wall.WallItemBase
     * @version 1.16.4
     * 
     * @constructor
     * @public
     * @name sap.ino.wall.WallItemLink
     * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
     */
    sap.ino.wall.WallItemBase.extend("sap.ino.wall.WallItemLink", {
        metadata : {
            properties : {
                "type" : {
                    type : "sap.ino.wall.LinkType",
                    group : "Misc",
                    defaultValue : 'MISC'
                },
                "description" : {
                    type : "string",
                    group : "Misc",
                    defaultValue : null
                }
            },
            aggregations : {
                "_icon" : {
                    type : "sap.ui.core.Icon",
                    multiple : false,
                    visibility : "hidden"
                },
                "_inputLink" : {
                    type : "sap.m.Input",
                    multiple : false,
                    visibility : "hidden"
                },
                "_selectType" : {
                    type : "sap.m.Select",
                    multiple : false,
                    visibility : "hidden"
                }
            }
        }
    });

    /**
     * Creates a new subclass of class sap.ino.wall.WallItemLink with name <code>sClassName</code> and enriches it
     * with the information contained in <code>oClassInfo</code>.
     * 
     * <code>oClassInfo</code> might contain the same kind of informations as described in
     * {@link sap.ui.core.Element.extend Element.extend}.
     * 
     * @param {string}
     *            sClassName name of the class to be created
     * @param {object}
     *            [oClassInfo] object literal with informations about the class
     * @param {function}
     *            [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to
     *            sap.ui.core.ElementMetadata.
     * @return {function} the created class / constructor function
     * @public
     * @static
     * @name sap.ino.wall.WallItemLink.extend
     * @function
     */

    /**
     * Getter for property <code>type</code>. The type of the link. See type definitions for more details.
     * 
     * Default value is <code>Misc</code>
     * 
     * @return {sap.ino.wall.LinkType} the value of property <code>type</code>
     * @public
     * @name sap.ino.wall.WallItemLink#getType
     * @function
     */

    /**
     * Setter for property <code>type</code>.
     * 
     * Default value is <code>Misc</code>
     * 
     * @param {sap.ino.wall.LinkType}
     *            oType new value for property <code>type</code>
     * @return {sap.ino.wall.WallItemLink} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemLink#setType
     * @function
     */

    /**
     * Getter for property <code>description</code>. A description text.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @return {string} the value of property <code>description</code>
     * @public
     * @name sap.ino.wall.WallItemLink#getDescription
     * @function
     */

    /**
     * Setter for property <code>description</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @param {string}
     *            sDescription new value for property <code>description</code>
     * @return {sap.ino.wall.WallItemLink} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemLink#setDescription
     * @function
     */

    /**
     * strips protocol and www from the links URL for display
     * 
     * @returns {string} the link text
     * @public
     */
    sap.ino.wall.WallItemLink.prototype.getLinkText = function() {
        return this.getDescription().replace("https://www.", "").replace("http://www.", "").replace("http://", "").replace("https://", "").replace("mailto://", "");
    };

    sap.ino.wall.WallItemLink.prototype._getIcon = function() {
        var that = this, oIcon = this.getAggregation("_icon"), sIconURI, sSize;

        switch (this.getType()) {
            case sap.ino.wall.LinkType.COLLABORATE :
                sSize = "85px";
                sIconURI = sap.ui.core.IconPool.getIconURI("collaborate");
                break;
            case sap.ino.wall.LinkType.WIKI :
                sSize = "80px";
                sIconURI = sap.ui.core.IconPool.getIconURI("documents");
                break;
            case sap.ino.wall.LinkType.PRIVATE :
                sSize = "95px";
                sIconURI = sap.ui.core.IconPool.getIconURI("private");
                break;
            case sap.ino.wall.LinkType.WALL :
                sSize = "70px";
                sIconURI = sap.ui.core.IconPool.getIconURI("full-stacked-chart");
                break;
            case sap.ino.wall.LinkType.IDEA :
                sSize = "75px";
                sIconURI = sap.ui.core.IconPool.getIconURI("lightbulb");
                break;
            case sap.ino.wall.LinkType.MISC :
                /* falls through */
            default :
                sSize = "103px";
                sIconURI = sap.ui.core.IconPool.getIconURI("world");
        }

        // create new icon
        if (!oIcon) {
            oIcon = new sap.ui.core.Icon({
                color : "#e6e6e6",
                activeColor : "#e6e6e6",
                press : function() {
                    var oParent = this.getParent(), sDescription = this.getDescription();

                    // if it is a child, the wall is the parent's parent
                    if (oParent instanceof sap.ino.wall.WallItemBase) {
                        oParent = oParent.getParent();
                    }

                    // only open the link when no drag is in progress
                    if (!this._bMoving && !oParent._hasFollowCursorItems()) {
                        if (sDescription && sDescription !== "http://" && sDescription !== "https://" && sDescription !== "file://") {
                            var windower = window.open(sDescription, '_blank');
                            windower.opener = null;
                        } else {
                            // flip the item when the link is empty or initial
                            if (!(this.getParent() instanceof sap.ino.wall.WallItemBase && !(this.getParent() instanceof sap.ino.wall.WallItemGroup))) {
                                this.setFlipped(true);
                            }
                        }
                    }
                }.bind(this)
            });

            // add custom styles
            oIcon.addStyleClass("sapInoWallWILIcon").addStyleClass("noflip");

            // set hidden aggregation
            this.setAggregation("_icon", oIcon, true);
        }
        // update icon
        if (oIcon.getSrc() !== sIconURI) {
            oIcon.setSrc(sIconURI);
            oIcon.setSize(sSize);
        }

        return oIcon;
    };

    sap.ino.wall.WallItemLink.prototype.onkeydown = function(oEvent) {
        var sDescription = this.getDescription();

        if (jQuery(oEvent.target).hasClass("sapInoWallWIB") && sDescription && sDescription !== "http://" && sDescription !== "https://" && ((oEvent.ctrlKey && oEvent.keyCode === jQuery.sap.KeyCodes.ENTER) || oEvent.keyCode === jQuery.sap.KeyCodes.SPACE)) {

            var windower = window.open(sDescription, '_blank');
            windower.opener = null;
            oEvent.preventDefault();
            oEvent.stopPropagation();
            oEvent.stopImmediatePropagation();
        } else {
            sap.ino.wall.WallItemBase.prototype.onkeydown.apply(this, arguments);
        }
    };

    sap.ino.wall.WallItemLink.prototype._getSelectType = function() {
        var that = this, oSelect = this.getAggregation("_selectType"), sSelectedItemId = null, oItem, aItems, sType = this.getType(), sKey = null, i = 0;

        if (!oSelect) {
            // create select control
            oSelect = new sap.m.Select(this.getId() + "-type", {
                width : "100%",
                change : function(oEvent) {
                    that.setType(oEvent.getParameter("selectedItem").getKey());
                }
            }).addStyleClass("sapInoWallWIBSelect").addStyleClass("noflip").addEventDelegate({
                onsapenter : function(oEvent) {
                    oEvent.preventDefault();
                    oEvent.stopPropagation();
                }
            });

            // add all link types
            for (sKey in sap.ino.wall.LinkType) {
                if (sap.ino.wall.LinkType.hasOwnProperty(sKey)) {
                    oItem = new sap.ui.core.Item({
                        key : sap.ino.wall.LinkType[sKey],
                        text : this._oRB.getText("WALL_ITEMLINK_TYPE_" + sap.ino.wall.LinkType[sKey])
                    });
                    oSelect.addItem(oItem);
                    // in the same step, define the selected item
                    if (sType === sKey && !sSelectedItemId) {
                        sSelectedItemId = oItem.getId();
                    }
                }
            }

            // set selected item
            oSelect.setSelectedItem(sSelectedItemId);

            // add a delegate to fix the positioning of the popover
            oSelect.addDelegate({
                onAfterRendering : this._afterSelectOpen
            });

            // set hidden aggregation
            this.setAggregation("_selectType", oSelect, true);
        } else {
            // just set the selected item to the current state
            aItems = oSelect.getItems();
            for (; i < aItems.length; i++) {
                if (aItems[i].getKey() === sType) {
                    oSelect.setSelectedItem(aItems[i]);
                    break;
                }
            }
        }

        return oSelect;
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Input} the input
     */
    sap.ino.wall.WallItemLink.prototype._getInputLink = function() {
        var that = this, oControl = this.getAggregation("_inputLink");

        if (!oControl) {
            // create control
            oControl = new sap.m.Input({
                value : sap.ino.wall.util.Formatter.escapeBindingCharacters(sap.ino.wall.util.Formatter.escapeNetworkPaths(this.getDescription())),
                placeholder : this._oRB.getText("WALL_ITEMLINK_PLACEHOLDER_LINK"),
                change : function(oEvent) {
                    var sURL = oEvent.getParameter("newValue");
                    if (sURL && sURL.indexOf("http://") != 0 && sURL.indexOf("https://") != 0 && sURL.indexOf("mailto:") != 0) {
                        sURL = "http://" + sURL;
                        this.setValue(sURL);
                    }
                    that.setDescription(sURL);
                }
            }).addStyleClass("sapInoWallWILLinkIP");

            // set hidden aggregation without rerendering
            this.setAggregation("_inputLink", oControl, true);
        }

        return oControl;
    };

    /*******************************************************************************************************************
     * overloaded setters to supress rendering and update ui
     ******************************************************************************************************************/

    sap.ino.wall.WallItemLink.prototype.setDescription = function(sText) {

        this.setProperty("description", sText, true);
        sText = this.getDescription();

        this.$().find(".front .sapInoWallWILDescriptionLink").attr("href", sText);
        // strip protocol and www for display
        this.$().find(".front .sapInoWallWILLinkText").text(this.getLinkText());
        // inform wall that this item has changed a persistence property
        if (this.getParent()) {
            this.getParent()._notifyItemChanged(this);
        }
        return this;
    };

    sap.ino.wall.WallItemLink.prototype.setType = function(sType) {
        var oDomIcon = this.getDomRef("icon"), sOldType = this.getType();

        this.setProperty("type", sType, true);

        // render new icon into DOM without re-rendering
        if (sType !== sOldType && oDomIcon) {
            this._renderItemIntoContainer(oDomIcon, this._getIcon(), true, false);
        }

        // inform wall that this item has changed a persistence property
        if (this.getParent()) {
            this.getParent()._notifyItemChanged(this);
        }
        return this;
    };

    /**
     * creates a minimalic JSON representation of the item to be stored in the db
     * 
     * @param {string}
     *            sColor color identifier
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemLink.prototype.formatToJSON = function() {
        // call the base object's JSON method
        var oJSON = sap.ino.wall.WallItemBase.prototype.formatToJSON.call(this);
        // add properties of this control
        oJSON.type = this.getType();
        oJSON.description = this.getDescription();
        // return the final object
        return oJSON;
    };

})();
}; // end of sap/ino/wall/WallItemLink.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallItemLinkRenderer') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallItemLinkRenderer");

(function() {
    "use strict";

    
    jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

    

    /**
     * @class WallItemLink renderer.
     * @static
     */
    sap.ino.wall.WallItemLinkRenderer = sap.ui.core.Renderer.extend(sap.ino.wall.WallItemBaseRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be rendered
     */

    sap.ino.wall.WallItemLinkRenderer.renderItem = function(oRM, oControl) {
        // start wrapper
        oRM.write("<div class=\"flippable\">");

        /* front panel (view) */

        oRM.write("<div id=" + oControl.getId() + "-front");
        oRM.addClass("sapInoWallWIL");
        oRM.addClass("front");
        oRM.writeClasses();
        // TODO: fix this: workaround for re-rendering issue (when selecting type)
        if (sap.ui.Device.browser.internet_explorer === true && oControl.getFlipped()) {
            oRM.write(" style=\"display: none\"");
        }
        oRM.write(">");

        if (!sap.ino.wall.config.Config.getDebugPositioning()) {
            // icon (with surrounding div (content will be replaced when type changes)
            oRM.write("<div id=\"" + oControl.getId() + "-icon\">");
            oRM.renderControl(oControl._getIcon());
            oRM.write("</div>");

            oRM.write("<div class=\"sapInoWallWILMeta\">");

            // title
            oRM.write("<div class=\"sapInoWallWITitle sapInoWallWITitleText\">");
            oRM.writeEscaped(oControl.getTitle());
            oRM.write("</div>");

            // description
            oRM.write("<div class=\"sapInoWallWILDescription\"><a");
            oRM.writeAttributeEscaped("href", oControl.getDescription());
            oRM.writeAttribute("target", "_blank");
            oRM.addClass("sapInoWallWILDescriptionLink");
            oRM.writeClasses();
            oRM.write(" noflip\">");
            oRM.write("<span class=\"sapInoWallWILLinkText\">");
            oRM.write(oControl.getLinkText());
            oRM.write("</span></a></div>");

            oRM.write("</div>");
        } else {
            oRM.write("front");
        }

        oRM.write("</div>");

        /* back panel (edit) */

        oRM.write("<div id=" + oControl.getId() + "-back");
        oRM.addClass("sapInoWallWIL");
        oRM.addClass("back");
        oRM.writeClasses();
        // TODO: fix this: workaround for re-rendering issue (when selecting type)
        if (sap.ui.Device.browser.internet_explorer === true && oControl.getFlipped()) {
            oRM.write(" style=\"backface-visibility:visible\"");
        }
        oRM.write(">");

        if (!sap.ino.wall.config.Config.getDebugPositioning()) {
            // title
            oRM.write("<div class=\"sapInoWallWITitleEdit\">");
            oRM.renderControl(oControl._getInputTitle().setProperty("placeholder", oControl._oRB.getText("WALL_ITEMLINK_PLACEHOLDER_TITLE"), true));
            oRM.write("</div>");

            // type
            oRM.write("<div class=\"sapInoWallWILTypeEdit\">");
            oRM.renderControl(oControl._getSelectType());
            oRM.write("</div>");

            // description
            oRM.write("<div class=\"sapInoWallWILLinkInput\">");
            oRM.renderControl(oControl._getInputLink());
            oRM.write("</div>");
        } else {
            oRM.write("back");
        }

        oRM.write("</div>");

        // back button
        oRM.renderControl(oControl._getButtonFlip());

        // end wrapper
        oRM.write("</div>");
    };
    
})();
}; // end of sap/ino/wall/WallItemLinkRenderer.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallItemNote') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallItemNote");

(function() {
    "use strict";

    
    

    /**
     * Constructor for a new WallItemNote.
     * 
     * Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and
     * associated objects as well as event handlers.
     * 
     * If the name of a setting is ambiguous (e.g. a property has the same name as an event), then the framework assumes
     * property, aggregation, association, event in that order. To override this automatic resolution, one of the
     * prefixes "aggregation:", "association:" or "event:" can be added to the name of the setting (such a prefixed name
     * must be enclosed in single or double quotes).
     * 
     * The supported settings are:
     * <ul>
     * <li>Properties
     * <ul>
     * <li>{@link #getNumber number} : int</li>
     * </ul>
     * </li>
     * <li>Aggregations
     * <ul>
     * </ul>
     * </li>
     * <li>Associations
     * <ul>
     * </ul>
     * </li>
     * <li>Events
     * <ul>
     * </ul>
     * </li>
     * </ul>
     * 
     * 
     * In addition, all settings applicable to the base type
     * {@link sap.ino.wall.WallItemBase#constructor sap.ino.wall.WallItemBase} can be used as well.
     * 
     * @param {string}
     *            [sId] id for the new control, generated automatically if no id is given
     * @param {object}
     *            [mSettings] initial settings for the new control
     * 
     * @class Add your documentation for the newWallItemNote
     * @extends sap.ino.wall.WallItemBase
     * @version 1.16.4
     * 
     * @constructor
     * @public
     * @name sap.ino.wall.WallItemNote
     * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
     */
    sap.ino.wall.WallItemBase.extend("sap.ino.wall.WallItemNote", {
        metadata : {
            properties : {
                "number" : {
                    type : "int",
                    group : "Behavior",
                    defaultValue : null
                }
            },
            aggregations : {
                "_inputNumber" : {
                    type : "sap.m.Input",
                    multiple : false,
                    visibility : "hidden"
                }
            }
        }
    });

    /**
     * Creates a new subclass of class sap.ino.wall.WallItemNote with name <code>sClassName</code> and enriches it with
     * the information contained in <code>oClassInfo</code>.
     * 
     * <code>oClassInfo</code> might contain the same kind of informations as described in
     * {@link sap.ui.core.Element.extend Element.extend}.
     * 
     * @param {string}
     *            sClassName name of the class to be created
     * @param {object}
     *            [oClassInfo] object literal with informations about the class
     * @param {function}
     *            [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to
     *            sap.ui.core.ElementMetadata.
     * @return {function} the created class / constructor function
     * @public
     * @static
     * @name sap.ino.wall.WallItemNote.extend
     * @function
     */

    /**
     * Getter for property <code>number</code>. The SAP Note number this object represents.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @return {int} the value of property <code>number</code>
     * @public
     * @name sap.ino.wall.WallItemNote#getNumber
     * @function
     */

    /**
     * Setter for property <code>number</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @param {int}
     *            iNumber new value for property <code>number</code>
     * @return {sap.ino.wall.WallItemNote} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemNote#setNumber
     * @function
     */

    /*******************************************************************************************************************
     * overloaded setters to supress rendering and update ui
     ******************************************************************************************************************/

    /*
     * Sets the note number without rerendering @override @param {integer} sNumber the new note number @returns {this}
     * this pointer
     */
    sap.ino.wall.WallItemNote.prototype.setNumber = function(sNumber) {
        sNumber = parseInt(sNumber, 10);
        this.setProperty("number", sNumber, true);
        this.$().find(".front > .sapInoWallWINNumberText").text(sNumber);
        // inform wall that this item has changed a persistence property
        if (this.getParent()) {
            this.getParent()._notifyItemChanged(this);
        }
        return this;
    };
    /*
     * Sets the note title and changes the link to the SAP Note without rerendering Note: this method shadows the
     * wallItemBase method @override @param {string} sTitle the new title @returns {this} this pointer
     */
    sap.ino.wall.WallItemNote.prototype.setTitle = function(sTitle, bSuppressNotify) {
        this.setProperty("title", sTitle, true);
        this.$().find(".front .sapInoWallWITitleText a").text(sTitle);
        // this.$().find(".front .sapInoWallWITitleText a").attr("href", "http://service.sap.com/sap/support/notes/" + this.getNumber());
        // inform wall that this item has changed a persistence property
        if (this.getParent()) {
            this.getParent()._notifyItemChanged(this);
        }
        return this;
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Input} the input
     */
    sap.ino.wall.WallItemNote.prototype._getInputNumber = function() {
        var that = this, oControl = this.getAggregation("_inputNumber");

        if (!oControl) {
            // create control
            oControl = new sap.m.Input({
                value : (this.getNumber() === 12345 ? "" : sap.ino.wall.util.Formatter.escapeBindingCharacters(this.getNumber())),
                placeholder : this._oRB.getText("WALL_ITEMNOTE_PLACEHOLDER_NUMBER"),
                change : function(oEvent) {
                    that.setNumber(oEvent.getParameter("newValue"));
                }
            }).addStyleClass("sapInoWallWINNumberIP");

            // set hidden aggregation without rerendering
            this.setAggregation("_inputNumber", oControl, true);
        }

        return oControl;
    };

    sap.ino.wall.WallItemNote.prototype.formatToJSON = function() {
        var oJSON = sap.ino.wall.WallItemBase.prototype.formatToJSON.call(this);

        oJSON.number = this.getNumber();

        return oJSON;
    };

})();
}; // end of sap/ino/wall/WallItemNote.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallItemNoteRenderer') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallItemNoteRenderer");

(function() {
    "use strict";

    
    jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

    

    /**
     * @class WallItemText renderer.
     * @static
     */
    sap.ino.wall.WallItemNoteRenderer = sap.ui.core.Renderer.extend(sap.ino.wall.WallItemBaseRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be rendered
     */

    sap.ino.wall.WallItemNoteRenderer.renderItem = function(oRM, oControl) {
        // start wrapper
        oRM.write("<div class=\"flippable\">");

        /* front panel (view) */

        oRM.write("<div id=" + oControl.getId() + "-front");
        oRM.addClass("sapInoWallWIN");
        oRM.addClass("front");
        oRM.writeClasses();
        oRM.write(">"); // span element

        if (!sap.ino.wall.config.Config.getDebugPositioning()) {
            // number
            oRM.write("<div class=\"sapInoWallWITitle sapInoWallWINNumber sapInoWallWINNumberText\">");
            oRM.write(oControl.getNumber());
            oRM.write("</div>");

            // title
            oRM.write("<div class=\"sapInoWallWINoteTitle sapInoWallWITitleText\">");
            // oRM.write("<a href=\"http://service.sap.com/sap/support/notes/" + oControl.getNumber() + "\" target=\"_blank\" class=\"noflip\"> " + oControl.getTitle() + "</a>");
            oRM.write("</div>");
        } else {
            oRM.write("front");
        }

        oRM.write("</div>");

        /* back panel (edit) */

        oRM.write("<div id=" + oControl.getId() + "-back");
        oRM.addClass("sapInoWallWIN");
        oRM.addClass("back");
        oRM.writeClasses();
        oRM.write(">"); // span element

        if (!sap.ino.wall.config.Config.getDebugPositioning()) {
            // number
            oRM.write("<div class=\"sapInoWallWINNumberEdit\">");
            oRM.renderControl(oControl._getInputNumber());
            oRM.write("</div>");

            // title
            oRM.write("<div class=\"sapInoWallWITitleEdit\">");
            oRM.renderControl(oControl._getInputTitle().setProperty("placeholder", oControl._oRB.getText("WALL_ITEMNOTE_PLACEHOLDER_TITLE"), true));
            oRM.write("</div>");
        } else {
            oRM.write("back");
        }

        oRM.write("</div>");

        // back button
        oRM.renderControl(oControl._getButtonFlip());

        // end wrapper
        oRM.write("</div>");
    };

})();
}; // end of sap/ino/wall/WallItemNoteRenderer.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallItemPerson') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallItemPerson");

(function() {
    "use strict";

    
    
    
    jQuery.sap.require('sap.ino.commons.models.object.Attachment'); // unlisted dependency retained


    jQuery.sap.require('sap.ino.commons.application.Configuration'); // unlisted dependency retained

    var Configuration = sap.ino.commons.application.Configuration;

    /**
     * Constructor for a new WallItemPerson.
     * 
     * Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and
     * associated objects as well as event handlers.
     * 
     * If the name of a setting is ambiguous (e.g. a property has the same name as an event), then the framework assumes
     * property, aggregation, association, event in that order. To override this automatic resolution, one of the
     * prefixes "aggregation:", "association:" or "event:" can be added to the name of the setting (such a prefixed name
     * must be enclosed in single or double quotes).
     * 
     * The supported settings are:
     * <ul>
     * <li>Properties
     * <ul>
     * <li>{@link #getStatus status} : string (default: 'Normal')</li>
     * <li>{@link #getImage image} : sap.ui.core.URI</li>
     * <li>{@link #getPhone phone} : string</li>
     * <li>{@link #getEmail email} : string</li>
     * </ul>
     * </li>
     * <li>Aggregations
     * <ul>
     * </ul>
     * </li>
     * <li>Associations
     * <ul>
     * </ul>
     * </li>
     * <li>Events
     * <ul>
     * </ul>
     * </li>
     * </ul>
     * 
     * 
     * In addition, all settings applicable to the base type
     * {@link sap.ino.wall.WallItemBase#constructor sap.ino.wall.WallItemBase} can be used as well.
     * 
     * @param {string}
     *            [sId] id for the new control, generated automatically if no id is given
     * @param {object}
     *            [mSettings] initial settings for the new control
     * 
     * @class Add your documentation for the new WallItemPerson control
     * @extends sap.ino.wall.WallItemBase
     * @version 1.16.4
     * 
     * @constructor
     * @public
     * @name sap.ino.wall.WallItemPerson
     * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
     */
    sap.ino.wall.WallItemBase.extend("sap.ino.wall.WallItemPerson", {
        metadata : {
            properties : {
                "status" : {
                    type : "string",
                    group : "Behavior",
                    defaultValue : 'Normal'
                },
                "image" : {
                    type : "sap.ui.core.URI",
                    group : "Behavior",
                    defaultValue : null
                },
                "phone" : {
                    type : "string",
                    group : "Misc",
                    defaultValue : null
                },
                "email" : {
                    type : "string",
                    group : "Misc",
                    defaultValue : null
                },
                "originId" : {
                    type : "int",
                    group : "Misc",
                    defaultValue : 0
                },
                "requestImage" : {
                    type : "boolean",
                    group : "Misc",
                    defaultValue : false
                },
                "assignmentId" : {
                    type : "int",
                    group : "Identification",
                    defaultValue : -1
                }
            },
            aggregations : {
                "_image" : {
                    type : "sap.m.Image",
                    multiple : false,
                    visibility : "hidden"
                },
                "_inputPhone" : {
                    type : "sap.m.Input",
                    multiple : false,
                    visibility : "hidden"
                },
                "_inputEmail" : {
                    type : "sap.m.Input",
                    multiple : false,
                    visibility : "hidden"
                },
                "_linkPhone" : {
                    type : "sap.m.Link",
                    multiple : false,
                    visibility : "hidden"
                },
                "_linkEmail" : {
                    type : "sap.m.Link",
                    multiple : false,
                    visibility : "hidden"
                },
                "_busyIndicator" : {
                    type : "sap.m.BusyIndicator",
                    multiple : false,
                    visibility : "hidden"
                },
                "_dropUpload" : {
                    type : "sap.ino.wall.DropUpload",
                    multiple : false,
                    visibility : "hidden"
                }
            }
        }
    });

    /**
     * Creates a new subclass of class sap.ino.wall.WallItemPerson with name <code>sClassName</code> and enriches
     * it with the information contained in <code>oClassInfo</code>.
     * 
     * <code>oClassInfo</code> might contain the same kind of informations as described in
     * {@link sap.ui.core.Element.extend Element.extend}.
     * 
     * @param {string}
     *            sClassName name of the class to be created
     * @param {object}
     *            [oClassInfo] object literal with informations about the class
     * @param {function}
     *            [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to
     *            sap.ui.core.ElementMetadata.
     * @return {function} the created class / constructor function
     * @public
     * @static
     * @name sap.ino.wall.WallItemPerson.extend
     * @function
     */

    /**
     * Getter for property <code>status</code>. The status of the person item. If set to "Busy" a busy indicator will
     * overlay the preview to indicate that the image is currently uploaded.
     * 
     * Default value is <code>Normal</code>
     * 
     * @return {string} the value of property <code>status</code>
     * @public
     * @name sap.ino.wall.WallItemPerson#getStatus
     * @function
     */

    /**
     * Setter for property <code>status</code>.
     * 
     * Default value is <code>Normal</code>
     * 
     * @param {string}
     *            sStatus new value for property <code>status</code>
     * @return {sap.ino.wall.WallItemPerson} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemPerson#setStatus
     * @function
     */

    /**
     * Getter for property <code>image</code>. The image URI to be displayed with the person.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @return {sap.ui.core.URI} the value of property <code>image</code>
     * @public
     * @name sap.ino.wall.WallItemPerson#getImage
     * @function
     */

    /**
     * Setter for property <code>image</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @param {sap.ui.core.URI}
     *            sImage new value for property <code>image</code>
     * @return {sap.ino.wall.WallItemPerson} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemPerson#setImage
     * @function
     */

    /**
     * Getter for property <code>phone</code>. A description text.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @return {string} the value of property <code>phone</code>
     * @public
     * @name sap.ino.wall.WallItemPerson#getPhone
     * @function
     */

    /**
     * Setter for property <code>phone</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @param {string}
     *            sPhone new value for property <code>phone</code>
     * @return {sap.ino.wall.WallItemPerson} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemPerson#setPhone
     * @function
     */

    /**
     * Getter for property <code>email</code>. A description text.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @return {string} the value of property <code>email</code>
     * @public
     * @name sap.ino.wall.WallItemPerson#getEmail
     * @function
     */

    /**
     * Setter for property <code>email</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @param {string}
     *            sEmail new value for property <code>email</code>
     * @return {sap.ino.wall.WallItemPerson} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemPerson#setEmail
     * @function
     */

    sap.ino.wall.WallItemPerson._DEFAULT_IMAGE = "images/default/person.png";

    sap.ino.wall.WallItemPerson.prototype.init = function() {
        sap.ino.wall.WallItemBase.prototype.init.call(this);
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Input} the input
     */
    sap.ino.wall.WallItemPerson.prototype._getInputEmail = function() {
        var that = this, oControl = this.getAggregation("_inputEmail");

        if (!oControl) {
            // create control
            oControl = new sap.m.Input({
                value : this.getEmail(),
                placeholder : this._oRB.getText("WALL_ITEMPERSON_PLACEHOLDER_EMAIL"),
                change : function(oEvent) {
                    that.setEmail(oEvent.getParameter("newValue"), false, true);
                }
            }).addStyleClass("sapInoWallWIPEmailIP");

            // set hidden aggregation without rerendering
            this.setAggregation("_inputEmail", oControl, true);
        }

        return oControl;
    };

    sap.ino.wall.WallItemPerson.prototype._getInputTitle = function() {
        var bEnhanceInput = !this.getAggregation("_inputTitle");
        var oTitleInput = sap.ino.wall.WallItemBase.prototype._getInputTitle.apply(this, arguments);
        if (bEnhanceInput) {
            oTitleInput.setShowSuggestion(true);
            oTitleInput.attachSuggest(function(oEvent) {
                var sValue = oEvent.getParameter("suggestValue");
                // Encoding needed for IE!
                var oListItemTemplate = new sap.ui.core.ListItem({
                    text : "{data>NAME}",
                    additionalText : "{data>USER_NAME}",
                    key : "{data>ID}"
                });
                oEvent.getSource().bindAggregation("suggestionItems", {
                    path : "data>/SearchIdentityWallItemPerson(searchToken='" + jQuery.sap.encodeURL(sValue) + "')/Results",
                    template : oListItemTemplate,
                    parameters : {
                        select : "searchToken,ID,NAME,USER_NAME"
                    }
                });
            });
            oTitleInput.setFilterFunction(function(sValue, oItem) {
                return true;
            });
        }
        return oTitleInput;
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Input} the input
     */
    sap.ino.wall.WallItemPerson.prototype._getInputPhone = function() {
        var that = this, oControl = this.getAggregation("_inputPhone");

        if (!oControl) {
            // create control
            oControl = new sap.m.Input({
                value : this.getPhone(),
                placeholder : this._oRB.getText("WALL_ITEMPERSON_PLACEHOLDER_PHONE"),
                change : function(oEvent) {
                    that.setPhone(oEvent.getParameter("newValue"));
                }
            }).addStyleClass("sapInoWallWIPPhoneIP");

            // set hidden aggregation without rerendering
            this.setAggregation("_inputPhone", oControl, true);
        }

        return oControl;
    };

    /**
     * Lazy initialization of control managed in an internal aggregation
     * 
     * @private
     * @returns {sap.m/BusyIndicator} the control
     */

    sap.ino.wall.WallItemPerson.prototype._getBusyIndicator = function() {
        var oBusyIndicator = this.getAggregation("_busyIndicator");

        if (!oBusyIndicator) {
            // create control
            oBusyIndicator = new sap.m.BusyIndicator(this.getId() + "-busy").addStyleClass("sapInoWallIndicatorBusy");

            // set hidden aggregation without rerendering
            this.setAggregation("_busyIndicator", oBusyIndicator, true);
        }

        return oBusyIndicator;
    };

    /*******************************************************************************************************************
     * overloaded setters to supress rendering and update ui
     ******************************************************************************************************************/

    sap.ino.wall.WallItemPerson.prototype.setImage = function(sURI, bSuppressNotify) {
        var that = this;
        that.$().find(".sapInoWallWIPImageWrapper").addClass("sapInoWallWIPImageWrapperDefaultImage");
        var oOldImage = this.getAggregation("_image"), oNewImage = null, fnImageOnload = function(oEvent) {
            // call original function
            if (sap.m.Image.prototype.onload) {
                sap.m.Image.prototype.onload.apply(this, arguments);
            }

            that.$().find(".sapInoWallWIPImageWrapper").removeClass("sapInoWallWIPImageWrapperDefaultImage");
            // hide busy indicator after loading the preview
            that.setStatus("Normal");
        }, fnImageOnerror = function(oEvent) {
            // call original function
            if (sap.m.Image.prototype.onerror) {
                sap.m.Image.prototype.onerror.apply(this, arguments);
            }
            // set default image again when no image is available
            // this.setSrc(sap.ino.wall.WallItemPerson._DEFAULT_IMAGE);
            that.$().find(".sapInoWallWIPImageWrapper").addClass("sapInoWallWIPImageWrapperDefaultImage");
            that.setStatus("Normal");
        };

        // re-rendering, replace it with a DOM manipulation
        this.setProperty("image", sURI, (oOldImage ? true : false));
        if (oOldImage) {
            oOldImage.destroy();
        }

        oNewImage = new sap.m.Image({
            src : sURI,
            densityAware : false
        }).addEventDelegate({
            // only density-aware images call onload/onerror in the current implementation but we don't have a
            // high-res picture so we need to register the handlers by ourselves
            onBeforeRendering : function(oEvent) {
                var oImage = oEvent.srcControl, $image = oImage.$();

                // unbind the load and error event handler
                $image.unbind("load", oImage.___onloadproxy);
                $image.unbind("error", oImage.___onloadproxy);
            },
            onAfterRendering : jQuery.proxy(function(oEvent) {
                var oImage = oEvent.srcControl, $image = oImage.$();

                // set an internal pointer inside sap.m.Image
                if (!oImage.___onloadproxy) {
                    oImage.___onloadproxy = jQuery.proxy(oImage.onload, oImage);
                    oImage.___onerrorproxy = jQuery.proxy(oImage.onerror, oImage);
                }
                // bind the load and error event handler
                $image.bind("load", jQuery.proxy(oImage.___onloadproxy, oImage));
                $image.bind("error", jQuery.proxy(oImage.___onerrorproxy, oImage));
            }, oNewImage)
        });
        // we add our custom handlers to do stuff that is currently not possible with sap.m.Image
        oNewImage.onload = fnImageOnload;
        oNewImage.onerror = fnImageOnerror;

        oNewImage.attachPress(function(oEvent) {
            if (!that._bMoving && that.getParent() instanceof sap.ino.wall.Wall) {
                that.setFlipped(true);
            }
        });

        this.setAggregation("_image", oNewImage, true);

        if (this._isRendered()) {
            // render new item
            this._renderItemIntoContainer(this.$().find("#" + this.getId() + "-imageWrapper").children("a")[0], this.getAggregation("_image"), false, true);

            // inform wall that this item has changed a persistence property
            if (this.getParent() && !bSuppressNotify) {
                this.getParent()._notifyItemChanged(this);
            }
        }
        return this;
    };
    
    sap.ino.wall.WallItemPerson.prototype.setAssignmentId = function(iID) {
        
        this.setProperty("assignmentId", iID, true);
        
        // inform wall that this item has changed a persistence property
        if (this.getParent()) {
            this.getParent()._notifyItemChanged(this);
        }
        return this;
    };

    /*
     * Shows/hides a busy indicator when uploading imaged without rerendering @override
     */
    sap.ino.wall.WallItemPerson.prototype.setStatus = function(sStatus) {
        var oImage, oBusyIndicator;

        this.setProperty("status", sStatus, true);
        if (this._isRendered()) {
            oImage = this._getImage();
            oBusyIndicator = this._getBusyIndicator();
            if (this.getStatus() === "Busy") {
                oBusyIndicator.removeStyleClass("sapInoWallInvisible");
                oImage.addStyleClass("sapInoWallImageBusy");
            } else {
                oBusyIndicator.addStyleClass("sapInoWallInvisible");
                oImage.removeStyleClass("sapInoWallImageBusy");
            }
        }
    };

    sap.ino.wall.WallItemPerson.prototype._requestIdentity = function(sValue) {
        var that = this;

        if (!sValue) {
            return;
        }
        
        this.setRequestImage(false);

        jQuery.ajax({
            url : Configuration.getBackendRootURL() + "/" + Configuration.getSystemSetting("sap.ino.config.URL_PATH_OD_APPLICATION") + "/SearchIdentityWallItemPerson(searchToken='" + jQuery.sap.encodeURL(sValue) + "')/Results?$select=searchToken,ID,NAME,USER_NAME&$format=json",
            type : "GET"
        }).success(function(oData) {
            var iIdentity, iImage, sPhone, sEmail, sName;
            var iSet = 0;

            if (oData.d && jQuery.type(oData.d.results) === "array") {
                // use the first item that is identical to the search
                // => only if there is just one person w/ this name
                for (var ii = 0; ii < oData.d.results.length; ii++) {
                    var oResult = oData.d.results[ii];
                    if ((oResult.searchToken && oResult.NAME && oResult.searchToken.toLowerCase() === oResult.NAME.toLowerCase()) || (oResult.searchToken && oResult.EMAIL && oResult.searchToken.toLowerCase() === oResult.EMAIL.toLowerCase())) {
                        iIdentity = oResult.ID;
                        iImage = oResult.IMAGE_ID;
                        sPhone = oResult.PHONE ? oResult.PHONE : oResult.MOBILE;
                        sEmail = oResult.EMAIL;
                        sName = oResult.NAME;

                        iSet++;
                    }
                }

                // do nothing if there are multiple persons or the identity has already been set
                if (iSet === 1 && iIdentity && iIdentity !== that.getProperty("originId")) {
                    // update everything
                    that.setProperty("originId", iIdentity, true);

                    if (iImage > 0) {
                        that.setProperty("image", Configuration.getAttachmentDownloadURL(iImage), true);
                    } else {
                        that.setProperty("image", "", true);
                    }
                    that._fetchPicture();

                    that.setPhone(sPhone);
                    that.setEmail(sEmail);
                    that.setTitle(sName);

                    that.rerender();
                }
            }

        }).error(function(jqXHR, sStatus, sErrorThrown) {
            // TODO: Handle error
        });
    };

    sap.ino.wall.WallItemPerson.prototype.setTitle = function(sTitle, bSuppressNotify, bRequestIdentity) {
        // call the base class method
        sap.ino.wall.WallItemBase.prototype.setTitle.apply(this, arguments);

        // hide the meta information if there is nothing to show
        if (this._isRendered()) {
            this.$().find(".sapInoWallWIPMeta").toggleClass("sapInoWallInvisible", !this.getTitle() && !this.getEmail() && !this.getPhone());
        }

        if (bRequestIdentity) {
            this._requestIdentity(sTitle);
        }
    };

    sap.ino.wall.WallItemPerson.prototype.setPhone = function(sPhone, bSuppressNotify) {
        var oLinkPhone = this._getLinkPhone();

        this.setProperty("phone", sPhone, true);
        // update link control
        oLinkPhone.setText(sPhone);
        oLinkPhone.toggleStyleClass("sapInoWallInvisible", !sPhone);

        var oInputPhone = this._getInputPhone();
        oInputPhone.setValue(sPhone);

        // hide the meta information if there is nothing to show
        if (this._isRendered()) {
            this.$().find(".sapInoWallWIPMeta").toggleClass("sapInoWallInvisible", !this.getTitle() && !this.getEmail() && !this.getPhone());
        }

        // inform wall that this item has changed a persistence property
        if (this.getParent() && !bSuppressNotify) {
            this.getParent()._notifyItemChanged(this);
        }
        return this;
    };

    sap.ino.wall.WallItemPerson.prototype.setEmail = function(sEmail, bSuppressNotify, bRequestIdentity) {
        var oLinkEmail = this._getLinkEmail();

        this.setProperty("email", sEmail, true);
        // update link control
        oLinkEmail.setText(sEmail);
        oLinkEmail.toggleStyleClass("sapInoWallInvisible", !sEmail);

        var oInputEmail = this._getInputEmail();
        oInputEmail.setValue(sEmail);

        // hide the meta information if there is nothing to show
        if (this._isRendered()) {
            this.$().find(".sapInoWallWIPMeta").toggleClass("sapInoWallInvisible", !this.getTitle() && !this.getEmail() && !this.getPhone());
        }

        // fetch address book picture (when updating the email address
        if (sEmail && sEmail.length > 0 && bRequestIdentity) {
            this._requestIdentity(sEmail);
        }

        // inform wall that this item has changed a persistence property
        if (this.getParent() && !bSuppressNotify) {
            this.getParent()._notifyItemChanged(this);
        }
        return this;
    };

    sap.ino.wall.WallItemPerson.prototype.setRequestImage = function(bRequestImage, bSuppressNotify) {
        this.setProperty("requestImage", bRequestImage, true);

        // inform wall that this item has changed a persistence property
        if (this.getParent() && !bSuppressNotify) {
            this.getParent()._notifyItemChanged(this);
        }
        return this;
    };
    
    /*
     * Fetches a picture from the address book by converting the email address to the user id @private @returns
     * {sap.m/Button} the button
     */
    sap.ino.wall.WallItemPerson.prototype._fetchPicture = function() {
        var sImage = this.getProperty("image");
        this.setImage(sImage);
    };

    sap.ino.wall.WallItemPerson.prototype._uploadImage = function(oEvent) {
        var that = this, aFiles = oEvent.getParameter("files"), oFile, oFormData, oReader;

        // set title to nothing if it is still the default (image-only mode)
        if (this.getTitle() === this._oRB.getText("WALL_ITEMPERSON_NEW_TEXT")) {
            this.setTitle("");
        }

        // display an error if user tries to drop a file with IE9
        if (sap.ui.Device.browser.name === "ie" && sap.ui.Device.browser.version < 10 && aFiles === undefined) {
            return;
        }

        // hide drag preview
        jQuery.sap.byId(this.getParent().getId() + "-drag").css("display", "none");

        // reset cursor to normal
        this.$().removeClass("dragCursor");

        if (aFiles.length !== 0) {
            oFile = aFiles[0];
            if (!!oFile.type.match(/image\.*/)) {
                that.setStatus("Busy");
                that.setFlipped(false);
                sap.ino.commons.models.object.Attachment.uploadFile(oFile).done(function(oResponse) {
                    var iStorageId = oResponse.attachmentId;
                    setTimeout(function() {
                        that.setImage(Configuration.getAttachmentDownloadURL(iStorageId));
                    }, 500);
                }).fail(function(oResponse) {
                    // TODO: Handle error
                });
            }
        }
    };

    /*
     * Lazy initialization of the internal dialog @private @returns {sap.m/Button} the button
     */
    sap.ino.wall.WallItemPerson.prototype._getImage = function() {
        var oImage = this.getAggregation("_image");

        if (!oImage) {
            this.setImage("");
            this.$().find(".sapInoWallWIPImageWrapper").addClass("sapInoWallWIPImageWrapperDefaultImage");
            oImage = this.getAggregation("_image");
        }
        return oImage;
    };
    
    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Link} the link
     */
    sap.ino.wall.WallItemPerson.prototype._getLinkPhone = function() {
        var that = this, oControl = this.getAggregation("_linkPhone");

        if (!oControl) {
            // create control
            oControl = new sap.m.Link({
                text : sap.ino.wall.util.Formatter.escapeBindingCharacters(this.getPhone()),
                press : function(oEvent) {
                    sap.m.URLHelper.triggerTel(that.getPhone());
                }
            }).addStyleClass("sapInoWallWIPPhoneL").addStyleClass("noflip").toggleStyleClass("sapInoWallInvisible", !this.getPhone());

            // set hidden aggregation without rerendering
            this.setAggregation("_linkPhone", oControl, true);
        }

        return oControl;
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Link} the link
     */
    sap.ino.wall.WallItemPerson.prototype._getLinkEmail = function() {
        var that = this, oControl = this.getAggregation("_linkEmail");

        if (!oControl) {
            // create control
            oControl = new sap.m.Link({
                text : sap.ino.wall.util.Formatter.escapeBindingCharacters(this.getEmail()),
                press : function(oEvent) {
                    sap.m.URLHelper.triggerEmail(that.getEmail());
                }
            }).addStyleClass("sapInoWallWIPEmailL").addStyleClass("noflip").toggleStyleClass("sapInoWallInvisible", !this.getEmail());

            // set hidden aggregation without rerendering
            this.setAggregation("_linkEmail", oControl, true);
        }

        return oControl;
    };

    /**
     * Lazy initialization of a control managed in an internal aggregation
     * 
     * @private
     * @returns {sap.ui.core/Icon} the control
     */
    sap.ino.wall.WallItemPerson.prototype._getDropUpload = function() {
        var oControl = this.getAggregation("_dropUpload");

        if (!oControl) {
            // create control
            oControl = new sap.ino.wall.DropUpload({
                size : "S",
                change : [this._uploadImage, this]
            });

            // set hidden aggregation without rerendering
            this.setAggregation("_dropUpload", oControl, true);
        }

        return oControl;
    };

    /**
     * creates a minimalic JSON representation of the item to be stored in the db
     * 
     * @param {string}
     *            sColor color identifier
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemPerson.prototype.formatToJSON = function() {
        // call the base object's JSON method
        var oJSON = sap.ino.wall.WallItemBase.prototype.formatToJSON.call(this);
        // add properties of this control
        oJSON.content.phone = this.getPhone();
        oJSON.content.email = this.getEmail();
        oJSON.content.originId = this.getOriginId();
        oJSON.content.requestImage = this.getRequestImage();
        if (this.getImage()) {
            oJSON.content.image = this.getImage();
            oJSON.content.assignmentId = this.getAssignmentId();
        }
        // return the final object
        return oJSON;
    };

})();
}; // end of sap/ino/wall/WallItemPerson.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallItemPersonRenderer') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallItemPersonRenderer");

(function() {
    "use strict";

    
    jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

    

    /**
     * @class WallItemPerson renderer.
     * @static
     */
    sap.ino.wall.WallItemPersonRenderer = sap.ui.core.Renderer.extend(sap.ino.wall.WallItemBaseRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be rendered
     */

    sap.ino.wall.WallItemPersonRenderer.renderItem = function(oRM, oControl) {
        var oBusyIndicator = oControl._getBusyIndicator(), oImage = oControl._getImage(), oDropUpload = oControl._getDropUpload();

        // add busy state to preview
        if (oControl.getStatus() === "Busy" && oImage) {
            oImage.addStyleClass("sapInoWallImageBusy");
        }

        // start wrapper
        oRM.write("<div class=\"flippable\">");

        /* front panel (view) */
        oRM.write("<div id=" + oControl.getId() + "-front");
        oRM.addClass("sapInoWallWIPFlip");
        oRM.addClass("front");
        oRM.writeClasses();
        oRM.write(">");
        
        oRM.write("<div");
        oRM.addClass("sapInoWallWIP sapInoWallWIPPerson");
        oRM.addClass("front");        
        oRM.writeClasses();
        oRM.write(">");

        if (!sap.ino.wall.config.Config.getDebugPositioning()) {
            // person image
            oRM.write('<div id="' + oControl.getId() + '-imageWrapper" class="sapInoWallWIPImageWrapper sapInoWallWIPImageWrapperDefaultImage">');
            oRM.renderControl(oImage.addStyleClass("sapInoWallWIPImage").addStyleClass("noflip"));
            oRM.write("</div>");

            // render a busy indicator
            if (oControl.getStatus() !== "Busy") {
                oBusyIndicator.addStyleClass("sapInoWallInvisible");
            }
            oRM.renderControl(oBusyIndicator);

            // meta wrapper (only shown if title / email / phone is set)
            oRM.write("<div class=\"sapInoWallWIPMeta " + (!oControl.getTitle() && !oControl.getEmail() && !oControl.getPhone() ? " sapInoWallInvisible" : "") + "\">");

            // name
            oRM.write("<div class=\"sapInoWallWITitle sapInoWallWITitleText\">");
            oRM.writeEscaped(oControl.getTitle());
            oRM.write("</div>");

            // mail
            oRM.write("<div class=\"sapInoWallWIPMail\">");
            oRM.renderControl(oControl._getLinkEmail());
            oRM.write("</div>");

            // phone
            oRM.write("<div class=\"sapInoWallWIPPhone\">");
            oRM.renderControl(oControl._getLinkPhone());
            oRM.write("</div>");

            oRM.write("</div>");
        } else {
            oRM.write("front");
        }

        oRM.write("</div>");
        oRM.write("</div>");

        /* back panel (edit) */

        oRM.write("<div id=" + oControl.getId() + "-back");
        oRM.addClass("sapInoWallWIP sapInoWallWIPPerson");
        oRM.addClass("back");
        oRM.writeClasses();
        oRM.write(">");

        if (!sap.ino.wall.config.Config.getDebugPositioning()) {
            // icon drop / upload area
            oRM.write("<div class=\"sapInoWallWIPPreviewEdit\">");
            oRM.renderControl(oDropUpload);
            oRM.write("</div>");
            // title
            oRM.write("<div class=\"sapInoWallWITitleEdit\">");
            oRM.renderControl(oControl._getInputTitle().setProperty("placeholder", oControl._oRB.getText("WALL_ITEMPERSON_PLACEHOLDER_NAME"), true));
            oRM.write("</div>");
            // email
            oRM.write("<div class=\"sapInoWallWIPEmailEdit\">");
            oRM.renderControl(oControl._getInputEmail());
            oRM.write("</div>");
            // phone
            oRM.write("<div class=\"sapInoWallWIPPhoneEdit\">");
            oRM.renderControl(oControl._getInputPhone());
            oRM.write("</div>");
        } else {
            oRM.write("back");
        }

        oRM.write("</div>");

        // back button
        oRM.renderControl(oControl._getButtonFlip());

        // end wrapper
        oRM.write("</div>");
    };

})();
}; // end of sap/ino/wall/WallItemPersonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallItemSprite') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallItemSprite");

(function() {
    "use strict";

    
    
    
    
    

    /**
     * Constructor for a new WallItemSprite.
     * 
     * Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and
     * associated objects as well as event handlers.
     * 
     * If the name of a setting is ambiguous (e.g. a property has the same name as an event), then the framework assumes
     * property, aggregation, association, event in that order. To override this automatic resolution, one of the
     * prefixes "aggregation:", "association:" or "event:" can be added to the name of the setting (such a prefixed name
     * must be enclosed in single or double quotes).
     * 
     * The supported settings are:
     * <ul>
     * <li>Properties
     * <ul>
     * <li>{@link #getColor color} : string (default: '#cc0000')</li>
     * <li>{@link #getType type} : string (default: 'ROUND')</li>
     * </ul>
     * </li>
     * <li>Aggregations
     * <ul>
     * </ul>
     * </li>
     * <li>Associations
     * <ul>
     * </ul>
     * </li>
     * <li>Events
     * <ul>
     * </ul>
     * </li>
     * </ul>
     * 
     * 
     * In addition, all settings applicable to the base type
     * {@link sap.ino.wall.WallItemBase#constructor sap.ino.wall.WallItemBase} can be used as well.
     * 
     * @param {string}
     *            [sId] id for the new control, generated automatically if no id is given
     * @param {object}
     *            [mSettings] initial settings for the new control
     * 
     * @class Add your documentation for the new WallItemSprite
     * @extends sap.ino.wall.WallItemBase
     * @version 1.16.4
     * 
     * @constructor
     * @public
     * @name sap.ino.wall.WallItemSprite
     * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
     */
    sap.ino.wall.WallItemBase.extend("sap.ino.wall.WallItemSprite", {
        metadata : {
            properties : {
                "color" : {
                    type : "string",
                    group : "Appearance",
                    defaultValue : '#cc0000'
                },
                "type" : {
                    type : "string",
                    group : "Appearance",
                    defaultValue : 'ROUND'
                }
            },
            aggregations : {
                "_textAreaDescription" : {
                    type : "sap.ui.core.Control",
                    multiple : false,
                    visibility : "hidden"
                },
                "_checkboxMulti" : {
                    type : "sap.m.CheckBox",
                    multiple : false,
                    visibility : "hidden"
                },
                "_buttonColorSelector" : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                },
                "_colorPicker" : {
                    type : "sap.ino.wall.ColorPicker",
                    multiple : false,
                    visibility : "hidden"
                },
                "_iconSelect" : {
                    type : "sap.ino.wall.ColorPicker",
                    multiple : false,
                    visibility : "hidden"
                },
                "_selectType" : {
                    type : "sap.m.Select",
                    multiple : false,
                    visibility : "hidden"
                }
            }
        }
    });

    /**
     * Creates a new subclass of class sap.ino.wall.WallItemSprite with name <code>sClassName</code> and enriches
     * it with the information contained in <code>oClassInfo</code>.
     * 
     * <code>oClassInfo</code> might contain the same kind of informations as described in
     * {@link sap.ui.core.Element.extend Element.extend}.
     * 
     * @param {string}
     *            sClassName name of the class to be created
     * @param {object}
     *            [oClassInfo] object literal with informations about the class
     * @param {function}
     *            [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to
     *            sap.ui.core.ElementMetadata.
     * @return {function} the created class / constructor function
     * @public
     * @static
     * @name sap.ino.wall.WallItemSprite.extend
     * @function
     */

    /**
     * Getter for property <code>color</code>. The sprite color.
     * 
     * Default value is <code>#cc0000</code>
     * 
     * @return {string} the value of property <code>color</code>
     * @public
     * @name sap.ino.wall.WallItemSprite#getColor
     * @function
     */

    /**
     * Setter for property <code>color</code>.
     * 
     * Default value is <code>#cc0000</code>
     * 
     * @param {string}
     *            sColor new value for property <code>color</code>
     * @return {sap.ino.wall.WallItemSprite} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemSprite#setColor
     * @function
     */

    /**
     * Getter for property <code>type</code>. The sprite design.
     * 
     * Default value is <code>Round</code>
     * 
     * @return {string} the value of property <code>type</code>
     * @public
     * @name sap.ino.wall.WallItemSprite#getType
     * @function
     */

    /**
     * Setter for property <code>type</code>.
     * 
     * Default value is <code>Round</code>
     * 
     * @param {string}
     *            sType new value for property <code>type</code>
     * @return {sap.ino.wall.WallItemSprite} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemSprite#setType
     * @function
     */

    sap.ino.wall.WallItemSprite.TITLE_MODE_CHAR_UPPERCASE = 0;
    sap.ino.wall.WallItemSprite.TITLE_MODE_CHAR_LOWERCASE = 1;
    sap.ino.wall.WallItemSprite.TITLE_MODE_NUMBER = 2;

    /**
     * Singleton to return the next number for a new item
     * 
     * @public
     * @static
     * @return {integer} the next number
     */
    sap.ino.wall.WallItemSprite.getNextTitle = function() {
        var sResult = "!";

        // init with random mode
        if (!sap.ino.wall.WallItemSprite._iTitleCount) {
            sap.ino.wall.WallItemSprite._iTitleMode = sap.ino.wall.util.Helper.randomMinMax(0, 2);
            sap.ino.wall.WallItemSprite._iTitleCount = 0;
        }

        // return the next char/number
        switch (sap.ino.wall.WallItemSprite._iTitleMode) {
            case sap.ino.wall.WallItemSprite.TITLE_MODE_NUMBER :
                sap.ino.wall.WallItemSprite._iTitleCount++;
                sResult = String(sap.ino.wall.WallItemSprite._iTitleCount);
                break;
            case sap.ino.wall.WallItemSprite.TITLE_MODE_CHAR_LOWERCASE :
                sResult = String.fromCharCode(97 + sap.ino.wall.WallItemSprite._iTitleCount % 26);
                sap.ino.wall.WallItemSprite._iTitleCount++;
                break;
            case sap.ino.wall.WallItemSprite.TITLE_MODE_CHAR_UPPERCASE :
                /* falls through */
            default :
                sResult = String.fromCharCode(65 + sap.ino.wall.WallItemSprite._iTitleCount % 26);
                sap.ino.wall.WallItemSprite._iTitleCount++;
                break;
        }
        return sResult;
    };

    /**
     * Singleton to update the title counter to show the next number/letter
     * 
     * @public
     * @static
     * @return {integer} the next number
     */
    sap.ino.wall.WallItemSprite.updateNextTitle = function(sTitle) {
        var iNumber;

        sTitle = sTitle.trim();

        if (/^[0-9]+$/.test(sTitle)) { // just digits
            // set count to current number
            iNumber = parseInt(sTitle, 10);
            sap.ino.wall.WallItemSprite._iTitleMode = sap.ino.wall.WallItemSprite.TITLE_MODE_NUMBER;
            sap.ino.wall.WallItemSprite._iTitleCount = iNumber;
        } else if (/^[A-Z]$/.test(sTitle)) { // one uppercase letter
            // set count to current uppercase letter
            sap.ino.wall.WallItemSprite._iTitleMode = sap.ino.wall.WallItemSprite.TITLE_MODE_CHAR_UPPERCASE;
            sap.ino.wall.WallItemSprite._iTitleCount = sTitle.charCodeAt(0) - 65 + 1;
        } else if (/^[a-z]$/.test(sTitle)) { // one lowercase letter
            // set count to current lowercase letter
            sap.ino.wall.WallItemSprite._iTitleMode = sap.ino.wall.WallItemSprite.TITLE_MODE_CHAR_LOWERCASE;
            sap.ino.wall.WallItemSprite._iTitleCount = sTitle.charCodeAt(0) - 97 + 1;
        }
    };

    /**
     * Initializes the control
     * 
     * @private
     */
    sap.ino.wall.WallItemSprite.prototype.init = function() {
        sap.ino.wall.WallItemBase.prototype.init.call(this);

        this.setResizable(true);
    };
    
    /** Setter for the flipped property to suppress re-rendering
    * It calls the base method and sets an additional flag to re-calculate the positioning when resizing 
     * @param {boolean} bFlipped the value
    * @override
    * @returns {this} this pointer for chaining
    * @public
    */
    sap.ino.wall.WallItemSprite.prototype.setFlipped = function (bFlipped) {
        var oColorPicker = this._getColorPicker();

        if (oColorPicker.isOpen()) {
            oColorPicker.close();
        }
        sap.ino.wall.WallItemBase.prototype.setFlipped.apply(this, arguments);
        if (this.getFlipped()) {
            this._bCorrectPositioningAfterFlip = true;
        }
        return this;
    };

    sap.ino.wall.WallItemSprite.prototype.onAfterRendering = function() {
        var fLuminance = sap.ino.wall.util.Helper.getColorLuminance(this.getColor()), oButtonColorSelector = sap.ui.getCore().byId(this.getId() + "-buttonColorSelector");

        // call base class method
        sap.ino.wall.WallItemBase.prototype.onAfterRendering.apply(this, arguments);
        // update background color of button
        if (oButtonColorSelector) {
            sap.ui.getCore().byId(this.getId() + "-buttonColorSelector").$().find(".sapMBtnInner").css("background-color", this.getColor());
        }
        // update color picker icon based on luminosity of the color
        if (fLuminance <= 0.6) {
            this._getButtonColorSelector().addStyleClass("sapInoWallWISpriteColorSelectorButtonBright").removeStyleClass("sapInoWallWISpriteColorSelectorButtonNormal");
        } else {
            this._getButtonColorSelector().addStyleClass("sapInoWallWISpriteColorSelectorButtonNormal").removeStyleClass("sapInoWallWISpriteColorSelectorButtonBright");
        }
    };

    /**
     * Setter for the title property (as in WallItemBase but with line breaks)
     * 
     * @param {string}
     *            sColor color identifier
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemSprite.prototype.setTitle = function(sTitle, bSuppressNotify) {
        if (sTitle !== this.getTitle()) {
            this.setProperty("title", sTitle, true);
            // try updating the next title settings so that when creating the next sprite it will continue with the next
            // number/letter
            sap.ino.wall.WallItemSprite.updateNextTitle(sTitle);
            if (this._isRendered()) {
                // show newlines as entered in text field
                this.$().children(".flippable").find(".front .sapInoWallWITitleText").html(jQuery.sap.encodeHTML(this.getProperty("title")));
                this._adjustFontSize();
            }
            // inform wall that this item has changed a persistence property
            if (this.getParent() && !bSuppressNotify) {
                this.getParent()._notifyItemChanged(this);
            }
        }
        return this;
    };

    /**
     * Changes the color without re-rendering
     * 
     * @override
     * @param (string)
     *            sColor the new value
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemSprite.prototype.setColor = function(sColor, bSuppressNotify) {
        var fLuminance, $front = this.$().children(".flippable").find(".front");

        if (sColor !== this.getColor()) {
            this.setProperty("color", sColor, true);
            if (this._isRendered()) {
                fLuminance = sap.ino.wall.util.Helper.getColorLuminance(sColor);
                // update sprite color
                $front.css("border-color", sap.ino.wall.util.Helper.shadeColor(sColor, -10));
                $front.css("background-color", sColor);
                $front.css("color", (fLuminance <= 0.6 ? "#F5F5F5" : "#232323"));
                $front.css("background-image", sap.ino.wall.util.Helper.addBrowserPrefix("linear-gradient(top, " + sap.ino.wall.util.Helper.shadeColor(sColor, 5) + " 0%, " + sap.ino.wall.util.Helper.shadeColor(sColor, -5) + " 100%)"));
                // update button color
                sap.ui.getCore().byId(this.getId() + "-buttonColorSelector").$().find(".sapMBtnInner").css("background-color", sColor);
                // update color picker icon based on luminosity of the color
                if (fLuminance <= 0.6) {
                    this._getButtonColorSelector().addStyleClass("sapInoWallWISpriteColorSelectorButtonBright").removeStyleClass("sapInoWallWISpriteColorSelectorButtonNormal");
                } else {
                    this._getButtonColorSelector().addStyleClass("sapInoWallWISpriteColorSelectorButtonNormal").removeStyleClass("sapInoWallWISpriteColorSelectorButtonBright");
                }
            }
            // inform wall that this item has changed a persistence property
            if (this.getParent() && !bSuppressNotify) {
                this.getParent()._notifyItemChanged(this);
            }
        }
    };

    /**
     * Changes the type without re-rendering
     * 
     * @override
     * @param (string)
     *            sType the new value
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemSprite.prototype.setType = function(sType) {
        if (sType !== this.getType()) {
            // remove old color
            this.$().children(".flippable").find(".front").toggleClass("sapInoWallWISprite" + this.getType(), false);
            // save property
            this.setProperty("type", sType, true);
            // set new color
            this.$().children(".flippable").find(".front").toggleClass("sapInoWallWISprite" + this.getType(), true);

            // inform wall that this item has changed a persistence property
            if (this.getParent()) {
                this.getParent()._notifyItemChanged(this);
            }
        }
        return this;
    };

    /**
     * Adjusts the font size to the given control size and text width
     * 
     * @protected
     */
    sap.ino.wall.WallItemSprite.prototype._adjustFontSize = function() {
        var sTextLength = this.getTitle().length || 1;

        // subtrat 25% of length (2 = 1.5, 3 = 2.25)
        if (sTextLength > 1) {
            sTextLength -= sTextLength / 4;
        }
        this.$().children(".flippable").find(".sapInoWallWITitleText.sapInoWallWISpriteText").css("line-height", this.getH()).css("font-size", (Math.min(parseInt(this.getW(), 10), parseInt(this.getH(), 10) * 1.5) - 10) / sTextLength);
    };

    /**
     * Hook called when the item has been resized by user interaction
     * 
     * @param {boolean}
     *            bSytemCall true when called by system call and not by user interaction
     * @oaram {float} fDeltaX the amount in px the item has been resized, if < 0 it got smaller, if > 0 is got bigger
     * @oaram {float} fDeltaY the amount in px the item has been resized, if < 0 it got smaller, if > 0 is got bigger
     * 
     * @protected
     */
    sap.ino.wall.WallItemSprite.prototype._onResize = function(bSystemCall, fDeltaX, fDeltaY) {
        var iCurrentW = parseInt(this.getW(), 10), iCurrentH = parseInt(this.getH(), 10);

        // special case: back side is larger than front side
        // this can only happen with sticky notes currently so we fix it here
        if (this.getFlipped() && (iCurrentW < sap.ino.wall.WallConfig._ITEM_MIN_SIZE || this._bAddDeltaWhenResizing)) {
            // when starting with a large size and decreasing it to less than the minimum size we have to remember the
            // negative delta in this mode and add it to the width
            if (fDeltaX < 0 && !this._fDeltaWidthWhenResizing) {
                this._fDeltaWidthWhenResizing = Math.abs(fDeltaX + sap.ino.wall.WallConfig._ITEM_MIN_SIZE - iCurrentW);
            }
            // set internal flag to keep this mode for the whole resizing process
            this._bAddDeltaWhenResizing = true;
            // scale width to the back side's width (subtract padding of 10 from DOM value)
            this.setW(Math.max(sap.ino.wall.WallConfig._ITEM_MIN_SIZE, sap.ino.wall.WallConfig._ITEM_MIN_SIZE + fDeltaX + (this._fDeltaWidthWhenResizing || 0)) + "px");

            // correct X value once (when flipping and the backside is larger than the front it is moved to the left by
            // the browser)
            if (this._bCorrectPositioningAfterFlip) {
                this.setX(parseInt(this.getX(), 10) - Math.abs(iCurrentW - parseInt(this.getW(), 10)) + "px");
                this._bCorrectPositioningAfterFlip = false;
            }
        }
        if (this.getFlipped() && (iCurrentH < sap.ino.wall.WallConfig._ITEM_MIN_SIZE || this._bAddDeltaWhenResizing)) {
            // when starting with a large size and decreasing it to less than the minimum size we have to remember the
            // negative delta in this mode and add it to the width
            if (fDeltaY < 0 && !this._fDeltaHeightWhenResizing) {
                this._fDeltaHeightWhenResizing = Math.abs(fDeltaY + sap.ino.wall.WallConfig._ITEM_MIN_SIZE - iCurrentH);
            }
            // set internal flag to keep this mode for the whole resizing process
            this._bAddDeltaWhenResizing = true;
            // scale height to the back side's height (subtract padding of 5 from DOM value)
            this.setH(Math.max(sap.ino.wall.WallConfig._ITEM_MIN_SIZE, sap.ino.wall.WallConfig._ITEM_MIN_SIZE + fDeltaY + (this._fDeltaHeightWhenResizing || 0)) + "px");
        }

        this._adjustTShirtSize();
        this._adjustFontSize();

        // workaround for no flex support & IE10
        if (!jQuery.support.hasFlexBoxSupport || sap.ui.Device.browser.internet_explorer && sap.ui.Device.browser.version === 10) {
            var iFixHeight = this.$().find(".sapInoWallWISpritePickerContainer").outerHeight() + this.$().find(".sapInoWallWISpriteMulti").outerHeight();
            this.$().children(".flippable").find(".back .sapInoWallWISpriteText").height(this.$().find(".back").height() - iFixHeight - 10);
            // workaround for IE: adjust padding
            this.$().children(".flippable").find(".sapInoWallWISpriteTextTA").css("padding-bottom", "10px");
        }
    };

    /**
     * Hook called when the resize user interaction has finished
     * 
     * @protected
     */
    sap.ino.wall.WallItemSprite.prototype._onResizeEnd = function() {
        this._bAddDeltaWhenResizing = false;
        this._fDeltaWidthWhenResizing = 0;
        this._fDeltaHeightWhenResizing = 0;
    };

    /**
     * Creates a minimalic JSON representation of the item to be stored in the db
     * 
     * @override
     * @returns {object} the JSON object representation of the item
     * @public
     */
    sap.ino.wall.WallItemSprite.prototype.formatToJSON = function() {
        // call the base object's JSON method
        var oJSON = sap.ino.wall.WallItemBase.prototype.formatToJSON.call(this);
        // add properties of this control
        oJSON.color = this.getColor();
        oJSON.type = this.getType();
        oJSON.bgcolor = ""; // TODO: unused
        oJSON.icon = ""; // TODO: unused
        oJSON.image = ""; // TODO: unused
        // return the final object
        return oJSON;
    };

    /*
     * Lazy initialization of the internal control @private @override @returns {sap.m/Button} the button
     */
    sap.ino.wall.WallItemSprite.prototype._getInputTitle = function() {
        var oInput = sap.ino.wall.WallItemBase.prototype._getInputTitle.apply(this, arguments);
        // we don't want to trigger an invalidation here so we set the property directly
        oInput.setProperty("maxLength", 10, true);

        return oInput;
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Button} the button
     */
    sap.ino.wall.WallItemSprite.prototype._getButtonColorSelector = function() {
        var that = this, oControl = this.getAggregation("_buttonColorSelector");

        if (!oControl) {
            // create control
            oControl = new sap.m.Button(this.getId() + "-buttonColorSelector", {
                tooltip : this._oRB.getText("WALL_ITEMLINE_STATUSMSG_COLOR_SELECT"),
                press : function(oEvent) {
                    var oColorPicker = that._getColorPicker();

                    if (oColorPicker.isOpen()) {
                        oColorPicker.close();
                    } else {
                        oColorPicker.openBy(oControl, 0, 0);
                    }
                },
                icon : "sap-icon://palette"
            }).addStyleClass("noflip").addStyleClass("sapInoWallWISpriteColorSelectorButton").addStyleClass("sapInoWallWISpriteColorSelectorButtonNormal");

            // set hidden aggregation without rerendering
            this.setAggregation("_buttonColorSelector", oControl, true);
        }

        return oControl;
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Button} the button
     */
    sap.ino.wall.WallItemSprite.prototype._getColorPicker = function() {
        var that = this, oControl = this.getAggregation("_colorPicker");

        if (!oControl) {
            // create control
            oControl = new sap.ino.wall.ColorPicker(this.getId() + "-colorPicker", {
                color : this.getColor(),
                change : function(oEvent) {
                    that.setColor(oEvent.getParameter("color"));
                }
            });

            // do not set during initialiting colorpicker => bug w/ setting the color to the colorpicker
            oControl.setPlacement(sap.m.PlacementType.Vertical);

            // set hidden aggregation without rerendering
            this.setAggregation("_colorPicker", oControl, true);
        }

        return oControl;
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Select} the select
     */
    sap.ino.wall.WallItemSprite.prototype._getSelectType = function() {
        var that = this, oControl = this.getAggregation("_selectType"), sSelectedItemId = null, oItem, aItems, sType = this.getType(), sKey = null, i = 0;

        if (!oControl) {
            // create select control
            oControl = new sap.m.Select(this.getId() + "-type", {
                width : "100%",
                change : function(oEvent) {
                    that.setType(oEvent.getParameter("selectedItem").getKey());
                }
            }).addStyleClass("sapInoWallWIBSelect").addStyleClass("noflip");

            // add all sprite designs
            for (sKey in sap.ino.wall.SpriteDesign) {
                if (sap.ino.wall.SpriteDesign.hasOwnProperty(sKey)) {
                    oItem = new sap.ui.core.Item({
                        key : sap.ino.wall.SpriteDesign[sKey],
                        text : this._oRB.getText("WALL_ITEMSPRITE_TYPE_" + sap.ino.wall.SpriteDesign[sKey])
                    });
                    oControl.addItem(oItem);
                    // in the same step, define the selected item
                    if (sType === sKey && !sSelectedItemId) {
                        sSelectedItemId = oItem.getId();
                    }
                }
            }

            // set selected item
            oControl.setSelectedItem(sSelectedItemId);

            // set hidden aggregation
            this.setAggregation("_selectType", oControl, true);
        } else {
            // just set the selected item to the current state
            aItems = oControl.getItems();
            for (; i < aItems.length; i++) {
                if (aItems[i].getKey() === sType) {
                    oControl.setSelectedItem(aItems[i]);
                    break;
                }
            }
        }

        return oControl;
    };

})();
}; // end of sap/ino/wall/WallItemSprite.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallItemSpriteRenderer') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallItemSpriteRenderer");

(function() {
    "use strict";

    
    jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

    
    

    /**
     * @class WallItemText renderer.
     * @static
     */
    sap.ino.wall.WallItemSpriteRenderer = sap.ui.core.Renderer.extend(sap.ino.wall.WallItemBaseRenderer);

    /**
     * Adds style classes to the base item {@link sap.ui.core.RenderManager}.
     * 
     * @override
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render output buffer
     */
    sap.ino.wall.WallItemSpriteRenderer.addOuterStyleClasses = function(oRM) {
        oRM.addClass("sapInoWallWISprite");
    };

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be rendered
     */

    sap.ino.wall.WallItemSpriteRenderer.renderItem = function(oRM, oControl) {
        var sColor = oControl.getColor(), sType = oControl.getType(), fLuminance = sap.ino.wall.util.Helper.getColorLuminance(sColor);

        // start wrapper
        oRM.write("<div class=\"flippable\">");

        /* front panel (view) */

        oRM.write("<div id=" + oControl.getId() + "-front");
        oRM.addClass("sapInoWallWISprite");
        oRM.addClass("sapInoWallWISprite" + sType);
        oRM.addClass("front");
        oRM.writeClasses();

        // sprite color and size
        oRM.write("style=\"border-color:" + sap.ino.wall.util.Helper.shadeColor(sColor, -10) + "; background-color:" + sColor + "; color: " + (fLuminance <= 0.6 ? "#F5F5F5" : "#232323") + "; background-image: " + sap.ino.wall.util.Helper.addBrowserPrefix("linear-gradient(top, " + sap.ino.wall.util.Helper.shadeColor(sColor, 5) + " 0%, " + sap.ino.wall.util.Helper.shadeColor(sColor, -5) + " 100%)") + (oControl.getW() ? "; width: " + oControl.getW() : "") + (oControl.getH() ? "; height: " + oControl.getH() : "") + "\"");
        oRM.write(">");

        if (!sap.ino.wall.config.Config.getDebugPositioning()) {
            // title (only 1 char)
            oRM.write("<div class=\"sapInoWallWITitleText sapInoWallWISpriteText\">");
            oRM.writeEscaped(oControl.getTitle(), true);
            oRM.write("</div>");
        } else {
            oRM.write("front");
        }

        // resize handle
        this.renderResizeHandler(oRM, oControl);

        // end front side
        oRM.write("</div>");

        /* back panel (edit) */

        oRM.write("<div id=" + oControl.getId() + "-back");
        oRM.addClass("sapInoWallWISprite");
        oRM.addClass("back");
        oRM.writeClasses();
        oRM.write("style=\"" + (oControl.getW() ? "; width: " + oControl.getW() : "") + (oControl.getH() ? "; height: " + oControl.getH() : "") + "\"");
        oRM.write(">");

        if (!sap.ino.wall.config.Config.getDebugPositioning()) {
            // title
            oRM.write("<div class=\"sapInoWallWITitleEdit\">");
            oRM.renderControl(oControl._getInputTitle().setProperty("placeholder", oControl._oRB.getText("WALL_ITEMSPRITE_PLACEHOLDER_TITLE"), true));
            oRM.write("</div>");
            oRM.renderControl(oControl._getSelectType());
            oRM.renderControl(oControl._getButtonColorSelector());
        } else {
            oRM.write("back");
        }

        // resize handle
        this.renderResizeHandler(oRM, oControl);

        // end back side
        oRM.write("</div>");

        // back button
        oRM.renderControl(oControl._getButtonFlip());

        // end wrapper
        oRM.write("</div>");
    };
    
})();
}; // end of sap/ino/wall/WallItemSpriteRenderer.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallItemStickerRenderer') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallItemStickerRenderer");

(function() {
	"use strict";

	
	jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

	
	
	
	

	/**
	 * @class WallItemText renderer.
	 * @static
	 */
	sap.ino.wall.WallItemStickerRenderer = sap.ui.core.Renderer.extend(sap.ino.wall.WallItemBaseRenderer);

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager}
	 *            oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control}
	 *            oControl an object representation of the control that should be rendered
	 */

	sap.ino.wall.WallItemStickerRenderer.renderItem = function(oRM, oControl) {
		var sId = oControl.getId(),
			sKey = null;

		// start wrapper
		oRM.write("<div class=\"flippable\">");

		oRM.write("<label id=\"" + oControl.getId() +
			"-wallitem-description\" class=\"sapInoWallItemDescription\" style=\"height:0px;width:0px;overflow:hidden;position:absolute;\">");
		// this is only to prevent text bundle errors if color is not yet set in model
		var sColor = oControl._oRB.getText("CRTL_WALL_ITEMSTICKER_COLOR_" + (oControl.getColor() ? oControl.getColor().toUpperCase() : "YELLOW"));
		var sText = sap.ino.wall.util.Helper.stripTags(oControl.getTitle());
		if (sText && sText.trim() !== "") {
			oRM.write(oControl._oRB.getText("CRTL_WALL_ITEMSTICKER_EXP_READERTEXT", [sColor, sText]));
		} else {
			oRM.writeEscaped(oControl._oRB.getText("CRTL_WALL_ITEMSTICKER_EXP_READERTEXT_EMPTY", [sColor]));
		}
		oRM.write("</label>");

		/* front panel (view) */

		oRM.write("<div id=" + oControl.getId() + "-front");
		oRM.addClass("sapInoWallWISticker");
		oRM.addClass("sapInoWallWISticker" + oControl.getColor());
		oRM.addClass("front");
		oRM.writeClasses();
		oRM.write("style=\"" + (oControl.getW() ? "; width: " + oControl.getW() : "") + (oControl.getH() ? "; height: " + oControl.getH() : "") +
			"\"");
		oRM.write(">");

		if (!sap.ino.wall.config.Config.getDebugPositioning()) {
			// text
			oRM.write("<div id=\"" + oControl.getId() +
				"-front-text\" class=\"sapInoWallScrollable sapInoWallWITitleText sapInoWallWIStickerText sapInoWallWIBreakWord");
			// TODO: remove this later
			if (sap.ino.wall.config.Config.getEnableRichtTextEditing()) {
				oRM.write(" sapInoWallWITextEditorNoBold sapInoWallWIRichText");
			}
			oRM.write("\">");
			if (sap.ino.wall.config.Config.getEnableRichtTextEditing()) {
				// TODO: security (sanitize HTML, close tags)
				// TODO: remove <b> wrapper when transisition to new title
				// oRM.write(sap.ino.wall.util.Helper.stripTags((oControl.getTitle()[0] === "<" ? oControl.getTitle() : "<b>" + oControl.getTitle() + "</b>"), "<div><br><b><strong><u><i><em><ol><ul><li><font>"));
				var content = oControl.getTitle() || ""
				content = content[0] === '<' ? content : '<b>' + content + '</b>'
				try {
					var htmlContent = jQuery.parseHTML(content, false)
						// filter scripts
					if (htmlContent && htmlContent.length > 1) {
						// if user input multi item in single level like <a/><a/>, convert it to <div><a/><a/></div>
						htmlContent = jQuery.parseHTML("<div>" + content + "</div>", false);
					}
					if (htmlContent) {
						content = htmlContent[0].outerHTML
					}
				} catch (e) { // failed
				}
				oRM.write(content);
			} else {
				oRM.write(sap.ino.wall.util.Formatter.nl2br(jQuery.sap.encodeHTML(oControl.getTitle())));
			}
			oRM.write("</div>");
		} else {
			oRM.write("front");
		}

		// resize handle
		this.renderResizeHandler(oRM, oControl);

		// end front side
		oRM.write("</div>");

		/* back panel (edit) */

		oRM.write("<div id=" + oControl.getId() + "-back");
		oRM.addClass("sapInoWallWISticker");
		oRM.addClass("sapInoWallWISticker" + oControl.getColor());
		oRM.addClass("back");
		oRM.writeClasses();
		oRM.write("style=\"" + (oControl.getW() ? "; width: " + oControl.getW() : "") + (oControl.getH() ? "; height: " + oControl.getH() : "") +
			"\"");
		oRM.write(">");

		if (!sap.ino.wall.config.Config.getDebugPositioning()) {
			// text
			oRM.write("<div class=\"sapInoWallWIStickerText\">");
			oRM.renderControl(oControl._getTextareaDescription());
			oRM.write("</div>");
			oRM.write("<div class=\"sapInoWallWIStickerPickerContainer\" role=\"toolbar\" aria-label=\"" + oControl._oRB.getText(
				"CRTL_WALL_ITEMSTICKER_EXP_BGCOLOR_TOOLBAR") + "\">");
			for (sKey in sap.ino.wall.StickerColor) {
				if (sap.ino.wall.StickerColor.hasOwnProperty(sKey)) {
					oRM.write('<div role="button" aria-pressed="' + (sKey === oControl.getColor()) + '" tabindex="0" aria-label="' + oControl._oRB.getText(
							"CRTL_WALL_ITEMSTICKER_EXP_BGCOLOR_" + sKey.toUpperCase()) + '" data-sap-color="' + sKey +
						'" class="sapInoWallStickerColorPicker sapInoWallWISticker' + sKey + ' noflip ' + (sKey === oControl.getColor() ? 'active' : '') +
						'" onclick="javascript: sap.ui.getCore().byId(\'' + sId + '\').setColor(\'' + sKey + '\'); return false;"></div>');
				}
			}
			oRM.write("</div>");
		} else {
			oRM.write("back");
		}

		// resize handle
		this.renderResizeHandler(oRM, oControl);

		// end back side
		oRM.write("</div>");

		oRM.write("<div class=\"sapInoWallWIFlipBackButtonGroup\" role=\"group\">");
		// back button
		oRM.renderControl(oControl._getButtonFlip());
		oRM.write("</div>");

		// end wrapper
		oRM.write("</div>");
	};

})();
}; // end of sap/ino/wall/WallItemStickerRenderer.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallItemTextRenderer') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallItemTextRenderer");

(function() {
    "use strict";

    
    jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

    

    /**
     * @class WallItemText renderer.
     * @static
     */
    sap.ino.wall.WallItemTextRenderer = sap.ui.core.Renderer.extend(sap.ino.wall.WallItemBaseRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be rendered
     */

    sap.ino.wall.WallItemTextRenderer.renderItem = function(oRM, oControl) {
        // start wrapper
        oRM.write("<div class=\"flippable\">");

        /* front panel (view) */

        oRM.write("<div id=" + oControl.getId() + "-front");
        oRM.addClass("sapInoWallWIT");
        oRM.addClass("front");
        oRM.writeClasses();
        oRM.write("style=\"" + (oControl.getW() ? "; width: " + oControl.getW() : "") + (oControl.getH() ? "; height: " + oControl.getH() : "") + "\"");
        oRM.write(">");

        if (!sap.ino.wall.config.Config.getDebugPositioning()) {
            // title
            oRM.write("<div class=\"sapInoWallWITitle sapInoWallWITitleText\">");
            oRM.writeEscaped(oControl.getTitle());
            oRM.write("</div>");

            // description
            oRM.write("<div class=\"sapInoWallWITDescription sapInoWallWITDescriptionText\">");
            oRM.renderControl(oControl._getScrollContainerDescription());

            oRM.write("</div>");
        } else {
            oRM.write("front");
        }

        // resize handle
        this.renderResizeHandler(oRM, oControl);

        // end front side
        oRM.write("</div>");

        /* back panel (edit) */

        oRM.write("<div id=" + oControl.getId() + "-back");
        oRM.addClass("sapInoWallWIT");
        oRM.addClass("gradients");
        oRM.addClass("back");
        oRM.writeClasses();
        oRM.write("style=\"" + (oControl.getW() ? "; width: " + oControl.getW() : "") + (oControl.getH() ? "; height: " + oControl.getH() : "") + "\"");
        oRM.write(">");

        if (!sap.ino.wall.config.Config.getDebugPositioning()) {
            // title
            oRM.write("<div class=\"sapInoWallWITitleEdit\">");
            oRM.renderControl(oControl._getInputTitle().setProperty("placeholder", oControl._oRB.getText("WALL_ITEMTEXT_PLACEHOLDER_TITLE"), true));
            oRM.write("</div>");

            // description
            oRM.write("<div class=\"sapInoWallWITDescription\">");
            oRM.renderControl(oControl._getTextareaDescription());
            oRM.write("</div>");
        } else {
            oRM.write("back");
        }

        // resize handle
        this.renderResizeHandler(oRM, oControl);

        // end back side
        oRM.write("</div>");

        // back button
        oRM.renderControl(oControl._getButtonFlip());

        // end wrapper
        oRM.write("</div>");
    };
    
})();
}; // end of sap/ino/wall/WallItemTextRenderer.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallItemVideo') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallItemVideo");

(function() {
    "use strict";

    
    

    /**
     * Constructor for a new WallItemVideo.
     * 
     * Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and
     * associated objects as well as event handlers.
     * 
     * If the name of a setting is ambiguous (e.g. a property has the same name as an event), then the framework assumes
     * property, aggregation, association, event in that order. To override this automatic resolution, one of the
     * prefixes "aggregation:", "association:" or "event:" can be added to the name of the setting (such a prefixed name
     * must be enclosed in single or double quotes).
     * 
     * The supported settings are:
     * <ul>
     * <li>Properties
     * <ul>
     * <li>{@link #getStatus status} : string (default: 'Normal')</li>
     * <li>{@link #getPreview preview} : sap.ui.core.URI</li>
     * <li>{@link #getVideo video} : sap.ui.core.URI</li>
     * </ul>
     * </li>
     * <li>Aggregations
     * <ul>
     * </ul>
     * </li>
     * <li>Associations
     * <ul>
     * </ul>
     * </li>
     * <li>Events
     * <ul>
     * </ul>
     * </li>
     * </ul>
     * 
     * 
     * In addition, all settings applicable to the base type
     * {@link sap.ino.wall.WallItemBase#constructor sap.ino.wall.WallItemBase} can be used as well.
     * 
     * @param {string}
     *            [sId] id for the new control, generated automatically if no id is given
     * @param {object}
     *            [mSettings] initial settings for the new control
     * 
     * @class Add your documentation for the WallItemImage
     * @extends sap.ino.wall.WallItemBase
     * @version 1.16.4
     * 
     * @constructor
     * @public
     * @name sap.ino.wall.WallItemVideo
     * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
     */
    sap.ino.wall.WallItemBase.extend("sap.ino.wall.WallItemVideo", {
        metadata : {
            properties : {
                "status" : {
                    type : "string",
                    group : "Behavior",
                    defaultValue : 'Normal'
                },
                "preview" : {
                    type : "sap.ui.core.URI",
                    group : "Behavior",
                    defaultValue : null
                },
                "video" : {
                    type : "sap.ui.core.URI",
                    group : "Behavior",
                    defaultValue : null
                }
            },
            aggregations : {
                "textAreaDescription" : {
                    type : "sap.m.TextArea",
                    multiple : false,
                    visibility : "hidden"
                },
                "imagePreview" : {
                    type : "sap.m.Image",
                    multiple : false,
                    visibility : "hidden"
                },
                "_busyIndicator" : {
                    type : "sap.m.BusyIndicator",
                    multiple : false,
                    visibility : "hidden"
                },
                "_inputVideo" : {
                    type : "sap.m.Input",
                    multiple : false,
                    visibility : "hidden"
                }
            }
        }
    });

    /**
     * Creates a new subclass of class sap.ino.wall.WallItemVideo with name <code>sClassName</code> and enriches it
     * with the information contained in <code>oClassInfo</code>.
     * 
     * <code>oClassInfo</code> might contain the same kind of informations as described in
     * {@link sap.ui.core.Element.extend Element.extend}.
     * 
     * @param {string}
     *            sClassName name of the class to be created
     * @param {object}
     *            [oClassInfo] object literal with informations about the class
     * @param {function}
     *            [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to
     *            sap.ui.core.ElementMetadata.
     * @return {function} the created class / constructor function
     * @public
     * @static
     * @name sap.ino.wall.WallItemVideo.extend
     * @function
     */

    /**
     * Getter for property <code>status</code>. The status of the image item. If set to "Busy" a busy indicator will
     * overlay the preview to indicate that the image is currently uploaded.
     * 
     * Default value is <code>Normal</code>
     * 
     * @return {string} the value of property <code>status</code>
     * @public
     * @name sap.ino.wall.WallItemVideo#getStatus
     * @function
     */

    /**
     * Setter for property <code>status</code>.
     * 
     * Default value is <code>Normal</code>
     * 
     * @param {string}
     *            sStatus new value for property <code>status</code>
     * @return {sap.ino.wall.WallItemVideo} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemVideo#setStatus
     * @function
     */

    /**
     * Getter for property <code>preview</code>. The preview image URI.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @return {sap.ui.core.URI} the value of property <code>preview</code>
     * @public
     * @name sap.ino.wall.WallItemVideo#getPreview
     * @function
     */

    /**
     * Setter for property <code>preview</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @param {sap.ui.core.URI}
     *            sPreview new value for property <code>preview</code>
     * @return {sap.ino.wall.WallItemVideo} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemVideo#setPreview
     * @function
     */

    /**
     * Getter for property <code>video</code>. The large video URI to be embedded when clicking on the preview.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @return {sap.ui.core.URI} the value of property <code>video</code>
     * @public
     * @name sap.ino.wall.WallItemVideo#getVideo
     * @function
     */

    /**
     * Setter for property <code>video</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @param {sap.ui.core.URI}
     *            sVideo new value for property <code>video</code>
     * @return {sap.ino.wall.WallItemVideo} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemVideo#setVideo
     * @function
     */

    /*******************************************************************************************************************
     * overloaded setters to supress rendering and update ui
     ******************************************************************************************************************/

    sap.ino.wall.WallItemVideo.prototype.setPreview = function(sURI) {
        var oOldImage = this.getAggregation("imagePreview");

        this.setProperty("preview", sURI, false);
        if (oOldImage) {
            oOldImage.destroy(true);
        }
        this.setAggregation("imagePreview", new sap.m.Image({
            src : sURI,
            densityAware : false
        }), true);
        this.getAggregation("imagePreview").setWidth("240px");

        // set an error image if something went wrong
        if (!this.getAggregation("imagePreview") || !this.getAggregation("imagePreview").getSrc()) { // TODO: better
            // error
            // handling
            this.setAggregation("imagePreview", new sap.m.Image({
                src : "",
                densityAware : false,
                decorative : true
            }).addStyleClass("sapInoWallWIVVideoError"), true);
        }

        if (this._isRendered()) {
            // render new item

            this._renderItemIntoContainer(this.$().find("#" + this.getId() + "-imagePreviewWrapper"), this.getAggregation("imagePreview"), true, false);

            // inform wall that this item has changed a persistence property
            if (this.getParent()) {
                this.getParent()._notifyItemChanged(this);
            }
        }
        return this;
    };

    sap.ino.wall.WallItemVideo.prototype.setVideo = function(sURI) {
        var oOldImage = this.getAggregation("imagePreview"), aVideoIds = null, sVideoId = null;
        
        if (sURI && sURI.indexOf("http://") != 0 && sURI.indexOf("https://") != 0 && sURI.indexOf("mailto:") != 0) {
            sURI = "http://" + sURI;
        }

        if (jQuery.sap.validateUrl(sURI)) {
            
            this.setProperty("video", sURI, false);
            if (oOldImage) {
                oOldImage.destroy();
            }
            
            this._getInputVideo().setValueState("None");
        
            // try to extract a new preview image for the video URL by retrieving the id from the URL
            if (/www\.youtube\.com/.test(sURI)) {
                // youtube id extraction
                // format: www.youtube.com/watch?v=[id]
                aVideoIds = /www\.youtube\.com\/watch\?v=([^&]+)/.exec(sURI);
                if (!aVideoIds) {
                    // format: www.youtube.com/v/[id]
                    aVideoIds = /www\.youtube\.com\/v\/([^&]+)/.exec(sURI);
                }
                if (!aVideoIds) {
                    // format: www.youtube.com/embed/[id]
                    aVideoIds = /www\.youtube\.com\/embed\/([^?]+)/.exec(sURI);
                }
                if (aVideoIds) {
                    sVideoId = aVideoIds[1];
                    this.setPreview("https://img.youtube.com/vi/" + sVideoId + "/mqdefault.jpg");
                }
            } else if (/youtu\.be/.test(sURI)) {
                // youtube short URL
                aVideoIds = /youtu\.be\/([^?]+)/.exec(sURI);
                if (aVideoIds) {
                    sVideoId = aVideoIds[1];
                    this.setPreview("https://img.youtube.com/vi/" + sVideoId + "/mqdefault.jpg");
                }
            }
        }
        else {
            this._getInputVideo().setValueState("Error");
        }

        return this;
    };

    /*******************************************************************************************************************
     * overloaded setters to supress rendering and update ui
     ******************************************************************************************************************/

    sap.ino.wall.WallItemVideo.prototype.setTitle = function(sTitle, bSuppressNotify) {
        sap.ino.wall.WallItemBase.prototype.setTitle.apply(this, [sTitle, bSuppressNotify]);
        if (sTitle !== this._oRB.getText("WALL_ITEMVIDEO_NEW_TEXT")) {
            this._getInputTitle().setProperty("value", sTitle, true);
            this._getInputTitle().$().children("input").attr("value", sTitle);
        }
    };

    /*
     * Lazy initialization of the internal dialog @private @returns {sap.m/Button} the button
     */

    sap.ino.wall.WallItemVideo.prototype._getBusyIndicator = function() {
        var oBusyIndicator = this.getAggregation("_busyIndicator");

        if (!oBusyIndicator) {
            // create control
            oBusyIndicator = new sap.m.BusyIndicator(this.getId() + "-busy").addStyleClass("sapInoWallIndicatorBusy");

            // set hidden aggregation without rerendering
            this.setAggregation("_busyIndicator", oBusyIndicator, true);
        }

        return oBusyIndicator;
    };

    /*
     * Lazy initialization of the internal dialog @private @returns {sap.m/Button} the button
     */
    sap.ino.wall.WallItemVideo.prototype._getImagePreview = function() {
        var oPreview = this.getAggregation("imagePreview");

        if (!oPreview) {
            oPreview = new sap.m.Image({
                src : "",
                densityAware : false
            }).addStyleClass("sapInoWallWIVVideoDefault");
            // set hidden aggregation without rerendering
            this.setAggregation("imagePreview", oPreview, true);
        }
        return oPreview;
    };

    /*
     * Lazy initialization of the internal dialog @private @returns {sap.m/Button} the button
     */
    sap.ino.wall.WallItemVideo.prototype._getInputVideo = function() {
        var that = this, oInput = this.getAggregation("_inputVideo");

        if (!oInput) {
            // create control
            oInput = new sap.m.Input({
                value : sap.ino.wall.util.Formatter.escapeBindingCharacters(this.getVideo()),
                placeholder : this._oRB.getText("WALL_ITEMVIDEO_PLACEHOLDER_LINK"),
                change : function(oEvent) {
                    that.setVideo(oEvent.getParameter("newValue"));
                }
            }).addStyleClass("sapInoWallWIVVideo");

            // set hidden aggregation without rerendering
            this.setAggregation("_inputVideo", oInput, true);
        }

        return oInput;
    };

    /*
     * Shows/hides a busy indicator when uploading imaged without rerendering @override
     */
    sap.ino.wall.WallItemVideo.prototype.setStatus = function(sStatus) {
        this.setProperty("status", sStatus, true);
        if (this._isRendered()) {
            if (this.getStatus() === "Busy") {
                sap.ui.getCore().byId(this.getId() + "-busy").removeStyleClass("sapInoWallInvisible");
                sap.ui.getCore().byId(this.getId() + "-preview").addStyleClass("sapInoWallImageBusy");
            } else {
                sap.ui.getCore().byId(this.getId() + "-busy").addStyleClass("sapInoWallInvisible");
                sap.ui.getCore().byId(this.getId() + "-preview").removeStyleClass("sapInoWallImageBusy");
            }
        }
    };

    /**
     * creates a minimalic JSON representation of the item to be stored in the db
     * 
     * @param {string}
     *            sColor color identifier
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemVideo.prototype.formatToJSON = function() {
        // call the base object's JSON method
        var oJSON = sap.ino.wall.WallItemBase.prototype.formatToJSON.call(this);
        // add properties of this control
        oJSON.content.video = this.getVideo();
        oJSON.content.preview = this.getPreview();
        // return the final object
        return oJSON;
    };

})();
}; // end of sap/ino/wall/WallItemVideo.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallItemVideoRenderer') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallItemVideoRenderer");

(function() {
    "use strict";

    
    jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

    

    /**
     * @class WallItemVideo renderer.
     * @static
     */
    sap.ino.wall.WallItemVideoRenderer = sap.ui.core.Renderer.extend(sap.ino.wall.WallItemBaseRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be rendered
     */

    sap.ino.wall.WallItemVideoRenderer.renderItem = function(oRM, oControl) {
        var oInputTitle, oBusyIndicator = oControl._getBusyIndicator(), oPreview = oControl._getImagePreview();

        // start wrapper
        oRM.write("<div class=\"flippable sapInoWallWIVideo\">");

        /* front panel (view) */

        // black solid border
        oRM.write("<div id=" + oControl.getId() + "-front");
        oRM.addClass("sapInoWallWIV");
        oRM.addClass("gradients");
        oRM.addClass("front");
        oRM.writeClasses();
        oRM.write(">");

        // black border
        oRM.write("<div id=" + oControl.getId() + "-frontOuterOuter");
        oRM.addClass("sapInoWallWIVOuterOuter");
        oRM.writeClasses();
        oRM.write(">");

        // black film dots
        oRM.write("<div id=" + oControl.getId() + "-frontOuter");
        oRM.addClass("sapInoWallWIVOuter");
        oRM.writeClasses();
        oRM.write(">");

        // black background and padding
        oRM.write("<div id=" + oControl.getId() + "-frontInner");
        oRM.addClass("sapInoWallWIVInner");
        oRM.writeClasses();
        oRM.write(">");

        // add busy state to preview
        if (oControl.getStatus() === "Busy") {
            oPreview.addStyleClass("sapInoWallImageBusy");
        }

        // image wrapper
        oRM.write('<div id="' + oControl.getId() + '-imagePreviewWrapper" style="min-height: 117px">');

        // image
        if (oPreview) {
            oRM.renderControl(oPreview.addStyleClass("noflip").attachTap(function(oEvent) {
                var oVideoDialog = null, oSegmentedButton;
    
                if (oControl._bMoving) {
                    return;
                }
    
                oSegmentedButton = new sap.m.SegmentedButton({
                    width : "100%",
                    buttons : [new sap.m.Button(oControl.getId() + "-buttonS", {
                        icon : "sap-icon://play",
                        width : "25%",
                        text : "S"
                    }), new sap.m.Button(oControl.getId() + "-buttonM", {
                        icon : "sap-icon://play",
                        width : "25%",
                        text : "M"
                    }), new sap.m.Button(oControl.getId() + "-buttonL", {
                        icon : "sap-icon://play",
                        width : "25%",
                        text : "L"
                    }), new sap.m.Button(oControl.getId() + "-buttonFS", {
                        icon : "sap-icon://full-screen",
                        width : "25%",
                        text : "FS"
                    })],
                    select : function(oEvent) {
                        var selectedId = oEvent.getParameter('id');
                        if (selectedId === oControl.getId() + "-buttonS") {
                            oVideoDialog.setStretch(false);
                            // TODO: don't know why this does not work but on HTML control calling $() method returns []
                            // oVideoDialog.getContent()[0].$().attr("width", "320").attr("height", "240");
                            oVideoDialog.$().find("iframe").attr("width", "320").attr("height", "240");
                        } else if (selectedId === oControl.getId() + "-buttonM") {
                            oVideoDialog.setStretch(false);
                            oVideoDialog.$().find("iframe").attr("width", "640").attr("height", "390");
                        } else if (selectedId === oControl.getId() + "-buttonL") {
                            oVideoDialog.setStretch(false);
                            oVideoDialog.$().find("iframe").attr("width", "845").attr("height", "480");
                        } else if (selectedId === oControl.getId() + "-buttonFS") {
                            oVideoDialog.setStretch(true);
                            // resize video after dialog has put itself to fullscreen size
                            setTimeout(function() {
                                oVideoDialog.$().find("iframe").attr("width", "100%").attr("height", oVideoDialog.$().find(".sapMDialogScroll").height());
                            }, 0);
                        }
                    }
                }).addStyleClass("sapInoWallWIVSizes");
                oSegmentedButton.setSelectedButton(oSegmentedButton.getButtons()[1]); // m
    
                // workaround to fix flickering caused by css measurement in SegmentedButton
                oSegmentedButton._fCalcBtnWidth = function() {
                    // do nothing here
                };
                oVideoDialog = new sap.m.Dialog({
                    stretch : sap.ui.Device.system.phone,
                    horizontalScrolling : false,
                    verticalScrolling : false,
                    afterOpen : function() {
                        // make video full-screen on phone
                        if (sap.ui.Device.system.phone) {
                            oVideoDialog.$().find("iframe").attr("width", "100%").attr("height", oVideoDialog.$().find(".sapMDialogSection").height());
                        }
                    },
                    customHeader : new sap.m.Bar({
                        contentLeft : [sap.ui.core.IconPool.createControlByURI({
                            src : "sap-icon://video"
                        }, sap.m.Image).addStyleClass("sapInoWallWIVDialogIcon"), new sap.m.Label({
                            text : oControl.getTitle(),
                        }).addStyleClass("sapInoWallWIVDialog")],
                        contentRight : new sap.m.Button({
                            icon : "sap-icon://decline",
                            press : function() {
                                oVideoDialog.close();
                                oVideoDialog.destroy();
                                oVideoDialog = null;
                                oSegmentedButton.destroy();
                                oSegmentedButton = null;
                            }
                        })
                    }),
                }).addStyleClass("sapInoWallWIVDialog");
    
                // only show size adjustments and scrollbars on tablet and desktop devices
                if (!sap.ui.Device.system.phone) {
                    oVideoDialog.setHorizontalScrolling(true);
                    oVideoDialog.setVerticalScrolling(true);
                    oVideoDialog.setSubHeader(new sap.m.Bar({
                        contentLeft : [oSegmentedButton]
                    }));
                }
    
                if (/youtu\.be/.test(oControl.getVideo())) {
                    // youtube short URL
                    var sVideoId = /youtu\.be\/(.*)/.exec(oControl.getVideo())[1];
                    oVideoDialog.addContent(new sap.ui.core.HTML({
                        content : '<iframe width="640" height="390" id="' + oControl.getId() + '-video" src="https://www.youtube.com/embed/' + sVideoId + '" frameborder="0" allowfullscreen></iframe>',
                        sanitizeContent : true
                    }));
                } else if (/www\.youtube\.com/.test(oControl.getVideo())) {
                    var sVideoId = /www.youtube.com\/watch\?v=(.*)/.exec(oControl.getVideo())[1];
                    oVideoDialog.addContent(new sap.ui.core.HTML({
                        content : '<iframe width="640" height="390" id="' + oControl.getId() + '-video" src="https://www.youtube.com/embed/' + sVideoId + '" frameborder="0" allowfullscreen></iframe>',
                        sanitizeContent : true
                    }));
                } else {
                    oVideoDialog.destroy();
                    return false;
                }
                oVideoDialog.open();
            }));
        }
        
        // wrapper end
        oRM.write("</div>");

        // render a busy indicator
        if (oControl.getStatus() !== "Busy") {
            oBusyIndicator.addStyleClass("sapInoWallInvisible");
        }
        oRM.renderControl(oBusyIndicator);

        if (!sap.ino.wall.config.Config.getDebugPositioning()) {
            // title
            oRM.write("<div class=\"sapInoWallWITitle sapInoWallWITitleText\">");
            oRM.writeEscaped(oControl.getTitle());
            oRM.write("</div>");
        } else {
            oRM.write("front");
        }

        oRM.write("</div>");
        oRM.write("</div>");
        oRM.write("</div>");
        oRM.write("</div>");

        /* back panel (edit) */

        oRM.write("<div id=" + oControl.getId() + "-back");
        oRM.addClass("sapInoWallWIV");
        oRM.addClass("gradients");
        oRM.addClass("back");
        oRM.writeClasses();
        oRM.write(">");

        // black film dots
        oRM.write("<div id=" + oControl.getId() + "-frontOuter");
        oRM.addClass("sapInoWallWIVOuter");
        oRM.writeClasses();
        oRM.write(">");

        // black background and padding
        oRM.write("<div id=" + oControl.getId() + "-frontInner");
        oRM.addClass("sapInoWallWIVInner");
        oRM.writeClasses();
        oRM.write(">");

        if (!sap.ino.wall.config.Config.getDebugPositioning()) {
            // title
            oRM.write("<div class=\"sapInoWallWITitleEdit\">");
            oInputTitle = oControl._getInputTitle().setProperty("placeholder", oControl._oRB.getText("WALL_ITEMVIDEO_PLACEHOLDER_TITLE"), true);
            oRM.renderControl(oInputTitle);
            oRM.write("</div>");

            // video URL
            oRM.write("<div class=\"sapInoWallWIVVideoEdit\">");
            oRM.renderControl(oControl._getInputVideo());
            oRM.write("</div>");
            oRM.write("<div class=\"sapInoWallWIVEdithint\">");
            oRM.write(oControl._oRB.getText("WALL_ITEMVIDEO_EDITHINT"));
            oRM.write("</div>");
        } else {
            oRM.write("back");
        }

        oRM.write("</div>");
        oRM.write("</div>");
        oRM.write("</div>");

        // back button
        oRM.renderControl(oControl._getButtonFlip());

        // end wrapper
        oRM.write("</div>");
    };

})();
}; // end of sap/ino/wall/WallItemVideoRenderer.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallRenderer') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallRenderer");

(function() {
    "use strict";

    
    
    

    /**
     * @class wall renderer.
     * @static
     */
    sap.ino.wall.WallRenderer = {};

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be rendered
     */
    sap.ino.wall.WallRenderer.render = function(oRM, oControl) {
        var i = 0, aItems = oControl.getItems(), sBackgroundColor = oControl.getBackgroundColor();

        // we never want to re-render the wall while working with the wall items so we log a warning to detect
        // unnecessary re-renderings
        sap.ino.wall.util.Logger.warning("Wall rerendering for \"" + oControl.getId() + "\" (sId: " + oControl.getStorageId() + ") was triggered!");

        // write the HTML into the render manager
        oRM.write("<div");
        oRM.writeControlData(oControl);
        oRM.write("class=\"sapInoWallWOuter\">");

        oRM.write("<div id=\"" + oControl.getId() + "-wall-selector-begin\" style=\"height:0px;width:0px;overflow:hidden\" class=\"sapInoWallSelectorBegin\" tabindex=\"0\"></div>");

        // the inner container contains all the items
        oRM.write("<div id=\"" + oControl.getId() + "-inner\" class=\"sapInoWallWInner\" aria-live=\"polite\" role=\"region\"");
        if (!sBackgroundColor) {
            if (oControl.getBackgroundImage().indexOf("http://") === 0 || oControl.getBackgroundImage().indexOf("https://") === 0) {
                oRM.addStyle("background-image", "url(" + oControl.getBackgroundImage() + ")");
                if (oControl.getBackgroundImageTiled()) {
                    oRM.addStyle("background-position", "initial");
                    oRM.addStyle("background-repeat", "repeat");
                } else {
                    oRM.addStyle("background-position", "50% 50%");
                    oRM.addStyle("background-repeat", "no-repeat");
                }
                oRM.addStyle("background-size", oControl.getBackgroundImageZoom() + "%");
            } else {
                oRM.addStyle("background-image", "url(/sap/ino/ngui/sap/ino/assets/img/wall/bg/" + oControl.getBackgroundImage() + ")");
                oRM.addStyle("background-position", "initial");
                oRM.addStyle("background-repeat", "repeat");
            }
        } else {
            oRM.addStyle("background-color", "#" + sBackgroundColor);
            oRM.addStyle("background-image", sap.ino.wall.util.Helper.addBrowserPrefix("linear-gradient(top, " + sap.ino.wall.util.Helper.shadeColor(sBackgroundColor, 10) + " 0%, " + sap.ino.wall.util.Helper.shadeColor(sBackgroundColor, -10) + " 100%)"));
        }
        oRM.writeStyles();
        oRM.writeAttribute("tabindex", "-1");
        oRM.write(">"); // span element
        for (i = 0; i < aItems.length; i++) {
            oRM.renderControl(aItems[i]);
        }

        if (sap.ino.wall.config.Config.getDebugPositioning()) {
            // show bounding box
            oRM.write("<div id=" + oControl.getId() + "-boundingBox");
            oRM.addClass("sapInoWallWBB");
            oRM.writeClasses();
            oRM.write("></div>");
            // show cluster box
            oRM.write("<div id=" + oControl.getId() + "-clusterBox");
            oRM.addClass("sapInoWallWCB");
            oRM.writeClasses();
            oRM.write("></div>");
        }

        oRM.write("</div>");

        // render the trash bin
        oRM.renderControl(oControl._oHLTrashAbove);
        oRM.renderControl(oControl._oHLTrash);

        // render the selection rectangle
        oRM.renderControl(oControl._oSelectionRectangle);

        // render the lock
        oRM.renderControl(oControl._oLock);

        // render the template indicator
        oRM.renderControl(oControl._oTemplateIndicator);

        oRM.write("<div id=\"" + oControl.getId() + "-wall-selector\" class=\"sapInoWallSelector\" tabindex=\"-1\" aria-labelledby=\"" + oControl.getId() + "-wall-description\"></div>");

        oRM.write("<div id=\"" + oControl.getId() + "-wall-description\" class=\"sapInoWallDescription\" style=\"height:0px;width:0px;overflow:hidden;position:absolute;\">");
        oRM.writeEscaped(oControl._oRB.getText("CRTL_WALL_DESCRIPTION", [oControl.getTitle()]));
        oRM.write("</div>");

        oRM.write("<div id=\"" + oControl.getId() + "-wall-selector-end\" style=\"height:0px;width:0px;overflow:hidden\" class=\"sapInoWallSelectorEnd\" tabindex=\"0\"></div>");

        oRM.write("</div>");

        // show drag indicator
        oRM.write("<div id=\"" + oControl.getId() + "-drag\" class=\"sapInoWallWDragPreview\">");
        oRM.write("<div id=\"" + oControl.getId() + "-drag\" class=\"sapInoWallWDragPreviewInner\">");
        oRM.write("</div>");
        oRM.write("</div>");

        if (sap.ino.wall.config.Config.getDebugPositioning()) {
            // show drag indicator
            oRM.write("<div id=" + oControl.getId() + "-dragIndicator");
            oRM.addClass("sapInoWallWDI");
            oRM.writeClasses();
            oRM.write(">D</div>");

            // show mouse pointer indicator
            oRM.write("<div id=" + oControl.getId() + "-pointerIndicator");
            oRM.addClass("sapInoWallWPI");
            oRM.writeClasses();
            oRM.write(">M</div>");
        }
    };

})();
}; // end of sap/ino/wall/WallRenderer.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.TextEditor') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.TextEditor");

(function() {
    "use strict";

    
    
    
    

    jQuery.sap.require('sap.ino.thirdparty.nicEdit'); // unlisted dependency retained


    /**
     * Constructor for a new TextEditor.
     * 
     * Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and
     * associated objects as well as event handlers.
     * 
     * If the name of a setting is ambiguous (e.g. a property has the same name as an event), then the framework assumes
     * property, aggregation, association, event in that order. To override this automatic resolution, one of the
     * prefixes "aggregation:", "association:" or "event:" can be added to the name of the setting (such a prefixed name
     * must be enclosed in single or double quotes).
     * 
     * The supported settings are:
     * <ul>
     * <li>Properties
     * <ul>
     * <li>{@link #getValue value} : string</li>
     * </ul>
     * </li>
     * <li>Aggregations
     * <ul>
     * </ul>
     * </li>
     * <li>Associations
     * <ul>
     * </ul>
     * </li>
     * <li>Events
     * <ul>
     * <li>{@link sap.ino.wall.TextEditor#event:change change} : fnListenerFunction or [fnListenerFunction,
     * oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
     * </ul>
     * </li>
     * </ul>
     * 
     * 
     * @param {string}
     *            [sId] id for the new control, generated automatically if no id is given
     * @param {object}
     *            [mSettings] initial settings for the new control
     * 
     * @class Add your documentation for the newTextEditor
     * @extends sap.ui.core.Control
     * @version 1.16.4
     * 
     * @constructor
     * @public
     * @name sap.ino.wall.TextEditor
     * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
     */
    sap.ui.core.Control.extend("sap.ino.wall.TextEditor", {
        metadata : {
            properties : {
                "value" : {
                    type : "string",
                    group : "Misc",
                    defaultValue : null
                }
            },
            aggregations : {
                "_textArea" : {
                    type : "sap.m.TextArea",
                    multiple : false,
                    visibility : "hidden"
                },
                "_buttonColorSelector" : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                },
                "_colorPicker" : {
                    type : "sap.ino.wall.ColorPicker",
                    multiple : false,
                    visibility : "hidden"
                },
                "_editorControls" : {
                    type : "sap.ui.layout.HorizontalLayout",
                    multiple : false,
                    visibility : "hidden"
                },
            },
            events : {
                "change" : {}
            }
        }
    });

    /**
     * Creates a new subclass of class sap.ino.wall.TextEditor with name <code>sClassName</code> and enriches it
     * with the information contained in <code>oClassInfo</code>.
     * 
     * <code>oClassInfo</code> might contain the same kind of informations as described in
     * {@link sap.ui.core.Element.extend Element.extend}.
     * 
     * @param {string}
     *            sClassName name of the class to be created
     * @param {object}
     *            [oClassInfo] object literal with informations about the class
     * @param {function}
     *            [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to
     *            sap.ui.core.ElementMetadata.
     * @return {function} the created class / constructor function
     * @public
     * @static
     * @name sap.ino.wall.TextEditor.extend
     * @function
     */

    sap.ino.wall.TextEditor.M_EVENTS = {
        'change' : 'change'
    };

    /**
     * Getter for property <code>value</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @return {string} the value of property <code>value</code>
     * @public
     * @name sap.ino.wall.TextEditor#getValue
     * @function
     */

    /**
     * Setter for property <code>value</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @param {string}
     *            sValue new value for property <code>value</code>
     * @return {sap.ino.wall.TextEditor} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.TextEditor#setValue
     * @function
     */

    /**
     * 
     * @name sap.ino.wall.TextEditor#change
     * @event
     * @param {sap.ui.base.Event}
     *            oControlEvent
     * @param {sap.ui.base.EventProvider}
     *            oControlEvent.getSource
     * @param {object}
     *            oControlEvent.getParameters
     * @param {string}
     *            oControlEvent.getParameters.value
     * @public
     */

    /**
     * Attach event handler <code>fnFunction</code> to the 'change' event of this
     * <code>sap.ino.wall.TextEditor</code>.<br/>. When called, the context of the event handler (its
     * <code>this</code>) will be bound to <code>oListener<code> if specified
     * otherwise to this <code>sap.ino.wall.TextEditor</code>.<br/> itself. 
     *  
     *
     * @param {object}
     *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
     * @param {function}
     *            fnFunction The function to call, when the event occurs.  
     * @param {object}
     *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ino.wall.TextEditor</code>.<br/> itself.
     *
     * @return {sap.ino.wall.TextEditor} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.TextEditor#attachChange
     * @function
     */

    /**
     * Detach event handler <code>fnFunction</code> from the 'change' event of this
     * <code>sap.ino.wall.TextEditor</code>.<br/>
     * 
     * The passed function and listener object must match the ones used for event registration.
     * 
     * @param {function}
     *            fnFunction The function to call, when the event occurs.
     * @param {object}
     *            oListener Context object on which the given function had to be called.
     * @return {sap.ino.wall.TextEditor} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.TextEditor#detachChange
     * @function
     */

    /**
     * Fire event change to attached listeners.
     * 
     * Expects following event parameters:
     * <ul>
     * <li>'value' of type <code>string</code> </li>
     * </ul>
     * 
     * @param {Map}
     *            [mArguments] the arguments to pass along with the event.
     * @return {sap.ino.wall.TextEditor} <code>this</code> to allow method chaining
     * @protected
     * @name sap.ino.wall.TextEditor#fireChange
     * @function
     */

    /**
     * Initializes the control
     * 
     * @private
     */
    sap.ino.wall.TextEditor.prototype.init = function() {
        this._oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ino.wall");
    };

    /**
     * Adjusts control after rendering.
     * 
     * @private
     */
    sap.ino.wall.TextEditor.prototype.onAfterRendering = function() {
        var fLuminance;

        // Note: after re-rendering we need to re-initialize the nicEditor control, focus of the control will be lost
        // therefore re-rendering should be avoided in any case, we override the setValue method to update the DOM
        this._oNicEditor = new nicEditor({ // jshint ignore:line
            buttonList : ["bold", "italic", "underline", "left", "center", "right", "ol", "ul", "forecolor", "fontSize", "fontFamily"]
        });

        // synchronize events for the editor controls and the current text selection
        this._oNicEditor.addEvent("buttonActivate", jQuery.proxy(this._nicButtonActivate, this));
        this._oNicEditor.addEvent("buttonDeactivate", jQuery.proxy(this._nicButtonDeactivate, this));

        // TODO: this happens way too often (multiple times for every click), use another event
        this._oNicEditor.addEvent("blur", jQuery.proxy(this._fireChange, this));

        // the original buttons have to be shown to capture the nicEdit events properly
        this._oNicEditor.setPanel(this.getId() + "-nicPanel");

        // register our textarea for nicEdit
        this._oNicEditor.addInstance(this.getId() + "-nicContentTA");

        // update button color
        sap.ui.getCore().byId(this.getId() + "-buttonColorSelector").$().find(".sapMBtnInner").css("background-color", this._sTextColor);
        fLuminance = sap.ino.wall.util.Helper.getColorLuminance(this._sTextColor);
        // switch picker icon based on luminosity of the color
        if (fLuminance <= 0.6) {
            this._getButtonColorSelector().addStyleClass("sapInoWallWTextEditorColorSelectorButtonBright").removeStyleClass("sapInoWallWTextEditorColorSelectorButtonNormal");
        } else {
            this._getButtonColorSelector().addStyleClass("sapInoWallWTextEditorColorSelectorButtonNormal").removeStyleClass("sapInoWallWTextEditorColorSelectorButtonBright");
        }
        
        /* workaround for buf: new sticker, new text, open colorpicker, text is removed
         * trigger the creation of the colorpicker and its components before solves the issue
         */ 
        this._getColorPicker().getPlacement();
    };

    /* =========================================================== */
    /* begin: API methods */
    /* =========================================================== */

    /**
     * Setter for the value property to suppress re-rendering
     * 
     * @param {string}
     *            sValue the new editor value
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.TextEditor.prototype.setValue = function(sValue) {
        if (sValue !== this.getValue()) {
            this.setProperty("value", sValue, true);
            if (this._isRendered()) {
                this.$().children("textarea").html(jQuery.sap.encodeHTML(this.getProperty("value")));
            }
        }
        return this;
    };

    /**
     * Returns the nicEdit-main panel instead of the root div.
     * 
     * @override
     * @returns
     */
    sap.ino.wall.TextEditor.prototype.getFocusDomRef = function() {
        return this.$().find(".nicEdit-main")[0];
    };

    /**
     * Blurs the text editor.
     * 
     * @public
     */
    sap.ino.wall.TextEditor.prototype.blur = function() {
        this.getFocusDomRef().blur();
        // for some reason, we also need to trigger the blur event on the nicEdit instance as well to update the
        // control's value
        this._getNicEditor().ne.fireEvent("blur");
    };

    /**
     * Toggles the visibility of the editor controls based on the current T-Shirt-Size.
     * 
     * @public
     * @param {TShirtSize}
     *            sSize a T-Shirt size calculaded by the item
     * @returns {sap.m/Input} the control
     */
    sap.ino.wall.TextEditor.prototype.setControlDetails = function(sNewSize) {
        var oEditorControls = this._getEditorControls().getContent(), sSize = sNewSize || "S", // default value
        i = 0;

        if (this._sPreviousSize === sSize) {
            return;
        }

        switch (sSize) {
            case sap.ino.wall.TShirtSize.XS :
                /* falls through */
            case sap.ino.wall.TShirtSize.S :
                /* falls through */
            default :
                // first 3 items are always visible (b/i/u)
                for (i = 3; i < oEditorControls.length; i++) {
                    oEditorControls[i].toggleStyleClass("sapInoWallInvisible", true);
                }
                break;
            case sap.ino.wall.TShirtSize.M :
                // first 3 items are always visible
                // show (ff/fs)
                for (i = 3; i < 6; i++) {
                    oEditorControls[i].toggleStyleClass("sapInoWallInvisible", false);
                }
                // hide rest
                for (i = 6; i < oEditorControls.length; i++) {
                    oEditorControls[i].toggleStyleClass("sapInoWallInvisible", true);
                }
                break;
            case sap.ino.wall.TShirtSize.L :
            case sap.ino.wall.TShirtSize.XL :
                // first 3 items are always visible
                // show rest
                for (i = 3; i < oEditorControls.length; i++) {
                    oEditorControls[i].toggleStyleClass("sapInoWallInvisible", false);
                }
                break;
        }

        this._sPreviousSize = sSize;
    };

    /* =========================================================== */
    /* begin: internal methods */
    /* =========================================================== */

    /**
     * Checks if the control is already written to the DOM to allow for layout changes
     * 
     * @returns {this} this pointer for chaining
     * @private
     */
    sap.ino.wall.WallItemBase.prototype._isRendered = function() {
        if (this._bIsInDOM === undefined || this._bIsInDOM === 0) {
            this._bIsInDOM = jQuery.sap.byId(this.getId()).length;
        }

        return this._bIsInDOM;
    };

    /**
     * Returns the nicEdit instance for this control by querying the internal textarea
     * 
     * @returns {object} the nicEdit instance
     * @private
     */
    sap.ino.wall.TextEditor.prototype._getNicEditor = function() {
        return nicEditors.findEditor(this.getId() + "-nicContentTA"); // jshint ignore:line
    };

    /**
     * Activates out UI5 button control when the nicEdit event is thrown
     * 
     * @returns {object} the nicEdit instance
     * @private
     */
    sap.ino.wall.TextEditor.prototype._nicButtonActivate = function(oItem) {
        this._syncButtonState(oItem.name, true);
    };

    /**
     * Deactivates out UI5 button control when the nicEdit event is thrown
     * 
     * @returns {object} the nicEdit instance
     * @private
     */
    sap.ino.wall.TextEditor.prototype._nicButtonDeactivate = function(oItem) {
        this._syncButtonState(oItem.name, false);
    };

    /**
     * Activates out UI5 button control when the nicEdit event is thrown
     * 
     * @returns {object} the nicEdit instance
     * @private
     */
    sap.ino.wall.TextEditor.prototype._syncButtonState = function(sName, bToggled) {
        var oJustifyButton;

        switch (sName) {
            case "bold" :
                /* falls through */
            case "italic" :
                /* falls through */
            case "underline" :
                /* falls through */
            case "ol" :
                /* falls through */
            case "ul" :
                sap.ui.getCore().byId(this.getId() + "-" + sName).setPressed(bToggled);
                break;
            case "left" :
                if (bToggled) {
                    oJustifyButton = sap.ui.getCore().byId(this.getId() + "-justify");
                    oJustifyButton.setSelectedButton(oJustifyButton.getButtons()[0]);
                }
                break;
            case "center" :
                if (bToggled) {
                    oJustifyButton = sap.ui.getCore().byId(this.getId() + "-justify");
                    oJustifyButton.setSelectedButton(oJustifyButton.getButtons()[1]);
                }
                break;
            case "right" :
                if (bToggled) {
                    oJustifyButton = sap.ui.getCore().byId(this.getId() + "-justify");
                    oJustifyButton.setSelectedButton(oJustifyButton.getButtons()[2]);
                }
                break;
            default:
                break;
        }
    };

    /**
     * Checks if the value has changed and fires the control's change event.
     * 
     * @private
     */
    sap.ino.wall.TextEditor.prototype._fireChange = function(oEvent) {
        var oNicEditor = this._getNicEditor();
        if (oNicEditor) {
            var sEditorContent = this._cleanEditorContent(oNicEditor.getContent());
            if (sEditorContent != oNicEditor.getContent()) {
                oNicEditor.setContent(sEditorContent);
            }
            if (this.getValue() !== sEditorContent) {
                this.setProperty("value", sEditorContent, true);
                this.fireChange({
                    value : sEditorContent
                });
            }
        }
    };

    sap.ino.wall.TextEditor.prototype._cleanEditorContent = function(sEditorContent) {
        var iStartIndex = sEditorContent.indexOf("<!--StartFragment-->");
        if (iStartIndex >= 0) {
            var iEndIndex = sEditorContent.indexOf("<!--EndFragment-->");
            sEditorContent = sEditorContent.substring(iStartIndex + 20, iEndIndex >= 0 ? iEndIndex : undefined);
            sEditorContent = jQuery.trim(sEditorContent);
        }
        sEditorContent = sEditorContent.substring(0, 4000);
        return sEditorContent;
    };

    /**
     * Updates the color picker button and value of the current text selection.
     * 
     * @private
     */
    sap.ino.wall.TextEditor.prototype._setColor = function(sColor) {
        var fLuminance;

        // store internal color reference
        this._sTextColor = sColor;
        if (this._isRendered()) {
            // update text color
            this._getNicEditor().nicCommand("foreColor", sColor);
            // update button color
            sap.ui.getCore().byId(this.getId() + "-buttonColorSelector").$().find(".sapMBtnInner").css("background-color", sColor);
            // update color picker icon
            fLuminance = sap.ino.wall.util.Helper.getColorLuminance(sColor);
            // switch picker icon based on luminosity of the color
            if (fLuminance <= 0.6) {
                this._getButtonColorSelector().addStyleClass("sapInoWallWTextEditorColorSelectorButtonBright").removeStyleClass("sapInoWallWTextEditorColorSelectorButtonNormal");
            } else {
                this._getButtonColorSelector().addStyleClass("sapInoWallWTextEditorColorSelectorButtonNormal").removeStyleClass("sapInoWallWTextEditorColorSelectorButtonBright");
            }
        }
    };

    /**
     * Checks if the control is already written to the DOM to allow for layout changes
     * 
     * @returns {boolean} true if the control has been found in DOM, otherwise false
     * @private
     */
    sap.ino.wall.TextEditor.prototype._isRendered = function() {
        if (this._bIsInDOM === undefined || this._bIsInDOM === 0) {
            this._bIsInDOM = jQuery.sap.byId(this.getId()).length;
        }

        return this._bIsInDOM;
    };

    /**
     * Creates our own set of editor controls to have a UI5 look and feel for nicEdit.
     * 
     * @private
     * @returns {sap.ui.layout/HorizntalLayout} the editor controls wrapped inside a HorizontalLayout
     */
    sap.ino.wall.TextEditor.prototype._getEditorControls = function(oEvent) {
        var that = this, oControl = this.getAggregation("_editorControls");

        // pressing the buttons will instruct nicEdit to execute the corresponding DOM events:
        // Note: some of them might not work for all browsers that are supported by UI5
        // https://developer.mozilla.org/en-US/docs/Web/API/document.execCommand
        if (!oControl) {
            oControl = new sap.ui.layout.HorizontalLayout({
                allowWrapping : true,
                content : [new sap.m.ToggleButton(this.getId() + "-bold", {
                    press : function(oEvent) {
                        var $that = that.$(), oSelectedControl;

                        if (!sap.ino.wall.util.Helper.getTextSelection()) {
                            sap.ino.wall.util.Helper.selectAllText($that.find(".nicEdit-main")[0]);
                        } else {
                            oSelectedControl = jQuery(sap.ino.wall.util.Helper.getTextSelectionNode()).control(0);
                            if (oSelectedControl && oSelectedControl !== that) {
                                // when the selection is in another editor we do not do the action on this one
                                this.setPressed(!this.getPressed());
                                return;
                            }
                        }
                        that._getNicEditor().nicCommand("Bold");
                        // keep focus on keyboard events
                        setTimeout(function() {
                            if (this.__triggeredKeyEvent) {
                                this.focus();
                            }
                        }.bind(this), 0);
                    }
                }).addStyleClass("noflip").addStyleClass("nicEdit").addStyleClass("sapInoWallTextEditorControlButton").addStyleClass("sapInoWallTextEditorControlButtonBold").addEventDelegate({
                    onkeydown : function(oEvent) {
                        oEvent.srcControl.__triggeredKeyEvent = true;
                    }.bind(this),
                    onkeyup : function(oEvent) {
                        oEvent.srcControl.__triggeredKeyEvent = false;

                    },
                    onsapenter : function(oEvent) {
                        oEvent.preventDefault();
                        oEvent.stopPropagation();
                    }
                }), new sap.m.ToggleButton(this.getId() + "-italic", {
                    press : function(oEvent) {
                        var $that = that.$(), oSelectedControl;

                        if (!sap.ino.wall.util.Helper.getTextSelection()) {
                            sap.ino.wall.util.Helper.selectAllText($that.find(".nicEdit-main")[0]);
                        } else {
                            oSelectedControl = jQuery(sap.ino.wall.util.Helper.getTextSelectionNode()).control(0);
                            if (oSelectedControl && oSelectedControl !== that) {
                                // when the selection is in another editor we do not do the action on this one
                                this.setPressed(!this.getPressed());
                                return;
                            }
                        }
                        that._getNicEditor().nicCommand("Italic");
                        // keep focus on keyboard events
                        setTimeout(function() {
                            if (this.__triggeredKeyEvent) {
                                this.focus();
                            }
                        }.bind(this), 0);
                    }
                }).addStyleClass("noflip").addStyleClass("nicEdit").addStyleClass("sapInoWallTextEditorControlButton").addStyleClass("sapInoWallTextEditorControlButtonItalic").addEventDelegate({
                    onkeydown : function(oEvent) {
                        oEvent.srcControl.__triggeredKeyEvent = true;
                    }.bind(this),
                    onkeyup : function(oEvent) {
                        oEvent.srcControl.__triggeredKeyEvent = false;

                    },
                    onsapenter : function(oEvent) {
                        oEvent.preventDefault();
                        oEvent.stopPropagation();
                    }
                }), new sap.m.ToggleButton(this.getId() + "-underline", {
                    press : function(oEvent) {
                        var $that = that.$(), oSelectedControl;

                        if (!sap.ino.wall.util.Helper.getTextSelection()) {
                            sap.ino.wall.util.Helper.selectAllText($that.find(".nicEdit-main")[0]);
                        } else {
                            oSelectedControl = jQuery(sap.ino.wall.util.Helper.getTextSelectionNode()).control(0);
                            if (oSelectedControl && oSelectedControl !== that) {
                                // when the selection is in another editor we do not do the action on this one
                                this.setPressed(!this.getPressed());
                                return;
                            }
                        }
                        that._getNicEditor().nicCommand("Underline");
                        // keep focus on keyboard events
                        setTimeout(function() {
                            if (this.__triggeredKeyEvent) {
                                this.focus();
                            }
                        }.bind(this), 0);
                    }
                }).addStyleClass("noflip").addStyleClass("nicEdit").addStyleClass("sapInoWallTextEditorControlButton").addStyleClass("sapInoWallTextEditorControlButtonUnderline").addEventDelegate({
                    onkeydown : function(oEvent) {
                        oEvent.srcControl.__triggeredKeyEvent = true;
                    }.bind(this),
                    onkeyup : function(oEvent) {
                        oEvent.srcControl.__triggeredKeyEvent = false;

                    },
                    onsapenter : function(oEvent) {
                        oEvent.preventDefault();
                        oEvent.stopPropagation();
                    }
                }), this._getButtonColorSelector(), new sap.m.Select(this.getId() + "-face", {
                    width : "130px",
                    items : [new sap.ui.core.Item({
                        key : "",
                        text : this._oRB.getText("WALL_TEXTEDITOR_FAMILY_SELECT")
                    }), new sap.ui.core.Item({
                        key : "arial",
                        text : this._oRB.getText("WALL_TEXTEDITOR_FLD_FONT_ARIAL")
                    }), new sap.ui.core.Item({
                        key : "comic sans ms",
                        text : this._oRB.getText("WALL_TEXTEDITOR_FLD_FONT_COMIC")
                    }), new sap.ui.core.Item({
                        key : "courier new",
                        text : this._oRB.getText("WALL_TEXTEDITOR_FLD_FONT_COURIER")
                    }), new sap.ui.core.Item({
                        key : "geogria",
                        text : this._oRB.getText("WALL_TEXTEDITOR_FLD_FONT_GEORGIA")
                    }), new sap.ui.core.Item({
                        key : "helvetica",
                        text : this._oRB.getText("WALL_TEXTEDITOR_FLD_FONT_HELVETICA")
                    }), new sap.ui.core.Item({
                        key : "impact",
                        text : this._oRB.getText("WALL_TEXTEDITOR_FLD_FONT_IMPACT")
                    }), new sap.ui.core.Item({
                        key : "times new roman",
                        text : this._oRB.getText("WALL_TEXTEDITOR_FLD_FONT_TIMES")
                    }), new sap.ui.core.Item({
                        key : "trebuchet ms",
                        text : this._oRB.getText("WALL_TEXTEDITOR_FLD_FONT_TREBUCHET")
                    }), new sap.ui.core.Item({
                        key : "verdana",
                        text : this._oRB.getText("WALL_TEXTEDITOR_FLD_FONT_VERDANA")
                    })],
                    change : function(oEvent) {
                        var oItem = oEvent.getParameter("selectedItem"), $that = that.$(), oSelectedControl;

                        if (!sap.ino.wall.util.Helper.getTextSelection()) {
                            sap.ino.wall.util.Helper.selectAllText($that.find(".nicEdit-main")[0]);
                        } else {
                            oSelectedControl = jQuery(sap.ino.wall.util.Helper.getTextSelectionNode()).control(0);
                            if (oSelectedControl && oSelectedControl !== that) {
                                return;
                            }
                        }
                        if (oItem.getKey() !== "") {
                            that._getNicEditor().nicCommand("fontname", oItem.getKey());
                        }
                        // keep focus on keyboard events
                        setTimeout(function() {
                            if (this.__triggeredKeyEvent) {
                                this.focus();
                            }
                        }.bind(this), 0);
                    }
                }).addStyleClass("noflip").addStyleClass("sapInoWallWIBSelect").addStyleClass("nicEdit").addStyleClass("sapInoWallTextEditorControlSelect").addEventDelegate({
                    onkeydown : function(oEvent) {
                        oEvent.srcControl.__triggeredKeyEvent = true;
                    }.bind(this),
                    onkeyup : function(oEvent) {
                        oEvent.srcControl.__triggeredKeyEvent = false;

                    },
                    onsapenter : function(oEvent) {
                        oEvent.preventDefault();
                        oEvent.stopPropagation();
                    }
                }), new sap.m.Select(this.getId() + "-size", {
                    width : "130px",
                    items : [new sap.ui.core.Item({
                        key : "",
                        text : this._oRB.getText("WALL_TEXTEDITOR_SIZE_SELECT")
                    }), new sap.ui.core.Item({
                        key : "2",
                        text : this._oRB.getText("WALL_ITEMHEADLINE_SIZE_H6")
                    }), new sap.ui.core.Item({
                        key : "3",
                        text : this._oRB.getText("WALL_ITEMHEADLINE_SIZE_H5")
                    }), new sap.ui.core.Item({
                        key : "4",
                        text : this._oRB.getText("WALL_ITEMHEADLINE_SIZE_H4")
                    }), new sap.ui.core.Item({
                        key : "5",
                        text : this._oRB.getText("WALL_ITEMHEADLINE_SIZE_H3")
                    }), new sap.ui.core.Item({
                        key : "6",
                        text : this._oRB.getText("WALL_ITEMHEADLINE_SIZE_H2")
                    }), new sap.ui.core.Item({
                        key : "7",
                        text : this._oRB.getText("WALL_ITEMHEADLINE_SIZE_H1")
                    })],
                    change : function(oEvent) {
                        var oItem = oEvent.getParameter("selectedItem"), $that = that.$(), oSelectedControl;

                        if (!sap.ino.wall.util.Helper.getTextSelection()) {
                            sap.ino.wall.util.Helper.selectAllText($that.find(".nicEdit-main")[0]);
                        } else {
                            oSelectedControl = jQuery(sap.ino.wall.util.Helper.getTextSelectionNode()).control(0);
                            if (oSelectedControl && oSelectedControl !== that) {
                                return;
                            }
                        }

                        if (oItem.getKey() !== "") {
                            that._getNicEditor().nicCommand("fontsize", oItem.getKey());
                        }
                        // keep focus on keyboard events
                        setTimeout(function() {
                            if (this.__triggeredKeyEvent) {
                                this.focus();
                            }
                        }.bind(this), 0);
                    }
                }).addStyleClass("noflip").addStyleClass("sapInoWallWIBSelect").addStyleClass("nicEdit").addStyleClass("sapInoWallTextEditorControlSelect").addEventDelegate({
                    onkeydown : function(oEvent) {
                        oEvent.srcControl.__triggeredKeyEvent = true;
                    }.bind(this),
                    onkeyup : function(oEvent) {
                        oEvent.srcControl.__triggeredKeyEvent = false;

                    },
                    onsapenter : function(oEvent) {
                        oEvent.preventDefault();
                        oEvent.stopPropagation();
                    }
                }), new sap.m.SegmentedButton(this.getId() + "-justify", {
                    buttons : [new sap.m.Button(), new sap.m.Button(), new sap.m.Button()],
                    select : function(oEvent) {
                        var oSelectedButton = oEvent.getParameter("button"), aButtons = oEvent.getSource().getButtons(), $that = that.$(), oSelectedControl;

                        if (!sap.ino.wall.util.Helper.getTextSelection()) {
                            sap.ino.wall.util.Helper.selectAllText($that.find(".nicEdit-main")[0]);
                        } else {
                            oSelectedControl = jQuery(sap.ino.wall.util.Helper.getTextSelectionNode()).control(0);
                            if (oSelectedControl && oSelectedControl !== that) {
                                return;
                            }
                        }

                        if (oSelectedButton === aButtons[0]) {
                            that._getNicEditor().nicCommand("justifyleft");
                        } else if (oSelectedButton === aButtons[1]) {
                            that._getNicEditor().nicCommand("justifycenter");
                        } else if (oSelectedButton === aButtons[2]) {
                            that._getNicEditor().nicCommand("justifyright");
                        }
                        // keep focus on keyboard events
                        setTimeout(function() {
                            if (this.__triggeredKeyEvent) {
                                oSelectedButton.focus();
                            }
                        }.bind(this), 0);
                    }
                }).addStyleClass("noflip").addStyleClass("nicEdit").addStyleClass("sapInoWallTextEditorControlButton").addStyleClass("sapInoWallTextEditorControlButtonAlignment").addEventDelegate({
                    onkeydown : function(oEvent) {
                        oEvent.srcControl.__triggeredKeyEvent = true;
                    }.bind(this),
                    onkeyup : function(oEvent) {
                        oEvent.srcControl.__triggeredKeyEvent = false;

                    },
                    onsapenter : function(oEvent) {
                        oEvent.preventDefault();
                        oEvent.stopPropagation();
                    }
                }), new sap.m.ToggleButton(this.getId() + "-ol", {
                    press : function(oEvent) {
                        var $that = that.$(), oSelectedControl;

                        if (!sap.ino.wall.util.Helper.getTextSelection()) {
                            sap.ino.wall.util.Helper.selectAllText($that.find(".nicEdit-main")[0]);
                        } else {
                            oSelectedControl = jQuery(sap.ino.wall.util.Helper.getTextSelectionNode()).control(0);
                            if (oSelectedControl && oSelectedControl !== that) {
                                this.setPressed(!this.getPressed());
                                return;
                            }
                        }
                        sap.ui.getCore().byId(that.getId() + "-ul").setPressed(false);
                        that._getNicEditor().nicCommand("insertorderedlist");
                        // keep focus on keyboard events
                        setTimeout(function() {
                            if (this.__triggeredKeyEvent) {
                                this.focus();
                            }
                        }.bind(this), 0);
                    }
                }).addStyleClass("noflip").addStyleClass("nicEdit").addStyleClass("sapInoWallTextEditorControlButton").addStyleClass("sapInoWallTextEditorControlButtonOl").addEventDelegate({
                    onkeydown : function(oEvent) {
                        oEvent.srcControl.__triggeredKeyEvent = true;
                    }.bind(this),
                    onkeyup : function(oEvent) {
                        oEvent.srcControl.__triggeredKeyEvent = false;

                    },
                    onsapenter : function(oEvent) {
                        oEvent.preventDefault();
                        oEvent.stopPropagation();
                    }
                }), new sap.m.ToggleButton(this.getId() + "-ul", {
                    press : function(oEvent) {
                        var $that = that.$(), oSelectedControl;

                        if (!sap.ino.wall.util.Helper.getTextSelection()) {
                            sap.ino.wall.util.Helper.selectAllText($that.find(".nicEdit-main")[0]);
                        } else {
                            oSelectedControl = jQuery(sap.ino.wall.util.Helper.getTextSelectionNode()).control(0);
                            if (oSelectedControl && oSelectedControl !== that) {
                                this.setPressed(!this.getPressed());
                                return;
                            }
                        }
                        sap.ui.getCore().byId(that.getId() + "-ol").setPressed(false);
                        that._getNicEditor().nicCommand("insertunorderedlist");
                        // keep focus on keyboard events
                        setTimeout(function() {
                            if (this.__triggeredKeyEvent) {
                                this.focus();
                            }
                        }.bind(this), 0);
                    }
                }).addStyleClass("noflip").addStyleClass("nicEdit").addStyleClass("sapInoWallTextEditorControlButton").addStyleClass("sapInoWallTextEditorControlButtonUl").addEventDelegate({
                    onkeydown : function(oEvent) {
                        oEvent.srcControl.__triggeredKeyEvent = true;
                    }.bind(this),
                    onkeyup : function(oEvent) {
                        oEvent.srcControl.__triggeredKeyEvent = false;

                    },
                    onsapenter : function(oEvent) {
                        oEvent.preventDefault();
                        oEvent.stopPropagation();
                    }
                })]
            }).addStyleClass("noflip");

            // suppress default (textArea should not loose focus)
            oControl.addEventDelegate({
                "onmousedown" : function(oEvent) {
                    oEvent.preventDefault();
                    return false;
                }
            });

            this.setAggregation("_editorControls", oControl, true);
        }

        return oControl;
    };

    /**
     * Lazy initialization of an internal control
     * 
     * @private
     * @returns {ColorPicker} the button
     */
    sap.ino.wall.TextEditor.prototype._getColorPicker = function() {
        var that = this, oControl = this.getAggregation("_colorPicker");

        if (!oControl) {
            // create control
            oControl = new sap.ino.wall.ColorPicker(this.getId() + "-colorPicker", {
                color : that._sTextColor,
                change : function(oEvent) {
                    var $that = that.$(), oFocus = jQuery(":focus"), oSelectedControl;

                    if (!sap.ino.wall.util.Helper.getTextSelection()) {
                        sap.ino.wall.util.Helper.selectAllText($that.find(".nicEdit-main")[0]);
                    } else {
                        oSelectedControl = jQuery(sap.ino.wall.util.Helper.getTextSelectionNode()).control(0);
                        if (oSelectedControl && oSelectedControl !== that) {
                            // when the selection is in another editor we do not do the action on this one
                            return;
                        }
                    }
                    that._setColor(oEvent.getParameter("color"));
                    oFocus.focus();
                }
            }).addStyleClass("nicEdit");

            // set hidden aggregation without rerendering
            this.setAggregation("_colorPicker", oControl, true);
        }

        return oControl;
    };

    /**
     * Lazy initialization of an internal control.
     * 
     * @private
     * @returns {sap.m/Button} the button
     */
    sap.ino.wall.TextEditor.prototype._getButtonColorSelector = function() {
        var that = this, sRandomColor, oControl = this._buttonColorSelector;

        if (!oControl) {
            // create control
            oControl = new sap.m.Button(this.getId() + "-buttonColorSelector", {
                tooltip : this._oRB.getText("WALL_ITEMLINE_STATUSMSG_COLOR_SELECT"),
                press : function(oEvent) {
                    var oColorPicker = that._getColorPicker(), sRandomColor, $that = that.$();

                    if (oColorPicker.isOpen()) {
                        oColorPicker.close();
                    } else {
                        oColorPicker.openBy(oControl, 0, 0);

                        if (this.__triggeredKeyEvent) {
                            oColorPicker.focus();
                        }
                    }
                },
                icon : "sap-icon://palette"
            }).addStyleClass("noflip").addStyleClass("sapInoWallTextEditorControlButton").addStyleClass("sapInoWallTextEditorColorSelectorButton").addEventDelegate({
                onkeydown : function(oEvent) {
                    oEvent.srcControl.__triggeredKeyEvent = true;
                },
                onkeyup : function(oEvent) {
                    oEvent.srcControl.__triggeredKeyEvent = false;
                },
                onsapenter : function(oEvent) {
                    oEvent.preventDefault();
                    oEvent.stopPropagation();
                }
            });

            // create initial random color
            sRandomColor = sap.ino.wall.util.Helper.createRandomHexColor();
            that._setColor(sRandomColor);

            // set hidden aggregation without rerendering
            this._buttonColorSelector = oControl;
        }

        return oControl;
    };

})();
}; // end of sap/ino/wall/TextEditor.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallItemArrow') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallItemArrow");

(function() {
    "use strict";

    
    
    
    
    
    /**
     * Constructor for a new WallItemArrow.
     * 
     * Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and
     * associated objects as well as event handlers.
     * 
     * If the name of a setting is ambiguous (e.g. a property has the same name as an event), then the framework assumes
     * property, aggregation, association, event in that order. To override this automatic resolution, one of the
     * prefixes "aggregation:", "association:" or "event:" can be added to the name of the setting (such a prefixed name
     * must be enclosed in single or double quotes).
     * 
     * The supported settings are:
     * <ul>
     * <li>Properties
     * <ul>
     * </ul>
     * </li>
     * <li>Aggregations
     * <ul>
     * </ul>
     * </li>
     * <li>Associations
     * <ul>
     * </ul>
     * </li>
     * <li>Events
     * <ul>
     * </ul>
     * </li>
     * </ul>
     * 
     * 
     * In addition, all settings applicable to the base type
     * {@link sap.ino.wall.WallItemBase#constructor sap.ino.wall.WallItemBase} can be used as well.
     * 
     * @param {string}
     *            [sId] id for the new control, generated automatically if no id is given
     * @param {object}
     *            [mSettings] initial settings for the new control
     * 
     * @class Add your documentation for the newWallItemArrow
     * @extends sap.ino.wall.WallItemBase
     * @version 1.16.4
     * 
     * @constructor
     * @public
     * @name sap.ino.wall.WallItemArrow
     * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
     */
    sap.ino.wall.WallItemBase.extend("sap.ino.wall.WallItemArrow", {
        metadata : {
            properties : {
                "x1" : {
                    type : "float",
                    defaultValue : 0
                },
                "y1" : {
                    type : "float",
                    defaultValue : 0
                },
                "x2" : {
                    type : "float",
                    defaultValue : 0
                },
                "y2" : {
                    type : "float",
                    defaultValue : 0
                },
                "thickness" : {
                    type : "int",
                    group : "Misc",
                    defaultValue : 4
                },
                "style" : {
                    type : "string",
                    group : "Misc",
                    defaultValue : 'SOLID'
                },
                "color" : {
                    type : "string",
                    group : "Misc",
                    defaultValue : '#000000'
                },
                "headStyle" : {
                    group : "Misc",
                    defaultValue : 'END'
                }
            },
            aggregations : {
                "_buttonStyleSolid" : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                },
                "_buttonStyleDashed" : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                },
                "_buttonStyleDotted" : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                },
                "_buttonThickness3" : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                },
                "_buttonThickness4" : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                },
                "_buttonThickness5" : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                },
                "_buttonHeadStyleNone" : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                },
                "_buttonHeadStyleStart" : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                },
                "_buttonHeadStyleEnd" : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                },
                "_buttonHeadStyleBoth" : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                },
                "_buttonColorSelector" : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                },
                "_colorPicker" : {
                    type : "sap.ino.wall.ColorPicker",
                    multiple : false,
                    visibility : "hidden"
                }
            }
        }
    });

    /**
     * Creates a new subclass of class sap.ino.wall.WallItemArrow with name <code>sClassName</code> and enriches
     * it with the information contained in <code>oClassInfo</code>.
     * 
     * <code>oClassInfo</code> might contain the same kind of informations as described in
     * {@link sap.ui.core.Element.extend Element.extend}.
     * 
     * @param {string}
     *            sClassName name of the class to be created
     * @param {object}
     *            [oClassInfo] object literal with informations about the class
     * @param {function}
     *            [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to
     *            sap.ui.core.ElementMetadata.
     * @return {function} the created class / constructor function
     * @public
     * @static
     * @name sap.ino.wall.WallItemArrow.extend
     * @function
     */

    /**
     * Getter for property <code>color</code>. The Arrow design.
     * 
     * Default value is <code>Yellow</code>
     * 
     * @return {string} the value of property <code>color</code>
     * @public
     * @name sap.ino.wall.WallItemArrow#getColor
     * @function
     */

    /**
     * Setter for property <code>color</code>.
     * 
     * Default value is <code>Yellow</code>
     * 
     * @param {string}
     *            oColor new value for property <code>color</code>
     * @return {sap.ino.wall.WallItemArrow} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemArrow#setColor
     * @function
     */

    /**
     * Initializes the control
     * 
     * @private
     */
    sap.ino.wall.WallItemArrow.prototype.init = function() {
        sap.ino.wall.WallItemBase.prototype.init.call(this);

        this.setResizable(true);
    };

    sap.ino.wall.WallItemArrow.prototype.onAfterRendering = function() {
        var fLuminance = sap.ino.wall.util.Helper.getColorLuminance(this.getColor()), oButtonColorSelector = sap.ui.getCore().byId(this.getId() + "-buttonColorSelector");

        // call base class method
        sap.ino.wall.WallItemBase.prototype.onAfterRendering.apply(this, arguments);
        // update background color of button
        if (oButtonColorSelector) {
            oButtonColorSelector.$().find(".sapMBtnInner").css("background-color", this.getColor());
        }
        // update color picker icon based on luminosity of the color
        if (fLuminance <= 0.6) {
            this._getButtonColorSelector().addStyleClass("sapInoWallWIArrowColorSelectorButtonBright").removeStyleClass("sapInoWallWIArrowColorSelectorButtonNormal");
        } else {
            this._getButtonColorSelector().addStyleClass("sapInoWallWIArrowColorSelectorButtonNormal").removeStyleClass("sapInoWallWIArrowColorSelectorButtonBright");
        }
    };
    
    sap.ino.wall.WallItemArrow.prototype.calcFigures = function() {
        var f = {
            w : Math.max(parseFloat(this.getW()) || 0, 1),
            h : Math.max(parseFloat(this.getH()) || 0, 25),
            x : parseFloat(this.getX()) || 0,
            y : parseFloat(this.getY()) || 0,
            x1 : this.getX1() || 0,
            y1 : this.getY1() || 0,
            x2 : this.getX2() || 0,
            y2 : this.getY2() || 0
        };
        f.d = Math.sqrt(Math.pow(f.w, 2) + Math.pow(f.h, 2));
        f.t = 50;
        f.r = Math.atan((f.y2 - f.y1) / (f.x2 - f.x1));
        f.hx = (f.x1 + f.x2 - f.d) / 2;
        f.hy = (f.y1 + f.y2 - f.t) / 2;
        f.hs = f.t / 2; // Adjust handle size with thickness??
        return f;
    };
    
    sap.ino.wall.WallItemArrow.prototype.updateSide = function(sSideId, f) {
        var $side = jQuery(this.getDomRef()).find("#" + this.getId() + "-" + sSideId);
        if ($side) {
            $side.css("width", (f.w || 0) + "px");
            $side.css("height", (f.h || 0) + "px");
        }
        var $arrow = $side.find("#" + this.getId() + "-" + sSideId + "-arrow");
        if ($arrow) {
            $arrow.attr("width", f.w + "px");
            $arrow.attr("height", f.h + "px");
            // No jQuery used to modify case-sensitive attribute
            $arrow[0].setAttribute("viewBox", "0 0 " + f.w + " " + f.h);
            // Arrow Head Start
            var $markerStart = jQuery($arrow.children()[0]);
            $markerStart[0].setAttribute("markerWidth", this.getThickness());
            $markerStart[0].setAttribute("markerHeight", this.getThickness());
            $markerStart[0].setAttribute("refX", this.getThickness() / 2);
            var $markerStartPath = jQuery($markerStart.children()[0]);
            $markerStartPath.attr("fill", this.getColor());
            // Arrow Head End            
            var $markerEnd = jQuery($arrow.children()[1]);
            $markerEnd[0].setAttribute("markerWidth", this.getThickness());
            $markerEnd[0].setAttribute("markerHeight", this.getThickness());
            $markerEnd[0].setAttribute("refX", 6 + this.getThickness() / 2);
            var $markerEndPath = jQuery($markerEnd.children()[0]);
            $markerEndPath.attr("fill", this.getColor());
            // Arrow Line
            var $line = jQuery($arrow.children()[2]);
            $line.attr("x1", (f.x1-f.x));
            $line.attr("y1", (f.y1-f.y));
            $line.attr("x2", (f.x2-f.x));
            $line.attr("y2", (f.y2-f.y));
            $line.attr("stroke", this.getColor());
            $line.attr("stroke-width", this.getThickness());
            var sMarkerStartId = this.getId() + "-" + sSideId + "-start-triangle";
            var sMarkerEndId = this.getId() + "-" + sSideId + "-end-triangle";
            $line.attr("marker-start", this.getHeadStyle() == "START" || this.getHeadStyle() == "BOTH" ? "url(#" + sMarkerStartId + ")" : "none");
            $line.attr("marker-end", this.getHeadStyle() == "END" || this.getHeadStyle() == "BOTH" ? "url(#" + sMarkerEndId + ")" : "none");
            switch (this.getStyle()) {
                case "DOTTED":
                    $line.attr("stroke-dasharray", "4, 4");
                    break;
                case "DASHED":
                    $line.attr("stroke-dasharray", "10, 5");
                    break;
                case "SOLID" :
                    /* falls through */
                default:
                    $line.attr("stroke-dasharray", "none");
                    break;
            }
        }        
    };
    
    sap.ino.wall.WallItemArrow.prototype.updateArrowSVG = function() {
        if (this.getDomRef()) {
            var f = this.calcFigures();
            this.updateSide("front", f);
            this.updateSide("back", f);

            var fHandleSize = 35; 
            var $startHandle = jQuery(this.getDomRef()).find(".sapInoWallWIArrowStartHandle");
            if ($startHandle) {
                $startHandle.css("left", (f.x1-f.x-f.hs/2) + "px");
                $startHandle.css("top", (f.y1-f.y-f.hs/2) + "px");
            }
            var $endHandle = jQuery(this.getDomRef()).find(".sapInoWallWIArrowEndHandle");
            if ($endHandle) {
                $endHandle.css("left", (f.x2-f.x-f.hs/2) + "px");
                $endHandle.css("top", (f.y2-f.y-f.hs/2) + "px");
            }
            var $moveHandle = jQuery(this.getDomRef()).find(".sapInoWallWIArrowMoveHandle");
            if ($moveHandle) {
                $moveHandle.css("transform", "rotateZ(" + f.r + "rad)");
                $moveHandle.css("width", f.d + "px");
                $moveHandle.css("height", f.t + "px");
                $moveHandle.css("left", (f.hx-f.x) + "px");
                $moveHandle.css("top", (f.hy-f.y) + "px");
                $moveHandle.css("color", this.getColor());
            }
        }
    };

    sap.ino.wall.WallItemArrow.prototype.setTitle = function(sTitle, bSuppressNotify) {
        if (sTitle !== this.getTitle()) {
            this.setProperty("title", sTitle, true);
            this.$().find(".front .sapInoWallWIArrowMoveHandle").text(sTitle);
            
            // inform wall that this item has changed a persistence property
            if (this.getParent() && !bSuppressNotify) {
                this.getParent()._notifyItemChanged(this);
            }
        }
        return this;
    };

    var fnWallItemBasebaseSetFlipped = sap.ino.wall.WallItemBase.prototype.setFlipped;
    sap.ino.wall.WallItemArrow.prototype.setFlipped = function(bFlipped) {
        // close color selector if it is initialized
        if (this.getAggregation("_colorPicker")) {
            this.getAggregation("_colorPicker").close();
        }
        fnWallItemBasebaseSetFlipped.apply(this, arguments);
        this.focus();
    };
    
    sap.ino.wall.WallItemArrow.prototype.setColor = function(sColor, bSuppressNotify) {
        if (sColor !== this.getColor()) {
            var fLuminance;
            var oButtonColorSelector = this._getButtonColorSelector();

            this.setProperty("color", sColor, true);
            if (this._isRendered()) {
                // update button color
                if (oButtonColorSelector) {
                    sap.ui.getCore().byId(this.getId() + "-buttonColorSelector").$().find(".sapMBtnInner").css("background-color", this.getColor());
                }
                // update color picker icon
                fLuminance = sap.ino.wall.util.Helper.getColorLuminance(sColor);
                // switch picker icon based on luminosity of the color
                if (fLuminance <= 0.6) {
                    this._getButtonColorSelector().addStyleClass("sapInoWallWIArrowColorSelectorButtonBright").removeStyleClass("sapInoWallWIArrowColorSelectorButtonNormal");
                } else {
                    this._getButtonColorSelector().addStyleClass("sapInoWallWIArrowColorSelectorButtonNormal").removeStyleClass("sapInoWallWIArrowColorSelectorButtonBright");
                }
                this.updateArrowSVG();                
            }
        }
        return this;
    };
    
    sap.ino.wall.WallItemArrow.prototype.setThickness = function(iThickness, bSuppressRecalc) {
        this.setProperty("thickness", iThickness, true);
        this.updateArrowSVG();
    };
    
    sap.ino.wall.WallItemArrow.prototype.setStyle = function(sStyle, bSuppressRecalc) {
        this.setProperty("style", sStyle, true);
        this.updateArrowSVG();
    };
    
    sap.ino.wall.WallItemArrow.prototype.setHeadStyle = function(sHeadStyle, bSuppressRecalc) {
        this.setProperty("headStyle", sHeadStyle, true);
        this.updateArrowSVG();
    };
    
    sap.ino.wall.WallItemArrow.prototype.setW = function(sW, bSuppressRecalc) {
        sap.ino.wall.WallItemBase.prototype.setW.apply(this, arguments);
        if (!bSuppressRecalc) {
            this.recalcPoints();
        }
        this.updateArrowSVG();
    };
    
    sap.ino.wall.WallItemArrow.prototype.setH = function(sH, bSuppressRecalc) {
        sap.ino.wall.WallItemBase.prototype.setH.apply(this, arguments);
        if (!bSuppressRecalc) {
            this.recalcPoints();
        }
        this.updateArrowSVG();
    };
    
    sap.ino.wall.WallItemArrow.prototype.setX = function(sX, bSuppressRecalc) {
        sap.ino.wall.WallItemBase.prototype.setX.apply(this, arguments);
        if (!bSuppressRecalc) {
            this.recalcPoints();
        }
        this.updateArrowSVG();
    };
    
    sap.ino.wall.WallItemArrow.prototype.setY = function(sY, bSuppressRecalc) {
        sap.ino.wall.WallItemBase.prototype.setY.apply(this, arguments);
        if (!bSuppressRecalc) {
            this.recalcPoints();
        }
        this.updateArrowSVG();
    };
    
    sap.ino.wall.WallItemArrow.prototype.setX1 = function(x1) {
        this.setProperty("x1", x1, true);
        this.updateArrowSVG();
    };
    
    sap.ino.wall.WallItemArrow.prototype.setY1 = function(y1) {
        this.setProperty("y1", y1, true);
        this.updateArrowSVG();
    };
    
    sap.ino.wall.WallItemArrow.prototype.setX2 = function(x2) {
        this.setProperty("x2", x2, true);
        this.updateArrowSVG();
    };
    
    sap.ino.wall.WallItemArrow.prototype.setY2 = function(y2) {
        this.setProperty("y2", y2, true);
        this.updateArrowSVG();
    };
        
    sap.ino.wall.WallItemArrow.prototype.recalcPoints = function() {
        if (this.getX1() <= this.getX2()) {
           this.setX1(parseFloat(this.getProperty("x")) || 0);
           this.setX2((parseFloat(this.getProperty("x")) || 0) + (parseFloat(this.getProperty("w")) || 0));
        } else {
           this.setX1((parseFloat(this.getProperty("x")) || 0) + (parseFloat(this.getProperty("w")) || 0));
           this.setX2(parseFloat(this.getProperty("x")) || 0);
        }
        if (this.getY1() <= this.getY2()) {
            this.setY1(parseFloat(this.getProperty("y")) || 0);
            this.setY2((parseFloat(this.getProperty("y")) || 0) + (parseFloat(this.getProperty("h")) || 0));
        } else {
            this.setY1((parseFloat(this.getProperty("y")) || 0) + (parseFloat(this.getProperty("h")) || 0));
            this.setY2(parseFloat(this.getProperty("y")) || 0);
        }
    };
    
    sap.ino.wall.WallItemArrow.prototype.recalcBounds = function() {
        this.setX(Math.min(this.getX1(), this.getX2()) + "px", true);
        this.setY(Math.min(this.getY1(), this.getY2()) + "px", true);
        this.setW(Math.max(Math.abs(this.getX2() - this.getX1()), 1) + "px", true);
        this.setH(Math.max(Math.abs(this.getY2() - this.getY1()), 1) + "px", true);
    };
    
    sap.ino.wall.WallItemArrow.prototype.onTouchStartItem = function(oEvent) {
        if (jQuery(oEvent.target).hasClass("sapInoWallWIArrowStartHandle")) {
            this._touchMode = sap.ino.wall.WallConfig._ITEM_TOUCHMODE_MOVE_START;
            this._touchStartItemX = parseFloat(this.getX());
            this._touchStartItemY = parseFloat(this.getY());
            // set cursor to grabbing
            this.$().find(".sapInoWallWIArrowStartHandle").addClass("dragCursor");
            this.$().find(".sapInoWallWIArrowEndHandle").addClass("dragCursor");
            return true;
        } else if (jQuery(oEvent.target).hasClass("sapInoWallWIArrowEndHandle")) {
            this._touchMode = sap.ino.wall.WallConfig._ITEM_TOUCHMODE_MOVE_END;
            this._touchStartItemX = parseFloat(this.getX());
            this._touchStartItemY = parseFloat(this.getY());
            // set cursor to grabbing
            this.$().find(".sapInoWallWIArrowStartHandle").addClass("dragCursor");
            this.$().find(".sapInoWallWIArrowEndHandle").addClass("dragCursor");
            return true;
        } else if (!jQuery(oEvent.target).hasClass("sapInoWallWIArrowMoveHandle")) {
            if (this.getFlipped()) {
                return false;
            } else {
                return null;
            }
        }
        return false;
    };
    
    sap.ino.wall.WallItemArrow.prototype._ontouchmove = function(oEvent) {
        sap.ino.wall.WallItemBase.prototype._ontouchmove.apply(this, arguments);
        if (this._touchMode == sap.ino.wall.WallConfig._ITEM_TOUCHMODE_MOVE_START ||
            this._touchMode == sap.ino.wall.WallConfig._ITEM_TOUCHMODE_MOVE_END) {    
            var oWall = this.getWall()
            if (this._fDeltaX || this._fDeltaY) {
                // flag this item and the wall as moving
                this._bMoving = true;
                oWall._bMovingItem = true;
            }
            this._ignoreTrash = true;
            
            var fZoomModifier = 100 / oWall.getZoom();        
            var fDeltaX = this._fDeltaX * fZoomModifier;
            var fDeltaY = this._fDeltaY * fZoomModifier;
            if (this._touchMode == sap.ino.wall.WallConfig._ITEM_TOUCHMODE_MOVE_START) {
                this.setX1(this.getX1() + fDeltaX);
                this.setY1(this.getY1() + fDeltaY);
                this.recalcBounds();
            } else if (this._touchMode == sap.ino.wall.WallConfig._ITEM_TOUCHMODE_MOVE_END) {
                this.setX2(this.getX2() + fDeltaX);
                this.setY2(this.getY2() + fDeltaY);
                this.recalcBounds();
            }
        }
    };

    sap.ino.wall.WallItemArrow.prototype._ontouchend = function(oEvent) {
        sap.ino.wall.WallItemBase.prototype._ontouchend.apply(this, arguments);
        if (this._touchMode == sap.ino.wall.WallConfig._ITEM_TOUCHMODE_MOVE_START) {
            this._bMoving = false;
            this._ignoreTrash = false;
        } else if (this._touchMode == sap.ino.wall.WallConfig._ITEM_TOUCHMODE_MOVE_END) {
            this._bMoving = false;
            this._ignoreTrash = false;
        }
        this.$().find(".sapInoWallWIArrowStartHandle").removeClass("dragCursor");
        this.$().find(".sapInoWallWIArrowEndHandle").removeClass("dragCursor");
    };
    
    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Button} the button
     */
    sap.ino.wall.WallItemArrow.prototype._getButtonStyleSolid = function() {
        var that = this, oControl = this.getAggregation("_buttonStyleSolid");

        if (!oControl) {
            // create control
            oControl = new sap.m.ToggleButton(this.getId() + "-buttonStyleSolid", {
                tooltip : this._oRB.getText("WALL_ITEMARROW_STATUSMSG_STYLE_SOLID"),
                press : function(oEvent) {
                    that.setStyle("SOLID");
                    sap.ui.getCore().byId(that.getId() + "-buttonStyleSolid").setPressed(true);
                    sap.ui.getCore().byId(that.getId() + "-buttonStyleDashed").setPressed(false);
                    sap.ui.getCore().byId(that.getId() + "-buttonStyleDotted").setPressed(false);
                }
            }).addStyleClass("noflip").addStyleClass("sapInoWallWIArrowButton").addStyleClass("sapInoWallWIArrowButtonSOLID");

            // set initial state
            if (this.getStyle() === "SOLID") {
                oControl.setPressed(true);
            }

            // set hidden aggregation without rerendering
            this.setAggregation("_buttonStyleSolid", oControl, true);
        }

        return oControl;
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Button} the button
     */
    sap.ino.wall.WallItemArrow.prototype._getButtonStyleDashed = function() {
        var that = this, oControl = this.getAggregation("_buttonStyleDashed");

        if (!oControl) {
            // create control
            oControl = new sap.m.ToggleButton(this.getId() + "-buttonStyleDashed", {
                tooltip : this._oRB.getText("WALL_ITEMARROW_STATUSMSG_STYLE_DASHED"),
                press : function(oEvent) {
                    that.setStyle("DASHED");
                    sap.ui.getCore().byId(that.getId() + "-buttonStyleSolid").setPressed(false);
                    sap.ui.getCore().byId(that.getId() + "-buttonStyleDashed").setPressed(true);
                    sap.ui.getCore().byId(that.getId() + "-buttonStyleDotted").setPressed(false);
                }
            }).addStyleClass("noflip").addStyleClass("sapInoWallWIArrowButton").addStyleClass("sapInoWallWIArrowButtonDASHED");

            // set initial state
            if (this.getStyle() === "DASHED") {
                oControl.setPressed(true);
            }

            // set hidden aggregation without rerendering
            this.setAggregation("_buttonStyleDashed", oControl, true);
        }

        return oControl;
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Button} the button
     */
    sap.ino.wall.WallItemArrow.prototype._getButtonStyleDotted = function() {
        var that = this, oControl = this.getAggregation("_buttonStyleDotted");

        if (!oControl) {
            // create control
            oControl = new sap.m.ToggleButton(this.getId() + "-buttonStyleDotted", {
                tooltip : this._oRB.getText("WALL_ITEMARROW_STATUSMSG_STYLE_DOTTED"),
                press : function(oEvent) {
                    that.setStyle("DOTTED");
                    sap.ui.getCore().byId(that.getId() + "-buttonStyleSolid").setPressed(false);
                    sap.ui.getCore().byId(that.getId() + "-buttonStyleDashed").setPressed(false);
                    sap.ui.getCore().byId(that.getId() + "-buttonStyleDotted").setPressed(true);
                }
            }).addStyleClass("noflip").addStyleClass("sapInoWallWIArrowButton").addStyleClass("sapInoWallWIArrowButtonEnd").addStyleClass("sapInoWallWIArrowButtonDOTTED");

            // set initial state
            if (this.getStyle() === "DOTTED") {
                oControl.setPressed(true);
            }

            // set hidden aggregation without rerendering
            this.setAggregation("_buttonStyleDotted", oControl, true);
        }

        return oControl;
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Button} the button
     */
    sap.ino.wall.WallItemArrow.prototype._getButtonThickness3 = function() {
        var that = this, oControl = this.getAggregation("_buttonThickness3");

        if (!oControl) {
            // create control
            oControl = new sap.m.ToggleButton(this.getId() + "-buttonThickness3", {
                tooltip : this._oRB.getText("WALL_ITEMARROW_STATUSMSG_THICKNESS_3"),
                press : function(oEvent) {
                    that.setThickness(3);
                    sap.ui.getCore().byId(that.getId() + "-buttonThickness3").setPressed(true);
                    sap.ui.getCore().byId(that.getId() + "-buttonThickness4").setPressed(false);
                    sap.ui.getCore().byId(that.getId() + "-buttonThickness5").setPressed(false);
                }
            }).addStyleClass("noflip").addStyleClass("sapInoWallWIArrowButton").addStyleClass("sapInoWallWIArrowButtonThin");

            // set initial state
            if (this.getThickness() === 3) {
                oControl.setPressed(true);
            }

            // set hidden aggregation without rerendering
            this.setAggregation("_buttonThickness3", oControl, true);
        }

        return oControl;
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Button} the button
     */
    sap.ino.wall.WallItemArrow.prototype._getButtonThickness4 = function() {
        var that = this, oControl = this.getAggregation("_buttonThickness4");

        if (!oControl) {
            // create control
            oControl = new sap.m.ToggleButton(this.getId() + "-buttonThickness4", {
                tooltip : this._oRB.getText("WALL_ITEMARROW_STATUSMSG_THICKNESS_4"),
                press : function(oEvent) {
                    that.setThickness(4);
                    sap.ui.getCore().byId(that.getId() + "-buttonThickness3").setPressed(false);
                    sap.ui.getCore().byId(that.getId() + "-buttonThickness4").setPressed(true);
                    sap.ui.getCore().byId(that.getId() + "-buttonThickness5").setPressed(false);
                }
            }).addStyleClass("noflip").addStyleClass("sapInoWallWIArrowButton").addStyleClass("sapInoWallWIArrowButtonMedium");

            // set initial state
            if (this.getThickness() === 4) {
                oControl.setPressed(true);
            }

            // set hidden aggregation without rerendering
            this.setAggregation("_buttonThickness4", oControl, true);
        }

        return oControl;
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Button} the button
     */
    sap.ino.wall.WallItemArrow.prototype._getButtonThickness5 = function() {
        var that = this, oControl = this.getAggregation("_buttonThickness5");

        if (!oControl) {
            // create control
            oControl = new sap.m.ToggleButton(this.getId() + "-buttonThickness5", {
                tooltip : this._oRB.getText("WALL_ITEMARROW_STATUSMSG_THICKNESS_5"),
                press : function(oEvent) {
                    that.setThickness(5);
                    sap.ui.getCore().byId(that.getId() + "-buttonThickness3").setPressed(false);
                    sap.ui.getCore().byId(that.getId() + "-buttonThickness4").setPressed(false);
                    sap.ui.getCore().byId(that.getId() + "-buttonThickness5").setPressed(true);
                }
            }).addStyleClass("noflip").addStyleClass("sapInoWallWIArrowButton").addStyleClass("sapInoWallWIArrowButtonEnd").addStyleClass("sapInoWallWIArrowButtonThick");

            // set initial state
            if (this.getThickness() === 5) {
                oControl.setPressed(true);
            }

            // set hidden aggregation without rerendering
            this.setAggregation("_buttonThickness5", oControl, true);
        }

        return oControl;
    };
    
    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Button} the button
     */
    sap.ino.wall.WallItemArrow.prototype._getButtonHeadStyleNone = function() {
        var that = this, oControl = this.getAggregation("_buttonHeadStyleNone");

        if (!oControl) {
            // create control
            oControl = new sap.m.ToggleButton(this.getId() + "-buttonHeadStyleNone", {
                tooltip : this._oRB.getText("WALL_ITEMARROW_STATUSMSG_HEAD_STYLE_NONE"),
                press : function(oEvent) {
                    that.setHeadStyle("NONE");
                    sap.ui.getCore().byId(that.getId() + "-buttonHeadStyleNone").setPressed(true);
                    sap.ui.getCore().byId(that.getId() + "-buttonHeadStyleStart").setPressed(false);
                    sap.ui.getCore().byId(that.getId() + "-buttonHeadStyleEnd").setPressed(false);
                    sap.ui.getCore().byId(that.getId() + "-buttonHeadStyleBoth").setPressed(false);
                }
            }).addStyleClass("noflip").addStyleClass("sapInoWallWIArrowButton").addStyleClass("sapInoWallWIArrowButtonNONE");

            // set initial state
            if (this.getHeadStyle() === "NONE") {
                oControl.setPressed(true);
            }

            // set hidden aggregation without rerendering
            this.setAggregation("_buttonHeadStyleNone", oControl, true);
        }

        return oControl;
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Button} the button
     */
    sap.ino.wall.WallItemArrow.prototype._getButtonHeadStyleStart = function() {
        var that = this, oControl = this.getAggregation("_buttonHeadStyleStart");

        if (!oControl) {
            // create control
            oControl = new sap.m.ToggleButton(this.getId() + "-buttonHeadStyleStart", {
                tooltip : this._oRB.getText("WALL_ITEMARROW_STATUSMSG_HEAD_STYLE_START"),
                press : function(oEvent) {
                    that.setHeadStyle("START");
                    sap.ui.getCore().byId(that.getId() + "-buttonHeadStyleNone").setPressed(false);
                    sap.ui.getCore().byId(that.getId() + "-buttonHeadStyleStart").setPressed(true);
                    sap.ui.getCore().byId(that.getId() + "-buttonHeadStyleEnd").setPressed(false);
                    sap.ui.getCore().byId(that.getId() + "-buttonHeadStyleBoth").setPressed(false);
                }
            }).addStyleClass("noflip").addStyleClass("sapInoWallWIArrowButton").addStyleClass("sapInoWallWIArrowButtonSTART");

            // set initial state
            if (this.getHeadStyle() === "START") {
                oControl.setPressed(true);
            }

            // set hidden aggregation without rerendering
            this.setAggregation("_buttonHeadStyleStart", oControl, true);
        }

        return oControl;
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Button} the button
     */
    sap.ino.wall.WallItemArrow.prototype._getButtonHeadStyleEnd = function() {
        var that = this, oControl = this.getAggregation("_buttonHeadStyleEnd");

        if (!oControl) {
            // create control
            oControl = new sap.m.ToggleButton(this.getId() + "-buttonHeadStyleEnd", {
                tooltip : this._oRB.getText("WALL_ITEMARROW_STATUSMSG_HEAD_STYLE_END"),
                press : function(oEvent) {
                    that.setHeadStyle("END");
                    sap.ui.getCore().byId(that.getId() + "-buttonHeadStyleNone").setPressed(false);
                    sap.ui.getCore().byId(that.getId() + "-buttonHeadStyleStart").setPressed(false);
                    sap.ui.getCore().byId(that.getId() + "-buttonHeadStyleEnd").setPressed(true);
                    sap.ui.getCore().byId(that.getId() + "-buttonHeadStyleBoth").setPressed(false);
                }
            }).addStyleClass("noflip").addStyleClass("sapInoWallWIArrowButton").addStyleClass("sapInoWallWIArrowButtonEND");

            // set initial state
            if (this.getHeadStyle() === "END") {
                oControl.setPressed(true);
            }

            // set hidden aggregation without rerendering
            this.setAggregation("_buttonHeadStyleEnd", oControl, true);
        }

        return oControl;
    };
    
    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Button} the button
     */
    sap.ino.wall.WallItemArrow.prototype._getButtonHeadStyleBoth = function() {
        var that = this, oControl = this.getAggregation("_buttonHeadStyleBoth");

        if (!oControl) {
            // create control
            oControl = new sap.m.ToggleButton(this.getId() + "-buttonHeadStyleBoth", {
                tooltip : this._oRB.getText("WALL_ITEMARROW_STATUSMSG_HEAD_STYLE_BOTH"),
                press : function(oEvent) {
                    that.setHeadStyle("BOTH");
                    sap.ui.getCore().byId(that.getId() + "-buttonHeadStyleNone").setPressed(false);
                    sap.ui.getCore().byId(that.getId() + "-buttonHeadStyleStart").setPressed(false);
                    sap.ui.getCore().byId(that.getId() + "-buttonHeadStyleEnd").setPressed(false);
                    sap.ui.getCore().byId(that.getId() + "-buttonHeadStyleBoth").setPressed(true);
                }
            }).addStyleClass("noflip").addStyleClass("sapInoWallWIArrowButton").addStyleClass("sapInoWallWIArrowButtonEnd").addStyleClass("sapInoWallWIArrowButtonBOTH");

            // set initial state
            if (this.getHeadStyle() === "BOTH") {
                oControl.setPressed(true);
            }

            // set hidden aggregation without rerendering
            this.setAggregation("_buttonHeadStyleBoth", oControl, true);
        }

        return oControl;
    };
    
    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Button} the button
     */
    sap.ino.wall.WallItemArrow.prototype._getColorPicker = function() {
        var that = this, oControl = this.getAggregation("_colorPicker");

        if (!oControl) {
            // create control
            oControl = new sap.ino.wall.ColorPicker(this.getId() + "-colorPicker", {
                color : this.getColor(),
                change : function(oEvent) {
                    that.setColor(oEvent.getParameter("color"));
                }
            });
            
            // do not set during initialiting colorpicker => bug w/ setting the color to the colorpicker
            oControl.setPlacement(sap.m.PlacementType.Vertical);

            // set hidden aggregation without rerendering
            this.setAggregation("_colorPicker", oControl, true);
        }

        return oControl;
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Button} the button
     */
    sap.ino.wall.WallItemArrow.prototype._getButtonColorSelector = function() {
        var that = this, oControl = this.getAggregation("_buttonColorSelector");

        if (!oControl) {
            // create control
            oControl = new sap.m.Button(this.getId() + "-buttonColorSelector", {
                tooltip : this._oRB.getText("WALL_ITEMARROW_STATUSMSG_COLOR_SELECT"),
                press : function(oEvent) {
                    var oColorPicker = that._getColorPicker();
                    if (oColorPicker.isOpen()) {
                        oColorPicker.close();
                    } else {
                        oColorPicker.openBy(oControl, 40, 40);
                    }
                },
                icon : "sap-icon://palette"
            }).addStyleClass("noflip").addStyleClass("sapInoWallWIArrowColorSelectorButton").addStyleClass("sapInoWallWIArrowButton").addStyleClass("sapInoWallWIArrowButtonEnd").addStyleClass("sapInoWallWIArrowColorSelectorButtonNormal");

            // set hidden aggregation without rerendering
            this.setAggregation("_buttonColorSelector", oControl, true);
        }

        return oControl;
    };

    
    /**
     * Creates a minimalic JSON representation of the item to be stored in the db
     * 
     * @override
     * @returns {object} the JSON object representation of the item
     * @public
     */
    sap.ino.wall.WallItemArrow.prototype.formatToJSON = function() {
        // call the base object's JSON method
        var oJSON = sap.ino.wall.WallItemBase.prototype.formatToJSON.call(this);
        // add properties of this control
        oJSON.x1 = this.getX1();
        oJSON.y1 = this.getY1();
        oJSON.x2 = this.getX2();
        oJSON.y2 = this.getY2();
        oJSON.thickness = this.getThickness();
        oJSON.style = this.getStyle();
        oJSON.color = this.getColor();
        oJSON.headStyle = this.getHeadStyle();
        // return the final object
        return oJSON;
    };

})();
}; // end of sap/ino/wall/WallItemArrow.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallItemArrowRenderer') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallItemArrowRenderer");

(function() {
    "use strict";

    
    
    
    jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

    
    /**
     * @class WallItemText renderer.
     * @static
     */
    sap.ino.wall.WallItemArrowRenderer = sap.ui.core.Renderer.extend(sap.ino.wall.WallItemBaseRenderer);

    sap.ino.wall.WallItemArrowRenderer.addOuterStyleClasses = function(oRM) {
        oRM.addClass("sapInoWallWIArrow");
    };
    
    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be rendered
     */
    sap.ino.wall.WallItemArrowRenderer.renderItem = function(oRM, oControl) {
        var sId = oControl.getId(), sKey = null;

        // start wrapper
        oRM.write("<div class=\"flippable\">");

        oRM.write("<label id=\"" + oControl.getId() + "-wallitem-description\" class=\"sapInoWallItemDescription\" style=\"height:0px;width:0px;overflow:hidden;position:absolute;\">");
        // this is only to prevent text bundle errors if color is not yet set in model
        var sText = sap.ino.wall.util.Helper.stripTags(oControl.getTitle());
        if (sText && sText.trim() !== "") {
            oRM.write(oControl._oRB.getText("CRTL_WALL_ITEMARROW_EXP_READERTEXT", [sText]));
        }
        else {
            oRM.writeEscaped(oControl._oRB.getText("CRTL_WALL_ITEMARROW_EXP_READERTEXT_EMPTY"));
        }
        oRM.write("</label>");

        /* front panel (view) */
        
        var f = oControl.calcFigures();
        
        oRM.write("<div id=" + oControl.getId() + "-front");
        oRM.addClass("sapInoWallWIArrow");
        oRM.addClass("front");
        oRM.writeClasses();
        oRM.write("style=\"" + (f.w ? "width: " + f.w : "") + (f.h ? "px; height: " + f.h : "") + "px\"");
        oRM.write(">");

        if (!sap.ino.wall.config.Config.getDebugPositioning()) {
            // Arrow
            sap.ino.wall.WallItemArrowRenderer.renderArrow(oRM, oControl, "front", f);
        } else {
            oRM.write("front");
        }
        
        oRM.write("<div class=\"sapInoWallWIArrowMoveHandle\"");
        oRM.write("style=\"" + "transform: rotateZ(" + f.r + "rad); width: " + f.d + "px; height: " + f.t + "px; left: " + (f.hx-f.x) + "px; top: " + (f.hy-f.y) + "px; color: " + oControl.getColor() + "\"");
        oRM.write(">");
        if (oControl.getTitle()) {
            oRM.writeEscaped(oControl.getTitle());
        }
        oRM.write("</div>");
        
        oRM.write("<div class=\"sapInoWallWIArrowStartHandle\"");
        oRM.write("style=\"" + "left: " + (f.x1-f.x-f.hs/2) + "px; top: " + (f.y1-f.y-f.hs/2) + "px\"");
        oRM.write(">");
        oRM.write("</div>");

        oRM.write("<div class=\"sapInoWallWIArrowEndHandle\"");
        oRM.write("style=\"" + "left: " + (f.x2-f.x-f.hs/2) + "px; top: " + (f.y2-f.y-f.hs/2) + "px\"");
        oRM.write(">");
        oRM.write("</div>");
        
        // end front side
        oRM.write("</div>");

        /* back panel (edit) */

        oRM.write("<div id=" + oControl.getId() + "-back");
        oRM.addClass("sapInoWallWIArrow");
        oRM.addClass("back");
        oRM.writeClasses();
        oRM.write("style=\"" + (f.w ? "width: " + f.w : "") + (f.h ? "px; height: " + f.h : "") + "px\"");
        oRM.write(">");

        if (!sap.ino.wall.config.Config.getDebugPositioning()) {
            // Arrow
            sap.ino.wall.WallItemArrowRenderer.renderArrow(oRM, oControl, "back", f);
            // Flip
            oRM.write("<div class=\"sapInoWallWIFlipEdit\">");
            // back button (is not mirrored on line item, so we have to use the inverse icon to stay in sync)
            oRM.renderControl(oControl._getButtonFlip().setIcon("sap-icon://undo").removeStyleClass("sapInoWallWIFlipBackButton").addStyleClass("sapInoWallWIArrowButton").addStyleClass("sapInoWallWIArrowButtonFlip"));
            oRM.write("</div>");
            // Title
            oRM.write("<div class=\"sapInoWallWITitleEdit sapInoWallWITitleEditArrow\">");
            oRM.renderControl(oControl._getInputTitle().setProperty("placeholder", oControl._oRB.getText("WALL_ITEMTEXT_PLACEHOLDER_TITLE"), true));
            oRM.write("</div>");
            // style
            oRM.write("<div class=\"sapInoWallWIStyleEdit\">");
            oRM.renderControl(oControl._getButtonStyleSolid());
            oRM.renderControl(oControl._getButtonStyleDashed());
            oRM.renderControl(oControl._getButtonStyleDotted());
            oRM.write("</div>");
            // thickness selector
            oRM.write("<div class=\"sapInoWallWIThicknessEdit\">");
            oRM.renderControl(oControl._getButtonThickness3());
            oRM.renderControl(oControl._getButtonThickness4());
            oRM.renderControl(oControl._getButtonThickness5());
            oRM.write("</div>");
            // head style selector
            oRM.write("<div class=\"sapInoWallWIHeadStyleEdit\">");
            oRM.renderControl(oControl._getButtonHeadStyleNone());
            oRM.renderControl(oControl._getButtonHeadStyleStart());
            oRM.renderControl(oControl._getButtonHeadStyleEnd());
            oRM.renderControl(oControl._getButtonHeadStyleBoth());
            oRM.write("</div>");
            // color selector
            oRM.write("<div class=\"sapInoWallWIColorEdit\">");
            oRM.renderControl(oControl._getButtonColorSelector());
            oRM.write("</div>");
        } else {
            oRM.write("back");
        }

        // end back side
        oRM.write("</div>");
        
        // end wrapper
        oRM.write("</div>");
    };
    
    sap.ino.wall.WallItemArrowRenderer.renderArrow = function(oRM, oControl, sSideId, f) {
        var sMarkerStartId = oControl.getId() + "-" + sSideId + "-start-triangle";
        var sMarkerEndId = oControl.getId() + "-" + sSideId + "-end-triangle";
        var sMarkerStart = oControl.getHeadStyle() == "START" || oControl.getHeadStyle() == "BOTH" ? "url(#" + sMarkerStartId + ")" : "none";
        var sMarkerEnd = oControl.getHeadStyle() == "END" || oControl.getHeadStyle() == "BOTH" ? "url(#" + sMarkerEndId + ")" : "none";
        var sDashArray = "none";
        switch (oControl.getStyle()) {
            case "DOTTED":
                sDashArray = "4, 4";
                break;
            case "DASHED":
                sDashArray = "10, 5";
                break;
            case "SOLID" :
                /* falls through */
            default:
                break;
        }
        oRM.write("<svg id=\"" + oControl.getId() + "-" + sSideId + "-arrow" + "\" class=\"sapInoWallWIArrowMarker\" xmlns=\"http://www.w3.org/2000/svg\" width=\"" + f.w + "px\" height=\"" + f.h + "px\" viewBox=\"0 0 " + f.w + " " + f.h + "\">");
        oRM.write("<marker id=\"" + sMarkerStartId + "\" viewBox=\"0 0 10 10\" refX=\"" + (oControl.getThickness() / 2) + "\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"" + oControl.getThickness() + "\" markerHeight=\"" + oControl.getThickness() + "\" stroke-dasharray=\"none\" orient=\"auto\" overflow=\"visible\">");
        oRM.write("<path d=\"M -2 5 L 8 0 L 8 10 z\" fill=\"" + oControl.getColor() + "\"/>");
        oRM.write("</marker>");
        oRM.write("<marker id=\"" + sMarkerEndId + "\" viewBox=\"0 0 10 10\" refX=\"" + (6 + oControl.getThickness() / 2) + "\" refY=\"5\" markerUnits=\"strokeWidth\" markerWidth=\"" + oControl.getThickness() + "\" markerHeight=\"" + oControl.getThickness() + "\" orient=\"auto\"> overflow=\"visible\"");
        oRM.write("<path d=\"M 0 0 L 10 5 L 0 10 z\" fill=\"" + oControl.getColor() + "\"/>");
        oRM.write("</marker>");
        oRM.write("<line x1=\"" + (f.x1-f.x) + "\" y1=\"" + (f.y1-f.y) + "\" x2=\"" + (f.x2-f.x) + "\" y2=\"" + (f.y2-f.y) + "\" marker-start=\"" + sMarkerStart + "\" marker-end=\"" + sMarkerEnd + "\" stroke-dasharray=\"" + sDashArray + "\" stroke=\"" + oControl.getColor() + "\" stroke-width=\"" + oControl.getThickness() + "\"/>");
        oRM.write("</svg>");
    }
})();
}; // end of sap/ino/wall/WallItemArrowRenderer.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallItemAttachment') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallItemAttachment");

(function() {
    "use strict";

    
    
    jQuery.sap.require('sap.ino.commons.models.object.Attachment'); // unlisted dependency retained

    jQuery.sap.require('sap.ino.commons.application.Configuration'); // unlisted dependency retained

    var Configuration = sap.ino.commons.application.Configuration;
    
    var AttachmentType = {
        DOCUMENT : "DOCUMENT",
        IMAGE : "IMAGE",
        VIDEO : "VIDEO",
        AUDIO : "AUDIO",
        TEXT : "TEXT",
        ERROR : "ERROR",
        DEFAULT : "DOCUMENT"
    };

    sap.ino.wall.WallItemBase.extend("sap.ino.wall.WallItemAttachment", {
        metadata : {
            properties : {
                "status" : {
                    type : "string",
                    group : "Appearance",
                    defaultValue : 'Normal'
                },
                "URL" : {
                    type : "sap.ui.core.URI",
                    group : "Data",
                    defaultValue : null
                },
                "type" : {
                    type : "string",
                    group : "Appearance",
                    defaultValue : null
                },
                "fileName" : {
                    type : "string",
                    group : "Data",
                    defaultValue : null
                },
                "assignmentId" : {
                    type : "int",
                    group : "Identification",
                    defaultValue : -1
                }
            },
            aggregations : {
                "_icon" : {
                    type : "sap.ui.core.Icon",
                    multiple : false,
                    visibility : "hidden"
                },
                "_busyIndicator" : {
                    type : "sap.m.BusyIndicator",
                    multiple : false,
                    visibility : "hidden"
                },
                "_dropUpload" : {
                    type : "sap.ino.wall.DropUpload",
                    multiple : false,
                    visibility : "hidden"
                }
            }
        }
    });

    sap.ino.wall.WallItemAttachment.AttachmentType = AttachmentType;
    
    /**
     * Initializes the control
     * 
     * @private
     */
    sap.ino.wall.WallItemAttachment.prototype.init = function() {
        sap.ino.wall.WallItemBase.prototype.init.call(this);

        this.setResizable(false);
    };

    /*******************************************************************************************************************
     * overloaded setters to supress rendering and update ui
     ******************************************************************************************************************/

    sap.ino.wall.WallItemAttachment.prototype.setURL = function(sURI) {
        
        this.setProperty("URL", sURI, true);
        this.updateIcon();

        // inform wall that this item has changed a persistence property
        if (this.getParent()) {
            this.getParent()._notifyItemChanged(this);
        }
        return this;
    };
    
    sap.ino.wall.WallItemAttachment.prototype.setAssignmentId = function(iID) {
        
        this.setProperty("assignmentId", iID, true);
        
        // inform wall that this item has changed a persistence property
        if (this.getParent()) {
            this.getParent()._notifyItemChanged(this);
        }
        return this;
    };

    sap.ino.wall.WallItemAttachment.prototype._uploadDoc = function(oEvent) {
        var that = this;
        var aFiles = oEvent.getParameter("files");
        var oFile, sFilename, oFormData, oReader, iStorageId;

        // display an error if user tries to drop a file with IE9
        if (sap.ui.Device.browser.name === "ie" && sap.ui.Device.browser.version < 10 && aFiles === undefined) {
            return;
        }

        // hide drag preview
        jQuery.sap.byId(this.getParent().getId() + "-drag").css("display", "none");

        // reset cursor to normal
        this.$().removeClass("dragCursor");

        if (aFiles.length !== 0) {
            oFile = aFiles[0];
            
            that.setStatus("Busy");
            that.setFlipped(false);
            sap.ino.commons.models.object.Attachment.uploadFile(oFile).done(function(oResponse) {
                var iStorageId = oResponse.attachmentId;
                var sFileName = oResponse.fileName;
                var sType = oResponse.mediaType;
                setTimeout(function() {
                    that.setURL(Configuration.getAttachmentDownloadURL(iStorageId));
                    that.setTitle(sFileName);
                    that.setType(sType);
                    that.setFileName(sFileName);
                    
                    that.updateIcon();
                    that.setStatus("Normal");
                    
                    that._iStorageId = iStorageId;
                }, 500);
            }).fail(function(oResponse) {
                var aMsg = oResponse.messages;
                
                that.setType(AttachmentType.ERROR);
                
                that.updateIcon();
                that.setStatus("Normal");   
                
                // TODO introduce common error handling
                if (aMsg && aMsg.length > 0) {
                    sap.m.MessageToast.show(that._oMB.getText(aMsg[0].MESSAGE, aMsg[0].PARAMETERS), { duration: 6000 });
                }
            });
        }
    };

    
    /*******************************************************************************************************************
     * overloaded setters to supress rendering and update ui
     ******************************************************************************************************************/
    
    sap.ino.wall.WallItemAttachment.prototype.setTitle = function(sTitle, bSuppressNotify) {
        sap.ino.wall.WallItemBase.prototype.setTitle.apply(this, [sTitle, bSuppressNotify]);
        
        if (sTitle !== this._oRB.getText("WALL_ITEMATTACHMENT_NEW_TEXT")) {
            this._getInputTitle().setValue(sTitle);
            this._getInputTitle().$().children("input").attr("value", sTitle);
        }
        return this;
    };
    
    sap.ino.wall.WallItemAttachment.prototype.setType = function(sType) {
        sType = sap.ino.wall.WallItemAttachment.mapType(sType);
        this.setProperty("type", sType, true);   
        
        if (this.getParent()) {
            this.getParent()._notifyItemChanged(this);
        }
        this.updateIcon();
        return this;
    };
    

    sap.ino.wall.WallItemAttachment.mapType = function(sType) {
        if (sType === AttachmentType.IMAGE || sType.indexOf("image/") === 0) {
            sType = AttachmentType.IMAGE;
        }
        else if (sType === AttachmentType.VIDEO || sType.indexOf("video/") === 0) {
            sType = AttachmentType.VIDEO;
        }
        else if (sType === AttachmentType.AUDIO || sType.indexOf("audio/") === 0) {
            sType = AttachmentType.AUDIO;
        }
        else if (sType === AttachmentType.TEXT || sType.indexOf("text/") === 0) {
            sType = AttachmentType.TEXT;
        }
        else if (sType === AttachmentType.ERROR) {
            sType = AttachmentType.ERROR;
        }
        else if (sType === AttachmentType.DOCUMENT) {
            sType = AttachmentType.DOCUMENT;
        }
        else {
            sType = AttachmentType.DEFAULT;
        }        
        return sType;
    }
    
    sap.ino.wall.WallItemAttachment.prototype.setFileName = function(sName) {
        
        this.setProperty("fileName", sName, true);   
        
        if (this.getParent()) {
            this.getParent()._notifyItemChanged(this);
        }   
        
        this.updateIcon();
        
        return this;
    };

    /**
     * Lazy initialization of control managed in an internal aggregation
     * 
     * @private
     * @returns {sap.m/BusyIndicator} the control
     */

    sap.ino.wall.WallItemAttachment.prototype._getBusyIndicator = function() {
        var oBusyIndicator = this.getAggregation("_busyIndicator");

        if (!oBusyIndicator) {
            // create control
            oBusyIndicator = new sap.m.BusyIndicator(this.getId() + "-busy").addStyleClass("sapInoWallIndicatorBusy");

            // set hidden aggregation without rerendering
            this.setAggregation("_busyIndicator", oBusyIndicator, true);
        }

        return oBusyIndicator;
    };

    /**
     * Lazy initialization of a control managed in an internal aggregation
     * 
     * @private
     * @returns {sap.ui.core/Control} the control
     */
    sap.ino.wall.WallItemAttachment.prototype._getDropUpload = function() {
        var oControl = this.getAggregation("_dropUpload");

        if (!oControl) {
            // create control
            oControl = new sap.ino.wall.DropUpload({
                size : "L",
                change : [this._uploadDoc, this],
                icon : "sap-icon://upload",
                accept : "*/*"
            });

            // set hidden aggregation without rerendering
            this.setAggregation("_dropUpload", oControl, true);
        }

        return oControl;
    };
    
    
    sap.ino.wall.WallItemAttachment.prototype._onIconPress = function() {
        if (!this._bMoving && this.getURL()) {
            var $Link = document.createElement("a");
            $Link.href = this.getURL();
            $Link.download = this.getFileName();

            document.body.appendChild($Link);
            $Link.click();
            document.body.removeChild($Link);
        }
    };
    
    
    sap.ino.wall.WallItemAttachment.prototype.updateIcon = function() {
        this._getIcon();
    };
    
    
    sap.ino.wall.WallItemAttachment.prototype._getIcon = function() {
        var oControl = this.getAggregation("_icon");
        var that = this;
        var iSize = 85;
        var sIcon;

        // update icon every access
        switch(this.getType()) {
            case AttachmentType.IMAGE:
                sIcon = "sap-icon://attachment-photo";
                break;
            case AttachmentType.VIDEO:
                sIcon = "sap-icon://attachment-video";
                break;
            case AttachmentType.AUDIO:
                sIcon = "sap-icon://attachment-audio";
                break;
            case AttachmentType.TEXT:
                sIcon = "sap-icon://attachment-text-file";
                break;
            case AttachmentType.ERROR:
                sIcon = "sap-icon://alert";
                break;
            case AttachmentType.DOCUMENT:
                /* fall through */
            default:
                sIcon = "sap-icon://document";            
        }
        
        if (!oControl) {
            // create control
            oControl = new sap.ui.core.Icon({
                src : sIcon,
                size : iSize + "px",
                width : iSize + "px",
                height : (iSize + 10) + "px",
                decorative : true
            });
            
            // prevent invalidation when setting the tooltip
            // only support text
            oControl.setTooltip = function(sText) {
                this.setAggregation("tooltip", sText, true);
                this.$().attr("title", sText);
            };

            // set hidden aggregation without rerendering
            this.setAggregation("_icon", oControl, true);            
        }
        
        oControl.detachPress(this._onIconPress, this);
        oControl.removeStyleClass("noflip");
        
        if (this.getType() !== AttachmentType.ERROR) {
            if (this.getURL() && this.getFileName()) {
                oControl.attachPress(this._onIconPress, this);
                oControl.addStyleClass("noflip");
                oControl.setTooltip(this._oRB.getText("WALL_ITEMATTACHMENT_STATUSMSG_DOWNLOAD"));
            }
            else {
                oControl.setTooltip(this._oRB.getText("WALL_ITEMATTACHMENT_STATUSMSG_EMPTY"));
            }
            oControl.removeStyleClass("sapInoWallWIAttError");
        }
        else {
            oControl.addStyleClass("sapInoWallWIAttError");
            oControl.setTooltip(this._oRB.getText("WALL_ITEMATTACHMENT_STATUSMSG_ERROR"));
            this.setTitle(this._oRB.getText("WALL_ITEMATTACHMENT_CAPTION_ERROR"));            
        }
                        
        oControl.setSrc(sIcon);
        return oControl;
    };
    
    /*
     * Shows/hides a busy indicator when uploading imaged without rerendering @override
     */
    sap.ino.wall.WallItemAttachment.prototype.setStatus = function(sStatus) {
        this.setProperty("status", sStatus, true);
        if (this._isRendered()) {
            var $Busy = sap.ui.getCore().byId(this.getId() + "-busy");
            var $Icon = jQuery("#" + this.getId() + "-iconWrapper>span");
            
            if (this.getStatus() === "Busy") {
                if ($Busy) { $Busy.removeStyleClass("sapInoWallInvisible"); }
                if ($Icon) { $Icon.addClass("sapInoWallInvisible"); }
            } else {
                if ($Busy) { $Busy.addStyleClass("sapInoWallInvisible"); }
                if ($Icon) { $Icon.removeClass("sapInoWallInvisible"); }
            }
        }
    };

    /**
     * creates a minimalic JSON representation of the item to be stored in the db
     * 
     * @param {string}
     *            sColor color identifier
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemAttachment.prototype.formatToJSON = function() {
        // call the base object's JSON method
        var oJSON = sap.ino.wall.WallItemBase.prototype.formatToJSON.call(this);
        // add properties of this control
        if (this.getURL()) {
            oJSON.content.URL = this.getURL();
            oJSON.content.assignmentId = this.getAssignmentId();
        }
        oJSON.content.type = this.getType() || AttachmentType.DEFAULT;
        oJSON.content.fileName = this.getFileName();
        // return the final object
        return oJSON;
    };

})();
}; // end of sap/ino/wall/WallItemAttachment.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallItemAttachmentRenderer') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallItemAttachmentRenderer");

(function() {
    "use strict";

    
    

    /**
     * @class WallItemText renderer.
     * @static
     */
    sap.ino.wall.WallItemAttachmentRenderer = sap.ui.core.Renderer.extend(sap.ino.wall.WallItemBaseRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be rendered
     */

    sap.ino.wall.WallItemAttachmentRenderer.renderItem = function(oRM, oControl) {
        var oInputTitle = oControl._getInputTitle();
        var oBusyIndicator = oControl._getBusyIndicator();
        var oURL = oControl.getAggregation("URL");
        var oDropUpload = oControl._getDropUpload();
        
        // start wrapper
        oRM.write("<div class=\"flippable sapInoWallWIAtt\">");

        /* front panel (view) */

        oRM.write("<div id=" + oControl.getId() + "-front");
        oRM.addClass("front");
        oRM.writeClasses();
        // TODO: fix this: workaround for re-rendering issue (when selecting type)
        if (sap.ui.Device.browser.internet_explorer === true && oControl.getFlipped()) {
            oRM.write(" style=\"display: none\"");
        }
        oRM.write(">");

        oRM.write("<div id=" + oControl.getId() + "-frontInner");
        oRM.addClass("sapInoWallWIAttLayout");
        oRM.writeClasses();
        oRM.write(">");
        
        // render a busy indicator
        if (oControl.getStatus() !== "Busy") {
            oBusyIndicator.addStyleClass("sapInoWallInvisible");
        }
        oRM.renderControl(oBusyIndicator);

        // icon with surrounding div (content will be replaced dynamically when type changes)
        var sClasses = "sapInoWallWIAttIconWrapper";
        
        oRM.write("<div id=\"" + oControl.getId() + "-iconWrapper\" class=\"" + sClasses + "\">");
        oRM.renderControl(oControl._getIcon());
        oRM.write("</div>");

        if (!sap.ino.wall.config.Config.getDebugPositioning()) {
            // title
            oRM.write("<div class=\"sapInoWallWITitle sapInoWallWITitleText\">");
            oRM.writeEscaped(oControl.getTitle());
            oRM.write("</div>");
        } else {
            oRM.write("front");
        }

        oRM.write("</div>");
        // dogear div
        oRM.write("<div id=" + oControl.getId() + "-frontRight");
        oRM.addClass("sapInoWallWIAttRight");
        oRM.writeClasses();
        oRM.write(">");
        oRM.write("</div>");
        oRM.write("</div>");

        /* back panel (edit) */

        oRM.write("<div id=" + oControl.getId() + "-back");
        oRM.addClass("sapInoWallWIAttLayout");
        oRM.addClass("gradients");
        oRM.addClass("back");
        oRM.writeClasses();
        // TODO: fix this: workaround for re-rendering issue (when selecting type)
        if (sap.ui.Device.browser.internet_explorer === true && oControl.getFlipped()) {
            oRM.write(" style=\"backface-visibility:visible\"");
        }
        oRM.write(">");

        if (!sap.ino.wall.config.Config.getDebugPositioning()) {
            // icon drop / upload area
            oRM.write("<div class=\"sapInoWallWIAttDocEdit\">");
            oRM.renderControl(oDropUpload);
            oRM.write("</div>");
            // title
            oRM.write("<div class=\"sapInoWallWITitleEdit\">");
            oRM.renderControl(oInputTitle.setProperty("placeholder", oControl._oRB.getText("WALL_ITEMATTACHMENT_PLACEHOLDER_TITLE"), true));
            oRM.write("</div>");

        } else {
            oRM.write("back");
        }

        oRM.write("</div>");

        // back button
        oRM.renderControl(oControl._getButtonFlip());

        // end wrapper
        oRM.write("</div>");
    };

})();
}; // end of sap/ino/wall/WallItemAttachmentRenderer.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallItemSticker') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallItemSticker");

(function() {
    "use strict";

    
    
    
    
    
    
    
    
    /**
     * Constructor for a new WallItemSticker.
     * 
     * Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and
     * associated objects as well as event handlers.
     * 
     * If the name of a setting is ambiguous (e.g. a property has the same name as an event), then the framework assumes
     * property, aggregation, association, event in that order. To override this automatic resolution, one of the
     * prefixes "aggregation:", "association:" or "event:" can be added to the name of the setting (such a prefixed name
     * must be enclosed in single or double quotes).
     * 
     * The supported settings are:
     * <ul>
     * <li>Properties
     * <ul>
     * <li>{@link #getColor color} : sap.ino.wall.StickerColor (default: sap.ino.wall.StickerColor.Yellow)</li>
     * <li>{@link #getMultiLine multiLine} : boolean (default: false)</li>
     * </ul>
     * </li>
     * <li>Aggregations
     * <ul>
     * </ul>
     * </li>
     * <li>Associations
     * <ul>
     * </ul>
     * </li>
     * <li>Events
     * <ul>
     * </ul>
     * </li>
     * </ul>
     * 
     * 
     * In addition, all settings applicable to the base type
     * {@link sap.ino.wall.WallItemBase#constructor sap.ino.wall.WallItemBase} can be used as well.
     * 
     * @param {string}
     *            [sId] id for the new control, generated automatically if no id is given
     * @param {object}
     *            [mSettings] initial settings for the new control
     * 
     * @class Add your documentation for the newWallItemSticker
     * @extends sap.ino.wall.WallItemBase
     * @version 1.16.4
     * 
     * @constructor
     * @public
     * @name sap.ino.wall.WallItemSticker
     * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
     */
    sap.ino.wall.WallItemBase.extend("sap.ino.wall.WallItemSticker", {
        metadata : {
            properties : {
                "color" : {
                    type : "sap.ino.wall.StickerColor",
                    group : "Appearance",
                    defaultValue : sap.ino.wall.StickerColor.Yellow
                },
                "multiLine" : {
                    type : "boolean",
                    group : "Misc",
                    defaultValue : true
                }
            },
            aggregations : {
                "_textAreaDescription" : {
                    type : "sap.ui.core.Control",
                    multiple : false,
                    visibility : "hidden"
                },
                "_checkboxMulti" : {
                    type : "sap.m.CheckBox",
                    multiple : false,
                    visibility : "hidden"
                }
            }
        }
    });

    /**
     * Creates a new subclass of class sap.ino.wall.WallItemSticker with name <code>sClassName</code> and enriches
     * it with the information contained in <code>oClassInfo</code>.
     * 
     * <code>oClassInfo</code> might contain the same kind of informations as described in
     * {@link sap.ui.core.Element.extend Element.extend}.
     * 
     * @param {string}
     *            sClassName name of the class to be created
     * @param {object}
     *            [oClassInfo] object literal with informations about the class
     * @param {function}
     *            [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to
     *            sap.ui.core.ElementMetadata.
     * @return {function} the created class / constructor function
     * @public
     * @static
     * @name sap.ino.wall.WallItemSticker.extend
     * @function
     */

    /**
     * Getter for property <code>color</code>. The sticker design.
     * 
     * Default value is <code>Yellow</code>
     * 
     * @return {sap.ino.wall.StickerColor} the value of property <code>color</code>
     * @public
     * @name sap.ino.wall.WallItemSticker#getColor
     * @function
     */

    /**
     * Setter for property <code>color</code>.
     * 
     * Default value is <code>Yellow</code>
     * 
     * @param {sap.ino.wall.StickerColor}
     *            oColor new value for property <code>color</code>
     * @return {sap.ino.wall.WallItemSticker} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemSticker#setColor
     * @function
     */

    /**
     * Getter for property <code>multiLine</code>. Decides whether the user can send the sticky note by pressing
     * enter or not.
     * 
     * Default value is <code>false</code>
     * 
     * @return {boolean} the value of property <code>multiLine</code>
     * @public
     * @name sap.ino.wall.WallItemSticker#getMultiLine
     * @function
     */

    /**
     * Setter for property <code>multiLine</code>.
     * 
     * Default value is <code>false</code>
     * 
     * @param {boolean}
     *            bMultiLine new value for property <code>multiLine</code>
     * @return {sap.ino.wall.WallItemSticker} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemSticker#setMultiLine
     * @function
     */

    /**
     * Initializes the control
     * 
     * @private
     */
    sap.ino.wall.WallItemSticker.prototype.init = function() {
        sap.ino.wall.WallItemBase.prototype.init.call(this);

        this.setResizable(true);
    };

    /**
     * Setter for the color property to suppress re-rendering and dynamically update the item
     * 
     * @param {string}
     *            sColor color identifier
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemSticker.prototype.setColor = function(sColor, bSuppressNotify) {
        if (sColor !== this.getColor()) {
            // remove old color
            this.$().children(".flippable").find(".front, .back").toggleClass("sapInoWallWISticker" + this.getColor(), false);
            // save property
            this.setProperty("color", sColor, true);
            // set new color
            this.$().children(".flippable").find(".front, .back").toggleClass("sapInoWallWISticker" + this.getColor(), true);

            // update active class on back side
            var $All = this.$().children(".flippable").find(".sapInoWallStickerColorPicker");
            $All.removeClass("active");
            $All.attr("aria-pressed", "false");

            var $Active = this.$().children(".flippable").find(".sapInoWallStickerColorPicker.sapInoWallWISticker" + sColor);
            $Active.addClass("active");
            $Active.attr("aria-pressed", "true");

            this._updateAssistiveTechnologyDescription();

            // inform wall that this item has changed a persistence property
            if (this.getParent() && !bSuppressNotify) {
                this.getParent()._notifyItemChanged(this);
            }
        }
        return this;
    };

    /**
     * Setter for the title property (as in WallItemBase but with line breaks)
     * 
     * @param {string}
     *            sColor color identifier
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemSticker.prototype.setTitle = function(sTitle, bSuppressNotify) {
        if (this.getTitle() !== sTitle) {
            this.setProperty("title", sTitle, true);
            if (sap.ino.wall.config.Config.getEnableRichtTextEditing()) {
                // show the sanitized HTML
                this.$().children(".flippable").find(".front .sapInoWallWITitleText").html(sap.ino.wall.util.Formatter.nl2br(sap.ino.wall.util.Helper.stripTags(this.getProperty("title"), "<div><br><b><strong><u><i><em><ol><ul><li><font>")));
            } else {
                // show newlines as entered in text field
                this.$().children(".flippable").find(".front .sapInoWallWITitleText").html(sap.ino.wall.util.Formatter.nl2br(jQuery.sap.encodeHTML(this.getProperty("title"))));
            }

            this._updateAssistiveTechnologyDescription();

            // inform wall that this item has changed a persistence property
            if (this.getParent() && !bSuppressNotify) {
                this.getParent()._notifyItemChanged(this);
            }
        }
        return this;
    };

    /**
     * Setter for the multiLine property
     * 
     * @param {boolean}
     *            bMulti the new value
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemSticker.prototype.setMultiLine = function(bMulti, bSuppressNotify) {
        this.setProperty("multiLine", bMulti, true);
        return this;
    };

    sap.ino.wall.WallItemSticker.prototype.setFlipped = function(bFlipped, bVisualize) {
        var oTextEditor = sap.ui.getCore().byId(this.getId() + "-textEditor");
        if (oTextEditor && jQuery.type(oTextEditor._getColorPicker) === "function") {
            var oColorPicker = oTextEditor._getColorPicker();

            if (oColorPicker.isOpen()) {
                oColorPicker.close();
            }
        }

        sap.ino.wall.WallItemBase.prototype.setFlipped.apply(this, arguments);
    };

    sap.ino.wall.WallItemSticker.prototype.ontouchend = function(oEvent) {
        var oTextEditor = sap.ui.getCore().byId(this.getId() + "-textEditor");
        if (oTextEditor && jQuery.type(oTextEditor._getColorPicker) === "function") {
            var oColorPicker = oTextEditor._getColorPicker();

            if (oColorPicker.isOpen()) {
                oColorPicker.close();
            }
        }

        if (sap.ino.wall.WallItemBase.prototype.ontouchend) {
            sap.ino.wall.WallItemBase.prototype.ontouchend.apply(this, arguments);
        }
    };

    sap.ino.wall.WallItemSticker.prototype.onkeydown = function(oEvent) {
        // cannot or must not be handled
        // e.g. when we trigger a keydown ourselfs
        if (!oEvent.keyCode) {
            return;
        }

        var oTextEditor = sap.ui.getCore().byId(this.getId() + "-textEditor");
        if (oTextEditor && jQuery.type(oTextEditor._getColorPicker) === "function") {
            var oColorPicker = oTextEditor._getColorPicker();

            if (oColorPicker.isOpen()) {
                oColorPicker.close();
            }
        }

        /*
         * if (oEvent.keyCode === jQuery.sap.KeyCodes.ENTER && this.getFlipped() && !this.getMultiLine()) {
         * this.setFlipped(false, true);
         * 
         * oEvent.preventDefault(); oEvent.stopPropagation(); oEvent.stopImmediatePropagation();
         * 
         * return; }
         */

        if (jQuery(oEvent.target).hasClass("sapInoWallStickerColorPicker")) {
            if (oEvent.keyCode === jQuery.sap.KeyCodes.ENTER || oEvent.keyCode === jQuery.sap.KeyCodes.SPACE) {

                var sColor = oEvent.target.dataset.sapColor;
                this.setColor(sColor);

                oEvent.preventDefault();
                oEvent.stopPropagation();
                oEvent.stopImmediatePropagation();

                return;
            }
        }

        // default handling of base class
        sap.ino.wall.WallItemBase.prototype.onkeydown.apply(this, arguments);

        if (!oEvent.isDefaultPrevented() && !oEvent.isPropagationStopped() && sap.ino.wall.config.Config.getEnableRichtTextEditing()) {
            // if not nicEdit stop propagating, as nicEdit would react even if the event is not for it
            if (!jQuery(oEvent.target).hasClass("nicEdit-main")) {
                oEvent.preventDefault();
                oEvent.stopPropagation();
                oEvent.stopImmediatePropagation();

                // instead trigger a custom event for the wall
                $(oEvent.target).trigger("keydown", [oEvent]);
            }
        }
    };

    /**
     * Hook called when the item has been resized by user interaction
     * 
     * @param {boolean}
     *            bSytemCall true when called by system call and not by user interaction
     * @oaram {float} fDeltaX the amount in px the item has been resized
     * @oaram {float} fDeltaY the amount in px the item has been resized
     * @protected
     */
    sap.ino.wall.WallItemSticker.prototype._onResize = function(bSystemCall, fDeltaX, fDeltaY) {
        var sSize = this._adjustTShirtSize(), oEditor = this._getTextareaDescription(), iFixHeight, iLastPickerPosition, sLineHeight;

        // default for XS/S size
        sLineHeight = 28;
        
        switch (sSize) {
            case sap.ino.wall.TShirtSize.M :
                sLineHeight = 33;
                break;
            case sap.ino.wall.TShirtSize.L :
            case sap.ino.wall.TShirtSize.XL :
                sLineHeight = 53;
                break;
            default:
                break;
        }

        if (oEditor instanceof sap.ino.wall.TextEditor) {
            oEditor.setControlDetails(sSize);
        }

        // workaround for no flex support & Safari & IE10
        // firefox has also troubles with the heigh calculations of the scrollContainer, we use the fallback here too
        if (!jQuery.support.hasFlexBoxSupport || sap.ui.Device.browser.safari || sap.ui.Device.browser.firefox || sap.ui.Device.browser.internet_explorer && sap.ui.Device.browser.version >= 10) {
            iFixHeight = this.$().children(".flippable").find(".sapInoWallWIStickerPickerContainer").outerHeight() + this.$().find(".sapInoWallWIStickerMulti").outerHeight();
            this.$().children(".flippable").find(".back .sapInoWallWIStickerText").height(this.$().find(".back").height() - iFixHeight - 10);
            this.$().children(".flippable").find(".back .sapInoWallTextEditorContent").height(this.$().find(".back").height() - iFixHeight - this.$().children(".flippable").find(".sapInoWallTextEditorControls").children().outerHeight() - 30);
            // workaround for IE: adjust padding
            this.$().children(".flippable").find(".sapInoWallWIStickerTextTA").css("padding-bottom", "10px");
        } else {
            // calculate the relative offset of the last color picker palette
            iLastPickerPosition = this.$().children(".flippable").find(".sapInoWallWIStickerPickerContainer").children().last().position().top - this.$().children(".flippable").find(".sapInoWallWIStickerPickerContainer").position().top;
            // dynamically set the height of the color picker palette so that the flex properties work smoothly (x * 30px)
            this.$().children(".flippable").find(".sapInoWallWIStickerPickerContainer").css("min-height", ((Math.floor((iLastPickerPosition) / sLineHeight) + 1) * sLineHeight) + "px");
        }
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Input} the input
     */
    sap.ino.wall.WallItemSticker.prototype._getTextareaDescription = function() {
        var that = this, oControl = this.getAggregation("_textAreaDescription");

        if (!oControl) {
            // create control
            if (sap.ino.wall.config.Config.getEnableRichtTextEditing()) {
                oControl = new sap.ino.wall.TextEditor(this.getId() + "-textEditor", {
                    value : (this.getTitle() === this._oRB.getText("WALL_ITEMSTICKER_NEW_TEXT") ? "<b></b>" : sap.ino.wall.util.Formatter.escapeBindingCharacters(this.getTitle())),
                    change : function(oEvent) {
                        that.setTitle(oEvent.getParameter("value"));
                    }
                }).addStyleClass("noflip").addStyleClass("sapInoWallWIStickerTextTA");
            } else {
                oControl = new sap.m.TextArea({
                    value : (this.getTitle() === this._oRB.getText("WALL_ITEMSTICKER_NEW_TEXT") ? "" : sap.ino.wall.util.Formatter.escapeBindingCharacters(this.getTitle())),
                    // of title
                    change : function(oEvent) {
                        that.setTitle(oEvent.getParameter("value"));
                    }
                }).addStyleClass("noflip").addStyleClass("sapInoWallWIStickerTextTA");
            }

            // add a custom enter event
            oControl.addEventDelegate({
                onsapenter : function(oEvent) {
                    var oTextEditor = sap.ui.getCore().byId(this.getId() + "-textEditor");

                    if (!this.getMultiLine()) {
                        // TODO: remove this later
                        if (sap.ino.wall.config.Config.getEnableRichtTextEditing()) {
                            // for sap.ino.wall.TextEditor
                            oTextEditor.blur();
                            // prevent adding a new line
                            oEvent.preventDefault();
                        } else {
                            // for sap.m.TextArea
                            this.$().find("textarea").blur();
                        }
                        return false;
                    }
                }.bind(this)
            });

            // set hidden aggregation without rerendering
            this.setAggregation("_textAreaDescription", oControl, true);
        }

        return oControl;
    };

    sap.ino.wall.WallItemSticker.prototype._updateAssistiveTechnologyDescription = function() {
        var $Description = this.$().find("#" + this.getId() + "-wallitem-description");
        var sColor = this._oRB.getText("CRTL_WALL_ITEMSTICKER_COLOR_" + (this.getColor() ? this.getColor().toUpperCase() : "YELLOW"));
        var sText = sap.ino.wall.util.Helper.stripTags(this.getProperty("title"));

        if (sText && sText.trim() !== "") {
            $Description.html(this._oRB.getText("CRTL_WALL_ITEMSTICKER_EXP_READERTEXT", [sColor, sText]));
        } else {
            $Description.html(this._oRB.getText("CRTL_WALL_ITEMSTICKER_EXP_READERTEXT_EMPTY", [sColor]));
        }

    };

    /**
     * Creates a minimalic JSON representation of the item to be stored in the db
     * 
     * @override
     * @returns {object} the JSON object representation of the item
     * @public
     */
    sap.ino.wall.WallItemSticker.prototype.formatToJSON = function() {
        // call the base object's JSON method
        var oJSON = sap.ino.wall.WallItemBase.prototype.formatToJSON.call(this);
        // add properties of this control
        oJSON.color = this.getColor();
        // set the description field instead of the title field (is longer in the DB)
        oJSON.description = this.getTitle();
        delete oJSON.title;
        // return the final object
        return oJSON;
    };

})();
}; // end of sap/ino/wall/WallItemSticker.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.WallItemText') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.WallItemText");

(function() {
    "use strict";

    
    
    
    
    

    /**
     * Constructor for a new WallItemText.
     * 
     * Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and
     * associated objects as well as event handlers.
     * 
     * If the name of a setting is ambiguous (e.g. a property has the same name as an event), then the framework assumes
     * property, aggregation, association, event in that order. To override this automatic resolution, one of the
     * prefixes "aggregation:", "association:" or "event:" can be added to the name of the setting (such a prefixed name
     * must be enclosed in single or double quotes).
     * 
     * The supported settings are:
     * <ul>
     * <li>Properties
     * <ul>
     * <li>{@link #getDescription description} : string</li>
     * </ul>
     * </li>
     * <li>Aggregations
     * <ul>
     * </ul>
     * </li>
     * <li>Associations
     * <ul>
     * </ul>
     * </li>
     * <li>Events
     * <ul>
     * </ul>
     * </li>
     * </ul>
     * 
     * 
     * In addition, all settings applicable to the base type
     * {@link sap.ino.wall.WallItemBase#constructor sap.ino.wall.WallItemBase} can be used as well.
     * 
     * @param {string}
     *            [sId] id for the new control, generated automatically if no id is given
     * @param {object}
     *            [mSettings] initial settings for the new control
     * 
     * @class Add your documentation for the newWallItemText
     * @extends sap.ino.wall.WallItemBase
     * @version 1.16.4
     * 
     * @constructor
     * @public
     * @name sap.ino.wall.WallItemText
     * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
     */
    sap.ino.wall.WallItemBase.extend("sap.ino.wall.WallItemText", {
        metadata : {
            properties : {
                "description" : {
                    type : "string",
                    group : "Misc",
                    defaultValue : null
                }
            },
            aggregations : {
                "_scrollContainerDescription" : {
                    type : "sap.m.ScrollContainer",
                    multiple : false,
                    visibility : "hidden"
                },
                "_textAreaDescription" : {
                    type : "sap.ui.core.Control",
                    multiple : false,
                    visibility : "hidden"
                }
            }
        }
    });

    /**
     * Creates a new subclass of class sap.ino.wall.WallItemText with name <code>sClassName</code> and enriches it
     * with the information contained in <code>oClassInfo</code>.
     * 
     * <code>oClassInfo</code> might contain the same kind of informations as described in
     * {@link sap.ui.core.Element.extend Element.extend}.
     * 
     * @param {string}
     *            sClassName name of the class to be created
     * @param {object}
     *            [oClassInfo] object literal with informations about the class
     * @param {function}
     *            [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to
     *            sap.ui.core.ElementMetadata.
     * @return {function} the created class / constructor function
     * @public
     * @static
     * @name sap.ino.wall.WallItemText.extend
     * @function
     */

    /**
     * Getter for property <code>description</code>. A description text.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @return {string} the value of property <code>description</code>
     * @public
     * @name sap.ino.wall.WallItemText#getDescription
     * @function
     */

    /**
     * Setter for property <code>description</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @param {string}
     *            sDescription new value for property <code>description</code>
     * @return {sap.ino.wall.WallItemText} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.WallItemText#setDescription
     * @function
     */

    /**
     * Initializes the control
     * 
     * @private
     */
    sap.ino.wall.WallItemText.prototype.init = function() {
        sap.ino.wall.WallItemBase.prototype.init.call(this);

        this.setResizable(true);
    };

    /*******************************************************************************************************************
     * overloaded setters to supress rendering and update ui
     ******************************************************************************************************************/

    sap.ino.wall.WallItemText.prototype.setDescription = function(sDescription) {
        this.setProperty("description", sDescription, true);

        if (sap.ino.wall.config.Config.getEnableRichtTextEditing()) {
            this._getScrollContainerDescription().getContent()[0].setContent("<div class=\"sapMText\">" + sap.ino.wall.util.Helper.stripTags(sDescription, "<div><br><b><strong><u><i><em><ol><ul><li><font>") + "</div>");
        } else {
            this._getScrollContainerDescription().getContent()[0].setText(sDescription);
        }

        // inform wall that this item has changed a persistence property
        if (this.getParent()) {
            this.getParent()._notifyItemChanged(this);
        }
        return this;
    };

    /**
     * Hook called when the item has been resized by user interaction
     * 
     * @param {boolean}
     *            bSytemCall true when called by system call and not by user interaction
     * @oaram {float} fDeltaX the amount in px the item has been resized
     * @oaram {float} fDeltaY the amount in px the item has been resized
     * 
     * @protected
     */
    sap.ino.wall.WallItemText.prototype._onResize = function(bSystemCall, fDeltaX, fDeltaY) {
        var sSize = this._adjustTShirtSize();
        var oEditor = this._getTextareaDescription();

        if (oEditor instanceof sap.ino.wall.TextEditor) {
            oEditor.setControlDetails(sSize);
        }

        // workaround for no flex support & Safari & IE10
        // firefox has also troubles with the heigh calculations of the scrollContainer, we use the fallback here too
        if (!jQuery.support.hasFlexBoxSupport || sap.ui.Device.browser.firefox || sap.ui.Device.browser.safari || sap.ui.Device.browser.internet_explorer && sap.ui.Device.browser.version === 10) {
            // front
            if (!this.getH()) {
                // fix when height is not set yet, we need to set a specific height otherwise it will be as long as the
                // text inside
                this.$().find(".front .sapMScrollCont").height("108px");
            } else {
                this.$().find(".front .sapMScrollCont").height("100%");
            }
            var iFixHeight = this.$().find(".front .sapInoWallWITitle").outerHeight();
            this.$().find(".front .sapInoWallWITDescription").height(this.$().find(".front").height() - iFixHeight - 10);
            // back
            iFixHeight = this.$().find(".back .sapInoWallWITitleEdit").outerHeight();
            this.$().find(".back .sapInoWallWITDescription").height(this.$().find(".back").height() - iFixHeight - 20);
            this.$().find(".back .sapInoWallWITDescription .sapInoWallTextEditorContent").height(this.$().find(".back").height() - iFixHeight - this.$().children(".flippable").find(".sapInoWallTextEditorControls").outerHeight() - 20);
        }

        this._adjustTShirtSize();
    };

    /**
     * Lazy initialization of the internal control
     * 
     * @private
     * @returns {sap.m/Input} the input
     */
    sap.ino.wall.WallItemText.prototype._getScrollContainerDescription = function() {
        var oControl = this.getAggregation("_scrollContainerDescription"), oText;

        if (!oControl) {
            // prepare text
            if (sap.ino.wall.config.Config.getEnableRichtTextEditing()) {
                oText = new sap.ui.core.HTML(this.getId() + "-desc", {
                    content : "<div class=\"sapMText\">" + sap.ino.wall.util.Helper.stripTags(sap.ino.wall.util.Formatter.escapeBindingCharacters(this.getDescription()), "<div><b><strong><u><i><em><ol><ul><li><font>") + "</div>",
                    sanitizeContent : true // Sanitizing is done with stripTags, escapeBindingCharacters
                });
            } else {
                oText = new sap.m.Text(this.getId() + "-desc", {
                    text : sap.ino.wall.util.Formatter.escapeBindingCharacters(this.getDescription())
                });
            }
            // create control
            oControl = new sap.m.ScrollContainer(this.getId() + "-sc", {
                height : "100%",
                horizontal : false,
                vertical : true,
                content : oText
            }).addStyleClass("sapInoWallScrollable");

            // set hidden aggregation without rerendering
            this.setAggregation("_scrollContainerDescription", oControl, true);
        }

        return oControl;
    };

    /*
     * Lazy initialization of the internal control @private @returns {sap.m/Input} the input
     */
    sap.ino.wall.WallItemText.prototype._getTextareaDescription = function() {
        var that = this, oControl = this.getAggregation("_textAreaDescription");

        if (!oControl) {
            // create control
            // TODO: remove when text editor is live & stable
            if (sap.ino.wall.config.Config.getEnableRichtTextEditing()) {
                oControl = new sap.ino.wall.TextEditor(this.getId() + "-textEditor", {
                    value : sap.ino.wall.util.Formatter.escapeBindingCharacters(this.getDescription()),
                    change : function(oEvent) {
                        that.setDescription(oEvent.getParameter("value"));
                    }
                }).addStyleClass("noflip").addStyleClass("sapInoWallWITDescriptionTA");
            } else {
                oControl = new sap.m.TextArea({
                    value : sap.ino.wall.util.Formatter.escapeBindingCharacters(this.getDescription()),
                    change : function(oEvent) {
                        that.setDescription(oEvent.getParameter("newValue"));
                    }
                }).addStyleClass("sapInoWallWITDescriptionTA");
            }

            // set hidden aggregation without rerendering
            this.setAggregation("_textAreaDescription", oControl, true);
        }

        return oControl;
    };

    /**
     * creates a minimalic JSON representation of the item to be stored in the db
     * 
     * @param {string}
     *            sColor color identifier
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.WallItemText.prototype.formatToJSON = function() {
        // call the base object's JSON method
        var oJSON = sap.ino.wall.WallItemBase.prototype.formatToJSON.call(this);
        // add properties of this control
        oJSON.description = this.getDescription();
        // return the final object
        return oJSON;
    };

})();
}; // end of sap/ino/wall/WallItemText.js
if ( !jQuery.sap.isDeclared('sap.ino.wall.Wall') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.wall.Wall");

(function() {
    "use strict";

    
    
    

    
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    jQuery.sap.require('sap.ino.commons.models.object.Attachment'); // unlisted dependency retained


    jQuery.sap.require('sap.ino.commons.application.Configuration'); // unlisted dependency retained

    var Configuration = sap.ino.commons.application.Configuration;

    
    var WallPatches = sap.ino.wall.util.WallPatches;

    jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained

    jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained


    /**
     * Constructor for a new Wall.
     * 
     * Accepts an object literal <code>mSettings</code> that defines initial property values, aggregated and
     * associated objects as well as event handlers.
     * 
     * If the name of a setting is ambiguous (e.g. a property has the same name as an event), then the framework assumes
     * property, aggregation, association, event in that order. To override this automatic resolution, one of the
     * prefixes "aggregation:", "association:" or "event:" can be added to the name of the setting (such a prefixed name
     * must be enclosed in single or double quotes).
     * 
     * The supported settings are:
     * <ul>
     * <li>Properties
     * <ul>
     * <li>{@link #getEditable editable} : boolean</li>
     * <li>{@link #getBackgroundImage backgroundImage} : string</li>
     * <li>{@link #getBackgroundImageZoom backgroundImageZoom} : int (default: 30)</li>
     * <li>{@link #getBackgroundColor backgroundColor} : string</li>
     * <li>{@link #getMouseX mouseX} : float</li>
     * <li>{@link #getMouseY mouseY} : float</li>
     * <li>{@link #getTouchPosition touchPosition} : any</li>
     * <li>{@link #getZoom zoom} : float (default: 100)</li>
     * <li>{@link #getViewPoint viewPoint} : any</li>
     * <li>{@link #getTitle title} : string</li>
     * <li>{@link #getStorageId storageId} : int (default: -1)</li>
     * <li>{@link #getType type} : string (default: 'Wall')</li>
     * <li>{@link #getMode mode} : sap.ino.wall.WallMode (default: sap.ino.wall.WallMode.Write)</li>
     * <li>{@link #getOwner owner} : string</li>
     * </ul>
     * </li>
     * <li>Aggregations
     * <ul>
     * <li>{@link #getItems items} : sap.ui.core.Control[]</li>
     * </ul>
     * </li>
     * <li>Associations
     * <ul>
     * </ul>
     * </li>
     * <li>Events
     * <ul>
     * <li>{@link sap.ino.wall.Wall#event:itemAdd itemAdd} : fnListenerFunction or [fnListenerFunction,
     * oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
     * <li>{@link sap.ino.wall.Wall#event:itemDelete itemDelete} : fnListenerFunction or [fnListenerFunction,
     * oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
     * <li>{@link sap.ino.wall.Wall#event:zoomChange zoomChange} : fnListenerFunction or [fnListenerFunction,
     * oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
     * <li>{@link sap.ino.wall.Wall#event:itemChange itemChange} : fnListenerFunction or [fnListenerFunction,
     * oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
     * <li>{@link sap.ino.wall.Wall#event:change change} : fnListenerFunction or [fnListenerFunction,
     * oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
     * <li>{@link sap.ino.wall.Wall#event:hover hover} : fnListenerFunction or [fnListenerFunction, oListenerObject]
     * or [oData, fnListenerFunction, oListenerObject]</li>
     * </ul>
     * </li>
     * </ul>
     * 
     * 
     * @param {string}
     *            [sId] id for the new control, generated automatically if no id is given
     * @param {object}
     *            [mSettings] initial settings for the new control
     * 
     * @class The wall.
     * @extends sap.ui.core.Control
     * @version 1.16.4
     * 
     * @constructor
     * @public
     * @name sap.ino.wall.Wall
     * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
     */
    sap.ui.core.Control.extend("sap.ino.wall.Wall", { metadata : {

        publicMethods : [
            // methods
            "toggleEnableItems"
        ],
        properties : {
            "editable" : {type : "boolean", group : "Behavior", defaultValue : null},
            "backgroundImage" : {type : "string", group : "Appearance", defaultValue : null},
            "backgroundImageZoom" : {type : "int", group : "Appearance", defaultValue : 100},
            "backgroundImageTiled" : {type : "boolean", group : "Appearance", defaultValue : false},
            "backgroundColor" : {type : "string", group : "Appearance", defaultValue : null},
            "mouseX" : {type : "float", group : "Appearance", defaultValue : null},
            "mouseY" : {type : "float", group : "Appearance", defaultValue : null},
            "touchPosition" : {type : "any", group : "Misc", defaultValue : null},
            "zoom" : {type : "float", group : "Behavior", defaultValue : 100},
            "viewPoint" : {type : "any", group : "Misc", defaultValue : null},
            "title" : {type : "string", group : "Appearance", defaultValue : null},
            "storageId" : {type : "int", group : "Identification", defaultValue : -1},
            "type" : {type : "string", group : "Misc", defaultValue : 'Wall'},
            "mode" : {type : "sap.ino.wall.WallMode", group : "Misc", defaultValue : sap.ino.wall.WallMode.Write},
            "owner" : {type : "string", group : "Identification", defaultValue : null},
            "headerHeight" : {type : "int", group : "Appearance", defaultValue : 63},
            "footerHeight" : {type : "int", group : "Appearance", defaultValue : 31}
        },
        aggregations : {
            "items" : {type : "sap.ui.core.Control", multiple : true, singularName : "item"}
        },
        events : {
            "itemAdd" : {}, 
            "itemDelete" : {}, 
            "zoomChange" : {}, 
            "itemChange" : {}, 
            "change" : {}, 
            "hover" : {},
            "sync" : {},
            "syncModeChange" : {},
        }
    }});


    /**
     * Creates a new subclass of class sap.ino.wall.Wall with name <code>sClassName</code> and enriches it with the
     * information contained in <code>oClassInfo</code>.
     * 
     * <code>oClassInfo</code> might contain the same kind of informations as described in
     * {@link sap.ui.core.Element.extend Element.extend}.
     * 
     * @param {string}
     *            sClassName name of the class to be created
     * @param {object}
     *            [oClassInfo] object literal with informations about the class
     * @param {function}
     *            [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to
     *            sap.ui.core.ElementMetadata.
     * @return {function} the created class / constructor function
     * @public
     * @static
     * @name sap.ino.wall.Wall.extend
     * @function
     */

    sap.ino.wall.Wall.M_EVENTS = {'itemAdd':'itemAdd','itemDelete':'itemDelete','zoomChange':'zoomChange','itemChange':'itemChange','change':'change','hover':'hover'};


    /**
     * Getter for property <code>editable</code>. If set to true, new items can be added to the wall and the existing
     * items can be rearranged.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @return {boolean} the value of property <code>editable</code>
     * @public
     * @name sap.ino.wall.Wall#getEditable
     * @function
     */

    /**
     * Setter for property <code>editable</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @param {boolean}
     *            bEditable new value for property <code>editable</code>
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Wall#setEditable
     * @function
     */


    /**
     * Getter for property <code>backgroundImage</code>. A URI to the background image.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @return {string} the value of property <code>backgroundImage</code>
     * @public
     * @name sap.ino.wall.Wall#getBackgroundImage
     * @function
     */

    /**
     * Setter for property <code>backgroundImage</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @param {string}
     *            sBackgroundImage new value for property <code>backgroundImage</code>
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Wall#setBackgroundImage
     * @function
     */


    /**
     * Getter for property <code>backgroundImageZoom</code>. The zoom value for custom background images.
     * 
     * Default value is <code>30</code>
     * 
     * @return {int} the value of property <code>backgroundImageZoom</code>
     * @public
     * @name sap.ino.wall.Wall#getBackgroundImageZoom
     * @function
     */

    /**
     * Setter for property <code>backgroundImageZoom</code>.
     * 
     * Default value is <code>30</code>
     * 
     * @param {int}
     *            iBackgroundImageZoom new value for property <code>backgroundImageZoom</code>
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Wall#setBackgroundImageZoom
     * @function
     */


    /**
     * Getter for property <code>backgroundColor</code>. A background color in hex format (e.g. #FF0000).
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @return {string} the value of property <code>backgroundColor</code>
     * @public
     * @name sap.ino.wall.Wall#getBackgroundColor
     * @function
     */

    /**
     * Setter for property <code>backgroundColor</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @param {string}
     *            sBackgroundColor new value for property <code>backgroundColor</code>
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Wall#setBackgroundColor
     * @function
     */


    /**
     * Getter for property <code>mouseX</code>. The horizontal mouse position
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @return {float} the value of property <code>mouseX</code>
     * @public
     * @name sap.ino.wall.Wall#getMouseX
     * @function
     */

    /**
     * Setter for property <code>mouseX</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @param {float}
     *            fMouseX new value for property <code>mouseX</code>
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Wall#setMouseX
     * @function
     */


    /**
     * Getter for property <code>mouseY</code>. The vertical mouse position
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @return {float} the value of property <code>mouseY</code>
     * @public
     * @name sap.ino.wall.Wall#getMouseY
     * @function
     */

    /**
     * Setter for property <code>mouseY</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @param {float}
     *            fMouseY new value for property <code>mouseY</code>
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Wall#setMouseY
     * @function
     */


    /**
     * Getter for property <code>touchPosition</code>. The current mouse/finger position.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @return {any} the value of property <code>touchPosition</code>
     * @public
     * @name sap.ino.wall.Wall#getTouchPosition
     * @function
     */

    /**
     * Setter for property <code>touchPosition</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @param {any}
     *            oTouchPosition new value for property <code>touchPosition</code>
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Wall#setTouchPosition
     * @function
     */


    /**
     * Getter for property <code>zoom</code>. The zoom level for the wall.
     * 
     * Default value is <code>100</code>
     * 
     * @return {float} the value of property <code>zoom</code>
     * @public
     * @name sap.ino.wall.Wall#getZoom
     * @function
     */

    /**
     * Setter for property <code>zoom</code>.
     * 
     * Default value is <code>100</code>
     * 
     * @param {float}
     *            fZoom new value for property <code>zoom</code>
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Wall#setZoom
     * @function
     */


    /**
     * Getter for property <code>viewPoint</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @return {any} the value of property <code>viewPoint</code>
     * @public
     * @name sap.ino.wall.Wall#getViewPoint
     * @function
     */

    /**
     * Setter for property <code>viewPoint</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @param {any}
     *            oViewPoint new value for property <code>viewPoint</code>
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Wall#setViewPoint
     * @function
     */


    /**
     * Getter for property <code>title</code>. The wall title.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @return {string} the value of property <code>title</code>
     * @public
     * @name sap.ino.wall.Wall#getTitle
     * @function
     */

    /**
     * Setter for property <code>title</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @param {string}
     *            sTitle new value for property <code>title</code>
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Wall#setTitle
     * @function
     */


    /**
     * Getter for property <code>storageId</code>. Temp: stores the db id of this wall
     * 
     * Default value is <code>-1</code>
     * 
     * @return {int} the value of property <code>storageId</code>
     * @public
     * @name sap.ino.wall.Wall#getStorageId
     * @function
     */

    /**
     * Setter for property <code>storageId</code>.
     * 
     * Default value is <code>-1</code>
     * 
     * @param {int}
     *            iStorageId new value for property <code>storageId</code>
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Wall#setStorageId
     * @function
     */


    /**
     * Getter for property <code>type</code>. Sets the typ of a wall (Wall or Template). This is a read-only property
     * that can only be modified in the backend.
     * 
     * Default value is <code>Wall</code>
     * 
     * @return {string} the value of property <code>type</code>
     * @public
     * @name sap.ino.wall.Wall#getType
     * @function
     */

    /**
     * Setter for property <code>type</code>.
     * 
     * Default value is <code>Wall</code>
     * 
     * @param {string}
     *            sType new value for property <code>type</code>
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Wall#setType
     * @function
     */


    /**
     * Getter for property <code>mode</code>. Defines the interaction mode for the wall.
     * 
     * Default value is <code>Write</code>
     * 
     * @return {sap.ino.wall.WallMode} the value of property <code>mode</code>
     * @public
     * @name sap.ino.wall.Wall#getMode
     * @function
     */

    /**
     * Setter for property <code>mode</code>.
     * 
     * Default value is <code>Write</code>
     * 
     * @param {sap.ino.wall.WallMode}
     *            oMode new value for property <code>mode</code>
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Wall#setMode
     * @function
     */


    /**
     * Getter for property <code>owner</code>. Owner
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @return {string} the value of property <code>owner</code>
     * @public
     * @name sap.ino.wall.Wall#getOwner
     * @function
     */

    /**
     * Setter for property <code>owner</code>.
     * 
     * Default value is empty/<code>undefined</code>
     * 
     * @param {string}
     *            sOwner new value for property <code>owner</code>
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Wall#setOwner
     * @function
     */


    /**
     * Getter for aggregation <code>items</code>.<br/> The wall items.
     * 
     * @return {sap.ui.core.Control[]}
     * @public
     * @name sap.ino.wall.Wall#getItems
     * @function
     */


    /**
     * Inserts a item into the aggregation named <code>items</code>.
     * 
     * @param {sap.ui.core.Control}
     *            oItem the item to insert; if empty, nothing is inserted
     * @param {int}
     *            iIndex the <code>0</code>-based index the item should be inserted at; for a negative value of
     *            <code>iIndex</code>, the item is inserted at position 0; for a value greater than the current size
     *            of the aggregation, the item is inserted at the last position
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Wall#insertItem
     * @function
     */

    /**
     * Adds some item <code>oItem</code> to the aggregation named <code>items</code>.
     * 
     * @param {sap.ui.core.Control}
     *            oItem the item to add; if empty, nothing is inserted
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Wall#addItem
     * @function
     */

    /**
     * Removes an item from the aggregation named <code>items</code>.
     * 
     * @param {int |
     *            string | sap.ui.core.Control} vItem the item to remove or its index or id
     * @return {sap.ui.core.Control} the removed item or null
     * @public
     * @name sap.ino.wall.Wall#removeItem
     * @function
     */

    /**
     * Removes all the controls in the aggregation named <code>items</code>.<br/> Additionally unregisters them from
     * the hosting UIArea.
     * 
     * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
     * @public
     * @name sap.ino.wall.Wall#removeAllItems
     * @function
     */

    /**
     * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>items</code> and
     * returns its index if found or -1 otherwise.
     * 
     * @param {sap.ui.core.Control}
     *            oItem the item whose index is looked for.
     * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
     * @public
     * @name sap.ino.wall.Wall#indexOfItem
     * @function
     */
        

    /**
     * Destroys all the items in the aggregation named <code>items</code>.
     * 
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Wall#destroyItems
     * @function
     */


    /**
     * This event is called when a wall item was added to the wall by user interaction
     * 
     * @name sap.ino.wall.Wall#itemAdd
     * @event
     * @param {sap.ui.base.Event}
     *            oControlEvent
     * @param {sap.ui.base.EventProvider}
     *            oControlEvent.getSource
     * @param {object}
     *            oControlEvent.getParameters
     * @param {WallItemBase}
     *            oControlEvent.getParameters.item The wall item.
     * @public
     */
     
    /**
     * Attach event handler <code>fnFunction</code> to the 'itemAdd' event of this <code>sap.ino.wall.Wall</code>.<br/>.
     * When called, the context of the event handler (its <code>this</code>) will be bound to
     * <code>oListener<code> if specified
     * otherwise to this <code>sap.ino.wall.Wall</code>.<br/> itself. 
     *  
     * This event is called when a wall item was added to the wall by user interaction
     *
     * @param {object}
     *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
     * @param {function}
     *            fnFunction The function to call, when the event occurs.  
     * @param {object}
     *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ino.wall.Wall</code>.<br/> itself.
     *
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Wall#attachItemAdd
     * @function
     */

    /**
     * Detach event handler <code>fnFunction</code> from the 'itemAdd' event of this <code>sap.ino.wall.Wall</code>.<br/>
     * 
     * The passed function and listener object must match the ones used for event registration.
     * 
     * @param {function}
     *            fnFunction The function to call, when the event occurs.
     * @param {object}
     *            oListener Context object on which the given function had to be called.
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Wall#detachItemAdd
     * @function
     */

    /**
     * Fire event itemAdd to attached listeners.
     * 
     * Expects following event parameters:
     * <ul>
     * <li>'item' of type <code>WallItemBase</code> The wall item.</li>
     * </ul>
     * 
     * @param {Map}
     *            [mArguments] the arguments to pass along with the event.
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @protected
     * @name sap.ino.wall.Wall#fireItemAdd
     * @function
     */


    /**
     * This event is called when a wall item has been deleted.
     * 
     * @name sap.ino.wall.Wall#itemDelete
     * @event
     * @param {sap.ui.base.Event}
     *            oControlEvent
     * @param {sap.ui.base.EventProvider}
     *            oControlEvent.getSource
     * @param {object}
     *            oControlEvent.getParameters
     * @param {WallItemBase}
     *            oControlEvent.getParameters.item The wall item.
     * @public
     */
     
    /**
     * Attach event handler <code>fnFunction</code> to the 'itemDelete' event of this
     * <code>sap.ino.wall.Wall</code>.<br/>. When called, the context of the event handler (its <code>this</code>)
     * will be bound to <code>oListener<code> if specified
     * otherwise to this <code>sap.ino.wall.Wall</code>.<br/> itself. 
     *  
     * This event is called when a wall item has been deleted.
     *
     * @param {object}
     *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
     * @param {function}
     *            fnFunction The function to call, when the event occurs.  
     * @param {object}
     *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ino.wall.Wall</code>.<br/> itself.
     *
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Wall#attachItemDelete
     * @function
     */

    /**
     * Detach event handler <code>fnFunction</code> from the 'itemDelete' event of this
     * <code>sap.ino.wall.Wall</code>.<br/>
     * 
     * The passed function and listener object must match the ones used for event registration.
     * 
     * @param {function}
     *            fnFunction The function to call, when the event occurs.
     * @param {object}
     *            oListener Context object on which the given function had to be called.
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Wall#detachItemDelete
     * @function
     */

    /**
     * Fire event itemDelete to attached listeners.
     * 
     * Expects following event parameters:
     * <ul>
     * <li>'item' of type <code>WallItemBase</code> The wall item.</li>
     * </ul>
     * 
     * @param {Map}
     *            [mArguments] the arguments to pass along with the event.
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @protected
     * @name sap.ino.wall.Wall#fireItemDelete
     * @function
     */


    /**
     * 
     * @name sap.ino.wall.Wall#zoomChange
     * @event
     * @param {sap.ui.base.Event}
     *            oControlEvent
     * @param {sap.ui.base.EventProvider}
     *            oControlEvent.getSource
     * @param {object}
     *            oControlEvent.getParameters
     * @param {float}
     *            oControlEvent.getParameters.zoom The new zoom value.
     * @public
     */
     
    /**
     * Attach event handler <code>fnFunction</code> to the 'zoomChange' event of this
     * <code>sap.ino.wall.Wall</code>.<br/>. When called, the context of the event handler (its <code>this</code>)
     * will be bound to <code>oListener<code> if specified
     * otherwise to this <code>sap.ino.wall.Wall</code>.<br/> itself. 
     *  
     *
     * @param {object}
     *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
     * @param {function}
     *            fnFunction The function to call, when the event occurs.  
     * @param {object}
     *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ino.wall.Wall</code>.<br/> itself.
     *
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Wall#attachZoomChange
     * @function
     */

    /**
     * Detach event handler <code>fnFunction</code> from the 'zoomChange' event of this
     * <code>sap.ino.wall.Wall</code>.<br/>
     * 
     * The passed function and listener object must match the ones used for event registration.
     * 
     * @param {function}
     *            fnFunction The function to call, when the event occurs.
     * @param {object}
     *            oListener Context object on which the given function had to be called.
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Wall#detachZoomChange
     * @function
     */

    /**
     * Fire event zoomChange to attached listeners.
     * 
     * Expects following event parameters:
     * <ul>
     * <li>'zoom' of type <code>float</code> The new zoom value.</li>
     * </ul>
     * 
     * @param {Map}
     *            [mArguments] the arguments to pass along with the event.
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @protected
     * @name sap.ino.wall.Wall#fireZoomChange
     * @function
     */


    /**
     * This event is triggered [_wallSaveDelay]ms after the last change happened to an item or [_wallSaveInterval]ms
     * after the first change. It passed an array of all changed items to be saved in the database.
     * 
     * @name sap.ino.wall.Wall#itemChange
     * @event
     * @param {sap.ui.base.Event}
     *            oControlEvent
     * @param {sap.ui.base.EventProvider}
     *            oControlEvent.getSource
     * @param {object}
     *            oControlEvent.getParameters
     * @param {WallItemBase}
     *            oControlEvent.getParameters.items The items that have been changed since the last save run.
     * @public
     */
     
    /**
     * Attach event handler <code>fnFunction</code> to the 'itemChange' event of this
     * <code>sap.ino.wall.Wall</code>.<br/>. When called, the context of the event handler (its <code>this</code>)
     * will be bound to <code>oListener<code> if specified
     * otherwise to this <code>sap.ino.wall.Wall</code>.<br/> itself. 
     *  
     * This event is triggered [_wallSaveDelay]ms after the last change happened to an item or [_wallSaveInterval]ms after the first change. It passed an array of all changed items to be saved in the database.
     *
     * @param {object}
     *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
     * @param {function}
     *            fnFunction The function to call, when the event occurs.  
     * @param {object}
     *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ino.wall.Wall</code>.<br/> itself.
     *
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Wall#attachItemChange
     * @function
     */

    /**
     * Detach event handler <code>fnFunction</code> from the 'itemChange' event of this
     * <code>sap.ino.wall.Wall</code>.<br/>
     * 
     * The passed function and listener object must match the ones used for event registration.
     * 
     * @param {function}
     *            fnFunction The function to call, when the event occurs.
     * @param {object}
     *            oListener Context object on which the given function had to be called.
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Wall#detachItemChange
     * @function
     */

    /**
     * Fire event itemChange to attached listeners.
     * 
     * Expects following event parameters:
     * <ul>
     * <li>'items' of type <code>WallItemBase</code> The items that have been changed since the last save run.</li>
     * </ul>
     * 
     * @param {Map}
     *            [mArguments] the arguments to pass along with the event.
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @protected
     * @name sap.ino.wall.Wall#fireItemChange
     * @function
     */


    /**
     * This event is triggered [_wallSaveDelay]ms after the last change happened to a wall property or
     * [_wallSaveInterval]ms after the first change. It passes an array of all changed parameters to be saved in the
     * database.
     * 
     * @name sap.ino.wall.Wall#change
     * @event
     * @param {sap.ui.base.Event}
     *            oControlEvent
     * @param {sap.ui.base.EventProvider}
     *            oControlEvent.getSource
     * @param {object}
     *            oControlEvent.getParameters
     * @param {any}
     *            oControlEvent.getParameters.properties Array of properties names that have been changed.
     * @public
     */
     
    /**
     * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.ino.wall.Wall</code>.<br/>.
     * When called, the context of the event handler (its <code>this</code>) will be bound to
     * <code>oListener<code> if specified
     * otherwise to this <code>sap.ino.wall.Wall</code>.<br/> itself. 
     *  
     * This event is triggered [_wallSaveDelay]ms after the last change happened to a wall property or [_wallSaveInterval]ms after the first change. It passes an array of all changed parameters to be saved in the database.
     *
     * @param {object}
     *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
     * @param {function}
     *            fnFunction The function to call, when the event occurs.  
     * @param {object}
     *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ino.wall.Wall</code>.<br/> itself.
     *
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Wall#attachChange
     * @function
     */

    /**
     * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.ino.wall.Wall</code>.<br/>
     * 
     * The passed function and listener object must match the ones used for event registration.
     * 
     * @param {function}
     *            fnFunction The function to call, when the event occurs.
     * @param {object}
     *            oListener Context object on which the given function had to be called.
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Wall#detachChange
     * @function
     */

    /**
     * Fire event change to attached listeners.
     * 
     * Expects following event parameters:
     * <ul>
     * <li>'properties' of type <code>any</code> Array of properties names that have been changed.</li>
     * </ul>
     * 
     * @param {Map}
     *            [mArguments] the arguments to pass along with the event.
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @protected
     * @name sap.ino.wall.Wall#fireChange
     * @function
     */


    /**
     * This event is triggered when a part of the wall UI (trash, lock, template) is entered or left to display
     * according tooltips or status messages in the app.
     * 
     * @name sap.ino.wall.Wall#hover
     * @event
     * @param {sap.ui.base.Event}
     *            oControlEvent
     * @param {sap.ui.base.EventProvider}
     *            oControlEvent.getSource
     * @param {object}
     *            oControlEvent.getParameters
     * @param {string}
     *            oControlEvent.getParameters.element The UI element that has been interacted with (trash, lock,
     *            template).
     * @param {string}
     *            oControlEvent.getParameters.interaction The interaction that has been done (enter, leave).
     * @param {string}
     *            oControlEvent.getParameters.tooltip The tooltip text that corresponds to the interaction.
     * @public
     */
     
    /**
     * Attach event handler <code>fnFunction</code> to the 'hover' event of this <code>sap.ino.wall.Wall</code>.<br/>.
     * When called, the context of the event handler (its <code>this</code>) will be bound to
     * <code>oListener<code> if specified
     * otherwise to this <code>sap.ino.wall.Wall</code>.<br/> itself. 
     *  
     * This event is triggered when a part of the wall UI (trash, lock, template) is entered or left to display according tooltips or status messages in the app.
     *
     * @param {object}
     *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
     * @param {function}
     *            fnFunction The function to call, when the event occurs.  
     * @param {object}
     *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ino.wall.Wall</code>.<br/> itself.
     *
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Wall#attachHover
     * @function
     */

    /**
     * Detach event handler <code>fnFunction</code> from the 'hover' event of this <code>sap.ino.wall.Wall</code>.<br/>
     * 
     * The passed function and listener object must match the ones used for event registration.
     * 
     * @param {function}
     *            fnFunction The function to call, when the event occurs.
     * @param {object}
     *            oListener Context object on which the given function had to be called.
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @public
     * @name sap.ino.wall.Wall#detachHover
     * @function
     */

    /**
     * Fire event hover to attached listeners.
     * 
     * Expects following event parameters:
     * <ul>
     * <li>'element' of type <code>string</code> The UI element that has been interacted with (trash, lock,
     * template).</li>
     * <li>'interaction' of type <code>string</code> The interaction that has been done (enter, leave).</li>
     * <li>'tooltip' of type <code>string</code> The tooltip text that corresponds to the interaction.</li>
     * </ul>
     * 
     * @param {Map}
     *            [mArguments] the arguments to pass along with the event.
     * @return {sap.ino.wall.Wall} <code>this</code> to allow method chaining
     * @protected
     * @name sap.ino.wall.Wall#fireHover
     * @function
     */


    /**
     * Enables/Disables all wall items
     * 
     * @name sap.ino.wall.Wall#toggleEnableItems
     * @function
     * @param {boolean}
     *            bBEnable If set to true, all items will be enabled, otherwise disabled
     * @type void
     * @public
     * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
     */

    /**
     * Factory to create a wall item (from JSON format)
     * 
     * @param {object}
     *            oItem the wall in JSON format
     * @public
     * @static
     * @return {WallItemBase} the freshly created wall item
     */
    sap.ino.wall.Wall.createWallItemFromJSON = function (oItem) {
        oItem = jQuery.extend(true, {}, oItem);
        var oNewItem = null,
            sClassName = oItem.className,
            oContent = oItem.content || {},
            oJSONChilds = oItem.childs || [],
            i = 0;
    
        // remove items to get a clean wall JSON and avoid UI5 assertions
        delete oItem.content;
        delete oItem.childs;
        delete oItem.parentId;
        delete oItem.className;
        delete oItem.actionCode;
    
        // escape title to avoid binding errors
        if (oItem.title) {
            oItem.title = sap.ino.wall.util.Formatter.escapeBindingCharacters(sap.ino.wall.util.Formatter.escapeNetworkPaths(oItem.title));
        }
        if (oItem.description) {
            oItem.description = sap.ino.wall.util.Formatter.escapeBindingCharacters(sap.ino.wall.util.Formatter.escapeNetworkPaths(oItem.description));
        }
        
        // position is stored as position object in JSON, we need to rewrite the coordinates here to match the
        // properties
        oItem.x = oItem.position.x;
        oItem.y = oItem.position.y;
        delete oItem.position;
    
        // initialize item based on type
        switch (sClassName) {
        case "sap.ino.wall.WallItemAttachment":
            oNewItem = new sap.ino.wall.WallItemAttachment(oItem);
            if (oContent.URL) {
                oNewItem.setURL(oContent.URL);
            }
            if (oContent.type) {
                oNewItem.setType(oContent.type);
            }
            if (oContent.fileName) {
                oNewItem.setFileName(oContent.fileName);
            }
            if (oContent.assignmentId) {
                oNewItem.setAssignmentId(oContent.assignmentId);
            }
            break;
        case "sap.ino.wall.WallItemImage":
            oNewItem = new sap.ino.wall.WallItemImage(oItem);
            if (oContent.preview) {
                oNewItem.setPreview(oContent.preview);
            }
            if (oContent.image) {
                oNewItem.setImage(oContent.image);
            }
            if (oContent.assignmentId) {
                oNewItem.setAssignmentId(oContent.assignmentId);
            }
            if (oContent.showAsIcon) {
                oNewItem.setShowAsIcon(oContent.showAsIcon);
            }
            break;
        case "sap.ino.wall.WallItemLink":
            oNewItem = new sap.ino.wall.WallItemLink(oItem);
            break;
        case "sap.ino.wall.WallItemVideo":
            oNewItem = new sap.ino.wall.WallItemVideo(oItem);
            if (oContent.preview) {
                oNewItem.setPreview(oContent.preview);
            }
            if (oContent.video) {
                oNewItem.setVideo(oContent.video);
            }
            break;
        case "sap.ino.wall.WallItemPerson":
            oNewItem = new sap.ino.wall.WallItemPerson(oItem);
            if (oContent.phone) {
                oNewItem.setPhone(oContent.phone);
            }
            if (oContent.email) {
                oNewItem.setEmail(oContent.email);
            }
            if (oContent.image) {
                oNewItem.setImage(oContent.image);
            }
            if (oContent.requestImage) {
                oNewItem.setRequestImage(oContent.requestImage);
            }
            if (oContent.assignmentId) {
                oNewItem.setAssignmentId(oContent.assignmentId);
            }
            break;
        case "sap.ino.wall.WallItemNote":
            oNewItem = new sap.ino.wall.WallItemNote(oItem);
            break;
        case "sap.ino.wall.WallItemSticker":
            // use the description field as title (is longer in db)
            if (oItem.description) {
                oItem.title = oItem.description;
            }
            delete oItem.description;
            oNewItem = new sap.ino.wall.WallItemSticker(oItem);
            break;
        case "sap.ino.wall.WallItemText":
            oNewItem = new sap.ino.wall.WallItemText(oItem);
            break;
        case "sap.ino.wall.WallItemHeadline":
            oNewItem = new sap.ino.wall.WallItemHeadline(oItem);
            break;
        case "sap.ino.wall.WallItemLine":
            oNewItem = new sap.ino.wall.WallItemLine(oItem);
            break;
        case "sap.ino.wall.WallItemDocument":
            oNewItem = new sap.ino.wall.WallItemDocument(oItem);
            break;
        case "sap.ino.wall.WallItemSprite":
            oNewItem = new sap.ino.wall.WallItemSprite(oItem);
            break;
        case "sap.ino.wall.WallItemGroup":
            oNewItem = new sap.ino.wall.WallItemGroup(oItem);
            break;
        case "sap.ino.wall.WallItemArrow":
            oNewItem = new sap.ino.wall.WallItemArrow(oItem);
            break;
        default:
            break;
        }        
    
        if (oNewItem !== null) {
            // add children to childs aggregation
            for (; i < oJSONChilds.length; i++) {
                oItem = sap.ino.wall.Wall.createWallItemFromJSON(oJSONChilds[i]);
                oNewItem.addChild(oItem);
            }
            return oNewItem;
        }
    };
    
    /**
     * Factory to create a wall with items (from JSON format)
     * 
     * @param {JSON}
     *            oJSON the wall in JSON format
     * @public
     * @static
     * @return {sap.ino.wall.Wall} the freshly created wall
     */
    sap.ino.wall.Wall.createWallFromJSON = function (oJSON) {
        var oJSONItems = oJSON.items,
            oWall,
            oItem,
            i = 0;

        // remove items to get a clean wall JSON
        delete oJSON.items;
        // escape title to avoid binding errors
        oJSON.title = sap.ino.wall.util.Formatter.escapeBindingCharacters(oJSON.title);
        // uppercase first letter of type for frontend (Template/Wall)
        oJSON.type = sap.ino.wall.util.Formatter.capitalizeFirstLetter(oJSON.type);
        // remove fields that are not relevant for the control to avoid UI5 assertions
        delete oJSON.lastUpdate;
        delete oJSON.ownerLastName;
        delete oJSON.timestamp;
        delete oJSON.hits;
        delete oJSON.ownerEMail;
        delete oJSON.numberOfItems;
        delete oJSON.favorite;
        delete oJSON.ownerFirstName;
        delete oJSON.strongestAuth;
        delete oJSON.auth;
        delete oJSON.actionCode;
        
        sap.ino.wall.util.Formatter.mapNullToInitialValues(oJSON);
        
        // create wall without items by passing the JSON data to the constructor
        oWall = new sap.ino.wall.Wall(oJSON);
        // set mode based on users permissions
        if (oJSON.strongestAuth === "read" || oJSON.strongestAuth === "none") {
            oWall.setMode("Readonly");
        }
        if (!oJSONItems) {
            return oWall;
        }
        // add items based on type specified in JSON format
        for (; i < oJSONItems.length; i++) {
            oItem = sap.ino.wall.Wall.createWallItemFromJSON(oJSONItems[i]);
            oWall._nextDepth = Math.max(oWall._nextDepth, oItem.getDepth());
            oWall.addItem(oItem);
            
            if (oItem instanceof sap.ino.wall.WallItemPerson) {
                if (oItem.getRequestImage()) {
                    oItem._requestIdentity(oItem.getEmail() || oItem.getTitle());
                }
            }
        }

        return oWall;
    };
    
    /* =========================================================== */
    /* begin: control lifecycle methods */
    /* =========================================================== */
    
    /**
     * Initializes the control.
     * 
     * @private
     */
    sap.ino.wall.Wall.prototype.init = function () {
        // init members
        this.setTouchPosition(new sap.ino.wall.Pos());
        this.setViewPoint(new sap.ino.wall.Pos({
            x: 5000,
            y: 5000
        }));

        // init helper variables
        this._oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ino.wall");
        this._followHandlers = [];
        this._bIsInDOM = undefined;

        // helper variables for save timing
        this._iWallSaveDelay = sap.ino.wall.config.Config.getWallSaveDelay();
        this._iWallSaveDelayTimer = 0;
        this._iWallItemsSaveDelayTimer = 0;
        this._iWallSyncDelay = 0;
        this._iWallSyncDelayTimer = 0;
        this._iWallSyncMode = false;
        this._oItemsChanged = {};
        this._oPropertiesChanged = {};

        // helper variables for events
        this._touchStartMousePositionX = null;
        this._touchStartMousePositionY = null;
        this._bMoving = false;
        this._bTextSelectionCleared = false;

        this._nextDepth = sap.ino.wall.WallConfig._MIN_DEPTH;

        // do something for initialization
        sap.ino.wall.util.Logger.info('Wall "' + this.getId() + '" is initializing');
    };
        
    sap.ino.wall.Wall.prototype.setWallSaveDelay = function(iWallSaveDelay) {
        this._iWallSaveDelay = iWallSaveDelay;
    };
    
    sap.ino.wall.Wall.prototype.setWallSyncDelay = function(iWallSyncDelay) {
        var that = this;
        this._iWallSyncDelay = iWallSyncDelay;
        clearInterval(this._iWallSyncDelayTimer);
        this._iWallSyncDelayTimer = 0;
        if (this._iWallSyncDelay > 0) {
            this._iWallSyncDelayTimer = setInterval(function () {
                that.fireSync();
            }, this._iWallSyncDelay);   
        }
    };
    
    sap.ino.wall.Wall.prototype.setWallSyncMode = function(bWallSyncMode) {
        this._iWallSyncMode = bWallSyncMode;
        this.fireSyncModeChange({ value : this._iWallSyncMode });
    };
    
    sap.ino.wall.Wall.prototype.getWallSyncMode = function() {
        return this._iWallSyncMode;
    };
    
    /**
     * Complete Updates the wall with items (from JSON format)
     * 
     * @param {JSON}
     *            oJSON the wall in JSON format
     * @public
     * @static
     * @return {sap.ino.wall.Wall} the update wall
     */
    sap.ino.wall.Wall.prototype.updateWallFromJSON = function(oJSON) {
        var oWall = this;
        
        sap.ino.wall.util.Formatter.mapNullToInitialValues(oJSON);
        this.setWallAttributesFromJSON(oJSON);
        
        jQuery.each(oWall.getItems() || [], function(index, oItem) {
            oWall.removeItemWithoutRendering(oItem);
        });
        
        jQuery.each(oJSON.items || [], function(index, oJSONItem) {
            var oItem = sap.ino.wall.Wall.createWallItemFromJSON(oJSONItem);
            oWall.addItemWithoutRendering(oItem);
        });
        
        this.clearAllPendingChanges();
        this.clearAllPendingItemChanges();
        
        return this;
    };
    
    /**
     * Delta Updates the wall with items (from JSON format)
     * 
     * @param {JSON}
     *            oJSON the wall in JSON format
     * @public
     * @static
     * @return {sap.ino.wall.Wall} the update wall
     */
    sap.ino.wall.Wall.prototype.deltaUpdateWallFromJSON = function(oJSON) {
        var oWall = this;
                
        sap.ino.wall.util.Formatter.mapNullToInitialValues(oJSON);
        var bChanged = this.setWallAttributesFromJSON(oJSON);

        function removeItem(oItem) {
            var oParentItem = oItem.getParent() instanceof sap.ino.wall.WallItemBase ? oItem.getParent() : null;
            if (!oParentItem) {
                oWall.removeItemWithoutRendering(oItem);
            } else {
                oParentItem.removeChildWithoutRendering(oItem);
            }
            bChanged = true;
            return oItem;
        }
        
        function addItem(oJSONItem) {
            var oItem = sap.ino.wall.Wall.createWallItemFromJSON(oJSONItem);
            if (oJSONItem.parentId > 0) {
                var oParentItem = oWall.getItemById(oJSONItem.parentId, true);
                if (oParentItem) {
                    oParentItem.addChildWithoutRendering(oItem, true);
                }
            } else {
                oWall.addItemWithoutRendering(oItem);
            }
            bChanged = true;
            return oItem;
        }
        
        function updateItem(oItem, oJSONItem) {
            delete oJSONItem.childs;
            var oNewItem = sap.ino.wall.Wall.createWallItemFromJSON(oJSONItem);
            callSetter(oItem, "title", oNewItem.getTitle());
            callSetter(oItem, "x", oNewItem.getX());
            callSetter(oItem, "y", oNewItem.getY());
            callSetter(oItem, "w", oNewItem.getW());
            callSetter(oItem, "h", oNewItem.getH());
            callSetter(oItem, "depth", oNewItem.getDepth());
            jQuery.each(oItem.getMetadata().getProperties(), function(sPropertyName, oPropertyDef) {
                callSetter(oItem, sPropertyName, oNewItem.getProperty(sPropertyName));
            });
            var oParentItem = oItem.getParent() instanceof sap.ino.wall.WallItemBase ? oItem.getParent() : null;
            if (oParentItem && !oJSONItem.parentId) {
                oParentItem.removeChildWithoutRendering(oItem);
                oWall.addItemWithoutRendering(oItem);
            } else if (!oParentItem && oJSONItem.parentId > 0) {
                oWall.removeItemWithoutRendering(oItem);
                oParentItem = oWall.getItemById(oJSONItem.parentId, true);
                if (oParentItem) {
                    oParentItem.addChildWithoutRendering(oItem, true);
                }
            }
            oItem.invalidate();
            bChanged = true;
            return oItem;
        }
        
        function callSetter(oItem, sProperty, vValue) {
            var sSetter = "set" + sProperty.substring(0, 1).toUpperCase() + sProperty.substring(1);
            if (typeof oItem[sSetter] === "function") {
                oItem[sSetter].apply(oItem, [vValue]);
            } else {
                oItem.setProperty(sProperty, vValue, true);
            }
        }
        
        function handleItem(oJSONItem) {
            var oItem = null;
            if (oJSONItem.storageId > 0) {
                oItem = oWall.getItemById(oJSONItem.storageId, true);
            }
            if (oItem && (oItem.getFlipped() || oItem.$().hasClass("dragCursor"))) {
                return;
            }
            if (oItem && oJSONItem.actionCode == "DELETED") {
                removeItem(oItem);
            } else if (!oItem && (oJSONItem.actionCode == "CREATED" || oJSONItem.actionCode == "UPDATED")) {
                addItem(oJSONItem);
            } else if (oItem && oJSONItem.actionCode == "UPDATED") {
                var aChildItem = oItem.getChilds(); 
                removeItem(oItem);
                var oNewItem = addItem(oJSONItem);
                // Handle Child on Parent
                jQuery.each(aChildItem, function(index, oChildItem) {
                    var aExistingChild = jQuery.grep(oNewItem.getChilds(), function(oExistingChildItem) {
                        return oExistingChildItem.getStorageId() == oChildItem.getStorageId();
                    });
                    var oExistingChild;
                    if (!aExistingChild.length) {
                        oNewItem.addChildWithoutRendering(oChildItem, true);
                        oExistingChild = oChildItem;
                    } else {
                        oExistingChild = aExistingChild[0];
                    } 
                    // Handle Child on Parent in Group
                    jQuery.each(oChildItem.getChilds(), function(index, oChildChildItem) {
                        if (jQuery.grep(oExistingChild.getChilds(), function(oExistingChildChildItem) {
                            return oExistingChildChildItem.getStorageId() == oChildChildItem.getStorageId();
                        }).length == 0) {
                            oExistingChild.addChildWithoutRendering(oChildChildItem, true);
                        }
                    });
                });
                // TODO: Enable delta update instead of remove/add above
                // updateItem(oItem, oJSONItem);
            }
        }
        
        jQuery.each(oJSON.items || [], function(index, oJSONItem) {
            handleItem(oJSONItem);
            bChanged = true;
        });
        
        this.clearAllPendingChanges();
        this.clearAllPendingItemChanges();
        
        return bChanged;
    };
    
    sap.ino.wall.Wall.prototype.setWallAttributesFromJSON = function(oJSON) {
        var oWall = this;
        var bChanged = false;
        
        if (oJSON.title && oWall.getTitle() != sap.ino.wall.util.Formatter.escapeBindingCharacters(oJSON.title)) {
            oWall.setTitle(sap.ino.wall.util.Formatter.escapeBindingCharacters(oJSON.title));
            bChanged = true;
        }
        if (oJSON.backgroundImage && oWall.getBackgroundImage() != oJSON.backgroundImage) {
            oWall.setBackgroundImage(oJSON.backgroundImage);
            bChanged = true;
        }
        if (oJSON.backgroundImageZoom && oWall.getBackgroundImageZoom() != oJSON.backgroundImageZoom) {
            oWall.setBackgroundImageZoom(oJSON.backgroundImageZoom);
            bChanged = true;
        }
        if (oJSON.backgroundImageTiled && oWall.getBackgroundImageTiled() != oJSON.backgroundImageTiled) {
            oWall.setBackgroundImageTiled(oJSON.backgroundImageTiled);
            bChanged = true;
        }
        if (oJSON.backgroundColor && oWall.getBackgroundColor() != oJSON.backgroundColor) {
            oWall.setBackgroundColor(oJSON.backgroundColor);
            bChanged = true;
        }
        if (oJSON.mode && oWall.getMode() != oJSON.mode) {
            oWall.setMode(oJSON.mode);
            bChanged = true;
        }
        if ((oJSON.strongestAuth === "read" || oJSON.strongestAuth === "none") && oWall.getMode() != "Readonly") {
            oWall.setMode("Readonly");
            bChanged = true;
        }
        return bChanged;
    };
    
    /**
     * Get Item by Id
     * 
     */
    sap.ino.wall.Wall.prototype.getItemById = function(iWallItemId, bIncludeChildren) {
        return this._getItemById(this.getItems(), iWallItemId, bIncludeChildren);
    };
    
    sap.ino.wall.Wall.prototype._getItemById = function(aItem, iWallItemId, bIncludeChildren) {
        var that = this;
        var oResult = null;
        jQuery.each(aItem, function(index, oItem) {
            if (oItem.getStorageId() == iWallItemId) {
                oResult = oItem;
            } else if (bIncludeChildren && oItem.getChilds() && oItem.getChilds().length > 0) {
                oResult = that._getItemById(oItem.getChilds(), iWallItemId, true);
            }
            return !oResult;
        });
        return oResult;
    };
    
    /**
     * Destroys the control.
     * 
     * @private
     */
    sap.ino.wall.Wall.prototype.exit = function () {
        // eventing
        this.deregisterWallEvents();
        this._ondragenterProxy = null;
        this._ondragoverProxy = null;
        this._ondragleaveProxy = null;
        this._ondragendProxy = null;
        this._onmousewheelProxy = null;
        this._onpasteProxy = null;
        this._onkeydownProxy = null;
        this._onkeyupProxy = null;
        this._orientationChangeProxy = null;
        this._onmousemoveProxy = null;
        this._touchendProxy = null;
        this._touchmoveProxy = null;

        // flags
        this._bIsInDOM = null;

        // misc
        this._iWallSaveDelay = sap.ino.wall.config.Config.getWallSaveDelay();
        clearTimeout(this._iWallSaveDelayTimer);
        this._iWallSaveDelayTimer = 0;
        clearTimeout(this._iWallItemsSaveDelayTimer);
        this._iWallItemsSaveDelayTimer = 0;
        this._iWallSyncDelay = 0;
        clearTimeout(this._iWallSyncDelayTimer);
        this._iWallSyncDelayTimer = 0;
        this._iWallSyncMode = false;
        this._oItemsChanged = null;
        this._oPropertiesChanged = null;

        // inner controls
        if (this._oHLTrashAbove) {
            this._oHLTrashAbove.destroy();
            this._oHLTrashAbove = null;
        }
        if (this._oHLTrash) {
            this._oHLTrash.destroy();
            this._oHLTrash = null;
        }
        if (this._oSelectionRectangle) {
            this._oSelectionRectangle.destroy();
            this._oSelectionRectangle = null;
        }
        if (this._oLock) {
            this._oLock.destroy();
            this._oLock = null;
        }
        if (this._oTemplateIndicator) {
            this._oTemplateIndicator.destroy();
            this._oTemplateIndicator = null;
        }
    };

    /**
     * Adjusts control before rendering.
     * 
     * @private
     */
    sap.ino.wall.Wall.prototype.onBeforeRendering = function () {
        if (!this._bFirstRenderCall) {
            // set up internal controls
            this._createTrashBin();
            this._createSelectionRectangle();
            this._createLock();
            this._createTemplateIndicator();
            this._bFirstRenderCall = true;
        }
        this.deregisterWallEvents();
    };

    /**
     * Adjusts control after rendering: - update zoom and viewport
     * 
     * @private
     */
    sap.ino.wall.Wall.prototype.onAfterRendering = function () {
        this.registerWallEvents();
        this.updateViewport();
        
        // TODO: for HTML controls we need to adjust the DOM directly, toggleStyleClass does not work
        this._oTemplateIndicator.$().toggleClass("sapInoWallInvisible", this.getType() !== "Template");
    };
    
    /* =========================================================== */
    /* begin: event methods */
    /* =========================================================== */
    
    sap.ino.wall.Wall.prototype.setupWallEvents = function () {
        if (!this._onmousewheelProxy) {
            this._ondragenterProxy = jQuery.proxy(this._ondragenter, this);
            this._ondragoverProxy = jQuery.proxy(this._ondragover, this);
            this._ondragleaveProxy = jQuery.proxy(this._ondragleave, this);
            this._ondragendProxy = jQuery.proxy(this._ondragend, this);
            this._onmousewheelProxy = jQuery.proxy(this._onmousewheel, this);
            this._onpasteProxy = jQuery.proxy(this._onpaste, this);
            this._onkeydownProxy = jQuery.proxy(this._onkeydown, this);
            this._onkeyupProxy = jQuery.proxy(this._onkeyup, this);
            this._orientationChangeProxy = jQuery.proxy(this._onOrientationChange, this);
            this._touchendProxy = jQuery.proxy(this._ontouchend, this);
            this._touchmoveProxy = jQuery.proxy(this._ontouchmove, this);
            // TODO: still needed?
            this._onmousemoveProxy = jQuery.proxy(this._onmousemove, this);
        }
    };
    
    sap.ino.wall.Wall.prototype.registerWallEvents = function () {
        this.setupWallEvents();
        // drag & drop events
        // TODO: currently only needed for debug, check if we still need it
        // TODO: check why debug square is not displayed anymore on drag
        jQuery(window.document).bind("dragenter.wall", this._ondragenterProxy);
        jQuery(window.document).bind("dragover.wall", this._ondragoverProxy);
        jQuery(window.document).bind("dragleave.wall", this._ondragleaveProxy);
        jQuery(window.document).bind("dragend.wall", this._ondragendProxy);
    
        // mouse wheel event (DOMMouseScroll in Firefox, mousewheel else)
        jQuery(window.document).bind(!!sap.ui.Device.browser.firefox ? "DOMMouseScroll.wall" : "mousewheel.wall", this._onmousewheelProxy);
    
        // copy and paste event (needs to be global)
        jQuery(window.document).bind("paste.wall", this._onpasteProxy);
    
        // bind other special keys (like space or CTRL+A) in generic key events
        jQuery(window.document).bind("keydown.wall", this._onkeydownProxy);
        jQuery(window.document).bind("keyup.wall", this._onkeyupProxy);
    
        // mouse events
        jQuery(window.document).bind("touchmove.wall mousemove.wall", this._onmousemoveProxy);
        
        // orientation change
        sap.ui.Device.orientation.attachHandler(this._orientationChangeProxy);
    };
    
    sap.ino.wall.Wall.prototype.deregisterWallEvents = function () {
        jQuery(window.document).unbind("dragenter.wall", this._ondragenterProxy);
        jQuery(window.document).unbind("dragover.wall", this._ondragoverProxy);
        jQuery(window.document).unbind("dragleave.wall", this._ondragleaveProxy);
        jQuery(window.document).unbind("dragend.wall", this._ondragendProxy);
        jQuery(window.document).unbind(!!sap.ui.Device.browser.firefox ? "DOMMouseScroll.wall" : "mousewheel.wall", this._onmousewheelProxy);
        jQuery(window.document).unbind("paste.wall", this._onpasteProxy);
        jQuery(window.document).unbind("keydown.wall", this._onkeydownProxy);
        jQuery(window.document).unbind("keyup.wall", this._onkeyupProxy);
        jQuery(document).unbind("touchmove.wall mousemove.wall", this._onmousemoveProxy);
        sap.ui.Device.orientation.detachHandler(this._orientationChangeProxy);
    };
    
    /**
     * On drop event. Checks the clipboard pasted on the wall and creates an item for it.
     * 
     * @param {jQuery.Event}
     *            oEvent The browser event
     * @private
     */
    sap.ino.wall.Wall.prototype._onpaste = function (oEvent) {
        if (this._wallInteractionPossible(oEvent.target)) {
            // Note: paste event only working with text and in Chrome currently, other browsers only allow to
            // capture the paste event in input controls
            var sText = oEvent.originalEvent.clipboardData.getData(oEvent.originalEvent.clipboardData.items[0].type);
            if (sText) {
                this._processTextDrop(sText, false, sap.ino.wall.WallConfig._ADD_MODE_COPYPASTE);
            }
        }
    };
        
    /**
     * On drop event. Checks the data dropped onto the wall and creates an item for it.
     * 
     * @param {jQuery.Event}
     *            oEvent The browser event
     * @private
     */
    sap.ino.wall.Wall.prototype.ondrop = function (oEvent) {
        // TODO: why is wall not this here
        var that = this,
            dt = oEvent.originalEvent.dataTransfer,
            aFiles = dt.files,
            oFile,
            formData,
            reader,
            aMatches,
            sText,
            aLines,
            bExceedsStickyNoteLength = false,
            i = 0,
            j = 0,
            iMultiOffset = 0;
    
        // prevent further processing of this event
        oEvent.preventDefault();
        oEvent.stopPropagation();
    
        // hide drag preview
        jQuery("drag").css("display", "none");
    
        // reset cursor to normal
        this.$("inner").removeClass("dragCursor");
    
        if (this.getMode() === "Readonly") {
            return;
        }
    
        // display an error if user tries to drop a file with IE9
        if (sap.ui.Device.browser.name === "ie" && sap.ui.Device.browser.version < 10 && aFiles === undefined && oEvent.originalEvent.dataTransfer.getData("text") === null) {
            return;
        }
        
        var oOffset = this.$("inner").offset();
        var fZoomModifier = 100 / this.getZoom();

	    var iX;
	    var iY;
	
	    if (!sap.ino.wall.config.Config.getZoomCapable()) { // scale
	        iX = ((sap.ino.wall.util.Helper.getEventX(oEvent) + Math.abs(oOffset.left)) * fZoomModifier);
	        iY = ((sap.ino.wall.util.Helper.getEventY(oEvent) + Math.abs(oOffset.top)) * fZoomModifier);
	
	    } else { // zoom
	        iX = (sap.ino.wall.util.Helper.getEventX(oEvent) * fZoomModifier - oOffset.left);
	        iY = (sap.ino.wall.util.Helper.getEventY(oEvent) * fZoomModifier - oOffset.top + 5);
	    }	    
    
        if (aFiles && aFiles.length !== 0) { // for ie9 this is empty
            // calculate multi-offset for the last item based on how many non-empty items we have
            for (; i < aFiles.length; i++) {
                oFile = aFiles[i];
                if (!!oFile.type.match(/image\.*/)) {
                    j++;
                }
            }
            iMultiOffset = (j - 1) * sap.ino.wall.WallConfig._MULTI_OFFSET;
            
            var fnFileUpload = function(oFile, iOffset, bImage) {
            	// create a local scope item for the image
                var sFileName = oFile.name;
                var oNewItem;
                
                if (bImage) {
                	oNewItem = new sap.ino.wall.WallItemImage({
	                    status: "Busy",
	                    title : that._oRB.getText("WALL_IMAGE_UPLOAD_TITLE"),
	                    storageId : -2 // -1 is used by the attachment itself
	                });
                }
                else {
                	oNewItem = new sap.ino.wall.WallItemAttachment({
	                    status: "Busy",
	                    title : that._oRB.getText("WALL_ITEMATTACHMENT_NEW_TEXT"),
	                    storageId : -2 // -1 is used by the attachment itself
	                });
                }
                
                var iH = parseInt(oNewItem.getH()) || 0;
                var iW = parseInt(oNewItem.getW()) || 0;
                var sX = (iX + iOffset - (iW / 2)) + "px";
                var sY = (iY + iOffset - (iH / 2)) + "px";
                
                oNewItem.setXY(sX,sY);
                that.addItemWithoutRendering(oNewItem);                
                
                sap.ino.commons.models.object.Attachment.uploadFile(oFile).done(function(oResponse) {
                    var iStorageId = oResponse.attachmentId;
                    var sFileName = oResponse.fileName;
                    if (bImage) {
                    	oNewItem.setPreview(Configuration.getAttachmentDownloadURL(iStorageId), true);
                    	oNewItem.setImage(Configuration.getAttachmentDownloadURL(iStorageId));
                    	oNewItem.setTitle(sFileName);
                        oNewItem.setStatus("Normal");
                	}
                	else {
                		setTimeout(function() {
                			oNewItem.setURL(Configuration.getAttachmentDownloadURL(iStorageId));
                			oNewItem.setTitle(sFileName);
                			oNewItem.setType(oResponse.mediaType);
                			oNewItem.setFileName(sFileName);
                			oNewItem.updateIcon();
                			oNewItem.setStatus("Normal");
                		}, 500);
                	} 
                }).fail(function(oResponse) {
                    // TODO: Handle error
                    that.removeItem(oNewItem);
                });
            };
    
            // upload all files and create items
            for (i = aFiles.length - 1; i >= 0; i--) {
                oFile = aFiles[i];
                fnFileUpload(oFile, iMultiOffset, !!oFile.type.match(/image\.*/));
                iMultiOffset -= sap.ino.wall.WallConfig._MULTI_OFFSET;
            }
        } else {
            sText = oEvent.originalEvent.dataTransfer.getData("text");
            aLines = sText.trim().split("\n"); // firefox does not like \r
    
            // batch drop detection: more than 60 chars in one of the lines or an empty line in the text will cancel
            // the batch drop
            for (; i < aLines.length; i++) {
                
                if (aLines[i].length > sap.ino.wall.WallConfig._MAX_STICKY_NOTE_CREATION_LENGTH * (1 + aLines.length / 30) || (aLines[i].trim().length === 0 && i !== 0 && i !== aLines.length - 1)) {
                    bExceedsStickyNoteLength = true;
                    break;
                }
            }
    
            // request user decision if the text contains many short lines
            if (aLines.length >= 3 && !bExceedsStickyNoteLength) {
                // ask user if he wants to drop multiple sticky notes or a single text node
                sap.m.MessageBox.confirm(this._oRB.getText("WALL_DIALOG_BATCH_STICKY_NOTES"), {
                    onClose: function (sActionClicked) {
                        // process batch of sticky notes if user confirmed it
                        that._processTextDrop(sText, sActionClicked === sap.m.MessageBox.Action.OK, sap.ino.wall.WallConfig._ADD_MODE_DROP, iX, iY);
                    }
                });
            } else {
                // process text event (drop)
                this._processTextDrop(sText, false, sap.ino.wall.WallConfig._ADD_MODE_DROP, iX, iY);
            }
        }
    };
    
    sap.ino.wall.Wall.prototype._processTextDrop = function (sText, bMulti, iMode, iX, iY) {
        var that = this,
            oNewItem = null,
            oRegExpURL = /^(ftp|http|https):\/\/[^ "]+$/,
            oRegExpEmail = /.+@.+\..+/,
            aItems,
            iMultiOffset = 0,
            i = 0,
            j = 0,
            aTemp,
            sName,
            sEmail,
            aLines;
        
        var fnAddItem = function(oItem, iOffset) {
        	var iH = parseInt(oItem.getH()) || 0;
            var iW = parseInt(oItem.getW()) || 0;
            if (isNaN(iX) || isNaN(iY)) {
                that.placeItemInCurrentViewPoint(oItem, true, iOffset);
            } else {
                var sX = (iX + iOffset - (iW / 2)) + "px";
                var sY = (iY + iOffset - (iH / 2)) + "px";
                oItem.setXY(sX,sY);
                that.addItemWithoutRendering(oItem);
            }
        };
    
        // sanitize input for control text properties
        sText = sap.ino.wall.util.Formatter.escapeBindingCharacters(sText);
        // only max 4000 characters
        sText = sText.substring(0, 4000);
    
        if (oRegExpURL.test(sText)) {
            // URL
            if (/www\.youtube\.com\/watch\?v=/.test(sText) || /youtu\.be\// .test(sText)) {
                // youtube video link
                oNewItem = new sap.ino.wall.WallItemVideo({
                    title: that._oRB.getText("WALL_ITEMVIDEO_NEW_TEXT"),
                    video: sText
                });
            } else {
                oNewItem = new sap.ino.wall.WallItemLink({
                    title: that._oRB.getText("WALL_ITEMLINK_NEW_TEXT"),
                    description: sText
                });
            }
        } else if (oRegExpEmail.test(sText) && sText.length < ((sText.match(/[\w\.]+@[\w\.]+\.\w+/g) || []).length) * 100) { 
        	// sanity check for texts including an eMail address (100 chars per mail adress should be enough even for
            // "name <@>" format
            // outlook format
            if (/<[\w\.]+@[\w\.]+\.\w+>/.test(sText)) {
                aItems = sText.split(";");
                iMultiOffset = 0;
                i = 0;
                j = 0;
    
                // calculate multi-offset for the last item based on how many non-empty items we have
                for (; i < aItems.length; i++) {
                    if (aItems[i]) {
                        j++;
                    }
                }
                iMultiOffset = (j - 1) * sap.ino.wall.WallConfig._MULTI_OFFSET;
        
                // when user requested it, add all lines as sticky notes
                for (i = aItems.length - 1; i >= 0; i--) {
                    if (aItems[i]) {
                        // outlook format (name <email>)
                        aTemp = aItems[i].split("<");
                        sName = aTemp[0].trim();
                        sEmail = aTemp[1].replace(">", "");
    
                        (function () {
                            var oNewItem = new sap.ino.wall.WallItemPerson({
                                title: sName
                            });
                            oNewItem.setEmail(sEmail, false, true);
        
                            fnAddItem(oNewItem, iMultiOffset);
                            iMultiOffset -= sap.ino.wall.WallConfig._MULTI_OFFSET;
                        }) ();
                    }
                }
                return;
            } else {
                // fallback: an onrecognized email pattern, add person items for each email address
                aItems = sText.match(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9._-]+)/gi);
                iMultiOffset = 0;
                i = 0;
                j = 0;
    
                // calculate multi-offset for the last item based on how many non-empty items we have
                for (; i < aItems.length; i++) {
                    if (aItems[i]) {
                        j++;
                    }
                }
                iMultiOffset = (j - 1) * sap.ino.wall.WallConfig._MULTI_OFFSET;
    
                // fallback: an unrecognized email pattern
                for (i = aItems.length - 1; i >= 0; i--) {
                    if (aItems[i]) {
                        (function () {
                            var oNewItem = new sap.ino.wall.WallItemPerson({
                                title: that._oRB.getText("WALL_ITEMPERSON_NEW_TEXT"),

                            });
                            oNewItem.setEmail(aItems[i], false, true);
                            
                            fnAddItem(oNewItem, iMultiOffset);
                            iMultiOffset -= sap.ino.wall.WallConfig._MULTI_OFFSET;
                        }) ();
                    }
                }
                return;
            }
        } else {
            // TODO: call an identifier service here or ask the user
            // <= 80 chars = sticky note
            // > 80 chars = text
            if (sText && bMulti) {
                aLines = sText.split("\n"); // firefox does not like \r
                iMultiOffset = 0;
                i = 0;
                j = 0;
    
                // calculate multi-offset for the last item based on how many non-empty items we have
                for (; i < aLines.length; i++) {
                    if (aLines[i].trim().length) {
                        j++;
                    }
                }
                iMultiOffset = (j - 1) * sap.ino.wall.WallConfig._MULTI_OFFSET;
    
                // when user requested it, add all lines as sticky notes
                for (i = aLines.length - 1; i >= 0; i--) {
                    if (aLines[i].trim().length) {
                        oNewItem = new sap.ino.wall.WallItemSticker({
                            title: aLines[i]
                        });
                        fnAddItem(oNewItem, iMultiOffset);
                        iMultiOffset -= sap.ino.wall.WallConfig._MULTI_OFFSET;
                    }
                }
                return;
            } else if (sText && sText.length <= sap.ino.wall.WallConfig._MAX_STICKY_NOTE_CREATION_LENGTH) {
                oNewItem = new sap.ino.wall.WallItemSticker({
                    title: sText
                });         
            } else {
                oNewItem = new sap.ino.wall.WallItemText({
                    title: that._oRB.getText("WALL_ITEMTEXT_NEW_TEXT"),
                    description: sText
                });
            }
        }
        fnAddItem(oNewItem, iMultiOffset);
    };
    
    /**
     * On drag enter event called by proxy
     * 
     * @param {jQuery.Event}
     *            oEvent The browser event
     * @private
     */
    sap.ino.wall.Wall.prototype._ondragenter = function (oEvent) { 
        var fDragZoomFactor,
            $dragIndicator,
            $dragIndicatorInner;
    
        // TODO: find out why this is not called
        if (this.getMode() === "Readonly") {
            return;
        }
    
        // the unoptimized formula would be 50 * zoom / 100 (normal drag size = 50px)
        fDragZoomFactor = this.getZoom() / 2;
        
        // show a preview when starting to drag (adopted to zoom factor)
        clearTimeout(this._iDragHideTimer);
        $dragIndicator = jQuery.sap.byId(this.getId() + "-drag");
        $dragIndicator.css("display", "inline");
        $dragIndicatorInner = $dragIndicator.children();
        $dragIndicatorInner.css("width", fDragZoomFactor).css("height", fDragZoomFactor);
        $dragIndicatorInner.css("box-shadow", "0px 0px " + fDragZoomFactor + "px");
    
        // set cursor to grabbing
        this.$("inner").addClass("dragCursor");
    
        if (sap.ino.wall.config.Config.getDebugPositioning()) {
            jQuery.sap.byId(this.getId() + "-dragIndicator").css("display", "inline");
        }
    };
    
    
    /**
     * On drag over event
     * 
     * @param {jQuery.Event}
     *            oEvent The browser event
     * @private
     */
    sap.ino.wall.Wall.prototype._ondragover = function (oEvent) {
        var $dragIndicator;
    
        // sap.ino.wall.util.Logger.info('ondragover');
    
        // move a preview while dragging
        $dragIndicator = this.$("drag");
        $dragIndicator.css("left", sap.ino.wall.util.Helper.getEventX(oEvent)).css("top", sap.ino.wall.util.Helper.getEventY(oEvent) - 60);
    
        // in some cases the drag indicator stays visible (dragend/leave is not called properly, therefore we create
        // a time)
        clearTimeout(this._iDragHideTimer);
        this._iDragHideTimer = setTimeout(function () {
            this.$("drag").css("display", "none");
        }.bind(this), 5000);
    
        // debug: show an indicator for drag position
        if (sap.ino.wall.config.Config.getDebugPositioning()) {
            this.$("dragIndicator").css("display", "inline").css("left", sap.ino.wall.util.Helper.getEventX(oEvent)).css("top", sap.ino.wall.util.Helper.getEventY(oEvent));
        }
    };
    
    sap.ino.wall.Wall.prototype._ondragend = function (oEvent) {
        // TODO: find out why this is not called
        // sap.ino.wall.util.Logger.info('ondragend');
        jQuery.sap.byId(this.getId() + "-drag").css("display", "none");
        if (sap.ino.wall.config.Config.getDebugPositioning()) {
            jQuery.sap.byId(this.getId() + "-dragIndicator").css("display", "none");
        }
    };
    
    /**
     * On drag leave event
     * 
     * @param {jQuery.Event}
     *            oEvent The browser event
     * @private
     */
    sap.ino.wall.Wall.prototype._ondragleave = function (oEvent) {
        // TODO: find out why this is always called
        sap.ino.wall.util.Logger.warning('ondragleave');
        if (oEvent.srcControl) {
            jQuery.sap.byId(this.getId() + "-drag").css("display", "none");
        }
        if (sap.ino.wall.config.Config.getDebugPositioning()) {
            jQuery.sap.byId(this.getId() + "-dragIndicator").css("display", "none");
        }
        oEvent.preventDefault();
        oEvent.stopPropagation();
    };
    
    /**
     * On mouse move event, is used to store the last position of the pointer and for debug positioning
     * 
     * @param {jQuery.Event}
     *            oEvent The browser event
     * @private
     */
    sap.ino.wall.Wall.prototype._onmousemove = function (oEvent) {
        var wallId = this.getId(),
            oOffset = this.$("inner").offset(),
            oTouchPos = this.getTouchPosition();
    
        if (oOffset && sap.ino.wall.util.Helper.getEventX(oEvent) && sap.ino.wall.util.Helper.getEventY(oEvent)) {
            oTouchPos.setX(sap.ino.wall.util.Helper.getEventX(oEvent) - oOffset.left);
            oTouchPos.setY(sap.ino.wall.util.Helper.getEventY(oEvent) - oOffset.top + 25);
    
            this.setTouchPosition(oTouchPos);
    
            // debug: show an indicator for mouse position
            if (sap.ino.wall.config.Config.getDebugPositioning()) {
                jQuery.sap.byId(wallId + "-pointerIndicator").css("display", "inline");
                jQuery.sap.byId(wallId + "-pointerIndicator").css("left", sap.ino.wall.util.Helper.getEventX(oEvent)).css("top", sap.ino.wall.util.Helper.getEventY(oEvent) - 20);
            }
        }
    };
    
    /**
     * Place items that are following the cursor
     * 
     * @param {jQuery.EventObject}
     *            oEvent The event object
     * @private
     */
    sap.ino.wall.Wall.prototype._placeFollowHandlerItems = function () {
        var i = 0;

        if (this._hasFollowCursorItems()) {
            for (;i < this._followHandlers.length; i++) {
                // if items have no position yet (mouse cursor has not moved on the wall) we do not place them
                if (this._followHandlers[i][1].getX() === "" || this._followHandlers[i][1].getY() === "") {
                    continue;
                }

                // unregister the event
                jQuery(document).unbind("touchmove mousemove", this._followHandlers[i][0]);

                // flip item to edit it immediately (except for drop, clone, and detach child mode)
                if (this._followHandlers[i][2] !== sap.ino.wall.WallConfig._ADD_MODE_DROP && 
                    this._followHandlers[i][2] !== sap.ino.wall.WallConfig._ADD_MODE_CLONE && 
                    this._followHandlers[i][2] !== sap.ino.wall.WallConfig._ADD_MODE_DETACHCHILD &&
                    this._followHandlers[i][2] !== sap.ino.wall.WallConfig._ADD_MODE_DETACHGROUPITEM) {
                    this._followHandlers[i][1].setFlipped(true);
                }
    
                this.fireItemAdd({ // pass item as parameter
                    item: this._followHandlers[i][1],
                    mode: this._followHandlers[i][2]
                });
                
                this._followHandlers.splice(i, 1);
                i--; // decrement
            }
    
            // calculate new bounding box
            this._updateBoundingBox();
            // this._followHandlers = []; // empty the array
            return;
        }
    };
    
    /**
     * Handle the touch start/click event.
     * 
     * @param {jQuery.EventObject}
     *            oEvent The event object
     * @private
     */
    sap.ino.wall.Wall.prototype.ontouchstart = function (oEvent) {
        if (sap.ino.wall.ColorPicker.INSTANCE) {
            sap.ino.wall.ColorPicker.INSTANCE.close();
        }
        var iOffsetTop, $selectionRectangle;
        
        // place items that are following the cursor
        this._placeFollowHandlerItems();

        // wall item already took care of the event, we don't need to do anything here
        if (oEvent.isMarked("_sapInoWallInnerItemMove")) {
            return;
        }

        // user is selecting text or doing something in an input field skip this touch event
        if (oEvent.srcControl instanceof sap.m.TextArea || oEvent.srcControl instanceof sap.m.Input || oEvent.srcControl instanceof sap.ino.wall.TextEditor) {
            return;
        }

        // otherwise we set it as handled by the wall
        oEvent.setMarked();

        // here also bound to the mouseup mousemove event to enable it working in desktop browsers
        jQuery(document).on("touchend touchcancel mouseup", this._touchendProxy);
        jQuery(document).on("touchmove mousemove", this._touchmoveProxy);

        if (oEvent.shiftKey) {
            iOffsetTop = this.$("inner").parent().offset().top;
            $selectionRectangle = this.$("selectionRectangle");

            this._touchMode = sap.ino.wall.WallConfig._TOUCHMODE_SELECT;
            // add selection cursor
            this.$("inner").addClass("selectCursor");
            $selectionRectangle.css("display", "block");
            $selectionRectangle.css("left", sap.ino.wall.util.Helper.getEventX(oEvent));
            $selectionRectangle.css("top", sap.ino.wall.util.Helper.getEventY(oEvent) - iOffsetTop);
            $selectionRectangle.css("z-index", this._getNextDepth());
        } else {
            this._touchMode = sap.ino.wall.WallConfig._TOUCHMODE_MOVE;

            // set cursor to grabbing
            this.$("inner").addClass("dragCursor");

            // clear current selection
            this._clearSelection();
        }

        this._touchStartMousePositionX = sap.ino.wall.util.Helper.getEventX(oEvent);
        this._touchStartMousePositionY = sap.ino.wall.util.Helper.getEventY(oEvent);
        this._touchMoveMousePositionX = sap.ino.wall.util.Helper.getEventX(oEvent);
        this._touchMoveMousePositionY = sap.ino.wall.util.Helper.getEventY(oEvent);
        this._bTextSelectionCleared = false;
    };

    /**
     * Handle the touch move event.
     * 
     * @param {jQuery.EventObject}
     *            oEvent The event object
     * @private
     */
    sap.ino.wall.Wall.prototype._ontouchmove = function (oEvent) {
        var fDeltaX,
            fDeltaY,
            fZoomModifier,
            fSpeedX,
            fSpeedY,
            oViewPoint,
            $this,
            iWidth,
            iHeight,
            iOffsetTop,
            $selectionRectangle;
    
        if (oEvent.isMarked()) {
            return;
        }
        
        if (oEvent.touches && oEvent.touches.length > 1) {
            
            var fXDiff = Math.abs(oEvent.touches[0].pageX - oEvent.touches[1].pageX) - this._touchZoomXScale;
            var fYDiff = Math.abs(oEvent.touches[0].pageY - oEvent.touches[1].pageY) - this._touchZoomYScale;
            if (fXDiff || fYDiff) {
                var fZoom = this.getZoom() + (fXDiff ? fXDiff / 3 : 0) + (fYDiff ? fYDiff / 3 : 0);
                this.setZoom(fZoom);
            }
            
            this._touchZoomXScale = Math.abs(oEvent.touches[0].pageX - oEvent.touches[1].pageX);
            this._touchZoomYScale = Math.abs(oEvent.touches[0].pageY - oEvent.touches[1].pageY);
        }
        else {
        
            // calculate helper values
            fDeltaX = sap.ino.wall.util.Helper.getEventX(oEvent) - this._touchMoveMousePositionX;
            fDeltaY = sap.ino.wall.util.Helper.getEventY(oEvent) - this._touchMoveMousePositionY;
            fZoomModifier = 100 / this.getZoom();
            fSpeedX = Math.abs(fDeltaX / 50 * fZoomModifier);
            fSpeedY = Math.abs(fDeltaY / 50 * fZoomModifier);
            oViewPoint = this.getViewPoint();
            $this = this.$("inner");
        
            // remember touch position
            this._touchMoveMousePositionX = sap.ino.wall.util.Helper.getEventX(oEvent);
            this._touchMoveMousePositionY = sap.ino.wall.util.Helper.getEventY(oEvent);
        
            // update wall
            if (fDeltaX || fDeltaY) {
                // clear text selection once when dragging starts
                if (!this._bTextSelectionCleared) {
                    sap.ino.wall.util.Helper.deselectAllText();
                    this._bTextSelectionCleared = true;
                }
                
                if (this._touchMode === sap.ino.wall.WallConfig._TOUCHMODE_SELECT) {
                    iWidth = this._touchMoveMousePositionX - this._touchStartMousePositionX;
                    iHeight = this._touchMoveMousePositionY - this._touchStartMousePositionY;
                    iOffsetTop = this.$("inner").parent().offset().top;
                    $selectionRectangle = this.$("selectionRectangle");
        
                    if (iWidth >= 0) {
                        $selectionRectangle.css("left", this._touchStartMousePositionX);
                        $selectionRectangle.css("width", iWidth);
                    } else {
                        $selectionRectangle.css("left", this._touchStartMousePositionX + iWidth);
                        $selectionRectangle.css("width", Math.abs(iWidth));
                    }
                    if (iHeight >= 0) {
                        $selectionRectangle.css("top", this._touchStartMousePositionY - iOffsetTop);
                        $selectionRectangle.css("height", iHeight);
                    } else {
                        $selectionRectangle.css("top", this._touchStartMousePositionY - iOffsetTop + iHeight);
                        $selectionRectangle.css("height", Math.abs(iHeight));
                    }
                } else {
                    // set moving flag
                    this._bMoving = true;
                    // set cursor to grabbing
                    this.$("inner").addClass("dragCursor");
        
                    // calculate pan speed
                    if (fSpeedX < 1) {
                        fSpeedX = 1;
                    } else if (fSpeedX > 50) {
                        fSpeedX = 50;
                    }
                    if (fSpeedY < 1) {
                        fSpeedY = 1;
                    } else if (fSpeedY > 50) {
                        fSpeedY = 50;
                    }
            
                    // implement a logarithmic pan to compensate zoom factor and allow faster dragging
                    fDeltaX *= Math.log(fSpeedX) + 1;
                    fDeltaY *= Math.log(fSpeedY) + 1;
            
                    // set the new view point
                    oViewPoint.setX(oViewPoint.getX() - fDeltaX);
                    oViewPoint.setY(oViewPoint.getY() - fDeltaY);
                    this.setViewPoint(oViewPoint);
            
                    // ff+ie+sf: adjust wall to viewpoint
                    if (!sap.ino.wall.config.Config.getZoomCapable()) {
                        $this.css("margin", "-" + (oViewPoint.getY() + (oViewPoint.getY() - 5000) * ((this.getZoom() / 100) - 1)) + "px 0 0 -" + (oViewPoint.getX() + (oViewPoint.getX() - 5000) * ((this.getZoom() / 100) - 1)) + "px");
                    } else {
                        $this.css("margin", "-" + oViewPoint.getY() + "px 0 0 -" + oViewPoint.getX() + "px");
                    }
                }
            }
        }
    };
    
    /**
     * Handle the touch end event.
     * 
     * @param {jQuery.EventObject}
     *            oEvent The event object
     * @private
     */
    sap.ino.wall.Wall.prototype._ontouchend = function (oEvent) {
        var that = this,
            $selectionRectangle;
            
        this._touchZoomXScale = undefined;
        this._touchZoomYScale = undefined;
    
        // place items that are following the cursor (except for cloning)
        if (this._iItemClonePosition) {
            // if the item has been cloned and the mouse has moved more than 5px we place it direclty, otherwise a
            // separate click is required
            if (Math.abs(sap.ino.wall.util.Helper.getEventX(oEvent) - this._iItemClonePosition[0]) > 5 ||
                    Math.abs(sap.ino.wall.util.Helper.getEventY(oEvent) - this._iItemClonePosition[1]) > 5) {
                    this._placeFollowHandlerItems();
            }
        } else {
            this._placeFollowHandlerItems();
        }
        this._iItemClonePosition = undefined;
        
        // if an item was moved we don't need to do anything here
        if (this._bMovingItem) {
            jQuery(document).unbind("touchend touchcancel mouseup", this._touchendProxy);
            jQuery(document).unbind("touchmove mousemove", this._touchmoveProxy);
            return;
        }
    
        if (this._touchMode === sap.ino.wall.WallConfig._TOUCHMODE_SELECT) {
            $selectionRectangle = this.$("selectionRectangle");
    
            // determine the selected items in the rectangle
            this._calculateAndTriggerSelection($selectionRectangle.position().left, $selectionRectangle.position().top, $selectionRectangle.outerWidth(), $selectionRectangle.outerHeight());
    
            // remove the selection layer
            $selectionRectangle.css("display", "none");
            $selectionRectangle.css("width", "0px");
            $selectionRectangle.css("height", "0px");
            this.$("inner").removeClass("selectCursor");
        } else {
            // set cursor to normal
            this.$("inner").removeClass("dragCursor");
    
            // we set a timeout to allow other events (click) to also detect if item was moved
            setTimeout(function ()  {
                that._bMoving = false;  
            }, 0);
        }
        this._touchMode = undefined;
    
        jQuery(document).unbind("touchend touchcancel mouseup", this._touchendProxy);
        jQuery(document).unbind("touchmove mousemove", this._touchmoveProxy);
    };
    
    /**
     * Touch cancel event
     * 
     * @param {jQuery.Event}
     *            oEvent
     * @private
     */
    sap.ino.wall.Wall.prototype.ontouchcancel = sap.ino.wall.Wall.prototype.ontouchend;
    
    /**
     * Event object contains detail (for Firefox and Opera), and wheelData (for Internet Explorer, Safari, and Opera).
     * Scrolling down is a positive number for detail, but a negative number for wheelDelta.
     * 
     * @param {jQuery.Event}
     *            oEvent Event object contains detail (for Firefox and Opera), and wheelData (for Internet Explorer,
     *            Safari, and Opera).
     * @private
     */
    sap.ino.wall.Wall.prototype._onmousewheel = function (oEvent)  {
        // init event data and direction (see comments above)
        var oOriginalEvent = oEvent.originalEvent,
            fWheelFactor = oOriginalEvent.detail ? oOriginalEvent.detail : oOriginalEvent.wheelDelta * (-1) / 40.0,
            fZoomFactor = this.getZoom();
        
        var aParents = jQuery(oEvent.target).parents();
        var bIsWall = false;
        var bScroll = false;
        for (var ii = 0; ii < aParents.length; ii++) {
            if (jQuery(aParents[ii]).hasClass("flippable") || jQuery(aParents[ii]).hasClass("sapInoWallWIB")) {
                continue;
            }
            
            if (jQuery(aParents[ii]).hasClass("sapInoWallWOuter") || jQuery(aParents[ii]).hasClass("sapInoWallWInner")) {
                bIsWall = true;
                break;
            }
            
            if (!bIsWall && jQuery(aParents[ii]).get(0).scrollHeight > jQuery(aParents[ii]).outerHeight(true)) {
                bScroll = true;
            }
        }
    
        if (this._wallInteractionPossible(oEvent.target) && 
            bIsWall && !bScroll) {
            // speed up zoom factors > 100 and slowdown for zoom factors < 100
            fZoomFactor += fWheelFactor * (-1) * fZoomFactor / 100.0;
                
            // set the new zoom factor
            this.setZoom(fZoomFactor);
            
            // prevent the default behavior
            oEvent.preventDefault();
            oEvent.stopPropagation();
            return false;
        }
    };
    
    /**
     * Handler for orientation change event.
     * 
     * @param {jQuery.EventObject}
     *            oEvent The event object
     * @private
     */
    sap.ino.wall.Wall.prototype._onOrientationChange = function (oEvent) {
        this.updateViewport();
    };
    
    
    /**
     * Handle the key down event for space detection
     * 
     * @param {jQuery.Event}
     *            oEvent the keyboard event.
     * @private
     */
    sap.ino.wall.Wall.prototype._onkeydown = function (oEvent, oCustomEvent) {
        var that = this,
            iSpaceClearTimer = 0,
            iSelectedItemCount,
            fnCallback;
        
        var bWrite = (sap.ino.wall.WallMode.Write == this.getMode());
        
        // a custom event is given if an item w/ nicEdit works around nicEdit
        // => pass real event as parameter
        if (oCustomEvent) {
            oEvent = oCustomEvent;
        }
    
        if (oEvent.keyCode === 32) { // SPACE KEY: just set a flag
            this._bSpacePressed = true;
            // sometimes key up for space is not coming and the browser hangs anyway after a second
            // we clear the state automatically after 2 seconds to allow movement again
            clearTimeout(iSpaceClearTimer);
            iSpaceClearTimer = setTimeout(function () {
                that._bSpacePressed = false;
            }, 2000);
        }
    
        if (bWrite && oEvent.ctrlKey && oEvent.keyCode === jQuery.sap.KeyCodes.A) { // CTRL + A: select all
            // check if we are on the wall and not in an input field
            if (this._wallInteractionPossible(oEvent.target)) {
                this._selectAll();
                sap.m.MessageToast.show(this._oRB.getText("WALL_TOOLTIP_SELECT_ALL"));
    
                return false; // to suppress default browser behaviour
            }
        } else if (bWrite && oEvent.ctrlKey && oEvent.keyCode === jQuery.sap.KeyCodes.D) { // CTRL + D: deselect all
            // check if we are on the wall and not in an input field
            if (this._wallInteractionPossible(oEvent.target)) {
                this._clearSelection();
                sap.m.MessageToast.show(this._oRB.getText("WALL_TOOLTIP_UNSELECT_ALL"));
    
                return false; // to suppress default browser behaviour
            }
        } else if (oEvent.ctrlKey && oEvent.altKey && (oEvent.keyCode === jQuery.sap.KeyCodes.MINUS || oEvent.keyCode === jQuery.sap.KeyCodes.NUMPAD_MINUS || oEvent.ctrlKey && oEvent.keyCode === 189)) { // CTRL
                                                                                                                                                                // +
                                                                                                                                                                // ALT
                                                                                                                                                                // +
                                                                                                                                                                // MINUS:
                                                                                                                                                                // zoom
                                                                                                                                                                // out
            // check if we are on the wall and not in an input field
            if (this._wallInteractionPossible(oEvent.target)) {
                this.setZoom(this.getZoom() - 10);
            }
            
            // intercept browser zoom with CTRL + "+"
            if (oEvent.keyCode === 189) {
                oEvent.preventDefault();
                oEvent.stopPropagation();
            }            
            
        } else if (oEvent.ctrlKey&& oEvent.altKey && (oEvent.keyCode === jQuery.sap.KeyCodes.PLUS || oEvent.keyCode === jQuery.sap.KeyCodes.NUMPAD_PLUS || oEvent.ctrlKey && oEvent.keyCode === 187)) { // CTRL
                                                                                                                                                            // +
                                                                                                                                                            // ALT
                                                                                                                                                            // +
                                                                                                                                                            // PLUS:
                                                                                                                                                            // zoom
                                                                                                                                                            // in
            // check if we are on the wall and not in an input field
            if (this._wallInteractionPossible(oEvent.target)) {
                this.setZoom(this.getZoom() + 10);
            }
            
            // intercept browser zoom with CTRL + "+"
            if (oEvent.keyCode === 187) {
                oEvent.preventDefault();
                oEvent.stopPropagation();
            }
            
        } else if (oEvent.ctrlKey && oEvent.keyCode === jQuery.sap.KeyCodes.HOME) { // CTRL + HOME: show all items
            // check if we are on the wall and not in an input field
            if (this._wallInteractionPossible(oEvent.target)) {
                this.updateViewport();
                sap.m.MessageToast.show(this._oRB.getText("WALL_TOOLTIP_VIEWPORT_UPDATE"));
            }
        } else if (bWrite && oEvent.keyCode === jQuery.sap.KeyCodes.DELETE) { // DEL: Delete items in selection after
                                                                                // confirmation
            // check if we are on the wall and not in an input field
            if (this._wallInteractionPossible(oEvent.target)) {
                // show confirmation box
                iSelectedItemCount = (this._getSelection() || []).length;
                fnCallback = function (sAction) {
                    if (sAction === sap.m.MessageBox.Action.OK) {
                        that._deleteSelection();
                    }
                };

                if (iSelectedItemCount) {
                    if (iSelectedItemCount === 1) {
                        sap.m.MessageBox.confirm(this._oRB.getText("WALL_DIALOG_CONFIRM_DELETE_ITEM", [sap.ino.wall.util.Formatter.escapeBindingCharacters(sap.ino.wall.util.Helper.stripTags(this._getSelection()[0].getTitle()))]), fnCallback);
                    } else {
                        sap.m.MessageBox.confirm(this._oRB.getText("WALL_DIALOG_CONFIRM_DELETE_ITEMS_MULTIPLE", [iSelectedItemCount]), fnCallback);
                    }
                } else {
                    var oItem = sap.ui.getCore().getElementById(jQuery(oEvent.target)[0].id);
                    
                    if (oItem) {
                        fnCallback = function (sAction) {
                            if (sAction === sap.m.MessageBox.Action.OK) {
                                that.deleteItems([oItem]);                                
                            }
                        };
                        
                        sap.m.MessageBox.confirm(this._oRB.getText("WALL_DIALOG_CONFIRM_DELETE_ITEM", [sap.ino.wall.util.Formatter.escapeBindingCharacters(sap.ino.wall.util.Helper.stripTags(oItem.getTitle()))]), fnCallback);
                    }
                    else {
                        sap.m.MessageToast.show(this._oRB.getText("WALL_TOOLTIP_DELETE_ONLY_WITH_SELECTION"));
                    }
                }
            }
        }
        else if (oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_DOWN ||
                 oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_UP ||
                 oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_LEFT ||
                 oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_RIGHT ||
                 oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_NUMPAD_2 ||
                 oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_NUMPAD_4 ||
                 oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_NUMPAD_6 ||
                 oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_NUMPAD_8) {
            if (jQuery(oEvent.target).hasClass("sapInoWallSelector")) {
                var iStep = 50;
                if (oEvent.ctrlKey) {
                    iStep = 10;
                }
                
                var $Inner = this.$().children().filter(".sapInoWallWInner");
                var oViewPoint = this.getViewPoint();
                
                switch (oEvent.keyCode) {
                    case jQuery.sap.KeyCodes.ARROW_DOWN:
                    case jQuery.sap.KeyCodes.ARROW_NUMPAD_2:
                        iStep = (oViewPoint.getY() + iStep > 10000) ? 10000 : oViewPoint.getY() + iStep; 
                        oViewPoint.setY(iStep);
                        break;
                    case jQuery.sap.KeyCodes.ARROW_UP:
                    case jQuery.sap.KeyCodes.ARROW_NUMPAD_8:
                        iStep = (oViewPoint.getY() - iStep < 0) ? 0 : oViewPoint.getY() - iStep;
                        oViewPoint.setY(iStep);
                        break;
                    case jQuery.sap.KeyCodes.ARROW_LEFT:
                    case jQuery.sap.KeyCodes.ARROW_NUMPAD_4:
                        iStep = (oViewPoint.getX() - iStep < 0) ? 0 : oViewPoint.getX() - iStep;
                        oViewPoint.setX(iStep);
                        break;
                    case jQuery.sap.KeyCodes.ARROW_RIGHT:
                    case jQuery.sap.KeyCodes.ARROW_NUMPAD_6:
                        iStep = (oViewPoint.getX() + iStep > 10000) ? 10000 : oViewPoint.getX() + iStep;
                        oViewPoint.setX(iStep);
                        break;
                    default:
                        break;
                }
                
                // for ff+ie+sf (use scale instead of zoom) we have to add the distance to the center because scale
                // works
                // diferently
                if (!sap.ino.wall.config.Config.getZoomCapable()) {
                    // formula: subtract half the distance to the middle of the wall
                    // x = x + (5000 - x) * 0.5 * invertedZoom
                    // y = y + (5000 - y) * 0.5 * invertedZoom
                    
                    // x = x + (delta to middle point) * zoomFactor/100 -1
                    // x = x + (5000 - x) * 0.8
                    $Inner.css("margin", "-" + (oViewPoint.getY() + (oViewPoint.getY() - 5000) * ((this.getZoom() / 100) - 1)) + "px 0 0 -" + (oViewPoint.getX() + (oViewPoint.getX() - 5000) * ((this.getZoom() / 100) - 1)) + "px");
                } else {
                    $Inner.css("margin", "-" + oViewPoint.getY() + "px 0 0 -" + oViewPoint.getX() + "px");
                }
            
                this.setViewPoint(oViewPoint);     
                
                oEvent.preventDefault();
                oEvent.stopPropagation();
                oEvent.stopImmediatePropagation();
            }
            // TODO move to WallItemBase
            else if (bWrite && jQuery(oEvent.target).hasClass("sapInoWallWIB")) {
                var oItem = sap.ui.getCore().getElementById(jQuery(oEvent.target)[0].id);
                var iStep = 10;
                
                if (oItem) {
                    oItem.setFocusVisible();
                    
                    oItem.setDepth(this._getNextDepth(oItem.getDepth()));
                    
                    if (oEvent.shiftKey) {
                        if (oEvent.ctrlKey) {
                            iStep = 2;
                        }
                        if (oItem.getResizable()) {
                            switch (oEvent.keyCode) {
                                case jQuery.sap.KeyCodes.ARROW_DOWN:
                                case jQuery.sap.KeyCodes.ARROW_NUMPAD_2:
                                    var iBefore = parseInt(oItem.getH(), 10);
                                    oItem.setH((parseInt(oItem.getH(), 10) || sap.ino.wall.WallConfig._ITEM_MIN_SIZE) - iStep);
                                    var iAfter = parseInt(oItem.getH(), 10);
                                    oItem.setY(parseInt(oItem.getY(), 10) + (iBefore - iAfter) / 2);                                    
                                    break;
                                case jQuery.sap.KeyCodes.ARROW_UP:
                                case jQuery.sap.KeyCodes.ARROW_NUMPAD_8:
                                    var iBefore = parseInt(oItem.getH(), 10);
                                    oItem.setH((parseInt(oItem.getH(), 10) || sap.ino.wall.WallConfig._ITEM_MIN_SIZE) + iStep);
                                    var iAfter = parseInt(oItem.getH(), 10);
                                    oItem.setY(parseInt(oItem.getY(), 10) - (iAfter - iBefore) / 2);  
                                    break;
                                case jQuery.sap.KeyCodes.ARROW_LEFT:
                                case jQuery.sap.KeyCodes.ARROW_NUMPAD_4:
                                    var iBefore = parseInt(oItem.getW(), 10);
                                    oItem.setW((parseInt(oItem.getW(), 10) || sap.ino.wall.WallConfig._ITEM_MIN_SIZE) - iStep);
                                    var iAfter = parseInt(oItem.getW(), 10);
                                    oItem.setX(parseInt(oItem.getX(), 10) + (iBefore - iAfter) / 2);  
                                    break;
                                case jQuery.sap.KeyCodes.ARROW_RIGHT:
                                case jQuery.sap.KeyCodes.ARROW_NUMPAD_6:
                                    var iBefore = parseInt(oItem.getW(), 10);
                                    oItem.setW((parseInt(oItem.getW(), 10) || sap.ino.wall.WallConfig._ITEM_MIN_SIZE) + iStep);
                                    var iAfter = parseInt(oItem.getW(), 10);
                                    oItem.setX(parseInt(oItem.getX(), 10) - (iAfter - iBefore) / 2);  
                                    break;
                                default:
                                    break;
                            }
                            
                            var aChilds = oItem.getChilds() || [];
                            if (aChilds.length) {
                                var $childContainer = oItem.$("childs");
                                oItem._adjustChildContainerPositioning($childContainer);
                            }

                            // call item hook to react on resize changes
                            if (oItem._onResize) {
                                oItem._onResize();
                            }
                        }
                    }
                    else {
                        if (oEvent.ctrlKey) {
                            iStep = 1;
                        }
                        
                        switch (oEvent.keyCode) {
                            case jQuery.sap.KeyCodes.ARROW_DOWN:
                            case jQuery.sap.KeyCodes.ARROW_NUMPAD_2:
                                if (!jQuery(oEvent.target).hasClass("sapInoWallWILineVERTICAL")) {
                                    oItem.setY(parseInt(oItem.getY(), 10) + iStep);
                                }
                                break;
                            case jQuery.sap.KeyCodes.ARROW_UP:
                            case jQuery.sap.KeyCodes.ARROW_NUMPAD_8:
                                if (!jQuery(oEvent.target).hasClass("sapInoWallWILineVERTICAL")) {
                                    oItem.setY(parseInt(oItem.getY(), 10) - iStep);
                                }
                                break;
                            case jQuery.sap.KeyCodes.ARROW_LEFT:
                            case jQuery.sap.KeyCodes.ARROW_NUMPAD_4:
                                if (!jQuery(oEvent.target).hasClass("sapInoWallWILineHORIZONTAL")) {
                                    oItem.setX(parseInt(oItem.getX(), 10) - iStep);
                                }
                                break;
                            case jQuery.sap.KeyCodes.ARROW_RIGHT:
                            case jQuery.sap.KeyCodes.ARROW_NUMPAD_6:
                                if (!jQuery(oEvent.target).hasClass("sapInoWallWILineHORIZONTAL")) {
                                    oItem.setX(parseInt(oItem.getX(), 10) + iStep);
                                }
                                break;
                            default:
                                break;
                        }
                    }
                    
                    this._notifyItemChanged(oItem);
                    
                    oEvent.preventDefault();
                    oEvent.stopPropagation();
                    oEvent.stopImmediatePropagation();
                }
            }            
        }
        // like in PPT Crtl + Shift + G to "group"
        else if (bWrite && oEvent.keyCode === jQuery.sap.KeyCodes.G && oEvent.ctrlKey && oEvent.shiftKey) {
            if (jQuery(oEvent.target).hasClass("sapInoWallWIB")) {
                var oItem = sap.ui.getCore().getElementById(jQuery(oEvent.target)[0].id);
                
                if (oItem && !(oItem instanceof sap.ino.wall.WallItemGroup)) {
                    var bGroupOnly = false;
                    var aChildren = oItem.getChilds();
                    if (aChildren && aChildren.length > 0) {
                        // an item with children can only be added to a group
                        bGroupOnly = true;
                    }
                    
                    var aCollisions = this._calculateAllCollisions(oItem, sap.ino.wall.WallConfig._COLLISION_ALL);
                    if (aCollisions && aCollisions.length > 0 && aCollisions[0].length > 0) {
                        // TODO chose the item w/ the biggest collision
                        var iTop = -1;
                        var oCollisionItem;
                        for (var ii = 0; ii < aCollisions[0].length; ++ii) {
                            if (aCollisions[0][ii].getDepth() > iTop && aCollisions[0][ii].getEnabled()) {
                                if (bGroupOnly && !(aCollisions[0][ii] instanceof sap.ino.wall.WallItemGroup)) {
                                    continue;
                                }
                                iTop = aCollisions[0][ii].getDepth();
                                oCollisionItem = aCollisions[0][ii];
                            }
                        }
                        
                        if (oCollisionItem) {
                            // first remove the item from the wall, as the invalidation of the remove is not propagated
                            // during the addAggregation call
                            this.removeAggregation("items", oItem, true);
                            oCollisionItem.addChildWithoutRendering(oItem);
                            
                            this._notifyItemChanged(oItem);
                            this._notifyItemChanged(oCollisionItem);
                            
                            oEvent.preventDefault();
                            oEvent.stopPropagation();
                            oEvent.stopImmediatePropagation();
                            
                            setTimeout(function() {
                                oCollisionItem.setFocusVisible();
                                oCollisionItem.focus();
                            }, 100);
                        }
                    }
                }
            }
        }
        // like in PPT Crtl + Shift + H to "ungroup"
        else if (bWrite && oEvent.keyCode === jQuery.sap.KeyCodes.H && oEvent.ctrlKey && oEvent.shiftKey) {
            if (jQuery(oEvent.target).hasClass("sapInoWallWIB")) {
                var oItem = sap.ui.getCore().getElementById(jQuery(oEvent.target)[0].id);
                
                if (oItem) {
                    var aChilds = oItem.getChilds();
                    
                    var x = parseInt(oItem.getX(), 10) || 5000;
                    var y = parseInt(oItem.getY(), 10) || 5000;
                    
                    var iOffset = sap.ino.wall.WallConfig._MULTI_OFFSET;
                    
                    if (aChilds && aChilds.length > 0) {
                        for (var ii = 0; ii < aChilds.length; ++ii) {
                            aChilds[ii].setX(x + iOffset);
                            aChilds[ii].setY(y + iOffset);
                            
                            iOffset += sap.ino.wall.WallConfig._MULTI_OFFSET;
                            
                            oItem.removeChildWithoutRendering(aChilds[ii]);
                            that.addItemWithoutRendering(aChilds[ii]);
                            
                            this._notifyItemChanged(aChilds[ii]);
                        }
                        
                        this._notifyItemChanged(oItem);
                        
                        oEvent.preventDefault();
                        oEvent.stopPropagation();
                        oEvent.stopImmediatePropagation();
                    }                    
                }
            }
        }
        else if (oEvent.keyCode === jQuery.sap.KeyCodes.ESCAPE) {
            // only handle ESCAPE on wall => even those within the inner wall
            var $InnerWall = jQuery(oEvent.target).parents(".sapInoWallWInner");
            // ignore ESCAPE accidently bubbling from item
            if ($InnerWall && $InnerWall.length > 0 && jQuery(oEvent.target).parents(".sapInoWallWIB").length === 0) {
                jQuery("#" + this.getId() + "-wall-selector").focus();
                
                oEvent.preventDefault();
                oEvent.stopPropagation();
                oEvent.stopImmediatePropagation();
            }
        }
        else if (oEvent.keyCode === jQuery.sap.KeyCodes.ENTER ||
                 oEvent.keyCode === jQuery.sap.KeyCodes.F2) {
            // only handle ENTER on wall
            var $OuterWall = jQuery(oEvent.target).parents(".sapInoWallWOuter");
            // ignore ENTER acciently bubbling from item
            if ($OuterWall && $OuterWall.length > 0 && jQuery(oEvent.target).parents(".sapInoWallWIB").length === 0) {
                var sTarget = jQuery(oEvent.target)[0].id;
                if (sTarget === this.getId() + "-wall-selector") {
                    // enter the wall
                    
                    var aItems = this.getItemsByPosition(undefined, true);
                    this._aTabItems = aItems.filter(function(oItem) {
                        return oItem.getEnabled();
                    });  
                    
                    if (this._aTabItems && this._aTabItems.length > 0) {
                        this.showItems([this._aTabItems[0]]);
                        this._aTabItems[0].setFocusVisible();
                        this._aTabItems[0].focus();
                        
                        oEvent.preventDefault();
                        oEvent.stopPropagation();
                        oEvent.stopImmediatePropagation();
                    }
                }
            }
        }
        else if (oEvent.keyCode === jQuery.sap.KeyCodes.TAB) {
            // only handle tabs on wall
            var $OuterWall = jQuery(oEvent.target).parents(".sapInoWallWOuter");
            // ignore TAB acciently bubbling from item
            if ($OuterWall && $OuterWall.length > 0 && jQuery(oEvent.target).parents(".sapInoWallWIB").length === 0) {
                var sTarget = jQuery(oEvent.target)[0].id;
                var iTabIndex = -1;
                // leave the wall
                if (sTarget === this.getId() + "-wall-selector") {
                    var aTabbable = jQuery(document).find("[tabindex='0']");
                    if (oEvent.shiftKey) {
                        iTabIndex = aTabbable.index(jQuery("#" + this.getId() + "-wall-selector-begin"));
                        iTabIndex--;
                        if (iTabIndex < 0) {
                            iTabIndex = aTabbable.length - 1;
                        }                        
                    }
                    else {
                        iTabIndex = aTabbable.index(jQuery("#" + this.getId() + "-wall-selector-end"))
                        iTabIndex++;
                        if (iTabIndex >= aTabbable.length) {
                            iTabIndex = 0;
                        }                        
                    }    
                    aTabbable[iTabIndex].focus();                    
                }
                else {
                    // TODO optimze performance
                    var aItems = this.getItemsByPosition(undefined, true);
                    
                    this._aTabItems = aItems.filter(function(oItem) {
                        return oItem.getEnabled();
                    });                
                    
                    if (this._aTabItems && this._aTabItems.length === 1) {
                        this.showItems([this._aTabItems[0]]);
                        this._aTabItems[0].setFocusVisible();
                        this._aTabItems[0].focus();
                    }
                    else if (this._aTabItems && this._aTabItems.length > 1) {
                        var $Focus = jQuery(oEvent.target);
                        var oCurrentFocusControl;
                        if ($Focus) {
                            oCurrentFocusControl = sap.ui.getCore().getElementById($Focus.attr("id"));
                        }
                        
                        var iIndex = this._aTabItems.indexOf(oCurrentFocusControl);                
                        
                        if (!oCurrentFocusControl || iIndex === -1) {
                            this.showItems([this._aTabItems[0]]);
                            this._aTabItems[0].setFocusVisible();
                            this._aTabItems[0].focus();
                        }
                        else {
                            if (oEvent.shiftKey) {
                                iIndex--;
                                if (iIndex === -1) {
                                    iIndex = this._aTabItems.length - 1;
                                }                        
                            }
                            else {
                                iIndex++;
                                if (iIndex >= this._aTabItems.length) {
                                    iIndex = 0;
                                }
                            }
                            
                            this.showItems([this._aTabItems[iIndex]]);
                            this._aTabItems[iIndex].setFocusVisible();
                            this._aTabItems[iIndex].focus();
                        }
                    }
                }
                
                oEvent.preventDefault();
                oEvent.stopPropagation();
                oEvent.stopImmediatePropagation();   
            }
        }
    };
    
    /**
     * Handle the key up event for space detection
     * 
     * @param {jQuery.Event}
     *            oEvent the keyboard event.
     * @private
     */
    sap.ino.wall.Wall.prototype._onkeyup = function (oEvent) {
        var that = this;
        
        if (oEvent.keyCode === 32) {
            this._bSpacePressed = false;
        }
        
        // only handle tabs on wall
        var $OuterWall = jQuery(oEvent.target).parents(".sapInoWallWOuter");
        if ($OuterWall && $OuterWall.length > 0) {
            var sTarget = jQuery(oEvent.target)[0].id;
            // focus the wall
            if ((sTarget === this.getId() + "-wall-selector-end" && oEvent.keyCode === jQuery.sap.KeyCodes.TAB && oEvent.shiftKey) ||
                (sTarget === this.getId() + "-wall-selector-begin" && oEvent.keyCode === jQuery.sap.KeyCodes.TAB)) {
                
                jQuery("#" + that.getId() + "-wall-selector").focus();
                                
                oEvent.preventDefault();
                oEvent.stopPropagation();
                oEvent.stopImmediatePropagation();   
            }
        }
    };
    
    /* =========================================================== */
    /* begin: API methods */
    /* =========================================================== */
    
    sap.ino.wall.Wall.prototype.followCursor = function (oItem, iMode, iOffset) {
        var that = this,
    
        fnMouseMoveHandler = function () {
            var args = Array.prototype.slice.call(arguments);
            args.unshift(iOffset); // put iOffset as second element in the array
            args.unshift(oItem); // put oItem as first element in the array
            that._onmousemoveItemUpdate.apply(that, args);
        };
    
        // we store an internal reference to the item and handler [fn, item, mode(0 = add, 1 = drop, 2 = C+P, 3 =
        // Clone)]
        this._followHandlers.push([fnMouseMoveHandler, oItem, iMode, iOffset]);
    
        jQuery(document).on("touchmove mousemove", fnMouseMoveHandler);
    
        return this;
    };
    
    sap.ino.wall.Wall.prototype.editAll = function (bToggle) {
        var aItems = this.getItems(),
            i = 0;
    
        for (;i < aItems.length; i++) {
            aItems[i].setFlipped(bToggle);
        }
        return this;
    };
    
    /**
     * Adds a wall item
     * 
     * @override
     * @returns {this} this pointer for chaining
     * @private
     */
    sap.ino.wall.Wall.prototype.addItem = function (oItem) {
        this.addAggregation("items", oItem);
        return this;
    };
    
    /**
     * A convenience method that can be used in console and bookmarks to add a new item to a wall
     * 
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.Wall.prototype.addAndSaveItem = function (oItem) {
        this.addAggregation("items", oItem);
        this._notifyItemChanged(oItem);
    };
    
    /**
     * Adds a wall item without rerendering the wall
     * 
     * @override
     * @returns {this} this pointer for chaining
     * @private
     */
    sap.ino.wall.Wall.prototype.addItemWithoutRendering = function (oItem) {
        this.addAggregation("items", oItem, true);
        this._renderItemIntoContainer(oItem, false, true);
        return this;
    };
    
    /**
     * Remove a wall item without rerendering the wall
     * 
     * @override
     * @returns {this} this pointer for chaining
     * @private
     */
    sap.ino.wall.Wall.prototype.removeItemWithoutRendering = function (oItem) {
        this.removeAggregation("items", oItem, true);
        oItem.$().remove();
        return this;
    };
    
    /*
     * Adds a new item to the wall with intial settings (depth, follow cursor) @param {WallItemBase} oItem the item
     * @param {int} iFollowMode the follow mode @param {int} iOffset the offset of the item when multiple items are
     * added at the same time @param {int} bBatch true when multiple items are added so that the automatic offset
     * calculation can be ommited @override @returns {this} this pointer for chaining @public
     */
    sap.ino.wall.Wall.prototype.placeItem = function (oItem, iFollowMode, iOffset, bBatch) {
        if (!iOffset) {
            iOffset = 0;
        }
        
        // add an offset if there are already items positioned at the cursor
        if (iOffset === 0 && !bBatch) {
            iOffset += this._followHandlers.length * sap.ino.wall.WallConfig._MULTI_OFFSET;
        }
                    
        oItem.setDepth(this._getNextDepth());
        this.addItemWithoutRendering(oItem, false);
        this.followCursor(oItem, iFollowMode, iOffset);
        
        // bind the touchend event handler so that the item can be immediately placed
        jQuery(document).on("touchend touchcancel mouseup", this._touchendProxy);
        return this;
    };
    
    sap.ino.wall.Wall.prototype.placeItemInCurrentViewPoint = function (oItem, bFocus, iOffset) {
        var oViewPoint = this.getViewPoint();
        var iItemXOffset = (parseInt(oItem.getW(), 10) || sap.ino.wall.WallConfig._ITEM_MIN_SIZE) / 2;
        var iItemYOffset = (parseInt(oItem.getH(), 10) || sap.ino.wall.WallConfig._ITEM_MIN_SIZE) / 2;

        oItem.setXY(oViewPoint.getX() - iItemXOffset + (iOffset || 0), oViewPoint.getY() - iItemYOffset + (iOffset || 0));

        oItem.setDepth(this._getNextDepth());
        
        this.addItemWithoutRendering(oItem, false);
        
        this._notifyItemChanged(oItem);
        
        this.fireItemAdd({
            item: oItem,
            mode: sap.ino.wall.WallConfig._ADD_MODE_MANUAL
        });
        
        setTimeout(function() {
            oItem.setFocusVisible();
            oItem.focus();
            oItem.setFlipped(true);
        }, 100);
        
        return this;
    };
    
    /*
     * Setter for the zoom property to suppress re-rendering and dynamically update the wall @param {float} fValue input
     * value @override @returns {this} this pointer for chaining @public
     */
    sap.ino.wall.Wall.prototype.setZoom = function (fValue, bSuppressNotify) {
        var $this = this.$("inner"),
            oViewPoint;
    
        if (isNaN(fValue)) {
            sap.ino.wall.util.Logger.error("ZoomFactor could not be calculated");
            return;
        }
        
        // sanitize input
        fValue = Math.min(fValue, 200); // set max to 200%
        fValue = Math.max(fValue, 20); // set min to 20%
        if (sap.ui.Device.system.tablet) {
            fValue = Math.max(fValue, 30);
        }
        fValue = Math.round(fValue) * 1.0;
       
        // set property first
        this.setProperty("zoom", fValue, true);
    
        // then do css transformations
        if (this._isRendered()) {
            if (!bSuppressNotify) {
                this._notifyChanged("zoom");
            }
            if (sap.ui.Device.browser.internet_explorer) { // scale
                $this.css("-ms-transform", "scale(" + (fValue / 100) + ")");
            } else if (sap.ui.Device.browser.firefox) { // scale
                $this.css("-moz-transform", "scale(" + (fValue / 100) + ")");
            } else if (sap.ui.Device.browser.safari) { // scale
                $this.css("-webkit-transform", "scale(" + (fValue / 100) + ")");
            } else { // zoom
                // $this.css("-webkit-transform", "scale(" + (fValue/100) + ")");
                $this.css("zoom", fValue + "%");
            }
        }
    
        // ff+ie+sf scale the whole area so the viewport is shifted
        // we have to re-calculate the margins for the current viewport and scale factor again
        if (!sap.ino.wall.config.Config.getZoomCapable()) {
            oViewPoint = this.getViewPoint();
            $this.css("margin", "-" + (oViewPoint.getY() + (oViewPoint.getY() - 5000) * ((this.getZoom() / 100) - 1)) + "px 0 0 -" + (oViewPoint.getX() + (oViewPoint.getX() - 5000) * ((this.getZoom() / 100) - 1)) + "px");
        }
    
        // finally, fire the event to allow listening controls to update
        this.fireZoomChange({
            zoom: this.getZoom()
        });
    
        sap.ino.wall.util.Logger.info("Zoom factor set to " + this.getZoom());
    
        return this;
    };
    
    /**
     * Setter for the title property to suppress re-rendering and dynamically update the wall
     * 
     * @param {string}
     *            sValue input value
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.Wall.prototype.setTitle = function (sValue, bSuppressNotify) {
        if (this.getTitle() !== sValue) {
            var $Description = this.$("wall-description");
            this.setProperty("title", sValue, true);
            if (this._isRendered()) {
                // $Description.html(this._oRB.getText("CRTL_WALL_DESCRIPTION", [sValue]))
                $Description.text(this._oRB.getText("CRTL_WALL_DESCRIPTION", [sValue]));
                if (!bSuppressNotify) {
                    this._notifyChanged("title");
                }
            }
        }
    };
    
    /**
     * Setter for the background image property to suppress re-rendering and dynamically update the wall
     * 
     * @param {string}
     *            sName name of the background image
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.Wall.prototype.setBackgroundImage = function (sName, bSuppressNotify) {
        var $this = this.$("inner");
    
        if (this.getBackgroundImage() !== sName) {
            this.setProperty("backgroundImage", sName, true);
            this.setProperty("backgroundColor", "", true);
        
            if (this._isRendered()) {
                if (!bSuppressNotify) {
                    this._notifyChanged("backgroundImage");
                    this._notifyChanged("backgroundColor");
                }
                $this.css("background-color", "transparent");
                if (this.getBackgroundImage().indexOf("http://") === 0 || this.getBackgroundImage().indexOf("https://") === 0) {
                    // custom background: tile or center and don't repeat
                    $this.css("background-image", "url(" + this.getBackgroundImage() + ")");
                    if (this.getBackgroundImageTiled()) {
                        $this.css("background-position", "initial");
                        $this.css("background-repeat", "repeat");
                    } else {
                        $this.css("background-position", "50% 50%");
                        $this.css("background-repeat", "no-repeat");
                    }
                } else {
                    // default background: just repeat
                    $this.css("background-image", (sName ? "url(/sap/ino/ngui/sap/ino/assets/img/wall/bg/" + this.getBackgroundImage() + ")" : "none"));
                    $this.css("background-position", "0% 0%");
                    $this.css("background-repeat", "repeat");
                    $this.css("background-size", "auto");
                }
            }
        }
    };
    
    /**
     * Setter for the background image zoom property to suppress re-rendering and dynamically update the wall
     * 
     * @param {string}
     *            fPercentage the zoom value in %
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.Wall.prototype.setBackgroundImageZoom = function (fPercentage, bSuppressNotify) {
        var $this = this.$("inner");
    
        if (this.getBackgroundImageZoom() !== fPercentage) {
            this.setProperty("backgroundImageZoom", fPercentage, true);
        
            if (this._isRendered()) {
                if (!bSuppressNotify) {
                    this._notifyChanged("backgroundImageZoom");
                }
        
                if (this.getBackgroundImage().indexOf("http://") === 0 || this.getBackgroundImage().indexOf("https://") === 0) {
                    $this.css("background-size", fPercentage + "%");
                }
            }
        }
    };    
    
    /**
     * Setter for the background image tiled property to suppress re-rendering and dynamically update the wall
     * 
     * @param {boolean}
     *            bTiled whether the (custom) background image should be displayed tiled or not
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.Wall.prototype.setBackgroundImageTiled = function (bTiled, bSuppressNotify) {
        var $this = this.$("inner");
    
        if (this.getBackgroundImageTiled() !== bTiled) {
            this.setProperty("backgroundImageTiled", bTiled, true);
    
            if (this._isRendered()) {
                if (!bSuppressNotify) {
                    this._notifyChanged("backgroundImageTiled");
                }
    
                // only allow non-tiling for custom images, otherwise tile as default
                if (!this.getBackgroundImageTiled() && (this.getBackgroundImage().indexOf("http://") === 0 || this.getBackgroundImage().indexOf("https://") === 0)) {
                    $this.css("background-position", "50% 50%");
                    $this.css("background-repeat", "no-repeat");
                } else {
                    $this.css("background-position", "initial");
                    $this.css("background-repeat", "repeat");
                }
            }
        }
    };

    
    /**
     * Setter for the background image property to suppress re-rendering and dynamically update the wall
     * 
     * @param {string}
     *            sName name of the background image
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.Wall.prototype.setBackgroundColor = function (sColor, bSuppressNotify) {
        var $this = this.$("inner");
    
        if (this.getBackgroundColor() !== sColor) {
            this.setProperty("backgroundImage", "", true);
            this.setProperty("backgroundColor", sColor, true);
        
            if (this._isRendered()) {
                if (!bSuppressNotify) {
                    this._notifyChanged("backgroundImage");
                    this._notifyChanged("backgroundColor");
                }
                $this.css("background-color", "#"+sColor);
                $this.css("background-image", sap.ino.wall.util.Helper.addBrowserPrefix("linear-gradient(top, " + sap.ino.wall.util.Helper.shadeColor(sColor, 10) + " 0%, " + sap.ino.wall.util.Helper.shadeColor(sColor, -10) + " 100%)"));
        
                // default background: just repeat
                $this.css("background-position", "initial");
                $this.css("background-repeat", "no-repeat");
                $this.css("background-size", "initial");
            }
        }
    };
    
    /**
     * Setter for the storageId property to suppress re-rendering
     * 
     * @param {integer}
     *            iValue the storage id of the wall
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.Wall.prototype.setStorageId = function (iValue) {
        this.setProperty("storageId", iValue, true);
    };
    
    /**
     * Setter for the owner property to suppress re-rendering
     * 
     * @param {string}
     *            sOwner the username of the owner of the wall
     * @override
     * @public
     * @returns {this} this pointer for chaining
     * 
     */
    sap.ino.wall.Wall.prototype.setOwner = function (sValue) {
        this.setProperty("owner", sValue, true);
    };
    
    /**
     * Setter for the title property to suppress re-rendering and dynamically update the wall
     * 
     * @param {string}
     *            sValue input value
     * @override
     * @public
     * @returns {this} this pointer for chaining
     */
    sap.ino.wall.Wall.prototype.setMode = function (sMode) {
        this.setProperty("mode", sMode, true);
        // show the lock symbol when the wall is in readonly mode
        if (this._oLock) {
            this._oLock.toggleStyleClass("sapInoWallInvisible", sMode !== sap.ino.wall.WallMode.Readonly);
        }
    };
    
    /**
     * Returns all wall items by the current position from top left to bottom right To get the optimal order of items
     * the algorithm will categorize all items in horizontal lanes and then sort them by lane in vertical orientation.
     * --------------- | 2 5 | | 1 3 4 | |-- lane end --| | 7 9 | | 6 8 | ----------------
     * 
     * @param {array}
     *            [aItems] an array of wall items (optional)
     * @param {boolean}
     *            bWithLayoutItems if true, layout items like lines will also be included (optional)
     * @public
     * @returns {[WallItemBase]} an array of WallItems ordered by position
     */
    sap.ino.wall.Wall.prototype.getItemsByPosition = function (aItems, bWithLayoutItems) {
        var aClusters,
            aSortedItems = [],
            i = 0;

        // if no arguments have been passe we use the current selection
        if (!aItems) {
            aItems = this._getSelection();
        }
        // if there is no selection we use all items
        if (!aItems) {
            aItems = this.getItems();
        }

        // step 1: calculate clusters
        aClusters = this._calculateItemClusters(aItems);

        // step 2: sort clusters
        aClusters = this._swimLaneSort(aClusters);

        // step 3: sort items in each cluster and add them to the result set
        for (; i < aClusters.length; i++) {
            aSortedItems = aSortedItems.concat(this._swimLaneSort(aClusters[i].items));
        }

        // TODO: what about lines? do they have to be inserted at a logical position or at the end

        return aSortedItems;
    };

    /**
     * Combines the 3 methods to calculate zoom and re-positioning.
     * 
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.Wall.prototype.updateViewport = function () {
        var that = this;
        
        if (this.getItems().length) {
            this._updateBoundingBox();
        }
            
        function _updateViewPort() {
            if (that._boundingBox) {
                that._adoptZoomFactorToBoundingBox();
                that._adoptViewPointToBoundingBox();
            }
        }
        
        // Respect custom background image in bounding box (if not tiled)
        if (this.getBackgroundImage() && (this.getBackgroundImage().indexOf("http://") === 0 || this.getBackgroundImage().indexOf("https://") === 0) && !this.getBackgroundImageTiled()) {
            var aItemBoundingBox = this._calculateBoundingBox();
            var oWallInner = this.$("inner");
            var fWallWidth = oWallInner.width();
            var fWallHeight = oWallInner.height();
            
            var img = new Image();
            img.src = oWallInner.css("background-image").replace(/url\(|\)$|"/ig, '');
            img.onload = function () {
                // Respect background image scale
                var fScale = parseInt(that.getBackgroundImageZoom()) / 100.0;
                var fLeft = fWallWidth * (1-fScale) / 2.0;
                var fTop = fWallHeight * (1-fScale) / 2.0;
                
                // Center with image ratio
                var fRatio = img.width / img.height;
                if (fRatio > 1) {
                    fTop += (fWallHeight * fScale - fWallWidth * fScale / fRatio) / 2.0;
                } else if (fRatio < 1) {
                    fTop -= fWallHeight * fScale - fWallWidth * fScale * fRatio;
                }

                var fRight = fWallWidth - fLeft;  
                var fBottom = fWallHeight - fTop;
                
                // Min, Max with wall items
                if (aItemBoundingBox) {
                    fLeft = Math.min(fLeft, aItemBoundingBox[0].getX());
                    fTop = Math.min(fTop, aItemBoundingBox[0].getY());
                    fRight = Math.max(fRight, aItemBoundingBox[1].getX());
                    fBottom = Math.max(fBottom, aItemBoundingBox[1].getY());
                }
                
                var oUpperLeft = new sap.ino.wall.Pos({ x: fLeft, y: fTop });
                var oLowerRight = new sap.ino.wall.Pos({ x: fRight, y: fBottom });
                that._boundingBox = [oUpperLeft, oLowerRight];
                _updateViewPort();
            };
        } else {
            _updateViewPort();
        }
        return this;
    };

    /**
     * Updates the viewport to show the items passed in
     * 
     * @param {[WallItemBase]}
     *            aItems the items to show
     * @param {boolean}
     *            bAdjustZoom pass true to adjust the zoom as well
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.Wall.prototype.showItems = function (aItems, bAdjustZoom) {
        this._adoptViewPointToBoundingBox(this._calculateBoundingBox(aItems));
        if (bAdjustZoom) {
            this._adoptZoomFactorToBoundingBox();
        }
        return this;
    };

    /**
     * Returns the average height of the items passed in as parameters
     * 
     * @param {mixed}
     *            aItems an array of wall items or an array of cluster objects {id, boundingBox, items} to calulate the
     *            order for
     * @private
     * @returns {float} the average height of the items
     */
    sap.ino.wall.Wall.prototype._calculateAverageItemHeight = function (aItems) {
        var i = 0,
            fHeight,
            $item,
            iItemCount = 0,
            fHeightSum = 0.0;

        for (; i < aItems.length; i++) {
            // an item
            if (aItems[i] instanceof sap.ino.wall.WallItemBase) {
                // lines are spanning across the whole area so we skip them
                if (aItems[i] instanceof sap.ino.wall.WallItemLine) {
                    continue;
                }

                $item = aItems[i].$();
                if ($item.length) {
                    fHeight = $item.find(".front").outerHeight();
                } else {
                    fHeight = aItems[i].getH();
                    if (fHeight) {
                        fHeight = parseInt(fHeight, 10);
                    }
                    if (!fHeight) {
                        fHeight = 160;
                    }
                }
            } else {
                // a cluster
                fHeight = aItems[i].boundingBox[1].getY() - aItems[i].boundingBox[0].getY();
            }
            fHeightSum += fHeight;
            iItemCount ++;
        }

        return fHeightSum / iItemCount;
    };

    /**
     * Returns all wall items by the current position from top left to bottom right To get the optimal order of items
     * the algorithm will categorize all items in horizontal lanes and then sort them by lane in vertical orientation.
     * --------------- | 2 5 | | 1 3 4 | |-- lane end --| | 7 9 | | 6 8 | ----------------
     * 
     * @param {mixed}
     *            aItems an array of wall items or an array of cluster objects {id, boundingBox, items} to calulate the
     *            order for
     * @param {boolean}
     *            bWithLayoutItems if true, layout items like lines will also be included (optional)
     * @public
     * @returns {[WallItemBase]} an array of WallItems ordered by position
     */
    sap.ino.wall.Wall.prototype._swimLaneSort = function (aItems, bWithLayoutItems) {
        var fBeginLaneCount = 0,
            fBeginLaneY,
            aLaneItems,
            aResults = [],
            fCurrentItemY,
            iLaneThreshold = this._calculateAverageItemHeight(aItems), // px
            i = 0;

        // sort items by y coordinate ascending (use top left corner)
        aItems = aItems.sort(function (a, b) {
            var y1, y2;

            if (a instanceof sap.ino.wall.WallItemBase) {
                y1 = parseInt(a.getY(), 10);
            } else {
                y1 = a.boundingBox[0].getY();
            }
            if (b instanceof sap.ino.wall.WallItemBase) {
                y2 = parseInt(b.getY(), 10);
            } else {
                y2 = b.boundingBox[0].getY();
            }
            return y1 - y2;
        });

        // process items in horizontal lanes
        while (fBeginLaneCount < aItems.length) {
            if (aItems[fBeginLaneCount] instanceof sap.ino.wall.WallItemBase) {
                fBeginLaneY = parseInt(aItems[fBeginLaneCount].getY(), 10);
            } else {
                fBeginLaneY = parseInt(aItems[fBeginLaneCount].boundingBox[0].getY(), 10);
            }
            aLaneItems = [];

            // collect items for current lane
            for (i = fBeginLaneCount; i < aItems.length; i++) {
                // update current position counter
                fBeginLaneCount = i;
    
                // skip layout items (lines)
                if (!bWithLayoutItems) {
                    if (aItems[i] instanceof sap.ino.wall.WallItemLine) {
                        // skip this item
                        fBeginLaneCount++;
                        continue;
                    }
                }

                // calculate top left y value of the item
                if (aItems[i] instanceof sap.ino.wall.WallItemBase) {
                    fCurrentItemY = parseInt(aItems[i].getY(), 10);
                } else {
                    fCurrentItemY = parseInt(aItems[i].boundingBox[0].getY(), 10);
                }
                
                // bugfix for invalid items (skip them)
                if (isNaN(fCurrentItemY)) {
                    fBeginLaneCount++;
                    break;
                }

                // add all items to current lane until threshold is reached
                if (fCurrentItemY < fBeginLaneY + iLaneThreshold) {
                    // add this item to the current lane
                    fBeginLaneCount++;
                    aLaneItems.push(aItems[i]);
                } else {
                    // start a new lane with current item
                    break;
                }
            }
    
            // sort all current lane items by x value
            aLaneItems = aLaneItems.sort(function (a, b) {
                var x1, x2;

                if (a instanceof sap.ino.wall.WallItemBase) {
                    x1 = parseInt(a.getX(), 10);
                } else {
                    x1 = a.boundingBox[0].getX();
                }
                if (b instanceof sap.ino.wall.WallItemBase) {
                    x2 = parseInt(b.getX(), 10);
                } else {
                    x2 = b.boundingBox[0].getX();
                }
                return x1 - x2;
            });

            // add lane items to result set
            aResults = aResults.concat(aLaneItems);
        }

        return aResults;
    };    
    
    /**
     * Enables/Disables all wall items
     * 
     * @param {boolean}
     *            bEnable if set to true, all items will be enabled, otherwise disabled
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.Wall.prototype.toggleEnableItems = function (bEnable) {
        var aItems = this.getItems(),
            i = 0;
    
        for (; i < aItems.length; i++) {
            aItems[i].setEnabled(bEnable);
        }
    };
    
    sap.ino.wall.Wall.prototype._getSelection = function () {
        return this._aSelectedItems;
    };
    
    /**
     * Toggle the selection of the items
     * 
     * @param {any}
     *            [aItems]|aItem the items or a single ot be selected
     * @param {WallItemBase}
     *            bSelected if set to true, all items will be selected, if false unselected, if left out selection will
     *            be inverted (PowerPoint like selection)
     * @param {boolean}
     *            bEnable if set to true, all items will be enabled, otherwise disabled
     * @returns {this} this pointer for chaining
     * @private
     */
    sap.ino.wall.Wall.prototype._toggleSelection = function (aItems, bSelected) {
        var i = 0;
    
        if (!aItems) {
            return;
        }
    
        // to allow also single values
        if (!(aItems instanceof Array)) {
            aItems = [aItems];
        }
    
        for (; i < aItems.length; i++) {
            if (bSelected === true) {
                aItems[i].setSelected(true);
            } else if (bSelected === false) {
                aItems[i].setSelected(false);
            } else {
                aItems[i].setSelected(!aItems[i].getSelected());
            }
        }
    
        // now calculate new selection
        this._aSelectedItems = [];
        aItems = this.getItems();
        for (i = 0; i < aItems.length; i++) {
            if (aItems[i].getSelected()) {
                this._aSelectedItems.push(aItems[i]);
            }
        }
        // this._aSelectedItems = (this._aSelectedItems ?
        // sap.ino.wall.util.Helper.arrayUnique(this._aSelectedItems.concat(aItems)) : aItems);
    
        return this;
    };
    
    /**
     * Selects all items on the wall
     * 
     * @param {WallItemBase}
     *            [aItems] the items ot be selected
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.Wall.prototype._selectAll = function () {
        var aItems = this.getItems(),
            i = 0;
    
        this._aSelectedItems = [];
    
        for (; i < aItems.length; i++) {
            if (aItems[i] instanceof sap.ino.wall.WallItemLine) {
                continue; // skip lines
            }
            this._aSelectedItems.push(aItems[i]);
            aItems[i].setSelected(true);
        }
    
        return this;
    };
    
    /**
     * Clears all selected items on the wall
     * 
     * @returns {this} this pointer for chaining
     * @private
     */
    sap.ino.wall.Wall.prototype._clearSelection = function () {
        var aItems = this.getItems(),
            i = 0;
    
        for (; i < aItems.length; i++) {
            aItems[i].setSelected(false);
        }
        this._aSelectedItems = null;
    
        return this;
    };
    
    /**
     * Deletes all selected items on the wall
     * 
     * @returns {this} this pointer for chaining
     * @private
     */
    sap.ino.wall.Wall.prototype._deleteSelection = function () {
        var aSelectionItems = this._getSelection() || [];
        this.deleteItems(aSelectionItems)
        this._aSelectedItems = null;
    
        return this;
    };
    
    sap.ino.wall.Wall.prototype.deleteItems = function (aItems) {
        var that = this;
        
        var aRemoveItems = [];
        function removeItems(aItems) {
            for (var i = 0; i < aItems.length; i++) {
                var oItem = aItems[i];
                aRemoveItems.push(oItem);
                removeItems(oItem.getChilds() || []);
                that.clearPendingItemChange(oItem, true);
                that.removeItemWithoutRendering(oItem);
            }    
        }
        
        removeItems(aItems);
        // fire delete event
        this.fireItemDelete({
            items: aRemoveItems
        });
        
        return this;
    };
    
    
    /**
     * Creates a minimalic JSON representation of the wall to be stored in the db
     * 
     * @param {boolean}
     *            sColor color identifier
     * @override
     * @returns {this} this pointer for chaining
     * @public
     */
    sap.ino.wall.Wall.prototype.formatToJSON = function (bWithItems) {
        var aItems = this.getItems(),
            oResult = {
                "title": this.getTitle(),
                "id": this.getId(),
                // "type": this.getType(), should not be changed by frontend
                "backgroundColor" : this.getBackgroundColor(),
                "backgroundImage" : this.getBackgroundImage(),
                "backgroundImageZoom" : this.getBackgroundImageZoom(),
                "backgroundImageTiled" : this.getBackgroundImageTiled(),
                "storageId" : this.getStorageId()
            },
            i = 0;
    
        if (bWithItems) {
            oResult.items = [];
            // add JSON for each item
            for (; i < aItems.length; i++) {
                oResult.items.push(aItems[i].formatToJSON());
            }
        }
    
        return oResult;
    };
    
    /* =========================================================== */
    /* begin: internal methods and properties */
    /* =========================================================== */
    
    sap.ino.wall.Wall.prototype._onmousemoveItemUpdate = function (oItem, iCustomItemOffset, oEvent) {
        var oOffset = this.$("inner").offset(),
            fZoomModifier = 100 / this.getZoom(),
            iItemOffset = iCustomItemOffset || 0;
    
        // FIX: some chrome installations do fail here
        if (!this.$().length) {
            sap.ino.wall.util.Logger.warning('_onmousemoveItemUpdate failed, wall is not rendered');
            return;
        }
        
        if (!sap.ino.wall.config.Config.getZoomCapable()) { // scale
            oItem.setXY(((sap.ino.wall.util.Helper.getEventX(oEvent) + Math.abs(oOffset.left)) * fZoomModifier + iItemOffset) + "px", ((sap.ino.wall.util.Helper.getEventY(oEvent) + Math.abs(oOffset.top)) * fZoomModifier + iItemOffset) + "px");
        } else { // zoom
            oItem.setXY((sap.ino.wall.util.Helper.getEventX(oEvent) * fZoomModifier - oOffset.left + iItemOffset) + "px", (sap.ino.wall.util.Helper.getEventY(oEvent) * fZoomModifier - oOffset.top + iItemOffset + 5) + "px");
        }
    
        // TODO: these checks are done twice (in wallItemBase touchMove and here): put them somewhere else
        // special case line: can only be moved in one direction, other direction swaps orientation
        if (oItem instanceof sap.ino.wall.WallItemLine) {
            if (oItem.getOrientation() === "HORIZONTAL") {
                oItem.setX("0px");
            } else if (oItem.getOrientation() === "VERTICAL") {
                oItem.setY("0px");
            }
        }
    };

    /**
     * Updates the bounding box for all wall items and shows debug information It is used for dynamically calculating
     * the zoom factor and re-positioning the wall.
     * 
     * @returns {sap.ino.wall.Wall} this pointer for chaining
     * @private
     */
    sap.ino.wall.Wall.prototype._updateBoundingBox = function () {
        var aBoundingBox = this._calculateBoundingBox(),
            aClusters,
            $boundingBox,
            $clusterContainer,
            $clusterBox,
            i = 0;

        if (aBoundingBox) {
            this._boundingBox = aBoundingBox;

            // debug: show and log the bounding box
            if (sap.ino.wall.config.Config.getDebugPositioning()) {
                // show bounding box
                sap.ino.wall.util.Logger.info("new bounding box: ul (" + aBoundingBox[0].getX() + "px/" + aBoundingBox[0].getY() + "px), lr (" + aBoundingBox[1].getX() + "px/" + aBoundingBox[1].getY() + "px)");
                $boundingBox = jQuery.sap.byId(this.getId() + "-boundingBox");
                $boundingBox.css("display", "block");
                $boundingBox.css("left", Math.floor(aBoundingBox[0].getX())).css("top", Math.floor(aBoundingBox[0].getY()));
                $boundingBox.width(Math.floor(aBoundingBox[1].getX() - aBoundingBox[0].getX()));
                $boundingBox.height(Math.floor(aBoundingBox[1].getY() - aBoundingBox[0].getY()));
                $boundingBox.text("ul (" + aBoundingBox[0].getX() + "px/" + aBoundingBox[0].getY() + "px), lr (" + aBoundingBox[1].getX() + "px/" + aBoundingBox[1].getY() + "px)");

                // calculate clusters for debug output
                aClusters = this._calculateItemClusters(this.getItems());

                // show cluster as debug output
                sap.ino.wall.util.Logger.info("new cluster calculation: " + aClusters.length + " clusters identified");
                $clusterContainer = jQuery.sap.byId(this.getId() + "-clusterBox");
                $clusterContainer.css("display", "block");
                $clusterContainer.empty();

                for (; i < aClusters.length; i++) {
                    aBoundingBox = aClusters[i].boundingBox;
                    $clusterBox = jQuery('<div id="' + this.getId() + '"-clusterBox" class="saUiWallWCB"></div>');
                    $clusterBox.css("left", Math.floor(aBoundingBox[0].getX())).css("top", Math.floor(aBoundingBox[0].getY()));
                    $clusterBox.width(Math.floor(aBoundingBox[1].getX() - aBoundingBox[0].getX()));
                    $clusterBox.height(Math.floor(aBoundingBox[1].getY() - aBoundingBox[0].getY()));
                    $clusterBox.text("cluster " + i + ": ul (" + aBoundingBox[0].getX() + "px/" + aBoundingBox[0].getY() + "px), lr (" + aBoundingBox[1].getX() + "px/" + aBoundingBox[1].getY() + "px)");
                    $clusterContainer.append($clusterBox);
                }
            }
        }
        return this;
    };

    /**
     * A simple algorithm to calculate the bounding box of any wall items
     * 
     * @parameter {WallItemBase} aItems an array of wall items for which the bounding box should be calculated
     * @returns {array} the coordinates of the bounding box as two sap.ino.wall.Pos objects
     * @private
     */
    sap.ino.wall.Wall.prototype._calculateBoundingBox = function (aItems) {
        var i = 0,
            oUpperLeft = null,
            oLowerRight = null,
            $item,
            pos,
            fOuterWidth,
            fOuterHeight,
            firstItem = true;

        // call without arguments: take all items
        if (!aItems) {
            aItems = this.getItems();
        }

        for (; i < aItems.length; i++) {
            // lines are spanning across the whole area so we skip them
            if (aItems[i] instanceof sap.ino.wall.WallItemLine) {
                continue;
            }

            $item = aItems[i].$();
            if ($item.length) {
                // for wall re-calculations we use the actual dom value calculated by the browser
                fOuterWidth = $item.find(".front").outerWidth();
                fOuterHeight = $item.find(".front").outerHeight();
            } else {
                // try using the stored height of the items
                fOuterWidth = aItems[i].getW();
                fOuterHeight = aItems[i].getH();
                if (fOuterWidth) {
                    fOuterWidth = parseInt(fOuterWidth, 10);
                }
                if (fOuterHeight) {
                    fOuterHeight = parseInt(fOuterHeight, 10);
                }
    
                // fallback (default w/h)
                if (!fOuterWidth) {
                    fOuterWidth = 160;
                }
                if (!fOuterHeight) {
                    fOuterHeight = 160;
                }
            }
            // TODO: for preview the wall is not rendered, calc based on estimations
            pos = {
                left: parseFloat(aItems[i].getX(), 10),
                top: parseFloat(aItems[i].getY(), 10)
            };
            if (!(aItems[i].getParent() instanceof sap.ino.wall.WallItemGroup) && (pos.left <= 0 || pos.top <= 0)) {
                // when item is added by addItem it gets (0/0) position by default
                // faulty negative values prohibit the wall to be scrolled, we ignore them
                // group items are ok though, they can be at position 0/0 and even at negative values because they are
                // placed relatively to the group
                continue; 
            }
            if (pos.left === "" || pos.top === "" || isNaN(pos.left) || isNaN(pos.top)) {
                continue; // ignore items with faulty values
            }

            if (firstItem) {
                // init with first items coordinates
                oUpperLeft = new sap.ino.wall.Pos({ x: pos.left, y: pos.top});
                oLowerRight = new sap.ino.wall.Pos({ x: pos.left + fOuterWidth, y: pos.top + fOuterHeight});
                firstItem = false;
            } else {
                // check ul and x
                if (pos.left < oUpperLeft.getX()) {
                    oUpperLeft.setX(pos.left);
                } 
                // check ul and y
                if (pos.top < oUpperLeft.getY()) {
                    oUpperLeft.setY(pos.top);
                } 
                
                // check lr and x
                if ((pos.left + fOuterWidth) > oLowerRight.getX()) {
                    oLowerRight.setX(pos.left + fOuterWidth);
                }
                // check lr and y
                if ((pos.top + fOuterHeight) > oLowerRight.getY()) {
                    oLowerRight.setY(pos.top + fOuterHeight);
                }
            }
        }

        if (!oUpperLeft) {
            // we only have items that do not affect the bounding box
            return;
        }

        // TODO: the pos coordinates are not destroyed and initialized
        oUpperLeft.floorify();
        oLowerRight.floorify();
        return [oUpperLeft, oLowerRight];
    };

    /**
     * Calculates the zoom factor that matches best to the current bounding box.
     * 
     * @returns {this} this pointer for chaining
     * @private
     */
    sap.ino.wall.Wall.prototype._adoptZoomFactorToBoundingBox = function () {
        var that = this,
            iWallWidth = this.getParent().$().width(),
            iWallHeight = $(document).height() - this.getHeaderHeight() - this.getFooterHeight(),
            oUpperLeft = this._boundingBox[0],
            oLowerRight = this._boundingBox[1],
            iDeltaX,
            iDeltaY,
            fZoomX,
            fZoomY,
            fZoomFactor;

        // add some margin to the bounding box to have a small distance between the items and page
        iDeltaX = (oLowerRight.getX() - oUpperLeft.getX());
        iDeltaY = (oLowerRight.getY() - oUpperLeft.getY());
        fZoomX = iWallWidth / iDeltaX;
        fZoomY = iWallHeight / iDeltaY;

        fZoomFactor = Math.min(fZoomX, fZoomY) * 100.0;
        fZoomFactor = Math.min(fZoomFactor, 180); // set max to 180%
        // fZoomFactor = Math.max(fZoomFactor, 50); // set min to 50 (not needed anymore)
        that.setZoom(Math.floor(fZoomFactor));

        return this;
    };

    /**
     * Calculates the view point that matches best to the current bounding box.
     * 
     * @returns {this} this pointer for chaining
     * @private
     */
    sap.ino.wall.Wall.prototype._adoptViewPointToBoundingBox = function (aBoundingBox) {
        var aBoundingBox = aBoundingBox || this._boundingBox,
            $this = this.$("inner"),
            oViewPoint = this.getViewPoint(),
            iWallWidth = this.getParent().$().width(),
            iWallHeight = jQuery(document).height() - this.getHeaderHeight() - this.getFooterHeight(),
            oUpperLeft = aBoundingBox[0],
            oLowerRight = aBoundingBox[1],
            deltaX,
            deltaY,
            zoomFactor = this.getZoom() / 100;
    
        // formula: pageSize - zoom(WallSize)
        deltaX = iWallWidth - (oLowerRight.getX() - oUpperLeft.getX()) * zoomFactor; // TODO
        deltaY = iWallHeight - (oLowerRight.getY() - oUpperLeft.getY()) * zoomFactor; // TODO
    
        // always show a small margin when the wall is larger than screen (delta is < 0)
        deltaX = Math.max(deltaX, 32); // 2rem
        deltaY = Math.max(deltaY, 32); // 2rem
    
        // formula: upperLeft + invertZoom(windowSize - deltaSize) / 2
        oViewPoint.setX(oUpperLeft.getX() + (iWallWidth - deltaX) * 1 / (zoomFactor * 2));
        oViewPoint.setY(oUpperLeft.getY() + (iWallHeight - deltaY) * 1 / (zoomFactor * 2));
    
        // for ff+ie+sf (use scale instead of zoom) we have to add the distance to the center because scale works
        // diferently
        if (!sap.ino.wall.config.Config.getZoomCapable()) {
            // formula: subtract half the distance to the middle of the wall
            // x = x + (5000 - x) * 0.5 * invertedZoom
            // y = y + (5000 - y) * 0.5 * invertedZoom
            
            // x = x + (delta to middle point) * zoomFactor/100 -1
            // x = x + (5000 - x) * 0.8
            $this.css("margin", "-" + (oViewPoint.getY() + (oViewPoint.getY() - 5000) * ((this.getZoom() / 100) - 1)) + "px 0 0 -" + (oViewPoint.getX() + (oViewPoint.getX() - 5000) * ((this.getZoom() / 100) - 1)) + "px");
        } else {
            $this.css("margin", "-" + oViewPoint.getY() + "px 0 0 -" + oViewPoint.getX() + "px");
        }
    
        this.setViewPoint(oViewPoint);
    
        return this;
    };
    
    sap.ino.wall.Wall.prototype._calculateAndTriggerSelection = function (fLeft, fTop, fWidth, fHeight) {
        var oOffset = this.$("inner").offset(),
            fZoomModifier = 100 / this.getZoom();

        // calculated wall coordinates from screen coordinates
        // TODO: header offset is static
        var fTopOffset = this.$("inner").parent().offset().top;
        if (!sap.ino.wall.config.Config.getZoomCapable()) {
            fLeft = (fLeft + Math.abs(oOffset.left)) * fZoomModifier;
            fTop = (fTop + Math.abs(oOffset.top)) * fZoomModifier + fTopOffset * fZoomModifier;
            fWidth = fWidth * fZoomModifier;
            fHeight = fHeight * fZoomModifier;
        } else { // zoom
            fLeft = fLeft * fZoomModifier - oOffset.left;
            fTop = fTop * fZoomModifier - oOffset.top + fTopOffset * fZoomModifier;
            fWidth = fWidth * fZoomModifier;
            fHeight = fHeight * fZoomModifier;
        }

        // calculate collisions with selection box and select the items
        this._toggleSelection(this._calculateAllCollisions([fLeft, fTop, fWidth, fHeight], sap.ino.wall.WallConfig._COLLISION_INTERSECTIONS)[0]);
    };
    
    /**
     * Convenience function to calculate the collissions for all wall items. Calls _calculateCollisions with all wall
     * items
     * 
     * @param {mixed}
     *            oItem a WallItemBase or an array of ["left", "top", "width", height"]
     * @param {int}
     *            iMode sap.ino.wall.WallConfig._COLLISION_ALL || sap.ino.wall.WallConfig._COLLISION_NEIGHBOURS ||
     *            sap.ino.wall.WallConfig._COLLISION_INTERSECTES
     * @param {WallItemBase}
     *            oSkipItem an optional item that is skipped automatically
     * @returns {mixed} two arrays with the inner and outer collisions of this item
     * @protected
     */
    sap.ino.wall.Wall.prototype._calculateAllCollisions = function (oItem, iMode, oSkipItem) {
        var aItems = this.getItems();
    
        return this._calculateCollisions(aItems, oItem, iMode, oSkipItem);
    };
    
    /**
     * Calculates the inner and outer collisions with other items on the wall.
     * 
     * @param {mixed}
     *            aItems an array of wall items or an array of ["left", "top", "width", height"] to calulate the
     *            collisions for
     * @param {mixed}
     *            oItem a WallItemBase or an array of ["left", "top", "width", height"]
     * @param {int}
     *            iMode sap.ino.wall.WallConfig._COLLISION_ALL || sap.ino.wall.WallConfig._COLLISION_NEIGHBOURS ||
     *            sap.ino.wall.WallConfig._COLLISION_INTERSECTIONS
     * @param {WallItemBase}
     *            oSkipItem an optional item that is skipped automatically
     * @param {int}
     *            iCustomTheshold a custom threshold in px for calculating the neighborhood
     * @returns {mixed} two arrays with the inner and outer collisions of this item
     * @protected
     */
    sap.ino.wall.Wall.prototype._calculateCollisions = function (aItems, oItem, iMode, oSkipItem, iCustomThreshold) {
        var aCollisions = [],
            aNeighbours = [],
            i = 0,
            iThreshold = iCustomThreshold || sap.ino.wall.config.Config.getWallCollisionThreshold(),
            $item = null,
            oItemUL,
            oItemLR,
            oCollisionItem,
            $collisionItem,
            oCollisionUL,
            oCollisionLR,
            fOuterWidth,
            fOuterHeight,
            temp;

        // TODO: optimize this so that only the items currently visible are checked

        // skip line
        if (oItem instanceof sap.ino.wall.WallItemLine) {
            return [aCollisions, aNeighbours];
        }

        if (aItems.length) {
            // TODO: are these pos objects ever destroyed???!?!!?
            if (oItem instanceof sap.ino.wall.WallItemBase) {
                $item = oItem.$();
    
                // init check item outer coordinates once
                if ($item.length) {
                    fOuterWidth = $item.find(".front").outerWidth();
                    fOuterHeight = $item.find(".front").outerHeight();
                    oItemUL = new sap.ino.wall.Pos({x: parseInt($item.css("left"), 10), y: parseInt($item.css("top"), 10)});
                    oItemLR = new sap.ino.wall.Pos({x: oItemUL.getX() + fOuterWidth, y: oItemUL.getY() + fOuterHeight});
                } else {
                    fOuterWidth = 160;
                    fOuterHeight = 160;
                    oItemUL = new sap.ino.wall.Pos({x: parseInt(oItem.getX(), 10), y: parseInt(oItem.getY(), 10)});
                    oItemLR = new sap.ino.wall.Pos({x: oItemUL.getX() + fOuterWidth, y: oItemUL.getY() + fOuterHeight});
                }
            } else {
                oItemUL = new sap.ino.wall.Pos({x: oItem[0], y: oItem[1]});
                oItemLR = new sap.ino.wall.Pos({x: oItem[0] + oItem[2], y: oItem[1] + oItem[3]});
            }
    
            // reset debug colors
            if (sap.ino.wall.config.Config.getDebugPositioning() && oItem instanceof sap.ino.wall.WallItemBase && !iCustomThreshold) { 
                if ($item) {
                    $item.find(".sapInoWallWIBIntersectionBox").css("background-color", "");
                    $item.find(".sapInoWallWIBNeighbourBox").css("background-color", "");
                }
    
                for (; i < aItems.length; i++) {
                    aItems[i].$().find(".sapInoWallWIBIntersectionBox").css("background-color", "");
                    aItems[i].$().find(".sapInoWallWIBNeighbourBox").css("background-color", "");
                }
            }

            for (i = 0; i < aItems.length; i++) {
                oCollisionItem = aItems[i];

                // skip self
                if (oCollisionItem === oItem || oCollisionItem === oSkipItem) {
                    continue;
                }

                // skip lines
                if (oCollisionItem instanceof sap.ino.wall.WallItemLine) {
                    continue;
                }

                // skip arrows
                if (oCollisionItem instanceof sap.ino.wall.WallItemArrow) {
                    continue;
                }
                
                if (oCollisionItem instanceof sap.ino.wall.WallItemBase) {
                    $collisionItem = oCollisionItem.$();
                    if ($collisionItem.length) {
                        fOuterWidth = $collisionItem.find(".front").outerWidth();
                        fOuterHeight = $collisionItem.find(".front").outerHeight();
                        oCollisionUL = new sap.ino.wall.Pos({x: parseInt($collisionItem.css("left"), 10), y: parseInt($collisionItem.css("top"), 10)});
                        oCollisionLR = new sap.ino.wall.Pos({x: oCollisionUL.getX() + fOuterWidth, y: oCollisionUL.getY() + fOuterHeight});
                        // if anything goes wrong during the conversion we skip this collision item
                        if (isNaN(oCollisionUL.getX()) || isNaN(oCollisionUL.getY()) || isNaN(oCollisionLR.getX()) || isNaN(oCollisionLR.getY())) {
                            continue;
                        }
                    } else {
                        fOuterWidth = 160; // TODO: make this more flexible
                        fOuterHeight = 160; // TODO: make this more flexible
                        oCollisionUL = new sap.ino.wall.Pos({x: parseInt(oCollisionItem.getX(), 10), y: parseInt(oCollisionItem.getY(), 10)});
                        oCollisionLR = new sap.ino.wall.Pos({x: oCollisionUL.getX() + fOuterWidth, y: oCollisionUL.getY() + fOuterHeight});
                    }
        
                    if (oCollisionUL.getX() === 0 && oCollisionUL.getY() === 0) {
                        continue; // when item is added by addItem it gets (0/0) position by default
                    }
                } else {
                    oCollisionUL = new sap.ino.wall.Pos({x: oCollisionItem[0], y: oCollisionItem[1]});
                    oCollisionLR = new sap.ino.wall.Pos({x: oCollisionItem[0] + oCollisionItem[2], y: oCollisionItem[1] + oCollisionItem[3]});
                }
    
                // TODO: performance optimize this
                // basic 2d collision detection logic: NOT ((Rect1.Bottom < Rect2.Top) OR (Rect1.Top > Rect2.Bottom)
                // OR (Rect1.Left > Rect2.Right) OR (Rect1.Right < Rect2.Left) )
                if ((iMode === sap.ino.wall.WallConfig._COLLISION_ALL || iMode === sap.ino.wall.WallConfig._COLLISION_INTERSECTIONS) &&
                    !(
                        (oItemLR.getY() < oCollisionUL.getY()) ||
                        (oItemUL.getY() > oCollisionLR.getY()) ||
                        (oItemUL.getX() > oCollisionLR.getX()) ||
                        (oItemLR.getX() < oCollisionUL.getX())
                    )) {
                    // these objects collide, add either the object or the index of the boundingBox
                    if (oCollisionItem instanceof sap.ino.wall.WallItemBase) {
                        aCollisions.push(aItems[i]);
                    } else {
                        aCollisions.push(oCollisionItem[4]); // the id of the boundingBox / cluster
                    }
                    if (sap.ino.wall.config.Config.getDebugPositioning() && !iCustomThreshold) {
                        sap.ino.wall.util.Logger.info("Item \"" + oItem + "\" collides with item \"" + aItems[i] + "\"");
                        if (oItem instanceof sap.ino.wall.WallItemBase) {
                            oItem.$().find(".sapInoWallWIBIntersectionBox").css("background-color", "rgba(255,0,0,0.6)");
                        }
                        if (oCollisionItem instanceof sap.ino.wall.WallItemBase) {
                            aItems[i].$().find(".sapInoWallWIBIntersectionBox").css("background-color", "rgba(255,0,0,0.6)");
                        }
                    }
                } else if ((iMode === sap.ino.wall.WallConfig._COLLISION_ALL || iMode === sap.ino.wall.WallConfig._COLLISION_NEIGHBOURS) &&
                    !(
                        (oItemLR.getY() + iThreshold < oCollisionUL.getY() - iThreshold) ||
                        (oItemUL.getY() - iThreshold > oCollisionLR.getY() + iThreshold) ||
                        (oItemUL.getX() - iThreshold > oCollisionLR.getX() + iThreshold) ||
                        (oItemLR.getX() + iThreshold < oCollisionUL.getX() - iThreshold)
                    )) {

                    // these objects are neighbours, add either the object or the index of the boundingBox
                    if (oCollisionItem instanceof sap.ino.wall.WallItemBase) {
                        aNeighbours.push(aItems[i]);
                    } else {
                        aNeighbours.push(oCollisionItem[4]); // the id of the boundingBox / cluster
                    }
                    if (sap.ino.wall.config.Config.getDebugPositioning() && !iCustomThreshold) {
                        sap.ino.wall.util.Logger.info("Item \"" + oItem + "\" is neighbour of item \"" + aItems[i] + "\"");
                        if (oItem instanceof sap.ino.wall.WallItemBase) {
                            oItem.$().find(".sapInoWallWIBNeighbourBox").css("background-color", "rgba(255,125,0,0.6)");
                        }
                        if (oCollisionItem instanceof sap.ino.wall.WallItemBase) {
                            aItems[i].$().find(".sapInoWallWIBNeighbourBox").css("background-color", "rgba(255,125,0,0.6)");
                        }
                    }
                }
            }
        }
    
        // return both arrays to the caller
        return [aCollisions, aNeighbours];
    };
    
    /**
     * A flexible algorithm to cluster wall items (using our internal collision detection and bounding box algorithms)
     * It is used for managing the tab chain, the item export order, and the search focus
     * 
     * @returns {this} this pointer for chaining
     * @private
     */
    sap.ino.wall.Wall.prototype._calculateItemClusters = function (aItems) {
        // shared
        var aClusters = [],
            i = 0,
            j,
            aCollisions,
            aCollisionIds,
            // step 1
            aClusterBoundingBox,
            // step 2
            bMergedClusters = false,
            aAllOtherClusters,
            aAllOtherClusterBoxes,
            aClustersToMerge,
            aClustersToMergeIds,
            oNewCluster,
            iSafetyCheck = 0;
    
        // step 1: transform all items into clusters
        while (aItems.length > 0) {
            // lines are spanning across the whole area so we skip them
            if (aItems[0] instanceof sap.ino.wall.WallItemLine) {
                aItems.splice(0, 1);
                continue;
            }
    
            // step 1a) calculate collisions for this item with all other items
            aCollisions = this._calculateCollisions(aItems, aItems[0], sap.ino.wall.WallConfig._COLLISION_ALL, null, 100); // custom
                                                                                                                            // neighbour
                                                                                                                            // theshold
            // merge collisions and neighbors
            aCollisions = aCollisions[0].concat(aCollisions[1]);
            // add own item
            aCollisions.push(aItems[0]);
    
            // step 1b) calculate the bounding box for the new cluster
            aClusterBoundingBox = this._calculateBoundingBox(aCollisions);
    
            // step 1c) save cluster with bounding box
            
            // sanity check: only add items that have a valid bounding box
            if (aClusterBoundingBox) {
                aClusters.push({
                    id: jQuery.sap.uid(),
                    boundingBox: aClusterBoundingBox,
                    items: aCollisions
                });
            }
    
            // step 1d) remove the collisions from the items array for the next iteration
            aCollisionIds = aCollisions.map(function (oItem) {
                return oItem.getId();
            });
            aItems = aItems.filter(function (oItem) {
                return (aCollisionIds.indexOf(oItem.getId()) === -1);
            });
        }
    
        // step 2) expand the clusters by calculating the collisions of the cluster bounding box to other clusters
        do {
            // end condition: if this stays false we will leave the loop
            bMergedClusters = false;
            iSafetyCheck++;
            for (i = 0; i < aClusters.length; i++) {
                // copy clusters
                aAllOtherClusters = aClusters.slice(0);
    
                // remove current cluster
                aAllOtherClusters.splice(i, 1);
    
                // create an array of the bounding boxes to test with
                aAllOtherClusterBoxes = [];
                for (j = 0; j < aAllOtherClusters.length; j++) {
                    aAllOtherClusterBoxes.push([
                        aAllOtherClusters[j].boundingBox[0].getX(), // left
                        aAllOtherClusters[j].boundingBox[0].getY(), // top
                        aAllOtherClusters[j].boundingBox[1].getX() - aClusters[i].boundingBox[0].getX(), // width
                        aAllOtherClusters[j].boundingBox[1].getY() - aClusters[i].boundingBox[0].getY(), // height
                        aAllOtherClusters[j].id // the id to identify the bounding box
                    ]);
                }
    
                // step 2a) calculate collisions with all items of other clusters
                aCollisions = this._calculateCollisions(aAllOtherClusterBoxes, [
                    aClusters[i].boundingBox[0].getX(), // left
                    aClusters[i].boundingBox[0].getY(), // top
                    aClusters[i].boundingBox[1].getX() - aClusters[i].boundingBox[0].getX(), // width
                    aClusters[i].boundingBox[1].getY() - aClusters[i].boundingBox[0].getY(), // height
                    aClusters[i].id // the id to identify the bounding box
                ], sap.ino.wall.WallConfig._COLLISION_ALL, null, 70); // custom neighbour threshold
                // merge collisions and neighbors
                aCollisions = aCollisions[0].concat(aCollisions[1]);
    
                // step 2b) merge clusters
                if (aCollisions.length > 0) {
                    // return either the id of the item or the index of the cluster
                    aCollisionIds = aCollisions.map(function (oItem) {
                        return (oItem.getId ? oItem.getId() : oItem);
                    });
    
                    // find and add the clusters that were returned as an index by the collision detection mechanism
                    aClustersToMerge = aClusters.filter(function (oCluster) {
                        return (aCollisionIds.indexOf(oCluster.id)  !== -1);
                    });
                    aClustersToMerge.push(aClusters[i]);
    
                    // calculate new cluster
                    oNewCluster = {
                        id: jQuery.sap.uid(),
                        boundingBox: [],
                        items: []
                    };
                    for (j = 0; j < aClustersToMerge.length; j++) {
                        oNewCluster.items = oNewCluster.items.concat(aClustersToMerge[j].items);
                    }
                    oNewCluster.boundingBox = this._calculateBoundingBox(oNewCluster.items);
    
                    // remove merged clusters from the cluster array
                    aClustersToMergeIds = aClustersToMerge.map(function (oCluster) {
                        return oCluster.id; 
                    });
                    for (j = 0; j < aClusters.length; j++) {
                        if (aClustersToMergeIds.indexOf(aClusters[j].id) !== -1) {
                            aClusters.splice(j, 1);
                            j--;
                        }
                    }
    
                    // add new cluster to the cluster array
                    aClusters.push(oNewCluster);
    
                    // stop loop and repeat
                    bMergedClusters = true;
                    break;
                }
            }
            // TODO: check why this happens
            if (iSafetyCheck > 90) {
                jQuery.sap.log.error("something went wrong when calculating the clusters!");
            }
        } while (bMergedClusters && aClusters.length !== 1 && iSafetyCheck < 99);
    
        return aClusters;
    };
    
    /**
     * Get the next depth value for an item
     * 
     * @param {int}
     *            current depth (optional), only return a higher depth if required
     * @public
     * @static
     * @return {int} the next possible depth value
     */
    sap.ino.wall.Wall.prototype._getNextDepth = function (iDepth) {
        
        if (iDepth != undefined && this._nextDepth === iDepth) {
            return this._nextDepth;
        }
        
        // if depth range is exceeded, we need to reduce the depth range for all items
        if (this._nextDepth + sap.ino.wall.WallConfig._DEPTH_STEP > sap.ino.wall.WallConfig._MAX_DEPTH) {
            this._reduceItemDepth();
        }
        this._nextDepth += sap.ino.wall.WallConfig._DEPTH_STEP;
        return this._nextDepth;
    };
    
    // TODO: implement this
    sap.ino.wall.Wall.prototype._reduceItemDepth = function () {
        var aItems = this.getItems(),
            aItemsSortedByDepth = aItems.sort(function (a, b) {
                if (a.getDepth() < b.getDepth()) {
                    return -1;
                } else if (a.getDepth() > b.getDepth()) {
                    return 1;
                } else {
                    return 0;
                }
            }),
            i = 0;
    
        // set minimum possible depth values on all items
        this._nextDepth = sap.ino.wall.WallConfig._MIN_DEPTH;
        for (; i < aItemsSortedByDepth.length; i++) {
            aItemsSortedByDepth[i].setDepth(this._getNextDepth());
        }
    };
    
    /* =========================================================== */
    /* begin: general purpose helper functions */
    /* =========================================================== */
    
    /**
     * Renders and flushes a wall item without re-rendering the complete wall
     * 
     * @returns {this} this pointer for chaining
     * @private
     */
    sap.ino.wall.Wall.prototype._renderItemIntoContainer = function (oItem, bDoNotPreserve, vInsert) {
        var oDomRef = this.$("inner")[0];
        
        sap.ino.wall.util.Helper.renderItemIntoContainer(oDomRef, oItem, bDoNotPreserve, vInsert);
    
        return this;
    };
    
    /**
     * Checks if the control is already written to the DOM to allow for layout changes
     * 
     * @returns {this} this pointer for chaining
     * @private
     */
    sap.ino.wall.Wall.prototype._isRendered = function () {
        if (this._bIsInDOM === undefined || this._bIsInDOM === 0) {
            this._bIsInDOM = jQuery.sap.byId(this.getId() + "-inner").length;
        }
    
        return this._bIsInDOM;
    };
    
    /**
     * Checks if there are any items attached to the cursor
     * 
     * @returns {boolean} true if there are items attached to the cursor, false if not
     * @protected
     */
    sap.ino.wall.Wall.prototype._hasFollowCursorItems = function () {
        return this._followHandlers.length > 0;
    };
    
    /**
     * Fires the wall item change event after no further action has happened for a configurable delay
     * 
     * @param {WallItemBase}
     *            oItem the item that has been changed
     * @returns {this} this pointer for chaining
     * @private
     */
    sap.ino.wall.Wall.prototype._notifyItemChanged = function (oItem) {
        var that = this;
    
        if (this.getMode() === "Readonly") {
            return;
        }
        
        if (oItem.getStorageId() > 0) {
            if (oItem) {
                this._oItemsChanged[oItem.getId()] = oItem;
            }
        
            clearTimeout(this._iWallItemsSaveDelayTimer);
            this._iWallItemsSaveDelayTimer = setTimeout(function () {
                // fire changed event with all items after [_wallSaveDelay] without further changes
                that.fireItemChange({items: that._oItemsChanged});
                that._oItemsChanged  = {};
            }, this._iWallSaveDelay);
        }
    
        return this;
    };
    
    /**
     * checks if the wall is the current page and if the control is not an input field
     * 
     * @returns {this} this pointer for chaining
     * @param {sap.ui.core.Control}
     *            oTargetControl the control that triggered the even
     * @private
     */
    sap.ino.wall.Wall.prototype._wallInteractionPossible = function (oTargetControl) {
        if (this.getParent() &&
            !(jQuery(oTargetControl).control()[0] instanceof sap.ino.wall.TextEditor) &&
            jQuery(oTargetControl).filter('input,textarea,select').length === 0) {
            return true;
        }
        return false;
    };

    /**
     * Fires the wall change event after no further action has happened for a configurable delay
     * 
     * @param {string}
     *            sProperty the property that has been changed
     * @returns {this} this pointer for chaining
     * @private
     */
    sap.ino.wall.Wall.prototype._notifyChanged = function (sProperty) {
        var that = this;

        if (this.getMode() === "Readonly") {
            return;
        }

        if (sProperty) {
            this._oPropertiesChanged[sProperty] = true;
        }
        clearTimeout(this._iWallSaveDelayTimer);
        this._iWallSaveDelayTimer = setTimeout(function () {
            // fire changed event with all items after [_wallSaveDelay] without further changes
            that.fireChange({properties: that._oPropertiesChanged});
            that._oPropertiesChanged  = {};
        }, this._iWallSaveDelay);

        return this;
    };
    
    sap.ino.wall.Wall.prototype.forceSyncFireChange = function () {
        var that = this;
        
        var aPromise = [];
        
        if (!jQuery.isEmptyObject(that._oPropertiesChanged)) {
            var oDeferred = jQuery.Deferred();
            that.fireChange({ properties: that._oPropertiesChanged,
                              sync : true,
                              deferred: oDeferred });
            aPromise.push(oDeferred.promise());
        }
        that.clearAllPendingChanges();
        
        if (!jQuery.isEmptyObject(that._oItemsChanged)) {
            var oDeferred = jQuery.Deferred();
            that.fireItemChange({ items: that._oItemsChanged,
                                  sync : true,
                                  deferred: oDeferred });
            aPromise.push(oDeferred.promise());
        }
        that.clearAllPendingItemChanges();
        
        return jQuery.when.apply(undefined, aPromise);
    }

    /**
     * Clears the change timer and resets the changed items (call this function when saving the wall manually)
     * 
     * @returns {this} this pointer for chaining
     * @private
     */
    sap.ino.wall.Wall.prototype.clearAllPendingItemChanges = function () {
        clearTimeout(this._iWallItemsSaveDelayTimer);
        this._oItemsChanged  = {};
    };

    /**
     * Clears the change timer and resets the changed items (call this function when saving the wall manually)
     * 
     * @returns {this} this pointer for chaining
     * @private
     */
    sap.ino.wall.Wall.prototype.clearAllPendingChanges = function () {
        clearTimeout(this._iWallSaveDelayTimer);
        this._oPropertiesChanged  = {};
    };

    /**
     * Clears an item from the pending changes and removes the timer if there are no other items to be saved (call this
     * function when saving a wall item manually)
     * 
     * @returns {this} this pointer for chaining
     * @param {WallItemBase}
     *            the item to be cleared
     * @param {boolean}
     *            whether the children should also be cleared or not
     * @private
     */
    sap.ino.wall.Wall.prototype.clearPendingItemChange = function (oItem, bWithChildren) {
        var i = 0, aChilds;
        
        delete this._oItemsChanged[oItem.getId()];
        if (Object.keys(this._oItemsChanged).length === 0) {
            clearTimeout(this._iWallItemsSaveDelayTimer);
        }
        
        // also clear the pending changes for children if requested
        if (bWithChildren) {
            aChilds = oItem.getChilds();
            for (; i < aChilds.length; i++) {
                this.clearPendingItemChange(aChilds[i], true);
            }
        }
    };

    /**
     * Returns true if there are properties to be saved, otherwise false
     * 
     * @returns {boolean} the expected result
     * @private
     */
    sap.ino.wall.Wall.prototype.hasPendingChanges = function () {
        return !!Object.keys(this._oPropertiesChanged).length;
    };

    /**
     * Returns true if there are items to be saved, otherwise false
     * 
     * @returns {boolean} the expected result
     * @private
     */
    sap.ino.wall.Wall.prototype.hasPendingItemChanges = function () {
        return !!Object.keys(this._oItemsChanged).length;
    };

    /**
     * Set up the internal trash bin structure
     * 
     * @private
     */
    sap.ino.wall.Wall.prototype._createTrashBin = function () {
        var that = this;

        // trash above: in chrome, the trash bin is below the item so we add a second semi-transparent trashbin
        // above the item
        if (sap.ui.Device.browser.chrome) {
            this._oHLTrashAbove = new sap.ui.layout.HorizontalLayout(this.getId() + "-trashAbove", {
                content: [
                    new sap.ino.wall.Hoverable({
                        enter: function () {
                            var $trash;
    
                            if (that.getMode() === sap.ino.wall.WallMode.Readonly || that._bMovingItem) {
                                return;
                            }
                            that.fireHover({
                                element: "Trash",
                                interaction: "Enter",
                                tooltip: this.getContent().getTooltip()
                            });
    
                            // bring to front when hovering
                            $trash = that.$("trash");
                            $trash.clearQueue().css("opacity", 1);
                            $trash.css("z-index", 10000);
                        },
                        leave: function () {
                            var $trash;
    
                            if (that.getMode() === sap.ino.wall.WallMode.Readonly || that._bMovingItem) {
                                return;
                            }
                            that.fireHover({
                                element: "Trash",
                                interaction: "Leave",
                                tooltip: null
                            });
    
                            $trash = that.$("trash");
                            $trash.clearQueue().css("opacity", 0);// .animate({opacity: "0"}, 500);
                        },
                        content: sap.ui.core.IconPool.createControlByURI({
                            id: this.getId() + "-trashbinAbove",
                            tooltip: "{i18n>WALL_STATUSMSG_TRASH}",
                            src: sap.ui.core.IconPool.getIconURI("delete")
                        }).addStyleClass("sapInoWallWTrashBin above")
                    })
                ]
            }).addStyleClass("sapInoWallWTrash above");
            this.addDependent(this._oHLTrashAbove);
        }

        /* trash */
        this._oHLTrash = new sap.ui.layout.HorizontalLayout(this.getId() + "-trash", {
            content: [
                new sap.ino.wall.Hoverable({
                    enter: function () {
                        var $trash;

                        if (that.getMode() === sap.ino.wall.WallMode.Readonly || that._bMovingItem) {
                            return;
                        }
                        that.fireHover({
                            element: "Trash",
                            interaction: "Enter",
                            tooltip: this.getContent().getTooltip()
                        });

                        // bring to front when hovering
                        $trash = that.$("trash");
                        $trash.clearQueue().css("opacity", 1);
                        $trash.css("z-index", 10000);
                    },
                    leave: function () {
                        var $trash;

                        if (that.getMode() === sap.ino.wall.WallMode.Readonly || that._bMovingItem) {
                            return;
                        }
                        that.fireHover({
                            element: "Trash",
                            interaction: "Leave",
                            tooltip: null
                        });

                        $trash = that.$("trash");
                        $trash.clearQueue().css("opacity", 0);// .animate({opacity: "0"}, 500);
                    },
                    content: sap.ui.core.IconPool.createControlByURI({
                        id: this.getId() + "-trashbin",
                        tooltip: "{i18n>WALL_STATUSMSG_TRASH}",
                        src: sap.ui.core.IconPool.getIconURI("delete")
                    }).addStyleClass("sapInoWallWTrashBin")
                })
            ]
        }).addStyleClass("sapInoWallWTrash");
        this.addDependent(this._oHLTrash);
    };

    /**
     * Set up the internal selection rectangle structure
     * 
     * @private
     */
    sap.ino.wall.Wall.prototype._createSelectionRectangle = function () {
        this._oSelectionRectangle = new sap.ui.core.HTML(this.getId() + "-selectionRectangle", {
            content: '<div class="sapInoWallWSelectionRectangle sapInoWallWNoSelection"></div>',
            sanitizeContent: true
        });
    };
    
    /**
     * Set up the internal lock structure
     * 
     * @private
     */
    sap.ino.wall.Wall.prototype._createLock = function () {
        this._oLock = new sap.ui.layout.HorizontalLayout(this.getId() + "-lock", {
            content: [
                      new sap.ino.wall.Hoverable({
                          content: sap.ui.core.IconPool.createControlByURI({
                              id: this.getId() + "-lockIcon",                              
                              src: sap.ui.core.IconPool.getIconURI("locked")
                          }).bindProperty("tooltip", "i18n>WALL_STATUSMSG_LOCK").addStyleClass("sapInoWallWLockIcon")
                      })
                      ]
        }).addStyleClass("sapInoWallWLock");
        this.addDependent(this._oLock);
        
        // hide lock if not in readonly mode
        if (this.getMode() !== sap.ino.wall.WallMode.Readonly) {
            this._oLock.addStyleClass("sapInoWallInvisible");
        }
    };
    
    /**
     * Set up the internal template indicator structure
     * 
     * @private
     */
    sap.ino.wall.Wall.prototype._createTemplateIndicator = function () {
        this._oTemplateIndicator = new sap.ui.core.HTML(this.getId() + "-templateIndicator", {
            content: '<div class="sapInoWallWTemplateIndicator sapInoWallInvisible" title="' + this._oRB.getText("WALL_STATUSMSG_TEMPLATE") + '"><div class="sapInoWallWTemplateIndicatorInner">' + this._oRB.getText("WALL_TEMPLATE_INDICATOR") + '</div></div>',
            sanitizeContent: true
        });
        this.addDependent(this._oTemplateIndicator);
    };

})();
}; // end of sap/ino/wall/Wall.js
