// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ino.commons.library-all');
if ( !jQuery.sap.isDeclared('sap.ino.commons.application.Configuration') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.application.Configuration'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/application/Configuration",[
    "sap/ui/base/Object"

], function(Object) {
	"use strict";

	var Configuration = Object.extend("sap.ino.commons.application.Configuration", {});

	var sBackendRootURL = window.location.protocol + '//' + window.location.host;

	Configuration.getBackendRootURL = function() {
		return sBackendRootURL;
	};

	Configuration.getMailPreviewURL = function(oParameterMap) {
		return Configuration.getBackendRootURL() + "/" +
			Configuration.getSystemSetting("sap.ino.config.URL_PATH_XS_MAIL_PREVIEW") + "?" +
			jQuery.sap.encodeURLParameters(oParameterMap);
	};

	Configuration.getTextMoudleURL = function(oParameterMap) {
		return Configuration.getBackendRootURL() + "/" +
			Configuration.getSystemSetting("sap.ino.config.URL_PATH_XS_TEXT_MODULE") + "?" +
			jQuery.sap.encodeURLParameters(oParameterMap);
	};

	Configuration.getTagcloudServiceURL = function(iCampaignId, aTagIds, sSearchTerm, sVariantFilter, bExcludeDrafts, bIsManaged, aFilters) {
		var sPath = Configuration.getBackendRootURL() + "/" +
			Configuration.getSystemSetting("sap.ino.config.URL_PATH_XS_TAGCLOUD") + "?";
		var aParams = [];
		if (iCampaignId) {
			aParams.push("CAMPAIGN=" + iCampaignId);
		}
		if (aTagIds) {
			aParams = aParams.concat(aTagIds.map(function(iTagId) {
				return "TAG=" + iTagId;
			}));
		}
		if (sSearchTerm) {
			aParams.push("SEARCHTERM=" + jQuery.sap.encodeURL(sSearchTerm));
		}
		if (bExcludeDrafts) {
			aParams.push("EXCL_STATUS=sap.ino.config.DRAFT");
		}
		if (sVariantFilter) {
			aParams.push("FILTERNAME=" + sVariantFilter);
		}
		aParams.push("FILTER_BACKOFFICE=" + (bIsManaged ? 1 : 0));
		jQuery.each(aFilters, function(index, filter) {
			if (filter.key && filter.value) {
				aParams.push(filter.key.toUpperCase() + "=" + encodeURIComponent(filter.value));
			}
		});
		return sPath + aParams.join("&");
	};

	function _buildExpertServiceURL(sMode, vItems, iLimitExperts, iLimitIdeas) {
		var sParam = sMode === "tag" ? "TAG=" : "ID=";
		var sEndpoint = sMode === "tag" ? "/bytag?" : "/byid?";
		if (vItems && !Array.isArray(vItems)) {
			vItems = [vItems];
		}
		var sLimitExperts = iLimitExperts ? "&limit=" + iLimitExperts : "";
		var sLimitIdeas = iLimitIdeas ? "&ideas=" + iLimitIdeas : "";
		return vItems ?
			Configuration.getBackendRootURL() + "/" + Configuration.getSystemSetting("sap.ino.config.URL_PATH_XS_EXPERT_SERVICE") + sEndpoint +
			vItems.map(function(sItem) {
				return sParam + encodeURIComponent(sItem);
			}).join("&") + sLimitExperts + sLimitIdeas : null;
	}

	Configuration.getIdeaExpertsByTagsURL = function(vTags, iLimitExperts, iLimitIdeas) {
		return _buildExpertServiceURL("tag", vTags, iLimitExperts, iLimitIdeas);
	};

	Configuration.getIdeaExpertsByIdeaURL = function(vId, iLimitExperts, iLimitIdeas) {
		return _buildExpertServiceURL("id", vId, iLimitExperts, iLimitIdeas);
	};

	Configuration.getRelatedIdeasURL = function(iIdeaId) {
		if (iIdeaId && iIdeaId > 0) {
			return Configuration.getBackendRootURL() + "/" +
				Configuration.getSystemSetting("sap.ino.config.URL_PATH_XS_RELATED_IDEAS_BY_ID") + "/" + iIdeaId;
		} else {
			return null;
		}
	};

	Configuration.getRelatedIdeasByTextURL = function(iIdeaId) {
		if (typeof iIdeaId === 'number' && (iIdeaId % 1) === 0) {
			return Configuration.getBackendRootURL() + "/" +
				Configuration.getSystemSetting("sap.ino.config.URL_PATH_XS_RELATED_IDEAS_BY_TEXT") + "/" + iIdeaId;
		} else {
			return null;
		}
	};

	Configuration.getUserProfileByTextURL = function(iIdentityId) {
		if (typeof iIdentityId === 'number' && (iIdentityId % 1) === 0) {
			return Configuration.getBackendRootURL() + "/" +
				Configuration.getSystemSetting("sap.ino.config.URL_PATH_IAM_IDENTITY_PROFILE");
		} else {
			return null;
		}
	};

	Configuration.getCampaignSettingsURL = function(iCampaignId, bEdit) {
		if (typeof iCampaignId === 'number' && (iCampaignId % 1) === 0) {
			return Configuration.getBackendRootURL() + "/" +
				Configuration.getSystemSetting("sap.ino.config.URL_PATH_UI_BACKOFFICE") + encodeURI('#campaign/{"id": ' + iCampaignId + ', "mode": ' +
					(bEdit ? '"edit"' : '"display"') + '}');
		} else {
			return null;
		}
	};

	Configuration.getAttachmentDownloadURL = function(iAttachmentId, sDefaultURL, sCompressedType) {
		if (iAttachmentId && iAttachmentId > 0) {
			sCompressedType = sCompressedType ? "?type=" + sCompressedType : '';
			return Configuration.getBackendRootURL() + "/" +
				Configuration.getSystemSetting("sap.ino.config.URL_PATH_XS_ATTACHMENT_DOWNLOAD") + "/" + iAttachmentId + sCompressedType;
		} else {
			if (sDefaultURL) {
				return sDefaultURL;
			}
			return null;
		}
	};

	Configuration.getAttachmentTitleImageDownloadURL = function(iAttachmentTitleImageId, sDefaultURL, sCompressedType) {
		if (iAttachmentTitleImageId && iAttachmentTitleImageId > 0) {
			sCompressedType = sCompressedType ? "?type=" + sCompressedType : '';
			return Configuration.getBackendRootURL() + "/" +
				Configuration.getSystemSetting("sap.ino.config.URL_PATH_XS_ATTACHMENT_TITLE_IMAGE_DOWNLOAD") + "/" + iAttachmentTitleImageId +
				sCompressedType;
		} else {
			if (sDefaultURL) {
				return sDefaultURL;
			}
			return null;
		}
	};

	Configuration.getResourceBundleURL = function(sResourceName) {
		if (sResourceName) {
			var sResourcePath = Configuration.getSystemSetting("sap.ino.config.URL_PATH_XS_RESOURCE");
			if (!sResourcePath) {
				return null;
			}

			return Configuration.getBackendRootURL() + "/" +
				sResourcePath + "/" +
				sResourceName + ".properties";
		} else {
			return null;
		}
	};

	Configuration.setBackendRootURL = function(sTheBackendRootURL) {
		sBackendRootURL = sTheBackendRootURL;
	};

	var bBackendTraceActive = !!jQuery.sap.getUriParameters().get("sap-ino-backendtrace");
	Configuration.isBackendTraceActive = function() {
		return bBackendTraceActive;
	};

	Configuration.setBackendTraceActive = function(bActive) {
		bBackendTraceActive = bActive;
	};

	var bExtensionsDisabled = !!jQuery.sap.getUriParameters().get("sap-ino-disable-extensions");
	Configuration.isExtensionsDisabled = function() {
		return bExtensionsDisabled;
	};

	Configuration.getStylePaths = function() {
		return this.getBackendConfiguration().styles;
	};

	Configuration.getComponentName = function() {
		return this.getBackendConfiguration().componentName;
	};

	Configuration.isComponentActive = function(sComponent) {
		if (this.getBackendConfiguration().systemSettings[sComponent] === undefined || isNaN(this.getBackendConfiguration().systemSettings[
			sComponent].VALUE)) {
			return false;
		}
		return !!parseInt(this.getBackendConfiguration().systemSettings[sComponent].VALUE, 10);
	};

	Configuration.getSystemSetting = function(sKey) {
		return this.getBackendConfiguration().systemSettings && this.getBackendConfiguration().systemSettings[sKey] && this.getBackendConfiguration()
			.systemSettings[sKey].VALUE;
	};

	Configuration.getApplicationPath = function(sApplication) {
		return this.getBackendConfiguration().systemSettings[sApplication] && this.getBackendConfiguration().systemSettings[sApplication].VALUE;
	};

	Configuration.getFullApplicationPath = function(sApplication) {
		return this.getBackendRootURL() + "/" + this.getApplicationPath(sApplication);
	};

	Configuration.getApplicationObjects = function() {
		return this.getBackendConfiguration().applicationObjects;
	};

	Configuration.getApplicationObject = function(sName) {
		return this.getBackendConfiguration().applicationObjects[sName];
	};

	Configuration.getSystemDefaultLanguage = function() {
		return this.getBackendConfiguration().systemDefaultLanguage;
	};

	Configuration.getURLWhitelist = function() {
		return this.getBackendConfiguration().urlWhitelist;
	};

	Configuration.getCustomConfigurationPackage = function() {
		return this.getBackendConfiguration().customConfigurationPackage;
	};

	Configuration.getInconsistentPackages = function() {
		return this.getBackendConfiguration().inconsistentPackages;
	};

	Configuration.systemMessage = function() {
		return this.getBackendConfiguration().systemMessage;
	};

	Configuration.getSWABaseURL = function() {
		var sURL = Configuration.getSystemSetting("sap.ino.config.URL_PATH_SWA_BASE");
		if (Configuration.isAbsoluteURL(sURL)) {
			return sURL;
		} else {
			return Configuration.getBackendRootURL() + "/" + sURL;
		}
	};

	Configuration.getSWATrackerURL = function() {
		var sURL = Configuration.getSystemSetting("sap.ino.config.URL_PATH_SWA_TRACKER");
		if (Configuration.isAbsoluteURL(sURL)) {
			return sURL;
		} else {
			return Configuration.getBackendRootURL() + "/" + sURL;
		}
	};

	Configuration.isUsageReportingActive = function() {
		var sTrackingActive = Configuration.getSystemSetting("sap.ino.config.SWA_ACTIVE");
		var sReportingActive = Configuration.getSystemSetting("sap.ino.config.USAGE_REPORTING_ACTIVE");
		if (sTrackingActive === "0") {
			return false;
		} else if (sTrackingActive === "1" && sReportingActive === "0" && (this.hasCurrentUserPrivilege(
			"sap.ino.xs.rest.admin.application::execute") || this.hasCurrentUserPrivilege(
			"sap.ino.ui::camps_coach_role") || this.hasCurrentUserPrivilege(
			"sap.ino.ui::camps_mgr_role"))) {
			return true;
		} else if (sTrackingActive === "1" && sReportingActive === "1") {
			return true;
		} else {
			return false;
		}
	};

	Configuration.getFrontofficeDefaultBackgroundImageURL = function(bIsHighContrast) {
		var sURL = Configuration.getSystemSetting("sap.ino.config.URL_PATH_UI_FRONTOFFICE_DEFAULT_BACKGROUND_IMAGE");
		if (bIsHighContrast) {
			sURL = Configuration.getSystemSetting("sap.ino.config.URL_PATH_UI_FRONTOFFICE_DEFAULT_HC_BACKGROUND_IMAGE");
		}
		return sURL;
	};

	Configuration.getMobileSmallDefaultBackgroundImageURL = function() {
		return Configuration.getSystemSetting("sap.ino.config.URL_PATH_UI_MOBILE_SMALL_DEFAULT_BACKGROUND_IMAGE");
	};

	Configuration.getPPMURL = function() {
		return Configuration.getBackendRootURL() + "/" +
			Configuration.getSystemSetting("sap.ino.config.URL_PATH_XS_PPM");
	};
	Configuration.setupCompleted = function() {
		return this.getBackendConfiguration().setupCompleted;
	};

	Configuration.getXSRFToken = function() {
		return this.getBackendConfiguration().XSRFToken;
	};

	Configuration.setXSRFToken = function(sToken) {
		this.getBackendConfiguration().XSRFToken = sToken;
		jQuery.ajaxSetup({
			headers: {
				"X-CSRF-Token": sToken
			}
		});
		var jquerySelfSetup = jQuery.ajaxSetup.bind(jQuery);
		jQuery.ajaxSetup = function(target, settings) {
			var result = jquerySelfSetup(target, settings);
			var oRegex = new RegExp(Configuration.getBackendRootURL(), "igm");
			if (result.type === "GET" && settings && Configuration.isAbsoluteURL(settings.url) && !oRegex.test(settings.url)) {
				delete result.headers["X-CSRF-Token"];
			}
			return result;
		};
	};

	Configuration.validateXSRFToken = function(oResponse) {
		if (oResponse.status === 403) {
			var sXSRF = oResponse.getResponseHeader("x-csrf-token");
			if (sXSRF && sXSRF.toLowerCase() === "required") {
				// No longer valid -> refresh
				var sPingURL = Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/ping.xsjs";
				var oAjaxPromise = jQuery.ajax({
					url: sPingURL,
					headers: {
						"X-CSRF-Token": "Fetch"
					},
					type: "GET",
					contentType: "application/json; charset=UTF-8",
					async: false
				});
				oAjaxPromise.done(function(oResponseBody, sResponseText, oResponse) {
					Configuration.setXSRFToken(oResponse.getResponseHeader("X-CSRF-Token"));
				});
				return false;
			}
		}
		return true;
	};

	Configuration.getTheme = function() {
		return this.getBackendConfiguration().theme;
	};

	Configuration.getCurrentUser = function() {
		// this function seems a bit foreign here - however the data is loaded
		// with the bootstrap.xsjs and Configuration is the accessor to it
		// bIncludePrivileges will only where when getCurrentUser is the first call
		return this.getBackendConfiguration().user;
	};

	Configuration.getCurrentUserPrivileges = function() {
		// see getCurrentUser(...)
		return this.getBackendConfiguration().privileges;
	};

	Configuration.hasCurrentUserPrivilege = function(sPrivilege) {
		return !!this.getCurrentUserPrivileges()[sPrivilege];
	};

	Configuration.getBackendConfiguration = function() {
		return getBackendConfiguration(this.getBackendRootURL());
	};

	Configuration.refreshBackendConfiguration = function() {
		oBackendConfiguration = null;
		this.getBackendConfiguration();
	};

	Configuration.isAbsoluteURL = function(sURL) {
		if (sURL.search(/^http(s)?:\/\//) === -1) {
			return false;
		} else {
			return true;
		}
	};

	Configuration.isDevelopmentEnv = function() {
		return (window.location.search || "").indexOf("development") > -1;
	};

	var oBackendConfiguration;

	var oConfigModel;
	Configuration.getSystemSettingsModel = function() {
		if (!oConfigModel) {
			oConfigModel = new sap.ui.model.json.JSONModel({});
		}
		return oConfigModel;
	};

	var oUserModel;
	Configuration.getUserModel = function() {
		if (!oUserModel) {
			oUserModel = new sap.ui.model.json.JSONModel({});
		}
		return oUserModel;
	};

	var oSearchModel;
	Configuration.getSearchModel = function() {
		if (!oSearchModel) {
			oSearchModel = new sap.ui.model.json.JSONModel({});
		}
		return oSearchModel;
	};
	var oCampaignFilterCountModel;
	Configuration.getCampaignFilterCountModel = function() {
		if (!oCampaignFilterCountModel) {
			oCampaignFilterCountModel = new sap.ui.model.json.JSONModel({});
		}
		return oCampaignFilterCountModel;
	};

	Configuration.getCampaignFilterCountProperty = function() {
		var model = this.getCampaignFilterCountModel();
		return model.getProperty('/CampaignFilterCountModel');
	};

	Configuration.setCampaignFilterCountProperty = function(obj) {
		var model = this.getCampaignFilterCountModel();
		return model.setProperty("/CampaignFilterCountModel", obj);
	};
	Configuration.getCampaignFilterCount = function(searchToken, oCampaignModel, aVariants) {

		var sURL = Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/campaign_filter_count.xsjs";
		var oAjaxPromise = jQuery.ajax({
			url: sURL,
			headers: {
				"X-CSRF-Token": "Fetch"
			},
			data: searchToken,
			type: "GET",
			contentType: "application/json; charset=UTF-8",
			async: true
		});
		Configuration.getErrorMessage = function() {
			return oAjaxPromise.responseText;
		};

		oAjaxPromise.done(function(oResponse) {

			oCampaignFilterCountModel = {
				all: oResponse[0].AMOUNT,
				active: oResponse[1].AMOUNT,
				open: oResponse[2].AMOUNT,
				future: oResponse[3].AMOUNT,
				past: oResponse[4].AMOUNT,
				registered: oResponse[5].AMOUNT,
				manage: oResponse[6].AMOUNT,
				draft: oResponse[7].AMOUNT,
				publish: oResponse[8].AMOUNT,
				submittable: oResponse[9].AMOUNT

			};
			for (var i = 0; i < aVariants.length; i += 1) {
				oCampaignModel.setProperty("/Variants/Values/" + i + "/COUNT", oCampaignFilterCountModel[oCampaignModel.getProperty(
					"/Variants/Values/" + i + "/ACTION")]);

			}
			//   Configuration.setCampaignFilterCountProperty(oCampaignFilterCount);
		});
		oAjaxPromise.fail(function(oResponse) {
			oBackendConfiguration = {};
			jQuery.sap.log.error("Reading user info failed.");
			jQuery.sap.log.error(oResponse.responseText);
			Configuration.userErrorMessage = oResponse.responseText;
		});

		return oCampaignFilterCountModel;
	};
	var oIdeaFilterCountModel, oIdeaFilterCountJsonModel;
	Configuration.getIdeaFilterCountModel = function() {
		if (!oIdeaFilterCountJsonModel) {
			oIdeaFilterCountJsonModel = new sap.ui.model.json.JSONModel({});
		}
		return oIdeaFilterCountJsonModel;
	};

	Configuration.getIdeaFilterCountData = function() {
		return this.getIdeaFilterCountModel().getProperty('/FilterCountModel');
	};

	Configuration.setIdeaFilterCountModel = function(obj) {
		var model = this.getIdeaFilterCountModel();
		return model.setProperty('/FilterCountModel', obj);
	};
	Configuration.getIdeaFilterCount = function(oCamObeject, oModel, aVariants, oCurrentLink) {
		var sURL, that = this;
		sURL = Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/idea_filter_count.xsjs";
		var oAjaxPromise = jQuery.ajax({
			url: sURL,
			headers: {
				"X-CSRF-Token": "Fetch"
			},
			data: oCamObeject,
			type: "GET",
			contentType: "application/json; charset=UTF-8",
			async: true
		});
		Configuration.getErrorMessage = function() {
			return oAjaxPromise.responseText;
		};

		oAjaxPromise.done(function(oResponse) {

			oIdeaFilterCountModel = {
				all: oResponse.all || 0,
				my: oResponse.myAuthoredIdeas || 0,
				voted: oResponse.myVotedIdeas || 0,
				commented: oResponse.myCommentedIdeas || 0,
				vote: oResponse.ideasIcanVoteFor || 0,
				completed: oResponse.completedIdeas || 0,
				eval: oResponse.myEvaluatedIdeas || 0,
				evalpending: oResponse.myEvaluatableIdeas || 0,
				manage: oResponse.IdeaTobeManaged || 0,
				managedcompleted: oResponse.ManagedCompletedIdeas || 0,
				follow: oResponse.followedupIdeas || 0,
				unassigned: oResponse.unassignedCoach || 0,
				coachme: oResponse.coachedIdeasByMe || 0,
				evaldone: oResponse.evaluatedIdeas || 0,
				evalopen: oResponse.openForEvaluation || 0,
				mygroup: oResponse.myGroupAuthoredIdeas || 0,
				mygroupvoted: oResponse.myGroupVotedIdeas || 0,
				mygroupcommented: oResponse.myGroupCommentedIdeas || 0,
				following: oResponse.myFollowingIdeas || 0

			};
			that.setIdeaFilterCountModel(oIdeaFilterCountModel);
			for (var i = 0; i < aVariants.length; i += 1) {
				if (oModel.getProperty("/Variants/Values/" + i + "/TYPE_CODE") === "QUICK_LINK_STANDARD_IDEA") {
					oModel.setProperty("/Variants/Values/" + i + "/COUNT", oIdeaFilterCountModel[oModel.getProperty(
						"/Variants/Values/" + i + "/ACTION")]);
				}

				if (oCurrentLink && oModel.getProperty("/Variants/Values/" + i + "/ID") === oCurrentLink.ID) {
					oModel.setProperty("/Variants/Values/" + i + "/COUNT", oIdeaFilterCountModel[oCurrentLink.ACTION]);
				}
			}

		});
		oAjaxPromise.fail(function(oResponse) {
			oBackendConfiguration = {};
			jQuery.sap.log.error("Reading user info failed.");
			jQuery.sap.log.error(oResponse.responseText);
			Configuration.userErrorMessage = oResponse.responseText;
		});

		return oModel;
	};

	Configuration.getCustomerCount = function(ID, oModel) {
		var sURL;
		sURL = Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/idea_filter_count.xsjs";
		var oAjaxPromise = jQuery.ajax({
			url: sURL,
			headers: {
				"X-CSRF-Token": "Fetch"
			},
			data: {
				quickLinkId: ID
			},
			type: "GET",
			contentType: "application/json; charset=UTF-8",
			async: true
		});
		Configuration.getErrorMessage = function() {
			return oAjaxPromise.responseText;
		};

		oAjaxPromise.done(function(oResponse) {
			for (var i = 0; i < oModel.getProperty("/Variants/Values/").length; i += 1) {
				if (oModel.getProperty("/Variants/Values/" + i + "/ID") === ID) {
					oModel.setProperty("/Variants/Values/" + i + "/COUNT", oResponse[0].AMOUNT);
				}
			}
		});
		oAjaxPromise.fail(function(oResponse) {
			oBackendConfiguration = {};
			jQuery.sap.log.error("Reading user info failed.");
			jQuery.sap.log.error(oResponse.responseText);
			Configuration.userErrorMessage = oResponse.responseText;
		});

		return true;
	};

	function getBackendConfiguration(sRootURL) {
		if (!oBackendConfiguration || jQuery.isEmptyObject(oBackendConfiguration)) {
			// login.xsjs is not cached and returns user logon information
			// ui_config.xsjs is cached and returns static configuration information
			// X-CSRF-Token may only be retrieved from *un*-cached services
			var sUserURL = sRootURL + "/sap/ino/xs/rest/login/login.xsjs/";
			// Include privileges only when required as it is performance-intensive
			sUserURL += "?locale=" + sap.ui.getCore().getConfiguration().getLanguage();
			sUserURL += "&includePrivileges=true";

			var sConfigURL = sRootURL + "/sap/ino/xs/rest/static/ui_config.xsjs";
			var oAjaxPromise = jQuery.ajax({
				url: sUserURL,
				headers: {
					"X-CSRF-Token": "Fetch"
				},
				type: "GET",
				contentType: "application/json; charset=UTF-8",
				async: false
			});
			Configuration.getErrorMessage = function() {
				return oAjaxPromise.responseText;
			};

			var fnAddModel = function(oResponse) {
				var oConfig = {};
				jQuery.each(oResponse.systemSettings, function(iIndex, oObject) {
					oConfig[oObject.CODE] = oObject.VALUE;
				});
				//Backend root URL is set individually
				oConfig.BACKEND_ROOT_URL = Configuration.getBackendRootURL();
				//Gamification Setting				
				jQuery.each(oResponse.gamificationSetting, function(code, value) {
					oConfig[code] = value;
				});
				Configuration.getSystemSettingsModel().setData(oConfig);
			};

			oAjaxPromise.done(function(oResponse, sResponseText, oXHR) {
				if (typeof oResponse === 'object' && oResponse.hasOwnProperty("user")) {
					oBackendConfiguration = oResponse;

					Configuration.setXSRFToken(oXHR.getResponseHeader("X-CSRF-Token"));
					var oParameters = {
					    /* 
					    * file: \sap\ino\ngui\sap\ino\apps\ino\index.xsjslib
					    * gSAPInoAppName from window object
					    */
						appName: gSAPInoAppName || ""
					};
					if (Configuration.isExtensionsDisabled()) {
						oParameters.disableExtensions = true;
					}
					oAjaxPromise = jQuery.ajax({
						url: sConfigURL,
						type: "GET",
						data: oParameters,
						contentType: "application/json; charset=UTF-8",
						async: false
					});

					oAjaxPromise.done(function(oResponse) {
						jQuery.extend(oBackendConfiguration, oResponse);
						Configuration.getUserModel().setProperty("/data", oBackendConfiguration.user);
						Configuration.getUserModel().setProperty("/privileges", oBackendConfiguration.privileges);
						fnAddModel(oResponse);
					});

					oAjaxPromise.fail(function() {
						oBackendConfiguration = {};
						jQuery.sap.log.error("reading backend configuration failed.");
					});
				} else {
					oBackendConfiguration = {};
					jQuery.sap.log.error("Reading user info failed.");
					jQuery.sap.log.error(oResponse.responseText);
				}
			});
			oAjaxPromise.fail(function(oResponse) {
				oBackendConfiguration = {};
				jQuery.sap.log.error("Reading user info failed.");
				jQuery.sap.log.error(oResponse.responseText);
				Configuration.userErrorMessage = oResponse.responseText;
			});
		}
		return oBackendConfiguration;
	}

	var personalize;

	function getPersonalizeSync() {
		var sUrl = Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/personalizeSettings.xsjs";
		var oAjax = jQuery.ajax({
			url: sUrl,
			headers: {
				"X-CSRF-Token": "Fetch"
			},
			type: "GET",
			contentType: "application/json; charset=UTF-8",
			async: false
		});
		return oAjax.responseText ? JSON.parse(oAjax.responseText) : {};
	}

	Configuration.personalizeModel = function() {
		if (!personalize) {
			personalize = new sap.ui.model.json.JSONModel({});
		}
		return personalize;
	};

	Configuration.getPersonalize = function() {
		var model = this.personalizeModel();
		//return model.getProperty('/personalizeSetting');
		var oPersonalizeSetting = model.getProperty('/personalizeSetting');
		if (!oPersonalizeSetting) {
			oPersonalizeSetting = getPersonalizeSync();
			model.setProperty('/personalizeSetting', oPersonalizeSetting);
		}
		return model.getProperty('/personalizeSetting');
	};

	Configuration.setPersonalize = function(obj) {
		var model = this.personalizeModel();
		return model.setProperty('/personalizeSetting', obj);
	};

	Configuration.updateCampaignViewCount = function() {

		var sURL = Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/update_campaign_viewCount.xsjs";
		var oAjaxPromise = jQuery.ajax({
			url: sURL,
			headers: {
				"X-CSRF-Token": "Fetch"
			},
			type: "GET",
			contentType: "application/json; charset=UTF-8",
			async: false
		});
		Configuration.getErrorMessage = function() {
			return oAjaxPromise.responseText;
		};

		oAjaxPromise.fail(function(oResponse) {
			oBackendConfiguration = {};
			jQuery.sap.log.error("Reading user info failed.");
			jQuery.sap.log.error(oResponse.responseText);
			Configuration.userErrorMessage = oResponse.responseText;
		});

		return;
	};
	Configuration.getGroupConfiguration = function() {
		var oGroupSetting = {
			GROUP: this.getSystemSetting("sap.ino.config.IDEA_COMPANY_VIEW_OPTION") === "sap.ino.config.ORGANIZATION" ? "ORGANIZATION" : "COMPANY", //ORGANIZATION
			DISPLAY_LABEL: this.getSystemSetting("sap.ino.config.IDEA_COMPANY_VIEW_TXT"),
			ENABLE_GROUP_VIEW: this.getSystemSetting("sap.ino.config.ENABLE_IDEA_COMPANY_VIEW") === "1" ? true : false
		};

		return oGroupSetting;
	};

	Configuration.getSysCompanyLabel = function() {
		return this.getGroupConfiguration().DISPLAY_LABEL;
	};

	Configuration.getSysCompanyEnable = function() {
		if (this.getGroupConfiguration().ENABLE_GROUP_VIEW) {
			return 1;
		}
		return 0;
	};

	Configuration.getSysCompanyView = function() {
		if (this.getGroupConfiguration().GROUP === "ORGANIZATION") {
			return "2";
		}
		return "1";
	};
	Configuration.getCustomReportsEnable = function() {
		if (this.getSystemSetting("sap.ino.config.ENABLE_CUSTOM_REPORTS") * 1) {
			return true;
		}
		return false;
	};
	Configuration.getCustomReportsTile = function() {
		return this.getSystemSetting("sap.ino.config.CUSTOM_REPORTS_TILE_NAME")
	};
	return Configuration;
});
}; // end of sap/ino/commons/application/Configuration.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.application.Router') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.application.Router'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.routing.Router'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.routing.History'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.ViewType'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/application/Router",[
    "sap/m/routing/Router",
    "sap/ui/core/routing/History",
    "sap/ui/core/mvc/ViewType"
], function (Router, History, ViewType) {
    "use strict";
    return Router.extend("sap.ino.commons.application.Router", {
        
        //callback function, to be executed before any routing event.
        _fnRoutingCallback : undefined,
        //callback function, to be executed before the browser window/tab is closed.
        _fnCloseCallback : undefined,
        //callback function, to be excuted once before any routing event for title change.
        // _fnTitleChangeCallback : undefined,
        /**
         * Navigates on step back in the history or to "home" if history is empty.
         * 
         * @public
         * @function
         * @name sap.ino.commons.application.Router.onNavBack
         * 
         * @returns {void}
         */
        onNavBack : function(bReplace) {
            var that = this;
            var oHistory = History.getInstance();
			var sPreviousHash = oHistory.getPreviousHash();
			var goNavBack = function () {
                if (sPreviousHash !== undefined) {
                    // we would like to have a possibility to remove the source history entry 
                    // (e.g. when it is a create screen) but the API does not offer a possibility
                    window.history.go(-1);
                } else {
                    that.navTo("home", undefined, bReplace);
                }
            };
            
            if(this._fnRoutingCallback){
            	this._fnRoutingCallback(goNavBack);
            } else {
            	goNavBack();
            }
            
        },
        
        /**
         * Navigates two steps back in the history or to "home" if history is empty.
         * 
         * @public
         * @function
         * @name sap.ino.commons.application.Router.onDeleteNavBack
         * 
         * @returns {void}
         */
        onDeleteNavBack : function(sOnDeleteHash, bReplace) {
			var aHistory = History.getInstance() && History.getInstance().aHistory;
			var iHistoryLength = aHistory && aHistory.length;
			if (iHistoryLength > 2 && aHistory[iHistoryLength - 3].indexOf(sOnDeleteHash) > -1) {
			    window.history.go(-2);
            } else if (iHistoryLength > 1 && aHistory[iHistoryLength - 2].indexOf(sOnDeleteHash) > -1) {
                window.history.go(-1);
            } else {
                this.navTo("home", undefined, bReplace);
            }
        },
        
        /**
         * Returns the context (url and parameters) of the current route if busy handling is active.
         * 
         * @public
         * @function
         * @name sap.ino.commons.application.Router.getContext
         * 
         * @returns {string} sContext
         */
        getContext : function() {
            var oHistory = History.getInstance();
            if (typeof oHistory.iHistoryPosition === "number") {
                return oHistory.aHistory[oHistory.iHistoryPosition];
            }
            else {
                return undefined;
            }
        },        
 
        /**
         * Navigate to a given route target.
         * 
         * @param {string} sRoute the name of the route
         * @param {object} oData the query added to the target url
         * @param {boolean} bNoHistory if true the navgation should not be part of the history
         * @param {boolean} bNoBusy if true no busy dialog is shown, even if busy handling is active
         * 
         * @private
         * @function
         * @name sap.ino.commons.application.Router.navTo
         * 
         * @returns {void}
         */
        navTo : function(sRoute, oData, bNoHistory, bNoBusy) {
            var oRouter = this;
            var aArguments = arguments;
            var fnNavigate = function(){
            	Router.prototype.navTo.apply(oRouter, aArguments);
            };
            
            var sContext = this.getContext();
            
            if(this._fnRoutingCallback){
            	this._fnRoutingCallback(fnNavigate, sRoute, sContext);
            } else {
            	fnNavigate();
            }            
        },
        
        /*silentReverse : function() {
            var oHistory = History.getInstance();
            if (oHistory.getDirection() === "Backwards") {
                window.history.go(1);
            } else if (oHistory.getDirection() === "NewEntry") {
                window.history.go(-1);
            } else {
                this.validation = true;
            }
        },*/
        
        
		/**
		 * Will trigger routing events + place targets for routes matching the string
		 * Redefinition of S***UI5 method, to invoke a navigation allowed checker
		 *
		 * @param {string} sNewHash a new hash
		 * @protected
		 */
		parse : function (sNewHash) {
            var oRouter = this;
            var fnNavigate = function(){
            	Router.prototype.parse.apply(oRouter, [sNewHash]);
            };
            
            // if(this._fnTitleChangeCallback){
            //     this._fnTitleChangeCallback();
            // }
            if(this._fnRoutingCallback){
            	this._fnRoutingCallback(fnNavigate);
            }else{
            	fnNavigate();
            }			
		},
        
        /**
         * Sets the routing callback to be executed before any routing.
         * 
         * @public
         * @name sap.ino.commons.application.Router.setRoutingCallback
         * @function
         * 
         * @param {function} fnCallback, the callback function
         * @returns {void}
         */
        setRoutingCallback : function(fnCallback) {
           this._fnRoutingCallback = fnCallback;
        },
        
        /**
         * Sets the close callback to be executed before a browser window/tab is closed.
         * The function also removes the current event handler if set
         * 
         * @public
         * @name sap.ino.commons.application.Router.setCloseCallback
         * @function
         * 
         * @param {function} fnCallback, the callback function
         * @returns {void}
         */
        setCloseCallback : function(fnCallback) {
          //remove current handler
          if(this._fnCloseCallback){
        	 jQuery(window).off('beforeunload', this._fnCloseCallback);
          }
          //set new handler
          this._fnCloseCallback = fnCallback;
          jQuery(window).on('beforeunload', this._fnCloseCallback);
        }
        
        // setTitleChangeCallback : function(fnCallback){
        //     this._fnTitleChangeCallback = fnCallback;
        // }
    });
});
}; // end of sap/ino/commons/application/Router.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.application.WebAnalytics') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.commons.application.WebAnalytics");

jQuery.sap.declare('sap.ino.commons.application.WebAnalytics'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/application/WebAnalytics",[], function() {
	"use strict";

	var SWACustomEvent = {
		campaignView: "CAMPAIGN",
		ideaView: "IDEA",
		wallView: "WALL"
	};

	sap.ino.commons.application.WebAnalytics = {

		start: function(oConfiguration) {

			var bTrackingActive = oConfiguration.isComponentActive('sap.ino.config.SWA_ACTIVE');
			if (!bTrackingActive) {
				return;
			}

			var bClickActive = oConfiguration.isComponentActive('sap.ino.config.SWA_CLICK_ACTIVE');

			var iDNTLevel = 1;
			var sDNTLevel = oConfiguration.getSystemSetting('sap.ino.config.SWA_DNT_LEVEL');
			if (sDNTLevel) {
				iDNTLevel = parseInt(sDNTLevel, 0);
			}

			var sBaseURL = oConfiguration.getSWABaseURL();
			var sLoggingURL = oConfiguration.getSWATrackerURL();

			window.swa = {
				pubToken: 'HCO_INO',
				baseUrl: sBaseURL,
				loggingUrl: sLoggingURL,
				dntLevel: iDNTLevel,
				bannerEnabled: false,
				loggingEnabled: bTrackingActive,
				clicksEnabled: false,
				pageLoadEnabled: true,
				customEventsEnabled: true,
				visitorCookieDuration: 7776000000
			};
			// 	window.swa = {
			// 		pubToken: 'd5f11c9c-4793-73e2-ba8a-bbab74e0f39d',
			// 		baseUrl: "https://webanalytics.cfapps.eu10.hana.ondemand.com/tracker/",
			// 		loggingUrl: "https://webanalytics.cfapps.eu10.hana.ondemand.com/tracker/",
			// 		dntLevel : iDNTLevel,
			// 		bannerEnabled: false,
			// 		loggingEnabled: bTrackingActive,
			// 		clicksEnabled: false,
			// 		pageLoadEnabled: true,
			// 		customEventsEnabled: true,  
			// 		visitorCookieDuration: 7776000000
			// 	}; 
			//the initializer code
			var d = document,
				g = d.createElement('script'),
				s = d.getElementsByTagName('script')[0];
			g.type = 'text/javascript';
			g.defer = true;
			g.async = true;
			g.src = window.swa.baseUrl + 'js/privacy.js';
			g.onload = function() {
                window.swa.trackLoad =  function() {
				window.Matomo.getAsyncTracker().disableAlwaysUseSendBeacon();
				if ((window.swa.loggingEnabled) && (window.swa.pageLoadEnabled) && (typeof window.Piwik !== "undefined")) {
					window.Matomo.getAsyncTracker().trackPageView();
				}};	
			};			
			s.parentNode.insertBefore(g, s);

		},

		stop: function() {
			if (window.swa) {
				window.swa.loggingEnabled = false;
				window.swa.disable();
			}
		},

		piwikPromise: function() {
			return new Promise(function(fnResolve, fnReject) {
				//Check if the data is already on the client
				var iCounter = 0;
				window.Matomo.getAsyncTracker().disableAlwaysUseSendBeacon();
				var iInterval = setInterval(function() {
					if (window.swa.trackCustomEvent && window.Piwik) {
						clearInterval(iInterval);
						fnResolve();
					}
					iCounter++;
					if (iCounter > 20) {
						clearInterval(iInterval);
						fnReject();
					}
				}, 1000);
			});
		},

		logCampaignView: function(iId) {
			//if SWA is not there, there is nothing to do
			if (window.swa) {
				sap.ino.commons.application.WebAnalytics.piwikPromise().then(
					function() {
						window.swa.trackCustomEvent(SWACustomEvent.campaignView, iId);
					},
					function() {
						throw "Event could not be logged: " + SWACustomEvent.campaignView + " " + iId;
					}
				);
			}
		},

		logIdeaView: function(iId) {
			//if SWA is not there, there is nothing to do
			if (window.swa) {
				sap.ino.commons.application.WebAnalytics.piwikPromise().then(
					function() {
						window.swa.trackCustomEvent(SWACustomEvent.ideaView, iId);
					},
					function() {
						throw "Event could not be logged: " + SWACustomEvent.ideaView + " " + iId;
					}
				);
			}
		},

		logWallView: function(iId) {
			//if SWA is not there, there is nothing to do
			if (window.swa) {
				sap.ino.commons.application.WebAnalytics.piwikPromise().then(
					function() {
						window.swa.trackCustomEvent(SWACustomEvent.wallView, iId);
					},
					function() {
						throw "Event could not be logged: " + SWACustomEvent.wallView + " " + iId;
					}
				);
			}
		}
	};

	return sap.ino.commons.application.WebAnalytics;
});
}; // end of sap/ino/commons/application/WebAnalytics.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.formatters.BaseFormatter') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.formatters.BaseFormatter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.Date'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FormatException'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.NumberFormat'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Locale'); // unlisted dependency retained
jQuery.sap.require('sap.m.ListType'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/formatters/BaseFormatter",[
    "sap/ino/commons/application/Configuration",
    "sap/ui/base/Object",
    "sap/ui/core/MessageType",
    "sap/ui/core/IconPool",
    "sap/ui/model/type/Date",
    "sap/ui/model/FormatException",
    "sap/ui/Device",
    "sap/ui/core/format/NumberFormat",
    "sap/ui/core/format/DateFormat",
    "sap/ui/core/Locale",
    "sap/m/ListType"
], function(Configuration,
	Object,
	MessageType,
	IconPool,
	DateType,
	FormatException,
	Device,
	NumberFormat,
	DateFormat,
	Locale,
	ListType) {
	"use strict";

	var mMessageTypeIcons = {};
	mMessageTypeIcons[MessageType.Error] = "message-error";
	mMessageTypeIcons[MessageType.Warning] = "message-warning";
	mMessageTypeIcons[MessageType.Success] = "message-success";
	mMessageTypeIcons[MessageType.Information] = "message-information";

	var mMessageTypePriority = {};
	mMessageTypePriority[MessageType.Error] = 1;
	mMessageTypePriority[MessageType.Warning] = 2;
	mMessageTypePriority[MessageType.Success] = 3;
	mMessageTypePriority[MessageType.Information] = 4;

	function mostSevereMessageType(aMessages) {
		if (aMessages.length === 0) {
			return undefined;
		}
		return aMessages.reduce(function(sMostSevereMessageType, oMessage) {
			if (mMessageTypePriority[oMessage.type] === undefined) {
				return sMostSevereMessageType;
			}
			if (mMessageTypePriority[oMessage.type] < mMessageTypePriority[sMostSevereMessageType]) {
				return oMessage.type;
			} else {
				return sMostSevereMessageType;
			}
		}, MessageType.Information);
	}

	function getCompanyViewTxt() {
		return Configuration.getSysCompanyView() === "1" ? "LIST_TIT_FILTER_COMPANY_VIEW_HEADER" : "LIST_TIT_FILTER_ORGANIZATION_VIEW_HEADER";
	}

	var oBaseFormatter = Object.extend("sap.ino.commons.formatters.BaseFormatter", {});

	var _oRelativeDateFormatter;
	var fnGetRelativeDateFormatter = function(that) {
		if (!_oRelativeDateFormatter) {
			if (that.getOwnerComponent) {
				_oRelativeDateFormatter = DateFormat.getDateInstance({
					relative: true
				}, new Locale(that.getOwnerComponent().getModel("user").getProperty("/data/LOCALE")));
			} else {
				// currently no locale available
				return DateFormat.getDateInstance({
					relative: true
				});
			}
		}

		return _oRelativeDateFormatter;
	};

	var _oRelativeDateAutoFormatter;
	var fnGetRelativeDateAutoFormatter = function(that) {
		if (!_oRelativeDateAutoFormatter) {
			if (that.getOwnerComponent) {
				_oRelativeDateAutoFormatter = DateFormat.getDateInstance({
					relative: true,
					relativeScale: "auto"
				}, new Locale(that.getOwnerComponent().getModel("user").getProperty("/data/LOCALE")));
			} else {
				// currently no locale available
				return DateFormat.getDateInstance({
					relative: true,
					relativeScale: "auto"
				});
			}
		}

		return _oRelativeDateAutoFormatter;
	};

	var _oDateFormatter;
	var fnGetDateFormatter = function(that) {
		if (!_oDateFormatter) {
			if (that.getOwnerComponent) {
				_oDateFormatter = DateFormat.getDateInstance({
					relative: false
				}, new Locale(that.getOwnerComponent().getModel("user").getProperty("/data/LOCALE")));
			} else {
				// currently no locale available
				return DateFormat.getDateInstance({
					relative: false
				});
			}
		}

		return _oDateFormatter;
	};

	var _oTimeFormatter;
	var fnGetTimeFormatter = function(that) {
		if (!_oTimeFormatter) {
			if (that.getOwnerComponent) {
				_oTimeFormatter = DateFormat.getTimeInstance({
					relative: false,
					format: 'Hm'
				}, new Locale(that.getOwnerComponent().getModel("user").getProperty("/data/LOCALE")));
			} else {
				// currently no locale available
				return DateFormat.getTimeInstance({
					relative: false,
					format: 'Hm'
				});
			}
		}

		return _oTimeFormatter;
	};

	/*
	 * Buttons formatters
	 */
	oBaseFormatter.showCreateButton = function(iOpen, iSubmittable) {
		return iOpen + iSubmittable === 2;
	};

	oBaseFormatter.titleImageURL = function(iImageId, oChangedAt) {
		var sSearch = oChangedAt instanceof Date ? '&t=' + oChangedAt.getTime() : '';
		var sUrl = Configuration.getAttachmentTitleImageDownloadURL(iImageId, null, 'small');
		if (sSearch) {
			return sUrl + sSearch;
		}
		return sUrl;
	};

	oBaseFormatter.campaignTitleImageURL = function(iImageId, oChangedAt) {
		var sSearch = oChangedAt instanceof Date ? '&t=' + oChangedAt.getTime() : '';
		var sUrl = Configuration.getAttachmentTitleImageDownloadURL(iImageId, null, 'large');
		if (sSearch) {
			return sUrl + sSearch;
		}
		return sUrl;
	};

	oBaseFormatter.campaignListImageURL = function(iTitleImageId, iCampaignListId) {
		if (iCampaignListId === null) {
			return Configuration.getAttachmentTitleImageDownloadURL(iTitleImageId, null, 'small');
		} else {
			return Configuration.getAttachmentTitleImageDownloadURL(iCampaignListId, null, 'small');
		}
	};

	oBaseFormatter.parameterizedText = function(sText) {
		var args = Array.prototype.slice.call(arguments);
		args.shift();
		if (sText) {
			jQuery.each(args || [], function(iIndex, sParameter) {
				sText = sText.replace(new RegExp("\\{" + iIndex + "\\}", "g"), sParameter || "");
			});
		}
		return sText;
	};

	oBaseFormatter.TagGroupName = function(sText, aParameters) {
		if (aParameters) {
			return this.getText(sText, aParameters);
		} else {
			return this.getText(sText);
		}
		return "";
	};

	oBaseFormatter.TagGroupLinkEnable = function(aTagGroup, sTagGroup) {
		var tagGroup = {};
		var tagGroupKey = [];
		aTagGroup.forEach(function(item, index) {
			if (!tagGroup[item.ROOTGROUPID]) {
				tagGroup[item.ROOTGROUPID] = {};
				tagGroupKey.push(item.ROOTGROUPID);
			}
		});
		return !!~tagGroupKey.indexOf(sTagGroup) || (tagGroupKey.length < 5);
	};

	oBaseFormatter.text = function(sText, aParameters) {
	    if(!sText){
	        return "";
	    }
		if (aParameters) {
			return this.getText(sText, aParameters);
		} else {
			return this.getText(sText);
		}
		return "";
	};

	oBaseFormatter.getManageContinuesText = function(sText, aParameters) {
		if (aParameters) {
			return this.getText("PERSONALIZE_FILTER_ACTIVE_IDEA_LABEL");
		} else {
			return this.getText("PERSONALIZE_MANAGED_ALL_IDEA_LABEL");
		}
		return "";
	};
	oBaseFormatter.getManageContinuesTooltip = function(sText, aParameters) {
		if (aParameters) {
			return this.getText("PERSONALIZE_MANAGED_ALL_IDEA_LABEL");
		} else {
			return this.getText("PERSONALIZE_FILTER_ACTIVE_IDEA_LABEL");
		}
		return "";
	};

	oBaseFormatter.getManageContinuesToggle = function(sText, aParameters) {
		if (aParameters) {
			return true;
		} else {
			return false;
		}
		return "";
	};

	oBaseFormatter.getManageTextTooltip = function(sText, aParameters) {
		if (aParameters) {
			return this.getText("PERSONALIZE_FILTER_ACTIVE_IDEA_LABEL_TOOLTIP");
		} else {
			return this.getText("PERSONALIZE_MANAGED_ALL_IDEA_LABEL_TOOLTIP");
		}
		return "";
	};

	oBaseFormatter.campaignListCountNumber = function(aParameters) {
		if (aParameters) {
			var CampaignFilterModel = Configuration.getCampaignFilterCount();
			return CampaignFilterModel[aParameters];
		}

	};
	oBaseFormatter.ideaListCountNumber = function(aParameters) {
		if (aParameters) {
			var IdeaFilterModel = Configuration.getIdeaFilterCountData();
			return IdeaFilterModel[aParameters];
		}

	};
	oBaseFormatter.color = function(sColor) {
		if (sColor && sColor.length === 6) {
			return "#" + sColor;
		} else {
			return "#FFFFFF";
		}
	};

	oBaseFormatter.isEqual = function(vA, vB) {
		return vA === vB;
	};

	oBaseFormatter.system = function(vSystem) {
		var bShow = false;
		if (!vSystem) {
			bShow = true;
		} else if (jQuery.type(vSystem) === "array") {
			jQuery.each(vSystem, function(iIdx, sSystem) {
				bShow = bShow || Device.system[sSystem];
			});
		} else if (jQuery.type(vSystem) === "string") {
			bShow = Device.system[vSystem];
		}

		return !!bShow;
	};

	oBaseFormatter.mostSevereMessageTypeIcon = function(aMessage) {
		var sMessageType = mostSevereMessageType(aMessage);
		return "sap-icon://" + mMessageTypeIcons[sMessageType] || "";
	};

	oBaseFormatter.uploadEnabled = function(iId, bContentEditable, bEdit) {
		if (bEdit === undefined) {
			var bEditable = this.getView().data("editable");
			bEdit = bEditable === "true" || bEditable === null;
		}
		return (bEdit !== false) && (iId < 0 || bContentEditable !== false);
	};

	oBaseFormatter.downloadUrl = function(iAttachmentId, sFileName) {
		if (!sFileName) {
			return Configuration.getAttachmentDownloadURL(iAttachmentId);
		}
		return Configuration.getAttachmentDownloadURL(iAttachmentId) + "?filename=" + encodeURIComponent(sFileName);
	};

	oBaseFormatter.previewUrl = function(sMediaType, iAttachmentId) {
		if (sMediaType && sMediaType.indexOf("image/") === 0) {
			return Configuration.getAttachmentDownloadURL(iAttachmentId);
		}
		return undefined;
	};

	oBaseFormatter.attachmentEditable = function(iAttachmentAssignmentId) {
		return iAttachmentAssignmentId > 0;
	};

	oBaseFormatter.attachmentDeletable = function(iAttachmentAssignmentId, bContentEditable, bEdit) {
		if (bEdit === undefined && this.getView().data) {
			var bEditable = this.getView().data("editable");
			bEdit = bEditable === "true" || bEditable === null;
		}
		return (bEdit !== false) && (iAttachmentAssignmentId < 0 || bContentEditable !== false);
	};

	oBaseFormatter.navigationLink = function(sRouteName, oParameter) {
		return this.getOwnerComponent().getNavigationLink(sRouteName, oParameter);
	};

	oBaseFormatter.commentSaveTooltip = function(iCommentHasPrivilege, iCanComment, iOpenStatusSetting) {
		var bStatusComment = iOpenStatusSetting > 0 && iCommentHasPrivilege > 0 || !iOpenStatusSetting;

		if (!(bStatusComment && iCanComment > 0)) {
			return this.getText("MSG_COMMENT_HAS_PRIVILEGE");
		} else {
			return this.getText("MSG_COMMENT_SAVE_BUTTON");
		}
	};

	oBaseFormatter.setIdeaListLatestUpdateBackGroundColor = function(iCreate, iUpdate, iComment, iStatusChange) {
		if (!iCreate && !iUpdate && !iComment && !iStatusChange) {
			return "LATESTUPDATE_BACKGROUND";
		} else {
			return "null";
		}
	};

	oBaseFormatter.setMgrCoachBackGroundColor = function(bIdeaComment, createdID, aCoach, aCampaignManagers) {
		//var sOldClass = "sapInoCommentList";
		var oRouter = this.getRouter();

		if (!bIdeaComment && oRouter.getContext().indexOf("sectionComments") < 0) {
			return "null";
		}

		var aIsPersonCoach = [];
		var aIsPersonManager = [];
		if (aCoach && aCoach.length > 0) {
			aIsPersonCoach = aCoach.filter(function(coach) {
				return coach.IDENTITY_ID === createdID;
			});
		}
		if (aCampaignManagers && aCampaignManagers.length > 0) {
			aIsPersonManager = aCampaignManagers.filter(function(manager) {
				return manager.IDENTITY_ID === createdID;
			});
		}
		if (aIsPersonManager.length > 0 || aIsPersonCoach.length > 0) {
			return "MGRCOACH_BACKGROUND";
		} else {
			return "null";
		}

	};
	/**
	 *
	 * @param imageId
	 * @param bIsImage if set true, and imageId is null, empty string will be returned
	 * @returns {*}
	 */
	oBaseFormatter.userIcon = function(imageId, oChangedAt) {
		if (!imageId || !oChangedAt) {
			return IconPool.getIconURI("person-placeholder");
		}
		var sSearch = oChangedAt instanceof Date ? '&t=' + oChangedAt.getTime() : '&t=' + (new Date(oChangedAt)).getTime();
		var sUrl = Configuration.getAttachmentDownloadURL(imageId, null, 'small');
		if (sSearch) {
			return sUrl + sSearch;
		}
		return sUrl;
	};

	oBaseFormatter.userIconEdit = function(imageId, oChangedAt) {
		if (!imageId) {
			return IconPool.getIconURI("person-placeholder");
		}
		var sSearch = oChangedAt instanceof Date ? '&t=' + oChangedAt.getTime() : '';
		var sUrl = Configuration.getAttachmentDownloadURL(imageId, null, 'large');
		if (sSearch) {
			return sUrl + sSearch;
		}
		return sUrl;
	};

	oBaseFormatter.feedIdentityCard = function(FEED_CODE, phone) {
		if (FEED_CODE === "DATE_REACHED_SUBMIT_FROM" || FEED_CODE === "DATE_REACHED_SUBMIT_TO" || FEED_CODE === "DATE_REACHED_VALID_TO" ||
			FEED_CODE === "DATE_REACHED_REGISTER_FROM" || FEED_CODE === "DATE_REACHED_REGISTER_TO" || phone) {
			return false;
		}
	};

	oBaseFormatter.feedNoIdentityCard = function(FEED_CODE, phone) {
		if (phone) {
			return false;
		}

		if (FEED_CODE === "DATE_REACHED_SUBMIT_FROM" || FEED_CODE === "DATE_REACHED_SUBMIT_TO" || FEED_CODE === "DATE_REACHED_VALID_TO" ||
			FEED_CODE === "DATE_REACHED_REGISTER_FROM" || FEED_CODE === "DATE_REACHED_REGISTER_TO") {
			return true;
		}
		return false;
	};

	oBaseFormatter.feedLink = function(FEED_CODE, ACTOR_ID) {
		if (ACTOR_ID <= 0) {
			return false;
		}
		if (FEED_CODE === "DATE_REACHED_SUBMIT_FROM" || FEED_CODE === "DATE_REACHED_SUBMIT_TO" || FEED_CODE === "DATE_REACHED_VALID_TO" ||
			FEED_CODE === "DATE_REACHED_REGISTER_FROM" || FEED_CODE === "DATE_REACHED_REGISTER_TO") {
			return false;
		}

	};

	oBaseFormatter.userImage = function(imageId) {
		return !imageId ? "" : Configuration.getAttachmentTitleImageDownloadURL(imageId);
	};

	oBaseFormatter.isValidEmailAddr = function(sMailAddr) {
		//var reg = /^(\w)+(\.\w+)*@(\w)+((\.\w+)+)$/;
		if (!sMailAddr || typeof sMailAddr !== "string") {
			return false;
		}
		return /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/g.test(sMailAddr.trim());
	};

	oBaseFormatter.isUsageReportingActive = function() {
		return Configuration.isUsageReportingActive();
	};

	oBaseFormatter.returnIfUsageReportingActive = function(vObject) {
		return Configuration.isUsageReportingActive() ? vObject : undefined;
	};

	oBaseFormatter.toInt = function(sNumber) {
		var iNumber = parseInt(sNumber, 10);
		if (isNaN(iNumber)) {
			iNumber = 0;
		} else {
			throw new FormatException("Don't know how to format " + sNumber + " to int");
		}
		return iNumber;
	};

	oBaseFormatter.toFloat = function(sNumber) {
		var iNumber = parseFloat(sNumber);
		if (isNaN(iNumber)) {
			iNumber = 0;
		} else {
			throw new FormatException("Don't know how to format " + sNumber + " to float");
		}
		return iNumber;
	};

	oBaseFormatter.toString = function(oNumber) {
		return oNumber.toString();
	};

	oBaseFormatter.notEmpty = function(vObject) {
		if (jQuery.type(vObject) === "array") {
			return vObject.length > 0;
		} else {
			return !!vObject;
		}
	};

	oBaseFormatter.toRelativeDate = function(oDate) {
		if (!oDate) {
			return "";
		} else if (typeof(oDate) === "number") {
			oDate = new Date(oDate);
		} else if (typeof(oDate) === "string") {
			oDate = new Date(oDate);
		} else if (typeof(oDate) === "object") {
			//ok              
		} else {
			throw new FormatException("Don't know how to format " + oDate + " to relative Date");
		}

		return fnGetRelativeDateFormatter(this).format(oDate);
	};

	oBaseFormatter.toRelativeDateAuto = function(oDate) {
		if (!oDate) {
			return "";
		} else if (typeof(oDate) === "number") {
			oDate = new Date(oDate);
		} else if (typeof(oDate) === "string") {
			oDate = new Date(oDate);
		} else if (typeof(oDate) === "object") {
			//ok              
		} else {
			throw new FormatException("Don't know how to format " + oDate + " to relative Date (Auto)");
		}

		return fnGetRelativeDateAutoFormatter(this).format(oDate);
	};

	oBaseFormatter.toDate = function(oDate) {
		if (!oDate) {
			return "";
		} else if (typeof(oDate) === "number") {
			oDate = new Date(oDate);
		} else if (typeof(oDate) === "string") {
			oDate = new Date(oDate);
		} else if (typeof(oDate) === "object") {
			//ok              
		} else {
			throw new FormatException("Don't know how to format " + oDate + " to Date");
		}

		return fnGetDateFormatter(this).format(oDate);
	};

	oBaseFormatter.toDateTime = function(oDateTime, bWithoutSpan) {
		if (!oDateTime) {
			return "";
		} else if (typeof(oDateTime) === "number") {
			oDateTime = new Date(oDateTime);
		} else if (typeof(oDateTime) === "string") {
			oDateTime = new Date(oDateTime);
		} else if (typeof(oDateTime) === "object") {
			//ok              
		} else {
			throw new FormatException("Don't know how to format " + oDateTime + " to oDateTime");
		}

		var sDate = fnGetDateFormatter(this).format(oDateTime);
		var sTime = fnGetTimeFormatter(this).format(oDateTime);
		var bRtl = sap.ui.getCore().getConfiguration().getRTL();
		if (bRtl) {
			return sTime + " " + sDate;
		}
		if(bWithoutSpan){
		    return sDate + " " + sTime ;
		}
		return "<span style='display:inline-block'>" + sDate + " " + sTime + "</span>";
	};

	oBaseFormatter.isVisible = function(oDate) {
		return !!oDate;
	};

	oBaseFormatter.isFutureDate = function(oDate) {
		if (!oDate) {
			return false;
		} else if (typeof(oDate) === "number") {
			oDate = new Date(oDate);
		} else if (typeof(oDate) === "string") {
			oDate = new Date(oDate);
		} else if (typeof(oDate) === "object") {
			//ok              
		} else {
			throw new FormatException("Don't know how to format " + oDate);
		}

		var now = new Date();
		var iNowSeconds = Date.UTC(now.getFullYear(), now.getMonth(), now.getDate());

		return oDate.getTime() > iNowSeconds;
	};

	oBaseFormatter.toBool = function(sNumber) {
		return parseInt(sNumber, 10) === 1;
	};

	oBaseFormatter.toBoolNot = function(sNumber) {
		return parseInt(sNumber, 10) !== 1;
	};

	oBaseFormatter.toBoolText = function(sNumber) {
		if (typeof sNumber === "boolean") {
			sNumber = (sNumber === true ? 1 : 0);
		}
		return parseInt(sNumber, 10) === 1 ? this.getText("BOOL_FLD_TEXT_YES") : this.getText("BOOL_FLD_TEXT_NO");
	};

	oBaseFormatter.toBoolInt = function(sNumber) {
		if (typeof sNumber === "boolean") {
			return (sNumber === true ? 1 : 0);
		}
		var iNumber = parseInt(sNumber, 10);
		if (isNaN(iNumber) || iNumber === 0) {
			return 0;
		} else {
			return 1;
		}
	};

	oBaseFormatter.atLeastOne = function(sNumber) {
		return parseInt(sNumber, 10) || 1;
	};

	// oBaseFormatter.notEmpty = function(vValue) {
	//     return !!vValue;
	// };

	oBaseFormatter.asPercent = function(vValue) {
		return this.getText("PERCENTAGE_FLD_TEXT", [(vValue || 0)]);
	};

	oBaseFormatter.atLeastZero = function(vValue) {
		return (vValue || 0.0);
	};

	oBaseFormatter.convertToInt = function(fNumber) {
		return Math.floor(fNumber);
	};

	oBaseFormatter.count = function(nCount) {
		if (nCount) {
			var oNumberFormat = NumberFormat.getIntegerInstance({
				style: "short"
			});

			return oNumberFormat.format(nCount);
		}

		return "0";
	};

	oBaseFormatter.isIdIncluded = function(iId, aObjects) {
		aObjects = aObjects ? aObjects : [];
		return jQuery.grep(aObjects, function(o) {
			return o.ID === iId;
		}).length > 0;
	};

	oBaseFormatter.isIdNotIncluded = function(iId, aObjects) {
		aObjects = aObjects ? aObjects : [];
		return jQuery.grep(aObjects, function(o) {
			return o.ID === iId;
		}).length === 0;
	};

	oBaseFormatter.incativeWhenIncluded = function(iId, aObjects) {
		return this.formatter.isIdNotIncluded(iId, aObjects) ? ListType.Active : ListType.Inactive;
	};

	oBaseFormatter.expertRolesKeyToText = function(aRole) {
		var that = this;
		var aRoleText = [];
		jQuery.each(aRole, function(i, sRole) {
			switch (sRole) {
				case "SUBMITTER":
					aRoleText.push(that.getText("CTRL_EXPERTS_GRP_SUBMITTER"));
					break;
				case "CONTRIBUTOR":
					aRoleText.push(that.getText("CTRL_EXPERTS_GRP_CONTRIBUTOR"));
					break;
				case "COMMENTATOR":
					aRoleText.push(that.getText("CTRL_EXPERTS_GRP_COMMENTATOR"));
					break;
				case "COACH":
					aRoleText.push(that.getText("CTRL_EXPERTS_GRP_COACH"));
					break;
				case "EVALUATOR":
					aRoleText.push(that.getText("CTRL_EXPERTS_GRP_EVALUATOR"));
					break;
				default:
					aRoleText.push(sRole);
			}
		});
		return aRoleText.join(", ");
	};

	oBaseFormatter.wrapHTML = function(sHTML) {
		return "<div>" + (sHTML || "") + "</div>";
	};

	oBaseFormatter.wrapToHTML = function(sHtml) {
		if (sHtml && !(/^<(\w+)>.*<\/\1>$/gim.test(sHtml))) {
			return "<p>" + sHtml + "</p>";
		}
		return sHtml;
	};

	oBaseFormatter.decodeURI = function(sURI) {
		return decodeURIComponent(sURI);
	};

	oBaseFormatter.termsConditions = function(sCode) {
		if (sCode === null || sCode === undefined) {
			return undefined;
		}
		var oModel = this.getView().getModel("module");
		return oModel.getProperty(sCode);
	};

	oBaseFormatter.generateDescription = function(sOrganization, sValidTo, sLastLogin) {
		var that = this;
// 		if (!sValidTo) {
// 			sValidTo = new Date(9999, 11, 31);
// 		}
		if (sOrganization) {
		    if (sLastLogin) {
		        return jQuery.sap.formatMessage(that.getText("INO_IDENTITY_DATA_VALIDATIONTO"), sOrganization, oBaseFormatter.toDate(sValidTo), oBaseFormatter.toDateTime(sLastLogin,true));
		    }
			return jQuery.sap.formatMessage(that.getText("INO_IDENTITY_DATA_VALIDATIONTO_WITHOUT_LAST_LOGIN"), sOrganization, oBaseFormatter.toDate(sValidTo));
		}
		if (sLastLogin) {
		    return jQuery.sap.formatMessage(that.getText("INO_IDENTITY_DATA_VALIDATIONTO_WITHOUT_ORGANIZATION"),oBaseFormatter.toDate(sValidTo), oBaseFormatter.toDateTime(sLastLogin,true));
		}
		return jQuery.sap.formatMessage(that.getText("INO_IDENTITY_DATA_VALIDATIONTO_WITHOUT_ORGANIZATION_WITHOUT_LAST_LOGIN"), oBaseFormatter.toDate(sValidTo));
	};
	oBaseFormatter.checkVisibleText = function(sText, aParameters) {
		if (aParameters) {
			return this.getText(sText, aParameters);
		} else {
			if (sText !== "manage" &&
				sText !== "draft" && sText !== "publish" &&
				sText !== "submittable") {
				return true;
			}
		}
		return false;
	};
	oBaseFormatter.ideaCheckVisibleText = function(sText, aParameters) {
		if (aParameters) {
			return this.getText(sText, aParameters);
		} else {
			if (sText !== "manage" &&
				sText !== "follow" && sText !== "unassigned" &&
				sText !== "coachme" &&
				sText !== "evaldone" &&
				sText !== "managedcompleted") {
				return true;
			}
		}
		return false;
	};
	oBaseFormatter.checkVisibleText2 = function(sText, aParameters) {
		if (aParameters) {
			return this.getText(sText, aParameters);
		} else {
			if (sText !== "all" &&
				sText !== "active" && sText !== "open" &&
				sText !== "future" && sText !== "past" &&
				sText !== "registered") {
				return true;
			}
		}
		return false;
	};
	oBaseFormatter.ideaCheckVisibleText2 = function(sText, aParameters) {
		if (aParameters) {
			return this.getText(sText, aParameters);
		} else {
			if (sText !== "all" &&
				sText !== "my" && sText !== "voted" &&
				sText !== "commented" &&
				sText !== "vote" &&
				sText !== "eval" &&
				sText !== "evalpending" &&
				sText !== "evalopen" &&
				sText !== "completed") {
				return true;
			}
		}
		return false;
	};
	oBaseFormatter.parentText = function(sText, aParameters) {
		if (aParameters) {
			return this.getText(sText, aParameters);
		} else {
			if (sText === "CAMPAIGN_LIST_MIT_ALL") {
				return "Campaigns";
			}
		}
		return "";
	};
	oBaseFormatter.parentText2 = function(sText, aParameters) {
		if (aParameters) {
			return this.getText(sText, aParameters);
		} else {
			if (sText === "CAMPAIGN_LIST_MIT_MANAGE") {
				return "Managed Campaigns";
			}
		}
		return "";
	};
	oBaseFormatter.checkList = function(aParameters) {
		if (aParameters === "CAMPAIGN_LIST_TIT_NAME" || aParameters === "IDEA_LIST_TIT_NAME") {
			return true;
		}
		return false;
	};

	oBaseFormatter.i18nText = function(sText) {
		var i18n = this.getModel('i18n');
		return i18n.getResourceBundle().getText(sText) || '';
	};
	
	oBaseFormatter.formatGlobalSearchKey = function(sText, bNotFormatter) {
	    if(bNotFormatter){
	        return sText;
	    }
		var i18n = this.getModel('i18n');
		return i18n.getResourceBundle().getText(sText) || '';
	};

	oBaseFormatter.URIdecoding = function(text) {
		return text && window.decodeURIComponent(text) || '';
	};

	oBaseFormatter.anonymousIconFormatter = function(anonymousCode) {
		if (anonymousCode === "ALL") {
			return "sap-icon://theater";
		} else if (anonymousCode === "PARTLY") {
			return "sap-icon://personnel-view";
		}
	};
	oBaseFormatter.anonymousIconVisibleFormatter = function(anonymousCode) {
		if (anonymousCode === null) {
			return false;
		} else {
			return true;
		}
	};
	oBaseFormatter.anonymousIconTooltipFormatter = function(anonymousCode) {
		if (anonymousCode === "ALL") {
			return this.getText("IDEA_ANONYMOUS_FOR_ALL");
		} else if (anonymousCode === "PARTLY") {
			return this.getText("IDEA_NOT_ANONYMOUS_CAMPAIGN_MANAGER");
		}
	};
	oBaseFormatter.anonymousIconLabelFormatter = function(anonymousCode) {
		if (anonymousCode === "ALL") {
			return this.getText("IDEA_ANONYMOUS_FOR_ALL");
		} else if (anonymousCode === "PARTLY") {
			return this.getText("IDEA_NOT_ANONYMOUS_CAMPAIGN_MANAGER");
		}
	};
	oBaseFormatter.adminFormTitle = function(adminField) {
		if (adminField && adminField.length > 0) {
			var res = adminField[0].FORM_DEFAULT_TEXT;
			return res;
		} else {
			return "";
		}
	};
	oBaseFormatter.ideaPersonalizationFilterTextInDialog = function(typeCode) {
		switch (typeCode) {
			case 'CAMPAIGN':
				return this.getText("LIST_TIT_FILTER_CAMPAIGN_HEADER");
			case 'CUSTOM_IDEA_FORM':
				return this.getText("LIST_TIT_FILTER_CAMPAIGN_FORM_HEADER");
			case 'PHASE':
				return this.getText("LIST_TIT_FILTER_PHASE_HEADER");
			case 'STATUS_TYPE':
				return this.getText("LIST_TIT_FILTER_STATUS_HEADER");
			case 'STATUS':
				return this.getText("LIST_TIT_FILTER_SUB_STATUS");
			case 'VOTE_NUMBER':
				return this.getText("LIST_TIT_FILTER_VOTE_NUMBER");
			case 'RESPONSIBILITY_LIST':
				return this.getText("LIST_TIT_FILTER_RESPONSIBILITY_LIST_HEADER");
			case 'AUTHOR':
				return this.getText("LIST_TIT_FILTER_AUTHOR_HEADER");
			case 'COACH':
				return this.getText("LIST_TIT_FILTER_COACH_HEADER");
			case 'DUE_DATE':
				return this.getText("LIST_TIT_FILTER_DUE_HEADER");
			case 'LATEST_UPDATE':
				return this.getText("LIST_TIT_FILTER_LATEST_UPDATE_HEADER");
			case 'COMPANY_VIEW':
				return this.getText(getCompanyViewTxt());
		}
	};

	oBaseFormatter.quickLinkStandardListVisible = function(sText, sBackOffice) {
		if (sBackOffice) {
			if (sText !== "all" &&
				sText !== "my" && sText !== "voted" &&
				sText !== "commented" &&
				sText !== "vote" &&
				sText !== "eval" &&
				sText !== "evalpending" &&
				sText !== "evalopen" &&
				sText !== "completed") {
				return true;
			}
		} else {
			if (sText !== "manage" &&
				sText !== "follow" && sText !== "unassigned" &&
				sText !== "coachme" &&
				sText !== "evaldone" &&
				sText !== "managedcompleted") {
				return true;
			}
		}
		return false;
	};
	oBaseFormatter.shortByQuickSortText = function(sQuickSort) {
		if (!sQuickSort) {
			return;
		}
		var aQuickSortSource = this.getListProperty('/QuickSorter');
		var sText;
		aQuickSortSource.forEach(function(item) {
			if (item.ACTION === sQuickSort) {
				sText = item.TEXT;
			}
		});
		return this.getText(sText);
	};

	oBaseFormatter.shortBySortText1 = function(sSort) {
		if (!sSort) {
			return;
		}
		var aSortOrder = sSort.split(",");
		var aSO = aSortOrder[0].split(" ");
		var aQuickSortSource = this.getListProperty('/Sorter/Values');
		var sText;
		aQuickSortSource.forEach(function(item) {
			if (item.ACTION === aSO[0]) {
				sText = item.TEXT;
			}
		});
		return this.getText(sText);
	};

	oBaseFormatter.shortBySortText2 = function(sSort) {
		if (!sSort) {
			return;
		}
		if (sSort.indexOf(",") !== -1) {
			var aSortOrder = sSort.split(",");
			var aSO = aSortOrder[1].split(" ");
			var aQuickSortSource = this.getListProperty('/Sorter/Values');
			var sText;
			aQuickSortSource.forEach(function(item) {
				if (item.ACTION === aSO[0]) {
					sText = item.TEXT;
				}
			});
			return this.getText(sText);
		} else {
			return "";
		}
	};

	oBaseFormatter.shortBySortVisible = function(sSort) {
		if (!sSort) {
			return false;
		}
		if (sSort.indexOf(",") !== -1) {
			return true;
		} else {
			return false;
		}
	};

	oBaseFormatter.quickLinkTextFormate = function(text, linkText, displayLabel) {
		if (linkText) {
			return linkText;
		} else {
			if (displayLabel) {
				return this.getText(text, [displayLabel]);
			} else if(text){
				return this.getText(text);
			}else{
			    return "";
			}
		}
	};

	oBaseFormatter.quickLinkListSelected = function(sAction, nLinkId, sListVariant, sSearchVariant, bNewQuickLink, nSelectId) {
		if (!bNewQuickLink && (sAction === sListVariant || sAction === sSearchVariant)) {
			return true;
		}
		if (bNewQuickLink && nLinkId && nSelectId && nLinkId === nSelectId) {
			return true;
		}
		if (bNewQuickLink && !nSelectId && (sAction === sListVariant || sAction === sSearchVariant)) {
			return true;
		}
		return false;
	};
	oBaseFormatter.commentEnabled = function(iCommentHasPrivilege, iCanComment, iOpenStatusSetting) {
		var bStatusComment = iOpenStatusSetting > 0 && iCommentHasPrivilege > 0 || !iOpenStatusSetting;

		return iCanComment > 0 && bStatusComment;
	};
	oBaseFormatter.disableQuickLinkAllIdeas = function(sText) {
		if (sText === "all" || sText === "manage") {
			return false;
		} else {
			return true;
		}
	};
	oBaseFormatter.formatInsufficientObjectId = function(sText, aParameters) {
		return jQuery.sap.formatMessage(sText, aParameters);
	};
	oBaseFormatter.formatInsufficientObjectExists = function(sId, sObjectName) {
		if (!sObjectName) {
			return Configuration.getBackendRootURL() + "/sap/ino/" + window.location.search;
		}
		var oObjectName = {
			"sap.ino.xs.object.idea.Idea": function(sCampId) {
				return Configuration.getBackendRootURL() + "/sap/ino/" + window.location.search + "#/campaign/" + sCampId;
			}
		};
		return oObjectName[sObjectName](sId);
	};

	oBaseFormatter.getCommunityGroupViewTooltip = function(bGroupView) {
		if (!bGroupView) {
			return this.getText("IDEA_LIST_TIT_NAME_FOR_MY_VIEW");
		} else {
			return this.getText("IDEA_LIST_TIT_NAME");
		}
	};
	oBaseFormatter.getIdeaListTitleText = function(bEnableGroupView, bGroupView) {
		if (!bEnableGroupView) {
			return this.getText("IDEA_LIST_TIT_NAME");
		} else {
			if (!bGroupView) {
				return this.getText("IDEA_LIST_TIT_NAME");
			} else {
				return this.getText("IDEA_LIST_TIT_NAME_FOR_MY_VIEW");
			}
		}

	};
	oBaseFormatter.getCommunityGroupViewToggle = function(bGroupView) {
		if (bGroupView) {
			return true;
		} else {
			return false;
		}
	};

	return oBaseFormatter;
});
}; // end of sap/ino/commons/formatters/BaseFormatter.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.library') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/library",[
    'sap/ui/core/library',
    'sap/m/library'
], function() {
    "use strict";
    
    sap.ui.getCore().initLibrary({
        name : "sap.ino.commons",
        dependencies : ["sap.ui.core", "sap.m"],
        types : [], 
        interfaces : [],
        controls : [
            "sap.ino.commons.application.BaseComponent",
            "sap.ino.commons.application.Configuration",
            "sap.ino.commons.application.Router",
            "sap.ino.commons.application.WebAnalytics",
            
            "sap.ino.commons.formatters.BaseFormatter",
            "sap.ino.commons.formatters.BaseListFormatter",
            "sap.ino.commons.formatters.ListFormatter",
            "sap.ino.commons.formatters.ObjectFormatter",
            "sap.ino.commons.formatters.ObjectListFormatter",
            
            "sap.ino.commons.models.aof.ApplicationObject",
            "sap.ino.commons.models.aof.ApplicationObjectChange",
            "sap.ino.commons.models.aof.MessageParser",
            "sap.ino.commons.models.aof.MetaModel",
            "sap.ino.commons.models.aof.PropertyModel",
            "sap.ino.commons.models.aof.PropertyModelCache",
            
            "sap.ino.commons.models.core.CoreModel",
            "sap.ino.commons.models.core.Extensibility",
            "sap.ino.commons.models.core.ModelSynchronizer",
            "sap.ino.commons.models.core.ReadSource",
            
            "sap.ino.commons.models.object.Attachment",
            "sap.ino.commons.models.object.Campaign",
            "sap.ino.commons.models.object.CampaignComment",
            "sap.ino.commons.models.object.Evaluation",
            "sap.ino.commons.models.object.Idea",
            "sap.ino.commons.models.object.IdeaComment",
            "sap.ino.commons.models.object.Notification",
            "sap.ino.commons.models.object.UserSettings",
            "sap.ino.commons.models.object.Vote",
            "sap.ino.commons.models.object.Wall",
            "sap.ino.commons.models.object.WallItem",
            
            "sap.ino.commons.models.util.UUID",
            "sap.ino.commons.models.util.WallMapper"
        ],
        noLibraryCSS: true,  
        elements : [
        ],
        version : "2.4.16"
    });
});
}; // end of sap/ino/commons/library.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.aof.ApplicationObjectChange') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.aof.ApplicationObjectChange'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/models/aof/ApplicationObjectChange",[
    "sap/ui/base/ManagedObject"
], function (ManagedObject) {
    "use strict";

    var Action = {
        All: "",
        Create : "create",
        Copy : "copy",
        Update : "update",
        Del : "del",
        Action : "action"
    };

    var ApplicationObjectChange = ManagedObject.extend("sap.ino.commons.models.aof.ApplicationObjectChange", {
        metadata : {
            events : {
                "objectChanged" : {},
                "objectCreated" : {},
                "objectCopied" : {},
                "objectUpdated" : {},
                "objectDeleted" : {},
                "objectCustomActionExecuted" : {}
            }
        },

        fireChange : function(oChange) {
            this.fireEvent("objectChanged", oChange);
            switch (oChange.actionName) {
                case Action.Create :
                    this.fireEvent("objectCreated", oChange);
                    break;
                case Action.Copy :
                    this.fireEvent("objectCopied", oChange);
                    break;
                case Action.Update :
                    this.fireEvent("objectUpdated", oChange);
                    break;
                case Action.Del :
                    this.fireEvent("objectDeleted", oChange);
                    break;
                default :
                    this.fireEvent("objectCustomActionExecuted", oChange);
                    break;
            }
        },

        attachChange : function(sActionName, fnFunction) {
            switch (sActionName) {
                case Action.Create :
                    this.attachEvent("objectCreated", fnFunction);
                    break;
                case Action.Copy :
                    this.attachEvent("objectCopied", fnFunction);
                    break;
                case Action.Update :
                    this.attachEvent("objectUpdated", fnFunction);
                    break;
                case Action.Del :
                    this.attachEvent("objectDeleted", fnFunction);
                    break;
                case Action.Action :
                    this.attachEvent("objectCustomActionExecuted", fnFunction);
                    break;
                default :
                    this.attachEvent("objectChanged", fnFunction);
                    break;
            }
        },

        detachChange : function(sActionName, fnFunction) {
            switch (sActionName) {
                case Action.Create :
                    this.detachEvent("objectCreated", fnFunction);
                    break;
                case Action.Copy :
                    this.detachEvent("objectCopied", fnFunction);
                    break;
                case Action.Update :
                    this.detachEvent("objectUpdated", fnFunction);
                    break;
                case Action.Del :
                    this.detachEvent("objectDeleted", fnFunction);
                    break;
                case Action.Action :
                    this.detachEvent("objectCustomActionExecuted", fnFunction);
                    break;
                default :
                    this.detachEvent("objectChanged", fnFunction);
                    break;
            }
        }
    });

    ApplicationObjectChange = new ApplicationObjectChange();
    ApplicationObjectChange.Action = Action;
    
    return ApplicationObjectChange;
});
}; // end of sap/ino/commons/models/aof/ApplicationObjectChange.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.aof.MessageParser') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.aof.MessageParser'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.message.MessageParser'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.message.Message'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/models/aof/MessageParser",[
    "sap/ui/core/message/MessageParser",
    "sap/ui/core/message/Message",
    "sap/ui/core/MessageType"
], function (MessageParser, Message, MessageType) {
    "use strict";

    var mMessageTypeMapping = {
        'E' : MessageType.Error,
        'W' : MessageType.Warning,
        'I' : MessageType.Information,
        'S' : MessageType.Success
    };

    function mapMessage(oAOFMessage, oProcessor) {
        // we can only map root fields at the moment
        var sTarget = (oAOFMessage.REF_NODE === undefined || oAOFMessage.REF_NODE === "Root") ? "/" + oAOFMessage.REF_FIELD : "/" + oAOFMessage.REF_NODE;
        return new Message({
            type : mMessageTypeMapping[oAOFMessage.TYPE] || MessageType.None,
            code : oAOFMessage.MESSAGE,
            message : oAOFMessage.MESSAGE_TEXT,
            description : oAOFMessage.MESSAGE_TEXT,
            target : sTarget,
            processor : oProcessor
        });
    }

    return MessageParser.extend("sap.ino.commons.models.aof.MessageParser", {
        constructor : function(){
            MessageParser.prototype.constructor.apply(this, arguments);
            this.aPreviousMessages = [];
        },

        parse : function(oResponse) {
            oResponse = oResponse || {};
            var oProcessor = this.getProcessor();
            var aNewMessages = jQuery.map(oResponse.MESSAGES || oResponse.messages || [], function (oMessage) {
                return mapMessage(oMessage, oProcessor);
            });
            this.getProcessor().fireMessageChange({
                oldMessages: this.aPreviousMessages,
                newMessages: aNewMessages
            });
            this.aPreviousMessages = aNewMessages;
        }
    });
});
}; // end of sap/ino/commons/models/aof/MessageParser.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.aof.MetaModel') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.aof.MetaModel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONPropertyBinding'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/models/aof/MetaModel",[
    "sap/ui/model/json/JSONModel",
    "sap/ui/model/json/JSONPropertyBinding",
    "sap/ino/commons/application/Configuration"
], function (JSONModel, JSONPropertyBinding, Configuration) {
    "use strict";

    var mApplicationObject = null;

    var MetaModel = JSONModel.extend("sap.ino.commons.models.aof.MetaModel", {
        metadata : {
            events : {
                "modelInitialized" : {}
            }
        }
    });

    MetaModel = new MetaModel({});

    // the intention is to make the metadata cacheable in future
    var fnGetMetadata = getBackendMetadata;

    // !Attention *getMetadata* is already in use by SAPUI5
    MetaModel.getApplicationObjectMetadata = function(sObjectName, fnResult) {
        if (!MetaModel.getProperty("/" + sObjectName)) {
            fnGetMetadata(sObjectName, function(oMetadata) {
                var oMappedMetadata = mapMetadata(oMetadata);
                MetaModel.setProperty("/" + sObjectName, oMappedMetadata);
                if (fnResult) {
                    fnResult(oMappedMetadata);
                    // Avoid triggering result function and event again, in case the metadata are fetched synchronously 
                    fnResult = undefined;
                }
                MetaModel.fireEvent("modelInitialized");
            });
        }

        var oMetadata = MetaModel.getProperty("/" + sObjectName);
        if (fnResult) {
            fnResult(oMetadata);
            MetaModel.fireEvent("modelInitialized");
        }
        return oMetadata;
    };

    MetaModel.bindProperty = function(sPath, oContext, mParameters) {
        if (sPath) {
            var aPaths = sPath.split("/");
            if (aPaths.length > 2) {
                var sObjectName = aPaths[1];
                // this method loads object metadata lazy
                MetaModel.getApplicationObjectMetadata(sObjectName);
            }
        }
        var oBinding = new JSONPropertyBinding(this, sPath, oContext, mParameters);
        return oBinding;
    };

    MetaModel.getEndpoint = function(sApplicationObjectName) {
        var sBackendRootURL = Configuration.getBackendRootURL();
        if (!mApplicationObject) {
            mApplicationObject = Configuration.getApplicationObjects();
        }
        return sBackendRootURL + mApplicationObject[sApplicationObjectName];
    };
    
    MetaModel.getBackendAllMetadata = function() {
		if (Configuration.isDevelopmentEnv()) {
			return;
		}
		var currentModelMeta;
		var sURL = Configuration.getBackendRootURL() + "/sap/ino/ngui/build/resources/sap/ino/corelib/allmetadata.json";
		var oMetadataRequest = jQuery.ajax({
			url: sURL,
			async: false,
			datatype: "json"
		});

		oMetadataRequest.done(function(oMetadatas) {
			for (var index = 0, length = oMetadatas.length; index <= length - 1; index++) {
			    currentModelMeta = oMetadatas[index].name;
				if (currentModelMeta && !MetaModel.getProperty("/" + currentModelMeta)) {
					var oMappedMetadata = mapMetadata(oMetadatas[index]);
					MetaModel.setProperty("/" + currentModelMeta, oMappedMetadata);
				}
			}
		});
	};

    function mapMetadata(oMetadata) {
        // "changeable" as additional metadata
        // as reverse to readOnly as this fits better
        // for binding controls "editable" property
        jQuery.each(oMetadata.nodes, function(sNodeName, oNode) {
            jQuery.each(oNode.attributes, function(sAttributeName, oAttribute) {
                oAttribute.changeable = !oAttribute.readOnly;
            });
        });

        return oMetadata;
    }

    function getBackendMetadata(sObjectName, fnSuccess) {
        var sURL = Configuration.getBackendRootURL() + "/sap/ino/xs/rest/static/meta.xsjs/" + sObjectName;
        var oMetadataRequest = jQuery.ajax({
            url : sURL,
            async : false,
            datatype : "json"
        });

        oMetadataRequest.done(function(oMetadata) {
            fnSuccess(oMetadata);
        });
    }
    
    return MetaModel;
});

}; // end of sap/ino/commons/models/aof/MetaModel.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.aof.PropertyModelCache') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.aof.PropertyModelCache'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/models/aof/PropertyModelCache",[
    "sap/ui/model/json/JSONModel"
], function(JSONModel) {
    "use strict";
    return JSONModel.extend("sap.ino.commons.models.aof.PropertyModelCache", {
        metadata: {
            events: {
                "modelCacheUpdated": {},
                "modelCacheInvalidated": {}
            }
        }
    });
});
}; // end of sap/ino/commons/models/aof/PropertyModelCache.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.core.ClipboardModel') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.core.ClipboardModel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/models/core/ClipboardModel",[
    "sap/ino/commons/models/aof/ApplicationObjectChange",
    "sap/ino/commons/application/Configuration",
    "sap/ui/model/json/JSONModel"
], function (ApplicationObjectChange, Configuration, JSONModel) { 
     "use strict";

    
    var OBJECT_PATH = "object";
    var ENTRY_PATH = "entry";
    var CHANGED_PATH = "changed";
    var IS_EMPTY_PATH = "isEmpty";
    var ENABLED_PATH = "enabled";
    
    var Node = {
        Root : "Root"
    };
    
     var ClipboardModel = JSONModel.extend("sap.ino.commons.models.core.ClipboardModel", {

        metadata : {
            events : {
                "objectAdded" : {},
                "objectRemoved" : {},
                "objectRevalidated" : {},
                "objectInvalid" : {},
                "clipboardOpen" : {}
            }
        },

        constructor : function(sName) {
            JSONModel.apply(this, []);
            this.initialized = false;
            this.namesRead = false;
            this.clipboardVisible = false;
            this.clipboardEnabled = false;
            this.name = sName;
            var that = this;
            ApplicationObjectChange.attachChange(ApplicationObjectChange.Action.All, function (oEvent) {
            if (oEvent.actionName === ApplicationObjectChange.Action.Del) {
                that.remove(oEvent.getParameter("object"), oEvent.getParameter("key"));
                } else {
                    that._validateObject(oEvent);
                }
            });

        },
        
        setODataModel : function(oODataModel) {
            this._oODataModel = oODataModel;
        },
        
        setEnabled : function(bEnabled) {
            if(bEnabled) {
                this.clipboardEnabled = true;
                this._initialize();
                this.setProperty("/" + ENABLED_PATH, true);
            } else {
                this.clipboardEnabled = false;
                this.setProperty("/" + ENABLED_PATH, false);
            }
        },
        
        _changed : function() {
            this.setProperty("/" + CHANGED_PATH, new Date());
            this._isEmpty();
        },

        _isEmpty : function() {
            this.setProperty("/" + IS_EMPTY_PATH, this.isClipboardEmpty());
        },

        _entry : function(oApplicationObject, vKey, sName) {
            return {
                objectName : oApplicationObject.getMetadata().getName(),
                key : vKey,
                name : sName
            };
        },

        _setName : function(oApplicationObject, vKey) {
            var oDeferred = new jQuery.Deferred();
            if (!oApplicationObject.readSource) {
                return oDeferred;
            }
            var oMetadata = oApplicationObject.getApplicationObjectMetadata();
            var oPromise = this.getObjectForKey(oApplicationObject, vKey);
            var that = this;
            oPromise.done(function(oData) {
                if (oData) {
                    var sObjectName = oApplicationObject.getMetadata().getName();
                    var sNameAttribute = oMetadata.nodes[Node.Root].nameAttribute;
                    var sName = oData[sNameAttribute];
                    var aResult = jQuery.grep(that.getProperty("/" + OBJECT_PATH) || [], function(oObject) {
                        return oObject.name == sObjectName;
                    });
                    if (aResult.length != 0) {
                        var oObject = aResult[0];
                        aResult = jQuery.grep(oObject[ENTRY_PATH] || [], function(oEntry) {
                            return oEntry.key == vKey;
                        });
                        if (aResult.length != 0) {
                            var oEntry = aResult[0];
                            oEntry.name = sName;
                        }
                    }
                    that.checkUpdate(true);
                    oDeferred.resolve();
                } else {
                    that._invalidObject(oApplicationObject, vKey, oDeferred);
                }
            });
            oPromise.fail(function(oError) {
                that._invalidObject(oApplicationObject, vKey, oDeferred);
            });
            return oDeferred.promise();
        },

        _invalidObject : function(oApplicationObject, vKey, oDeferred) {
            this.remove(oApplicationObject, vKey);
            this.fireEvent("objectInvalid", {
                applicationObject : oApplicationObject,
                key : vKey,
                entrySet : oApplicationObject.readSource.entitySetName,
                entityKey : this._getEntityKey(oApplicationObject, vKey)
            });
            oDeferred.reject();
        },

        prepare : function() {
            this._initialize();
        },

        _initialize : function() {
            if (!this.initialized) {
                this.initialized = true;
                this._loadState();
            }
        },

        _validateObject : function(oEvent) {
            this._initialize();
            var that = this;
            var oApplicationObject = oEvent.getParameter("object");
            var vKey = oEvent.getParameter("key");
            if (this.isInClipboard(oApplicationObject, vKey)) {
                that.revalidate(oApplicationObject, vKey);
            }      
        },
        
        _getEntityKey : function(oApplicationObject, vKey) {
            return oApplicationObject.readSource.entitySetName + "(" + vKey + ")";
        },
        
        clipboardOpened : function() {
            this._initialize();
            this.clipboardVisible = true;
            if (!this.namesRead) {
                this.namesRead = true;
                this.revalidate();
            }
            this._storeState();
        },

        clipboardClosed : function() {
            this._initialize();
            this.clipboardVisible = false;
            this._storeState();
        },

        toggle : function(oApplicationObject, vKey, sName) {
            this._initialize();
            if (!this.isInClipboard(oApplicationObject, vKey)) {
                this.add(oApplicationObject, vKey, sName);
                return true;
            }
            this.remove(oApplicationObject, vKey);
            return false;
        },

        add : function(oApplicationObject, vKey, sName) {
            this._initialize();
            if (vKey <= 0) {
                return;
            }
            
            sName = sName || "";
            var oDeferred = new jQuery.Deferred();

            var sObjectName = oApplicationObject.getMetadata().getName();
            var oEntry = this._entry(oApplicationObject, vKey, sName);

            var sArrayPath = "/" + OBJECT_PATH;
            var aObject = this.getProperty(sArrayPath);
            if (!aObject) {
                aObject = [];
                this.setProperty(sArrayPath, aObject);
            }
            var aResult = jQuery.grep(aObject || [], function(oObject) {
                return oObject.name == sObjectName;
            });
            var oObject = null;
            if (aResult.length == 0) {
                oObject = {
                    name : sObjectName,
                };
                oObject[ENTRY_PATH] = [];
                aObject.push(oObject);
            } else {
                oObject = aResult[0];
            }
            aResult = jQuery.grep(oObject[ENTRY_PATH] || [], function(oAEntry) {
                return oAEntry.key == vKey;
            });
            var oNewEntry = null;
            if (aResult.length == 0) {
                oNewEntry = oEntry;
                oObject[ENTRY_PATH].push(oNewEntry);
                this._setName(oApplicationObject, vKey).done(oDeferred.resolve);
            } else {
                oNewEntry = aResult[0];
                oNewEntry.name = sName;
                oDeferred.resolve();
            }

            this._storeState();
            this.checkUpdate(true);
            this._changed();

            this.fireEvent("objectAdded", {
                objectName : sObjectName,
                key : vKey,
                entry : oEntry
            });

            return oDeferred.promise();
        },

        remove : function(oApplicationObject, vKey) {
            this._initialize();
            var sObjectName = undefined;

            if (oApplicationObject) {
                sObjectName = oApplicationObject.getMetadata().getName();
                var aObject = this.getProperty("/" + OBJECT_PATH) || [];
                var aResult = jQuery.grep(aObject, function(oObject) {
                    return oObject.name == sObjectName;
                });
                if (aResult.length !== 0) {
                    var oObject = aResult[0];
                    if (vKey) {
                        aResult = jQuery.grep(oObject[ENTRY_PATH] || [], function(oEntry) {
                            return oEntry.key == vKey;
                        });
                        if (aResult.length !== 0) {
                            var oEntry = aResult[0];
                            oObject[ENTRY_PATH].splice(jQuery.inArray(oEntry, oObject[ENTRY_PATH]), 1);
                        }
                        if (oObject[ENTRY_PATH].length === 0) {
                            aObject.splice(jQuery.inArray(oObject, aObject), 1);
                        }
                    } else {
                        aObject.splice(jQuery.inArray(oObject, aObject), 1);
                    }
                }
                if (aObject && aObject.length === 0) {
                    this.setData({
                        enabled: this.clipboardEnabled
                    });
                }
            } else {
                this.setData({
                    enabled: this.clipboardEnabled
                });
            }

            this._storeState();
            this.checkUpdate(true);
            this._changed();

            this.fireEvent("objectRemoved", {
                objectName : sObjectName,
                key : vKey
            });
        },

        revalidate : function(oApplicationObject, vKey) {
            this._initialize();
            var that = this;
            if (oApplicationObject) {
                var sObjectName = oApplicationObject.getMetadata().getName();
                if (vKey) {
                    this._setName(oApplicationObject, vKey).done(function() {
                        that.fireEvent("objectRevalidated", {
                            objectName : sObjectName,
                            key : vKey
                        });
                    });
                } else {
                    var aResult = jQuery.grep(this.getProperty("/" + OBJECT_PATH) || [], function(oObject) {
                        return oObject.name == sObjectName;
                    });
                    if (aResult.length != 0) {
                        var oObject = aResult[0];
                        jQuery.each(oObject[ENTRY_PATH], function(iIndex, oEntry) {
                            var vKey = oEntry.key;
                            that._setName(oApplicationObject, vKey).done(function() {
                                that.fireEvent("objectRevalidated", {
                                    objectName : oObject.name,
                                    key : vKey
                                });
                            });
                        });
                    }
                }
            } else {
                jQuery.each(this.getProperty("/" + OBJECT_PATH) || [], function(iIndex, oObject) {
                    oApplicationObject = ClipboardModel.loadObject(oObject.name);
                    jQuery.each(oObject[ENTRY_PATH], function(iIndex, oEntry) {
                        var vKey = oEntry.key;
                        that._setName(oApplicationObject, vKey).done(function() {
                            that.fireEvent("objectRevalidated", {
                                objectName : oObject.name,
                                key : vKey
                            });
                        });
                    });
                });
            }
        },

        isInClipboard : function(oApplicationObject, vKey) {
            this._initialize();
            var aResult = jQuery.grep(this.getProperty("/" + OBJECT_PATH) || [], function(oObject) {
                return oObject.name == oApplicationObject.getMetadata().getName();
            });
            if (aResult.length != 0) {
                var oObject = aResult[0];
                aResult = jQuery.grep(oObject[ENTRY_PATH] || [], function(oEntry) {
                    return oEntry.key == vKey;
                });
                if (aResult.length != 0) {
                    return true;
                }
            }
            return false;
        },

        isClipboardEmpty : function(oApplicationObject) {
            if (!oApplicationObject) {
                return (this.getProperty("/" + OBJECT_PATH) || []).length <= 0;
            }
            var aResult = jQuery.grep(this.getProperty("/" + OBJECT_PATH) || [], function(oObject) {
                return oObject.name == oApplicationObject.getMetadata().getName();
            });
            if (aResult.length != 0) {
                var oObject = aResult[0];
                return (oObject[ENTRY_PATH] || []).length <= 0;
            }
            return true;
        },
        
        getObjectForKey : function(oApplicationObject, vKey) {
            var oMetadata = oApplicationObject.getApplicationObjectMetadata();
            return oApplicationObject.readSource(vKey, oApplicationObject.getObjectName(), oMetadata, {
                onlyRoot : true,
                model: this._oODataModel
            });
        },
        
        getObjectKeys : function(oApplicationObject, vFilterKey) {
            this._initialize();
            var aKey = [];
            if (oApplicationObject) {
                var aResult = jQuery.grep(this.getProperty("/" + OBJECT_PATH) || [], function(oObject) {
                    return oObject.name == oApplicationObject.getMetadata().getName();
                });
                if (aResult.length != 0) {
                    var oObject = aResult[0];
                    jQuery.each(oObject[ENTRY_PATH], function(iIndex, oEntry) {
                        aKey.push(oEntry.key);
                    });
                }
            }
            if (vFilterKey) {
                var iIndex = aKey.indexOf(vFilterKey);
                if (iIndex > -1) {
                    aKey.splice(iIndex, 1);
                }
            }
            return aKey;
        },

        setProperty : function() {
            this._initialize();
            JSONModel.prototype.setProperty.apply(this, arguments);
        },

        getProperty : function() {
            this._initialize();
            return JSONModel.prototype.getProperty.apply(this, arguments);
        },

        _loadState : function() {
            jQuery.sap.require("jquery.sap.storage");
            var that = this;
            var oStorage = jQuery.sap.storage(jQuery.sap.storage.Type.local);
            var vKey = this._getStateKey();
            var sState = oStorage.get(vKey);
            if (sState) {
                try {
                    var oData = {
                        enabled : this.clipboardEnabled
                    };
                    oData[OBJECT_PATH] = [];
                    var oState = JSON.parse(sState);
                    if (oState.userId == Configuration.getCurrentUser().USER_ID) {
                        delete oState.userId;
                        jQuery.each(oState, function(sObjectName, aKey) {
                            var oObject = {
                                name : sObjectName
                            };
                            oObject[ENTRY_PATH] = [];
                            var oApplicationObject = ClipboardModel.loadObject(sObjectName);
                            jQuery.each(aKey, function(iIndex, vKey) {
                                var oEntry = that._entry(oApplicationObject, vKey, "");
                                oObject[ENTRY_PATH].push(oEntry);
                            });
                            oData[OBJECT_PATH].push(oObject);
                        });
                    }
                    this.setData(oData);
                    this._changed();
                    this._storeState();
                } catch (e) {
                    jQuery.sap.log.debug("JSON string " + sState + " from local storage for could not be parsed for key " + vKey, undefined, "ClipboardModel");
                }
            }
        },

        _storeState : function() {
            var oState = {
                userId : Configuration.getCurrentUser().USER_ID
            };
            jQuery.each(this.getProperty("/" + OBJECT_PATH) || [], function(iIndex, oObject) {
                var aKey = [];
                jQuery.each(oObject[ENTRY_PATH], function(iIndex, oEntry) {
                    aKey.push(oEntry.key);
                });
                oState[oObject.name] = aKey;
            });
            var oStorage = jQuery.sap.storage(jQuery.sap.storage.Type.local);
            var vKey = this._getStateKey();
            var bOK = oStorage.put(vKey, JSON.stringify(oState));
            if (!bOK) {
                jQuery.sap.log.debug("State could not be stored in local storage for key " + vKey, undefined, "ClipboardModel");
            }
        },

        _getStateKey : function() {
            return this.getMetadata().getName() + "-" + this.name;
        }
    });
    
    ClipboardModel.loadObject = function(sObjectName) {
        jQuery.sap.require(sObjectName);
        return jQuery.sap.getObject(sObjectName, 0);
    };

    var oSharedClipboard = null;
    ClipboardModel.sharedInstance = function() {
        if (!oSharedClipboard) {
            oSharedClipboard = new ClipboardModel("__shared_instance__");
        }
        return oSharedClipboard;
    };

    ClipboardModel.getInSharedClipboardFormatter = function(oApplicationObject) {
        return function(vKey) {
            return ClipboardModel.sharedInstance.isInClipboard(oApplicationObject, vKey);
        };
    };

    ClipboardModel.getSharedClipboardNotEmptyFormatter = function(oApplicationObject) {
        return function() {
            return !ClipboardModel.sharedInstance().isClipboardEmpty(oApplicationObject);
        };
    };
    
    return ClipboardModel;
});
}; // end of sap/ino/commons/models/core/ClipboardModel.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.core.Extensibility') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.core.Extensibility'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/models/core/Extensibility",[], function() {
    "use strict";
    return {
        initExtensionNode : function(oData, sExtensionNodeName, oObjectInstance) {
            var oMetadata = oObjectInstance.getApplicationObjectMetadata();
            if (!oData[sExtensionNodeName] || oData[sExtensionNodeName].length === 0) {
                oData[sExtensionNodeName] = [{}];
            }
            var oExtension = oData[sExtensionNodeName][0];
            jQuery.each(oMetadata.nodes[sExtensionNodeName].attributes, function(sAttributeName, oAttributeMetadata) {
                if (!oAttributeMetadata.readOnly && sAttributeName != "_ID" && oExtension[sAttributeName] === undefined) {
                    oExtension[sAttributeName] = null;
                }
                if ((oExtension[sAttributeName] === null || oExtension[sAttributeName] === undefined) && 
                    !oAttributeMetadata.required && 
                    !(oAttributeMetadata.customProperties && oAttributeMetadata.customProperties.valueOptionList) && 
                    !oAttributeMetadata.foreignKeyTo) {
                    if (oAttributeMetadata.dataType === "INTEGER") {
                        oExtension[sAttributeName] = oAttributeMetadata.minValue !== undefined ? oAttributeMetadata.minValue : 0;  
                    } else if (oAttributeMetadata.dataType === "DOUBLE") {
                        oExtension[sAttributeName] = oAttributeMetadata.minValue !== undefined ? oAttributeMetadata.minValue : 0.0;
                    }
                }
            });
            return oData;
        }
    };
});
}; // end of sap/ino/commons/models/core/Extensibility.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.core.ReadSource') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.core.ReadSource'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/models/core/ReadSource",[
    "sap/ino/commons/models/aof/MetaModel",
    "sap/ui/base/ManagedObject",
    "sap/ui/model/Sorter",
    "sap/ui/core/format/DateFormat"
], function(MetaModel, ManagedObject, Sorter, DateFormat) {
    "use strict";
    var ReadSource = {};

    var Node = {
        Root : "Root"
    };
    
    var oDateFormat = DateFormat.getDateInstance({
        pattern : "yyyy-MM-dd"
    });

    /*
     * Read the data for the specified entity set from OData. One-level children are read in separate calls, deeper
     * children are read with the Root node using OData expands. The deep child paths and the nodes to read can be
     * controlled with the settings parameters:
     * 
     * oSettings.deepChildPaths = { SubNode1 : "SubNode1/Node1" } oSettings.excludeNodes = ["Node1"];
     * oSettings.includeNodes = [{ name : "Node1", parentNode : "Root" }]; 
     * oSettings.async = false 
     * oSettings.onlyRoot = true 
     * oSettings.useBuffer = true
     * 
     * Static settings and dynamic additional settings are merged before reading the source
     */
    ReadSource.getDefaultODataSource = function(sEntitySetName, oSettings, oODataModel) {
        var fnDefaultReadSource = function(vKey, sObjectName, oMetadata, oAdditionalSettings) {
            oODataModel = oODataModel || oAdditionalSettings.model;
            var grpSetting = oAdditionalSettings.groupSetting;
            var oResultData = {};

            vKey = typeof (vKey) === "string" ? "'" + vKey + "'" : vKey;
            if (jQuery.isPlainObject(vKey)) {
                var aKeys = jQuery.map(vKey, function(sValue, sName) {
                    return sName + "='" + sValue + "'";
                });
                vKey = aKeys.join(",");
            }

            var sBasePath = "/" + sEntitySetName + "(" + vKey + ")";
            var aParameter = null;

            // Combine metadata nodes and included nodes
            var oNodes = jQuery.extend({}, oMetadata.nodes);

            // Settings
            oSettings = fnDefaultReadSource.settings(oAdditionalSettings);

            if (oSettings && oSettings.includeNodes) {
                jQuery.each(oSettings.includeNodes, function(i, oIncludeNode) {
                    if (!oNodes[oIncludeNode.name]) {
                        oNodes[oIncludeNode.name] = oIncludeNode;
                    }
                });
            }
            
            // Handle deep child nodes as expand parameters
            var aDeepChildPath = getDeepChildPaths(oNodes);
            if (aDeepChildPath.length > 0) {
                aParameter = ["$expand=" + aDeepChildPath.join(",")];
            }
            
            if (oSettings && oSettings.projection && oSettings.projection.length > 0) {
                var sSelect = "$select=";
                jQuery.each(oSettings.projection, function(i, oAttributeName) {
                    if (oSettings.projection.length - 1 === i) {
                        sSelect += oAttributeName;
                    } else {
                        sSelect += oAttributeName + ",";
                    }
                });
                if (!aParameter) {
                    aParameter = [];
                }
                aParameter.push(sSelect);
            }

            // Read entity
            var bAsync = true;
            if (oSettings && oSettings.async !== undefined) {
                bAsync = oSettings.async;
            }

            var bUseBuffer = oSettings && oSettings.useBuffer;

            var aDeferred = [];

            var oDeferred = new jQuery.Deferred();
            if (!bUseBuffer) {
                oODataModel.read(sBasePath, {
                    urlParameters : aParameter,
                    success : function(oData) {
                        jQuery.extend(oResultData, defaultDeepPaths(cleanData(oData), aDeepChildPath));
                        oDeferred.resolve(oData);
                    },
                    error : function(oError) {
                        oODataModel.fireRequestFailed((oError && oError.response) ? oError.response : {
                            statusCode : 400
                        });
                        oDeferred.reject(oError);
                    }
                });
            } else {
                oODataModel.createBindingContext("/" + sBasePath, null, aParameter, function(oContext) {
                    if (oContext && oContext.getObject()) {
                        var oData = oContext.getObject();
                        jQuery.extend(oResultData, defaultDeepPaths(cleanData(oData), aDeepChildPath));
                        oDeferred.resolve(oData);
                    } else {
                        oDeferred.reject();
                    }
                });
            }
            aDeferred.push(oDeferred);

            // Read entity association
            function readChildData(sNodeName) {
                var sChildPath = sBasePath + "/" + sNodeName;
                var oDeferred = new jQuery.Deferred();
                var oNode = oMetadata.nodes[sNodeName];
                var aSorter = oNode && [new Sorter(oNode.primaryKey)];

                if (!bUseBuffer) {
                    oODataModel.read(sChildPath, {
                        async : true,
                        groupId: grpSetting && grpSetting[sNodeName],
                        // make sure to have a defined sort order, which is usually the insert order
                        sorters : aSorter,
                        success : function(oData) {
                            oResultData[sNodeName] = cleanData(oData);
                            oDeferred.resolve(oData);
                        },
                        error : function(oError) {
                            if (oError.statusCode == 404) {
                                oResultData[sNodeName] = [];
                                oDeferred.resolve([]);
                            } else {
                                oDeferred.reject(oError);
                            }
                        }
                    });
                } else {
                    oODataModel.createBindingContext("/" + sChildPath, null, null, function(oContext) {
                        if (oContext && oContext.getObject()) {
                            var oData = oContext.getObject();
                            oResultData[sNodeName] = cleanData(oData);
                            oDeferred.resolve(oData);
                        } else {
                            oDeferred.resolve([]);
                        }
                    });
                }
                return oDeferred;
            }

            var bOnlyRoot = oSettings && oSettings.onlyRoot;
            if (!bOnlyRoot) {
                for ( var sNodeName in oNodes) {
                    var oNode = oNodes[sNodeName];
                    if (oNode.name == Node.Root || oNode.parentNode != Node.Root) {
                        continue;
                    }
                    if (oSettings && oSettings.excludeNodes && oSettings.excludeNodes.indexOf(sNodeName) >= 0) {
                        continue;
                    }
                    var bFound = false;
                    for (var i = 0; i < aDeepChildPath.length; i++) {
                        var sDeepChildPath = aDeepChildPath[i];
                        if (sDeepChildPath.indexOf(sNodeName) === 0) {
                            bFound = true;
                            break;
                        }
                    }
                    if (oSettings && oSettings.deepChildPaths) {
                        if (oSettings.deepChildPaths[sNodeName]) {
                            bFound = true;
                        }
                    }
                    if (bFound) {
                        continue;
                    }
                    aDeferred.push(readChildData(sNodeName));
                }
            }

            var oResultDeferred = new jQuery.Deferred();
            var oPromise = jQuery.when.apply(jQuery, aDeferred);
            oPromise.done(function() {
                var sConcurrencyToken = oMetadata.isConcurrencyControlEnabled ? calculateConcurrencyToken(oResultData, oMetadata.nodes[Node.Root]) : undefined;
                visitTree(oResultData, oMetadata, "Root", processODataNode);
                oResultDeferred.resolve(oResultData, sConcurrencyToken);
            });
            oPromise.fail(function(oError) {
                oResultDeferred.reject(oError);
            });
            return oResultDeferred.promise();
        };

        function defaultDeepPaths(oData, aDeepChildPath) {
            for (var i = 0; i < aDeepChildPath.length; i++) {
                var sDeepChildPath = aDeepChildPath[i];
                var aDeepChildPathPart = sDeepChildPath.split("/");
                var oDataPart = oData;
                for (var j = 0; j < aDeepChildPathPart.length; j++) {
                    var sDeepChildPathPart = aDeepChildPathPart[j];
                    if (oDataPart[sDeepChildPathPart] === undefined) {
                        break;
                    }
                    if (oDataPart[sDeepChildPathPart] == null) {
                        oDataPart[sDeepChildPathPart] = [];
                        break;
                    }
                    oDataPart = oDataPart[sDeepChildPathPart];
                }
            }
            return oData;
        }

        function getDeepChildPaths(oNodes) {
            var aDeepChildPath = [];
            var sNodeName;
            for (sNodeName in oNodes) {
                var oNode = oNodes[sNodeName];
                if (oNode.name == Node.Root) {
                    continue;
                }
                if (oSettings && oSettings.excludeNodes && oSettings.excludeNodes.indexOf(sNodeName) >= 0) {
                    continue;
                }
                if (oSettings && oSettings.deepChildPaths && oSettings.deepChildPaths[sNodeName]) {
                    continue;
                }
                var sChildPath = buildDeepPath(oNode, oNodes);
                if (sChildPath && sChildPath.indexOf("/") != -1) {
                    aDeepChildPath.push(sChildPath);
                }
            }
            if (oSettings && oSettings.deepChildPaths) {
                for (sNodeName in oSettings.deepChildPaths) {
                    if (oSettings && oSettings.excludeNodes && oSettings.excludeNodes.indexOf(sNodeName) >= 0) {
                        continue;
                    }
                    var sDeepChildPath = oSettings.deepChildPaths[sNodeName];
                    if (sDeepChildPath.indexOf("/") !== -1) {
                        aDeepChildPath.push(sDeepChildPath);
                    }
                }
            }
            // Remove duplicates
            aDeepChildPath = aDeepChildPath.filter(function(value, index, array) {
                return array.indexOf(value) === index;
            });
            aDeepChildPath.sort();
            return aDeepChildPath;
        }

        function buildDeepPath(oNode, oNodes) {
            var sPath = oNode.name;
            while (oNode.parentNode && oNode.parentNode != Node.Root) {
                oNode = oNodes[oNode.parentNode];
                sPath = oNode.name + "/" + sPath;
            }
            return sPath;
        }

        function calculateConcurrencyToken(oData, oNode) {
            var oTokenObject = {};
            jQuery.each(oNode.attributes, function(sAttributeName, oAttribute) {
                if (oAttribute.concurrencyControl) {
                    var sValue = oData[sAttributeName];
                    if (sValue instanceof Date) {
                        sValue = sValue.toISOString();
                    }
                    oTokenObject[sAttributeName] = sValue;
                }
            });
            return JSON.stringify(oTokenObject);
        }

        (function(oSettings) {
            fnDefaultReadSource.settings = function(oAdditionalSettings) {
                if (oAdditionalSettings) {
                    return mergeSettings(oSettings, oAdditionalSettings);
                }
                return oSettings;
            };

            function mergeSettings(oSettings, oAdditionalSettings) {
                oSettings = oSettings || {};
                oAdditionalSettings = oAdditionalSettings || {};
                return {
                    deepChildPaths : jQuery.extend(oSettings.deepChildPaths || {}, oAdditionalSettings.deepChildPaths || {}),
                    excludeNodes : (oSettings.excludeNodes || []).concat(oAdditionalSettings.excludeNodes || []),
                    includeNodes : (oSettings.includeNodes || []).concat(oAdditionalSettings.includeNodes || []),
                    projection : (oSettings.projection || []).concat(oAdditionalSettings.projection || []),
                    async : oAdditionalSettings.async !== undefined ? oAdditionalSettings.async : oSettings.async,
                    onlyRoot : oAdditionalSettings.onlyRoot !== undefined ? oAdditionalSettings.onlyRoot : oSettings.onlyRoot,
                    useBuffer : oAdditionalSettings.useBuffer !== undefined ? oAdditionalSettings.useBuffer : oSettings.useBuffer
                };
            }
        }(oSettings));

        fnDefaultReadSource.entitySetName = sEntitySetName;

        return fnDefaultReadSource;
    };

    /*
     * Read the data for the specified entity set from default AOF endpoint
     * 
     * Static settings and dynamic additional settings are merged before reading the source
     * 
     * oSettings.cache: Flag to control the cache behaviour of the ajax call
     * oSettings.async: Flag to control the async processing of the ajax call
     * oSettings.headers: Header object pass to the ajax call
     */

    ReadSource.getDefaultAOFSource = function(oSettings) {
        return function(vKey, sObjectName, oMetadata, oAdditionalSettings) {
            var oDeferred = new jQuery.Deferred();

            var oEffectiveSettings = jQuery.extend({}, oSettings, oAdditionalSettings);

            var sURL = MetaModel.getEndpoint(sObjectName);
            var oAjaxPromise = jQuery.ajax({
                url : sURL + "/" + vKey,
                type : "GET",
                dataType : "json",
                async : oEffectiveSettings.async !== undefined ? oEffectiveSettings.async : true,
                cache : oEffectiveSettings.cache,
                contentType : "application/json",
                headers : oEffectiveSettings.headers || undefined
            });

            oAjaxPromise.done(function(oResponse, sStatusText, oJQXHR) {
                var sConcurrencyToken = oJQXHR.getResponseHeader("ETag");
                visitTree(oResponse, oMetadata, "Root", processNode);
                oDeferred.resolve(oResponse, sConcurrencyToken);
            });
            oAjaxPromise.fail(function(oResponse) {
                oDeferred.reject(oResponse);
            });

            return oDeferred.promise();
        };
    };
    
    function processNode(oNode, oNodesMetadata, sNodeName) {
        if (oNode && oNodesMetadata && sNodeName && jQuery.isPlainObject(oNode)) {
            var aNodeAttributesMetadata = oNodesMetadata.nodes && 
                                      oNodesMetadata.nodes[sNodeName] && 
                                      oNodesMetadata.nodes[sNodeName].attributes;
            if (aNodeAttributesMetadata) {
                jQuery.each(aNodeAttributesMetadata, function(iIndex, oAttribute){
                    if (oAttribute.dataType) { 
                       if (oAttribute.dataType === "TIMESTAMP") {
                           oNode[iIndex] = new Date(oNode[iIndex]);
                       }
                    }
                });
            }
        }
    }
    
    function processODataNode(oNode, oNodesMetadata, sNodeName) {
        if (oNode && oNodesMetadata && sNodeName && jQuery.isPlainObject(oNode)) {
            var aNodeAttributesMetadata = oNodesMetadata.nodes && 
                                      oNodesMetadata.nodes[sNodeName] && 
                                      oNodesMetadata.nodes[sNodeName].attributes;
            if (aNodeAttributesMetadata) {
                jQuery.each(aNodeAttributesMetadata, function(iIndex, oAttribute){
                    if (oAttribute.dataType && oAttribute.dataType === "DOUBLE") {
                        if (oNode[iIndex] !== null) {
                            oNode[iIndex] = parseFloat(oNode[iIndex]);
                        }
                    }
                    if (oAttribute.dataType === "DATE") {
                        oNode[iIndex] = oDateFormat.format(oNode[iIndex]);
                    }
                });
            }
        }
    }
    
    function visitTree(oNode, oNodesMetadata, sNodeName, fnProcessNode) {
        if (oNode && oNodesMetadata && sNodeName && fnProcessNode) {
            fnProcessNode(oNode, oNodesMetadata, sNodeName);
            for (var sProperty in oNode) {
                var aChildNodes = oNode[sProperty];
                if (aChildNodes && oNode.hasOwnProperty(sProperty) && jQuery.isArray(aChildNodes) && aChildNodes.length > 0) {
                    jQuery.each(aChildNodes, function (iIndex, oChildNode) {
                        if(jQuery.isPlainObject(oChildNode)) {
                            visitTree(oChildNode, oNodesMetadata, sProperty, fnProcessNode);
                        }
                    });
                }
            }
        }
    }

    function cleanData(oData) {
        if (!oData) {
            return {};
        }
        oData = jQuery.extend(true, {}, oData);
        var oCleanData;
        if (oData.results) {
            // Remove artificial results structure
            oCleanData = [];
            jQuery.each(oData.results, function(i, oResultData) {
                oCleanData.push(cleanData(oResultData));
            });
        } else {
            // Remove artificial metadata structure
            if (oData.__metadata) {
                delete oData.__metadata;
            }
            // Remove artificial deferred structure (recursively)
            jQuery.each(oData, function(sProperty, oProperty) {
                if (oProperty && oProperty.constructor == Object) {
                    if (oProperty.__deferred) {
                        delete oData[sProperty];
                    } else {
                        oData[sProperty] = cleanData(oProperty);
                    }
                }
                if (oProperty && jQuery.isArray(oProperty)) {
                    jQuery.each(oProperty, function(i, oChildProperty) {
                        cleanData(oChildProperty);
                    });
                }
            });
            oCleanData = oData;
        }
        return oCleanData;
    }

    ReadSource.cleanData = cleanData;
    
    ReadSource.setMetaModel = function(oMetaModel) {
        MetaModel = oMetaModel;
    };
    
    return ReadSource;
});
}; // end of sap/ino/commons/models/core/ReadSource.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.misc.Notifications') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */

jQuery.sap.declare('sap.ino.commons.models.misc.Notifications'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/models/misc/Notifications",[
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/application/Configuration"
], function(JSONModel, Configuration) {

    var NOTIFICATION_SERVICE_ENDPOINT = Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/notification_messages.xsjs";
    var NOTIFICATION_TIMEOUT = 300000;

    return JSONModel.extend("sap.ino.commons.models.misc.Notifications", {

        constructor : function(bPollingActivated) {
            JSONModel.apply(this, []);
            this.bPollingActivated = bPollingActivated;
            this.setTimer();
        },

        setTimer : function() {
            if(!this.bPollingActivated) {
                return;
            }
            if(this._oTimer) {
                clearInterval(this._oTimer);
            }
            this._oTimer = setInterval(this.updateNotificationCount.bind(this), NOTIFICATION_TIMEOUT);
        },

        updateNotificationCount : function() {
            this.loadData(NOTIFICATION_SERVICE_ENDPOINT, "countOnly=true", true, "GET", true);
        },

        updateNotifications : function() {
            this.loadData(NOTIFICATION_SERVICE_ENDPOINT);
            this.setTimer();
        },

        markNotificationsAsRead : function(iLatestNotificationId) {
            this.setProperty("/NOTIFICATION_COUNT", "0");
            this.setProperty("/NOTIFICATIONS", null);
            jQuery.sap.require("sap.ino.commons.models.object.Notification");
            var Notification = sap.ino.commons.models.object.Notification;
            return Notification.readAllNotifications(iLatestNotificationId);
        },

        markNotificationAsRead : function(iNotificationId) {
            var iCount = this.getProperty("/NOTIFICATION_COUNT");
            iCount--;
            this.setProperty("/NOTIFICATION_COUNT", iCount);
            jQuery.sap.require("sap.ino.commons.models.object.Notification");
            var Notification = sap.ino.commons.models.object.Notification;
            return Notification.readNotification(iNotificationId);
        }
    });
});
}; // end of sap/ino/commons/models/misc/Notifications.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.types.FloatNullableType') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.types.FloatNullableType'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.type.Float'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.ParseException'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/models/types/FloatNullableType",[
    "sap/ui/model/type/Float",
    "sap/ui/model/ParseException"
], function (FloatType, ParseException) {
    "use strict";

    return FloatType.extend("sap.ino.commons.models.types.FloatNullableType", {
        
        formatValue : function(oValue, sInternalType) {
            if(oValue === null || oValue === undefined || oValue === ""){
                return oValue;
            }
            return FloatType.prototype.formatValue.apply(this, [oValue, sInternalType]);
        },
        
        parseValue : function(oValue, sInternalType) {
            if(oValue === null || oValue === undefined || oValue === ""){
                return oValue;
            }
            
            //to avoid UI5 wrong integer format, ex. -6,0 to -60
    //         if(oValue.indexOf(",") > -1 || jQuery.trim(oValue).indexOf(" ") > -1){
    //             var oBundle = sap.ui.getCore().getLibraryResourceBundle();
			 //   throw new ParseException(oBundle.getText("Integer.Invalid"));
			 //   return;
    //         }
            
            return FloatType.prototype.parseValue.apply(this, [oValue, sInternalType]);
        },
        
        validateValue : function(oValue) {
            if(oValue === null || oValue === undefined || oValue === ""){
                return true;
            }
            return FloatType.prototype.validateValue.apply(this, [oValue]);
        }
    });
});
}; // end of sap/ino/commons/models/types/FloatNullableType.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.types.FloatType') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.types.FloatType'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.type.Float'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.ParseException'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/models/types/FloatType",[
    "sap/ui/model/type/Float",
    "sap/ui/model/ParseException"
], function (FloatType, ParseException) {
    "use strict";

    return FloatType.extend("sap.ino.commons.models.types.FloatType", {
        
        formatValue : function(oValue, sInternalType) {
            return FloatType.prototype.formatValue.apply(this, [oValue, sInternalType]);
        },
        
        parseValue : function(oValue, sInternalType) {
            //to avoid UI5 wrong integer format, ex. -6,0 to -60
            if(typeof oValue === "string" && (oValue.indexOf(",") > -1 || jQuery.trim(oValue).indexOf(" ") > -1)){
                var oBundle = sap.ui.getCore().getLibraryResourceBundle();
			    throw new ParseException(oBundle.getText("Integer.Invalid"));
			    return;
            }
            
            return FloatType.prototype.parseValue.apply(this, [oValue, sInternalType]);
        },
        
        validateValue : function(oValue) {
            return FloatType.prototype.validateValue.apply(this, [oValue]);
        }
    });
});
}; // end of sap/ino/commons/models/types/FloatType.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.types.FollowUpRelativeDateType') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.types.FollowUpRelativeDateType'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.SimpleType'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/models/types/FollowUpRelativeDateType",[
    "sap/ui/model/SimpleType"
], function (SimpleType) {
    "use strict";
    
    function sameDate(oDate1, oDate2) {
        return oDate1.getFullYear() === oDate2.getFullYear() && oDate1.getMonth() === oDate2.getMonth() && oDate1.getDate() === oDate2.getDate();
    }
    
    return SimpleType.extend("sap.ino.commons.models.types.FollowUpRelativeDateType", {

        formatValue: function (oFollowUpDate) {
            if (oFollowUpDate) {
                var oCurrentDate = new Date();
                var iDay = oCurrentDate.getDate();
                var iMonth = oCurrentDate.getMonth();
                var iYear = oCurrentDate.getFullYear();
                var oNow = new Date(iYear, iMonth, iDay);
                if (sameDate(oFollowUpDate, oNow)) {
                    return "TODAY";
                }
                if (sameDate(oFollowUpDate, new Date(iYear, iMonth, iDay + 1))) {
                    return "TOMORROW";
                }
                var oDate = new Date(iYear, iMonth, iDay);
                oDate.setDate(oDate.getDate() + 5 - oDate.getDay());
                if (sameDate(oFollowUpDate, oDate)) {
                    return "THIS_WEEK";
                }
                oDate = new Date(iYear, iMonth, iDay);
                oDate.setDate(oDate.getDate() + 8 - oDate.getDay());
                if (sameDate(oFollowUpDate, oDate)) {
                    return "NEXT_WEEK";
                }
                oDate = new Date(iYear, iMonth, iDay);
                oDate.setDate(oNow.getDate() + 7);
                if (sameDate(oFollowUpDate, oDate)) {
                    return "IN_A_WEEK";
                }
                oDate = new Date(iYear, iMonth, iDay);
                oDate.setDate(oNow.getDate() + 14);
                if (sameDate(oFollowUpDate, oDate)) {
                    return "IN_TWO_WEEKS";
                }
                if (sameDate(oFollowUpDate, new Date(iYear, iMonth + 1, 0))) {
                    return "THIS_MONTH";
                }
                if (sameDate(oFollowUpDate, new Date(iYear, iMonth + 1, 15))) {
                    return "NEXT_MONTH";
                }
                if (sameDate(oFollowUpDate, new Date(iYear, iMonth + 1, iDay))) {
                    return "IN_A_MONTH";
                }
                if (sameDate(oFollowUpDate, new Date(iYear, iMonth + 2, iDay))) {
                    return "IN_TWO_MONTHS";
                }
            }
            return "NONE";
        },

        parseValue: function (sRelativeDate) {
            var oCurrentDate = new Date();
            var iDay = oCurrentDate.getDate();
            var iMonth = oCurrentDate.getMonth();
            var iYear = oCurrentDate.getFullYear();
            var oNow = new Date(iYear, iMonth, iDay);
            var oDate = null;
            switch (sRelativeDate) {
                case "NONE" :
                    break;
                case "NO_FOLLOW_UP" :
                    break;
                case "TODAY" :
                    oDate = oNow;
                    break;
                case "TOMORROW" :
                    oDate = new Date(iYear, iMonth, iDay);
                    oDate.setDate(oNow.getDate() + 1);
                    break;
                case "THIS_WEEK" :
                    oDate = new Date(iYear, iMonth, iDay);
                    oDate.setDate(oDate.getDate() + 5 - oDate.getDay());
                    break;
                case "NEXT_WEEK" :
                    oDate = new Date(iYear, iMonth, iDay);
                    oDate.setDate(oDate.getDate() + 8 - oDate.getDay());
                    break;
                case "IN_A_WEEK" :
                    oDate = new Date(iYear, iMonth, iDay);
                    oDate.setDate(oNow.getDate() + 7);
                    break;
                case "IN_TWO_WEEKS" :
                    oDate = new Date(iYear, iMonth, iDay);
                    oDate.setDate(oNow.getDate() + 14);
                    break;
                case "THIS_MONTH" :
                    oDate = new Date(iYear, iMonth + 1, 0);
                    break;
                case "NEXT_MONTH" :
                    oDate = new Date(iYear, iMonth + 1, 15);
                    break;
                case "IN_A_MONTH" :
                    oDate = new Date(iYear, iMonth + 1, iDay);
                    break;
                case "IN_TWO_MONTHS" :
                    oDate = new Date(iYear, iMonth + 2, iDay);
                    break;
            }
            return oDate;
        },

        validateValue: function () {
            return true;
        }

    });
    
});
}; // end of sap/ino/commons/models/types/FollowUpRelativeDateType.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.types.IntBooleanType') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.types.IntBooleanType'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.SimpleType'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/models/types/IntBooleanType",[
    "sap/ui/model/SimpleType"
], function (SimpleType) {
    "use strict";
    
    return SimpleType.extend("sap.ino.commons.models.types.IntBooleanType", {
        
        formatValue : function(iValue) {
            return iValue === 1;
        },
        
        parseValue : function(bValue) {
            return bValue ? 1 : 0;
        },
        
        validateValue : function(iValue) {
            return iValue === 0 || iValue === 1;
        }        
    });
});
}; // end of sap/ino/commons/models/types/IntBooleanType.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.types.IntNullableBooleanType') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.types.IntNullableBooleanType'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.type.Integer'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/models/types/IntNullableBooleanType",[
    "sap/ui/model/type/Integer"
], function (IntegerType) {
    "use strict";
    
    return IntegerType.extend("sap.ino.commons.models.types.IntNullableBooleanType", {
        
        formatValue : function(oValue, sInternalType) {
            if(oValue === null || oValue === undefined || oValue === ""){
                return oValue;
            }
            return IntegerType.prototype.formatValue.apply(this, [oValue, sInternalType]);
        },
        
        parseValue : function(oValue, sInternalType) {
            if(oValue === null || oValue === undefined || oValue === ""){
                return oValue;
            }
            return IntegerType.prototype.parseValue.apply(this, [oValue, sInternalType]);
        },
        
        validateValue : function(oValue) {
            if(oValue === null || oValue === undefined || oValue === ""){
                return true;
            }
            return IntegerType.prototype.validateValue.apply(this, [oValue]);
        }
    });
});
}; // end of sap/ino/commons/models/types/IntNullableBooleanType.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.types.IntegerNullableType') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.types.IntegerNullableType'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.type.Integer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.ParseException'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/models/types/IntegerNullableType",[
    "sap/ui/model/type/Integer",
    "sap/ui/model/ParseException"
], function (IntegerType, ParseException) {
    "use strict";
    
    return IntegerType.extend("sap.ino.commons.models.types.IntegerNullableType", {
        
        formatValue : function(oValue, sInternalType) {
            if(oValue === null || oValue === undefined || oValue === ""){
                return oValue;
            }
            return IntegerType.prototype.formatValue.apply(this, [oValue, sInternalType]);
        },
        
        parseValue : function(oValue, sInternalType) {
            if(oValue === null || oValue === undefined || oValue === ""){
                return oValue;
            }
            
            //to avoid UI5 wrong integer format, ex. -6,0 to -60
            if(oValue.indexOf(",") > -1 || jQuery.trim(oValue).indexOf(" ") > -1){
                var oBundle = sap.ui.getCore().getLibraryResourceBundle();
			    throw new ParseException(oBundle.getText("Integer.Invalid"));
			    return;
            }
            
            return IntegerType.prototype.parseValue.apply(this, [oValue, sInternalType]);
        },
        
        validateValue : function(oValue) {
            if(oValue === null || oValue === undefined || oValue === ""){
                return true;
            }
            return IntegerType.prototype.validateValue.apply(this, [oValue]);
        }
    });
});
}; // end of sap/ino/commons/models/types/IntegerNullableType.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.types.IntegerType') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.types.IntegerType'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.type.Integer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.ParseException'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/models/types/IntegerType",[
    "sap/ui/model/type/Integer",
    "sap/ui/model/ParseException"
], function (IntegerType, ParseException) {
    "use strict";
    
    return IntegerType.extend("sap.ino.commons.models.types.IntegerType", {
        
        formatValue : function(oValue, sInternalType) {
            return IntegerType.prototype.formatValue.apply(this, [oValue, sInternalType]);
        },
        
        parseValue : function(oValue, sInternalType) {
            //to avoid UI5 wrong integer format, ex. -6,0 to -60
            if(oValue.indexOf(",") > -1 || jQuery.trim(oValue).indexOf(" ") > -1){
                var oBundle = sap.ui.getCore().getLibraryResourceBundle();
			    throw new ParseException(oBundle.getText("Integer.Invalid"));
			    return;
            }
            
            return IntegerType.prototype.parseValue.apply(this, [oValue, sInternalType]);
        },
        
        validateValue : function(oValue) {
            return IntegerType.prototype.validateValue.apply(this, [oValue]);
        }
    });
});
}; // end of sap/ino/commons/models/types/IntegerType.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.types.StringBooleanType') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.types.StringBooleanType'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.SimpleType'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/models/types/StringBooleanType",[
    "sap/ui/model/SimpleType"
], function (SimpleType) {
    "use strict";
    
    return SimpleType.extend("sap.ino.commons.models.types.StringBooleanType", {
        
        formatValue : function(sValue) {
            return sValue === "1";
        },
        
        parseValue : function(bValue) {
            return bValue ? "1" : "0";
        },
        
        validateValue : function(sValue) {
            return sValue === "0" || sValue === "1";
        }        
    });
});
}; // end of sap/ino/commons/models/types/StringBooleanType.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.types.StringNumberType') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.types.StringNumberType'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.SimpleType'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/models/types/StringNumberType",[
    "sap/ui/model/SimpleType"
], function (SimpleType) {
    "use strict";
    return SimpleType.extend("sap.ino.commons.models.types.StringNumberType", {
            formatValue: function (oValue, sInternalType) {
                if(oValue === null) {
                    return null;
                }
                if(sInternalType === "float") {
                    return parseFloat(oValue);
                }
                return 0;
            },
            parseValue: function (oValue, sInternalType) {
                return oValue.toString();
            },
            validateValue: function (oValue) {
                return true;
            }
        }
    );
});
}; // end of sap/ino/commons/models/types/StringNumberType.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.util.UUID') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.util.UUID'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/models/util/UUID",[], function() {
    "use strict";

    return {
        generate : function() {
            var d = new Date().getTime();
            var uuid = 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = (d + Math.random() * 16) % 16 | 0;
                d = Math.floor(d / 16);
                return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);
            });
            return uuid.toUpperCase();
        }
    };
});
}; // end of sap/ino/commons/models/util/UUID.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.util.WallMapper') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.util.WallMapper'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/models/util/WallMapper",[
    "sap/ino/commons/application/Configuration"
], function(Configuration) {
    "use strict";

    var WallMode = {
        Readonly : "Readonly",
        Write : "Write"
    };

    var _fnFormatWallUnitOfLength = function(vValue) {
        return vValue ? vValue + "px" : "0px";
    };

    var _fnFormatInoUnitOfLength = function(vValue) {
        return parseInt(vValue, 10);
    };

    var _fnMapColor = function(sValue) {
        return _oColorMapping[sValue];
    };

    var _fnURLtoID = function(sURL) {
        return sURL ? parseInt(sURL.substring(sURL.lastIndexOf("/") + 1), 10) : undefined;
    };

    var _fnIDtoURL = function(iID) {
        return Configuration.getAttachmentDownloadURL(iID);
    };

    var _oColorMapping = {
        "Yellow" : "FCF294",
        "FCF294" : "Yellow",
        "Pink" : "E5B0E8",
        "E5B0E8" : "Pink",
        "Cyan" : "87E0FD",
        "87E0FD" : "Cyan",
        "Green" : "D2FF52",
        "D2FF52" : "Green",
        "Neutral" : "FFFFFF",
        "FFFFFF" : "Neutral",
        "Orange" : "FFA84C",
        "FFA84C" : "Orange",
        "Red" : "FF3019",
        "FF3019" : "Red",
        "Rose" : "F9D6D6",
        "F9D6D6" : "Rose",
        "Lavender" : "C4C6FF",
        "C4C6FF" : "Lavender",
        "Black" : "45484D",
        "45484D" : "Black"
    };

    var _fnToInoColor = function(sValue) {
        if (sValue.length === 7 && sValue[0] === "#") {
            return sValue.substr(1);
        } else if (sValue.length === 4 && sValue[0] === "#") {
            return sValue[1] + sValue[1] + sValue[2] + sValue[2] + sValue[3] + sValue[3];
        }
        return undefined;
    };

    var _fnToWallColor = function(sValue) {
        if (sValue.length === 6) {
            return "#" + sValue;
        } else if (sValue.length === 3) {
            return "#" + sValue[1] + sValue[1] + sValue[2] + sValue[2] + sValue[3] + sValue[3];
        }
        return undefined;
    };

    var _oItemTypeMapping = {
        "sap.ino.config.GROUP" : "sap.ino.wall.WallItemGroup",
        "sap.ino.wall.WallItemGroup" : "sap.ino.config.GROUP",

        "sap.ino.config.ATTACHMENT" : "sap.ino.wall.WallItemAttachment",
        "sap.ino.wall.WallItemAttachment" : "sap.ino.config.ATTACHMENT",

        "sap.ino.config.DOCUMENT" : "sap.ino.wall.WallItemDocument",
        "sap.ino.wall.WallItemDocument" : "sap.ino.config.DOCUMENT",

        "sap.ino.config.HEADLINE" : "sap.ino.wall.WallItemHeadline",
        "sap.ino.wall.WallItemHeadline" : "sap.ino.config.HEADLINE",

        "sap.ino.config.IMAGE" : "sap.ino.wall.WallItemImage",
        "sap.ino.wall.WallItemImage" : "sap.ino.config.IMAGE",

        "sap.ino.config.LINE" : "sap.ino.wall.WallItemLine",
        "sap.ino.wall.WallItemLine" : "sap.ino.config.LINE",

        "sap.ino.config.LINK" : "sap.ino.wall.WallItemLink",
        "sap.ino.wall.WallItemLink" : "sap.ino.config.LINK",

        "sap.ino.wall.WallItemPerson" : "sap.ino.config.PERSON",
        "sap.ino.config.PERSON" : "sap.ino.wall.WallItemPerson",

        "sap.ino.config.SPRITE" : "sap.ino.wall.WallItemSprite",
        "sap.ino.wall.WallItemSprite" : "sap.ino.config.SPRITE",

        "sap.ino.config.STICKER" : "sap.ino.wall.WallItemSticker",
        "sap.ino.wall.WallItemSticker" : "sap.ino.config.STICKER",

        "sap.ino.config.TEXT" : "sap.ino.wall.WallItemText",
        "sap.ino.wall.WallItemText" : "sap.ino.config.TEXT",

        "sap.ino.config.VIDEO" : "sap.ino.wall.WallItemVideo",
        "sap.ino.wall.WallItemVideo" : "sap.ino.config.VIDEO",

        "sap.ino.config.ARROW" : "sap.ino.wall.WallItemArrow",
        "sap.ino.wall.WallItemArrow" : "sap.ino.config.ARROW"
    };

    /*
     * Mapping for Wall object ( WALL -> INO & INO -> WALL) support property & formatter
     */
    var _oWallMapping = {
        "WALL" : {
            "storageId" : {
                property : "ID"
            },
            "title" : {
                property : "NAME"
            },
            "backgroundImage" : {
                property : "BACKGROUND_IMAGE_URL"
            },
            "backgroundImageZoom" : {
                property : "BACKGROUND_IMAGE_ZOOM",
                formatter : function(vValue) {
                    var iValue = parseInt(vValue, 10);
                    return isNaN(iValue) ? 1 : iValue;
                }
            },
            "backgroundImageTiled" : {
                property : "BACKGROUND_IMAGE_REPEAT",
                formatter : function(bTiled) {
                    return bTiled ? 1 : 0;
                }
            },
            "backgroundColor" : {
                property : "BACKGROUND_COLOR"
            },
            "mode" : {
                property : "IS_LOCKED",
                formatter : function(sMode) {
                    return sMode == WallMode.Readonly ? 1 : 0;
                }
            },
            "type" : {
                property : "WALL_TYPE_CODE",
                formatter : function(sType) {
                    return sType === "Template" ? "sap.ino.config.TEMPLATE" : "sap.ino.config.WALL";
                }
            },
            "actionCode" : {
                property : "ACTION_CODE"
            }
        /* owner / CREATED_BY calculated in backend */
        },
        "INO" : {
            "ID" : {
                property : "storageId"
            },
            "NAME" : {
                property : "title"
            },
            "BACKGROUND_IMAGE_URL" : {
                property : "backgroundImage"
            },
            "BACKGROUND_IMAGE_ZOOM" : {
                property : "backgroundImageZoom",
                formatter : function(vValue) {
                    var iValue = parseInt(vValue, 10);
                    return isNaN(iValue) ? 1 : iValue;
                }
            },
            "BACKGROUND_IMAGE_REPEAT" : {
                property : "backgroundImageTiled",
                formatter : function(iRepeat) {
                    return iRepeat == 1;
                }
            },
            "BACKGROUND_COLOR" : {
                property : "backgroundColor"
            },
            "CREATED_BY_NAME" : {
                property : "owner"
            },
            "IS_LOCKED" : {
                property : "mode",
                formatter : function(iIsLocked) {
                    return iIsLocked == 1 ? WallMode.Readonly : WallMode.Write;
                }
            },
            "WALL_TYPE_CODE" : {
                property : "type",
                formatter : function(sWallTypeCode) {
                    return sWallTypeCode === "sap.ino.config.TEMPLATE" ? "Template" : "Wall";
                }
            },
            "ACTION_CODE" : {
                property : "actionCode"
            }
        }
    };

    /*
     * Default Wall Item Mapping (WALL -> INO & INO -> WALL) support property & initial & formatter & parent & children
     */
    var _oDefaultItemMapping = {
        "WALL" : {
            "storageId" : {
                property : "ID"
            },
            "id" : {
                initial : true,
                /*
                 * only write id when it's empty we need this special handling for the create case, when there is no
                 * storage id but only a handle
                 */
                property : "ID"
            },
            "parentId" : {
                property : "PARENT_WALL_ITEM_ID",
                formatter : function(sParentId) {
                    return (sParentId !== "0") ? sParentId : null;
                }
            },
            "w" : {
                property : "WIDTH",
                formatter : function(sValue) {
                    return _fnFormatInoUnitOfLength(sValue) || 0;
                }
            },
            "h" : {
                property : "HEIGHT",
                formatter : function(sValue) {
                    return _fnFormatInoUnitOfLength(sValue) || 0;
                }
            },
            "depth" : {
                property : "ZINDEX"
            },
            "className" : {
                property : "WALL_ITEM_TYPE_CODE",
                formatter : function(sClass) {
                    return _oItemTypeMapping[sClass];
                }
            },
            "title" : {
                parent : "CONTENT",
                property : "TEXT"
            },
            "position" : {
                children : {
                    "x" : {
                        property : "POSITION_X",
                        formatter : _fnFormatInoUnitOfLength
                    },
                    "y" : {
                        property : "POSITION_Y",
                        formatter : _fnFormatInoUnitOfLength
                    }
                }
            },
            "actionCode" : {
                property : "ACTION_CODE"
            }
        },
        "INO" : {
            "ID" : {
                property : "storageId"
            },
            "PARENT_WALL_ITEM_ID" : {
                property : "parentId"
            },
            "NAME" : {
                property : "title"
            },
            "CONTENT" : {
                children : {
                    "TEXT" : {
                        property : "title"
                    }
                }
            },
            "WIDTH" : {
                property : "w",
                formatter : _fnFormatWallUnitOfLength
            },
            "HEIGHT" : {
                property : "h",
                formatter : _fnFormatWallUnitOfLength
            },
            "ZINDEX" : {
                property : "depth"
            },
            "WALL_ITEM_TYPE_CODE" : {
                property : "className",
                formatter : function(sClass) {
                    return _oItemTypeMapping[sClass];
                }
            },
            "POSITION_X" : {
                parent : "position",
                property : "x",
                formatter : _fnFormatWallUnitOfLength
            },
            "POSITION_Y" : {
                parent : "position",
                property : "y",
                formatter : _fnFormatWallUnitOfLength
            },
            "ACTION_CODE" : {
                property : "actionCode"
            }
        }
    };

    /*
     * Specific Wall Item Mapping (WALL -> INO & INO -> WALL) support property & formatter & parent & children
     */
    var _oSpecificItemMapping = {
        // WALL -> INO
        "WALL" : {
            "sap.ino.wall.WallItemHeadline" : {
                "size" : {
                    parent : "CONTENT",
                    property : "SIZE"
                },
                "type" : {
                    parent : "CONTENT",
                    property : "STYLE"
                }
            },
            "sap.ino.wall.WallItemLink" : {
                "description" : {
                    parent : "CONTENT",
                    property : "URL"
                },
                "type" : {
                    parent : "CONTENT",
                    property : "ICON"
                }
            },
            "sap.ino.wall.WallItemSticker" : {
                "color" : {
                    parent : "CONTENT",
                    property : "COLOR",
                    formatter : _fnMapColor
                },
                "description" : {
                    parent : "CONTENT",
                    property : "TEXT"
                }
            },
            "sap.ino.wall.WallItemGroup" : {
                "color" : {
                    parent : "CONTENT",
                    property : "COLOR",
                    formatter : _fnToInoColor
                }
            },
            "sap.ino.wall.WallItemImage" : {
                "content" : {
                    children : {
                        "image" : {
                            parent : "Image",
                            array : true,
                            property : "ATTACHMENT_ID",
                            formatter : _fnURLtoID
                        },
                        "preview" : {
                            initial : true,
                            parent : "Image",
                            array : true,
                            property : "ATTACHMENT_ID",
                            formatter : _fnURLtoID
                        },
                        "assignmentId" : {
                            parent : "Image",
                            array : true,
                            property : "ID"
                        },
                        "showAsIcon" : {
                            parent : "CONTENT",
                            property : "SHOW_AS_ICON"
                        }
                    }
                },
                "title" : {
                    parent : "CONTENT",
                    property : "CAPTION"
                }
            },
            "sap.ino.wall.WallItemText" : {
                "description" : {
                    parent : "CONTENT",
                    property : "TEXT"
                },
                "title" : {
                    parent : "CONTENT",
                    property : "CAPTION"
                }
            },
            "sap.ino.wall.WallItemLine" : {
                "orientation" : {
                    parent : "CONTENT",
                    property : "ORIENTATION"
                },
                "thickness" : {
                    parent : "CONTENT",
                    property : "THICKNESS"
                },
                "style" : {
                    parent : "CONTENT",
                    property : "STYLE"
                },
                "color" : {
                    parent : "CONTENT",
                    property : "COLOR",
                    formatter : _fnToInoColor
                },
                "title" : {
                    property : "NAME"
                }
            },
            "sap.ino.wall.WallItemSprite" : {
                "color" : {
                    parent : "CONTENT",
                    property : "COLOR",
                    formatter : _fnToInoColor
                },
                "type" : {
                    parent : "CONTENT",
                    property : "SHAPE"
                }
            },
            "sap.ino.wall.WallItemPerson" : {
                "title" : {
                    parent : "CONTENT",
                    property : "NAME"
                },
                "content" : {
                    children : {
                        "image" : {
                            parent : "Image",
                            array : true,
                            property : "ATTACHMENT_ID",
                            formatter : _fnURLtoID
                        },
                        "phone" : {
                            parent : "CONTENT",
                            property : "PHONE"
                        },
                        "email" : {
                            parent : "CONTENT",
                            property : "EMAIL"
                        },
                        "originId" : {
                            parent : "CONTENT",
                            property : "ORIGIN_ID"
                        },
                        "requestImage" : {
                            parent : "CONTENT",
                            property : "REQUEST_IMAGE"
                        },
                        "assignmentId" : {
                            parent : "Image",
                            array : true,
                            property : "ID"
                        }
                    }
                }
            },
            "sap.ino.wall.WallItemVideo" : {
                "content" : {
                    children : {
                        "video" : {
                            parent : "CONTENT",
                            property : "URL"
                        },
                        "preview" : {
                            initial : true,
                            parent : "CONTENT",
                            property : "URL"
                        }
                    }
                },
                "title" : {
                    parent : "CONTENT",
                    property : "CAPTION"
                }
            },
            "sap.ino.wall.WallItemDocument" : {
                "title" : {
                    parent : "CONTENT",
                    property : "CAPTION"
                },
                "description" : {
                    parent : "CONTENT",
                    property : "URL"
                },
                "type" : {
                    parent : "CONTENT",
                    property : "DOC_TYPE"
                }
            },
            "sap.ino.wall.WallItemAttachment" : {
                "title" : {
                    parent : "CONTENT",
                    property : "CAPTION"
                },
                "content" : {
                    children : {
                        "URL" : {
                            parent : "Attachment",
                            array : true,
                            property : "ATTACHMENT_ID",
                            formatter : _fnURLtoID
                        },
                        "assignmentId" : {
                            parent : "Attachment",
                            array : true,
                            property : "ID"
                        },
                        "type" : {
                            parent : "CONTENT",
                            property : "TYPE"
                        },
                        "fileName" : {
                            parent : "CONTENT",
                            property : "FILE_NAME"
                        }
                    }
                }
            },
            "sap.ino.wall.WallItemArrow" : {
                "thickness" : {
                    parent : "CONTENT",
                    property : "THICKNESS"
                },
                "style" : {
                    parent : "CONTENT",
                    property : "STYLE"
                },
                "headStyle" : {
                    parent : "CONTENT",
                    property : "HEAD_STYLE"
                },
                "color" : {
                    parent : "CONTENT",
                    property : "COLOR",
                    formatter : _fnToInoColor
                },
                "title" : {
                    parent : "CONTENT",
                    property : "TEXT"
                },
                "x1" : {
                    parent : "CONTENT",
                    property : "X1"
                },
                "y1" : {
                    parent : "CONTENT",
                    property : "Y1"
                },
                "x2" : {
                    parent : "CONTENT",
                    property : "X2"
                },
                "y2" : {
                    parent : "CONTENT",
                    property : "Y2"
                }
            }
        },
        // INO -> WALL
        "INO" : {
            "sap.ino.config.HEADLINE" : {
                "CONTENT" : {
                    children : {
                        "SIZE" : {
                            property : "size"
                        },
                        "STYLE" : {
                            property : "type"
                        },
                        "TEXT" : {
                            property : "title"
                        }
                    }
                }
            },
            "sap.ino.config.LINK" : {
                "CONTENT" : {
                    children : {
                        "URL" : {
                            property : "description"
                        },
                        "ICON" : {
                            property : "type"
                        },
                        "TEXT" : {
                            property : "title"
                        }
                    }
                }
            },
            "sap.ino.config.STICKER" : {
                "CONTENT" : {
                    children : {
                        "COLOR" : {
                            property : "color",
                            formatter : _fnMapColor
                        },
                        "TEXT" : {
                            property : "description"
                        }
                    }
                }
            },
            "sap.ino.config.GROUP" : {
                "CONTENT" : {
                    children : {
                        "COLOR" : {
                            property : "color",
                            formatter : _fnToWallColor
                        },
                        "TEXT" : {
                            property : "title"
                        }
                    }
                }
            },
            "sap.ino.config.IMAGE" : {
                "CONTENT" : {
                    children : {
                        "CAPTION" : {
                            property : "title"
                        },
                        "SHOW_AS_ICON" : {
                            parent : "content",
                            property : "showAsIcon"
                        }
                    }
                },
                "Image" : {
                    children : {
                        "ATTACHMENT_ID" : {
                            parent : "content",
                            property : ["image", "preview"],
                            formatter : _fnIDtoURL
                        },
                        "ID" : {
                            parent : "content",
                            property : "assignmentId"
                        }
                    }
                }
            },
            "sap.ino.config.TEXT" : {
                "CONTENT" : {
                    children : {
                        "CAPTION" : {
                            property : "title"
                        },
                        "TEXT" : {
                            property : "description"
                        }
                    }
                }
            },
            "sap.ino.config.LINE" : {
                "CONTENT" : {
                    children : {
                        "ORIENTATION" : {
                            property : "orientation"
                        },
                        "THICKNESS" : {
                            property : "thickness"
                        },
                        "STYLE" : {
                            property : "style"
                        },
                        "COLOR" : {
                            property : "color",
                            formatter : _fnToWallColor
                        }
                    }
                },
                "NAME" : {
                    property : "title"
                }
            },
            "sap.ino.config.SPRITE" : {
                "CONTENT" : {
                    children : {
                        "COLOR" : {
                            property : "color",
                            formatter : _fnToWallColor
                        },
                        "SHAPE" : {
                            property : "type"
                        },
                        "TEXT" : {
                            property : "title"
                        }
                    }
                }
            },
            "sap.ino.config.PERSON" : {
                "CONTENT" : {
                    children : {
                        "NAME" : {
                            property : "title"
                        },
                        "IMAGE" : {
                            property : "image",
                            parent : "content"
                        },
                        "PHONE" : {
                            property : "phone",
                            parent : "content"
                        },
                        "EMAIL" : {
                            property : "email",
                            parent : "content"
                        },
                        "ORIGIN_ID" : {
                            property : "originId",
                            parent : "content"
                        },
                        "REQUEST_IMAGE" : {
                            property : "requestImage",
                            parent : "content"
                        }
                    }
                },
                "Image" : {
                    children : {
                        "ATTACHMENT_ID" : {
                            parent : "content",
                            property : ["image", "preview"],
                            formatter : _fnIDtoURL
                        },
                        "ID" : {
                            parent : "content",
                            property : "assignmentId"
                        }
                    }
                }
            },
            "sap.ino.config.VIDEO" : {
                "CONTENT" : {
                    children : {
                        "URL" : {
                            parent : "content",
                            property : ["video", "preview"]
                        },
                        "CAPTION" : {
                            property : "title"
                        }
                    }
                }
            },
            "sap.ino.config.DOCUMENT" : {
                "CONTENT" : {
                    children : {
                        "URL" : {
                            property : "description"
                        },
                        "CAPTION" : {
                            property : "title"
                        },
                        "DOC_TYPE" : {
                            property : "type"
                        }
                    }
                }
            },
            "sap.ino.config.ATTACHMENT" : {
                "CONTENT" : {
                    children : {
                        "CAPTION" : {
                            property : "title"
                        },
                        "TYPE" : {
                            property : "type",
                            parent : "content"
                        },
                        "FILE_NAME" : {
                            property : "fileName",
                            parent : "content"
                        }
                    }
                },
                "Attachment" : {
                    children : {
                        "ATTACHMENT_ID" : {
                            property : "URL",
                            parent : "content",
                            formatter : _fnIDtoURL
                        },
                        "ID" : {
                            property : "assignmentId",
                            parent : "content"
                        }
                    }
                }
            },
            "sap.ino.config.ARROW" : {
                "CONTENT" : {
                    children : {
                        "THICKNESS" : {
                            property : "thickness"
                        },
                        "STYLE" : {
                            property : "style"
                        },
                        "HEAD_STYLE" : {
                            property : "headStyle"
                        },
                        "COLOR" : {
                            property : "color",
                            formatter : _fnToWallColor
                        },
                        "TEXT" : {
                            property : "title"
                        },
                        "X1" : {
                            property : "x1"
                        },
                        "Y1" : {
                            property : "y1"
                        },
                        "X2" : {
                            property : "x2"
                        },
                        "Y2" : {
                            property : "y2"
                        }
                    }
                }
            }
        }
    };

    var _fnMapProperty = function(oItem, vProperty, fnFormatter, bInitial, sValue) {
        if (vProperty) {
            if (jQuery.type(vProperty) == "array") {
                vProperty.forEach(function(sProperty) {
                    if (!bInitial || !oItem[sProperty]) {
                        oItem[sProperty] = fnFormatter ? fnFormatter(sValue) : sValue;
                    }
                });
            } else {
                if (!bInitial || !oItem[vProperty]) {
                    oItem[vProperty] = fnFormatter ? fnFormatter(sValue) : sValue;
                }
            }
        }
    };

    var _fnMapPropertyWithParent = function(oItem, vProperty, sParent, fnFormatter, bInitial, sValue, bArray) {
        if (vProperty) {
            if (sParent) {
                if (!oItem[sParent]) {
                    if (bArray) {
                        oItem[sParent] = [];
                    } else {
                        oItem[sParent] = {};
                    }
                }

                if (bArray && oItem[sParent].length === 0) {
                    oItem[sParent].push({});
                }

                var oObject = bArray ? oItem[sParent][0] : oItem[sParent];

                _fnMapProperty(oObject, vProperty, fnFormatter, bInitial, sValue);

                if (bArray && JSON.stringify(oObject) === "{}") {
                    oItem[sParent].pop();
                }
            } else {
                _fnMapProperty(oItem, vProperty, fnFormatter, bInitial, sValue);
            }
        }
    };

    var _fnMapItem = function(oItem, oMapping, vValue) {
        var oValue = (jQuery.type(vValue) === "array") ? vValue[0] : vValue;
        var fnFormatter, vProperty, sParent, bArray, bInitial;
        if (oValue !== undefined) {
            if (oMapping.children) {
                for ( var childkey in oMapping.children) {
                    fnFormatter = oMapping.children[childkey].formatter;
                    vProperty = oMapping.children[childkey].property;
                    sParent = oMapping.children[childkey].parent;
                    bArray = oMapping.children[childkey].array;
                    bInitial = oMapping.children[childkey].initial;

                    _fnMapPropertyWithParent(oItem, vProperty, sParent, fnFormatter, bInitial, oValue[childkey], bArray);
                }
            } else {
                fnFormatter = oMapping.formatter;
                vProperty = oMapping.property;
                sParent = oMapping.parent;
                bArray = oMapping.array;
                bInitial = oMapping.initial;

                _fnMapPropertyWithParent(oItem, vProperty, sParent, fnFormatter, bInitial, oValue, bArray);
            }
        }
    };

    var WallMapper = {};

    WallMapper.mapItemToIno = function(vWallItem) {
        var oItem = {};
        var sItemType = vWallItem.className;
        var oDefault = _oDefaultItemMapping.WALL;
        var oSpecific = _oSpecificItemMapping.WALL[sItemType];

        for ( var key in vWallItem) {
            if (vWallItem.hasOwnProperty(key)) {
                if (oSpecific && oSpecific[key]) {
                    _fnMapItem(oItem, oSpecific[key], vWallItem[key]);
                } else if (oDefault[key]) {
                    _fnMapItem(oItem, oDefault[key], vWallItem[key]);
                }
                // else ignore this value
            }
        }

        return oItem;
    };

    WallMapper.mapItemsFromIno = function(vIno, bDelta) {

        var fnMap = function(oIno) {
            var oItem = {};
            var sItemType = oIno.WALL_ITEM_TYPE_CODE;
            var oDefault = _oDefaultItemMapping.INO;
            var oSpecific = _oSpecificItemMapping.INO[sItemType];

            for ( var key in oIno) {
                if (oIno.hasOwnProperty(key)) {
                    if (oSpecific && oSpecific[key]) {
                        _fnMapItem(oItem, oSpecific[key], oIno[key]);
                    } else if (oDefault[key]) {
                        _fnMapItem(oItem, oDefault[key], oIno[key]);
                    }
                    // else ignore this value
                }
            }

            return oItem;
        };

        var aItems = [];
        var aIno = jQuery.type(vIno) == "array" ? vIno : [vIno];

        if (bDelta) {

            aIno.forEach(function(oIno) {
                aItems.push(fnMap(oIno));
            });

        } else {

            var aParents = [];
            var oChildren = {};

            aIno.forEach(function(oIno) {
                var oItem = fnMap(oIno);
                aParents.push(oItem);
                if (oItem.parentId > 0) {
                    if (!oChildren[oItem.parentId]) {
                        oChildren[oItem.parentId] = [];
                    }
                    oChildren[oItem.parentId].push(oItem);
                } else {
                    aItems.push(oItem);
                }
            });

            for ( var key in oChildren) {
                if (oChildren.hasOwnProperty(key)) {
                    var aParent = aParents.filter(function(o) {
                        return o.storageId /* int */ == key /* string */;
                    });

                    if (aParent && aParent.length > 0) {
                        // Note: "childs"?
                        aParent[0].childs = oChildren[key];
                    }
                }
            }
        }

        return aItems;
    };

    WallMapper.setInoProperty = function(oWall, sInoProperty, sValue) {
        if (jQuery.sap.startsWith(sInoProperty, "/")) {
            sInoProperty = sInoProperty.substring(1);
        }
        var oMapProperty = _oWallMapping.INO[sInoProperty];
        if (oMapProperty && oMapProperty.property) {
            var sSetter = "set" + oMapProperty.property.substring(0, 1).toUpperCase() + oMapProperty.property.substring(1);
            if (typeof oWall[sSetter] === "function") {
                oWall[sSetter].apply(oWall, [oMapProperty.formatter ? oMapProperty.formatter(sValue) : sValue]);
            } else {
                oWall.setProperty(oMapProperty.property, oMapProperty.formatter ? oMapProperty.formatter(sValue) : sValue);
                oWall._notifyChanged(oMapProperty.property);
            }
            return true;
        } else {
            jQuery.sap.log.warning("no mapping available for property '" + sInoProperty + "'", undefined, "WallMapper");
            return false;
        }
    };

    WallMapper._checkWallPrivilege = function(aGroup, iUserId) {
        if (iUserId === undefined) {
            iUserId = Configuration.getCurrentUser().USER_ID;
        }

        if (aGroup && jQuery.type(aGroup === "array")) {
            var aGroupMember = aGroup.filter(function(oIdentity) {
                return oIdentity.IDENTITY_ID === iUserId;
            });

            if (aGroupMember.length > 0) {
                return true;
            }
        }

        return false;
    };

    WallMapper.mapWallFromIno = function(oIno, bDelta) {
        var oWall;
        if (oIno) {
            oWall = {};
            for ( var key in oIno) {
                if (oIno.hasOwnProperty(key) && _oWallMapping.INO[key] && _oWallMapping.INO[key].property) {
                    oWall[_oWallMapping.INO[key].property] = _oWallMapping.INO[key].formatter ? _oWallMapping.INO[key].formatter(oIno[key]) : oIno[key];
                }
            }

            // we currently don't count the hits
            oWall.hits = 0;
            // we currently have no favorite handling
            oWall.favorite = false;
            oWall.timestamp = new Date(oIno.CHANGED_AT).getTime();

            // set strongest auth property
            var iUserId = Configuration.getCurrentUser().USER_ID;
            var bMember = WallMapper._checkWallPrivilege(oIno.Owner, iUserId);
            var sStrongestAuth = "owner";
            if (!bMember) {
                bMember = WallMapper._checkWallPrivilege(oIno.Admins, iUserId);
                sStrongestAuth = "admin";
            }
            if (!bMember) {
                bMember = WallMapper._checkWallPrivilege(oIno.Writers, iUserId);
                sStrongestAuth = "write";
            }
            if (!bMember) {
                bMember = WallMapper._checkWallPrivilege(oIno.Readers, iUserId);
                sStrongestAuth = "read";
            }
            if (!bMember) {
                sStrongestAuth = "none";
            }

            oWall.strongestAuth = sStrongestAuth;

            var aItems = [];
            oWall.numberOfItems = oIno.Items ? oIno.Items.length : 0;
            if (oWall.numberOfItems > 0) {
                aItems = WallMapper.mapItemsFromIno(oIno.Items, bDelta);
            }
            oWall.items = aItems;
        }
        return oWall;
    };

    WallMapper.mapWallToIno = function(oWall) {

        var oJSON = oWall.formatToJSON();
        var aItems = [];

        var oIno = {};
        for ( var key in oJSON) {
            if (oJSON.hasOwnProperty(key) && _oWallMapping.WALL[key] && _oWallMapping.WALL[key].property) {
                oIno[_oWallMapping.WALL[key].property] = _oWallMapping.WALL[key].formatter ? _oWallMapping.WALL[key].formatter(oJSON[key]) : oJSON[key];
            }
        }

        var aWallItems = oWall.getItems();

        if (jQuery.type(aWallItems) === "array") {
            aWallItems.forEach(function(oItem) {
                aItems = aItems.concat(WallMapper.mapWallToInoItem(oItem));
            });
        }

        oIno.Items = aItems;

        return oIno;
    };

    WallMapper.mapWallToInoItem = function(oItem) {
        var oInoItem = WallMapper.mapItemToIno(oItem.formatToJSON());
        var aInoItem = [oInoItem];

        if (oItem.getChilds().length > 0) {
            oItem.getChilds().forEach(function(oChildItem) {
                aInoItem = aInoItem.concat(WallMapper.mapWallToInoItem(oChildItem));
            });
        }

        return aInoItem;
    };
    
    return WallMapper;
});
}; // end of sap/ino/commons/models/util/WallMapper.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.util.DateUtil') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.util.DateUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/util/DateUtil",[], function() {
	"use strict";

	return {
		convertToUtcString: function(oDate, bEndDay) {
			if (!oDate) {
				return oDate;
			}
			if(typeof oDate === "string"){
			   oDate = new Date(oDate);
			}
			var sMoth = (oDate.getMonth() + 1) >= 10 ? oDate.getMonth() + 1 : "0" + (oDate.getMonth() + 1);
			var sDay = oDate.getDate() >= 10 ? oDate.getDate() : "0" + oDate.getDate();
			return oDate.getFullYear() + "-" + sMoth + "-" + sDay + (bEndDay ? 'T23:59:59.999Z' : 'T00:00:00.000Z');
		},

		convertToLocalDate: function(oDate, bEndDay) {
			if (!oDate) {
				return oDate;
			}
            if(typeof oDate === "string"){
			   oDate = new Date(oDate);
			}
			return new Date(oDate.getUTCFullYear(), oDate.getUTCMonth(), oDate.getUTCDate(), bEndDay ? 23 : 0, bEndDay ? 59 : 0, bEndDay ? 59 : 0,
				bEndDay ? 999 : 0);
		}
	};
});
}; // end of sap/ino/commons/util/DateUtil.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.util.INMBreadCrumbs') ) {
jQuery.sap.declare('sap.ino.commons.util.INMBreadCrumbs'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/util/INMBreadCrumbs",[
    "sap/ino/commons/application/Configuration",
    "sap/ui/base/Object"], function(Configuration, Object) {
	var breadCrumbsTexts = [{
			"TEXT": "PAGE_TIT_HOME",
			"name": "home",
			"target": "home",
			"available": "all",
			"path": "home"
             }, {

			"name": "home-explicit",
			"target": "home"
             }, {
			"TEXT": "PAGE_TIT_IDEAS",
			"name": "idealist",
			"target": "idealist",
			"available": "idea-display",
			"path": "home/idealist"

             }, {
			"variant": true,
			"name": "idealistvariant",
			"target": "idealist",
			"available": "idea-display",
			"path": "home/idealistvariant"
             }, {
			"TEXT": "PAGE_TIT_WALLS",
			"name": "walllist",
			"target": "walllist",
			"available": "wall",
			"path": "home/walllist"
             }, {
			"variant": true,
			"name": "walllistvariant",
			"target": "walllist",
			"path": "home/walllist"
			 }, {
			"oData": "Wall",
			"pattern": "id",
			"name": "wall",
			"available": "wall",
			"target": "wall",
			"path": "home/walllist/wall"

             }, {
			"oData": "Wall",
			"pattern": "id",
			"name": "wallremote",
			"target": "wallremote",
			"path": "home/walllist/wallremote",
			"available": "wall"
             }, {
			"oData": "Wall",
			"pattern": "id",
			"name": "wallremoteitem-headline",
			"target": "wallremoteitem-headline",
			"path": "home/walllist/wallremote/wallremoteitem-headline"
             }, {
			"oData": "Wall",
			"pattern": "id",
			"name": "wallremoteitem-sticker",
			"target": "wallremoteitem-sticker",
			"path": "home/walllist/wallremote/wallremoteitem-sticker"
             }, {
			"oData": "Wall",
			"pattern": "id",
			"name": "wallremoteitem-link",
			"target": "wallremoteitem-link",
			"path": "home/walllist/wallremote/wallremoteitem-link"
             }, {
			"oData": "Wall",
			"pattern": "id",
			"name": "wallremoteitem-image",
			"target": "wallremoteitem-image",
			"path": "home/walllist/wallremote/wallremoteitem-image"
             }, {
			"oData": "Wall",
			"pattern": "id",
			"name": "wallremoteitem-text",
			"target": "wallremoteitem-text",
			"path": "home/walllist/wallremote/wallremoteitem-text"
             }, {
			"oData": "Wall",
			"pattern": "id",
			"name": "wallremoteitem-sprite",
			"target": "wallremoteitem-sprite",
			"path": "home/walllist/wallremote/wallremoteitem-sprite"
             }, {
			"oData": "Wall",
			"pattern": "id",
			"name": "wallremoteitem-person",
			"target": "wallremoteitem-person",
			"path": "home/walllist/wallremote/wallremoteitem-person"
             }, {
			"oData": "Wall",
			"pattern": "id",
			"name": "wallremoteitem-video",
			"target": "wallremoteitem-video",
			"path": "home/walllist/wallremote/wallremoteitem-video"
             }, {
			"oData": "Wall",
			"pattern": "id",
			"name": "wallremoteitem-attachment",
			"target": "wallremoteitem-attachment",
			"path": "home/walllist/wallremote/wallremoteitem-attachment"
             }, {
			"oData": "Wall",
			"pattern": "id",
			"name": "wallremoteitem-group",
			"target": "wallremoteitem-group",
			"path": "home/walllist/wallremote/wallremoteitem-group"
             }, {
			"oData": "Wall",
			"pattern": "id",
			"name": "wallremoteitem-line",
			"target": "wallremoteitem-line",
			"path": "home/walllist/wallremote/wallremoteitem-line"
             }, {
			"oData": "Wall",
			"pattern": "id",
			"name": "wallremoteitem-arrow",
			"target": "wallremoteitem-arrow",
			"path": "home/walllist/wallremote/wallremoteitem-arrow"
             }, {
			"TEXT": "PAGE_TIT_CAMPAIGNS",
			"name": "campaignlist",
			"target": "campaignlist",
			"available": "campaign",
			"path": "home/campaignlist"
             }, {
			"variant": true,
			"name": "campaignlistvariant",
			"target": "campaignlist",
			"available": "campaign",
			"path": "home/campaignlistvariant"
             }, {
			"TEXT": "PAGE_TIT_PEOPLE",
			"name": "peoplelist",
			"target": "peoplelist",
			"path": "home/peoplelist"
             }, {
			"name": "peoplelistvariant",
			"target": "peoplelist",
			"path": "home/peoplelistvariant"
             }, {
			"TEXT": "PAGE_TIT_EXPERTFINDER",
			"name": "expertfinder",
			"target": "expertfinder",
			"path": "home/expertfinder"
             }, {
			"oData": "IdeaSmall",
			"pattern": "id",
			"name": "idea-display",
			"target": "idea-display",
			"available": "evaluation-display/evaluation-create/evaluationrequest-create/evaluationrequest-display/evaluationrequest-edit",
			"path": "home/idealist/idea-display"
             }, {
			"TEXT": "PAGE_TIT_IDEA_EDIT",
			"oData": "IdeaSmall",
			"name": "idea-edit",
			"target": "idea-modify",
			"path": "home/idealist/idea-display/idea-edit"
             }, {
			"TEXT": "PAGE_TIT_IDEA_CREATE",
			"name": "idea-create",
			"target": "idea-modify",
			"path": "home/idea-create"
              }, {
			"oData": "CampaignSmall",
			"pattern": "id",
			"name": "campaign",
			"target": "campaign",
			"available": "campaign-idealist/campaign-idealistvariant/bloglist/campaign-comment/campaign-feeds/campaign-managerlist/blog-create",
			"path": "home/campaignlist/campaign"
             }, {
			"TEXT": "PAGE_TIT_CAMPAIGN_COMMENT",
			"name": "campaign-comment",
			"target": "campaign-comment",
			"path": "home/campaignlist/campaign/campaign-comment"
             }, {
			"TEXT": "PAGE_TIT_CAMPAIGN_FEEDS",
			"name": "campaign-feeds",
			"target": "campaign-feeds",
			"path": "home/campaignlist/campaign/campaign-feeds"
             }, {
			"TEXT": "PAGE_TIT_CAMPAIGN_IDEAS",
			"name": "campaign-idealist",
			"target": "campaign-idealist",
			"available": "idea-display",
			"path": "home/campaignlist/campaign/campaign-idealist"
             }, {
			"variant": true,
			"name": "campaign-idealistvariant",
			"target": "campaign-idealist",
			"available": "idea-display",
			"path": "home/campaignlist/campaign/campaign-idealistvariant"
             }, {

			"name": "campaign-managerlist",
			"target": "campaign-managerlist",
			"path": "home/campaignlist/campaign/campaign-managerlist"
             }, {

			"name": "search",
			"target": "search"
             }, {

			"name": "searchcategory",
			"target": "searchcategory"
             }, {

			"name": "message",
			"target": "message"
             }, {

			"name": "vote",
			"target": "vote"
             }, {

			"name": "identitycard",
			"target": "identitycard"
             }, {

			"name": "processindicator",
			"target": "processindicator"
             }, {

			"name": "ideacard",
			"target": "ideacard"
             }, {

			"name": "campaigncard",
			"target": "campaigncard"
             }, {

			"name": "votedisplay",
			"target": "votedisplay",
			"path": "home/votedisplay"
             }, {
			"TEXT": "PAGE_TIT_REPORTS",
			"name": "reportlist",
			"target": "reportlist",
			"path": "home/reportlist"
             }, {
			"variant": true,
			"name": "reportlistvariant",
			"target": "reportlist",
			"path": "home/reportlistvariant"
             }, {
			"pattern": "code",
			"TEXT": "PAGE_TIT_REPORTS",
			"name": "report",
			"target": "report",
			"path": "home/report"
             }, {
			//"oData":"IdeaEvaluation",
			//"pattern": "id",
			"TEXT": "PAGE_TIT_EVALUATION",
			"name": "evaluation-display",
			"target": "evaluation-display",
			"path": "home/evaluation-display"
             }, {
			"TEXT": "PAGE_TIT_EVALUATION_EDIT",
			"name": "evaluation-edit",
			"target": "evaluation-modify",
			"path": "home/evaluation-display/evaluation-edit"
             },
		{

			"name": "welcomepage",
			"target": "welcomepage"
             }, {
			"TEXT": "PAGE_TIT_EVALUATION_CREATE",
			"name": "evaluation-create",
			"target": "evaluation-modify"
             }, {
			"TEXT": "PAGE_TIT_FEEDS",
			"name": "feedlist",
			"target": "feedlist",
			"path": "home/feedlist"
             }, {
			"TEXT": "PAGE_TIT_TAGS",
			"name": "taglist",
			"target": "taglist",
			"path": "home/taglist"
             }, {
			"variant": true,
			"name": "taglistvariant",
			"target": "taglist",
			"path": "home/taglistvariant"
             }, {

			"name": "followlist",
			"target": "followlist",
			"path": "home/followlist"
			 }, {
			"variant": true,
			"name": "followlistvariant",
			"target": "followlist",
			"path": "home/followlistvariant"
			 }, {
			"TEXT": "PAGE_TIT_REGISTER_PENDING",
			"name": "registerapprovallist",
			"target": "registerapprovallist",
			"path": "home/registerapprovallist"
			 }, {
			"variant": true,
			"name": "registerapprovallistvariant",
			"target": "registerapprovallist",
			"path": "home/registerapprovallistvariant"
			 }, {
			"TEXT": "PAGE_TIT_BLOGS",
			"name": "bloglist",
			"target": "bloglist",
			"available": "blog-display",
			"path": "home/bloglist"
             }, {
			"variant": true,
			"name": "bloglistvariant",
			"target": "bloglist",
			"available": "blog-display",
			"path": "home/bloglistvariant"
             }, {
			"TEXT": "PAGE_TIT_CAMPAIGN_IDEAS",
			"name": "campaign-bloglist",
			"target": "campaign-bloglist",
			"available": "blog-display",
			"path": "home/campaignlist/campaign/campaign-bloglist"
             }, {
			"variant": true,
			"name": "campaign-bloglistvariant",
			"target": "campaign-bloglist",
			"path": "home/campaignlist/campaign/campaign-bloglistvariant"
             }, {
			"TEXT": "PAGE_TIT_BLOG_EDIT",
			"name": "blog-edit",
			"target": "blog-modify",
			"path": "home/bloglist/blog-display/blog-edit"
             }, {
			"TEXT": "PAGE_TIT_BLOG_CREATE",
			"name": "blog-create",
			"target": "blog-modify",
			"path": "home/blog-create"
              }, {
			"oData": "CampaignBlogsSmall",
			"pattern": "id",
			"name": "blog-display",
			"available": "blog-display/blog-edit",
			"target": "blog-display",
			"path": "home/bloglist/blog-display"
              }, {
			"TEXT": "PAGE_TIT_EVALUATIONREQUEST_CREATE",
			"name": "evaluationrequest-create",
			"target": "evaluationrequestmodify",
			"path": "home/evaluationrequest-create"
             }, {
			"TEXT": "PAGE_TIT_EVALUATIONREQUEST_EDIT",
			"name": "evaluationrequest-edit",
			"target": "evaluationrequestmodify",
			"path": "home/evalreqlist/evaluationrequest-display/evaluationrequest-edit"
             }, {
			// "oData":"EvaluationRequestFull",
			//"pattern": "id",
			"TEXT": "PAGE_TIT_EVALUATIONREQUEST_DISPLAY",
			"name": "evaluationrequest-display",
			"target": "evaluationrequestdisplay",
			"available": "evaluationrequest-edit/evaluationrequest-item",
			"path": "home/evalreqlist/evaluationrequest-display"
             }, {
			//"oData":"EvaluationRequestFullItem",
			//	"pattern": "id",
			"TEXT": "PAGE_TIT_EVALUATIONREQUEST_ITEM",
			"name": "evaluationrequest-item",
			"target": "evaluationrequestitem",
			"path": "home/evalreqlist/evaluationrequest-display/evaluationrequest-item"
             }, {
			"TEXT": "PAGE_TIT_REWARDS",
			"name": "rewardlist",
			"target": "rewardlist",
			"path": "home/rewardlist"
             }, {
			"variant": true,
			"name": "rewardlistvariant",
			"target": "rewardlist",
			"path": "home/rewardlistvariant"
             }, {
			"TEXT": "PAGE_TIT_EVALUATION_REQUESTS",
			"name": "evalreqlist",
			"target": "evalreqlist",
			"path": "home/evalreqlist"

             }, {

			"variant": true,
			"name": "evalreqlistvariant",
			"target": "evalreqlist",
			"path": "home/evalreqlistvariant"
             }, {
			"TEXT": "PAGE_TIT_MY_SETTING",
			"name": "mySetting",
			"target": "mySetting",
			"path": "home/mySetting"
             }];

	var INMBreadCrumbs = Object.extend("sap.ino.commons.util.INMBreadCrumbs", {});
	INMBreadCrumbs.maintainBreadCrumbs = function(oBreadCrumbs, oCurrentRouteObject, oObjectModel, oBreadModel, sCurrentHash, sCurrentTitle) {
		var bGoonBread;
		var bLastBread;
		var oParameter;
		var aPath = sCurrentHash.split("/").length > 1 ? sCurrentHash.split("/")[1] : "";
		var sVariant = oCurrentRouteObject.variant ? sCurrentTitle.split("_").pop() : "";
		if (oBreadModel.getProperty("/CurrentAvailable") === "all") {
			bGoonBread = false;

		} else if (oBreadModel.getProperty("/CurrentAvailable") !== "none") {
			var aAvailablePath = oBreadModel.getProperty("/CurrentAvailable").split("/");
			aAvailablePath.forEach(function(sName, iPathIndex) {
				bGoonBread = sName === oCurrentRouteObject.name ? true : false;
				return;
			});
		} else {
			bGoonBread = false;
		}
		if (bGoonBread) {

			bLastBread = true;
			oParameter = null;
			this.addBreadCrumbs(oBreadCrumbs, oCurrentRouteObject, aPath, oBreadModel, bLastBread, oParameter, sVariant);
		} else {
			// Determine trail parts
			oBreadCrumbs.destroyLinks();

			var aParts = oCurrentRouteObject.path.split("/");
			var slength = aParts.length;

			aParts.forEach(jQuery.proxy(function(sName, iPathIndex) {
				var oCrumbs = this.getBreadObjectByName(sName);
				if (oCrumbs.pattern) {
					oParameter = {};
					oParameter[oCrumbs.pattern] = aPath;
				}
				bLastBread = slength === iPathIndex + 1;
				this.addBreadCrumbs(oBreadCrumbs, oCrumbs, aPath, oBreadModel, bLastBread, oParameter, sVariant);

			}, this));
		}
	};

	INMBreadCrumbs.addBreadCrumbs = function(oBreadCrumbs, oCrumbs, aPath, oBreadModel, bLastBread, oParameter, sVariant) {
		var sPrefix = Configuration.getBackendRootURL() + "/sap/ino/?env=development";
		var oDataPath = oCrumbs.oData + "(" + aPath + ")";
		var sName, sTitle, sVariantText;
		var sOdataPath = Configuration.hasCurrentUserPrivilege("sap.ino.ui::backoffice.access") ? "/sap/ino/xs/rest/backoffice/odata.xsodata/" :
			"/sap/ino/xs/rest/community/odata.xsodata/";
		if (oCrumbs.pattern) {
			var oObjectData = jQuery.ajax({
				url: Configuration.getBackendRootURL() + sOdataPath + oDataPath,
				type: "GET",
				dataType: "json",
				async: false

			});
			oObjectData.done(function(oResponse) {
				sName = oResponse.d.SHORT_NAME ? oResponse.d.SHORT_NAME : oResponse.d.NAME;
				sTitle = oResponse.d.TITLE ? oResponse.d.TITLE : sName;
			});

		}

		if (oCrumbs.variant) {
			var aArray = this.getCurrentView().getController().list.Variants;
			sVariantText = this.getObjectListVariantText(aArray, sVariant) ? this.getObjectListVariantText(aArray, sVariant) : oCrumbs.name;
		} else {
			sVariantText = this._i18n.getResourceBundle().getText(oCrumbs.TEXT);
		}

		oBreadCrumbs.addLink(new sap.m.Link({
			text: oCrumbs.pattern ? sTitle : sVariantText,
			target: "_top",
			enabled: bLastBread ? false : true,
			href: bLastBread ? window.location.href : sPrefix + this.getNavigationLink(oCrumbs.name, oParameter)
		}));
		if (bLastBread && oBreadCrumbs.getLinks().length > 1) {
			var sNumber = oBreadCrumbs.getLinks().length > 1 ? oBreadCrumbs.getLinks().length - 2 : oBreadCrumbs.getLinks().length - 1;
			oBreadCrumbs.getLinks()[sNumber].setEnabled(true);
		}
		oBreadModel.setProperty("/CurrentAvailable", oCrumbs.available ? oCrumbs.available : "none");
		oBreadModel.setProperty("/CurrentRoute", oCrumbs.name);
	};
	INMBreadCrumbs.setBreadCrumbsText = function(oBreadCrumbs, sText) {

		oBreadCrumbs.setCurrentLocationText(sText);

	};

	INMBreadCrumbs.getBreadObjectByPath = function(sText) {
		var breadCrumbsObject;
		jQuery.each(breadCrumbsTexts, function(i, val) {
			if (val.PATH === sText) {
				breadCrumbsObject = val;
			}

		});
		return breadCrumbsObject;
	};

	INMBreadCrumbs.getBreadObjectByName = function(sText) {
		var breadCrumbsObject;
		jQuery.each(breadCrumbsTexts, function(i, val) {
			if (val.name === sText) {
				breadCrumbsObject = val;
			}

		});
		return breadCrumbsObject;
	};

	INMBreadCrumbs.getObjectListVariantText = function(aArray, sText) {
		var aValues = aArray.Values;
		var sCode;
		jQuery.each(aValues, function(i, val) {
			if (val.ACTION === sText) {
				sCode = val.TEXT;
			}
		});
		return this._i18n.getResourceBundle().getText(sCode);
	};
		return INMBreadCrumbs;
});
}; // end of sap/ino/commons/util/INMBreadCrumbs.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.util.Mail') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.util.Mail'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/util/Mail",[], function() {
    "use strict";

    return {
        _getText: function (sText, aParameters) {
            return this.i18n.getResourceBundle().getText(sText, aParameters);
        },
        
        /**
         * Generates the body of a mail that has been created on the UI
         * 
         * @param oContextObjectModel
         *            object model that is currently set for the view
         */
        createContent : function(oContextObjectModel) {
            if(oContextObjectModel) {
                var sSubject = "";
                var sContextObjectName = oContextObjectModel.getProperty("/NAME");
                var sContextObjectType = oContextObjectModel.getProperty("/_OBJECT_TYPE_CODE");
                if(sContextObjectType === "IDEA") {
                    sSubject = this._getText("MAIL_SUBJECT_TEMPLATE", [oContextObjectModel.getProperty("/CAMPAIGN_NAME"), sContextObjectName]);
                } else {
                    sSubject = sContextObjectName;
                } 
    
                var sBody = "";
                var iContextObjectId = oContextObjectModel.getProperty("/ID");
                if(sContextObjectType && iContextObjectId) {
                    var sURL = document.location.origin +
                                document.location.pathname + 
                                this.getNavigationLink(sContextObjectType.toLowerCase() + "-display", {id : iContextObjectId});
                    sBody = this.getText("MAIL_TEMPLATE_" + sContextObjectType, sURL);
                }
                return {
                    subject: sSubject,
                    body: sBody
                };
            }
        }
    };
});
}; // end of sap/ino/commons/util/Mail.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.util.UIObjectConfig') ) {
jQuery.sap.declare('sap.ino.commons.util.UIObjectConfig'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/util/UIObjectConfig",[
], function() {
    "use strict";

    /**
     * @class
     * Object Instance Selection
     */
    var UIObjectConfig = function() {
        throw "May not be instantiated directly";
    };
    
    var Definition = {
        "sap.ino.xs.object.iam.Identity" : {
            searchPath : "/SearchIdentity(searchToken='{searchToken}')/Results",
            instancePath : "Identity",
            selectionKey : "ID",
            selectionField : "NAME",
            secondarySelectionField : "USER_NAME",
            navigation : {
                path : "identity-display",
                key : "id"
            },
            quickView : "sap.ino.vc.iam.IdentityCard",
            parameters : {
                select : "searchToken,ID,NAME,USER_NAME"
            }
        },
        "sap.ino.xs.object.iam.User" : {
            searchPath : "/SearchIdentity(searchToken='{searchToken}')/Results",
            instancePath : "Identity",
            selectionKey : "ID",
            selectionField : "NAME",
            secondarySelectionField : "USER_NAME",
            navigation : {
                path : "idea-display",
                key : "id"
            },
            quickView : "sap.ino.vc.iam.IdentityCard",
            parameters : {
                select : "searchToken,ID,NAME,USER_NAME",
                filter : "TYPE_CODE%20eq%20%27USER%27"
            }
        },
        "sap.ino.xs.object.iam.Group" : {
            searchPath : "/SearchIdentity(searchToken='{searchToken}')/Results",
            instancePath : "Identity",
            selectionKey : "ID",
            selectionField : "NAME",
            secondarySelectionField : "USER_NAME",
            navigation : {
                path : "group-display",
                key : "id"
            },
            quickView : "sap.ino.vc.iam.IdentityCard",
            parameters : {
                select : "searchToken,ID,NAME,USER_NAME",
                filter : "TYPE_CODE%20eq%20%27GROUP%27"
            }
        },
        "sap.ino.xs.object.idea.Idea" : {
            searchPath : "/IdeaMediumSearchParams(searchToken='{searchToken}',tagsToken='',filterName='',filterBackoffice=0)/Results",
            instancePath : "IdeaFull",
            selectionKey : "ID",
            selectionField : "NAME",
            secondarySelectionField : "",
            navigation : {
                path : "idea-display",
                key : "id"
            },
            parameters : {
                select : "searchToken,ID,NAME"
            }
        },
        "sap.ino.xs.object.campaign.Campaign" : {
            searchPath : "/CampaignSearchParams(searchToken='{searchToken}',tagsToken='',filterName='',filterBackoffice=0)/Results",
            instancePath : "CampaignFull",
            selectionKey : "ID",
            selectionField : "NAME",
            secondarySelectionField : "",
            navigation : {
                path : "campaign-display",
                key : "id"
            },
            parameters : {
                select : "searchToken,ID,NAME"
            }
        }
    };
    
    UIObjectConfig.getDefinition = function(sObjectName) {
        var aPart = sObjectName.split(".");
        var sNodeName = aPart.pop();
        if (sNodeName === "Root") {
            sObjectName = aPart.join(".");
        }
        return Definition[sObjectName];
    };
    
    UIObjectConfig.getSearchPath = function(sObjectNode, sSearchToken) {
        sSearchToken = jQuery.sap.encodeURL(sSearchToken.replace(/'/g, "''"));
        sSearchToken = jQuery.trim(sSearchToken);
        var oDefinition = UIObjectConfig.getDefinition(sObjectNode);
        return oDefinition.searchPath.replace("{searchToken}", sSearchToken);
    };
    
    jQuery.each(Definition, function(sObjectName, oUIObjectConfig) {
        if (oUIObjectConfig.searchPath) {
            UIObjectConfig.getSearchPath(sObjectName, oUIObjectConfig.searchPath);
        }
    });
    
    return UIObjectConfig;
});
}; // end of sap/ino/commons/util/UIObjectConfig.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.ActiveNavigationListItem') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.ActiveNavigationListItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.tnt.NavigationListItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.RenderManager'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/ActiveNavigationListItem",[
    "sap/tnt/NavigationListItem",
    "sap/m/Button",
	"sap/m/ButtonType",
	"sap/ui/core/RenderManager"
], function (NavigationListItem, Button, ButtonType, RenderManager)  {
	"use strict";
	
    /**
     * Works like sap.tnt.NavigationListItem. An additional button will be shown on the right side of the control.
     * 
     * <ul>
     * <li>Properties>
     * <ul>
     * buttonIcon: icon that will be rendered for th button
     * </ul>
     * </li>
     * <li>Events
     * <ul>
     * press: user has hit the button placed on the list item
     * </ul>
     * </li>
     * </ul>
     * 
     * @see sap.tnt.NavigationListItem
     */
    
    var ActiveNavigationListItem = NavigationListItem.extend("sap.ino.controls.ActiveNavigationListItem", {
        metadata : {
            properties : {
                selected : {
                    type : "boolean",
                    defaultValue : false
                },
                visible : {
                    type : "boolean",
                    defaultValue : true
                },
                buttonIcon : {
                    type : "sap.ui.core.URI"
                },
                buttonTooltip : {
                    type : "string",
                    defaultValue: ""
                }
            },
            aggregations : {
                _button : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                }
            },
            events : {
                press : {}
            }
        }
    });
    
    ActiveNavigationListItem.prototype.render = function (oRm, oControl) {
        //is the list expanded?
        // if(!this.getVisible()) {
        //     return;
        // }

        var that = this;
        var aItems = this.getAggregation("items");
        if(oControl.getExpanded() && (!aItems || aItems.length === 0) && this.getButtonIcon()) {
            var oNLIRenderManager = new RenderManager();
            if (NavigationListItem.prototype.render) {
                NavigationListItem.prototype.render.apply(this, [oNLIRenderManager, oControl]);
            }
            
            var sHTML = oNLIRenderManager.aBuffer.join("");
            var oButton = this.getAggregation("_button");
            if(!oButton) {
                oButton = new Button({
                    icon: this.getButtonIcon(),
                    type: ButtonType.Transparent,
                    tooltip: this.getTooltip()
                });
                jQuery(oButton)[0].attachPress(that, function(oEvent) {
                    oEvent.cancelBubble();
                    var oParams = {
                        item: that
                    };
                    that.firePress(oParams);
                });
                oButton.addStyleClass("sapInoActiveNavigationListItemButton");
                // fix add new object to clipboard 
                //this.setAggregation("_button", oButton);
            }
    
            var oButtonHTML = oNLIRenderManager.getHTML(oButton);
            var oHTML = jQuery(sHTML);
            oHTML.append(oButtonHTML);
            oHTML.addClass("sapInoActiveNavigationListItem");
            if(this.getText() !== ''){
                oRm.unsafeHtml(oHTML.outerHTML());
            }
        } else {
            if (NavigationListItem.prototype.render) {
                NavigationListItem.prototype.render.apply(this, [oRm, oControl]);
            }
        }
        setTimeout(function() {
            if(that.getSelected()) {
                that._inoSelect();
            } else {
                that._inoUnselect();
            }
        }, 0);
    };
    
    ActiveNavigationListItem.prototype._inoSelect = function () {
		var $this = this.$(),
			navList = this.getNavigationList();
		if (!navList) {
		    return;
		}
        if(!$this.hasClass('sapInoNavLIItemSelected')) {
		    $this.addClass('sapInoNavLIItemSelected');
        }
        
        
    };
    
    ActiveNavigationListItem.prototype._inoUnselect = function () {
		var $this = this.$(),
			navList = this.getNavigationList();
	
		if (!navList) {
			return;
		}        
		if($this.hasClass('sapInoNavLIItemSelected')) {
            $this.removeClass('sapInoNavLIItemSelected');
        }
    };
    
    return ActiveNavigationListItem;
});
}; // end of sap/ino/controls/ActiveNavigationListItem.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.AriaLivePriority') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.controls.AriaLivePriority");
(function() {
	"use strict";

 	sap.ino.controls.AriaLivePriority = {
 		NONE: "",
 		OFF: "off",
 		POLITE: "polite",
 		ASSERTIVE: "assertive"
 	};
})();
}; // end of sap/ino/controls/AriaLivePriority.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.BackHeadItem') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.BackHeadItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.unified.ShellHeadItem'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/BackHeadItem",[
    "sap/ui/unified/ShellHeadItem",
    'sap/ui/core/IconPool'
], function(
	ShellHeadItem,
	IconPool) {
	"use strict";

	/**
	 *
	 * Specialized HeadShellItem to render Back button
	 *
	 * <ul>
	 * <li>Properties
	 * <ul>
	 * <li>path: binding path to menu items</li>
	 * </ul>
	 * </li>
	 * </ul>
	 */
	return ShellHeadItem.extend("sap.ino.controls.BackHeadItem", {
		metadata: {
			properties: {
				enabled: {
					type: "boolean",
					group: "Appearance",
					defaultValue: true
				}
			},
			events: {
				backMenuOpen: {}
			}
		},

		onclick: function(oEvent) {
			oEvent.preventDefault();
		},

		_toggleIcon: function($Link, sIconName) {
			if (IconPool.isIconURI(sIconName)) {
				var oIconInfo = IconPool.getIconInfo(sIconName);
				if (oIconInfo) {
					$Link.find("span").text(oIconInfo.content).css("font-family", "'" + oIconInfo.fontFamily + "'");
				}
			}
		},

		_refreshIcon: function() {
			var that = this;
			var $LinkBegin = this.$();
			var i18nModel = sap.ui.getCore().getLibraryResourceBundle("sap.ino.controls");
            var sTitle;
			if(i18nModel){
			  sTitle = i18nModel.getText("CTRL_NAVIGATION_HISTORY");
			}
			ShellHeadItem.prototype._refreshIcon.apply(this, arguments);
			if(!this.getVisible() || $LinkBegin.next(".sapInoBackBtnEnd").length > 0){
			    return;
			}
			$LinkBegin.addClass("sapInoBackBtnBegin");
			$LinkBegin.attr('title', this.getTooltip());
			
			if (!$LinkBegin.next().hasClass("sapInoBackBtnEnd")) {
				$LinkBegin.after($(
					"<a role='button' aria-haspopup='true' tabindex='0' title='" + sTitle + "' href='javascript:void(0);' class='sapUiUfdShellHeadItm sapInoBackBtnEnd'><span></span></a>"));
			}
			var sIconName = "sap-icon://slim-arrow-down";
			var $LinkEnd = $LinkBegin.next();
			this._toggleIcon($LinkEnd, sIconName);
			if (!this.getEnabled()) {
				$LinkBegin
					.addClass("sapMLnkDsbl")
					.attr("aria-disabled", true)
					.attr("disabled", true)
					.unbind("click");
				$LinkEnd
					.addClass("sapMLnkDsbl")
					.attr("aria-disabled", true)
					.attr("disabled", true)
					.unbind("click");
			} else {
				$LinkBegin
					.removeClass("sapMLnkDsbl")
					.attr("aria-disabled", false)
					.attr("disabled", false)
					.bind("click", function(oEvent) {
						that.firePress();
						oEvent.preventDefault();
					});
				$LinkEnd
					.removeClass("sapMLnkDsbl")
					.attr("aria-disabled", false)
					.attr("disabled", false)
					.bind("click", function(oEvent) {
						that._toggleIcon($LinkEnd, "sap-icon://slim-arrow-up");
						that.fireBackMenuOpen();
						oEvent.preventDefault();
					});
			}

		},

		setEnabled: function(bEnabled) {
			bEnabled = !!bEnabled;
			this.setProperty("enabled", bEnabled, true);
			if (this.getDomRef()) {
				this._refreshIcon();
			}
			return this;
		}
	});
});
}; // end of sap/ino/controls/BackHeadItem.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.BlogStatusType') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.controls.BlogStatusType");
(function() {
	"use strict";
	sap.ino.controls.BlogStatusType = {
 		Draft: "sap.ino.config.DRAFT",
 		Published: "sap.ino.config.BLOG_PUBLISHED"
 	};
})();
}; // end of sap/ino/controls/BlogStatusType.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.CampaignStatusType') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.controls.CampaignStatusType");
(function() {
	"use strict";
	sap.ino.controls.CampaignStatusType = {
 		Draft: "sap.ino.config.CAMP_DRAFT",
 		Published: "sap.ino.config.CAMP_PUBLISHED"
 	};
})();
}; // end of sap/ino/controls/CampaignStatusType.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.CampaignType') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.controls.CampaignType");
(function() {
	"use strict";
	sap.ino.controls.CampaignType = {
		Small: "Small",
		Normal: "Normal",
		Banner: "Banner",
		Managed:"Managed"
	};
})();
}; // end of sap/ino/controls/CampaignType.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.CategorySearchField') ) {
/*
*   Search control for inm global search;
*   
*/

jQuery.sap.declare('sap.ino.controls.CategorySearchField'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.SearchField'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.ActionSelect'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.InvisibleText'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ListItem'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/CategorySearchField",[
    'sap/ui/core/Control',
    'sap/m/SearchField',
    'sap/m/Button',
    'sap/m/ActionSelect',
    'sap/ui/core/InvisibleText',
    'sap/ui/core/ListItem',
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/ino/commons/application/Configuration"
],function(Control, SearchField, Button, ActionSelect, InvisibleText, ListItem, Filter, FilterOperator, Configuration){
    'use strict';
    
    return Control.extend("sap.ino.controls.CategorySearchField", {
        metadata: {
            properties: {
                enbaled: {
                    type: 'boolean'
                },
                selectedCategory: {
                    type: 'string'
                },
                category: {
                    type: 'object[]'
                }
            },
            aggregations: {
                _SearchField: {
                    type: 'sap.m.SearchField',
                    multiple: false,
                    visibility: false
                },
                _CategoryDropDown: {
                    type: 'sap.m.ActionSelect',
                    multiple: false,
                    visibility: false
                }
            },
            events: {
                search: {}
            }
        },
        
        init: function() {
			this._oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ino.controls");
		},
        
        _onSearch: function(event,keyword){
            var searchAguments =  this.getModel('search').getProperty('/searchAguments');
            this.fireSearch({
                category: this.getProperty('selectedCategory'),
                search: keyword || event.getParameters().query.trim(),
                param: searchAguments
            });
        },
       
        _selectCategory: function(event){
            var param = event.getParameters();
            var item = param && param.selectedItem;
            var key = item && item.getKey();
            this.setProperty('selectedCategory', key);
            this.getModel('search').setProperty('/selectedCategory',key);
            var searchField = this.getAggregation('_SearchField');
            if(key === 'idealistbycompany' || key === 'campaign-idealistbycompany'){
                 
                if(!searchField.getEnableSuggestions()){
                    searchField.attachSuggest(function(oEvent) {
                    var sValue = oEvent.getParameter("suggestValue");
                    var oGroupSetting = Configuration.getGroupConfiguration();
                    var TYPENAME = oGroupSetting.GROUP === 'COMPANY' ? 1 : 2;
                    // Encoding needed for IE!
                     searchField.getModel("data").read("/SearchIdentityOrgCompanyParams(searchToken='" + jQuery.sap.encodeURL(sValue) + "')/Results", {
                         urlParameters: {
							"$skip": 0,
							"$top":30,
							"$filter":'TYPENAME eq \'' + TYPENAME + '\''
						},
						success: function(oData) {
							searchField.removeAllSuggestionItems();
							// we cannot set all items at once, therefore we use 
							// 0..n-1 addAggregation w/o list update
							// n addSuggestionItem which triggers a list refresh
							
							for (var ii = 0; ii < oData.results.length - 1; ii++) {
								searchField.addAggregation("suggestionItems", new sap.m.SuggestionItem({
									key: oData.results[ii][oGroupSetting.GROUP],
									text: oData.results[ii].DISPLAYLABEL
								}), true);
							}
							if (oData.results.length > 0) {
								searchField.addSuggestionItem(new sap.m.SuggestionItem({
									key: oData.results[oData.results.length - 1][oGroupSetting.GROUP],
									text: oData.results[oData.results.length - 1].DISPLAYLABEL
								}));
							}
							searchField.suggest(true);
						}
					});
                    
                    
    			 //   searchField.getBinding("suggestionItems").filter(aFilters);
                    
                });
            searchField.setEnableSuggestions(true);
                }
			    
            }else{
                searchField.setEnableSuggestions(false);  
                searchField.destroySuggestionItems();
            }
            
        },
        
        _SearchInput: function(){
            var self = this;
            var searchField = self.getAggregation('_SearchField');
            if(!searchField){
                searchField = new SearchField({
                    showSearchButton: true,
                    value: "{path: 'search>/searchAguments/?query/search', formatter: 'sap.ino.commons.formatters.BaseFormatter.URIdecoding'}",
                    search: function(e){
                        var oItem = e.getParameter("suggestionItem");
                        //selected from suggestionItem
                        if(oItem){
                            e.getSource().setValue(oItem.getKey());
                        }
                        var searchKey = oItem ? oItem.getKey() : null;
                        self._onSearch(e,searchKey);  
                    }
                }).addStyleClass('sapInoGlobalSearchInput');
                self.setAggregation('_SearchField', searchField, true);
            }
            return searchField;
        },
        
        _SearchCategory: function(){
            var self = this;
            var categoryDropDown = self.getAggregation('_CategoryDropDown');
            if(!categoryDropDown){
                categoryDropDown = new ActionSelect({
                    autoAdjustWidth: true,
                    selectedKey: '{search>/selectedCategory}',//self.getProperty('selectedCategory'),
                    change:function(e){
                        self._selectCategory(e);   
                    }
                }).bindItems({
                    path: 'search>/category',
                    template: new ListItem({
                        key: '{search>key}',
                        tooltip: "{parts: [{path: 'search>value'}, {path: 'search>bNotFormatter'}], formatter: 'sap.ino.commons.formatters.BaseFormatter.formatGlobalSearchKey'}",
                        text: "{parts: [{path: 'search>value'}, {path: 'search>bNotFormatter'}], formatter: 'sap.ino.commons.formatters.BaseFormatter.formatGlobalSearchKey'}"
                    })
                }).addStyleClass('sapInoGlobalSearchDropDown');
                self.setAggregation('_CategoryDropDown', categoryDropDown, true);
            }
            return categoryDropDown;
        },
        
        renderer: function(oRM, oControl){
            oRM.write('<div');
            oRM.addClass('sapInoGlobalSearch');
            oRM.writeClasses();
            oRM.write('>');
            oRM.renderControl(oControl._SearchCategory());
            oRM.renderControl(oControl._SearchInput());
            oRM.write('</div>');
        }
    });
});
}; // end of sap/ino/controls/CategorySearchField.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.ColorPicker') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.ColorPicker'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.HBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.HTML'); // unlisted dependency retained
jQuery.sap.require('sap.m.Input'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.Slider'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/ColorPicker",[
    "sap/ui/core/Control",
    "sap/m/HBox",
    "sap/m/VBox",
    "sap/ui/core/HTML",
    "sap/m/Input",
    "sap/m/Label",
    "sap/m/Slider"
], function(Control, HBox, VBox, HTML, Input, Label, Slider) {
    "use strict";

    /**
     * Constructor for a new ColorPicker.
     *
     * <ul>
     * <li>Properties
     * <ul>
     * <li>colorString: This is the import-parameter of the ColorPicker.
     * As input-parameter, it can be a Hexadecimal string (#FFFFFF), a RGB-string rgb(255,255,255), a HSV-string hsv(360,100,100) or a CSS-colorname 'red'.
     * As output-parameter it is a RGB-string containing the current color.</li>
     * </ul>
     * <li>Events
     * <ul>
     * <li>change: Color has been changed. Value was changed. This event is fired if the value has changed by an user action</li>
     * <li>liveChange: Color is changed live</li>
     * </ul>
     * </li>
     * </ul>
     */
    var ColorPicker = Control.extend("sap.ino.controls.ColorPicker", {
            metadata: {
                properties: {
                    colorString: {
                        type: "string",
                        group: "Misc",
                        defaultValue: null
                    }
                },
                events: {
                    change: {
                        parameters: {

                            /**
                             * Parameter containing the RED value (0-255)
                             */
                            r: {type: "int"},

                            /**
                             * Parameter containing the GREEN value (0-255)
                             */
                            g: {type: "int"},

                            /**
                             * Parameter containing the BLUE value (0-255)
                             */
                            b: {type: "int"},

                            /**
                             * Parameter containing the HUE value (0-360)
                             */
                            h: {type: "int"},

                            /**
                             * Parameter containing the SATURATION value (0-100)
                             */
                            s: {type: "int"},

                            /**
                             * Parameter containing the VALUE value (0-100)
                             */
                            v: {type: "int"},

                            /**
                             * Parameter containing the Hexadecimal string (#FFFFFF)
                             */
                            hex: {type: "string"},

                            /**
                             * Parameter containing the alpha value (transparency)
                             */
                            alpha: {type: "string"}
                        }
                    },

                    /**
                     * Value was changed. This event is fired during the mouse move. The normal change event ist only fired by mouseup.
                     */
                    liveChange: {
                        parameters: {

                            /**
                             * Parameter containing the RED value (0-255)
                             */
                            r: {type: "int"},

                            /**
                             * Parameter containing the GREEN value (0-255)
                             */
                            g: {type: "int"},

                            /**
                             * Parameter containing the BLUE value (0-255)
                             */
                            b: {type: "int"},

                            /**
                             * Parameter containing the HUE value (0-360)
                             */
                            h: {type: "int"},

                            /**
                             * Parameter containing the SATURATION value (0-100)
                             */
                            s: {type: "int"},

                            /**
                             * Parameter containing the VALUE value (0-100)
                             */
                            v: {type: "int"},

                            /**
                             * Parameter containing the Hexadecimal string (#FFFFFF)
                             */
                            hex: {type: "string"},

                            /**
                             * Parameter containing the alpha value (transparency)
                             */
                            alpha: {type: "string"}
                        }
                    }
                }
            },
            renderer: function (oRm, oControl) {
                // write the HTML into the render manager
                oRm.write("<div");   // Outer DIV
                oRm.writeControlData(oControl);
                oRm.writeClasses();
                oRm.write(">"); // <DIV> element
                oRm.renderControl(oControl.oMatrix);
                oRm.write("</div>");  // outer DIV
            }
        }
    );


    /**
     * Initialization hook... creating composite parts
     */
    ColorPicker.prototype.init = function(){

        var oRb = sap.ui.getCore().getLibraryResourceBundle("sap.ino.controls");

        //  declare global variable for the ColorObject
        this.Color = {
            r   :  255,
            g   :  255,
            b   :  255,
            h   :  0,
            s   :  0,
            v   :  100,
            a   :  1,
            a_old: 1,
            hex :  "#FFFFFF",
            old :  "#FFFFFF"
        };

        //  create global variables
        this.HexString = "FFFFFF";
        this.rgbString = "";
        this.$cpBox = null;
        this.$cpCur = null;
        this.RGB = {
            r : 0,
            g : 0,
            b : 0
        };

        //  check if we are in RTL mode
        this.bRtl  = sap.ui.getCore().getConfiguration().getRTL();

        //  create Matrix layout (outer control)
        this.oMatrix = new VBox({
            width : "270px"
        });
        this.oMatrix.setParent(this);
        this.oMatrix.addStyleClass("sapInoColorPicker-ColorPickerMatrix");

        //  HTML-Control containing the ColorPickerBox
        var cpBoxID = this.getId() + '-cpBox';
        var cpCurID = this.getId() + '-cpCur';
        this.oHtmlBox = new HTML({
            content : "<DIV id=" + cpBoxID + " class=sapInoColorPicker-ColorPickerBox><DIV id=" + cpCurID + " class=sapInoColorPicker-ColorPickerCircle></DIV></DIV>"
        });

        //  HTML-Control containing the Old Color Box
        var ocBoxID = this.getId() + '-ocBox';
        this.oHtmlOldCol = new HTML({
            content : "<DIV id=" + ocBoxID + " class=sapInoColorPicker-ColorPickerOldColor></DIV>"
        });

        //  HTML-Control containing the New Color Box
        var ncBoxID = this.getId() + '-ncBox';
        this.oHtmlNewCol = new HTML({
            content : "<DIV id=" + ncBoxID + " class=sapInoColorPicker-ColorPickerNewColor></DIV>"
        });

        //  label and input field for Hexadecimal value
        var inpID = this.getId() + '-hxF';
        var hexValue = this.Color.hex.substr(1);
        this.oHexField = new Input({id: inpID, value : hexValue});
        this.oHexField.addStyleClass("sapInoColorPicker-ColorPickerHexField");
        this.oHexField.setTooltip(oRb.getText("COLORPICKER_HEX"));
        this.oHexLabel = new Label();
        this.oHexLabel.addStyleClass("sapInoColorPicker-ColorPickerLabels");
        this.oHexLabel.setText("#:");
        this.oHexLabel.setTooltip(oRb.getText("COLORPICKER_HEX"));
        this.oHexLabel.setLabelFor(this.oHexField);

        //  label and input field for Red Value
        inpID = this.getId() + '-rF';
        this.oRedField = new Input({id: inpID, value: this.Color.r, width:"3.5em"});
        this.oRedField.addStyleClass("sapInoColorPicker-ColorPickerInputFieldsLeft");
        this.oRedField.setTooltip(oRb.getText("COLORPICKER_RED"));
        this.oRedLabel = new Label();
        this.oRedLabel.addStyleClass("sapInoColorPicker-ColorPickerLabels");
        this.oRedLabel.setText("R:");
        this.oRedLabel.setTooltip(oRb.getText("COLORPICKER_RED"));
        this.oRedLabel.setLabelFor(this.oRedField);

        //  label and input field for Green Value
        inpID = this.getId() + '-gF';
        this.oGreenField = new Input({id: inpID, value : this.Color.g, width:"3.5em"});
        this.oGreenField.addStyleClass("sapInoColorPicker-ColorPickerInputFieldsLeft");
        this.oGreenField.setTooltip(oRb.getText("COLORPICKER_GREEN"));
        this.oGreenLabel = new Label();
        this.oGreenLabel.addStyleClass("sapInoColorPicker-ColorPickerLabels");
        this.oGreenLabel.setText("G:");
        this.oGreenLabel.setTooltip(oRb.getText("COLORPICKER_GREEN"));
        this.oGreenLabel.setLabelFor(this.oGreenField);

        //  label and input field for Blue Value
        inpID = this.getId() + '-bF';
        this.oBlueField = new Input({id: inpID, value : this.Color.b, width:"3.5em"});
        this.oBlueField.addStyleClass("sapInoColorPicker-ColorPickerInputFieldsLeft");
        this.oBlueField.setTooltip(oRb.getText("COLORPICKER_BLUE"));
        this.oBlueLabel = new Label();
        this.oBlueLabel.addStyleClass("sapInoColorPicker-ColorPickerLabels");
        this.oBlueLabel.setText("B:");
        this.oBlueLabel.setTooltip(oRb.getText("COLORPICKER_BLUE"));
        this.oBlueLabel.setLabelFor(this.oBlueField);

        //  label and input field for Hue Value
        inpID = this.getId() + '-hF';
        this.oHueField = new Input({id: inpID, value : this.Color.h, width:"3.5em"});
        this.oHueField.addStyleClass("sapInoColorPicker-ColorPickerInputFieldsRight");
        this.oHueField.setTooltip(oRb.getText("COLORPICKER_HUE"));
        this.oHueLabel = new Label();
        this.oHueLabel.addStyleClass("sapInoColorPicker-ColorPickerLabels");
        this.oHueLabel.setText("H:");
        this.oHueLabel.setTooltip(oRb.getText("COLORPICKER_HUE"));
        this.oHueLabel.setLabelFor(this.oHueField);

        //  label and input field for Saturation Value
        inpID = this.getId() + '-sF';
        this.oSatField = new Input({id: inpID, value : this.Color.s, width:"3.5em"});
        this.oSatField.addStyleClass("sapInoColorPicker-ColorPickerInputFieldsRight");
        this.oSatField.setTooltip(oRb.getText("COLORPICKER_SAT"));
        this.oSatLabel = new Label();
        this.oSatLabel.addStyleClass("sapInoColorPicker-ColorPickerLabels");
        this.oSatLabel.setText("S:");
        this.oSatLabel.setTooltip(oRb.getText("COLORPICKER_SAT"));
        this.oSatLabel.setLabelFor(this.oSatField);

        //  label and input field for Value
        inpID = this.getId() + '-vF';
        this.oValField = new Input({id: inpID, value : this.Color.v, width:"3.5em"});
        this.oValField.addStyleClass("sapInoColorPicker-ColorPickerInputFieldsRight");
        this.oValField.setTooltip(oRb.getText("COLORPICKER_VALUE"));
        this.oValLabel = new Label();
        this.oValLabel.addStyleClass("sapInoColorPicker-ColorPickerLabels");
        this.oValLabel.setText("V:");
        this.oValLabel.setTooltip(oRb.getText("COLORPICKER_VALUE"));
        this.oValLabel.setLabelFor(this.oValField);

        //  slider
        inpID = this.getId() + '-hSLD';
        this.oSlider = new Slider({id: inpID});
        this.oSlider.setStep(1);
        this.oSlider.setMax(360);
        this.oSlider.setValue(parseInt(this.oHueField.getValue(), 10),10);
        this.oSlider.setTooltip(oRb.getText("COLORPICKER_HUE"));
        this.oSlider.addStyleClass("sapInoColorPicker-ColorPickerSlider");

        // alpha slider
        inpID = this.getId() + '-aSLD';
        this.oAlphaSlider = new Slider({id: inpID});
        this.oAlphaSlider.setMax(1);
        this.oAlphaSlider.setValue(1);
        this.oAlphaSlider.setStep(0.01);
        this.oAlphaSlider.setTooltip(oRb.getText("COLORPICKER_ALPHA"));
        this.oAlphaSlider.addStyleClass("sapInoColorPicker-ColorPickerAlphaSlider");

        //  1.Horizontal Layout
        this.oHLayout1 = new HBox({
            items: [this.oRedLabel, this.oRedField]
        });

        //  2.Horizontal Layout
        this.oHLayout2 = new HBox({
            items: [this.oGreenLabel, this.oGreenField]
        });

        //  3.Horizontal Layout
        this.oHLayout3 = new HBox({
            items: [this.oBlueLabel, this.oBlueField]
        });

        //  4.Horizontal Layout
        this.oHLayout4 = new HBox({
            items: [this.oHexLabel, this.oHexField]
        });

        //  5.Horizontal Layout
        this.oHLayout5 = new HBox({
            items: [this.oHueLabel, this.oHueField]
        });

        //  6.Horizontal Layout
        this.oHLayout6 = new HBox({
            items: [this.oSatLabel, this.oSatField]
        });

        //  7.Horizontal Layout
        this.oHLayout7 = new HBox({
            items: [this.oValLabel, this.oValField]
        });

        //  8.Horizontal Layout
        this.oHLayout8 = new HBox({
            items: [this.oHtmlOldCol, this.oHtmlNewCol]
        });

        //  Vertical Layout1 containing first four horizontal layouts
        this.oVLayout1 = new VBox({
            items:[ this.oHLayout1, this.oHLayout2, this.oHLayout3, this.oHLayout4]
        });

        //  Vertical Layout2 containing 2.nd four horizontal layouts
        this.oVLayout2 = new VBox({
            items:[ this.oHLayout5, this.oHLayout6, this.oHLayout7, this.oHLayout8]
        });
        this.oVLayout2.addStyleClass("sapInoColorPicker-ColorPickerLastColumn");

        //  add first Row to the Matrix Layout
        this.oMatrix.addItem(new HBox({
            items : [this.oHtmlBox, this.oVLayout1, this.oVLayout2]
        }));
        //  create second Row containing slider
        this.oMatrix.addItem(this.oSlider);
        //  add third Row to the Matrix Layout
        this.oMatrix.addItem(this.oAlphaSlider);

        //  attach Eventhandler
        this.oHexField.attachChange(jQuery.proxy(this._handleHexValueChange,this));
        this.oRedField.attachChange(jQuery.proxy(this._handleRedValueChange,this));
        this.oGreenField.attachChange(jQuery.proxy(this._handleGreenValueChange,this));
        this.oBlueField.attachChange(jQuery.proxy(this._handleBlueValueChange,this));
        this.oHueField.attachChange(jQuery.proxy(this._handleHueValueChange,this));
        this.oSatField.attachChange(jQuery.proxy(this._handleSatValueChange,this));
        this.oValField.attachChange(jQuery.proxy(this._handleValValueChange,this));
        this.oSlider.attachLiveChange(jQuery.proxy(this._handleSliderLiveChange,this));
        this.oSlider.attachChange(jQuery.proxy(this._handleSliderChange,this));
        this.oAlphaSlider.attachLiveChange(jQuery.proxy(this._handleAlphaSliderLiveChange,this));
        this.oAlphaSlider.attachChange(jQuery.proxy(this._handleAlphaSliderChange,this));

        this.data("sap-ui-fastnavgroup", "true", true); // Define group for F6 handling
    };



    /**
     * Clean-up hook... destroying composite parts.
     */
    ColorPicker.prototype.exit = function(){

        //  unbind Mouse-Event-Handler
        if (this.$cpBox) {
            this.$cpBox.unbind("mousedown", this.handleMouseDown);
            this.$cpBox.unbind("touchstart", this.handleTouchStart);
        }

        jQuery(document)
            .unbind("mousemove", this.handleMousePos)
            .unbind("mouseup", this.handleMouseUp);
        jQuery(document)
            .unbind("touchmove", this.handleMousePos)
            .unbind("touchend", this.handleMouseUp);

        //  destroy Objects
        this.oMatrix.destroy();
    };



    /*
     * Evaluate parameter values
     */
    ColorPicker.prototype.setColorString = function(iColorString) {

        //  parse string; get the color object
        this._parseColorString(iColorString);

        //  update UI
        this.oHexField.setValue(this.Color.hex.substr(1));
        this.oRedField.setValue(this.Color.r);
        this.oGreenField.setValue(this.Color.g);
        this.oBlueField.setValue(this.Color.b);
        this.oHueField.setValue(this.Color.h);
        this.oSatField.setValue(this.Color.s);
        this.oValField.setValue(this.Color.v);
        this.oSlider.setValue(this.Color.h);
        this.oAlphaSlider.setValue(this.Color.a);

        //  fire events & update property
        this.fireLiveChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
        this.fireChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
        this.setProperty('colorString', this._getRGBString(), true); // No re-rendering!
    };



    /**
     * Event handler of the mouse down event
     */
    ColorPicker.prototype.handleMouseDown = function(e) {

        //  exit if the HEXfield is errorneous
        if (this.oHexField.getValueState() == sap.ui.core.ValueState.Error) {
            return;
        }

        //  call mouse position handler
        this.handleMousePos(e);
        jQuery(document)
            .bind("mousemove", jQuery.proxy(this.handleMousePos, this))
            .bind("mouseup", jQuery.proxy(this.handleMouseUp, this));
    };


    /**
     * Event handler of the mouse down event
     */
    ColorPicker.prototype.handleTouchStart = function(e) {

        //  exit if the HEXfield is errorneous
        if (this.oHexField.getValueState() == sap.ui.core.ValueState.Error) {
            return;
        }

        //  call mouse position handler
        this.handleMousePos(e);
        jQuery(document)
            .bind("touchmove", jQuery.proxy(this.handleMousePos, this))
            .bind("touchend", jQuery.proxy(this.handleMouseUp, this));
    };
    

    /**
     * Event handler of the mouse up event
     */
    ColorPicker.prototype.handleMouseUp = function(e) {

        //  exit if the HEXfield is errorneous
        if (this.oHexField.getValueState() == sap.ui.core.ValueState.Error) {
            return;
        }

        //  call mouse position handler
        this.handleMousePos(e);
        jQuery(document)
            .unbind("mousemove", this.handleMousePos)
            .unbind("mouseup", this.handleMouseUp);
        jQuery(document)
            .unbind("touchmove", this.handleMousePos)
            .unbind("touchend", this.handleMouseUp);

        if (!jQuery(e.target).hasClass("sapInoColorPicker-ColorPickerBox")) {
            return;
        }
        
        this.fireChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
        this.setProperty('colorString', this._getRGBString(), true); // No re-rendering!
    };



    /**
     * Event handler for the mouse position
     */
    ColorPicker.prototype.handleMousePos = function(e) {
        if (!jQuery(e.target).hasClass("sapInoColorPicker-ColorPickerBox")) {
            return;
        }
        var fPageX = e.pageX;
        var fPageY = e.pageY;
        if (isNaN(fPageX) || isNaN(fPageY) || typeof fPageX === "undefined" || typeof fPageY === "undefined") {
            if (e.targetTouches && e.targetTouches.length > 0) {
                fPageX = e.targetTouches[0].pageX;
                fPageY = e.targetTouches[0].pageY;
            }
        }
        if (isNaN(fPageX) || isNaN(fPageY) || typeof fPageX === "undefined" || typeof fPageY === "undefined") {
            return;
        }
        
        //  get offset of the colorpicker box
        var cpBoxOffset = this.$cpBox.offset();
        if (this.zoomContext && !this.zoomCapable) {
            var zoom = this.zoomContext.getZoom();    
            cpBoxOffset.left = cpBoxOffset.left * 100 / zoom;
            cpBoxOffset.top = cpBoxOffset.top * 100 / zoom;
        }

        //  get width & height if the colorpicker box
        var cpBoxWidth  = this.$cpBox.width();
        var cpBoxHeight = this.$cpBox.height();

        //  calculate the hue and saturation values from the mouse position
        var x = fPageX - cpBoxOffset.left;
        var y = fPageY - cpBoxOffset.top;
        x = Math.min(Math.max(x, 0), cpBoxWidth);
        //  handle RTL - mode
        if (this.bRtl) {
            var rX = cpBoxWidth - x;
            x = rX;
        }
        y = Math.min(Math.max(y, 0), cpBoxHeight);
        var valValue = parseInt(x / cpBoxWidth * 100,10);
        var satValue = parseInt((1 - y / cpBoxHeight) * 100,10);

        //  set the new values
        this.oSatField.setValue(satValue);
        this.oValField.setValue(valValue);

        //  process changes
        this._processHSVchanges();

        //  fire events & update property
        this.fireLiveChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
        this.fireChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
        this.setProperty('colorString', this._getRGBString(), true); // No re-rendering!
    };


    /**
     * Event handler for Slider LIVE changes
     */
    ColorPicker.prototype._handleSliderLiveChange = function() {

        //  get the new value
        var sliderValue = parseInt(this.oSlider.getValue(),10);

        //  set the new hue value in the hue inut field
        this.oHueField.setValue(sliderValue);

        //  process changes
        this._processHSVchanges();

        //  fire events & update property
        this.fireLiveChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
        this.setProperty('colorString', this._getRGBString(), true); // No re-rendering!
    };



    /**
     * Event handler for Slider changes
     */
    ColorPicker.prototype._handleSliderChange = function() {

        //  get the new value
        var sliderValue = parseInt(this.oSlider.getValue(),10);

        //  set the new hue value in the hue inut field
        this.oHueField.setValue(sliderValue);

        //  process changes
        this._processHSVchanges();

        //  fire Change event
        this.fireChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
        this.setProperty('colorString', this._getRGBString(), true); // No re-rendering!
    };



    /**
     * Event handler for Alpha-Slider LIVE changes
     */
    ColorPicker.prototype._handleAlphaSliderLiveChange = function() {

        // get the new value
        this.Color.a = this.oAlphaSlider.getValue();

        //  process changes
        this._processHSVchanges();

        //  fire events & update property
        this.fireLiveChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
        this.setProperty('colorString', this._getRGBString(), true); // No re-rendering!
    };



    /**
     * Event handler for Alpha-Slider changes
     */
    ColorPicker.prototype._handleAlphaSliderChange = function() {

        //  get the new value
        this.Color.a = this.oAlphaSlider.getValue();

        //  process changes
        this._processHSVchanges();

        //  fire Change event
        this.fireChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
        this.setProperty('colorString', this._getRGBString(), true); // No re-rendering!
    };



    /**
     * Event handler for changes of hue input field
     */
    ColorPicker.prototype._handleHueValueChange = function(){

        //  get the new value
        var hueValue = parseInt(this.oHueField.getValue(),10);

        //  check for correct value (0 - 360)
        if (hueValue < 0 || isNaN(hueValue)) {
            hueValue = 0;
        }
        if (hueValue > 360) {
            hueValue = 359.9;
        }

        //  set the new value (maybe the value has been changed in the above lines)
        this.oHueField.setValue(hueValue);

        //  update slider value
        this.oSlider.setValue(hueValue);

        //  process Changes
        this._processHSVchanges();

        //  fire events & update property
        this.fireLiveChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
        this.fireChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
        this.setProperty('colorString', this._getRGBString(), true); // No re-rendering!
    };



    /**
     * Event handler for changes of saturation input field
     */
    ColorPicker.prototype._handleSatValueChange =  function(){

        //  get the new value
        var satValue = parseInt(this.oSatField.getValue(),10);

        //  check for correct value (0-100)
        if (satValue < 0 || isNaN(satValue)) {
            satValue = 0;
        }
        if (satValue > 100) {
            satValue = 100;
        }

        //  set the new value (maybe the value has been changed in the above lines)
        this.oSatField.setValue(satValue);

        //  process Changes
        this._processHSVchanges();

        //  fire events & update property
        this.fireLiveChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
        this.fireChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
        this.setProperty('colorString', this._getRGBString(), true); // No re-rendering!
    };



    /**
     * Event handler for changes of value input field
     */
    ColorPicker.prototype._handleValValueChange = function(){

        //  get the new value
        var valValue = parseInt(this.oValField.getValue(),10);

        //  check for correct value (0-100)
        if (valValue < 0 || isNaN(valValue)) {
            valValue = 0;
        }
        if (valValue > 100) {
            valValue = 100;
        }

        //  set the new value (maybe the value has been changed in the above lines)
        this.oValField.setValue(valValue);

        //  process Changes
        this._processHSVchanges();

        //  fire events & update property
        this.fireLiveChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
        this.fireChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
        this.setProperty('colorString', this._getRGBString(), true); // No re-rendering!
    };



    /**
     * Event handler for changes of RED input field
     */
    ColorPicker.prototype._handleRedValueChange = function(){

        //  get the new value
        var redValue = parseInt(this.oRedField.getValue(),10);

        //  check for correct value (0-255)
        if (redValue < 0 || isNaN(redValue)) {
            redValue = 0;
        }
        if (redValue > 255) {
            redValue = 255;
        }

        //  set the new value (maybe the value has been changed in the above lines)
        this.oRedField.setValue(redValue);

        //  process changes
        this._processRGBchanges();

        //  fire events & update property
        this.fireLiveChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
        this.fireChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
        this.setProperty('colorString', this._getRGBString(), true); // No re-rendering!
    };



    /**
     * Event handler for changes of GREEN input field
     */
    ColorPicker.prototype._handleGreenValueChange = function(){

        //  get the new value
        var greenValue = parseInt(this.oGreenField.getValue(),10);

        //  check for correct value
        if (greenValue < 0 || isNaN(greenValue)) {
            greenValue = 0;
        }
        if (greenValue > 255) {
            greenValue = 255;
        }

        //  set the new value (maybe the value has been changed in the above lines)
        this.oGreenField.setValue(greenValue);

        //  process changes
        this._processRGBchanges();

        //  fire events & update property
        this.fireLiveChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
        this.fireChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
        this.setProperty('colorString', this._getRGBString(), true); // No re-rendering!
    };



    /**
     * Event handler for changes of BLUE input field
     */
    ColorPicker.prototype._handleBlueValueChange = function(){

        //  get the new value
        var blueValue = parseInt(this.oBlueField.getValue(),10);

        //  check for correct value
        if (blueValue < 0 || isNaN(blueValue)) {
            blueValue = 0;
        }
        if (blueValue > 255) {
            blueValue = 255;
        }

        //  set the new value (maybe the value has been changed in the above lines)
        this.oBlueField.setValue(blueValue);

        //  process changes
        this._processRGBchanges();

        //  fire events & update property
        this.fireLiveChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
        this.fireChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
        this.setProperty('colorString', this._getRGBString(), true); // No re-rendering!
    };



    /**
     * Process changes of Hue, Value and Saturation
     */
    ColorPicker.prototype._processHSVchanges = function(){

        //  get HSV-values
        var hueValue   = parseInt(this.oHueField.getValue(),10);
        var satValue   = parseInt(this.oSatField.getValue(),10);
        var valValue   = parseInt(this.oValField.getValue(),10);

        //  calculate and set new RGB-values
        this._calculateRGB(hueValue, satValue, valValue);
        this.Color.r = this.RGB.r;
        this.Color.g = this.RGB.g;
        this.Color.b = this.RGB.b;
        this.oRedField.setValue(this.Color.r);
        this.oGreenField.setValue(this.Color.g);
        this.oBlueField.setValue(this.Color.b);

        //  calculate and set HEX-values from the RGB-values
        this._calculateHEX(this.Color.r,this.Color.g,this.Color.b);
        this.oHexField.setValue(this.HexString);
        this.Color.hex =  "#" + this.oHexField.getValue();

        //  set HSV-values
        this.Color.h = hueValue;
        this.Color.s = satValue;
        this.Color.v = valValue;
        this.oHueField.setValue(this.Color.h);
        this.oSatField.setValue(this.Color.s);
        this.oValField.setValue(this.Color.v);

        //  update gradient box background
        this._updateGradientBoxBackground(this.Color.h);

        //  update cursor position
        this._updateCursorPosition();

        //  update selected color background
        this._updateSelColorBackground();
    };



    /**
     * Process changes of Red, Green and Blue values
     */
    ColorPicker.prototype._processRGBchanges = function(){

        //  calculate and set HEX-value from the RGB-values
        var redValue   = Math.round(parseInt(this.oRedField.getValue(),10));
        var greenValue = Math.round(parseInt(this.oGreenField.getValue(),10));
        var blueValue  = Math.round(parseInt(this.oBlueField.getValue(),10));
        this._calculateHEX(redValue, greenValue, blueValue);
        this.oHexField.setValue(this.HexString);

        //  calculate and set HSV-values from the RGB-values
        this._calculateHSV(redValue, greenValue, blueValue);
        this.oHueField.setValue(this.Color.h);
        this.oSatField.setValue(this.Color.s);
        this.oValField.setValue(this.Color.v);

        //  update slider value
        this.oSlider.setValue(parseInt(this.oHueField.getValue(),10));

        //  store the values in variable
        this.Color.r   = redValue;
        this.Color.g   = greenValue;
        this.Color.b   = blueValue;
        this.Color.hex =  "#" + this.oHexField.getValue();

        //  update gradient box background
        this._updateGradientBoxBackground(this.Color.h);

        //  update cursor position
        this._updateCursorPosition();

        //  update selected color background
        this._updateSelColorBackground();
    };



    /**
     * Event handler for changes of HEX input field
     */
    ColorPicker.prototype._handleHexValueChange = function(){

        //  get the new value and convert to uppercase
        var hexValue = this.oHexField.getValue().toUpperCase();

        //  check for correct value
        if (hexValue.substr(0, 1) === '#') {
            hexValue = hexValue.substr(1);
        }
        var re = /^([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/;
        if (re.test(hexValue) === false) {
            this.oHexField.setValueState(sap.ui.core.ValueState.Error);
            this.oSlider.setEnabled(false);
            this.oAlphaSlider.setEnabled(false);
            this.oHueField.setEnabled(false);
            this.oRedField.setEnabled(false);
            this.oGreenField.setEnabled(false);
            this.oBlueField.setEnabled(false);
            this.oSatField.setEnabled(false);
            this.oValField.setEnabled(false);
            return false;
        } else if (this.oHexField.getValueState() == sap.ui.core.ValueState.Error) {
            this.oHexField.setValueState(sap.ui.core.ValueState.None);
            this.oSlider.setEnabled(true);
            this.oAlphaSlider.setEnabled(true);
            this.oHueField.setEnabled(true);
            this.oRedField.setEnabled(true);
            this.oGreenField.setEnabled(true);
            this.oBlueField.setEnabled(true);
            this.oSatField.setEnabled(true);
            this.oValField.setEnabled(true);
        }

        //  convert from short to long hex (if needed)
        if (hexValue.length === 3) {
            var tempValue = hexValue.charAt(0) + hexValue.charAt(0) + hexValue.charAt(1) + hexValue.charAt(1) + hexValue.charAt(2) + hexValue.charAt(2);
            hexValue = tempValue;
        }

        //  process Changes
        this._processHexChanges(hexValue);

        //  update UI
        this.oHexField.setValue(hexValue);
        this.oRedField.setValue(this.Color.r);
        this.oGreenField.setValue(this.Color.g);
        this.oBlueField.setValue(this.Color.b);
        this.oHueField.setValue(this.Color.h);
        this.oSatField.setValue(this.Color.s);
        this.oValField.setValue(this.Color.v);
        this.oSlider.setValue(parseInt(this.oHueField.getValue(),10));
        this.oAlphaSlider.setValue(1);

        //  update gradient box background
        this._updateGradientBoxBackground(this.Color.h);

        //  update cursor position
        this._updateCursorPosition();

        //  update selected color background
        this._updateSelColorBackground();

        //  fire events & update property
        this.fireLiveChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
        this.fireChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
        this.setProperty('colorString', this._getRGBString(), true); // No re-rendering!
    };



    /**
     * Hex-Values have changed ==> process changes
     */
    ColorPicker.prototype._processHexChanges = function (ihexValue){

        //  convert RGB-values
        this._convertRGB(ihexValue);

        //  calculate and set HSV-values from the RGB-values
        this._calculateHSV(this.Color.r, this.Color.g, this.Color.b);

        //  all values except hex set; set the hex value
        this.Color.hex = "#" + ihexValue.toUpperCase();
    };



    /**
     * Update Cursor position in the ColorPicker Box
     */
    ColorPicker.prototype._updateCursorPosition = function(){

        //  get the width & height
        var cpCurWidth  = this.$cpCur.width();
        var cpCurHeight = this.$cpCur.height();
        var cpBoxWidth  = this.$cpBox.width();
        var cpBoxHeight = this.$cpBox.height();

        //  get the saturation and value
        var satValue = this.oSatField.getValue();
        var valValue = this.oValField.getValue();

        //  calculate the x and y values
        var x = parseInt(valValue * cpBoxWidth / 100,10);
        //  calculate x if we are in RTL mode
        if (this.bRtl) {
            var rX = cpBoxWidth - x;
            x = rX;
        }
        var y = parseInt((1 - satValue / 100) * cpBoxHeight,10);
        x = Math.min(Math.max(x, 0), cpBoxWidth - cpCurWidth / 2) - cpCurWidth / 2;
        y = Math.min(Math.max(y, 0), cpBoxHeight - cpCurHeight / 2) - cpCurHeight / 2;

        //  set the new cursor position
        this.$cpCur.css("left", x).css("top", y);
    };



    /**
     * Calculate RGB-Values from Hue/Saturation/Value
     */
    ColorPicker.prototype._calculateRGB = function( hue, sat, val){

        //hue value is cyclic, so 360 = 0
        if (hue == 360) {
            hue = 0;
        }
        hue /= 60;
        sat /= 100;
        val /= 100;


        //Formula taken from http://www.rapidtables.com/convert/color/hsv-to-rgb.htm
        var c = val * sat;
        var x = c * (1 - Math.abs(hue % 2 - 1));
        var m = val - c;

        // calculate values
        var redValue = 0, greenValue = 0, blueValue = 0;
        var i = Math.floor(hue);

        switch (i) {
            case 0:
                redValue   = c;
                greenValue = x;
                break;
            case 1:
                redValue   = x;
                greenValue = c;
                break;
            case 2:
                greenValue = c;
                blueValue  = x;
                break;
            case 3:
                greenValue = x;
                blueValue  = c;
                break;
            case 4:
                redValue   = x;
                blueValue  = c;
                break;
            case 5:
                redValue   = c;
                blueValue  = x;
                break;
            default:
                break;
        }

        this.RGB.r = Math.floor((redValue + m) * 255);
        this.RGB.g = Math.floor((greenValue + m) * 255);
        this.RGB.b = Math.floor((blueValue + m) * 255);
    };



    /**
     * Get RGB-String from the current RGB-Values
     */
    ColorPicker.prototype._getRGBString = function( ){
        if (this.Color.a < 1) {
            return "rgba(" + this.Color.r + "," + this.Color.g + "," + this.Color.b + ", " + this.Color.a + ")";
        } else {
            return "rgb(" + this.Color.r + "," + this.Color.g + "," + this.Color.b + ")";
        }
    };



    /**
     * Calculate HEX-Values when RGB-values change
     */
    ColorPicker.prototype._calculateHEX = function(red,green,blue){

        //  convert values
        var redStr     = red.toString(16);
        var greenStr   = green.toString(16);
        var blueStr    = blue.toString(16);
        if (redStr.length == 1)   {
            redStr   = '0' + redStr;
        }
        if (greenStr.length == 1) {
            greenStr = '0' + greenStr;
        }
        if (blueStr.length == 1)  {
            blueStr  = '0' + blueStr;
        }

        //  return the HexValue
        this.HexString = (redStr + greenStr + blueStr).toUpperCase();
    };



    /**
     * Calculate HSV-Values from RGB-values
     */
    ColorPicker.prototype._calculateHSV = function (red, green, blue){

        //  calculate values
        var max         = Math.max(Math.max(red, green), blue);
        var min         = Math.min(Math.min(red, green), blue);
        var delta       = (max - min);
        var valValue    = Math.round(max * 100 / 255);
        var satValue = (max === 0.0) ? 0 : (100 * delta / max);
        var hueValue = 0;
        if (satValue === 0) {
            hueValue = 0;
        } else if (red === max)   {
            hueValue = 60.0 * (green - blue) / delta;
        } else if (green === max) {
            hueValue = 120.0 + 60.0 * (blue - red) / delta;
        } else if (blue === max)  {
            hueValue = 240.0 + 60.0 * (red - green) / delta;
        }
        if (hueValue < 0.0) {
            hueValue += 359.9;
        }
        hueValue = Math.round(hueValue);
        satValue = Math.round(satValue);

        //  store the new values
        this.Color.h = hueValue;
        this.Color.s = satValue;
        this.Color.v = valValue;
    };



    /**
     * Convert HEX-Value to RGB-Values
     */
    ColorPicker.prototype._convertRGB = function(hex){

        //  calculate the new values
        var red   = parseInt(hex.substr(0, 2), 16);
        var green = parseInt(hex.substr(2, 2), 16);
        var blue  = parseInt(hex.substr(4, 2), 16);

        //  return the new values
        this.Color.r = red;
        this.Color.g = green;
        this.Color.b = blue;
    };



    /**
     * Update GradientBox Background
     */
    ColorPicker.prototype._updateGradientBoxBackground = function(hue){

        //  calculate RGB-values
        this._calculateRGB(hue, 100, 100);

        //  calculate Hex-value
        this._calculateHEX(this.RGB.r,this.RGB.g,this.RGB.b);

        //  set backgroundColor
        this.$cpBox.css('background-color','rgb(' + this.RGB.r + ', '  + this.RGB.g + ', ' + this.RGB.b + ')');
    };



    /**
     * Update background of "new color box"
     */
    ColorPicker.prototype._updateSelColorBackground = function(){

        //  set the new color
        this.$("ncBox").css('background-color',this._getRGBString());

    };



    /**
     * Parse Input Parameter; evaluate color
     */
    ColorPicker.prototype._parseColorString = function(iColorString) {
        //  delete #, trim and convert to lower case
        if(!iColorString) {
            return;
        }
        if (iColorString.substr(0, 1) === '#') {
            iColorString = iColorString.substr(1);
        }
        iColorString = iColorString.replace(/ /g,'');
        iColorString = iColorString.toLowerCase();

        //  parse Names
        var searchKey;
        var hexValue;
        var colorNames = {
            aliceblue:              'f0f8ff',
            antiquewhite:           'faebd7',
            aqua:                   '00ffff',
            aquamarine:             '7fffd4',
            azure:                  'f0ffff',
            beige:                  'f5f5dc',
            bisque:                 'ffe4c4',
            black:                  '000000',
            blanchedalmond:         'ffebcd',
            blue:                   '0000ff',
            blueviolet:             '8a2be2',
            brown:                  'a52a2a',
            burlywood:              'deb887',
            cadetblue:              '5f9ea0',
            chartreuse:             '7fff00',
            chocolate:              'd2691e',
            coral:                  'ff7f50',
            cornflowerblue:         '6495ed',
            cornsilk:               'fff8dc',
            crimson:                'dc143c',
            cyan:                   '00ffff',
            darkblue:               '00008b',
            darkcyan:               '008b8b',
            darkgoldenrod:          'b8860b',
            darkgray:               'a9a9a9',
            darkgreen:              '006400',
            darkkhaki:              'bdb76b',
            darkmagenta:            '8b008b',
            darkolivegreen:         '556b2f',
            darkorange:             'ff8c00',
            darkorchid:             '9932cc',
            darkred:                '8b0000',
            darksalmon:             'e9967a',
            darkseagreen:           '8fbc8f',
            darkslateblue:          '483d8b',
            darkslategray:          '2f4f4f',
            darkturquoise:          '00ced1',
            darkviolet:             '9400d3',
            deeppink:               'ff1493',
            deepskyblue:            '00bfff',
            dimgray:                '696969',
            dodgerblue:             '1e90ff',
            feldspar:               'd19275',
            firebrick:              'b22222',
            floralwhite:            'fffaf0',
            forestgreen:            '228b22',
            fuchsia:                'ff00ff',
            gainsboro:              'dcdcdc',
            ghostwhite:             'f8f8ff',
            gold:                   'ffd700',
            goldenrod:              'daa520',
            gray:                   '808080',
            green:                  '008000',
            greenyellow:            'adff2f',
            honeydew:               'f0fff0',
            hotpink:                'ff69b4',
            indianred :             'cd5c5c',
            indigo :                '4b0082',
            ivory:                  'fffff0',
            khaki:                  'f0e68c',
            lavender:               'e6e6fa',
            lavenderblush:          'fff0f5',
            lawngreen:              '7cfc00',
            lemonchiffon:           'fffacd',
            lightblue:              'add8e6',
            lightcoral:             'f08080',
            lightcyan:              'e0ffff',
            lightgoldenrodyellow:   'fafad2',
            lightgrey:              'd3d3d3',
            lightgreen:             '90ee90',
            lightpink:              'ffb6c1',
            lightsalmon:            'ffa07a',
            lightseagreen:          '20b2aa',
            lightskyblue:           '87cefa',
            lightslateblue:         '8470ff',
            lightslategray:         '778899',
            lightsteelblue:         'b0c4de',
            lightyellow:            'ffffe0',
            lime:                   '00ff00',
            limegreen:              '32cd32',
            linen:                  'faf0e6',
            magenta:                'ff00ff',
            maroon:                 '800000',
            mediumaquamarine:       '66cdaa',
            mediumblue:             '0000cd',
            mediumorchid:           'ba55d3',
            mediumpurple:           '9370d8',
            mediumseagreen:         '3cb371',
            mediumslateblue:        '7b68ee',
            mediumspringgreen:      '00fa9a',
            mediumturquoise:        '48d1cc',
            mediumvioletred:        'c71585',
            midnightblue:           '191970',
            mintcream:              'f5fffa',
            mistyrose:              'ffe4e1',
            moccasin:               'ffe4b5',
            navajowhite:            'ffdead',
            navy:                   '000080',
            oldlace:                'fdf5e6',
            olive:                  '808000',
            olivedrab:              '6b8e23',
            orange:                 'ffa500',
            orangered:              'ff4500',
            orchid:                 'da70d6',
            palegoldenrod:          'eee8aa',
            palegreen:              '98fb98',
            paleturquoise:          'afeeee',
            palevioletred:          'd87093',
            papayawhip:             'ffefd5',
            peachpuff:              'ffdab9',
            peru:                   'cd853f',
            pink:                   'ffc0cb',
            plum:                   'dda0dd',
            powderblue:             'b0e0e6',
            purple:                 '800080',
            red:                    'ff0000',
            rosybrown:              'bc8f8f',
            royalblue:              '4169e1',
            saddlebrown:            '8b4513',
            salmon:                 'fa8072',
            sandybrown:             'f4a460',
            seagreen:               '2e8b57',
            seashell:               'fff5ee',
            sienna:                 'a0522d',
            silver:                 'c0c0c0',
            skyblue:                '87ceeb',
            slateblue:              '6a5acd',
            slategray:              '708090',
            snow:                   'fffafa',
            springgreen:            '00ff7f',
            steelblue:              '4682b4',
            tan:                    'd2b48c',
            teal:                   '008080',
            thistle:                'd8bfd8',
            tomato:                 'ff6347',
            turquoise:              '40e0d0',
            violet:                 'ee82ee',
            violetred:              'd02090',
            wheat:                  'f5deb3',
            white:                  'ffffff',
            whitesmoke:             'f5f5f5',
            yellow:                 'ffff00',
            yellowgreen:            '9acd32'
        };

        var re, RGBColor;

        for (searchKey in colorNames) {
            if (iColorString === searchKey) {
                hexValue = colorNames[searchKey].toUpperCase();
            }
        }

        if (hexValue) {
            //Found a name; get RGB and HSV values
            this._processHexChanges(hexValue);
            this.Color.old = this.Color.hex;
        }


        //  parse HEX
        //  allowed input: #aabbcc, aabbcc, #abc, abc
        //  '#' has already been deleted, search only for values
        //  check for correct value using regular expression
        re = /^([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/;
        if (re.test(iColorString) === true) {
            //it's a hex value; check if its aabbcc or abc
            if (iColorString.length === 3) {
                hexValue = iColorString.charAt(0) + iColorString.charAt(0) + iColorString.charAt(1) + iColorString.charAt(1) + iColorString.charAt(2) + iColorString.charAt(2);
            } else {
                hexValue = iColorString;
            }
            //get RGB and HSV values
            this._processHexChanges(hexValue);
            this.Color.old = this.Color.hex;
        }


        //  parse RGBA
        //  allowed input: rgba(255,255,255,0.3); rgba255,255,255,0.3
        //  check if the string begins with "rgba"
        if (iColorString.substr(0, 4) === 'rgba') {
            // remove rgba, "(", ")" and blanks
            iColorString = iColorString.substr(4);
            iColorString = iColorString.replace("(",'');
            iColorString = iColorString.replace(")",'');
            iColorString = iColorString.split(' ').join('');
            re = /^(((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5])),){2}(((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5])),){1}(([0]\.[0-9]*)|(\.[0-9]{2})|[1]){1}$/;
            if (re.test(iColorString) === true) {
                //it's a rgba string, get the values and convert to Hex
                RGBColor = iColorString.split(",");
                var sAlpha = iColorString.substr(iColorString.lastIndexOf(",") + 1, (iColorString.length - iColorString.lastIndexOf(",")));
                this._calculateHEX(parseInt(RGBColor[0],10), parseInt(RGBColor[1],10), parseInt(RGBColor[2],10));
                //get HSV values
                this._processHexChanges(this.HexString);
                this.Color.old = this.Color.hex;
                this.Color.a = this.Color.a_old = parseFloat(sAlpha);
            }
        }


        //  parse RGB
        //  allowed input: rgb(255,255,255); rgb255,255,255
        //  check if the string begins with "rgb"
        if (iColorString.substr(0, 3) === 'rgb') {
            // remove rgb, "(", ")" and blanks
            iColorString = iColorString.substr(3);
            iColorString = iColorString.replace("(",'');
            iColorString = iColorString.replace(")",'');
            iColorString = iColorString.split(' ').join('');
            re = /^(((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5])),){2}(((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))){1}$/;
            if (re.test(iColorString) === true) {
                //it's a rgb string, get the values and convert to Hex
                RGBColor = iColorString.split(",");
                this._calculateHEX(parseInt(RGBColor[0],10), parseInt(RGBColor[1],10), parseInt(RGBColor[2],10));
                //get HSV values
                this._processHexChanges(this.HexString);
                this.Color.old = this.Color.hex;
            }
        }


        //  parse HSV
        //  allowed input: hsv(360,100,100); hsv360,100,100; [hsv(360,0.5,0.5); hsv360,0.5,0.5 later]
        //  check if the string begins with "rgb"
        if (iColorString.substr(0, 3) === 'hsv') {
            // remove hsv, "(", ")" and blanks
            iColorString = iColorString.substr(3);
            iColorString = iColorString.replace("(",'');
            iColorString = iColorString.replace(")",'');
            iColorString = iColorString.split(' ').join('');
            re = /^(((\d{1,2})|([1,2]\d{2})|(3[0-5]\d)|(360)),){1}(((\d{1,2})|(100)),){1}((\d{1,2})|(100)){1}$/;
            if (re.test(iColorString) === true) {
                //it's a hsv string, get the values
                var HSVColor = iColorString.split(",");
                //get RGB values
                this._calculateRGB(parseInt(HSVColor[0],10), parseInt(HSVColor[1],10), parseInt(HSVColor[2],10));
                //get Hex values
                this._calculateHEX(this.RGB.r, this.RGB.g, this.RGB.b);
                //store the values
                this.Color.r   = this.RGB.r;
                this.Color.g   = this.RGB.g;
                this.Color.b   = this.RGB.b;
                this.Color.h   = parseInt(HSVColor[0],10);
                this.Color.s   = parseInt(HSVColor[1],10);
                this.Color.v   = parseInt(HSVColor[2],10);
                this.Color.hex = "#" + this.HexString;
                this.Color.old = this.Color.hex;
            }
        } else {
            return false;
        }
    };



    /**
     * Event after rendering the page
     */
    ColorPicker.prototype.onAfterRendering = function (){

        // get the jQuery-Object for cpBox and cpCur
        this.$cpBox = this.$("cpBox");
        this.$cpCur = this.$("cpCur");

        //  add Mousehandler for ColorPickerBox
        this.$cpBox.bind("mousedown", jQuery.proxy(this.handleMouseDown, this));
        this.$cpBox.bind("touchstart", jQuery.proxy(this.handleTouchStart, this));

        //  set the background color of the Color Boxes
        this.$("ncBox").css('background-color',this._getRGBString());
        this.$("ocBox").css('background-color',this._getRGBString());

        //  update the background color of the 'new color box'
        this._updateGradientBoxBackground(this.Color.h);

        //  update cursor position
        this._updateCursorPosition();
    };



    /**
     * Event before rendering the page
     */
    ColorPicker.prototype.onBeforeRendering = function (){

        //  unbind Mousehandler for ColorPickerBox
        this.$("cpBox").unbind("mousedown", this.handleMouseDown);
        this.$("cpBox").unbind("touchstart", this.handleTouchStart);

    };


    /**
     * Deliver current RGB-values.
     *
     * @name sap.ui.commons.ColorPicker#getRGB
     * @function
     * @type object
     * @public
     * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
     */
    ColorPicker.prototype.getRGB = function (){

        return {r:this.Color.r, g:this.Color.g, b:this.Color.b};

    };

    return ColorPicker;
});
}; // end of sap/ino/controls/ColorPicker.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.ColorPickerLite') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.ColorPickerLite'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToggleButton'); // unlisted dependency retained
jQuery.sap.require('sap.m.Input'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/ColorPickerLite",[
    "sap/ui/core/Control",
    "sap/m/ToggleButton",
    "sap/m/Input"
], function(Control,ToggleButton, Input) {
    "use strict";

    /**
     * Constructor for a new lightweight colorPicker.
     *
     * <ul>
     * <li>Properties
     * <ul>
     * <li>color: This is the import-parameter of the ColorPicker.
     * As input-parameter, it can be a Hexadecimal string (#FFFFFF), or just a String without the "#" (FFFFFF)
     * As output-parameter it is a Hexadecimal string (FFFFFF) without "#".
     * </li>
     * <li>valueStateText: This text is displayed below the input field if the input is invalid. Default is null
     * </li>
     * <li>showValueStateMessage: Boolean property that states whether a valueStateText is displayed or not. Default is true </li>
     * <li>defaultColors: Here the colors for the buttons are put in. The amount of buttons is equal to the amount of put in color strings.
     * As input-parameter, it takes a Array of Strings. defaultColors="#ffffff,f0ab00, f27020, e52929, ab218e, 009de0, 007cc0, 004990, 73bf93,008a3b,#bfbfbf, #777777"
     * </li>
     * <li>preview: Boolean property that states whether a preview of the current color is displayed beside the input field or not. Default is true </li>
     * <li>showHex: Boolean proerty that states if the hex input field should be shown (overrules the preview property)</li>
     * </ul>
     * <li>Events
     * <ul>
     * <li>change: Color has been changed. Value was changed. This event is fired if the value has changed.</li>
     * </ul>
     * </li>
     * </ul>
     */
     
    var ColorPicker = Control.extend("sap.ino.controls.ColorPickerLite", {
            metadata: {
                properties: {
                    color: {
                        type: "string",
                        defaultValue: "FFFFFF"
                    },
                    valueStateText: {
                        type: "string",
                        defaultValue: null
                    },
                    showValueStateMessage  : {
                        type: "boolean",
                        defaultValue: true
                    },
                    defaultColors : {
                        type: "string[]",
                        defaultValue: ["#ffffff", "f0ab00", "f27020", "e52929", "ab218e", "009de0", "007cc0", "004990", "73bf93", "008a3b", "#bfbfbf", "#777777"]
                    },
                    preview : {
                        type: "boolean",
                        defaultValue: true
                    },
                    showHex : {
                        type: "boolean",
                        defaultValue: true
                    }
                },
                aggregations: {
                    "_colorButtons" : {
                        type : "sap.m.ToggleButton",
			            multiple: true,
			            visibility: "hidden"
                    },
                    "_input" : {
                       type : "sap.m.Input",
			           multiple: false,
			           visibility: "hidden" 
                    }
                },
                events: {
                    change: {}
                }
            },
            
            _getButtons : function() {
                var aButtons = this.getAggregation("_colorButtons");

                if(!aButtons || aButtons.length === 0) {
                    var that = this;
                    aButtons = [];
                    for(var i = 0; i < this.getDefaultColors().length; i++) {
                        var oButton = new ToggleButton({
                            customData: {
                                Type:"sap.ui.core.CustomData",
                                key:"button-color",
                                value: that._cleanColor(this.getDefaultColors()[i].trim())
                            },
                            press : function(oEvent) {
                                that._onPress(oEvent.getSource().data("button-color"));
                            }
                        });
                        oButton.addStyleClass("sapInoColorPickerColorButton");
                        this.addAggregation("_colorButtons", oButton);
                    }
                    aButtons = this.getAggregation("_colorButtons");
                }
		        return aButtons;
            },
            
            _getInput : function () {
                var oInput = this.getAggregation("_input");
                if(!oInput) {
                    var that = this;
                    oInput = new Input({
                        valueStateText : this.getValueStateText(),
                        maxLength : 7,
                        showValueStateMessage : this.getShowValueStateMessage(),
                        liveChange : function (oEvent) {
                            that._setCurrentColor(oEvent.getParameter("newValue"), false, false);
                        },
                        change : function (oEvent) {
                            var sValue = oEvent.getParameter("newValue");
                            that._setCurrentColor(sValue, false, true);
                            sValue = that._cleanColor(sValue);
                            that.fireChange({
                                value : sValue,
                                hashValue : "#" + sValue
                            });
                        }
                    });
                    this.setAggregation("_input", oInput, true);
                }
                return oInput;
            },
            
            _setCurrentColor : function (sValue, bUpdateInput, bSetProperty ) {
                if(this._validateLiveInput(sValue)) {
                    if (/(^[0-9A-F]{6}$)|(^[0-9A-F]{3}$)/i.test(sValue)) {
                        this._setColor(sValue, bUpdateInput, bSetProperty);
                    } else if (/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(sValue)){
                        this._setColor(sValue.substr(1), bUpdateInput, bSetProperty);
                    } else if(bSetProperty){
                        this._getInput.setValueState("Error");    
                    }
                }
            },
            
            _setColor : function(sValue, bUpdateInput, bSetProperty  ) {
                jQuery(".sapInoColorPickerLitePreview").css("background", "#" + sValue);
                if(bUpdateInput) {
                    this._getInput().setValue("#" + sValue);    
                }
                if(bSetProperty) {
                   this.setProperty("color", sValue, true); 
                }
            },
        
            _validateLiveInput : function (sValue) {
                if (/(^[0-9A-F]{0,6}$)/i.test(sValue)) {
                   this._getInput().setValueState("None");
                   return true;
                }
                if (/(^#[0-9A-F]{0,7}$)/i.test(sValue)){
                   this._getInput().setValueState("None");
                   return true;
                } 
                this._getInput().setValueState("Error");
                return false;
            },
            
            _onPress : function(sColor) {
                var aButtons = this.getAggregation("_colorButtons");
                aButtons.forEach(function(oButton) {
                    oButton.setPressed(oButton.data("button-color") === sColor);
                });
                this._setCurrentColor(sColor, true, true);
                sColor = this._cleanColor(sColor);
                this.fireChange({
                    value : sColor,
                    hashValue : "#" + sColor
                });
            },
            
            _cleanColor : function (sColor) {
                if (sColor && sColor.substr(0, 1) === '#') {
                    sColor = sColor.substr(1);
                }
                return sColor.toUpperCase();
            },
            
            renderer: function (oRm, oControl) {
                // write the HTML into the render manager
                oRm.write("<div");   // Outer DIV
                oRm.writeControlData(oControl);
                oRm.addClass("sapInoColorPickerLite");
                oRm.writeClasses("");
                oRm.write(">"); // <DIV> element
                
                oRm.write("<div");   // Button Div
                oRm.addClass("sapInoColorPickerLiteButtonContainer");
                oRm.writeClasses("");
                oRm.write(">");
                oControl._getButtons().forEach(function (oButton) {
                   oRm.renderControl(oButton); 
                });
                oRm.write("</div>");  // Button Div
                
                if (oControl.getShowHex()) {
                    oRm.write("<div");   //Preview Input div
                    oRm.addClass("sapInoColorPickerLitePreviewInput");
                    oRm.writeClasses("");
                    oRm.write(">");
                    
                    if(oControl.getPreview()) {
                        oRm.write("<div"); //Preview
                        oRm.addClass("sapInoColorPickerLitePreview");
                        oRm.writeClasses("");
                        oRm.write(">");
                        oRm.write("</div>"); //Preview    
                    }
    
                    oRm.renderControl(oControl._getInput());
                    
                    oRm.write("</div>");  //Preview Input div
                }
                
                oRm.write("</div>");  // outer DIV
            }
        }
    );
    
    ColorPicker.prototype.onAfterRendering = function() {
        //Set the Color for input and preview
        var color = this._cleanColor(this.getColor());
        this._setCurrentColor(color, true, true);
        
        //Set the colors for the togglebuttons
        var aButtons = this.getAggregation("_colorButtons");
        for(var i = 0; i < aButtons.length; i++) {
            jQuery(aButtons[i].getDomRef().children[0]).css("background", "#" + aButtons[i].data("button-color"));
            jQuery(aButtons[i].getDomRef().children[0]).attr("aria-label", "#" + aButtons[i].data("button-color"));
            jQuery(aButtons[i].getDomRef().children[0]).attr("title", "#" + aButtons[i].data("button-color"));
            
            // set the button selected for the current value
            aButtons[i].setPressed(aButtons[i].data("button-color") === color);
        }
        
    };

    return ColorPicker;
});
}; // end of sap/ino/controls/ColorPickerLite.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.ColorRibbon') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.ColorRibbon'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.HorizontalLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Icon'); // unlisted dependency retained
jQuery.sap.require('sap.base.security.sanitizeHTML'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/ColorRibbon",[
    "sap/ui/core/Control",
    "sap/ui/layout/HorizontalLayout",
    "sap/ui/core/Icon",
	"sap/base/security/sanitizeHTML"
], function(Control, HorizontalLayout, Icon, sanitizeHTML) {
    "use strict";

    /**
     * 
     * An Color Ribbon
     * 
     * <ul>
     * <li>Properties
     * <ul>
     * <li>color: HEX Value (without #)</li>
     * </ul>
     * </li>
     * <li>Aggregations
     * <ul>
     * </ul>
     * </li>
     * <li>Events
     * <ul>
     * </ul>
     * </li>
     * </ul>
     */

    var ColorRibbon = Control.extend("sap.ino.controls.ColorRibbon", {
        metadata : {
            properties : {
                color : {
                    type : "string"
                }
            }
        },

        renderer : function(oRm, oControl) {
            oRm.write("<div");
            oRm.writeControlData(oControl);
            oRm.writeClasses();
            
            var sColor = sanitizeHTML(oControl.getColor());
            if (sColor && sColor.length === 6) {
                sColor = "#" + sColor;
            } else {
                sColor = "#FFFFFF";
            }
            
            oRm.addStyle("background-color", sColor);
            oRm.writeStyles();
            oRm.write("></div>");
        }
    });

    return ColorRibbon;
});
}; // end of sap/ino/controls/ColorRibbon.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.EvalRequestFeedListItem') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.EvalRequestFeedListItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.FeedListItem'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/EvalRequestFeedListItem",[
	"sap/m/FeedListItem"
], function(FeedListItem) {
	"use strict";
	var EvalRequestFeedListItem = FeedListItem.extend("sap.ino.controls.EvalRequestFeedListItem", {
		metadata: {
			properties: {
				"prefixSender": {
					type: "string",
					group: 'Data',
					defaultValue: null
				},
				"prefixToSender": {
					type: "string",
					group: 'Data',
					defaultValue: null
				},
				"toSender": {
					type: "string",
					group: 'Data',
					defaultValue: null
				}
			},
			events: {
				toSenderPress: {
					parameters: {
						domRef: {
							type: 'string'
						},
						getDomRef: {
							type: 'function'
						}
					}
				}
			}
		}
	});

	EvalRequestFeedListItem.prototype._getLinkToSender = function() {
		if (!this._oLinkToControl) {
			jQuery.sap.require('sap.m.Link');
			var that = this;
			this._oLinkToControl = new sap.m.Link({
				press: function() {
					that.fireToSenderPress({
						domRef: this.getDomRef(),
						getDomRef: this.getDomRef.bind(this)
					});
				}
			});
			this._oLinkToControl.setParent(this, null, true);
		}
		this._oLinkToControl.setProperty('text', this.getToSender(), true);
		this._oLinkToControl.setProperty('enabled', this.getSenderActive(), true);
		return this._oLinkToControl;
	};

	return EvalRequestFeedListItem;
});
}; // end of sap/ino/controls/EvalRequestFeedListItem.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.EvalRequestFeedListItemRenderer') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.EvalRequestFeedListItemRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.FeedListItemRenderer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/EvalRequestFeedListItemRenderer",["sap/m/FeedListItemRenderer"
, 'sap/ui/core/Renderer'], function(FeedListItemRenderer, Renderer) {
	'use strict';
	var EvalRequestFeedListItemRenderer = Renderer.extend(FeedListItemRenderer);

	EvalRequestFeedListItemRenderer._writeToPrefixSender = function(rm, oFeedListItem, sMyId) {
		rm.write('<span class="sapMFeedListItemTextPrefixName" id="' + sMyId + '-prefixtosender">');
		rm.writeEscaped(oFeedListItem.getPrefixToSender());
		rm.write('</span>');
		rm.write(' ');
	};

	EvalRequestFeedListItemRenderer._writePrefixSender = function(rm, oFeedListItem, sMyId) {
		rm.write('<span class="sapMFeedListItemTextPrefixName" id="' + sMyId + '-prefixsender">');
		rm.writeEscaped(oFeedListItem.getPrefixSender());
		rm.write('</span>');
		rm.write(' ');
	};

	EvalRequestFeedListItemRenderer._writeSender = function(rm, oFeedListItem, sMyId) {
		rm.write('<p id="' + sMyId + '-fullsender" class="sapMFeedListItemTextText"');
		rm.writeAttribute("aria-hidden", true);
		rm.write('>');
		if (oFeedListItem.getPrefixToSender()) {
			this._writeToPrefixSender(rm, oFeedListItem, sMyId);
		}
		if (oFeedListItem.getToSender()) {
			rm.write('<span id="' + sMyId + '-toname" class="sapMFeedListItemTextName">');
			rm.renderControl(oFeedListItem._getLinkToSender());
			rm.write(' ');
			rm.write('</span>');
		}
		if (oFeedListItem.getPrefixSender()) {
			this._writePrefixSender(rm, oFeedListItem, sMyId);
		}
		if (oFeedListItem.getSender()) {
			rm.write('<span id="' + sMyId + '-name" class="sapMFeedListItemTextName">');
			rm.renderControl(oFeedListItem._getLinkSender(false));
			rm.write(' ');
			rm.write('</span>');
		}
		rm.write('</p>');
	};

	EvalRequestFeedListItemRenderer._writeMainText = function(rm, oFeedListItem, sMyId) {
		rm.write('<p id="' + sMyId + '-text" class="sapMFeedListItemTextText"');
		rm.writeAttribute("aria-hidden", true);
		rm.write('>');
		rm.write('<span id="' + sMyId + '-realtext" class="sapMFeedListItemTextString">');
		if (oFeedListItem._checkTextIsExpandable()) {
			this._writeCollapsedText(rm, oFeedListItem, sMyId);
		} else {
			rm.writeEscaped(oFeedListItem.getText(), true);
			rm.write('</span>');
		}
		rm.write('</p>');
	};
	EvalRequestFeedListItemRenderer._writeDate = function(rm, oFeedListItem, sMyId) {
		if (oFeedListItem.getInfo() || !!oFeedListItem.getTimestamp()) {
			// info and date
			rm.write('<p class="sapMFeedListItemFooter sapUiSmallMarginBottom">');
			if (!sap.ui.getCore().getConfiguration().getRTL()) {
				if (oFeedListItem.getInfo()) {
					this._writeInfo(rm, oFeedListItem, sMyId);
					// Write Interpunct separator if necessary (with spaces before and after)
					if (oFeedListItem.getTimestamp()) {
						rm.write("<span>&#160&#160&#x00B7&#160&#160</span>");
					}
				}
				if (oFeedListItem.getTimestamp()) {
					this._writeTimestamp(rm, oFeedListItem, sMyId);
				}
			} else {
				if (oFeedListItem.getTimestamp()) {
					this._writeTimestamp(rm, oFeedListItem, sMyId);
				}
				if (oFeedListItem.getInfo()) {
					// Write Interpunct separator if necessary (with spaces before and after)
					if (oFeedListItem.getTimestamp()) {
						rm.write("<span>&#160&#160&#x00B7&#160&#160</span>");
					}
					this._writeInfo(rm, oFeedListItem, sMyId);
				}
			}
			rm.write('</p>');
		}
	};

	EvalRequestFeedListItemRenderer._RenderPhone = function(rm, oFeedListItem, sMyId) {
		rm.write('<div class= "sapMFeedListItemHeader ');
		if (oFeedListItem.getShowIcon()) {
			rm.write('sapMFeedListItemHasFigure ');
		}
		if (!!oFeedListItem.getSender() && !!oFeedListItem.getTimestamp()) {
			rm.write('sapMFeedListItemFullHeight');
		}
		rm.write('" >');
		rm.write('<p id="' + sMyId + '-fullsender" class="sapMFeedListItemTextText"');
		if (oFeedListItem.getPrefixToSender()) {
			this._writeToPrefixSender(rm, oFeedListItem, sMyId);
		}
		if (oFeedListItem.getToSender()) {
			rm.write('<span id="' + sMyId + '-toname" class="sapMFeedListItemTextName">');
			rm.renderControl(oFeedListItem._getLinkToSender());
			rm.write(' ');
			rm.write('</span>');
		}
		if (oFeedListItem.getPrefixSender()) {
			this._writePrefixSender(rm, oFeedListItem, sMyId);
		}
		if (oFeedListItem.getSender()) {
			rm.write('<span id="' + sMyId + '-name" class="sapMFeedListItemTextName">');
			rm.renderControl(oFeedListItem._getLinkSender(false));
			rm.write('</span>');
		}
		rm.write('</p>');
		if (oFeedListItem.getTimestamp()) {
			// write date
			rm.write('<p class="sapMFeedListItemTimestamp">');
			rm.writeEscaped(oFeedListItem.getTimestamp());
			rm.write('</p>');
		}

		rm.write('</div>');
		rm.write('<p class="sapMFeedListItemText">');
		rm.write('<span id="' + sMyId + '-realtext" class="sapMFeedListItemText">');
		if (oFeedListItem._checkTextIsExpandable()) {
			this._writeCollapsedText(rm, oFeedListItem, sMyId);
		} else {
			rm.writeEscaped(oFeedListItem.getText(), true);
			rm.write('</span>');
		}
		rm.write('</p>');
		if (oFeedListItem.getInfo()) {
			// info
			rm.write('<p class="sapMFeedListItemFooter">');
			if (oFeedListItem.getInfo()) {
				rm.write('<span id="' + sMyId + '-info" class="sapMFeedListItemInfo">');
				rm.writeEscaped(oFeedListItem.getInfo());
				rm.write('</span>');
			}
			rm.write('</p>');
		}
	};

	EvalRequestFeedListItemRenderer._RenderDesktop = function(rm, oFeedListItem, sMyId) {
		rm.write('<div class= "sapMFeedListItemText ');
		if (oFeedListItem.getShowIcon()) {
			rm.write('sapMFeedListItemHasFigure');
		}
		rm.write('" >');
		this._writeSender(rm, oFeedListItem, sMyId);
		this._writeDate(rm, oFeedListItem, sMyId);
		this._writeMainText(rm, oFeedListItem, sMyId);
		rm.write('</div>');
	};

	EvalRequestFeedListItemRenderer.renderLIContent = function(rm, oFeedListItem) {
		var sMyId = oFeedListItem.getId(),
			bIsPhone = sap.ui.Device.system.phone;
		rm.write('<div');
		rm.addClass('sapMFeedListItem');
		rm.writeClasses();
		rm.write('>');
		if (oFeedListItem.getShowIcon()) {
			this._writeImageControl(rm, oFeedListItem, sMyId);
		}
		if (bIsPhone) {
			this._RenderPhone(rm, oFeedListItem, sMyId);
		} else {
			this._RenderDesktop(rm, oFeedListItem, sMyId);
		}
		rm.write('</div>');
	};

	return EvalRequestFeedListItemRenderer;
}, true);
}; // end of sap/ino/controls/EvalRequestFeedListItemRenderer.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.EvaluationData') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.EvaluationData'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/EvaluationData",[
    "sap/ui/core/Element"
], function(Element) {
    "use strict";

    /**
     *
     * Evaluation Data is an element representing data of an evaluation, thus there is no visual representation.
     *
     * <ul>
     * <li>Properties
     * <ul>
     * <li>evaluationId: Technical integer id of the evaluation</li>
     * <li>modelCode: Technical code of underlying evaluation model</li>
     * <li>modelName: Human readable name of evaluation model</li>
     * <li>modeDescription: Human readable description of evaluation model</li>
     * <li>ideaId: Technical integer id of the evaluation's idea</li>
     * <li>statusCode: Status code of the evaluation</li>
     * <li>ideaPhaseCode: Phase code of the evaluation's idea</li>
     * <li>evaluatorID: ID of person which has done the evaluation</li>
     * <li>evaluatorName: Human readable name of person which has done the evaluation</li>
     * <li>evaluationDate: Date when evaluation has been made</li>
     * <li>overallResult: Overall result of the evaluation</li>
     * </ul>
     * </li>
     * <li>Aggregations
     * <ul>
     * <li>values: Elements of type sap.ino.controls.EvaluationDataCriterionValue for each value of that evaluation
     * </ul>
     * </li>
     * </ul>
     */
    return Element.extend("sap.ino.controls.EvaluationData", {
        metadata: {
            properties: {
                evaluationId: {
                    type: "int"
                },
                modelCode: {
                    type: "string"
                },
                modelName: {
                    type: "string"
                },
                modelDescription: {
                    type: "string"
                },
                ideaId: {
                    type: "int"
                },
                statusCode: {
                    type: "string"
                },
                status: {
                    type: "string"
                },
                ideaPhaseCode: {
                    type: "string"
                },
                ideaPhase: {
                    type: "string"
                },
                evaluatorId: {
                    type: "int"
                },
                evaluatorName: {
                    type: "string"
                },
                evaluationDate: {
                    type: "string"
                },
                overallResult: {
                    type: "string"
                }
            },
            aggregations: {
                "values": {
                    type: "sap.ino.controls.EvaluationDataCriterionValue",
                    multiple: true,
                    singularName: "value",
                    bindable: true
                }
            }
        },

        /**
         * @returns sap.ino.controls.EvaluationDataCriterionValue whose are top level (parent criterion is null)
         */
        findTopLevelCriterionValue: function(bIncludeOverall) {
            var aValues = this.getValues();
            var aResultValues = [];
            for (var i = 0; i < aValues.length; i++) {
                if (!aValues[i].getParentCriterionCode() &&
                    (this.criterionHasChildren(aValues[i].getCriterionCode()) || !aValues[i].getAggregationType() ||
                        (bIncludeOverall || !aValues[i].getIsOverallResult()))) {
                    aResultValues.push(aValues[i]);
                }
            }
            return aResultValues.sort(function(oCriterion1, oCriterion2) {
                return oCriterion1.getSequenceNo() - oCriterion2.getSequenceNo();
            });
        },

        criterionHasChildren: function(sCriterionCode) {
            if (sCriterionCode) {
                var aValues = this.getValues();
                for (var i = 0; i < aValues.length; i++) {
                    if (aValues[i].getParentCriterionCode() === sCriterionCode) {
                        return true;
                    }
                }
            }
            return false;
        },

        /**
         * @param sParentCriterionCode
         * @returns Array of sap.ino.controls.EvaluationDataCriterionValue whose parent criterion is
         *          sParentCriterionCode
         */
        findValuesByParentCriterionCode: function(sParentCriterionCode) {
            if (sParentCriterionCode) {
                var aValues = this.getValues();
                var aResultValues = [];
                for (var i = 0; i < aValues.length; i++) {
                    if (aValues[i].getParentCriterionCode() === sParentCriterionCode) {
                        aResultValues.push(aValues[i]);
                    }
                }
                return aResultValues.sort(function(oCriterion1, oCriterion2) {
                    return oCriterion1.getSequenceNo() - oCriterion2.getSequenceNo();
                });
            }
            return [];
        },

        /**
         * @returns sap.ino.controls.EvaluationDataCriterionValue of aggregation type MATRIX
         */
        findValueByAggregationTypeMatrix: function() {
            var aValues = this.getValues();
            for (var i = 0; i < aValues.length; i++) {
                if (aValues[i].getAggregationType() === "MATRIX") {
                    return aValues[i];
                }
            }
            return null;
        },

        /**
         * @param sCriterionCode
         * @returns sap.ino.controls.EvaluationDataCriterionValue for sCriterionCode
         */
        findValueByCriterionCode: function(sCriterionCode) {
            if (sCriterionCode) {
                var aValues = this.getValues();
                for (var i = 0; i < aValues.length; i++) {
                    if (aValues[i].getCriterionCode() === sCriterionCode) {
                        return aValues[i];
                    }
                }
            }
            return null;
        },

        /**
         * @returns sap.ino.controls.EvaluationDataCriterionValue which is overall result
         */
        findOverallCriterionCode: function() {
            var aValues = this.getValues();
            for (var i = 0; i < aValues.length; i++) {
                if (aValues[i].getIsOverallResult() === 1) {
                    return aValues[i];
                }
            }
            return null;
        }
    });
});
}; // end of sap/ino/controls/EvaluationData.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.EvaluationDataCriterionValue') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.EvaluationDataCriterionValue'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/EvaluationDataCriterionValue",[
    "sap/ui/core/Element"
], function(
    Element) {
    "use strict";

    /**
     *
     * Evaluation Data Criterion Value is an element representing the single value a criterion has in an evaluation.
     * 
     * <ul>
     * <li>Properties
     * <ul>
     * <li>criterionId: Technical id of criterion</li>
     * <li>criterionCode: Technical code of criterion</li>
     * <li>parentCriterionCode: Technical code of parent criterion</li>
     * <li>parentCriterionId: Technical id of parent criterion</li>
     * <li>criterionName: human readable name of criterion</li>
     * <li>criterionDescription: detailed description of criterion</li>
     * <li>criterionDataType: data type of criterion. Possible values: BOOLEAN, NUMERIC, INTEGER, TEXT</li>
     * <li>numValue: Value of criterion for data type numeric or integer</li>
     * <li>numValueMin: Minimum criterion value for data type numeric or integer</li>
     * <li>numValueMax: Maximum criterion value for data type numeric or integer</li>
     * <li>textValue: Value of criterion for data type text</li>
     * <li>boolValue: Value of criterion for data type boolean (0 = false, 1 = true, null = not set)</li>
     * <li>comment: Comment by the evaluator for a specific value</li>
     * <li>isDone: Flag for criterion is done</li>
     * <li>sequenceNo: Relative order of the criterion</li>
     * <li>isOverallResult: Criterion represents the evaluation overall result</li>
     * <li>uomCode: Unit of measure code</li>
     * <li>valueOptionListCode: Code for value options</li>
     * <li>aggregationType: Aggregation type (SUM, AVG, AND, OR, MATRIX)</li>
     * <li>xAxisCriterionCode: Criterion representing the x-axis of the matrix (in case of aggregation type MATRIX)</li>
     * <li>xAxisSegmentNo: Number of segments on x-axis of the matrix (in case of aggregation type MATRIX)</li>
     * <li>yAxisCriterionCode: Criterion representing the y-axis of the matrix (in case of aggregation type MATRIX)</li>
     * <li>yAxisSegmentNo: Number of segments on y-axis of the matrix (in case of aggregation type MATRIX)</li>
     * <li>visParam1CriterionCode: Criterion representing the visual parameter 1 (e.g. inner radius in case of
     * aggregation type MATRIX)</li>
     * <li>visParam2CriterionCode: Criterion representing the visual parameter 2 (e.g. outer radius in case of
     * aggregation type MATRIX)</li>
     * </ul>
     * </li>
     * </ul>
     */
    return Element.extend("sap.ino.controls.EvaluationDataCriterionValue", {
        metadata : {
            properties : {
                criterionId : {
                    type : "int"
                },

                criterionCode : {
                    type : "string"
                },

                parentCriterionCode : {
                    type : "string"
                },
                
                parentCriterionId : {
                    type : "int"
                },

                criterionName : {
                    type : "string"
                },

                criterionDescription : {
                    type : "string"
                },

                criterionDataType : {
                    type : "string"
                },

                criterionLabel: {
                    type:"string"
                },

                numValueMin : {
                    type : "float"
                },

                numValueMax : {
                    type : "float"
                },
                
                numValueStepSize : {
                    type : "float"
                },

                comment : {
                    type : "string"
                },

                isDone : {
                    type : "int"
                },

                sequenceNo : {
                    type : "int"
                },

                isOverallResult : {
                    type : "int"
                },

                uomCode : {
                    type : "string"
                },

                valueOptionListLabelCodes : {
                    type:"object"
                },

                aggregationType : {
                    type : "string"
                },
                
                weight : {
                    type : "string"
                },

                xAxisCriterionCode : {
                    type : "string"
                },

                xAxisCriterionCodeLabel : {
                    type : "string"
                },

                xAxisSegmentNo : {
                    type : "int"
                },

                yAxisCriterionCode : {
                    type : "string"
                },

                yAxisCriterionCodeLabel : {
                    type : "string"
                },

                yAxisSegmentNo : {
                    type : "int"
                },

                visParam1CriterionCode : {
                    type : "string"
                },

                visParam1CriterionCodeLabel : {
                    type : "string"
                },

                visParam2CriterionCode : {
                    type : "string"
                },

                visParam2CriterionCodeLabel : {
                    type : "string"
                },
                criterionValue: {
                    type: "string"
                }
            }
        },

        /**
         * 
         * @returns Minimum value of numeric or integer criterion
         */
        getValueMin : function() {
            switch (this.getCriterionDataType()) {
                case 'INTEGER' :
                case 'NUMERIC' :
                    return this.getNumValueMin();
                default :
                    return null;
            }
        },

        /**
         * 
         * @returns Maximum value of numeric or integer criterion
         */
        getValueMax : function() {
            switch (this.getCriterionDataType()) {
                case 'INTEGER' :
                case 'NUMERIC' :
                    return this.getNumValueMax();
                default :
                    return null;
            }
        },
        
        /**
         * 
         * @returns Step Size of numeric or integer criterion
         */
        getStepSize : function() {
            switch (this.getCriterionDataType()) {
                case 'INTEGER' :
                case 'NUMERIC' :
                    return this.getNumValueStepSize();
                default :
                    return null;
            }
        },
        
        /**
         * 
         * @returns The allowed string length of the input field
         */
        getMaxLength : function() {
            switch (this.getCriterionDataType()) {
                case 'INTEGER' :
                case 'NUMERIC' :
                    var nMaxValue = this.getNumValueMax();
                    if(nMaxValue){
                        var sMaxValue = nMaxValue.toString();
                        return sMaxValue.length;
                    }
                    return 16; //string length of MAXINT
                case 'BOOLEAN' : 
                    return 1;
                default :
                    return 5000; //HANA NVARCHAR length
            }
        }
    });
});
}; // end of sap/ino/controls/EvaluationDataCriterionValue.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.EvaluationMatrixItem') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.EvaluationMatrixItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/EvaluationMatrixItem",[
    "sap/ui/core/Element"
], function(Element) {
    "use strict";

    /**
     * Element representing an item in an Evaluation Matrix
     *
     * <ul>
     * <li>Properties
     * <ul>
     * <li>name: identifying name of a matrix item</li>
     * <li>xValue: x value </li>
     * <li>yValue: y value </li>
     * <li>r1Value: value for radius 1</li>
     * <li>r2Value: value for radius 2</li>
     * </ul>
     * </li>
     * </ul>
     */
    return Element.extend("sap.ino.controls.EvaluationMatrixItem", {
        metadata : {
            properties : {
                name : {
                    type : "string",
                    defaultValue : "item"
                },
                dataType : "string",
                xValue : {
                    type : "float",
                    defaultValue : 0
                },
                xValueDataType : "string",
                yValue : {
                    type : "float",
                    defaultValue : 0
                },
                yValueDataType : "string",
                r1Value : {
                    type : "float",
                    defaultValue : 0
                },
                r1ValueDataType : "string",
                r2Value : {
                    type : "float",
                    defaultValue : 0
                },
                r2ValueDataType : "string"
            }
        }
    });
});
}; // end of sap/ino/controls/EvaluationMatrixItem.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.ExpertGraph') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.ExpertGraph'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/ExpertGraph",[
    "sap/ui/core/Control",
    "sap/ui/thirdparty/d3"
], function(Control, d3) {
    "use strict";

    return Control.extend("sap.ino.controls.ExpertGraph", {
        metadata : {
            properties : {
                experts : {
                    type : "object",
                    defaultValue : {}
                }
            },
            events : {
                "mouseOverNode" : {},
                "mouseOutNode" : {},
                "clickNode" : {}
            }
        },

        init: function () {
            this._oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ino.controls");
		},

        renderer : function(oRm, oControl) {
            oRm.write("<div ");
            oRm.writeControlData(oControl);
            oRm.addClass("sapInoExpertGraphContainer");
            oRm.writeClasses();
            oRm.write("></div>");
        },

        onAfterRendering : function() {
            var i;
            var fnZoom = d3.behavior.zoom()
                .scaleExtent([0.1, 10])
                .on("zoom", fnZoomed);

            var $element = d3.select("#" + this.getId());
            var width = $element[0][0].scrollWidth;
            var height = $element[0][0].scrollHeight;
            var scale = 1;
            var $svg = $element
                .append("svg")
                .call(fnZoom)
                .attr("transform", "translate(0,0)");

            var radius = 7;

            var force = d3.layout.force()
                .gravity(0.1)
                .distance(100)
                .charge(-500)
                .size([width, height]);
                
            d3.behavior.drag()
                .origin(function(d) { return d; })
                .on("dragstart", fnDragStarted)
                .on("drag", fnDragged)
                .on("dragend", fnDragEnded);
                
            var $container = $svg.append("g");
            
            function fnDragStarted(d) {
                d3.event.sourceEvent.stopPropagation();
                d3.select(this)
                    .classed("dragging", true);
                force.start();
            }
            
            function fnDragged(d) { 
                d3.select(this)
                    .attr("cx", d.x = d3.event.x)
                    .attr("cy", d.y = d3.event.y); 
            }
            
            function fnDragEnded(d) { 
                d3.select(this)
                    .classed("dragging", false); 
            }
                
            $svg.on("dblclick.zoom", null);
            $svg.on("dblclick", function(){
                scale = 1;
                fnZoom.scale(1);
                fnZoom.translate([0, 0]);
                $container.transition()
                    .duration(500)
                    .attr('transform', '');
                force.resume();
            });
            
            function fnZoomed() { 
                scale = d3.event.scale;
                if(scale > 1) {
                    $container.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
                } else {
                    $container.attr("transform", "scale(" + d3.event.scale + ")");
                }
                force.resume();
            }
    
            function createGraph(experts) {
                var oGraph = {
                    nodes : [], 
                    links : []
                };
                
                function addLink(source,target) {
                    var result = jQuery.grep(oGraph.links, function(e){ 
                        return e.source === source && e.target === target;
                    });
                    
                    if(result.length === 0) {
                        oGraph.links.push({ source: source, target: target });
                        return oGraph.links[oGraph.links.length - 1];
                    }
                    return result[0];
                }
                
                function addTag(iTagId, sTagName) {
                    var result = jQuery.grep(oGraph.nodes, function(e){ 
                        return e.tag_id === iTagId; 
                    });
                    
                    if(result.length === 0) {
                        var oNewTag = { 
                            NAME: sTagName, 
                            tag_id: iTagId, 
                            group: 0    // value 0 is used to identify Tag node
                        };
                        oGraph.nodes.push(oNewTag);
                        return oGraph.nodes[oGraph.nodes.length - 1];
                    }
                    return result[0];
                }
                
                function addPerson(person) {
                    var aNodes = jQuery.grep(oGraph.nodes, function(oNode){ 
                        return oNode.PERSON_ID === person.ID; 
                    });
                    
                    if(aNodes.length === 0) {
                        var oNewPerson = { 
                            NAME: person.NAME,
                            PERSON_ID: person.ID,
                            EMAIL: person.EMAIL,
                            PHONE: person.PHONE,
                            MOBILE: person.MOBILE,
                            OFFICE: person.OFFICE,
                            group: 1,   // value 1 is used to identify Person node
                            x: 150,
                            y: 150,
                            RANK: person.RANK,
                            CORRELATION: person.CORRELATION
                        };
                        oGraph.nodes.push(oNewPerson);
                        return oNewPerson;
                    } else {
                        return aNodes[0];
                    }
                }
                
                jQuery.each(experts, function(index, currentExpert) {
                    var person = addPerson(currentExpert);
                    jQuery.each(currentExpert.CORRELATION, function(i1, currentCorrelation) {
                        jQuery.each(currentCorrelation.TAGS, function(i2, currentTag) {
                            var tag = addTag(currentTag.ID, currentTag.NAME);
                            var link = addLink(person, tag);
                        });
                    });
                });
                return oGraph;
            }
                
            var graph = createGraph(this.getExperts());
            
            if (graph.nodes.length === 0) {
                $svg.append("text").text(this._oRB.getText("CTRL_EXPERTFINDER_EMPTY_SCREEN")).classed("sapInoExpertGraphEmptyScreenText", true);
                var xPos = ($element[0][0].scrollWidth - $svg.select("text")[0][0].getBBox().width) / 3;
                var yPos = ($element[0][0].scrollHeight - $svg.select("text")[0][0].getBBox().height) / 2;
                $svg.select("text").attr("x", xPos).attr("y", yPos);
            } else {
                force.nodes(graph.nodes).links(graph.links).start();
            }
    
            var link = $container.selectAll(".sapInoExpertLink")
                .data(graph.links)
                .enter()
                .append("line")
                .classed("sapInoExpertLink", true);
    
            var node = $container.selectAll(".sapInoExpertNode")
                .data(graph.nodes)
                .enter().append("g")
                .attr("class", "sapInoExpertNode")
                .call(force.drag);
            
            var that = this;
            var aSelectedNodes = [];
            var aSelectedLinks = [];
                
            node.append("circle")
                .attr("r",  function(d) {
                    if(d.group === 0) {
                        return 12;
                    } else {
                        if(radius + (5 / d.RANK) < 8) {
                            return 8;
                        }
                        else {
                            return radius + (5 / d.RANK);
                        }
                    }
                })
                .style("cursor", function(d) { 
                        return d.group !== 0 ? "pointer" : "auto"; 
                })
                .on("click", function(d,i) { 
                    if(d.group !== 0) {
                        if(aSelectedNodes.length > 0 || aSelectedLinks.length > 0 ) {
                            for(i = 0; i < aSelectedNodes.length; i++) {
                                d3.select(aSelectedNodes[i])
                                    .classed("sapInoExpertGraphSelectedPerson", false)
                                    .classed("sapInoExpertGraphSelectedTag", false)
                                    .classed("sapInoExpertGraphSelectText", false)
                                    .classed("sapInoExpertGraphHighlightLine", false)
                                    .classed("sapInoExpertGraphSelectedPerson", false);
                            }
                            aSelectedNodes = [];
                            
                            for(i = 0; i < aSelectedLinks.length; i++) {
                                d3.select(aSelectedLinks[i])
                                    .classed("sapInoExpertGraphSelectLine", false)
                                    .classed("sapInoExpertLink", true);
                            }
                            aSelectedLinks = [];
                        }
                        
                        var aAssociatedNodeIds = [];
                        
                        var aAssociatedLinks = link.filter(function(l) {
                            if(l.source.index === d.index || l.target.index === d.index) {
                                aAssociatedNodeIds.push(l.source.index);
                                aAssociatedNodeIds.push(l.target.index);
                                return true;
                            } else {
                                return false;
                            }
                        });        
                        
                        var aAssociatedNodes = node.filter(function(l) {
                            return (aAssociatedNodeIds.indexOf(l.index) >= 0);
                        });
                        
                        aAssociatedLinks.each(function() {
                            aSelectedLinks.push(this);
                            d3.select(this)
                                .classed("sapInoExpertLink", false)
                                .classed("sapInoExpertGraphHighlightLine", false)
                                .classed("sapInoExpertGraphSelectLine", true);
                        });
                        
                        aAssociatedNodes.each(function(dNode) {
                            aSelectedNodes.push(this.childNodes[0]);
                            aSelectedNodes.push(this.childNodes[1]);
                            d3.select(this.childNodes[1])
                                .classed("sapInoExpertGraphSelectText", true);
                            if(dNode.group !== 1) {
                                d3.select(this.childNodes[0]).classed("sapInoExpertGraphSelectedTag", true);
                            } else {
                                d3.select(this.childNodes[0]).classed("sapInoExpertGraphSelectedPerson", true);
                            }
                        });
                        
                        that.fireClickNode(d); 
                    }
                });
              
            node.append("text")
                .attr("dx", 14)
                .attr("dy", ".35em")
                .attr("x", - 0)
                .attr("y", function(d) { 
                    if(d.group === 0) {
                          return -12;
                      } else {
                        if(radius + (5 / d.RANK) < 8) {
                            return 8;
                        } else {
                            return radius + (5 / d.RANK);
                        }
                      }
                })
                .text(function(d) { 
                    return d.NAME ? d.NAME : "[" + that._oRB.getText("CTRL_EXPERTFINDER_GRP_NO_NAME") + "]"; //d.NAME; 
                })
                .classed("sapInoExpertGraphText", true);
                    
            node.each(function(dNode) {
                if(dNode.group !== 0) {
                    d3.select(this).classed("sapInoExpertGraphPerson", true);
                } else {
                    d3.select(this).classed("sapInoExpertGraphTag", true);
                }
            });
            
            var aTouchedNodes = [];
            var aTouchedLinks = [];
            
            var getRadius = function(oNode) {
                if(oNode.group === 0) {
                      return 12;
                  } else {
                      if(radius + (10 / oNode.RANK) < 8) {
                          return 8;
                      } else {
                          return radius + (10 / oNode.RANK);
                      }
                  }
            };
    
            force.on("tick", function() {
                node.attr("cx", function(d) { 
                        var w = scale > 1 ? width : width / scale;
                        d.x = Math.max(getRadius(d), Math.min(w - getRadius(d), d.x));
                        return d.x;   
                    }).attr("cy", function(d) { 
                        var h = scale > 1 ? height : height / scale;
                        d.y = Math.max(getRadius(d), Math.min(h - getRadius(d), d.y));
                        return d.y;    
                    }).on("mouseover", function(d){
                        
                        var aAssociatedNodeIds = [];
        
                        var aAssociatedLinks = link.filter(function(l) {
                            if(l.source.index === d.index || l.target.index === d.index) {
                                aAssociatedNodeIds.push(l.source.index);
                                aAssociatedNodeIds.push(l.target.index);
                                return true;
                            } else {
                                return false;
                            }
                        });        
                        
                        var aAssociatedNodes = node.filter(function(l) {
                            return (aAssociatedNodeIds.indexOf(l.index) >= 0);
                        });
                        
                        aAssociatedLinks.each(function() {
                            aTouchedLinks.push(this);
                            d3.select(this)
                                .classed("sapInoExpertLink", false)
                                .classed("sapInoExpertGraphHiglightLine", true);
                        });
                        
                        aAssociatedNodes.each(function() {
                            aTouchedNodes.push(this.childNodes[0]);
                            aTouchedNodes.push(this.childNodes[1]);
                            d3.select(this.childNodes[0]).classed("sapInoExpertGraphHiglightCircle", true);
                            d3.select(this.childNodes[1]).classed("sapInoExpertGraphHiglightText", true);
                        });
                        
                        that.fireMouseOverNode(d);
                    })
                    .on("mouseout", function(d) {
                        
                        for(i = 0; i < aTouchedNodes.length; i++) {
                            d3.select(aTouchedLinks[i])
                                .classed("sapInoExpertGraphHiglightCircle", false)
                                .classed("sapInoExpertGraphHiglightText", false)
                                .classed("sapInoExpertGraphHiglightLine", false);
                        }
                        aTouchedNodes = [];

                        for(i = 0; i < aTouchedLinks.length; i++) {
                            var oTouchedLink = aTouchedLinks[i];
                            var aResultLinks = jQuery.grep(aSelectedLinks, function(oSelectedLink) {
                                return oSelectedLink === oTouchedLink;
                            });
                            
                            if(aResultLinks.length === 0) {
                                d3.select(oTouchedLink).classed("sapInoExpertLink", true);
                            }
                        }

                        aTouchedLinks = [];
                        
                        that.fireMouseOutNode(d);
                    });
                        
                node.attr("transform", function(d) { 
                    return "translate(" + d.x + "," + d.y + ")"; 
                });
                
                link.attr("x1", function(d) {
                    return d.source.x;
                }).attr("y1", function(d) { 
                    return d.source.y; 
                }).attr("x2", function(d) { 
                    return d.target.x;  
                }).attr("y2", function(d) { 
                    return d.target.y;   
                });
            });
                
            var safety = 0;
            while(force.alpha() > 0.03) { // this will calm the graph down before rendering it
                force.tick();
                if(safety++ > 500) {
                  break; // Avoids infinite looping in case this solution was a bad idea
                }
            }
            function resize() {
                var width = $element[0][0].scrollWidth;
                var height = $element[0][0].scrollHeight;
                
                $svg.attr("width", width).attr("height", height);
                if (force.nodes().length !== 0) {
                    force.size([width, height]).resume();
                } else {
                    var xPos = ($element[0][0].scrollWidth - $svg.select("text")[0][0].getBBox().width) / 3;
                    var yPos = ($element[0][0].scrollHeight - $svg.select("text")[0][0].getBBox().height) / 2;
                    $svg.select("text").attr("x", xPos).attr("y", yPos);
             }
            }
            d3.select(window).on('resize', resize);
        }
    });
});
}; // end of sap/ino/controls/ExpertGraph.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.Follow') ) {
jQuery.sap.declare('sap.ino.controls.Follow'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToggleButton'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.InvisibleText'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/Follow",[
	"sap/m/ButtonType",
	"sap/m/Button",
	"sap/ui/core/IconPool",
	"sap/m/ToggleButton",
	"sap/ui/core/InvisibleText"
], function(ButtonType, Button, IconPool, ToggleButton, InvisibleText) {
	'use strict';
	return Button.extend("sap.ino.controls.Follow", {
		metadata: {
			properties: {
				"Id": {
					type: "int"
				},
				//follow id , campaign id,tag id or idea id
				"objectId": {
					type: "int"
				},
				"enabled": {
					type: "boolean"
				},
				// follow type,campaign,tag or idea 
				"type": {
					type: "string"
				},
				//indicator: follow or unfollow
				"value": {
					type: "float"
				},
				"tooltip": {
					type: "string"
				},
				"onlyIcon": {
					type: "boolean"
				},
				"styleType": {
					type: "string"
				},
				"visible": {
					type: "boolean"
				},
				"showType": {
					type: "string",
					defaultValue: "card"
				}
			},
			aggregations: {
				"_follow": {
					type: "sap.m.ToggleButton",
					multiple: false,
					visibility: "hidden"
				},
				"_followDescription": {
				    type: "sap.ui.core.InvisibleText",
				    multiple: false,
					visibility: "hidden"
					
				}
			},
			events: {
				follow: {}
			}
		},
		init: function() {
			this._oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ino.controls");
		},
		_onFollow: function() {
			var value = this.getProperty('value');
			var objectId = this.getProperty('objectId');
			var type = this.getProperty('type');

			this.setProperty('value', this.getProperty('value') ? 0 : 1);

			this.fireFollow({
				value: value,
				objectId: objectId,
				type: type
			});
		},
		_followButton: function() {
			var followButton = this.getAggregation("_follow");
			var self = this;
			var value = self.getProperty('value');
			var showType = self.getProperty('showType');
			var i18n = self.getModel("i18n").getResourceBundle();
			var tooltips = value ? 'UNFOLLOW_TOOLTIP_' + self.getProperty('type') : 'FOLLOW_TOOLTIP_' + self.getProperty('type');
			var text = value ? i18n.getText('FOLLOW_STATUS_FOLLOWING') : i18n.getText('FOLLOW_STATUS_FOLLOW');
			var icon = value ? IconPool.getIconURI('following', 'InoIcons') : IconPool.getIconURI('follow', 'InoIcons');
			if (followButton) {
				followButton.setText(text);
				followButton.setPressed(!!value);
				followButton.setEnabled(self.getProperty('enabled'));
				followButton.setVisible(self.getProperty('visible'));
				followButton.setTooltip(i18n.getText(tooltips));
				followButton.setIcon(icon);
			} else {
				followButton = new ToggleButton({
				    ariaDescribedBy:this._getFollowDescription(i18n.getText(tooltips)),
					text: text,
					icon: icon,
					enabled: this.getProperty("enabled"),
					visible: this.getProperty('visible'),
					press: function() {
						self._onFollow();
					},
					pressed: !!value,
				// 	styled: false,
					tooltip: i18n.getText(tooltips),
					type: ButtonType.Transparent
				});
				this.setAggregation("_follow", followButton, true);
			}
			if (value) {
				followButton.attachBrowserEvent('mouseenter focus', function() {
					followButton.setIcon(IconPool.getIconURI('unfollow', 'InoIcons'));
					followButton.$().removeClass('isHover').addClass('isHover');
					followButton.setText(i18n.getText('FOLLOW_STATUS_UNFOLLOW'));
					return false;
				});
				followButton.attachBrowserEvent('mouseleave blur', function() {
					followButton.setIcon(IconPool.getIconURI('following', 'InoIcons'));
					followButton.$().removeClass('isHover');
					followButton.setText(i18n.getText('FOLLOW_STATUS_FOLLOWING'));
					return false;
				});
			} else {
				followButton.$().removeClass('isHover');
				followButton.aBindParameters = [];
			}

			return followButton;
		},
		_followIcon: function() {
			var followIcon = this.getAggregation("_follow");
			var self = this;
			var value = self.getProperty('value');
			var showType = self.getProperty('showType');
			var i18nModel = self.getModel("i18n");
			var i18n;
			if (i18nModel) {
				i18n = i18nModel.getResourceBundle();
			}
			var tooltips = value ? 'UNFOLLOW_TOOLTIP_' + self.getProperty('type') : 'FOLLOW_TOOLTIP_' + self.getProperty('type');
			var icon = value ? IconPool.getIconURI('following', 'InoIcons') : IconPool.getIconURI('follow', 'InoIcons');
			if (followIcon) {
				followIcon.setPressed(!!value);
				followIcon.setEnabled(self.getProperty('enabled'));
				followIcon.setVisible(self.getProperty('visible'));
				followIcon.setTooltip(i18n ? i18n.getText(tooltips) : "");
				followIcon.setIcon(icon);
			} else {
				followIcon = new ToggleButton({
				    ariaDescribedBy:this._getFollowDescription(i18n ? i18n.getText(tooltips) : ""),
					enabled: this.getProperty("enabled"),
					visible: this.getProperty('visible'),
					icon: icon,
					press: function() {
						self._onFollow();
					},
					pressed: !!value,
				// 	styled: false,
					tooltip: i18n ? i18n.getText(tooltips) : "",
					type: ButtonType.Transparent
				});
				this.setAggregation("_follow", followIcon, true);
			}
			if (value) {
				followIcon.attachBrowserEvent('mouseenter focus', function() {
					followIcon.setIcon(IconPool.getIconURI('unfollow', 'InoIcons'));
					followIcon.$().removeClass('isHover').addClass('isHover');
					return false;
				});
				followIcon.attachBrowserEvent('mouseleave blur', function() {
					followIcon.setIcon(IconPool.getIconURI('following', 'InoIcons'));
					followIcon.$().removeClass('isHover');
					return false;
				});
			} else {
				followIcon.$().removeClass('isHover');
				followIcon.aBindParameters = [];
			}
			return followIcon;
		},
		
		_getFollowDescription: function(text){
            var oDescr = this.getAggregation("_followDescription");
			if (!oDescr) {
				oDescr = new InvisibleText({
					text: text
				});
				this.setAggregation("_followDescription", oDescr);
			}
			return oDescr;
        },
		
		renderer: function(oRM, oControl) {
			var followComponent, followStyle;
			var onlyIcon = oControl.getProperty('onlyIcon');
			var showType = oControl.getProperty('showType');
			var styleType = oControl.getProperty('styleType') ? oControl.getProperty('styleType') : '';
			var isActive = oControl.getProperty('value') ? 'isActive' : '';
			if (onlyIcon) {
				followComponent = oControl._followIcon();
				followStyle = 'sapFollowIcon';
			} else {
				followComponent = oControl._followButton();
				followStyle = 'sapFollowButton';
			}
if( showType === "card"){
			oRM.write("<div");
			oRM.writeControlData(oControl);
			oRM.addClass(followStyle);
			oRM.addClass(styleType);
			oRM.addClass(isActive);

			oRM.writeClasses();
// 			if (oControl.getTooltip_Text()) {
// 				oRM.writeAttributeEscaped("title", oControl.getTooltip());
// 			}
			
			
			
			oRM.write(">");

			if (followComponent) {
				// ATTN.: DO NOT SET THE TOOLTIP FOR THE STARCONTROL LIKE THIS, AS THIS CAUSES A RERENDERING OF THE WHOLE LIST
				//oVoteControl.setTooltip(oControl.getTooltip_Text());
				oRM.renderControl(followComponent);
				oRM.renderControl(oControl._getFollowDescription());
			}

			oRM.write("</div>");
}else if(showType === "list"){
    //oRM.writeControlData(oControl);
    	if (followComponent) {
				// ATTN.: DO NOT SET THE TOOLTIP FOR THE STARCONTROL LIKE THIS, AS THIS CAUSES A RERENDERING OF THE WHOLE LIST
				//oVoteControl.setTooltip(oControl.getTooltip_Text());
				oRM.renderControl(followComponent);
				oRM.renderControl(oControl._getFollowDescription());
			}
}
		}
	});

});
}; // end of sap/ino/controls/Follow.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.GenericStyle') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.GenericStyle'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/GenericStyle",[
    "sap/ui/core/Control",
    "sap/ui/core/IconPool"
], function(Control, IconPool) {
    "use strict";

    var GenericStyle = Control.extend("sap.ino.controls.GenericStyle", {
        constructor : function() {
            throw new Error("Control is not instantiatable.");
        }
    });
    
    GenericStyle.getImage = function(sImage, sPath) {
        if (!sPath) {
            sPath = "sap.ino.controls";
        }
        // always get the current theme
        var sCurrentTheme = sap.ui.getCore().getConfiguration().getTheme();
        var bRTL = sap.ui.getCore().getConfiguration().getRTL();
        return sap.ui.resource(sPath, "themes/" + sCurrentTheme + "/img" + (bRTL ? "-RTL" : "") + "/GenericStyle/" + sImage);
    };
    
    IconPool.addIcon("campaign", "InoIcons", "InoIcons", "e900");
    IconPool.addIcon("campaign-add", "InoIcons", "InoIcons", "e901");
    IconPool.addIcon("wall-add", "InoIcons", "InoIcons", "e902");
    IconPool.addIcon("wall", "InoIcons", "InoIcons", "e903");
    IconPool.addIcon("heart", "InoIcons", "InoIcons", "e904");
    IconPool.addIcon("heart-filled", "InoIcons", "InoIcons", "e905");
    IconPool.addIcon("idea", "InoIcons", "InoIcons", "e906");
    IconPool.addIcon("idea-add", "InoIcons", "InoIcons", "e907");
    IconPool.addIcon("thumbsdown", "InoIcons", "InoIcons", "e908");
    IconPool.addIcon("thumbsdown-filled", "InoIcons", "InoIcons", "e909");
    IconPool.addIcon("thumbsup", "InoIcons", "InoIcons", "e90a");
    IconPool.addIcon("line3", "InoIcons", "InoIcons", "e90c");
    IconPool.addIcon("line4", "InoIcons", "InoIcons", "e90d");
    IconPool.addIcon("line5", "InoIcons", "InoIcons", "e90e");
    IconPool.addIcon("line-both", "InoIcons", "InoIcons", "e90f");
    IconPool.addIcon("line-dashed", "InoIcons", "InoIcons", "e910");
    IconPool.addIcon("line-dotted", "InoIcons", "InoIcons", "e911");
    IconPool.addIcon("line-end", "InoIcons", "InoIcons", "e912");
    IconPool.addIcon("line-start", "InoIcons", "InoIcons", "e913");
    IconPool.addIcon("line-vertical", "InoIcons", "InoIcons", "e914");
    IconPool.addIcon("follow", "InoIcons", "InoIcons", "e915");
    IconPool.addIcon("following", "InoIcons", "InoIcons", "e916");
    IconPool.addIcon("unfollow", "InoIcons", "InoIcons", "e917");
    IconPool.addIcon("register", "InoIcons", "InoIcons", "e918");
    IconPool.addIcon("pending", "InoIcons", "InoIcons", "e919"); 
    IconPool.addIcon("raise_hand", "InoIcons", "InoIcons", "e91a"); 
    IconPool.addIcon("shake_hands", "InoIcons", "InoIcons", "e91b"); 
    IconPool.addIcon("lightbulb_check", "InoIcons", "InoIcons", "e91c"); 
    
    IconPool.addIcon("information", "InoIcons", "InoIcons", "e612"); 
    IconPool.addIcon("quicklink", "InoIcons", "InoIcons", "e610"); 
    IconPool.addIcon("quicklink-custom", "InoIcons", "InoIcons", "e60f"); 
    IconPool.addIcon("quicklink-standard", "InoIcons", "InoIcons", "e611"); 
    IconPool.addIcon("latest-update", "InoIcons", "InoIcons", "e91d");
    IconPool.addIcon("latest-update-selected", "InoIcons", "InoIcons", "e91e");    
    IconPool.addIcon("status-update", "InoIcons", "InoIcons", "e91f");  
    IconPool.addIcon("status-update-selected", "InoIcons", "InoIcons", "e920");  
    IconPool.addIcon("comment-update", "InoIcons", "InoIcons", "e921");
    IconPool.addIcon("comment-update-selected", "InoIcons", "InoIcons", "e914");
    
    IconPool.addIcon("active-participates", "InoIcons", "InoIcons", "e922");    
    IconPool.addIcon("new_comment", "InoIcons", "InoIcons", "e923");      
    IconPool.addIcon("new_status", "InoIcons", "InoIcons", "e924");
    IconPool.addIcon("idea_read", "InoIcons", "InoIcons", "e925");
    IconPool.addIcon("idea_update", "InoIcons", "InoIcons", "e926"); 
    IconPool.addIcon("idea-news", "InoIcons", "InoIcons", "e927");
    IconPool.addIcon("idea_create", "InoIcons", "InoIcons", "e928");    
    IconPool.addIcon("leaderboard_fire", "InoIcons", "InoIcons", "e929");      
    IconPool.insertFontFaceStyle();

    return GenericStyle;
});
}; // end of sap/ino/controls/GenericStyle.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.HorizontalLine') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.HorizontalLine'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.base.security.sanitizeHTML'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/HorizontalLine",[
    "sap/ui/core/Control",
	"sap/base/security/sanitizeHTML"
], function (Control, sanitizeHTML) {
	"use strict";
	
	/**
     * 
     * Control displaying a horizontal Line
     * 
     */
	return Control.extend("sap.ino.controls.HorizontalLine", {
	    metadata : {
	        properties: {
                "height": {
                    type: "string",
                    defaultValue: "1px"
                },
                "width": {
                    type: "string",
                    defaultValue: "100%"
                }
	        }
	    },

        renderer : function(oRm, oControl) {
            var sHeight = sanitizeHTML(oControl.getHeight());
            var sWidth = sanitizeHTML(oControl.getWidth());
            
            oRm.write("<div");
            oRm.writeControlData(oControl);
            oRm.addStyle("width", sWidth);
            oRm.addStyle("overflow", "hidden");
            oRm.writeStyles();
            oRm.addClass("sapInoHorizontalLine");
            oRm.writeClasses();
            oRm.write(">");
            
            oRm.write("<svg");
            oRm.writeAttribute("focusable", "false"); // required by IE
            oRm.addStyle("width", sWidth);
            oRm.addStyle("height", sHeight);
            
            oRm.writeStyles();
            oRm.writeClasses();
            oRm.write(">");
            
            oRm.write("<rect");
            oRm.writeAttributeEscaped("x", 0);
            oRm.writeAttributeEscaped("y", 0);
            oRm.writeAttributeEscaped("width", sWidth);
            oRm.writeAttributeEscaped("height", sHeight);
            oRm.write("/>");

            oRm.write("</svg>");
            oRm.write("</div>");
        }
	});
});
}; // end of sap/ino/controls/HorizontalLine.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.IFrame') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.controls.IFrame");

(function() {
    "use strict";

    /**
     * 
     * The IFrame control can be used to sho html code independent from other css styles
     * 
     * <ul>
     * <li>Properties
     * <ul>
     * <li>content: Content to be shown in the IFrame</li>
     * </ul>
     * </li>
     * </ul>
     */
    sap.ui.core.HTML.extend("sap.ino.controls.IFrame", {
        metadata : {
            properties : {
                content : "string",
                width : {
                    type : "string",
                    defaultValue : "100%"
                },
                height : {
                    type : "string",
                    defaultValue : "100%"
                },
                backgroundColor : {
                    type : "string",
                    defaultValue : "white"
                }
            }
        },

        constructor : function(sContent) {
            this.sanitizeContent = true;
            sap.ui.core.HTML.apply(this, arguments);
        },
        
        onAfterRendering : function() {
            var oDomRef = this.getDomRef();
            var oDoc = oDomRef.contentWindow.document;
            oDoc.open();
            oDoc.write(this.getContent() || "");
            oDoc.close();
        },

        renderer : function(oRm, oControl) {
            oRm.write("<iframe");
            oRm.writeControlData(oControl);
            oRm.writeAttributeEscaped("style", "width:" + oControl.getWidth() + ";height:" + oControl.getHeight() + ";background-color:" + oControl.getBackgroundColor() + ";border:0");
            oRm.write("></iframe>");
        }
    });
})();
}; // end of sap/ino/controls/IFrame.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.IdeaAttachmentRoleType') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.controls.IdeaAttachmentRoleType");
(function() {
	"use strict";

 	sap.ino.controls.IdeaAttachmentRoleType = {
 		Standard: "ATTACHMENT",
 		TitleImage: "IDEA_TITLE_IMAGE"
 	};
})();
}; // end of sap/ino/controls/IdeaAttachmentRoleType.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.IdeaStatusActionType') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.controls.IdeaStatusActionType");
(function() {
	"use strict";

 	sap.ino.controls.IdeaStatusActionType = {
 		nextPhase: "sap.ino.config.START_NEXT_PHASE",
 		prevPhase: "sap.ino.config.RESTART_PREV_PHASE"
 	};
})();
}; // end of sap/ino/controls/IdeaStatusActionType.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.IdeaStatusType') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.controls.IdeaStatusType");
(function() {
	"use strict";

 	sap.ino.controls.IdeaStatusType = {
 		Draft: "sap.ino.config.DRAFT",
 		Completed: "sap.ino.config.COMPLETED",
 		Discontinued: "sap.ino.config.DISCONTINUED",
 		Merged: "sap.ino.config.MERGED",
 		TypeNew: "NEW",
 		TypeCompleted: "COMPLETED",
 		TypeDiscontinued: "DISCONTINUED",
 		TypeInProcess: "IN_PROCESS"
 	};
})();
}; // end of sap/ino/controls/IdeaStatusType.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.IdeaVolunteer') ) {
jQuery.sap.declare('sap.ino.controls.IdeaVolunteer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToggleButton'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/IdeaVolunteer",[
	"sap/m/ButtonType",
	"sap/ui/core/Control",
	"sap/ui/core/IconPool",
	"sap/m/ToggleButton"
], function(ButtonType, Control, IconPool, ToggleButton) {
    'use strict';
    
    return Control.extend("sap.ino.controls.IdeaVolunteer", {
        metadata: {
            properties: {
                "key": {
                    type: "int" 
                },
                "ideaId": {
                    type: "int"
                },
                "value": {
                    type: "boolean"
                },
                "onlyIcon": {
                    type: "boolean"
                },
                "tooltip": {
                    type: "string"
                },
                "visible": {
                    type: "boolean" 
                },
                "enabled": {
					type: "boolean"
				},
                "styleClass": {
                    type: "string"
                }
            },
            aggregations: {
                "_volunteer": {
                    type: "sap.m.ToggleButton",
                    multiple: false,
                    visibility: "hidden"
                }
            },
            events: {
                volunteer: {}
            }
        },
        init: function () {
            this._oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ino.controls");
        },
        _onVolunteer: function() {
            var bValue = this.getProperty("value");
            var iIdeaId = this.getProperty("ideaId");
            var iKey = this.getProperty("key");
            
            this.setProperty("value", !bValue);
            
            this.fireVolunteer({
                Key: iKey,
                Value: bValue,
                IdeaId: iIdeaId
            });
        },
        _getIcon: function() {
            var self = this;
            var oVolunteer = this.getAggregation("_volunteer");
            var oIcon = IconPool.getIconURI('raise_hand', 'InoIcons');
            var i18n = this.getModel("i18n").getResourceBundle();
            var bValue = this.getProperty("value");
            var sToolTip = bValue ? i18n.getText("LEAVE_VOLUNTEERS") : i18n.getText("ADD_VOLUNTEERS");
            
            if (!oVolunteer) {
                oVolunteer = new ToggleButton({
                    icon: oIcon,
                    visible: this.getProperty('visible'),
                    enabled: this.getProperty("enabled"),
                    pressed: bValue,
                    tooltip: sToolTip,
                    type: "Transparent",
                    // styled: false,
                    press: function() {
                        self._onVolunteer();
                    }
                });
                this.setAggregation("_volunteer", oVolunteer, true);
            } else {
                oVolunteer.setPressed(bValue);
                oVolunteer.setVisible(this.getProperty("visible"));
                oVolunteer.setEnabled(this.getProperty('enabled'));
                oVolunteer.setTooltip(sToolTip);
                oVolunteer.setIcon(oIcon);
            }
            
            return oVolunteer;
        },
        renderer: function (oRM, oControl) {
            var oVolunteer = oControl._getIcon();
            var isActive = oControl.getProperty('value') ? 'isActive' : '';
            
            oRM.write("<div");
            oRM.writeControlData(oControl);
            oRM.addClass(jQuery.sap.encodeHTML(oControl.getProperty('styleClass')));
            oRM.addClass(isActive);
            oRM.writeClasses();
            if (oControl.getTooltip_Text()) {
			    oRM.writeAttributeEscaped("title", oControl.getTooltip());
			}
			oRM.write(">");
			
			oRM.renderControl(oVolunteer);
			
			oRM.write("</div>");
        }
    });
});
}; // end of sap/ino/controls/IdeaVolunteer.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.IdentityCard') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.IdentityCard'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.Image'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Icon'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.Size'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Orientation'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/IdentityCard",[
    "sap/ui/core/Control",
	"sap/m/Image",
	"sap/ui/core/Icon",
	"sap/m/Link",
	"sap/m/Text",
	"sap/m/Size",
	"sap/ui/core/Orientation"
], function(Control, Image, Icon, Link, Text, Size, Orientation) {
	"use strict";

	/**
	 *
	 * A control that displays a User / Identity
	 *
	 * <ul><li>Properties
	 *   <ul>
	 *     <li></li>
	 *     <li></li>
	 *     <li></li>
	 *     <li></li>
	 *   </ul></li>
	 * <li>Aggregations
	 *   <ul>
	 *   </ul></li>
	 * <li>Events
	 *  <ul>
	 *   </ul></li>
	 * </ul>
	 */

	var IdentityCard = Control.extend("sap.ino.controls.IdentityCard", {
		metadata: {
			properties: {
				identityId: {
					type: "int"
				},
				userImageUrl: {
					type: "sap.ui.core.URI"
				},
				imageSize: {
					type: "sap.m.Size",
					defaultValue: "M"
				},
				userName: {
					type: "string"
				},
				userOrganization: {
					type: "string"
				},
				orientation: {
					type: "sap.ui.core.Orientation",
					defaultValue: "Horizontal"
				}
			},
			aggregations: {
				actions: {
					type: "sap.ui.core.Control",
					multiple: true,
					singularName: "action"
				},
				content: {
					type: "sap.ui.core.Control",
					multiple: true
				},
				contribution: {
					type: "sap.ui.core.Control",
					multiple: false
				},
				_nameLink: {
					type: "sap.m.Link",
					multiple: false,
					visibility: "hidden"
				},
				_organizationLabel: {
					type: "sap.m.Text",
					multiple: false,
					visibility: "hidden"
				},
				_userImage: {
					type: "sap.ui.core.Control",
					multiple: false,
					visibility: "hidden"
				}
			},
			events: {
				identityPress: {}
			},
			defaultAggregation: "content"
		},

		init: function() {

		},

		setUserImageUrl: function(sURL) {
			var oImgCtrl = this.getAggregation("_userImage");
			var oImg;
			if (oImgCtrl) {
				if (sURL && this.getProperty("userImageUrl") !== sURL) {
					oImg = new Image({
						src: sURL,
						decorative: true,
						press: this.fireNavigateToUser.bind(this)
					});
					oImg.addStyleClass("sapInoUserImage");
				} else if (!sURL && oImgCtrl.getMetadata().getName() === "sap.m.Image") {
					oImg = new Icon({
						src: "sap-icon://person-placeholder",
						decorative: true,
						useIconTooltip: false,
						press: this.fireNavigateToUser.bind(this)
					});
					oImg.addStyleClass("sapInoUserIcon");
				}
			} else {
				if (sURL) {
					oImg = new Image({
						src: sURL,
						decorative: true,
						press: this.fireNavigateToUser.bind(this)
					});
					oImg.addStyleClass("sapInoUserImage");
				} else {
					oImg = new Icon({
						src: "sap-icon://person-placeholder",
						decorative: true,
						useIconTooltip: false,
						press: this.fireNavigateToUser.bind(this)
					});
					oImg.addStyleClass("sapInoUserIcon");
				}
			}
			if (oImg) {
				this.setAggregation("_userImage", oImg);
			}
			this.setProperty("userImageUrl", sURL);
			return this;
		},

		setUserName: function(sUserName) {
			if (sUserName && this.getProperty("userName") !== sUserName && this.getIdentityId() !== 0) {
				this.setAggregation("_nameLink", new Link({
					text: sUserName,
					press: this.fireNavigateToUser.bind(this),
					wrapping: false
				}).setTooltip(sUserName));
			}
			this.setProperty("userName", sUserName);
			return this;
		},

		setUserOrganization: function(sOrganization) {
			if (sOrganization) {
				this.setAggregation("_organizationLabel", new Text({
					text: sOrganization,
					wrapping: true
				}));
			}
			this.setProperty("userOrganization", sOrganization);
			return this;
		},

		/**
		 * helper function that fires the identityPress event with parameters
		 */
		fireNavigateToUser: function(oEvent) {
			this.fireIdentityPress({
				identityId: this.getIdentityId(),
				actualSource: oEvent.getSource()
			});
			return this;
		},

		/**
		 * helper function that - if needed - lazily creates a user icon - only called from renderer
		 *
		 * @returns {Icon|Image}        the respective user icon/image
		 */
		getImageAggregation: function() {
			if (!this.getAggregation("_userImage")) {
				// lazily initializing the icon
				this.setUserImageUrl();
			}
			return this.getAggregation("_userImage");
		},

		renderer: function(oRM, oControl) {
			oRM.write("<div ");
			oRM.writeControlData(oControl);
			oRM.addClass("sapInoIdentityCard");
			if (oControl.getOrientation() === Orientation.Vertical) {
				oRM.addClass("sapInoIdentityCardVertical");
			} else {
				oRM.addClass("sapInoIdentityCardHorizontal");
			}
			oRM.writeClasses();

			//oRM.addStyle("width", oControl.getWidth());
			oRM.writeStyles();

			oRM.write(">");

			// image or icon
			var oImg = oControl.getImageAggregation();
			var sImageSize = oControl.getImageSize();
			if (sImageSize === Size.XS) {
				oImg.addStyleClass("sapInoUserImageXSmall");
			} else if (sImageSize === Size.S) {
			    oImg.addStyleClass("sapInoUserImageSmall");
			} else if (sImageSize === Size.L) {
				oImg.addStyleClass("sapInoUserImageLarge");
			} else {
				oImg.addStyleClass("sapInoUserImageMedium");
			}
			oRM.write("<div ");
			oRM.addClass("sapInoUserImageWrapper");
			oRM.writeClasses();
			oRM.write(">");
			oRM.renderControl(oImg);
			oRM.write("</div>");

			// the "meat"
			oRM.write("<div");
			oRM.addClass("sapInoUserContentWrapper");
			oRM.writeClasses();
			oRM.write(">");
			var oNameLink = oControl.getAggregation("_nameLink");
			if (oNameLink) {
				oRM.renderControl(oNameLink);
			}
			var oOrg = oControl.getAggregation("_organizationLabel");
			if (oOrg) {
				oRM.renderControl(oOrg);
			}

			var aContent = oControl.getContent();
			if (aContent && aContent.length > 0) {
				for (var i = 0; i < aContent.length; i = i + 1) {
					oRM.renderControl(aContent[i]);
				}
			}

			oRM.write("</div>");
			
			// actions
			var aActions = oControl.getActions();
			if (aActions && aActions.length > 0) {
				oRM.write("<div");
				oRM.addClass("sapInoUserActionWrapper");
				oRM.writeClasses();
				oRM.write(">");
				//Add DIV to include all btns
				oRM.write("<div");
				oRM.addClass("sapInoActionBtnWrapper");
				oRM.writeClasses();
				oRM.write(">");
				for (i = 0; i < aActions.length; i = i + 1) {
					oRM.renderControl(aActions[i]);
				}
				oRM.write("</div>");
            //Add Contribution
			var oContribution = oControl.getAggregation("contribution");
			 if(oContribution)
			  {	
			    oRM.renderControl(oContribution);
			    
			  }
				oRM.write("</div>");
			}
			oRM.write("</div>");
		},

		onAfterRendering: function() {
			// we need to manually remove the tabindex 0, as this is set due to the press listener
			// but it does not make sense to make it tabable additionally to the link
			var oImg = this.getImageAggregation();
			if (oImg) {
				oImg.$().attr("tabindex", "-1");
			}
		}

	});

	return IdentityCard;
});
}; // end of sap/ino/controls/IdentityCard.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.ImageCropping') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.ImageCropping'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.base.security.sanitizeHTML'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/ImageCropping",[
    "sap/ui/core/Control",
    "sap/m/Button",
    "sap/ui/Device",
	"sap/base/security/sanitizeHTML"
], function(Control, Button, Device, sanitizeHTML) {
    "use strict";

    /**
     * 
     * An image cropping control to crop an image with mouse and keyboard support. Use function crop() to retrieve the
     * cropped image as file.
     * 
     * <ul>
     * <li>Properties
     * <ul>
     * <li>url: url to the image to be cropped</li>
     * <li>width: width of the control</li>
     * <li>height: height of the control</li>
     * <li>showZoom: show zoom controls</li>
     * <li>showMove: show move controls</li>
     * <li>showClear: show clear control</li>
     * <li>showCrop: show crop control</li>
     * <li>zoomStep: zoom step size for zoom buttons</li>
     * <li>moveStep: move step size for move buttons</li>
     * </ul>
     * </li>
     * <li>Aggregations
     * <ul>
     * </ul>
     * </li>
     * <li>Events
     * <ul>
     * <li>clear: event is thrown when the clear button was pressed</li>
     * <li>crop: event is thrown when the crop button was pressed, the cropped image file is passed as parameter</li>
     * </ul>
     * </li>
     * <li>Methods
     * <ul>
     * <li>crop: returns the cropped image based</li>
     * </ul>
     * </li>
     * </ul>
     */
    return Control.extend("sap.ino.controls.ImageCropping", {
        metadata : {
            properties : {
                url : {
                    type : "string"
                },
                width : {
                    type : "sap.ui.core.CSSSize",
                    defaultValue : "216px"
                },
                height : {
                    type : "sap.ui.core.CSSSize",
                    defaultValue : "121px"
                },
                showZoom : {
                    type : "boolean",
                    defaultValue : true
                },
                showMove : {
                    type : "boolean",
                    defaultValue : false
                },
                showClear : {
                    type : "boolean",
                    defaultValue : false
                },
                showCrop : {
                    type : "boolean",
                    defaultValue : false
                },
                zoomStep : {
                    type : "int",
                    defaultValue : 1
                },
                moveStep : {
                    type : "int",
                    defaultValue : 1
                },
                enabled : {
                    type : "boolean",
                    defaultValue : true
                }
            },
            aggregations : {
                "_zoomPlusButton" : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                },
                "_zoomMinusButton" : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                },
                "_moveUpButton" : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                },
                "_moveDownButton" : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                },
                "_moveLeftButton" : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                },
                "_moveRightButton" : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                },
                "_clearButton" : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                },
                "_cropButton" : {
                    type : "sap.m.Button",
                    multiple : false,
                    visibility : "hidden"
                }
            },
            events : {
                clear : {},
                crop : {},
                cropImg: {}
            }
        },

        init : function() {
            this._oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ino.controls");
            this._bImgLoaded = false;
        },

        renderer : function(oRM, oControl) {
            oRM.write("<div");
            oRM.writeControlData(oControl);
            oRM.addClass("sapInoImageCrop");
            oRM.writeClasses();

            oRM.addStyle("width", sanitizeHTML(oControl.getWidth()));
            oRM.addStyle("height", sanitizeHTML(oControl.getHeight()));
            oRM.writeStyles();

            oRM.write(">");

            if (oControl.getUrl()) {

                oRM.write("<div");
                oRM.writeAttributeEscaped("tabindex", "0");
                oRM.writeAttributeEscaped("title", oControl._oRB.getText("IMAGE_CROP_DETAIL"));
                oRM.addClass("sapInoImageCropImageContainer");
                oRM.addClass("sapInoImageCropImageContainerHidden");
                if (!oControl.getEnabled()) {
                    oRM.addClass("sapInoImageCropImageContainerDisabled");
                }
                oRM.writeClasses();
                oRM.write(">");

                oRM.write("<img");
                oRM.writeAttributeEscaped("src", oControl.getUrl());
                oRM.writeAttributeEscaped("title", oControl._oRB.getText("IMAGE_CROP_DETAIL"));
                oRM.addClass("sapInoImageCropImage");
                oRM.writeClasses();
                oRM.write("></img>");

                oRM.write("</div>");
                
                if (oControl.getEnabled()) {
                    if (oControl.getShowZoom()) {
                        oRM.renderControl(oControl.getZoomPlusButton());
                        oRM.renderControl(oControl.getZoomMinusButton());
                    }
                    if (oControl.getShowMove()) {
                        oRM.renderControl(oControl.getMoveUpButton());
                        oRM.renderControl(oControl.getMoveDownButton());
                        oRM.renderControl(oControl.getMoveLeftButton());
                        oRM.renderControl(oControl.getMoveRightButton());
                    }
                    if (oControl.getShowClear()) {
                        oRM.renderControl(oControl.getClearButton());
                    }
                    if (oControl.getShowCrop()) {
                        oRM.renderControl(oControl.getCropButton());
                    }
                }
            }

            oRM.write("</div>");
        },

        onAfterRendering : function() {
            var oImg = this.cropImage();
            if (oImg) {
                var that = this;
                oImg.onload = function() {
                    that.cropInit();
                    jQuery(that.cropImageContainer()).removeClass("sapInoImageCropImageContainerHidden");
                    that._bImgLoaded = true;
                };
                
                if(this._bImgLoaded){
                    jQuery(this.cropImageContainer()).removeClass("sapInoImageCropImageContainerHidden");
                }
            }
        },

        setFocus : function() {
            if (this.cropImage()) {
                jQuery(this.cropImage()).parent().focus();
            }
        },

        getZoomPlusButton : function() {
            var that = this;
            var oZoomPlusButton = this.getAggregation("_zoomPlusButton");
            if (!oZoomPlusButton) {
                oZoomPlusButton = new Button({
                    icon : "sap-icon://zoom-in",
                    tooltip : this._oRB.getText("IMAGE_CROP_ZOOM_PLUS"),
                    press : function(oEvent) {
                        oEvent.cancelBubble();
                        oEvent.preventDefault();
                        that.cropZoom(that.getZoomStep());
                        that.getFocusDomRef().focus();
                    },
                    enabled : false
                }).addStyleClass("sapInoImageCropButton").addStyleClass("sapInoImageCropZoomPlus");
                this.setAggregation("_zoomPlusButton", oZoomPlusButton);
            }
            return oZoomPlusButton;
        },

        getZoomMinusButton : function() {
            var that = this;
            var oZoomMinusButton = this.getAggregation("_zoomMinusButton");
            if (!oZoomMinusButton) {
                oZoomMinusButton = new Button({
                    icon : "sap-icon://zoom-out",
                    tooltip : this._oRB.getText("IMAGE_CROP_ZOOM_MINUS"),
                    press : function(oEvent) {
                        oEvent.cancelBubble();
                        oEvent.preventDefault();
                        that.cropZoom(-that.getZoomStep());
                        that.getFocusDomRef().focus();
                    },
                    enabled : false
                }).addStyleClass("sapInoImageCropButton").addStyleClass("sapInoImageCropZoomMinus");
                this.setAggregation("_zoomMinusButton", oZoomMinusButton);
            }
            return oZoomMinusButton;
        },

        getMoveUpButton : function() {
            var that = this;
            var oMoveUpButton = this.getAggregation("_moveUpButton");
            if (!oMoveUpButton) {
                oMoveUpButton = new Button({
                    icon : "sap-icon://slim-arrow-up",
                    tooltip : this._oRB.getText("IMAGE_CROP_MOVE_UP"),
                    press : function(oEvent) {
                        oEvent.cancelBubble();
                        oEvent.preventDefault();
                        that.cropMoveBy(0, -that.getMoveStep());
                        that.getFocusDomRef().focus();
                    },
                    enabled : false
                }).addStyleClass("sapInoImageCropButton").addStyleClass("sapInoImageCropMoveUp");
                this.setAggregation("_moveUpButton", oMoveUpButton);
            }
            return oMoveUpButton;
        },

        getMoveDownButton : function() {
            var that = this;
            var oMoveDownButton = this.getAggregation("_moveDownButton");
            if (!oMoveDownButton) {
                oMoveDownButton = new Button({
                    icon : "sap-icon://slim-arrow-down",
                    tooltip : this._oRB.getText("IMAGE_CROP_MOVE_DOWN"),
                    press : function(oEvent) {
                        oEvent.cancelBubble();
                        oEvent.preventDefault();
                        that.cropMoveBy(0, that.getMoveStep());
                        that.getFocusDomRef().focus();
                    },
                    enabled : false
                }).addStyleClass("sapInoImageCropButton").addStyleClass("sapInoImageCropMoveDown");
                this.setAggregation("_moveDownButton", oMoveDownButton);
            }
            return oMoveDownButton;
        },

        getMoveLeftButton : function() {
            var that = this;
            var oMoveLeftButton = this.getAggregation("_moveLeftButton");
            if (!oMoveLeftButton) {
                oMoveLeftButton = new Button({
                    icon : "sap-icon://slim-arrow-left",
                    tooltip : this._oRB.getText("IMAGE_CROP_MOVE_LEFT"),
                    press : function(oEvent) {
                        oEvent.cancelBubble();
                        oEvent.preventDefault();
                        that.cropMoveBy(-that.getMoveStep(), 0);
                        that.getFocusDomRef().focus();
                    },
                    enabled : false
                }).addStyleClass("sapInoImageCropButton").addStyleClass("sapInoImageCropMoveLeft");
                this.setAggregation("_moveLeftButton", oMoveLeftButton);
            }
            return oMoveLeftButton;
        },

        getMoveRightButton : function() {
            var that = this;
            var oMoveRightButton = this.getAggregation("_moveRightButton");
            if (!oMoveRightButton) {
                oMoveRightButton = new Button({
                    icon : "sap-icon://slim-arrow-right",
                    tooltip : this._oRB.getText("IMAGE_CROP_MOVE_RIGHT"),
                    press : function(oEvent) {
                        oEvent.cancelBubble();
                        oEvent.preventDefault();
                        that.cropMoveBy(that.getMoveStep(), 0);
                        that.getFocusDomRef().focus();
                    },
                    enabled : false
                }).addStyleClass("sapInoImageCropButton").addStyleClass("sapInoImageCropMoveRight");
                this.setAggregation("_moveRightButton", oMoveRightButton);
            }
            return oMoveRightButton;
        },
        
        getClearButton : function() {
            var that = this;
            var oClearButton = this.getAggregation("_clearButton");
            if (!oClearButton) {
                oClearButton = new Button({
                    icon : "sap-icon://sys-cancel",
                    tooltip : this._oRB.getText("IMAGE_CROP_CLEAR"),
                    press : function(oEvent) {
                        oEvent.cancelBubble();
                        oEvent.preventDefault();
                        that.fireClear();
                        that.getFocusDomRef().focus();
                    },
                    enabled : true
                }).addStyleClass("sapInoImageCropButton").addStyleClass("sapInoImageCropClear");
                this.setAggregation("_clearButton", oClearButton);
            }
            return oClearButton;
        },
        
        getCropButton : function() {
            var that = this;
            var oCropButton = this.getAggregation("_cropButton");
            if (!oCropButton) {
                oCropButton = new Button({
                    icon : "sap-icon://crop",
                    tooltip : this._oRB.getText("IMAGE_CROP_CROP"),
                    press : function(oEvent) {
                        oEvent.cancelBubble();
                        oEvent.preventDefault();
                        that.fireCropImg();
                        that.getFocusDomRef().focus();
                    },
                    enabled : false
                }).addStyleClass("sapInoImageCropButton").addStyleClass("sapInoImageCropCrop");
                this.setAggregation("_cropButton", oCropButton);
            }
            return oCropButton;
        },

        cropInit : function(bSupressInitImage) {
            this.cropInitMove();
            this.cropInitScrollZoom();
            if (!bSupressInitImage) {
                this.cropInitImage();
            }
            this.cropCheckButtons();
        },

        cropImageContainer : function() {
            return jQuery(this.getDomRef()).find(".sapInoImageCropImageContainer")[0];
        },

        cropImage : function() {
            return jQuery(this.getDomRef()).find(".sapInoImageCropImage")[0];
        },

        cropInitImage : function() {
            var oImg = this.cropImage();
            var jDom = jQuery(this.getDomRef());
            var ratio = oImg.naturalWidth / oImg.naturalHeight;
            var zoomX = jDom.width() - oImg.naturalWidth;
            var zoomY = jDom.height() - oImg.naturalHeight;
            var dx = zoomX > zoomY * ratio ? zoomX : zoomY * ratio;
            this.cropZoomBy(dx);
            jQuery(oImg).css({
                "left" : 0,
                "top" : 0,
                "position" : "relative"
            });
        },

        cropInitMove : function() {
            if (!this.getEnabled()) {
                return;
            }
            var that = this;
            var oImg = this.cropImage();
            var jImg = jQuery(oImg);
            // Desktop Mouse
            jImg.on("mousedown", function(e) {
                e.preventDefault();
                var posX = jImg.offset().left - e.pageX;
                var posY = jImg.offset().top - e.pageY;
                jImg.on("mousemove", function(e) {
                    that.cropMoveAt(posX + e.pageX, posY + e.pageY);
                });
            }).on("mouseup", function() {
                jImg.off("mousemove");
            }).on("mouseout", function() {
                jImg.off("mousemove");
            });
            // Mobile Touch
            jImg.on("touchstart", function(e) {
                e.preventDefault();
                if (e.touches && e.touches.length > 0) {
                    var t = e.touches[0];
                    var posX = jImg.offset().left - t.pageX;
                    var posY = jImg.offset().top - t.pageY;
                    var dist = -1;
                    jImg.on("touchmove", function(e) {
                        if (e.touches && e.touches.length > 0) {
                            if (e.touches.length == 2) {
                                var t1 = e.touches[0];
                                var t2 = e.touches[1];
                                var newDist = Math.sqrt(Math.pow(t1.pageX - t2.pageX, 2) + Math.pow(t1.pageY - t2.pageY, 2));
                                if (dist > 0) {
                                    that.cropZoomBy(newDist - dist);
                                }
                                dist = newDist;
                            } else {
                                var t = e.touches[0];
                                that.cropMoveAt(posX + t.pageX, posY + t.pageY);
                            }
                        }
                    });
                }
            }).on("touchend", function() {
                jImg.off("touchmove");
            });
        },

        cropInitScrollZoom : function() {
            if (!this.getEnabled()) {
                return;
            }
            var that = this;
            var oImg = this.cropImage();
            var jImg = jQuery(oImg);
            jImg.parent().bind("wheel mousewheel", function(e) {
                if (e.originalEvent.deltaY > 0) {
                    that.cropZoom(-1.0);
                } else {
                    that.cropZoom(1.0);
                }
                e.originalEvent.preventDefault();
                e.originalEvent.stopPropagation();
                e.originalEvent.stopImmediatePropagation();
                return false;
            });
        },

        onkeydown : function(oEvent) {
            if (!this.getEnabled()) {
                return;
            }
            var bStopBubble = true;
            switch (oEvent.keyCode) {
                case jQuery.sap.KeyCodes.ARROW_LEFT :
                    this.cropMoveBy(-1, 0);
                    break;
                case jQuery.sap.KeyCodes.ARROW_UP :
                    this.cropMoveBy(0, -1);
                    break;
                case jQuery.sap.KeyCodes.ARROW_RIGHT :
                    this.cropMoveBy(1, 0);
                    break;
                case jQuery.sap.KeyCodes.ARROW_DOWN :
                    this.cropMoveBy(0, 1);
                    break;
                case jQuery.sap.KeyCodes.PLUS :
                case jQuery.sap.KeyCodes.NUMPAD_PLUS :
                case 171 : // Firefox: PLUS (no constant)
                    this.cropZoom(1.0);
                    break;
                case jQuery.sap.KeyCodes.SLASH :
                case jQuery.sap.KeyCodes.MINUS :
                case jQuery.sap.KeyCodes.NUMPAD_MINUS :
                case 173 : // Firefox: MINUS (no constant)
                    this.cropZoom(-1.0);
                    break;
                default :
                    bStopBubble = false;
                    break;
            }
            if (bStopBubble) {
                oEvent.preventDefault();
                oEvent.stopPropagation();
                oEvent.stopImmediatePropagation();
            }
        },

        cropCheckButtons : function() {
            if (!this.getEnabled()) {
                return;
            }
            var jImg = jQuery(this.cropImage());
            var jDom = jQuery(this.getDomRef());
            var maxLeft = -(jImg.width() - jDom.width());
            var maxTop = -(jImg.height() - jDom.height());
            var left = parseInt(jImg.css("left"), 10);
            var top = parseInt(jImg.css("top"), 10);

            if (this.getAggregation("_zoomPlusButton")) {
                this.getAggregation("_zoomPlusButton").setEnabled(true);
            }
            if (this.getAggregation("_zoomMinusButton")) {
                this.getAggregation("_zoomMinusButton").setEnabled(jImg.width() > jDom.width() && jImg.height() > jDom.height());
            }
            if (this.getAggregation("_moveUpButton")) {
                this.getAggregation("_moveUpButton").setEnabled(top > maxTop);
            }
            if (this.getAggregation("_moveDownButton")) {
                this.getAggregation("_moveDownButton").setEnabled(top < 0);
            }
            if (this.getAggregation("_moveLeftButton")) {
                this.getAggregation("_moveLeftButton").setEnabled(left > maxLeft);
            }
            if (this.getAggregation("_moveRightButton")) {
                this.getAggregation("_moveRightButton").setEnabled(left < 0);
            }
            if (this.getAggregation("_cropButton")) {
                this.getAggregation("_cropButton").setEnabled(jImg.width() !== jDom.width() || jImg.height() !== jDom.height());
            }
        },

        cropMoveAt : function(x, y) {
            if (!this.getEnabled()) {
                return;
            }
            var oImg = this.cropImage();
            var jImg = jQuery(oImg);
            var jDom = jQuery(this.getDomRef());
            jImg.offset({
                left : x,
                top : y
            });
            var maxLeft = -(jImg.width() - jDom.width());
            var maxTop = -(jImg.height() - jDom.height());
            var left = parseInt(jImg.css("left"), 10);
            var top = parseInt(jImg.css("top"), 10);
            if (top > 0) {
                jImg.css("top", 0);
            }
            if (top < maxTop) {
                jImg.css("top", maxTop);
            }
            if (left > 0) {
                jImg.css("left", 0);
            }
            if (left < maxLeft) {
                jImg.css("left", maxLeft);
            }
            this.cropCheckButtons();
        },

        cropMoveBy : function(dx, dy) {
            if (!this.getEnabled()) {
                return;
            }
            var oImg = this.cropImage();
            var pos = jQuery(oImg).offset();
            this.cropMoveAt(pos.left + dx, pos.top + dy);
        },

        cropZoom : function(factor) {
            if (!this.getEnabled()) {
                return;
            }
            this.cropZoomBy(10.0 * (factor || 1.0));
        },

        cropZoomBy : function(dx) {
            if (!this.getEnabled()) {
                return;
            }
            var oImg = this.cropImage();
            var jImg = jQuery(oImg);
            var jDom = jQuery(this.getDomRef());
            var ratio = jImg.width() / jImg.height();
            var newWidth = jImg.width() + dx;
            var newHeight = newWidth / ratio;
            if (newWidth < jDom.width() || newHeight < jDom.height()) {
                if (newWidth - jDom.width() < newHeight - jDom.height()) {
                    newWidth = jDom.width();
                    newHeight = newWidth / ratio;
                } else {
                    newHeight = jDom.height();
                    newWidth = ratio * newHeight;
                }
            }
            jImg.width(newWidth);
            jImg.height(newHeight);
            var pos = jImg.offset();
            this.cropMoveAt(pos.left - dx / 2.0, pos.top - dx / 2.0);
            this.cropCheckButtons();
        },

        crop : function() {
            var that = this;
            var oImg = this.cropImage();
            if (oImg) {
                var jImg = jQuery(oImg);
                var jDom = jQuery(this.getDomRef());
                if (jImg.width() !== jDom.width() || jImg.height() !== jDom.height()) {
                    var oCanvas = document.createElement("canvas");
                    var oContext = oCanvas.getContext("2d");
                    oContext.mozImageSmoothingEnabled = true;
                    oContext.webkitImageSmoothingEnabled = true;
                    oContext.msImageSmoothingEnabled = true;
                    oContext.imageSmoothingEnabled = true;

                    oCanvas.width = jDom.width();
                    oCanvas.height = jDom.height();

                    oContext.fillStyle = "#FFFFFF";
                    oContext.fillRect(0, 0, oCanvas.width, oCanvas.height);

                    // Safari has issues when sx + swidth > naturalWidth or sy + sheight > naturalHeight
                    // This happens when the image was zoomed and the cropped area is outside of the natural size
                    // bounds in the zoomed image:
                    // To fix this the following is performed on the width and heights
                    // - Current image left position (originalLeft) is substracted from width
                    // - Current image top position (originalTop) is substracted from height
                    // - Relative image left position to natural (left) is substracted from swidth
                    // - Relative image top position to natural (top) is substracted from swidth
                    var originalLeft = Math.abs(parseInt(jImg.css("left"), 10));
                    var originalTop = Math.abs(parseInt(jImg.css("top"), 10));
                    var left = originalLeft * (oImg.naturalWidth / jImg.width());
                    var top = originalTop * (oImg.naturalHeight / jImg.height());

                    var width = oImg.naturalWidth;
                    var height = oImg.naturalHeight;

                    this.cropDrawImage(oContext, oImg, left, top, width - left, height - top, 0, 0, jImg.width() - originalLeft, jImg.height() - originalTop);
                    var sCropImageUrl = oCanvas.toDataURL();

                    var aBlobBin = atob(sCropImageUrl.split(",")[1]);
                    var aArray = [];
                    for (var i = 0; i < aBlobBin.length; i++) {
                        aArray.push(aBlobBin.charCodeAt(i));
                    }
                    var oFile = new Blob([new Uint8Array(aArray)], {
                        type : "image/png",
                        name : "image.png"
                    });

                    return oFile;
                }
            }
            return null;
        },

        cropCalcVerticalRatio : function(oImg) {
            if (!Device.os.ios) {
                return 1.0;
            }
            // iOS does not draw images in correct ratio on canvas => calculate correct vertical ratio
            var iNaturalHeight = oImg.naturalHeight;
            var oCanvas = document.createElement("canvas");
            oCanvas.width = 1.0;
            oCanvas.height = iNaturalHeight;
            var oContext = oCanvas.getContext("2d");
            oContext.drawImage(oImg, 0, 0);
            var aData = oContext.getImageData(0, 0, 1, iNaturalHeight).data;
            var iStartY = 0;
            var iCurrentY = iNaturalHeight;
            var iPointY = iNaturalHeight;
            while (iPointY > iStartY) {
                var fAlpha = aData[(iPointY - 1) * 4 + 3];
                if (fAlpha === 0) {
                    iCurrentY = iPointY;
                } else {
                    iStartY = iPointY;
                }
                iPointY = (iCurrentY + iStartY) >> 1;
            }
            var fRatio = (iPointY / iNaturalHeight);
            return (fRatio === 0) ? 1.0 : fRatio;
        },

        cropDrawImage : function(context, img, sx, sy, swidth, sheight, x, y, width, height) {
            var fVerticalRatio = 1.0; // this.cropCalcVerticalRatio(img); iOS Bug - already fixed
            context.drawImage(img, sx * fVerticalRatio, sy * fVerticalRatio, swidth * fVerticalRatio, sheight * fVerticalRatio, x, y, width, height);
        }
    });
});
}; // end of sap/ino/controls/ImageCropping.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.LabelledIcon') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.LabelledIcon'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Icon'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.HBox'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/LabelledIcon",[
    "sap/ui/core/Control",
    "sap/ui/core/Icon",
    "sap/m/Text",
    "sap/m/HBox"
], function (Control,
             Icon,
             Text,
             HBox) {
    "use strict";

    /**
     *
     * The LabelledIcon is a composition of an icon with a label, where the icon apepars on the left and
     * the labelling text on the right hand side.
     *
     * <ul>
     * <li>Properties
     * <ul>
     * <li>iconUrl: URL of the icon</li>
     * <li>label: text of the label</li>
     * </ul>
     * </li>
     * <li>Aggregations
     * <ul>
     * <li> _box: the horizontal box that holds the icon and label</li>
     * </ul>
     * </li>
     * </ul>
     */
    var LabelledIcon = Control.extend("sap.ino.controls.LabelledIcon", {
        metadata: {
            properties: {
                "iconUrl": {
                    type: "string"
                },
                "label": {
                    type: "string"
                },
                "exportLabel": {
                    type: "string"
                }
            },
            
            aggregations: {
                "_box": {
                    type: "sap.m.HBox",
                    multiple: false,
                    visibility: "hidden"
                },
                "_exportText": {
                    type: "sap.m.Text",
                    multiple: false,
                    visibility: "hidden"
                }
			}
        },
        
        init: function () {
            this._oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ino.controls");
        },
        
        _getIcon: function() {
            return this._getBox().getItems()[0];
		},
		
		_getLabel: function() {
            return this._getBox().getItems()[1];
		},
		
		_getExportLabel: function() {
		    var oExportText = this.getAggregation("_exportText");
		    if (!oExportText) {
		        oExportText = new Text({
		            text: this.getExportLabel(),
                    wrapping: false
		        });
		        this.setAggregation("_exportText", oExportText);
		    }
		    return oExportText;
        },
		
		_getBox: function() {
            var oBox = this.getAggregation("_box");
            if (!oBox) {
                var oIcon = new Icon({
                    src: this.getIconUrl(),
                    useIconTooltip: false
                }).addStyleClass("sapInoLabelledIconIcon");
                var oText = new Text({
                    text: this.getLabel(),
                    wrapping: false,
                }).addStyleClass("sapInoLabelledIconLabel");
                oBox = new HBox({
                    items: [oIcon, oText],
                    displayInline: true
                });                
                this.setAggregation("_box", oBox, true);
            }
            return oBox;
		},
                
        renderer: function (oRM, oControl) {
            oRM.write("<div");
			oRM.writeControlData(oControl);
			oRM.addClass("sapInoLabelledIcon");
			oRM.writeClasses();
			if (oControl.getTooltip_Text()) {
			    oRM.writeAttributeEscaped("title", oControl.getTooltip_Text());
			}
			oRM.write(">");
			
            oRM.renderControl(oControl._getBox());
            
            oRM.write("</div>");
        }
    });
    
    LabelledIcon.prototype.onAfterRendering = function() {
        this._getLabel().data(this.data());
        this._getExportLabel().data(this.data());
    };
    
    LabelledIcon.prototype.bindProperty = function (sKey, oBinding) {
        Control.prototype.bindProperty.apply(this, arguments);
        switch (sKey) {
            case "label":
                this._getLabel().bindProperty("text", oBinding);
                break;
            case "exportLabel":
                this._getExportLabel().bindProperty("text", oBinding);
                break;
            default:
                break;
        }
    };
    
    LabelledIcon.prototype.setIconUrl = function (oValue) {
        this.setProperty("iconUrl", oValue);
        this._getIcon().setSrc(oValue);
    };
    
    LabelledIcon.prototype.setLabel = function (oValue) {
        this.setProperty("label", oValue);
        this._getLabel().setText(oValue);
    };
    
    LabelledIcon.prototype.setExportLabel = function (oValue) {
        this.setProperty("exportLabel", oValue);

    };
    
    return LabelledIcon;
});
}; // end of sap/ino/controls/LabelledIcon.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.ListBox') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.ListBox'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.commons.ListBox'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/ListBox",[
	"sap/ui/commons/ListBox"
], function(ListBox) {
	"use strict";
	/**
	 * Works similar to sap.ui.commons.ListBox without the need of pressing the ctrl key in case of multiselect
	 *
	 * @see sap.ui.commons.ListBox
	 */

	return ListBox.extend("sap.ino.controls.ListBox", {
		_handleUserActivationPlain: function(iIndex, oItem) {
			if (this.getAllowMultiSelect()) {
				this._handleUserActivationCtrl(iIndex, oItem);
			} else {
				ListBox.prototype._handleUserActivationPlain.apply(this, [iIndex, oItem]);
			}
		},

		renderer: "sap.ui.commons.ListBoxRenderer"
	});
});
}; // end of sap/ino/controls/ListBox.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.Milestone') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.Milestone'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/Milestone",[
    "sap/ui/core/Control",
    "sap/ui/thirdparty/d3"
],function(Control, d3) {
    'use strict';
    return Control.extend("sap.ino.controls.Milestone", {
        metadata: {
            properties: {
                "Id": {
                    type: "int"
                },
                "tasks": {
                    type: "array"
                },
                "visible": {
                    type: "boolean"
                },
                "max-point": {
                    type: 'int'   
                }
            },
            aggregations: {
                
            },
            events: {
                
            }
        },
        init: function() {
             this._oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ino.controls");
        },
        
        controlConfig: {
            // it's the milestone default setting .
            width: '900',
            height:'300',
            maxPoints: 2,
            defaultThemeColor:'E50082',
            defaultFontColor: '666666',
            fontSizeX: 14,
            fontSizeM: 12,
            fontSizeS: 10,
            defaultBarColor: '5f95c2',
            defaultBgColor: 'f3f3f3',
            barHeight: 20,
            gap: 60,
            topPadding: 5,
            bottomPadding: 15,
            sidePadding: 150,
            outPadding: 200,
            labelMaxLength: 18,
            milestoneMaxLength: 220,
            milestoneNameMaxFactorLength: 30,
            minWidth: 768,
            normalWidth :800
        },
    
        nowTime:  new Date().getTime(),
        
        onAfterRendering: function(){
            // milestone 
            this.handleInfinity();
            this.dataMixin();
            this.resetting();
            this.initSVG();
            this.drawMileStone();
        },
        
        resetting: function(){
            $.extend(this.controlConfig, {
                width: this.getParent().$().width() * 0.95,
                height: this.getProperty('tasks') && this.getProperty('tasks').length * 100 + 10
            });
        },
        
        initSVG: function(){
            var tasks = this.getProperty('tasks');
            if(this.controlConfig.width < this.controlConfig.minWidth){
                return d3.selectAll(".mile-stone-svg").style({'display':'none'});
            }
            this.svg = d3.selectAll(".mile-stone-svg")
                .style({'display': 'block'})
                .append("svg")
                .attr("width", this.controlConfig.width)
                .attr("height", this.controlConfig.height)
                .attr("class", "svg-content");
            this.timeScale = d3.time.scale()
                .domain([d3.min(tasks, function(d) { 
                            return d.START_DATE; }),
                        d3.max(tasks, function(d) { 
                            return d.END_DATE; })
                ])
                .range([0, this.controlConfig.width - this.controlConfig.outPadding]);
        },
        
        _mileStoneMerge: function(scope){
            //prototype of milestone merge point 
            this.MILESTONE_NAME = '...';
            this.MILESTONE_DATE = undefined;
            this.MILESTONE_MERGE = [];
            this.MILESTONE_COLOR_CODE = scope.controlConfig.defaultThemeColor;
            this.MILESTONE_IS_MERGE = true;
            this.IS_MILESTONE_DISPLAY = true;
        },
        
        _timeSort: function(a, b){
            return a.MILESTONE_DATE.getTime() - b.MILESTONE_DATE.getTime();
        },

        _isClean: function(task){
            return task.END_DATE.getFullYear() < 9999;
        },

        _isInfinity: function(task){
            return task.END_DATE.getFullYear() === 9999;
        },

        _isShowTask: function(task){
            return !!task.IS_TASK_DISPLAY;
        },

        _isShowMilestone: function(milestone){
              return !!milestone.IS_MILESTONE_DISPLAY;
        },

        handleInfinity: function(){
            var self = this;
            // read source data ;
            var source = this.getProperty('tasks') && this.getProperty('tasks').sort(function(a,b){return a.SEQUENCE_NO - b.SEQUENCE_NO;});
            // clean data , remove not display task ;
            var tasks = source.filter(this._isShowTask);
            if(!tasks && !tasks.length){
                return false;
            }
            tasks.forEach(function(item){
                // clean data, remove not display milestone.
                item.Milestones = item.Milestones.filter(self._isShowMilestone);
            });
            
            // filter normal task group ;
            var cleanGroup = tasks.filter(this._isClean);
            // filter infinity task group ;
            var infinityGroup = tasks.filter(this._isInfinity);
            var allMilestone = [], buildTask = [];
            var now = new Date(this.nowTime);
            
            // if infinity group does not exist , return source data ;
            if(!infinityGroup || !infinityGroup.length){
                return this.setProperty('tasks', tasks);
            }
            tasks.forEach(function(value){
                // group all milestone .
                allMilestone = allMilestone.concat(value.Milestones);
            });
            
            // select max time of all milestones ;
            var maxMilestone = allMilestone.length && d3.max(allMilestone, function(v) { return v.MILESTONE_DATE;});
            
            // select max time of task end date ;
            var maxTaskEndDate = cleanGroup && cleanGroup.length && d3.max(cleanGroup, function(v) { return v.END_DATE;});
            
            // Replace infinity date of infinity gourp ;
            infinityGroup.forEach(function(value){
                if(!maxMilestone && !maxMilestone){
                    value.END_DATE = new Date(now.getFullYear() + 1, now.getMonth(), now.getDate());
                }
                if(maxMilestone && maxTaskEndDate){
                    var maxEndDate = maxMilestone.getTime() > maxTaskEndDate.getTime() ?  maxMilestone : maxTaskEndDate;
                    value.END_DATE = new Date(maxEndDate);
                }
                if(maxMilestone && !maxTaskEndDate){
                    value.END_DATE = new Date( maxMilestone.getTime() * 1.01);
                }
                if(!maxMilestone && maxTaskEndDate){
                    value.END_DATE = new Date( maxTaskEndDate.getTime() * 1.01);
                }
                value.IS_INFINITY = true;
            });
            
            // build clean group and infinity group ;
            buildTask = cleanGroup.concat(infinityGroup);
            
            this.setProperty('tasks', buildTask.sort(function(a,b){return a.SEQUENCE_NO - b.SEQUENCE_NO;}));
        },

        dataMixin: function(){
            var source = this.getProperty('tasks');
            if(!source){
                return false ;
            }
            // var self = this;
            var now = this.nowTime, task, point, nextPoint, prePoint;
            var maxPoints = this.controlConfig.maxPoints;
            var config = this.controlConfig;
            for(var i = 0; i < source.length; i++){
                task = source[i];
                task.TASK_INDEX = i;
                task.LINEGAP = 0;
                task.left = [];
                task.right = [];
                this.getTemplateText(task);
                if(!task.Milestones || !task.Milestones.length){
                    continue;
                }
                task.Milestones.sort(this._timeSort);
                for(var x = 0; x < task.Milestones.length; x++){
                    point = task.Milestones[x];
                    nextPoint = task.Milestones[x + 1];
                    prePoint = task.Milestones[x - 1];
                    
                    point.INDEX = i;
                    point.yAxis = 0;
                    if(point.MILESTONE_IS_MERGE){
                        task.HAS_MERGE = true;
                    }
                    if(nextPoint){
                        point.NEXT = nextPoint.MILESTONE_DATE;    
                    }else{
                        point.NEXT = task.END_DATE;
                    }
                    if(prePoint){
                        point.PRE = prePoint.MILESTONE_DATE;    
                    }else{
                        point.PRE = task.START_DATE;
                    }
                    
                    // if milestone color is not defined . set default color . 
                    if(!point.MILESTONE_COLOR_CODE){
                        point.MILESTONE_COLOR_CODE = config.defaultThemeColor;    
                    }
                    
                    // spite today brefore and today after ;
                    if(point.MILESTONE_DATE.getTime() <= now ){
                        task.left.push(point);
                    }
                    if(point.MILESTONE_DATE.getTime() > now){
                        task.right.push(point);
                    }
                }
                // if milestones number of task  greater than max point number , then merge point .
                if(task.left.length > maxPoints && !task.HAS_MERGE){
                    this._mergeToLeft(task.left);
                }
                if(task.right.length > maxPoints  && !task.HAS_MERGE){
                    this._mergeToRight(task.right);
                }
    
                // build today before group and today after group;
                task.Milestones = task.left.concat(task.right);
            }
            this.setProperty('tasks', source);
        },
        
        getTemplateText: function(task){
            if(!task){
                return false;
            }
            var self = this;
            $.extend(task, {
                TEMPLATE_TEXT:{
                    TASK: self._oRB.getText('MILESTONE_TASK'),
                    START: self._oRB.getText('MILESTONE_START'),
                    END: self._oRB.getText('MILESTONE_END'),
                    INFINITY: self._oRB.getText('MILESTONE_INFINITY')
                }
            });
        },
        
        _mergeToLeft: function(arr){
            if(!arr) {
                return false ;
            }
            // create a merge milestone point ;
            var left = new this._mileStoneMerge(this);
            var taskIndex = arr[0].INDEX;
            var maxPoints = this.controlConfig.maxPoints;
            var taskArray = this.getProperty('tasks');
            for(var i = 0; i < arr.length; i ++ ){
                // push merge milestone to merge milestone point . 
                if(i < arr.length - maxPoints){
                    left.MILESTONE_MERGE.push(arr[i]);    
                }
            }
            // set merge milestone point date .
            left.MILESTONE_DATE = taskArray[taskIndex].START_DATE;
            left.INDEX = taskIndex;
            left.NEXT = taskArray[taskIndex].Milestones[arr.length - maxPoints].NEXT;
            arr[arr.length - maxPoints].PRE = left.MILESTONE_DATE;
            
            // delete is merged milestone point , and push merge milestone point to today before group ;
            arr.splice(0, arr.length - maxPoints, left);
        },
    
        _mergeToRight: function(arr){
            if(!arr) { 
                return false ;
            }
            // create a new milestone point ;
            var right = new this._mileStoneMerge(this);
            var taskIndex = arr[0].INDEX;
            var maxPoints = this.controlConfig.maxPoints;
            var taskArray = this.getProperty('tasks');
            for(var i = 0; i < arr.length; i ++ ){
                 // push merge milestone to merge milestone point . 
                if(i + 1 > maxPoints){
                    right.MILESTONE_MERGE.push(arr[i]);
                }
            }
             // set merge milestone point date .
            right.MILESTONE_DATE = taskArray[taskIndex].END_DATE;
            right.INDEX = taskIndex;
            right.NEXT = taskArray[taskIndex].Milestones[arr.length - maxPoints].NEXT;
            right.PRE = arr[maxPoints - 1].MILESTONE_DATE;
            
             // delete merged milestone point , and push merge milestone point to today after group ;
            arr.splice(maxPoints , arr.length - maxPoints, right);
        },
        
         _getTextWidth: function(text, textSize) {
            var config = this.controlConfig;
            var textSize = textSize || config.fontSizeM;
            
            //creat a new temporary element to store the text
            var spanElement = document.createElement("span");
            document.body.appendChild(spanElement);
            
            var svg = d3.select(spanElement).append("svg");
            var textSVG = svg.append("text").text(text)
                .attr("style", "font-size:" + textSize + "px");
            var bBox = textSVG.node().getBBox();
            // remove the temp element
            spanElement.parentNode.removeChild(spanElement);
            
            return bBox.width > config.milestoneMaxLength ? config.milestoneMaxLength : Math.round(bBox.width);
        },
        
        // draw milestone 
        drawMileStone: function(){
            var categories = new Array();
            var taskArray = this.getProperty('tasks');
            var width = this.controlConfig.width;
            var height = this.controlConfig.height;
            var minWidth = this.controlConfig.minWidth;
            
            if(width < minWidth){
                return false;
            }
            
            if(!taskArray || !taskArray.length){
                return false;
            }
            
            for (var i = 0; i < taskArray.length; i++) {
                categories.push(taskArray[i].TASK_NAME);
            }
        
            this.categories = categories;
            
            this.makeGant(taskArray, width, height);
        },
        
        makeGant: function(tasks, pageWidth, pageHeight) {
            var config = this.controlConfig;

            var barHeight = config.barHeight;
            var gap = config.gap;
            var topPadding = config.topPadding;
            var sidePadding = config.sidePadding;
    
            this.drawRects(tasks, gap, topPadding, sidePadding, barHeight, pageWidth, pageHeight);
            this.vertLabels(gap, topPadding);
        },
            
        drawRects: function(theArray, theGap, theTopPad, theSidePad, theBarHeight, w, h) {
            var svg = this.svg;
            var that = this;
            var timeScale = this.timeScale;
            var nowTime = this.nowTime;
            var config = this.controlConfig;
            var oDateFormat = sap.ui.core.format.DateFormat.getDateInstance({style: "medium"}); 
            var maxTime = d3.max(theArray, function(value) { return value.END_DATE;});
            var minTime = d3.min(theArray, function(value) { return value.START_DATE;});
            
            if(!svg || !svg.length){
                return false;
            }
            
            var bigRects = svg.append("g")
                .selectAll(".bar")
                .data(theArray)
                .enter()
                .append("rect");

            var rectangles = svg.append('g')
                .selectAll(".bar")
                .data(theArray)
                .enter();
                
            // draw the vertical current time line
            if(nowTime < maxTime && nowTime > minTime){
                var currentLine = rectangles.append('line')
                .attr('class','now')
                .attr('x1', function(){
                    var today = nowTime < maxTime ? nowTime : maxTime; 
                    return timeScale(new Date(today)) + theSidePad;
                })
                .attr('y1', theTopPad)
                .attr('x2', function(){
                    var today = nowTime < maxTime ? nowTime : maxTime; 
                    return timeScale(new Date(today)) + theSidePad;
                })
                .attr('y2', function(){
                    return theArray.length * config.gap + theTopPad + 15;
                })
                .attr('stroke',  '#' + config.defaultThemeColor);
                var currentText = rectangles.append('text')
                    .text(function(){
                        var sToday = oDateFormat.format(new Date(nowTime));
                        return  that._oRB.getText('MILESTONE_TODAY') + ': ' +  sToday;
                    })
                    .attr('class', 'now-date')
                    .attr('x', function(){
                        var today = nowTime < maxTime ? nowTime : maxTime; 
                        return timeScale(new Date(today)) + theSidePad ;
                    })
                    .attr('y', function(){
                       return theArray.length * 90 + theTopPad + 15;
                    })
                    .attr("font-size", config.fontSizeX)
                    .attr("text-height", theBarHeight)
                    .attr("fill", '#' + config.defaultThemeColor)
                    .attr('text-anchor', function(){
                        var interval = timeScale(new Date(maxTime)) - timeScale(new Date(nowTime));
                        var textWidth = this.textContent.length * config.fontSizeX;
                        if(interval - textWidth > 0) {
                            return 'start';
                        }
                        return 'end';
                    });
            }
                
            var innerPonits = rectangles.append('g')
                .attr('class', 'points')
                .selectAll(".point")
                .data(function(d){
                    return d.Milestones;
                })
                .enter();
                
            //set white rectangle background to each milestone names to avoid the names overlapped by the vertical current line 
            var milestoneBG = innerPonits.append('rect')
                .attr("x", function(d) {
                    return timeScale(d.MILESTONE_DATE) + theSidePad + 10;
                })
                .attr("y", function(d, i) {
                    var normalAxis =  d.INDEX * theGap + theTopPad + theBarHeight + config.fontSizeM * 1.4;
                    var isLineGap = true;
                    if(d.INDEX > 0){normalAxis = that.getLineGapYAxis(d.INDEX, normalAxis, theArray);}
                    return that.setPointYAxis(d, i, normalAxis, isLineGap) - config.fontSizeM + 2;
                })
                .attr('width', function(d){
                    if(d.MILESTONE_IS_MERGE){
                        return 12;
                    }
                    var nameWidth = that._getTextWidth(d.MILESTONE_NAME, config.fontSizeM);
                    return timeScale(maxTime) - timeScale(d.MILESTONE_DATE) < nameWidth ?  timeScale(maxTime) - timeScale(d.MILESTONE_DATE) : nameWidth;
                })
                .attr('height', function(){
                    return config.fontSizeM; 
                })
                .attr("fill", '#FFFFFF');
              
    
            var milestoneName = innerPonits.append('text')
                .attr('class', 'point-text')
                .text(function(d){
                    if(config.width < config.minWidth){
                        return '...';
                    }
                    if(!d.NEXT) {
                        return d.MILESTONE_NAME;    
                    }

                    var endInterval = timeScale(maxTime) - timeScale(d.MILESTONE_DATE);
                    var textWidth = that._getTextWidth(d.MILESTONE_NAME, config.fontSizeM) + 15;
                    //handle the case when milestone is close to max time
                    if(endInterval < textWidth){
                        // To calculate the length of each local factor
        				var localTextFactor = Math.round(that._getTextWidth(d.MILESTONE_NAME, config.fontSizeM) / d.MILESTONE_NAME.length);
        				// To calculate the number of factors can hold till the end of bar
        				var localLengthText = Math.floor(endInterval / localTextFactor);
        				
        				if(d.MILESTONE_NAME.length > localLengthText + 8){
        				    var localMaxLengthText = localLengthText + 8;
        				    var text = d.MILESTONE_NAME.slice(0, localMaxLengthText);
                            return text + '...';
        				} else{
        				    var text = d.MILESTONE_NAME;
        				    return text;
        				}
                    }
                    //handle the case when name of milestone is too long
                    if(d.MILESTONE_NAME.length <= config.milestoneNameMaxFactorLength) {
                        return d.MILESTONE_NAME;
                    } else {
                        // cut the original text to the max number of factors can hold till the end of bar
                        var text = d.MILESTONE_NAME.slice(0 , config.milestoneNameMaxFactorLength - 1); 
                        return text + '...';
                    } 

                })
                .attr("x", function(d) {
                    return timeScale(d.MILESTONE_DATE) + theSidePad + 10;
                })
                .attr("y", function(d, i) {
                    var normalAxis =  d.INDEX * theGap + theTopPad + theBarHeight + config.fontSizeM * 1.4;
                    // var isLineGap = true;
                    if(d.INDEX > 0){normalAxis = that.getLineGapYAxis(d.INDEX, normalAxis, theArray);}
                    d.yAxis = that.setPointYAxis(d, i, normalAxis);
                    return  d.yAxis;
                })
                .attr("font-size", function(d){
                    return d.MILESTONE_IS_MERGE ? config.fontSizeX : config.fontSizeM ;
                })
                .attr("text-anchor", "start")
                .attr("text-height", theBarHeight)
                .attr("fill", function(d){
                    return d.MILESTONE_IS_MERGE ? '#' + config.defaultThemeColor : '#' + config.defaultFontColor ;
                });    
            
            var pointItem = innerPonits.append('rect')
                .attr('class', 'point')
                .attr('rx', 2)
                .attr('ry', 2)
                .attr('width', 10)
                .attr('height', 10)
                .attr("x", function(d) {
                    return timeScale(d.MILESTONE_DATE) + theSidePad;
                })
                .attr("y", function(d) {
                    return d.yAxis - config.fontSizeM;
                })
                .attr("fill", function(d) {
                    return  '#' + d.MILESTONE_COLOR_CODE ;
                })
                .attr("stroke", "none")
                .attr('transform', function(){
                    return 'rotate(45 ' + this.getAttribute('x') + ' ' + this.getAttribute('y') + ')';
                });
                
            var backgroundBar = rectangles.append("rect")
                .attr('class', 'backgroundBar')
                .attr("rx", 10)
                .attr("ry", 10)
                .attr("x", config.sidePadding)
                .attr("y", function(d, i) {
                    var taskYAsix = i * theGap + theTopPad;
                    if(i > 0){taskYAsix = that.getLineGapYAxis(i, taskYAsix, theArray);}
                    return taskYAsix;
                })
                .attr("width", function(){
                    return timeScale(maxTime);
                })
                .attr("height", theBarHeight)
                .attr("stroke", "none")
                .attr("fill",'#' + config.defaultBgColor);
    
            var innerRects = rectangles.append("rect")
                .attr('class', 'bar')
                .attr("rx", 10)
                .attr("ry", 10)
                .attr("x", function(d) {
                    return timeScale(d.START_DATE) + theSidePad;
                })
                .attr("y", function(d, i) {
                    var taskYAsix = i * theGap + theTopPad;
                    if(i > 0){taskYAsix = that.getLineGapYAxis(i, taskYAsix, theArray);}
                    return taskYAsix;
                })
                .attr("width", function(d) {
                    return timeScale(d.END_DATE) - timeScale(d.START_DATE);
                })
                .attr("height", theBarHeight)
                .attr("stroke", "none")
                .attr("fill", function(d) {
                    return '#' + (d.TASK_COLOR_CODE || config.defaultBarColor);
                });
            
            var passed = rectangles.append('rect')
                .attr('class', 'passed')
                .attr("rx", 10)
                .attr("ry", 10)
                .attr("x", function(d) {
                    return timeScale(d.START_DATE) + theSidePad;
                })
                .attr("y", function(d, i) {
                    var taskYAsix = i * theGap + theTopPad;
                    if(i > 0){taskYAsix = that.getLineGapYAxis(i, taskYAsix, theArray);}
                    return taskYAsix;
                })
                .attr("width", function(d) {
                    var endDate = timeScale(d.END_DATE);
                    var today = timeScale(new Date(nowTime));
                    var maxLength = today < endDate ? today : endDate;
                    var drawLength = maxLength - timeScale(d.START_DATE) > 0 ? maxLength - timeScale(d.START_DATE) : 0;  
                    return drawLength;
                })
                .attr("height", theBarHeight)
                .attr("stroke", "none")
                .attr("fill", "#ffffff")
                .attr('opacity', 0.5);
            
            // complete the vertical current time-line which overlapped by task bar
            if(nowTime < maxTime && nowTime > minTime){
                var addLine = rectangles.append('line')
                .attr('class','now')
                .attr('x1', function(){
                    var today = nowTime < maxTime ? nowTime : maxTime; 
                    return timeScale(new Date(today)) + theSidePad;
                })
                .attr("y1", function(d, i) {
                    var taskYAsix = i * theGap + theTopPad;
                    if(i > 0){taskYAsix = that.getLineGapYAxis(i, taskYAsix, theArray);}
                    return taskYAsix;
                })
                .attr('x2', function(){
                    var today = nowTime < maxTime ? nowTime : maxTime; 
                    return timeScale(new Date(today)) + theSidePad;
                })
                .attr("y2", function(d, i) {
                    var taskYAsix = i * theGap + theTopPad;
                   if(i > 0){taskYAsix = that.getLineGapYAxis(i, taskYAsix, theArray);}
                    return taskYAsix + theBarHeight;
                })
                .attr('stroke',  '#' + config.defaultThemeColor);
            }
            
            //reset the length of current line
            if(nowTime < maxTime && nowTime > minTime){
                currentLine.attr('y2', function(){
                    var yAsix = theArray.length * theGap + theTopPad + 20;
                    for(var k = 0;k < theArray.length; k++){
                        yAsix += theArray[k].LINEGAP;
                    }
                    return yAsix;
                });
                currentText.attr('y', function(){
                    var yAsix = theArray.length * theGap + theTopPad + 20;
                    for(var k = 0;k < theArray.length; k++){
                        yAsix += theArray[k].LINEGAP;
                    }
                    return yAsix;
                });
                
            }
            //reset the height of the whole svg picture
            var yAsix = theArray.length * theGap + theTopPad;
            for(var k = 0;k < theArray.length; k++){
                yAsix += theArray[k].LINEGAP;
            }
            svg.attr('height',yAsix + config.bottomPadding);
            
            innerRects.on('mouseenter', this.showPopUp).on('mouseleave', this.hidePopUp);
            passed.on('mouseenter', this.showPopUp).on('mouseleave', this.hidePopUp);
    
            pointItem.on('click', this.showMileStone);
            
            d3.select('.mile-stone-screen-cover').on('click', this.hideMileStone);
    
        },
        
        getLineGapYAxis: function(i, normal, theArray){
            var normalAxis =  normal;
            for(var j = i - 1; j >= 0; j--){ 
                normalAxis += theArray[j].LINEGAP; 
            }
            return normalAxis;
        },
        
        // set yAxis of every milestone with new line considered
        setPointYAxis: function(obj, i ,normal, isLineGap){
            var tasks = this.getProperty('tasks');
            var timeScale = this.timeScale;
            var config = this.controlConfig;
            var pointGap = timeScale(obj.MILESTONE_DATE) - timeScale(obj.PRE);
            var normalAxis =  normal;
            var prePoint = tasks[obj.INDEX].Milestones[i - 1] || undefined;
            var preYAxis = prePoint ? prePoint.yAxis : normalAxis;
            obj.yAxis = normalAxis; 
            //if two neighbor milestones are too close, new line is necessary 
            if(prePoint && pointGap < this._getTextWidth(prePoint.MILESTONE_NAME, config.fontSizeM) + 15){
                obj.yAxis = preYAxis + config.fontSizeM * 1.4; 
                //if yAixs of the new line is larger than previous milestone, then add the LINEGAP variable.
                if(isLineGap){
                    for(var k = i - 1; k >= 0; k--) {
                        if(tasks[obj.INDEX].Milestones[k].yAxis >= obj.yAxis){
                            continue;
                        }else{
                            tasks[obj.INDEX].LINEGAP +=  config.fontSizeM * 1.4;
                            break;
                        }
                    }
                }
                
            }
            return  obj.yAxis;  
        },
        
        vertLabels: function(theGap, theTopPad) {
            var prevGap = 0;
            var svg = this.svg;
            var taskArray = this.getProperty('tasks');
            var categories = this.categories;
            var config = this.controlConfig;
            var textParts = [];
         
            /**TODO: handle overflow task name**/
            for (var i = 0; i < categories.length; i++) {
                var bLineBreak = false;
                if(categories[i].length > config.labelMaxLength){
                    textParts = categories[i].split(" ") || [];
                    for (var k = 0; k < textParts.length; k++) {
                        //if single parts of the text are too small add them back together
                        if(textParts[k + 1]){
                        var tempTexts = textParts[k] + " " + textParts[k + 1];
                            if (tempTexts.length < config.labelMaxLength){
                                textParts[k] = textParts[k] + " " + textParts[k + 1];
                                textParts.splice(k + 1, 1);
                                k--;
                            }
                        }
                    }
                    bLineBreak = true;
                }
                
                var taskYAsix = i * theGap + theTopPad + 15;
                if(i > 0){ 
                    for(var j = i - 1; j >= 0; j--){ 
                        taskYAsix += taskArray[j].LINEGAP; 
                    } 
                }
                
                if (bLineBreak) {
                //if there are line breaks, it is necessary to create tspan elements
                    var textSVG = this.svg.append("g") 
                        .append("text")
                        .attr('class', 'milestone-label')
                        .attr("font-size", config.fontSizeM)
                        .attr("text-anchor", "start")
                        .attr("text-height", config.fontSizeX)
                        .attr('fill', '#' + config.defaultFontColor);
                        
                    var iLines = textParts.length;
                    //if task name needs longer than three lines to display, reserve the first three lines and add '...' in the end
                    if(iLines > 3){
                        textParts = textParts.slice(0,3);
                        textParts[2] += '...'; 
                    }
    
                   for (var k = 0; k < iLines; k++) {
                        textSVG.append("tspan").text(textParts[k])
                            .attr("x", 20)
                            .attr("y", taskYAsix + k * config.fontSizeX); 
                    }
                    
            } else {
                var textSVG = this.svg.append("g") 
                    .append("text")
                    .text(categories[i])
                    .attr('class', 'milestone-label')
                    .attr("font-size", config.fontSizeM)
                    .attr("text-anchor", "start")
                    .attr("text-height", config.fontSizeX)
                    .attr('fill', '#' + config.defaultFontColor)
                    .attr("x", 20)
                    .attr("y", taskYAsix);
                }
            }
        },
        
        
        showPopUp: function(){
            var oDateFormat = sap.ui.core.format.DateFormat.getDateInstance({style: "medium"}); 
            var data = d3.select(this).data()[0];
            var output = document.getElementsByClassName("mile-stone-tag")[0];
    
            if(output.style.display === "block"){
                return false;
            }
    
            var x = (this.x.animVal.value + this.width.animVal.value / 2) + "px";
            var y = this.y.animVal.value + 40 + "px";
            
            var start, end;
            
            switch(data.DATE_TYPE_CODE){
                case 'MONTH':
                    start = data.START_MONTH + '  ' + data.START_YEAR;
                    end =  data.END_MONTH + '  ' + data.END_YEAR;
                    break;
                case 'YEAR':
                    start = data.START_YEAR;
                    end =  data.END_YEAR;
                    break;
                case 'DAY':
                    start = oDateFormat.format(data.START_DATE);
                    end = oDateFormat.format(data.END_DATE);
                    break;
                case 'QUARTER':
                    start = data.START_QUARTER + '  ' +  data.START_YEAR;
                    end = data.END_QUARTER + '  ' +  data.END_YEAR;
                    break;
                default:
                
                    break;
            }
            
            if(data.IS_INFINITY){
                end = data.TEMPLATE_TEXT.INFINITY;
            }
            var tag = "<span class='mile-stone-task'>" + data.TEMPLATE_TEXT.TASK + data.TASK_NAME +  "</span>" +  "<br/>" +
                    "<span class='mile-stone-task'>" +  data.TEMPLATE_TEXT.START + start +  "</span>" +  "<br/>" +
                    "<span class='mile-stone-task'>" +  data.TEMPLATE_TEXT.END + end + "</span>";
           
            output.innerHTML = tag;
            output.style.top = y;
            output.style.left = x;
            output.style.display = "block";
            d3.select('.svg-content').on('click', this.hideMileStone);
        },
    
        hidePopUp: function(){
            var output = document.getElementsByClassName("mile-stone-tag")[0];
            
            if(output.style.display === "none"){
                return false;
            }
            output.style.display = "none";
        },
    
        showMileStone: function(){
            var tag ,data = d3.select(this).data()[0];
            var oDateFormat = sap.ui.core.format.DateFormat.getDateInstance({style: "medium"}); 
            var output = document.getElementsByClassName("mile-stone")[0];
            
            if(output.style.display === "block"){
                return false;
            }
    
            var x = (this.x.animVal.value + this.width.animVal.value / 2) + "px";
            var y = this.y.animVal.value + 40 + "px";
            var milestoneDate;
            if(!data.MILESTONE_MERGE || !data.MILESTONE_MERGE.length){
                switch (data.DATE_TYPE_CODE){
                    case 'MONTH':
                        milestoneDate = data.MILESTONE_MONTH + '  ' + data.MILESTONE_YEAR; 
                        break;
                    case 'YEAR':
                        milestoneDate = data.MILESTONE_YEAR;
                        break;
                    case 'DAY':
                        milestoneDate = oDateFormat.format(data.MILESTONE_DATE);
                        break;
                    case 'QUARTER':
                        milestoneDate = data.MILESTONE_QUARTER + '  ' +  data.MILESTONE_YEAR;
                        break;
                    default :
                    
                        break;
                }
                tag = "<p><span class='tag-point' style='background:#" + data.MILESTONE_COLOR_CODE + "'></span><span style='color:#" + data.MILESTONE_COLOR_CODE + "'>" + milestoneDate + "</span></p>" +
                  "<p class='mile-stone-date'>" + data.MILESTONE_NAME  + "</p>";
            }
            if(data.Attachment && data.Attachment.length){
                for(var i = 0; i < data.Attachment.length;i++){
                 
                tag += '<a class="mile-stone-attachment" target="_blank" rel="' + data.Attachment[i].LABEL + '" href="' + data.Attachment[i].ATTACHMENT_URL + '">' + data.Attachment[i].LABEL + '</a>';
                    
                }
            }
            if(data.MILESTONE_MERGE && data.MILESTONE_MERGE.length){
                tag = '';
                for(var i = 0; i < data.MILESTONE_MERGE.length; i ++){
                    switch(data.MILESTONE_MERGE[i].DATE_TYPE_CODE){
                        case 'MONTH':
                            milestoneDate = data.MILESTONE_MERGE[i].MILESTONE_MONTH + '  ' + data.MILESTONE_MERGE[i].MILESTONE_YEAR;
                            break;
                        case 'YEAR':
                            milestoneDate = data.MILESTONE_MERGE[i].MILESTONE_YEAR;
                            break;
                        case 'DAY':
                            milestoneDate = oDateFormat.format(data.MILESTONE_MERGE[i].MILESTONE_DATE);
                            break;
                        case 'QUARTER':
                            milestoneDate = data.MILESTONE_MERGE[i].MILESTONE_QUARTER + '  ' +  data.MILESTONE_MERGE[i].MILESTONE_YEAR;
                            break;
                        default:
                        
                            break;
                    }

                    tag += "<p><span class='tag-point' style='background:#" + data.MILESTONE_MERGE[i].MILESTONE_COLOR_CODE + "'></span><span style='color:#" + data.MILESTONE_MERGE[i].MILESTONE_COLOR_CODE + "'>" + milestoneDate + "</span></p>" +
                            "<p class='mile-stone-date'>" + data.MILESTONE_MERGE[i].MILESTONE_NAME + "</p>";
                    if(data.MILESTONE_MERGE[i].Attachment && data.MILESTONE_MERGE[i].Attachment.length){
                        tag += '<a class="mile-stone-attachment" target="_blank" rel="' + data.MILESTONE_MERGE[i].Attachment[0].LABEL + '" href="' + data.MILESTONE_MERGE[i].Attachment[0].ATTACHMENT_URL + '">' + data.MILESTONE_MERGE[i].Attachment[0].LABEL + '</a>';
                    } 
                }
            }
    
            output.innerHTML = tag;
            output.style.top = y;
            output.style.left = x;
            output.style.display = "block";
            d3.select('.mile-stone-screen-cover').style({'display':'block'});
        },
    
        hideMileStone: function(){
            var output = document.getElementsByClassName("mile-stone")[0];
    
            if(output.style.display === "none"){
                return false;
            }
    
            output.style.display = "none";
            d3.select('.mile-stone-screen-cover').style({'display':'none'});
        },
        
        
        renderer: function(oRM, oControl) {
            // write Container
            oRM.write('<div') ;
            oRM.addClass('mile-stone-container');
            oRM.writeClasses();
            oRM.write('>');
            
            // write SVG
            oRM.write('<div');
            oRM.addClass('mile-stone-svg');
            oRM.writeClasses();
            oRM.write('>');
            oRM.write("</div>");
            
            //
            oRM.write('<div');
            oRM.addClass('mile-stone-screen-cover');
            oRM.writeClasses();
            oRM.write('>');
            oRM.write("</div>");
            
            // 
            oRM.write('<div');
            oRM.addClass('mile-stone-tag');
            oRM.writeClasses();
            oRM.write('>');
            oRM.write("</div>");
            //
            oRM.write('<div');
            oRM.addClass('mile-stone');
            oRM.writeClasses();
            oRM.write('>');
            oRM.write("</div>");
            
            oRM.write("</div>");
        }
    });

});
}; // end of sap/ino/controls/Milestone.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.MobileTextEditor') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.MobileTextEditor'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.TextArea'); // unlisted dependency retained
jQuery.sap.require('sap.m.Toolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarDesign'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToggleButton'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.m.InputBase'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
jQuery.sap.require('sap.base.security.sanitizeHTML'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/MobileTextEditor",[
    "sap/ui/core/Control",
    "sap/m/TextArea",
    "sap/m/Toolbar",
    "sap/m/ToolbarDesign",
    "sap/ui/core/IconPool",
    "sap/m/ToggleButton",
    "sap/m/Dialog",
    "sap/m/InputBase",
    "sap/ui/core/ResizeHandler",
	"sap/base/security/sanitizeHTML"
], function(Control, TextArea, Toolbar, ToolbarDesign, IconPool, Button, Dialog, InputBase, ResizeHandler, sanitizeHTML) {
    "use strict";

    /**
     * Constructor for a rich text editor that also works on mobile. It contains only basic rich text editing
     * capabilities like: bold, underline, italic and bullet and number lists.
     * <ul>
     * <li>Properties
     * <ul>
     * <li>dialogTitle: Title that is shown when the editor is shown full screen in a dialog mode</li>
     * <li>editable: value is editable</li>
     * <li>enabled: editor is enabled (= part of tab chain)</li>
     * <li>height: height of the editor</li>
     * <li>maxHeight: Maximal height of the editor</li>
     * <li>openInDialog: Tapping on the editor will open it in a fullscreen dialog</li>
     * <li>showToolbar: Toolbar with editor buttons is shown</li>
     * <li>showValueStateMessage: Value state message should be shown</li>
     * <li>value: HTML content</li>
     * <li>valueState: Value state</li>
     * <li>valueStateText: Text describing the value state</li>
     * <li>width: Width</li>
     * <li>Events
     * <ul>
     * <li>change: Editor value has changed (when focus is left or dialog is closed)</li>
     * </ul>
     * </li>
     * </ul>
     *
     * @class
     * @extends sap.ui.core.Control
     * @version 2.0
     *
     * @constructor
     * @public
     * @name sap.ino.controls.MobileTextEditor
     */
    return Control.extend("sap.ino.controls.MobileTextEditor", {
        metadata: {
            properties: {
                dialogTitle: {
                    type: "string",
                    defaultValue: ""
                },
                editable: {
                    type: "boolean",
                    defaultValue: true
                },
                enabled: {
                    type: "boolean",
                    defaultValue: true
                },
                height: {
                    type: "sap.ui.core.CSSSize",
                    defaultValue : "100%"
                },
                minHeight: {
                    type: "sap.ui.core.CSSSize",
                    defaultValue : "1rem"
                },
                maxHeight: {
                    type: "sap.ui.core.CSSSize",
                    defaultValue : ""
                },
                openInDialog: {
                    type: "boolean",
                    defaultValue: false
                },
                showToolbar: {
                    type: "boolean",
                    defaultValue: true
                },
                showValueStateMessage: {
                    type: "boolean",
                    defaultValue: true
                },
                value: {
                    type: "string",
                    defaultValue: ""
                },
                valueState: {
                    type: "sap.ui.core.ValueState",
                    defaultValue: sap.ui.core.ValueState.None
                },
                valueStateText: {
                    type: "string",
                    defaultValue: null
                },
                width: {
                    type: "sap.ui.core.CSSSize",
                    defaultValue : "100%"
                }
            },
            aggregations: {
                "_editorControls": {
                    type: "sap.m.Toolbar",
                    multiple: false,
                    fitContainer: true,
                    visibility: "hidden"
                },
                "_dialog" : {
                    type: "sap.m.Dialog",
                    multiple: false,
                    visibility: "hidden"
                }
            },
            events : {
                change : {}
            }
        },

        /**
         * @private
         */
        init: function() {
            this._oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ino.controls");
            this._sResizeRegId = ResizeHandler.register(this, this._onResize);

        },

        /**
         * @private
         */
        exit: function() {
            ResizeHandler.deregister(this._sResizeRegId);
        },

        /**
         * @private
         */
        setValue : function(sValue) {
            this.setProperty("value", sValue, true);
            var oEditor = this._getNicEditor();
            if (!oEditor) {
                jQuery.sap.log.warning("NicEditor not found in method setValue",undefined,"sap.ino.controls.MobileTextEditor");
                return;
            }
            this._getNicEditor().setContent(sValue || "");
        },

        /**
         * @private
         */
        onAfterRendering: function() {
            this._recalculateHeight();

            // lazy loading
            jQuery.sap.require("sap.ino.thirdparty.nicEdit");

            this._oNicEditor = new nicEditor({ // jshint ignore:line
                buttonList: ["bold", "italic", "underline", "ol", "ul"]
            });

            if (this.getShowToolbar()) {
                this._oNicEditor.addEvent("buttonActivate", jQuery.proxy(this._nicButtonActivate, this));
                this._oNicEditor.addEvent("buttonDeactivate", jQuery.proxy(this._nicButtonDeactivate, this));
            }

            this._oNicEditor.setPanel(this.getId() + "-nicPanel");
            this._oNicEditor.panelInstance(this.getId() + "-nicContentTA");

            if (!(this.getEnabled() && this.getEditable())) {
                this.$().addClass("sapMInputBaseDisabled");
                this._getNicEditor().disable();
            } else {
                if (this.getShowToolbar()) {
                    this._oNicEditor.setPanel(this.getId() + "-editorControls");
                }
            }
        },

        /**
         * @private
         */
        _nicButtonActivate : function(oItem) {
            this._syncButtonState(oItem.name, true);
        },
        /**
         * @private
         */
        _nicButtonDeactivate : function(oItem) {
            this._syncButtonState(oItem.name, false);
        },

        /**
         * @private
         */
        _syncButtonState : function(sName, bToggled) {
            var oButton = sap.ui.getCore().byId(this.getId() + "-" + sName);
            oButton.setPressed(bToggled);
        },

        /**
         * @private
         * @override
         */
        focus : function() {
            var $this = this.$();
            if (!$this) {
                return;
            }
            // Make sure the caret is being displayed, so that typing can start
            jQuery.sap.focus($this.find('.nicEdit-main').first());
        },

        /**
         * @private
         */
        onfocusin : function() {
            this.openValueStateMessage();
        },

        /**
         * @private
         */
        onfocusout : function(oEvent) {
            var oEditor = this._getNicEditor();
            if (!oEditor) {
                return;
            }
            var sContent = oEditor.getContent();
            this.setProperty("value", sContent, true);
            this.closeValueStateMessage();
            if (this.getEditable()) {
                this.fireChange({
                    value : sContent
                });
            }
        },

        /**
         * @private
         */
        ontap : function(oEvent) {
            this._openInDialog();
        },


        /**
         * @private
         */
        ontouchmove : function(oEvent) {
            // mark the event such that scrolling on iOS is not prevented out
            // which is the default for popups
            // see incident 1472005153
            oEvent.setMarked();
        },


        /**
         * @private
         */
        _onResize: function(oEvent) {
            oEvent.control._recalculateHeight();
        },

        /**
         * @private
         */
        _getNicEditor : function() {
            return this._oNicEditor && this._oNicEditor.instanceById(this.getId() + "-nicContentTA");
        },


        /**
         * @private
         */
        _recalculateHeight: function() {
            var bIsOpenInDialog = this._bOpenInDialog;

            // When shown in dialog set the height to half of the screen so that
            // the device keyboard does not disturb entry
            if (bIsOpenInDialog && (!this.getHeight() || this.getHeight() === "100%")) {
                var aParents = this.$().parents(".sapMDialog");
                // 152 = size of toolbar and dialog header and footer
                var iHeight = (aParents[0].clientHeight - 152) / 2;
                // prevent any strange effects of very small screen sizes
                if (iHeight > 0) {
                    this.$().height(iHeight);
                }
            }
        },

        /**
         * @private
         */
        _openInDialog : function() {
            if (!this.getOpenInDialog() || this._bOpenInDialog === true) {
                return;
            }

            var oDialog = new Dialog({
                stretch : true,
                horizontalScrolling : false,
                verticalScrolling : true,
                showHeader : true,
                title : this.getDialogTitle(),
                beginButton: new Button({
                    text: this._oRB.getText("CTRL_MTE_DONE"),
                    press: function () {
                        oDialog.close();
                    }
                })
            });

            var oEditor = new this.constructor( {
                value : this.getValue(),
                editable : this.getEditable(),
                enabled : this.getEnabled()
            }).addStyleClass("sapInoMTEDialog");
            oEditor._bOpenInDialog = true;
            this.setAggregation("_dialog", oDialog);
            oDialog.addContent(oEditor);

            oDialog.attachAfterOpen(this._onOpenDialog, this);
            oDialog.attachAfterClose(this._onCloseDialog, this);
            oDialog.open();
        },

        /**
         * @private
         */
        _onCloseDialog: function(oEvent){
            var oDialog = oEvent.getSource();
            var sValue = oDialog.getContent()[0].getValue();
            this.setAggregation("_dialog", null);
            oDialog.destroy();
            this.setValue(sValue);
            if (this.getEditable()) {
                this.fireChange({
                    value : sValue
                });
            }
        },

        /**
         * @private
         */
        _onOpenDialog: function(oEvent){
            oEvent.getSource().getContent()[0].focus();
        },

        setValueStateText : function (sText) {
            this.setProperty("valueStateText", sText, true);
            return this;
        },

        setValueState : function(sValueState) {
            this.setProperty("valueState", sValueState, true);
            var $editor = this.$();
            if (!$editor) {
                return;
            }

            var $content = $editor.find(".sapInoMTEContent");
            $content.removeClass("sapMInputBaseErrorInner");
            $content.removeClass("sapMInputBaseSuccessInner");
            $content.removeClass("sapMInputBaseWarningInner");
            $content.removeClass("sapMInputBaseStateInner");

            var sStyleClass = this._getStyleClassForValueState();
            if (sStyleClass) {
                $content.addClass(sStyleClass);
                $content.addClass("sapMInputBaseStateInner");
            }
            return this;
        },

        /**
         * @private
         */
        _getStyleClassForValueState : function() {
            switch (this.getValueState()) {
                case (sap.ui.core.ValueState.Error) :
                    return "sapMInputBaseErrorInner";
                case (sap.ui.core.ValueState.Success) :
                    return "sapMInputBaseSuccessInner";
                case (sap.ui.core.ValueState.Warning) :
                    return "sapMInputBaseWarningInner";
            }
        },

        refreshDataState : InputBase.prototype.refreshDataState,
        propagateMessages : InputBase.prototype.propagateMessages,
        openValueStateMessage: InputBase.prototype.openValueStateMessage,
        closeValueStateMessage: InputBase.prototype.closeValueStateMessage,
        getDomRefForValueStateMessage : InputBase.prototype.getDomRefForValueStateMessage,

        /**
         * @private
         */
        _getEditorControls: function(oEvent) {
            var that = this;
            var oControl = this.getAggregation("_editorControls");
            if (!oControl) {
                oControl = new Toolbar({
                    design : ToolbarDesign.Solid,
                    content: [
                        new Button(this.getId() + "-bold", {
                            press: function(oEvent) {
                                that._getNicEditor().nicCommand("Bold");
                            },
                            text: "B"
                        }).addStyleClass("sapInoMTEButton").addStyleClass("sapInoMTEButtonBold"),
                        new Button(this.getId() + "-italic", {
                            press: function(oEvent) {
                                that._getNicEditor().nicCommand("Italic");
                            },
                            text: "I"
                        }).addStyleClass("sapInoMTEButton").addStyleClass("sapInoMTEButtonItalic"),
                        new Button(this.getId() + "-underline", {
                            press: function(oEvent) {
                                that._getNicEditor().nicCommand("Underline");
                            },
                            text: "U"
                        }).addStyleClass("sapInoMTEButton").addStyleClass("sapInoMTEButtonUnderline"),
                        new Button(this.getId() + "-ol", {
                            press: function(oEvent) {
                                that._getNicEditor().nicCommand("insertorderedlist");
                            },
                            icon: IconPool.getIconURI("multi-select")
                        }).addStyleClass("sapInoMTEButton"),
                        new Button(this.getId() + "-ul", {
                            press: function(oEvent) {
                                that._getNicEditor().nicCommand("insertunorderedlist");
                            },
                            icon: IconPool.getIconURI("menu")
                        }).addStyleClass("sapInoMTEButton")
                    ]
                });

                this.setAggregation("_editorControls", oControl, true);
            }
            return oControl;
        },

        /**
         * @private
         */
        renderer: function(oRM, oControl) {
            oRM.write("<div ");
            oRM.writeControlData(oControl);
            oRM.addClass("sapInoMTE");
            oRM.writeClasses();
            oRM.write(">");

            oRM.write("<div");
            oRM.writeAttribute("id", sanitizeHTML(oControl.getId()) + "-nicPanel");
            oRM.addClass("sapInoMTENicPanel");
            oRM.writeClasses();
            oRM.write("/>");

            // display our own editor controls instead of the ones from nicedit to have a UI5 look and feel
            if (oControl.getShowToolbar()) {
                oRM.write("<div");
                    oRM.writeAttribute("id", sanitizeHTML(oControl.getId()) + "-editorControls");
                    oRM.writeAttribute("role", "toolbar");
                    oRM.writeAttributeEscaped("aria-label", oControl._oRB.getText("CRTL_MTE_TOOLBAR_LABEL"));
                    oRM.addClass("sapInoMTEControls");
                    oRM.writeClasses();
                oRM.write(">");
                oRM.renderControl(oControl._getEditorControls());
                oRM.write("</div>");
            }

            oRM.write("<div");
            oRM.writeAttribute("id", sanitizeHTML(oControl.getId()) + "-nicContent");
            oRM.addClass("sapInoMTEContent");
            oRM.addClass("sapMInputBaseInner");
            oRM.addClass("sapMTextAreaInner");
            if (!(oControl.getEnabled() && oControl.getEditable())) {
                oRM.addClass("sapMInputBaseDisabledInner");
            }
            oRM.writeClasses();
            oRM.addStyle("width", sanitizeHTML(oControl.getWidth()));
            oRM.addStyle("height", sanitizeHTML(oControl.getHeight()));
            
            if (oControl.getMinHeight()) {
                oRM.addStyle("min-height", sanitizeHTML(oControl.getMinHeight()));
            }

            if (oControl.getMaxHeight()) {
                oRM.addStyle("max-height", sanitizeHTML(oControl.getMaxHeight()));
            }

            oRM.writeStyles();
            oRM.write(">");

            // render a dummy textarea that will be replaced with the rich text editor
            oRM.write("<textarea");
            oRM.writeAttribute("id", sanitizeHTML(oControl.getId()) + "-nicContentTA");
            oRM.addClass("sapInoMTEContent");
            oRM.addClass("sapMInputBaseInner");
            oRM.writeClasses();
            oRM.writeStyles();
            oRM.write(">");
            oRM.writeEscaped(oControl.getValue());
            oRM.write("</textarea>");

            oRM.write("</div>");
            oRM.write("</div>");
        }
    });
});
}; // end of sap/ino/controls/MobileTextEditor.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.NoticeSegmentedButton') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.NoticeSegmentedButton'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.SegmentedButton'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/NoticeSegmentedButton",[
	"sap/m/SegmentedButton",
	"sap/ui/core/library"
], function(SegmentedButton, coreLibrary) {
	"use strict";
	var TextDirection = coreLibrary.TextDirection;

	return SegmentedButton.extend("sap.ino.controls.NoticeSegmentedButtonItem", {

		renderer: function(oRM, oControl) {
			var aButtons = oControl.getButtons(),
				sSelectedButton = oControl.getSelectedButton(),
				oButton,
				sTooltip,
				sButtonWidth,
				sButtonTextDirection;

			// Select representation mockup
			if (oControl._bInOverflow) {
				oRM.write("<div");
				oRM.writeControlData(oControl);
				oRM.writeClasses();
				oRM.write(">");
				oRM.renderControl(oControl.getAggregation("_select"));
				oRM.write("</div>");
				return;
			}

			// write the HTML into the render manager
			oRM.write("<ul");

			if (this._addAllIconsClass(aButtons)) {
				oRM.addClass("sapMSegBIcons");
			}
			oRM.addClass("sapMSegB");
			oRM.writeClasses();
			if (oControl.getWidth() && oControl.getWidth() !== '') {
				oRM.addStyle('width', oControl.getWidth());
			}
			oRM.writeStyles();
			oRM.writeControlData(oControl);
			sTooltip = oControl.getTooltip_AsString();
			if (sTooltip) {
				oRM.writeAttributeEscaped("title", sTooltip);
			}

			// ARIA
			oRM.writeAccessibilityState(oControl, {
				role: "radiogroup"
			});

			oRM.write(">");
			var aItems = oControl.getItems();
			for (var i = 0; i < aButtons.length; i++) {
				oButton = aButtons[i];
				var bSetEnable = false,
					bSetTextVisible;
				jQuery.each(aItems, function(index, oItem) {
					if (oButton.getId().indexOf(oItem.getId()) > -1) {
						bSetEnable = oItem.getDisplayNotice() ? true : false;
						bSetTextVisible = oItem.getTextVisible() ? true : false;
					}
				});
				// instead of the button API we render a li element but with the id of the button
				// only the button properties enabled, width, icon, text, and tooltip are evaluated here
				oRM.write("<li");
				if (!bSetTextVisible) {
					oRM.addClass("sapInoBtnNarrowWidth");
				} else{
				    oRM.addClass("sapInoBtnExpandWidth");  
				}
				if (oButton.getVisible()) {
					var sButtonText = oButton.getText(),
						oButtonIcon = oButton.getIcon(),
						sIconAriaLabel = "",
						oImage;

					if (oButtonIcon) {
						oImage = oButton._getImage((oButton.getId() + "-img"), oButtonIcon);
						if (oImage instanceof sap.m.Image) {
							oControl._overwriteImageOnload(oImage);
						} else if (!oButton.getTooltip()) { //BCP: 1670076777- Put aria-label only for icon or icon+text
							sIconAriaLabel = oControl._getIconAriaLabel(oImage);
						}
					}

					oRM.writeControlData(oButton);
					oRM.writeAttribute("aria-posinset", i + 1);
					oRM.writeAttribute("aria-setsize", aButtons.length);
					oRM.addClass("sapMSegBBtn");
					oRM.addClass("sapInoButtonLi");
					
					if (oButton.aCustomStyleClasses !== undefined && oButton.aCustomStyleClasses instanceof Array) {
						for (var j = 0; j < oButton.aCustomStyleClasses.length; j++) {
							oRM.addClass(oButton.aCustomStyleClasses[j]);
						}
					}
					if (oButton.getEnabled()) {
						oRM.addClass("sapMSegBBtnFocusable");
					} else {
						oRM.addClass("sapMSegBBtnDis");
					}
					if (sSelectedButton === oButton.getId()) {
						oRM.addClass("sapMSegBBtnSel");
					}
					if (oButtonIcon && sButtonText !== '') {
						//oRM.addClass("sapMSegBBtnMixed");
					}
					oRM.writeClasses();
					sButtonWidth = oButton.getWidth();
					if (sButtonWidth) {
						oRM.addStyle('width', sButtonWidth);
						oRM.writeStyles();
					}

					sTooltip = oButton.getTooltip_AsString();
					if (sTooltip) {
						oRM.writeAttributeEscaped("title", sTooltip);
					}
					oRM.writeAttribute("tabindex", oButton.getEnabled() ? "0" : "-1");

					sButtonTextDirection = oButton.getTextDirection();
					if (sButtonTextDirection !== TextDirection.Inherit) {
						oRM.writeAttribute("dir", sButtonTextDirection.toLowerCase());
					}

					// ARIA
					oRM.writeAccessibilityState(oButton, {
						role: "radio",
						checked: sSelectedButton === oButton.getId()
					});

					// BCP:1570027826 If button has an icon add ARIA label containing the generic icon name
					if (oImage && sIconAriaLabel !== "") {
						// If there is text inside the button add it in the aria-label
						if (sButtonText !== "") {
							sIconAriaLabel += " " + sButtonText;
						} else {
							// if we have no text for the button set tooltip the name of the Icon
							oRM.writeAttributeEscaped("title", sIconAriaLabel);
						}
						oRM.writeAttributeEscaped("aria-label", sIconAriaLabel);
					}

					oRM.write('>');
					oRM.write("<div");
					//oRM.addClass("sapMSegBBtnInner");
						oRM.addClass("sapInoTextWithoutBorder");

					oRM.writeClasses();
					oRM.write(">");
					if (oButtonIcon && oImage) {
						oRM.renderControl(oImage);
					}

					// render text
					oRM.write("<div");
					oRM.addClass("sapInoSegBtnText");
					if (!bSetTextVisible) {
						oRM.addClass("sapInoSegBtnTextInVisible");
					}
					oRM.writeClasses();
					oRM.write(">");
					if (sButtonText !== '') {
						oRM.writeEscaped(sButtonText, false);
					}
					oRM.write("</div>");
					oRM.write("</div>");
					if (bSetEnable) {
						oRM.write("<div");
						oRM.addClass("sapInoDisplayNoticePoint");
						oRM.writeClasses();
						oRM.write(">");
						oRM.write("</div>");
					}
					oRM.write("</li>");
				} else {
					oRM.writeInvisiblePlaceholderData(oButton);
					oRM.write('>');
					oRM.write("</li>");
				}
			}
			oRM.write("</ul>");
		},
		_addAllIconsClass: function(aButtons) {
			for (var i = 0; i < aButtons.length; i++) {
				if (!aButtons[i].getIcon()) {
					return false;
				}
			}
			return true;
		}

	});
});
}; // end of sap/ino/controls/NoticeSegmentedButton.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.NoticeSegmentedButtonItem') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.NoticeSegmentedButtonItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.SegmentedButtonItem'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/NoticeSegmentedButtonItem",[
    "sap/m/SegmentedButtonItem"
], function(SegmentedButtonItem) {
	"use strict";

	/**
	 *
	 * Specialized HeadShellItem to render Notification bubble
	 *
	 * <ul>
	 * <li>Properties
	 * <ul>
	 * <li>notificationCount: number of Notifications. Displayed as number in the bubble</li>
	 * </ul>
	 * </li>
	 * </ul>
	 */
	return SegmentedButtonItem.extend("sap.ino.controls.NoticeSegmentedButtonItem", {
		metadata: {
			properties: {
				displayNotice: {
					type: "boolean",
					default: false
				},
				textVisible: {
					type: "boolean",
					default: false
				}				
			}
		}

	});
});
}; // end of sap/ino/controls/NoticeSegmentedButtonItem.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.NotificationHeadItem') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.NotificationHeadItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.unified.ShellHeadItem'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/NotificationHeadItem",[
    "sap/ui/unified/ShellHeadItem"
], function (ShellHeadItem) {
    "use strict";

    /**
     *
     * Specialized HeadShellItem to render Notification bubble
     *
     * <ul>
     * <li>Properties
     * <ul>
     * <li>notificationCount: number of Notifications. Displayed as number in the bubble</li>
     * </ul>
     * </li>
     * </ul>
     */
    return ShellHeadItem.extend("sap.ino.controls.NotificationHeadItem", {
        metadata: {
            properties: {
                notificationCount: {type: "string"}
            }
        },

        setNotificationCount : function(sCount) {
            if(sCount) {
                this.setProperty("notificationCount", sCount, true);
            }
            return this._refreshIcon();
        },

        _refreshIcon: function() {
            var oIcon = ShellHeadItem.prototype._refreshIcon.apply(this, arguments);
            var sCount = this.getNotificationCount();
            if(sCount === undefined) {
                return oIcon;
            }
            var iCount = parseInt(sCount, 10);
            if (jQuery("#notificationCount").length === 0 && iCount === 0) {
                return oIcon;
            }
            //Insert notificationCount elem if necessary
            if (jQuery("#notificationCount").length === 0 && iCount > 0) {
                this.$().append("<div id='notificationCount'/>");
            }
            if (iCount > 0) {
                jQuery("#notificationCount").addClass("sapInoNotificationCount");
                jQuery("#notificationCount").text(sCount);
            }
            else {
                jQuery("#notificationCount").remove();
            }
            return oIcon;
        }

    });
});
}; // end of sap/ino/controls/NotificationHeadItem.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.ObjectPageSubSectionEnhance') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.ObjectPageSubSectionEnhance'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.uxap.ObjectPageSubSection'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/ObjectPageSubSectionEnhance",[
    "sap/uxap/ObjectPageSubSection",
	"sap/m/Label"    
], function(ObjectPageSubSection,Label) {
	"use strict";

	/**
	 *
	 * Specialized HeadShellItem to render Notification bubble
	 *
	 * <ul>
	 * <li>Properties
	 * <ul>
	 * <li>notificationCount: number of Notifications. Displayed as number in the bubble</li>
	 * </ul>
	 * </li>
	 * </ul>
	 */
	return ObjectPageSubSection.extend("sap.ino.controls.ObjectPageSubSectionEnhance", {
		metadata: {
			properties: {
				displayNewFlag: {
					type: "boolean",
					default: false
				}
			}
		},

		renderer: function(oRm, oControl) {
			var aActions, bHasTitle, bHasTitleLine, bHasActions, bUseTitleOnTheLeft, bHasVisibleActions;

			if (!oControl.getVisible() || !oControl._getInternalVisible()) {
				return;
			}

			aActions = oControl.getActions() || [];
			bHasActions = aActions.length > 0;
			bHasTitle = (oControl._getInternalTitleVisible() && (oControl.getTitle().trim() !== ""));
			bHasTitleLine = bHasTitle || bHasActions;
			bHasVisibleActions = oControl._hasVisibleActions();

			oRm.write("<div ");
			oRm.writeAttribute("role", "region");
			oRm.writeControlData(oControl);
			oRm.addClass("sapUxAPObjectPageSubSection");
			oRm.addClass("ui-helper-clearfix");
			oRm.writeClasses(oControl);
			oRm.writeClasses();
			oRm.write(">");
			if (bHasTitleLine) {
				oRm.write("<div");
				oRm.addClass("sapUxAPObjectPageSubSectionHeader");

				if (!bHasTitle && !bHasVisibleActions) {
					oRm.addClass("sapUiHidden");
				}

				bUseTitleOnTheLeft = oControl._getUseTitleOnTheLeft();
				if (bUseTitleOnTheLeft && oControl._onDesktopMediaRange()) {
					oRm.addClass("titleOnLeftLayout");
				}
				oRm.writeAttributeEscaped("id", oControl.getId() + "-header");
				oRm.writeClasses();
				oRm.write(">");

				oRm.write("<div");
				if (bHasTitle) {
					oRm.writeAttribute("role", "heading");
					oRm.writeAttribute("aria-level", oControl._getARIALevel());
				}
				oRm.addClass('sapUxAPObjectPageSubSectionHeaderTitle');
				if (oControl.getTitleUppercase()) {
					oRm.addClass("sapUxAPObjectPageSubSectionHeaderTitleUppercase");
				}
				oRm.writeAttributeEscaped("id", oControl.getId() + "-headerTitle");
				oRm.writeClasses();
				oRm.writeAttribute("data-sap-ui-customfastnavgroup", true);
				oRm.write(">");
				if (bHasTitle) {
					oRm.writeEscaped(oControl.getTitle());
				}
				oRm.write("</div>");
				if (bHasActions) {
					oRm.write("<div");
					oRm.addClass('sapUxAPObjectPageSubSectionHeaderActions');
					oRm.writeClasses();
					oRm.writeAttribute("data-sap-ui-customfastnavgroup", true);
					oRm.write(">");
					aActions.forEach(oRm.renderControl);
					oRm.write("</div>");
				}

				oRm.write("</div>");
			}

			oRm.write("<div");
			oRm.addClass("ui-helper-clearfix");
			oRm.addClass("sapUxAPBlockContainer");
			oRm.addClass("sapUxAPBlockContainer" + oControl._getMediaString());
			oRm.writeClasses();
			if (oControl._isHidden) {
				oRm.addStyle("display", "none");
			}
			oRm.writeStyles();
			oRm.write(">");

			oRm.renderControl(oControl._getGrid());

			oRm.write("<div");
			oRm.addClass("sapUxAPSubSectionSeeMoreContainer");
			oRm.writeClasses();
			oRm.write(">");
			oRm.renderControl(oControl._getSeeMoreButton());
			oRm.write("</div>");
			oRm.write("</div>");
			oRm.write("</div>");
		}
	});
});
}; // end of sap/ino/controls/ObjectPageSubSectionEnhance.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.OrientationType') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.controls.OrientationType");
(function() {
	"use strict";
 	sap.ino.controls.OrientationType = {
 		PORTRAIT: 0,
 		LANDSCAPE: 1
 	};
})();
}; // end of sap/ino/controls/OrientationType.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.ProcessIndicator') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.ProcessIndicator'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Icon'); // unlisted dependency retained
jQuery.sap.require('sap.base.security.sanitizeHTML'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/ProcessIndicator",[
	"sap/ui/core/Control",
	"sap/m/Label",
	"sap/m/Text",
	"sap/m/FlexBox",
    "sap/ui/core/Icon",
	"sap/base/security/sanitizeHTML"
], function(Control,
	Label,
	Text,
	FlexBox,
	Icon, sanitizeHTML) {
	"use strict";

	/**
	 *
	 * Control displaying the current status of a process.
	 *
	 * <ul>
	 * <li>Properties
	 * <ul>
	 * <li>currentStep: Currently active process step</li>
	 * <li>isDraft: </li>
	 * <li>phase: The name of the current process phase</li>
	 * <li>processSteps: Total number of process steps</li>
	 * <li>processStopped: If false, the displayed process is active and running</li>
	 * <li>status: The name of the current process status</li>
	 * <li>width: Desired width of the control in pixels</li>
	 * </ul>
	 * </ul>
	 */
	var ProcessIndicator = Control.extend("sap.ino.controls.ProcessIndicator", {

		metadata: {
			properties: {
				currentStep: {
					type: "int",
					defaultValue: 0
				},
				isDraft: {
					type: "boolean",
					defaultValue: false
				},
				phase: {
					type: "string"
				},
				processSteps: {
					type: "int",
					defaultValue: 6
				},
				processStopped: {
					type: "boolean",
					defaultValue: false
				},
				renderProcessFirst: {
					type: "boolean",
					defaultValue: false
				},
				status: {
					type: "string"
				},
				statusColor: {
					type: "string"
				},
				width: {
					type: "sap.ui.core.CSSSize",
					defaultValue: "160px"
				},
				displaySvg: {
					type: "boolean",
					defaultValue: true
				},
				displayStatus: {
					type: "boolean",
					defaultValue: true
				},
				visibleNewFlag:{
				    type: "boolean",
					defaultValue: false 
				}
			},
			aggregations: {
				"_status": {
					type: "sap.m.FlexBox",
					multiple: false,
					visibility: "hidden"
				},
				"_phase": {
					type: "sap.m.FlexBox",
					multiple: false,
					visibility: "hidden"
				}
			}
		},

		init: function() {
			this._oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ino.controls");
			if (sap.ui.core.Control.prototype.init) {
				sap.ui.core.Control.prototype.init.apply(this, arguments);
			}
		},

		_getPhase: function() {
			var oPhase = this.getAggregation("_phase");
			if (!oPhase) {
				oPhase = new FlexBox({
					items: [this._getPhaseLabel(), this._getPhaseText()],
					alignItems: "Start",
					justifyContent: "Start",
					alignContent: "Start"
				}).addStyleClass("sapInoProcessIndicatorPhase");
				this.setAggregation("_phase", oPhase);
			}
			return oPhase;
		},

		_getStatus: function() {
			var oStatus = this.getAggregation("_status");
			if (!oStatus) {
				oStatus = new FlexBox({
					items: [this._getStatusLabel(), this._getStatusText(),this._getStatusNewIcon()],
					alignItems: "Start",
					justifyContent: "Start",
					alignContent: "Start"
				}).addStyleClass("sapInoProcessIndicatorStatus");
				this.setAggregation("_status", oStatus);
			}
			return oStatus;
		},

		_getPhaseLabel: function() {
			var sPhase = this.getProperty("phase");
			if (this.getProperty("isDraft")) {
				sPhase = "";
			}
			return new Label({
				text: this._oRB.getText("CTRL_PROCESSINDICATOR_FLD_PHASE_LABEL"),
				tooltip: this._oRB.getText("CTRL_PROCESSINDICATOR_ALT_PHASE_TOOLTIP", sPhase)
			}).addStyleClass("sapInoProcessIndicatorPhaseLabel");
		},

		_getPhaseText: function() {
			var sPhase = this.getProperty("phase");
			if (this.getProperty("isDraft")) {
				sPhase = "";
			}
			return new Text({
				text: sPhase,
				tooltip: this._oRB.getText("CTRL_PROCESSINDICATOR_ALT_PHASE_TOOLTIP", sPhase)
			}).addStyleClass("sapInoProcessIndicatorPhaseText");
		},

		_getStatusLabel: function() {
			var sStatus = this.getProperty("status");
			return new Label({
				text: this._oRB.getText("CTRL_PROCESSINDICATOR_FLD_STATUS_LABEL"),
				tooltip: this._oRB.getText("CTRL_PROCESSINDICATOR_ALT_STATUS_TOOLTIP", sStatus)
			}).addStyleClass("sapInoProcessIndicatorStatusLabel");
		},
       _getStatusNewIcon: function(){
			return new Icon({
				tooltip: this._oRB.getText("CTRL_IDEA_OBJECT_LATEST_UPDATE_NEW"),
				visible: this.getProperty("visibleNewFlag"),
                src:"sap-icon://InoIcons/idea-news"				
			}).addStyleClass("sapInoIdeaLatestUpdateNewIcon");
       },
		_getStatusText: function() {
			var sStatus = this.getProperty("status");
			return new Text({
				text: sStatus,
				tooltip: this._oRB.getText("CTRL_PROCESSINDICATOR_ALT_STATUS_TOOLTIP", sStatus)
			}).addStyleClass("sapInoProcessIndicatorStatusText");
		},

		_renderInfoText: function(oRm, oControl, bRenderText) {
			if (bRenderText && !oControl.getProperty("isDraft") && this.getProperty("phase")) {
				oRm.renderControl(oControl._getPhase());
			}
			if ((bRenderText || oControl.getProperty("isDraft")) && this.getProperty("status") && oControl.getDisplayStatus()) {
				oRm.renderControl(oControl._getStatus());
			}
		},

		renderer: function(oRm, oControl) {
			var iSteps = oControl.getProperty("processSteps");
			var iCurrentStep = oControl.getProperty("currentStep");
			var iWidth = sanitizeHTML(oControl.getProperty("width").replace("px", ""));
			var bRenderText = false;
			if (oControl.getProperty("phase") || oControl.getProperty("status")) {
				bRenderText = true;
			}

			var iDiameter = 12;

			var fStartY = iDiameter / 2;
			var fStartX = iDiameter / 2;
			if (bRenderText) {
				fStartX = iDiameter / 2;
				fStartY = iDiameter / 2;
			}
			var fLineHeight = iDiameter / 2.5;

			var fStepX = 0;
			if (iSteps >= 2) {
				fStepX = (iWidth - fStartX * 2) / (iSteps - 1);
			}

			var fProgressLineWidth = ((iCurrentStep < 0) ? 0 : iCurrentStep * fStepX);
			if (iCurrentStep >= iSteps) {
				fProgressLineWidth = iWidth;
			}

			function line(x, y, iWidth, iHeight, sStyleClass) {
				oRm.write("<rect");
				oRm.writeAttributeEscaped("x", x);
				oRm.writeAttributeEscaped("y", y - iHeight / 2);
				oRm.writeAttributeEscaped("width", iWidth + "px");
				oRm.writeAttributeEscaped("height", iHeight + "px");
				oRm.addClass(sStyleClass);
				oRm.writeClasses();
				oRm.write("/>");
			}

			function circle(x, y, iRadius, sStyleClass) {
				oRm.write("<circle");
				oRm.writeAttributeEscaped("cx", x);
				oRm.writeAttributeEscaped("cy", y);
				oRm.writeAttributeEscaped("r", iRadius);
				oRm.addClass(sStyleClass);
				oRm.writeClasses();
				oRm.write("/>");
			}

			oRm.write("<div");
			oRm.writeControlData(oControl);
			oRm.addStyle("width", iWidth + "px");
			oRm.addStyle("overflow", "hidden");
			oRm.writeStyles();
			oRm.writeClasses();
			if (oControl.getProperty('phase') && oControl.getProperty('status')) {
				oRm.writeAttributeEscaped("title", oControl._oRB.getText("CTRL_PROCESSINDICATOR_ALT_NOTE", [oControl.getProperty('phase'), oControl.getProperty(
					'status')]));
			} else if (oControl.getProperty('phase') && !oControl.getProperty('status')) {
				oRm.writeAttributeEscaped("title", oControl._oRB.getText("CTRL_PROCESSINDICATOR_ALT_NOTE_WITHOUT_STATUS", [oControl.getProperty(
					'phase')]));
			} else if (!oControl.getProperty('phase') && oControl.getProperty('status')) {
				oRm.writeAttributeEscaped("title", oControl._oRB.getText("CTRL_PROCESSINDICATOR_ALT_NOTE_WITHOUT_PHASE", [oControl.getProperty(
					'status')]));
			}
			oRm.write(">");

			// accessibility: can be read w/ VPC
			oRm.write("<span style=\"position:absolute;clip:rect(1px,1px,1px,1px)\">");
			if (oControl.getProperty('phase') && oControl.getProperty('status')) {
				oRm.writeEscaped(oControl._oRB.getText("CTRL_PROCESSINDICATOR_ALT_NOTE", [oControl.getProperty('phase'), oControl.getProperty(
					'status')]));
			} else if (oControl.getProperty('phase') && !oControl.getProperty('status')) {
				oRm.writeEscaped(oControl._oRB.getText("CTRL_PROCESSINDICATOR_ALT_NOTE_WITHOUT_STATUS", [oControl.getProperty('phase')]));
			} else if (!oControl.getProperty('phase') && oControl.getProperty('status')) {
				oRm.writeEscaped(oControl._oRB.getText("CTRL_PROCESSINDICATOR_ALT_NOTE_WITHOUT_PHASE", [oControl.getProperty('status')]));
			}
			oRm.write("</span>");

			if (oControl.getDisplaySvg()) {
				oRm.write("<svg");
				oRm.writeAttribute("focusable", "false"); // required by IE
				oRm.addStyle("width", iWidth + "px");
				oRm.addStyle("height", iDiameter + "px");

				oRm.writeStyles();
				oRm.writeClasses();
				oRm.write(">");

				var sClassName = "sapInoProcessIndicatorActive";
				if (oControl.getProcessStopped()) {
					sClassName = "sapInoProcessIndicatorStopped";
				}

				if (iSteps > 1) {
					line(fStartX, fStartY, fProgressLineWidth, fLineHeight, sClassName);
					line(fStartX + fProgressLineWidth, fStartY, iWidth - fProgressLineWidth - iDiameter, fLineHeight, "sapInoProcessIndicatorInactive");
				}

				for (var i = 0; i < iSteps; i++) {
					var x = i * fStepX + fStartX;
					var sStepClassName = sClassName;
					if (i > iCurrentStep || oControl.getProperty("isDraft")) {
						sStepClassName = "sapInoProcessIndicatorInactive";
					}
					circle(x, fStartY, iDiameter / 2, sStepClassName);
				}

				oRm.write("</svg>");
			}
			if (!oControl.getRenderProcessFirst()) {
				oControl._renderInfoText(oRm, oControl, bRenderText);
			}

			if (oControl.getRenderProcessFirst()) {
				oControl._renderInfoText(oRm, oControl, bRenderText);
			}

			oRm.write("</div>");
		},
		onAfterRendering: function() {
			var sStatusColor = this.getModel("object") ? this.getModel("object").getProperty("/STATUS_COLOR") : null ||
				this.getProperty("statusColor");
			if (sStatusColor && sStatusColor.length === 6) {
				sStatusColor = "#" + sStatusColor;
			} else {
				sStatusColor = "#333333";
			}
			if (this.getModel("object")) {
				$(".sapInoProcessIndicatorStatusText").css('color', sStatusColor);
			} else {
				if (this.getDomRef()) {
					$(this.getDomRef()).find('.sapInoProcessIndicatorStatusText').css("color", sStatusColor);
				}
			}
		}
	});

	ProcessIndicator.prototype.bindProperty = function(sKey, oBinding) {
		Control.prototype.bindProperty.apply(this, arguments);
		switch (sKey) {
			case "status":
				var oStatusText = this._getStatus().getItems()[1];
				oStatusText.bindProperty("text", oBinding);
				break;
			case "phase":
				Control.prototype.bindProperty.apply(this, arguments);
				var oPhaseText = this._getPhase().getItems()[1];
				oPhaseText.bindProperty("text", oBinding);
				break;
			default:
				break;
		}
	};
	ProcessIndicator.prototype.setVisibleNewFlag = function(oValue) {
		this.setProperty("visibleNewFlag", oValue);
		var oStatusNewLabel = this._getStatus().getItems()[2];
		oStatusNewLabel.setVisible(oValue);
	};
	ProcessIndicator.prototype.setStatus = function(oValue) {
		this.setProperty("status", oValue);
		var oStatusLabel = this._getStatus().getItems()[0];
		oStatusLabel.setText(this._oRB.getText("CTRL_PROCESSINDICATOR_FLD_STATUS_LABEL", oValue));
		oStatusLabel.setTooltip(this._oRB.getText("CTRL_PROCESSINDICATOR_ALT_STATUS_TOOLTIP", oValue));
		var oStatusText = this._getStatus().getItems()[1];
		oStatusText.setText(oValue);
	};

	ProcessIndicator.prototype.setPhase = function(oValue) {
		this.setProperty("phase", oValue);
		var oPhaseLabel = this._getPhase().getItems()[0];
		oPhaseLabel.setText(this._oRB.getText("CTRL_PROCESSINDICATOR_FLD_PHASE_LABEL", oValue));
		oPhaseLabel.setTooltip(this._oRB.getText("CTRL_PROCESSINDICATOR_ALT_PHASE_TOOLTIP", oValue));
		var oPhaseText = this._getPhase().getItems()[1];
		oPhaseText.setText(oValue);
	};

	return ProcessIndicator;
});
}; // end of sap/ino/controls/ProcessIndicator.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.QuickViewGroupDimension') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.QuickViewGroupDimension'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.QuickViewGroup'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/QuickViewGroupDimension",[
    "sap/m/QuickViewGroup"
], function(QuickViewGroup) {
	"use strict";

	return QuickViewGroup.extend("sap.ino.controls.QuickViewGroupDimension", {
		metadata: {
			properties: {
				dimensionTitle: {
					type: "string",
					defaultValue: ""
				},
				headingIcon: {
					type: "string",
					defaultValue: ""
				},
				totalPoints:{
                    type: "int", 
				    defaultValue:""
				},
				pointsToNextLevel:{
                    type: "int", 
				    defaultValue:""				    
				},
				currentPointsBWBadge: {
                    type: "int", 
				    defaultValue:""					    
				},
				diffPointsToNextLevel:{
                    type: "int", 
				    defaultValue:""					    
				},
				startLevel:{
					type: "string",
					defaultValue: ""				    
				},
				nextLevel:{
					type: "string",
					defaultValue: ""				    
				},
				dimensionUnit: {
				    type: "string",
					defaultValue: ""			    
				},
				redeemPoints:{
                     type: "int", 
				     default:""					    
				},
				redeemEnabled:{
	                type: "boolean",
				    defaultValue: false				    
				},
				showOnlyDimension:{
	                type: "boolean",
				    defaultValue: false				    
				}				
			}//,
        //   aggregations:{
        //     dimensionElements:{
        //         type:"sap.ino.controls.QuickViewGroupDimensionElement",
        //         multiple: true
        //     }
        //     }
		}
	});
});
}; // end of sap/ino/controls/QuickViewGroupDimension.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.QuickViewPageEnhance') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.QuickViewPageEnhance'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.QuickViewPage'); // unlisted dependency retained
jQuery.sap.require('sap.m.Toolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.OverflowToolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Icon'); // unlisted dependency retained
jQuery.sap.require('sap.m.Title'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.Image'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.VerticalLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.HorizontalLayout'); // unlisted dependency retained
jQuery.sap.require('sap.m.HBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.SimpleForm'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.library'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.ResponsiveGridLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Title'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.ProgressIndicator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.GridData'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.Grid'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.LayoutData'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/QuickViewPageEnhance",[
    "sap/m/QuickViewPage",
    "sap/m/Toolbar",
    "sap/m/OverflowToolbar",
    "sap/m/ToolbarSpacer",
    "sap/ui/core/Icon",
    "sap/m/Title",
    "sap/m/Button",
    "sap/m/Image",
	 'sap/ui/layout/VerticalLayout',
	'sap/ui/layout/HorizontalLayout',
	'sap/m/HBox',
	'sap/m/VBox',
	'sap/ui/layout/form/SimpleForm',
	'sap/ui/layout/library',
	'sap/ui/layout/form/ResponsiveGridLayout',
     'sap/ui/core/Title',
     'sap/m/Label',
     'sap/m/Text',
     "sap/m/ProgressIndicator",
     "sap/ui/layout/GridData",
     "sap/ui/layout/Grid",
     "sap/ui/core/LayoutData"
], function(QuickViewPage, Toolbar, OverflowToolbar, ToolbarSpacer, Icon, Title, Button, Image, VerticalLayout, HorizontalLayout, HBox,
	VBox, SimpleForm, layoutLibrary, ResponsiveGridLayout, CoreTitle, Label, Text, ProgressIndicator, GridData, Grid, LayoutData) {
	"use strict";

	// shortcut for sap.ui.layout.form.SimpleFormLayout
	var SimpleFormLayout = layoutLibrary.form.SimpleFormLayout;
	return QuickViewPage.extend("sap.ino.controls.QuickViewPageEnhance", {
		metadata: {
			properties: {
				headerToolBarIcon: {
					type: "string",
					group: "Misc",
					defaultValue: ""
				},
				headerToolBarText: {
					type: "string",
					group: "Misc",
					defaultValue: ""
				},
				visibleLeaderBoard: {
					type: "boolean",
					defaultValue: false
				},
				visibleDimension: {
					type: "boolean",
					defaultValue: false
				}
			},
			aggregations: {
				horizontalBox: {
					type: "sap.m.HBox"
				},
				dimensionGroups: {
					type: "sap.ino.controls.QuickViewGroupDimension",
					multiple: true
				}
			},
			events: {
				navigate: {}
			}
		},
		init: function() {
			QuickViewPage.prototype.init.apply(this, arguments);
			this._oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ino.controls");
		},
		_createPage: function() {
			var that = this;

			var oPage = QuickViewPage.prototype._createPage.apply(this, arguments);
			if (!this.getVisibleLeaderBoard()) {
				return oPage;
			}
			var oImage = new Image({
				src: this.getHeaderToolBarIcon()
			});
			var oTitle = new Title({
				text: this.getHeaderToolBarText()
			});
			var oButton = new Button({
				icon: "sap-icon://navigation-right-arrow",
				tooltip: this._oRB.getText("CTRL_GAMIFICATION_NAVIGATION_TO_LEADER_BOARD"),
				press: function() {
					that._onNavigateTo();
				}
			});
			oImage.addStyleClass("sapInoQuickViewPageHeaderImage");
			oTitle.addStyleClass("sapInoQuickViewPageHeaderText");
			oButton.addStyleClass("sapInoQuickViewPageHeaderButton");
			var oToolBar = new Toolbar();
			oToolBar.addContent(oImage);
			oToolBar.addContent(oTitle);
			oToolBar.addContent(new ToolbarSpacer());
			oToolBar.addContent(oButton);
			oToolBar.addStyleClass("sapInoQuickViewPageHeaderToolBar");
			oPage.setSubHeader(oToolBar);
			oPage.addStyleClass("sapInoQuickViewPageEnhanceHeader");
			if (this._mPageContent.header) {
				oPage.insertContent(this._mPageContent.dimensionForm, 1);
			} else {
				oPage.insertContent(this._mPageContent.dimensionForm, 0);
			}

			return oPage;
		},
		_onNavigateTo: function() {
			this.fireNavigate();
		},
		_createPageContent: function() {
			var mPageContent = QuickViewPage.prototype._createPageContent.apply(this, arguments);
			if (!this.getVisibleDimension()) {
				return this._mPageContent;
			}
			var oDimensionForm = this._createDimensionForm();

			this._mPageContent.dimensionForm = oDimensionForm;
			this._mPageContent = mPageContent;
			return this._mPageContent;
		},
		_createDimensionForm: function() {
			var aDimensionGroups = this.getAggregation("dimensionGroups");
			// 			var oForm = new SimpleForm({
			// 				editable: false,
			// 				layout: SimpleFormLayout.ResponsiveGridLayout,
			// 				labelSpanL:4,
			// 				labelSpanM:4,
			// 				labelSpanS:4,
			// 				labelSpanXL:-1
			// 			});
			//var oHBox = new HBox({ width:"100%"});
			var oGrid = new Grid({
				width: "100%",
				defaultSpan: "XL12 L12 M12 S12"
			});
			if (aDimensionGroups) {
				for (var j = 0; j < aDimensionGroups.length; j++) {
					if (aDimensionGroups[j].getVisible()) {
						this._renderDimensionGroup(aDimensionGroups[j], oGrid);
					}
				}

			}

			oGrid.addStyleClass("sapInoDimensionGrid");
			return oGrid;
		},
		_renderDimensionGroup: function(oGroup, oGrid) {
			var oVBox = new VBox({
				width: "100%",
				layoutData: new GridData({
					span: "XL12 L12 M12 S12"
				})
			});
			oVBox.addStyleClass("sapInoDimensionVBox");
			var bRedeemEnabled = oGroup.getRedeemEnabled();
			if (oGroup.getHeading()) {
				var oTitle = new Label({
					text: oGroup.getHeading(),
					tooltip: oGroup.getHeading()
				});
				oTitle.addStyleClass("sapInoDimensionTitle");
				var oImage = new Image({
					src: oGroup.getHeadingIcon()
				});
				if (oGroup.getHeadingIcon()) {
					oImage.addStyleClass("sapInoDimensionImage");
				}
				var oHBoxTitle = new HBox({
					items: [oImage, oTitle]
				});
				oHBoxTitle.addStyleClass("sapInoDimensionHBoxLine sapInoDimensionHBoxHeader");
				oVBox.addItem(oHBoxTitle);
			}
			if (!oGroup.getShowOnlyDimension()) {
				var sTextTotalPoints = this._oRB.getText('CTRL_GAMIFICATION_DIMENSION_TOTAL_POINTS', [oGroup.getDimensionUnit()]);
				var oLabelPoints = new Label({
					text: sTextTotalPoints,
					tooltip: sTextTotalPoints
				});
				var oLblTotalPoint = new Label({
					text: oGroup.getTotalPoints()
				});
				var oLblCommon = new Label({
					text: ":"
				});
				var oHBoxPoints = new HBox({
					items: [oLabelPoints, oLblCommon, oLblTotalPoint]
				});
				oLabelPoints.addStyleClass("sapInoDimensionLblDesc");
				oLblTotalPoint.addStyleClass("sapInoDimensionSmallMarginleft sapInoDimensionNumberText");
				if (bRedeemEnabled) {
					var sTextRedeemPoints = this._oRB.getText('CTRL_GAMIFICATION_DIMENSION_TOTAL_REDEEM_POINTS', [oGroup.getDimensionUnit()]);
					var sLableRedeemPoints = new Label({
						text: sTextRedeemPoints,
						tooltip: sTextRedeemPoints
					});
					var oLblTotalRedeemPoints = new Label({
						text: oGroup.getRedeemPoints()
					});
					var oLblCommon1 = new Label({
						text: ":"
					});
					sLableRedeemPoints.addStyleClass("sapInoDimensionSmallMarginleft sapInoDimensionLblReedemDesc");
					oLblTotalRedeemPoints.addStyleClass("sapInoDimensionSmallMarginleft sapInoDimensionNumberText");
					oHBoxPoints.addItem(sLableRedeemPoints);
					oHBoxPoints.addItem(oLblCommon1);
					oHBoxPoints.addItem(oLblTotalRedeemPoints);
				}
				oHBoxPoints.addStyleClass("sapInoDimensionHBoxLine sapInoDimensionHBoxTotalPoints");
				oVBox.addItem(oHBoxPoints);
				if (!bRedeemEnabled) {
					if (oGroup.getNextLevel()) {
						//If the next Level has values then add the item
						var sTextFirst = this._oRB.getText('CTRL_GAMIFICATION_DIMENSION_NEED');
						var sTextLast = this._oRB.getText('CTRL_GAMIFICATION_DIMENSION_TO_NEXT_LEVEL', [oGroup.getDimensionUnit()]);
						var oLableNeedPointsFirst = new Label({
							text: sTextFirst,
							tooltip: sTextFirst + oGroup.getPointsToNextLevel() + " " + sTextLast
						});
						var oLableNeddPonints = new Label({
							text: oGroup.getPointsToNextLevel(),
							tooltip: sTextFirst + oGroup.getPointsToNextLevel() + " " + sTextLast
						});
						var oLableNeedPointsLast = new Label({
							text: sTextLast,
							tooltip: sTextFirst + oGroup.getPointsToNextLevel() + " " + sTextLast
						});
						oLableNeddPonints.addStyleClass("sapInoDimensionSmallMarginleft sapInoDimensionNeedPointsText");
						oLableNeedPointsLast.addStyleClass("sapInoDimensionSmallMarginleft sapInoDimensionLblLevelDesc");
						var oHBoxNeedPoints = new HBox({
							items: [oLableNeedPointsFirst, oLableNeddPonints, oLableNeedPointsLast]
						});
						oHBoxNeedPoints.addStyleClass("sapInoDimensionHBoxLine");
						oVBox.addItem(oHBoxNeedPoints);
					}

					var iPercentage;
					var iDiffPoints = oGroup.getDiffPointsToNextLevel();
					var iToNextPoints = oGroup.getCurrentPointsBWBadge();
					if (iDiffPoints > 0 && iDiffPoints > iToNextPoints) {
						iPercentage = parseInt((iToNextPoints / iDiffPoints * 100).toFixed(), 10);
					} else {
						iPercentage = 0;
					}
					//No End Level so keep 100 percent
					if (!oGroup.getNextLevel()) {
						iPercentage = 100;
					}
					if (oGroup.getStartLevel() || oGroup.getNextLevel()) {
						var oProgressIndicator = new ProgressIndicator({
							percentValue: iPercentage,
							state: "Warning"
						});
						oProgressIndicator.addStyleClass("sapInoDimensionProgressIndicator");
						oVBox.addItem(oProgressIndicator);

						var oStartLevel = new Label({
							text: oGroup.getStartLevel()
						});
						var oNextLevel = new Label({
							text: oGroup.getNextLevel()
						});
						var oHBoxLevel = new HBox({
							items: [oStartLevel, oNextLevel]
						});
						oHBoxLevel.addStyleClass("sapInoDimensionHBoxLine sapInoDimensionHBoxLevel");
						oVBox.addItem(oHBoxLevel);
					}
				}
			}
			oGrid.addContent(oVBox);
		}

	});
});
}; // end of sap/ino/controls/QuickViewPageEnhance.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.QuickViewPageEnhanceRenderer') ) {
/*!
 * UI development toolkit for HTML5 (OpenUI5)
 * (c) Copyright 2009-2017 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare('sap.ino.controls.QuickViewPageEnhanceRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.layout.GridData'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/QuickViewPageEnhanceRenderer",[     "sap/ui/layout/GridData"],
	function(GridData) {
		"use strict";

		/**
		 * @class QuickViewPage renderer.
		 * @static
		 */
		var QuickViewPageEnhanceRenderer = {};

		/**
		 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
		 *
		 * @param {sap.ui.core.RenderManager}
		 *          oRm the RenderManager that can be used for writing to the render output buffer
		 * @param {sap.ui.core.Control}
		 *          oQuickView an object representation of the control that should be rendered
		 */
		QuickViewPageEnhanceRenderer.render = function(oRm, oQuickViewPage) {

			var mPageContent = oQuickViewPage.getPageContent();

			oRm.write("<div");
			oRm.addClass("sapMQuickViewPage sapInoMySettingPage");
			oRm.writeControlData(oQuickViewPage);
			oRm.writeClasses();
			oRm.write(">");

			if (mPageContent.header) {
				oRm.renderControl(mPageContent.header);
			}
			if(mPageContent.dimensionForm){
			   var aContents = mPageContent.dimensionForm.getContent();
			   for(var i = 0; i < aContents.length; i++){
			       aContents[i].setLayoutData(new GridData({span:"XL5 L5 M12 S12"}));
			   }
			   oRm.renderControl(mPageContent.dimensionForm);
			}
			oRm.renderControl(mPageContent.form);
			oRm.write("</div>");
		};

		return QuickViewPageEnhanceRenderer;

	}, /* bExport= */ true);

}; // end of sap/ino/controls/QuickViewPageEnhanceRenderer.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.ReportMicroChart') ) {
jQuery.sap.declare('sap.ino.controls.ReportMicroChart'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.microchart.ColumnMicroChart'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.microchart.AreaMicroChart'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.microchart.ComparisonMicroChart'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.microchart.HarveyBallMicroChart'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.microchart.RadialMicroChart'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/ReportMicroChart",[
	"sap/ui/core/Control",
	"sap/suite/ui/microchart/ColumnMicroChart",
	"sap/suite/ui/microchart/AreaMicroChart",
	"sap/suite/ui/microchart/ComparisonMicroChart",
	"sap/suite/ui/microchart/HarveyBallMicroChart",
	"sap/suite/ui/microchart/RadialMicroChart"
], function (Control, ColumnMicroChart, AreaMicroChart, ComparisonMicroChart, HarveyBallMicroChart, RadialMicroChart) {
	"use strict";
	
	var mColor = ["Good", "Error", "Critical", "Neutral"];

	return Control.extend("sap.ino.controls.ReportMicroChart", {

		metadata: {
			properties: {
				chartType: {type: "string", defaultValue: "Column"}
			},
			aggregations: {
				_chart: {multiple: false, visibility: "hidden"}
			},
			events: {
			}
		},

		init: function () {
			//this.setAggregation("_chart", this._createChart());
			sap.ui.getCore().loadLibrary("sap.suite.ui.microchart");
		},
		
		_createChart: function() {
			var oChart;

			switch (this.getProperty("chartType")) {
				case "Column":
					oChart = new ColumnMicroChart();
					break;
				case "Area":
					oChart = new AreaMicroChart({
						width: "160px",
						height: "120px"
					});
					break;
				case "Comparison":
					oChart = new ComparisonMicroChart();
					break;
				case "HarveyBall":
					oChart = new HarveyBallMicroChart({
						total: 100,
						totalScale: " ",
						showFractions: true
					});
					break;
				case "Radial":
					oChart = new RadialMicroChart();
					break;
				default:
					oChart = new ColumnMicroChart();
					break;
			}
			
			return oChart;
		},
		
		addChartItems: function(aData, oTileConfiguration) {
		    var oChart = this.getAggregation("_chart");
			var sMicroChartType = oTileConfiguration.Chart.Type;
			this.getAggregation("_chart").setTooltip(this._createChartTooltip(aData, oTileConfiguration));

			switch (sMicroChartType) {
				case "Column":
					jQuery.each(aData, function(iIndex, oResult) {
						oChart.addColumn(new sap.suite.ui.microchart.ColumnMicroChartData({
							color: mColor[iIndex % 4],
							label: oResult[oTileConfiguration.Dimensions[0]],
							value: oResult[oTileConfiguration.Measures[0]]
						}));
					});
					break;
				case "Area":
					var oAreaMicroChartItem = new sap.suite.ui.microchart.AreaMicroChartItem({
						color: "Good"
					});
					var iXLength = 100 / aData.length;
					jQuery.each(aData, function(iIndex, oResult) {
						oAreaMicroChartItem.addPoint(new sap.suite.ui.microchart.AreaMicroChartPoint({
							x: iXLength * iIndex,
							y: oResult[oTileConfiguration.Measures[0]]
						}));
					});
					oChart.addLine(oAreaMicroChartItem);
					break;
				case "Comparison":
					jQuery.each(aData, function(iIndex, oResult) {
						oChart.addData(new sap.suite.ui.microchart.ComparisonMicroChartData({
							color: mColor[iIndex % 4],
							title: oResult[oTileConfiguration.Dimensions[0]],
							value: oResult[oTileConfiguration.Measures[0]]
						}));
					});
					break;
				case "HarveyBall":
					var fTotal = 0;

					jQuery.each(aData, function(iIndex, oResult) {
						oChart.addItem(new sap.suite.ui.microchart.HarveyBallMicroChartItem({
							color: "Good",
							fractionLabel: oResult[oTileConfiguration.Dimensions[0]],
							fraction: oResult[oTileConfiguration.Measures[0]],
							fractionScale: " "
						}));

						fTotal += oResult[oTileConfiguration.Measures[0]];
					});

					if (fTotal) {
						oChart.setTotal(fTotal);
					}
					break;
				case "Radial":
					var fRadialTotal = 0;
					jQuery.each(aData, function(iIndex, oData) {
						fRadialTotal += oData[oTileConfiguration.Measures[0]];
					});

					oChart.setTotal(fRadialTotal);
					oChart.setFraction(aData[0][oTileConfiguration.Measures[0]]);
					oChart.setValueColor("Good");
					break;
				case "TopList":
					aData.sort(function(a, b) {
						return b[oTileConfiguration.Measures[0]] - a[oTileConfiguration.Measures[0]];
					});
					var iCount = aData.length < 3 ? aData.length : 3;
					for (var i = 0; i < iCount; i++) {
						oChart.addColumn(new sap.suite.ui.microchart.ColumnMicroChartData({
							color: mColor[i % 4],
							label: aData[i][oTileConfiguration.Dimensions[0]],
							value: aData[i][oTileConfiguration.Measures[0]]
						}));
					}
					break;
				default:
					jQuery.each(aData, function(iIndex, oResult) {
						oChart.addColumn(new sap.suite.ui.microchart.ColumnMicroChartData({
							color: mColor[iIndex % 4],
							label: oResult[oTileConfiguration.Dimensions[0]],
							value: oResult[oTileConfiguration.Measures[0]]
						}));
					});
					break;
			}
		},
		
		_createChartTooltip: function(aData, oTileConfiguration) {
			var sTooltip = "";

			if (oTileConfiguration.Content === "TopList") {
				aData.sort(function(a, b) {
					return b[oTileConfiguration.Measures[0]] - a[oTileConfiguration.Measures[0]];
				});
				var iCount = aData.length < 3 ? aData.length : 3;
				for (var i = 0; i < iCount; i++) {
					sTooltip += aData[i][oTileConfiguration.Dimensions[0]] + " " + aData[i][oTileConfiguration.Measures[0]];
					sTooltip += (i !== iCount - 1) ? "\n" : "";
				}
			} else {
				jQuery.each(aData, function(iIndex, oResult) {
					sTooltip += oResult[oTileConfiguration.Dimensions[0]] + " " + oResult[oTileConfiguration.Measures[0]];
					sTooltip += (iIndex !== aData.length) ? "\n" : "";
				});
			}

			return sTooltip;
		},
		
		renderer: function (oRM, oControl) {
		    oControl.setAggregation("_chart", oControl._createChart());
		    //oControl._addChartItems(oControl.getModel("odata").oData.results, oControl.getModel("object").oData);
		    
			oRM.write("<div");
			oRM.writeControlData(oControl);
			oRM.writeClasses();
			oRM.write(">");
			oRM.renderControl(oControl.getAggregation("_chart"));
			oRM.write("</div>");
		}
	});

});

}; // end of sap/ino/controls/ReportMicroChart.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.RichTextEditor') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.RichTextEditor'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.richtexteditor.RichTextEditor'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/RichTextEditor",[
	"sap/ui/richtexteditor/RichTextEditor",
	'sap/ui/core/Popup'
], function (RichTextEditor, Popup) {
	"use strict";
	
	/**
	 * 
	 * Works like sap.ui.richtexteditor.RichTextEditor. It is enhanced with a
	 * Value State property so that we can show any error state.
	 * 
	 * <ul>
	 * <li>Properties
	 * <ul>
	 * <li>enabled: is editor enabled (currently not used, only for
	 * correspondence to other controls)</li>
	 * </ul>
	 * <ul>
	 * <li>valueState: sap.ui.core.ValueState</li>
	 * </ul>
	 * </li>
	 * </ul>
	 */
     
	return RichTextEditor.extend("sap.ino.controls.RichTextEditor", {
	    
        metadata : {
            properties : {
                "valueState" : {
                    type : "sap.ui.core.ValueState",
                    defaultValue : sap.ui.core.ValueState.None
                },
                "valueStateText" : {
                    type: "string",
                    defaultValue: null
                }
            }
        },
        
        exit : function() {
            if ( this._popup ){
                this._popup.destroy();
                this._popup = null;
    		}
        },
        
        refreshDataState : function (sName, oDataState) {
            if (sName === "value") {
                this.propagateMessages(sName, oDataState.getMessages());
            }
        },
        
        propagateMessages : function(sName, aMessages) {
            if (aMessages && aMessages.length > 0) {
                this.setValueState(aMessages[0].type);
                this.setValueStateText(aMessages[0].message);
            } else {
                this.setValueState(sap.ui.core.ValueState.None);
                this.setValueStateText('');
                this.closeValueStateMessage();
            }
        },
    	
        setValueStateText : function (sText) {
		    this.setProperty("valueStateText", sText, true);
		    this.$("message-text").text( this.getValueStateText() );
		    return this;
        },
	    
        setValueState : function(sValueState) {
            this.setProperty("valueState", sValueState, true);
            var $rte = this.$();
            if($rte) {
                $rte.removeClass("sapUiInoRteTfErr");
                $rte.removeClass("sapUiInoRteTfSucc");
                $rte.removeClass("sapUiInoRteTfWarn");
                
                var sStyleClass = this._getStyleClassForValueState();
                if (sStyleClass) {
                    $rte.addClass(sStyleClass);
                } 
            }
        },
        
        _getStyleClassForValueState : function() {
            switch (this.getValueState()) {
                case (sap.ui.core.ValueState.Error) :
                    return "sapUiInoRteTfErr";
                case (sap.ui.core.ValueState.Success) :
                    return "sapUiInoRteTfSucc";
                case (sap.ui.core.ValueState.Warning) :
                    return "sapUiInoRteTfWarn";
            }
        },
        
		getDomRefForValueStateMessage : function(){
		    return this.getFocusDomRef();
	    },
	    
		closeValueStateMessage : function (){
            if (this._popup) {
                this._popup.close();
            }
            var $Input = jQuery(this.getFocusDomRef());
            $Input.removeAriaDescribedBy(this.getId() + "-message");
	    },
    
        openValueStateMessage : function () {
            var sState = this.getValueState();
            
            if (this.getEditable()) {
            
            	// get value state text
            	var sText = this.getValueStateText();
            	if (!sText) {
            		sText = sap.ui.core.ValueStateSupport.getAdditionalText(this);
            	}
            
            	if (!sText) {
            		return;
            	}
            
            	// create message popup
            	var sMessageId = this.getId() + "-message";
            	if (!this._popup) {
            	    
               	    this._popup = new Popup(jQuery("<span></span>")[0] /*Just some dummy */, false, false, false);
            		this._popup.attachClosed(function () {
            			jQuery.sap.byId(sMessageId).remove();
            		});
            	}
            
            	var $Input = jQuery(this.getFocusDomRef());
     			var mDock = Popup.Dock;
     			var bIsRightAligned = $Input.css("text-align") === "right";
            
            	var sClass = "sapMValueStateMessage sapMValueStateMessage" + sState;
            	var sTextClass = "sapMInputBaseMessageText";
            	var oRB = sap.ui.getCore().getLibraryResourceBundle("sap.m");
            	if (sState === sap.ui.core.ValueState.Success) {
            		sClass = "sapUiInvisibleText";
            		sText = "";
            	}
            
            	var $Content = jQuery("<div>", {
            		"id": sMessageId,
            		"class": sClass,
            		"role": "tooltip",
            		"aria-live": "assertive"
            	}).append(
            		jQuery("<span>", {
            			"aria-hidden": true,
            			"class": "sapUiHidden",
            			"text": oRB.getText("INPUTBASE_VALUE_STATE_" + sState.toUpperCase())
            		})
            	).append(
            		jQuery("<span>", {
            			"id": sMessageId + "-text",
            			"class": sTextClass,
            			"text": sText
            		})
            	);
            
            	this._popup.setContent($Content[0]);
            
                this._popup.close(0);
                var that = this;
                this._popup.open(
            		200,
    				bIsRightAligned ? mDock.EndTop : mDock.BeginTop,
    				bIsRightAligned ? mDock.EndBottom : mDock.BeginBottom,
            		this.getDomRefForValueStateMessage(),
            		"0 4",
            		null,
            		function() {
            			that._popup.close();
                    }
            	);
            	
            	// Check whether popup is below or above the input
            	if ($Input.offset().top < this._popup._$().offset().top) {
            		this._popup._$().addClass("sapMInputBaseMessageBottom");
            	} else {
            		this._popup._$().addClass("sapMInputBaseMessageTop");
            	}
            
            	$Input.addAriaDescribedBy(sMessageId);
            }
        },
        
        renderer : "sap.ui.richtexteditor.RichTextEditorRenderer",
    	
		onfocusin : function(oEvent) {
    		// iE10+ fires the input event when an input field with a native
			// placeholder is focused
    		this._bIgnoreNextInput = !this.bShowLabelAsPlaceholder &&
    									sap.ui.Device.browser.msie &&
    									sap.ui.Device.browser.version > 9 &&
    									(jQuery.type(this.getPlaceholder) === "function" && !!this.getPlaceholder()) &&
    									!this._getInputValue();
    
    		this.$().toggleClass("sapMFocus", true);
    		if (sap.ui.Device.support.touch) {
    			// listen to all touch events
    			jQuery(document).on('touchstart.sapMIBtouchstart', jQuery.proxy(this._touchstartHandler, this));
    		}
    
    		// open value state message popup when focus is in the input
    		this.openValueStateMessage();
    	},
    	
    	onfocusout : function(oEvent) {
    		this.$().toggleClass("sapMFocus", false);
    
    		// remove touch handler from document for mobile devices
    		jQuery(document).off(".sapMIBtouchstart");

    		// close value state message popup when focus is out of the input
    		this.closeValueStateMessage();
    	}
	});
});
}; // end of sap/ino/controls/RichTextEditor.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.SidePanel') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.SidePanel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.HorizontalLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Icon'); // unlisted dependency retained
jQuery.sap.require('sap.base.security.sanitizeHTML'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/SidePanel",[
    "sap/ui/core/Control",
    "sap/ui/layout/HorizontalLayout",
    "sap/ui/core/Icon",
	"sap/base/security/sanitizeHTML"
], function(Control, HorizontalLayout, Icon, sanitizeHTML) {
    "use strict";

    /**
     * 
     * An side panel
     * 
     * <ul>
     * <li>Properties
     * <ul>
     * <li>openerSide: Side the opener is displayed</li>
     * <li>openerPosition: Position of the opener</li>
     * <li>openerIcon: Icon content of the opener</li>
     * <li>expanded: State if opener is expanded or collapsed</li>
     * <li>openerTooltipShow: Tooltip of opener in collapsed state</li>
     * <li>openerTooltipHide: Tooltip of opener in expanded state</li>
     * </ul>
     * </li>
     * <li>Aggregations
     * <ul>
     * <li>content: Content of the side panel</li>
     * <li>_openerIcon: Opener icon</li>
     * <li>_panel: Side panel</li>
     * </ul>
     * </li>
     * <li>Events
     * <ul>
     * </ul>
     * </li>
     * </ul>
     */

    var Orientation = {
        LEFT : 0,
        RIGHT : 1
    };

    var SidePanel = Control.extend("sap.ino.controls.SidePanel", {
        metadata : {
            properties : {
                openerSide : {
                    type : "int",
                    defaultValue : Orientation.RIGHT
                },
                openerPosition : { // 0% - begin, 100% - end
                    type : "sap.ui.core.CSSSize",
                    defaultValue : "10%"
                },
                openerIcon : {
                    type : "sap.ui.core.URI",
                    defaultValue : "sap-icon://settings"
                },
                expanded : {
                    type : "boolean",
                    defaultValue : false
                },
                openerTooltipShow : {
                    type : "string",
                    defaultValue : undefined
                },
                openerTooltipHide : {
                    type : "string",
                    defaultValue : undefined
                },
                showOpener : {
                    type: "boolean",
                    defaultValue : true
                },
                showBorder : {
                    type: "boolean",
                    defaultValue : true
                },
                width : {
                    type : "string"
                }
            },
            aggregations : {
                content : {
                    type : "sap.ui.core.Control",
                    multiple : false
                },
                _openerIcon : {
                    type : "sap.ui.core.Icon",
                    multiple : false,
                    visibility : "hidden"
                },
                _panel : {
                    type : "sap.ui.core.Control",
                    multiple : false,
                    visibility : "hidden"
                }
            }, 
            events : {
                changed : {}
            }
        },

        getOpenerIconControl : function() {
            var oOpenerIcon = this.getAggregation("_openerIcon");
            if (!oOpenerIcon) {
                oOpenerIcon = new Icon({
                    src : this.getOpenerIcon()
                });
                this.setAggregation("_openerIcon", oOpenerIcon, true);
            }
            return oOpenerIcon;
        },

        getPanel : function() {
            var oSidePanel = this.getAggregation("_panel");
            if (!oSidePanel) {
                oSidePanel = new HorizontalLayout();
                this.setAggregation("_panel", oSidePanel, true);
            }
            return oSidePanel;
        },

        constructor : function() {
            Control.apply(this, arguments);
            var oContent = this.getContent();
            if (oContent) {
                this.getPanel().addContent(oContent);
            }
        },

        exit : function() {
            var sOpenerId = this.getId() + "-opener";
            jQuery("#" + sOpenerId).off();
        },
        
        open : function() {
            if (this.getExpanded()) {
                return;
            }
            this.toggle();
        },
        
        close : function() {
            if (!this.getExpanded()) {
                return;
            }
            this.toggle();
        },

        toggle : function() {
            var that = this;
            var sAddStyle = that.getExpanded() ? "sapInoSidePanelCollapsed" : "sapInoSidePanelExpanded";
            var sRemoveStyle = that.getExpanded() ? "sapInoSidePanelExpanded" : "sapInoSidePanelCollapsed";

            jQuery("#" + that.getId()).addClass(sAddStyle);
            jQuery("#" + that.getId()).removeClass(sRemoveStyle);

            jQuery("#" + that.getId() + "-content").addClass(sAddStyle + "Content");
            jQuery("#" + that.getId() + "-content").removeClass(sRemoveStyle + "Content");

            jQuery("#" + that.getId() + "-content").attr("aria-expanded", !that.getExpanded());

            if (that.getExpanded()) {
                jQuery("#" + that.getId() + "-opener").attr("title", that.getOpenerTooltipShow() || "");
            } else {
                jQuery("#" + that.getId() + "-opener").attr("title", that.getOpenerTooltipHide() || "");
            }

            that.setProperty("expanded", !that.getExpanded(), true);
            that.fireChanged({"expanded" : that.getExpanded()});
        },
        
        onAfterRendering : function() {
            var that = this;
            var sOpenerId = this.getId() + "-opener";
            var sContentId = this.getId() + "-content";

            jQuery("#" + sOpenerId).off();

            var fnOpenerAction = function(oEvent) {
                if (oEvent.originalEvent && oEvent.originalEvent.keyCode === jQuery.sap.KeyCodes.TAB) {
                    return;
                }
                that.toggle();
            };

            jQuery("#" + sOpenerId).on("click", fnOpenerAction);
            jQuery("#" + sOpenerId).on("keypress", fnOpenerAction);
        },

        renderer : function(oRm, oControl) {
            var sControlStyle = ((oControl.getOpenerSide() === 0) ? "sapInoSidePanelLeft" : "sapInoSidePanelRight");
            var sContentStyle = ((oControl.getOpenerSide() === 0) ? "sapInoSidePanelContentLeft" : "sapInoSidePanelContentRight");
            var sOpenerStyle = ((oControl.getOpenerSide() === 0) ? "sapInoSidePanelOpenerLeft" : "sapInoSidePanelOpenerRight");
            var sExpandedStyle = ((oControl.getExpanded()) ? "sapInoSidePanelExpanded" : "sapInoSidePanelCollapsed");

            oRm.write('<div');
            oRm.writeControlData(oControl);
            oRm.addClass(sControlStyle);
            oRm.addClass(sExpandedStyle);
            oRm.writeClasses();
            if(oControl.getWidth()) {
                oRm.addStyle("width", sanitizeHTML(oControl.getWidth()));
                oRm.writeStyles();
            }
            oRm.write(">");

            // opener
            if(oControl.getShowOpener()) {
                oRm.write('<div id="' + sanitizeHTML(oControl.getId()) + '-opener" tabindex="0" aria-controls="' + sanitizeHTML(oControl.getId()) + '-content" role="button"');
                if (oControl.getExpanded()) {
                    oRm.writeAttributeEscaped("title", oControl.getOpenerTooltipHide() || "");
                } else {
                    oRm.writeAttributeEscaped("title", oControl.getOpenerTooltipShow() || "");
                }
                oRm.addClass(sOpenerStyle);
                oRm.writeClasses();
                oRm.write(">");
                var oOpenerIcon = oControl.getOpenerIconControl();
                oRm.renderControl(oOpenerIcon);
                oRm.write("</div>");
            }

            // content
            oRm.write('<div id="' + sanitizeHTML(oControl.getId()) + '-content" aria-expanded="' + sanitizeHTML(oControl.getExpanded()) + '" role="region"');
            oRm.addClass(sContentStyle);
            oRm.addClass(sExpandedStyle + "Content");
            oRm.writeClasses();
            if(!oControl.getShowBorder()) {
                oRm.addStyle("border", 0);
                oRm.writeStyles();
            }
            oRm.write(">");
            var oPanel = oControl.getPanel();
            oRm.renderControl(oPanel);
            oRm.write("</div>");

            oRm.write("</div>");
        }
    });

    SidePanel.Orientation = Orientation;

    return SidePanel;
});
}; // end of sap/ino/controls/SidePanel.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.StatusText') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.StatusText'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.TextRenderer'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/StatusText",[
	"sap/m/TextRenderer",
	"sap/m/Text"
], function(TextRenderer,
	Text) {
	"use strict";

	var StatusText = Text.extend("sap.ino.controls.StatusText", {
		metadata: {
			properties: {
				statusColor: {
					type: "string"
				}
			}
		},

		renderer: TextRenderer,
  
        
		onAfterRendering: function() {
		  //  Text.prototype.onAfterRendering.apply(this);
			var sStatusColor = this.getProperty("statusColor");
			if (sStatusColor && sStatusColor.length === 6) {
				sStatusColor = "#" + sStatusColor;
			} else {
				sStatusColor = "#333333";
			}
			if(this.getDomRef()){
			    $(this.getDomRef()).css("color",sStatusColor);
			}
		}
	});
	
	return StatusText;
});
}; // end of sap/ino/controls/StatusText.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.TagCard') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.TagCard'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.TextAlign'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Icon'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToggleButton'); // unlisted dependency retained
jQuery.sap.require('sap.base.security.sanitizeHTML'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/TagCard",[
    "sap/ui/core/Control",
    "sap/m/Button",
    "sap/m/ButtonType",
    "sap/m/Label",
    "sap/m/Link",
    "sap/m/Text",
    "sap/ui/core/TextAlign",
    "sap/ui/core/Icon",
    "sap/m/ToggleButton",
	"sap/base/security/sanitizeHTML"
], function(Control,
    Button,
    ButtonType,
    Label,
    Link,
    Text,
    TextAlign,
    Icon,
    ToggleButton, sanitizeHTML
    ) {
    "use strict";
    
     var TagCard = Control.extend("sap.ino.controls.TagCard", {
        metadata: {
            properties: {
               "tagId" :{
                 type: "int"  
               },
               "tagName" : {
                  type: "string" 
               },
               "campaignCount" : {
                   type: "string"
               },
               "ideaCount" : {
                   type: "string"
               },
               "tagGroupId": {
                  type: "int"  
               },
               "campaignHref": {
				    type: "sap.ui.core.URI"
			   },
			   "ideaHref": {
				    type: "sap.ui.core.URI"
				}
            },
            aggregations : {
               "followPlaceholder": {
                    type: "sap.ui.core.Control",
                    multiple: false
                },
               _campaignLink: {
                    type: "sap.m.Link",
                    multiple: false,
                    visibility: "hidden"
                },  
                _ideaLink: {
                    type: "sap.m.Link",
                    multiple: false,
                    visibility: "hidden"
                },
                _tagLabel: {
                    type: "sap.m.Text",
                    multiple: false,
                    visibility: "hidden"
                }
            },
            events : {
               press : {},
               openCampaign : {},
               openIdea : {}
           }
    },
    

    init: function () {
        this._oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ino.controls");
	},
	
	_getCampaignLink: function() {
            var that = this;
            var sAggregationName = "_campaignLink";
            // var oCampaignLink = this.getAggregation(sAggregationName);
            // if (!oCampaignLink) {
               var     oCampaignLink = new Link({
                        // id : this.getId() + sAggregationName,
                        href : this.getProperty("campaignHref"),
                        text : this.getProperty("campaignCount"),
                        enabled: this.getProperty("campaignCount") === "0" ? false : true,
                        press : function(oEvent) {
                            // prevent href
                            oEvent.preventDefault();
                            that.fireOpenCampaign({
                                tagId: that.getProperty("tagId"),
                                tagName: that.getProperty("tagName"),
                                tagGroupId: that.getProperty("tagGroupId")
                            });
                        }
                    }); 
            // }
            this.setAggregation(sAggregationName, oCampaignLink, true);
            
            return oCampaignLink;
	},
	
	_getIdeaLink: function() {
            var that = this;
            var sAggregationName = "_ideaLink";
            // var oIdeaLink = this.getAggregation(sAggregationName);
            // if (!oIdeaLink) {
                var oIdeaLink = new Link({
                    // id : this.getId() + sAggregationName,
                    href : this.getProperty("ideaHref"),
                    text : this.getProperty("ideaCount"),
                    enabled: this.getProperty("ideaCount") === "0" ? false : true,
                    press : function(oEvent) {
                        // prevent href
                        oEvent.preventDefault();
                        that.fireOpenIdea({
                            tagId: that.getProperty("tagId"),
                            tagName: that.getProperty("tagName"),
                            tagGroupId: that.getProperty("tagGroupId")
                        });
                    }
                });
                this.setAggregation(sAggregationName, oIdeaLink, true);
            // }
            return oIdeaLink;
	},
	
	_getTagIcon: function() {
      return new Icon({
            src: "sap-icon://tag"
        }).addStyleClass("log");
	},
	
	_follow: function(oEvent){
	   var that = this;
	   that.fireFollow();
	},
	
	_getFeedIcon: function() {
	    var that = this;
	    return new Icon({
            // type: ButtonType.Transparent, icon: "sap-icon://feed"
            src:"sap-icon://feed",
            press: function(oEvent) {
                that._follow();
            }
        }).addStyleClass("follow"); 
	},
	
	setTagName: function(sTag) {
            if (sTag) {
                this.setAggregation("_tagLabel", new Text({maxLines: 1}).setText(sTag).setTooltip(sTag));
            }
            this.setProperty("tagName", sTag);
            return this;
    },
    
    // setCampaignCount: function(sCampaignCount) {
    //         if (sCampaignCount) {
    //             var sAggregationName = "_campaignLink";
    //             var that = this;
    //             this.setAggregation("_campaignLink",  new Link({
    //                     id : this.getId() + sAggregationName,
    //                     href : this.getProperty("campaignHref"),
    //                     text : this.getProperty("campaignCount"),
    //                     enabled: this.getProperty("campaignCount") === "0" ? false : true,
    //                     press : function(oEvent) {
    //                         // prevent href
    //                         oEvent.preventDefault();
    //                         that.fireOpenCampaign({
    //                             tagId: that.getProperty("tagId"),
    //                             tagName: that.getProperty("tagName"),
    //                             tagGroupId: that.getProperty("tagGroupId")
    //                         });
    //                     }
    //                 }));
    //         }
    //         this.setProperty("campaignCount", sCampaignCount);
    //         return this;
    // },
    
    // setIdeaCount: function(sIdeaCount) {
    //         if (sIdeaCount) {
    //             var sAggregationName = "_ideaLink";
    //             var that = this;
    //             this.setAggregation("_ideaLink",  new Link({
    //                     id : this.getId() + sAggregationName,
    //                     href : this.getProperty("ideaHref"),
    //                     text : this.getProperty("ideaCount"),
    //                     enabled: this.getProperty("ideaCount") === "0" ? false : true,
    //                     press : function(oEvent) {
    //                         // prevent href
    //                         oEvent.preventDefault();
    //                         that.fireOpenIdea({
    //                             tagId: that.getProperty("tagId"),
    //                             tagName: that.getProperty("tagName"),
    //                             tagGroupId: that.getProperty("tagGroupId")
    //                         });
    //                     }
    //                 }));
    //         }
    //         this.setProperty("campaignCount", sIdeaCount);
    //         return this;
    // },
	
    renderer: function (oRM, oControl) {
        oRM.write("<div");   // Outer DIV
        oRM.writeControlData(oControl);
        oRM.addClass("container");
        oRM.writeClasses();
        oRM.write(">");
        oRM.write("<header");
        oRM.addClass("tagheader");
        oRM.writeClasses();
        oRM.write(">");
        oRM.write("<div");
        oRM.addClass("bio");
        oRM.writeClasses();
        oRM.write(">");

        oRM.write("<div");
        oRM.addClass("desc");
        oRM.writeClasses();
        oRM.write(">");
        oRM.write("<div>");
        var oTagTitle = oControl.getAggregation("_tagLabel");
        if (oTagTitle) {
            oRM.renderControl(oTagTitle);
        }
        oRM.write("</div>");
        oRM.write("</div>");
        
        
        oRM.write("</div>");
        oRM.write("</header>");
        
        
        
        
        oRM.write("<div");
        oRM.addClass("content");
        oRM.writeClasses();
        oRM.write(">");
        
        oRM.write("<div");
        oRM.addClass("data");
        oRM.writeClasses();
        oRM.write(">");
        
        oRM.write("<ul>");
        oRM.write("<li");
        oRM.addClass("cardleft");
        oRM.writeClasses();
        oRM.write(">");
        oRM.renderControl(oControl._getCampaignLink());
        // var oCampaignLink = oControl.getAggregation("_campaignLink");
        // if (oCampaignLink) {
        //     oRM.renderControl(oCampaignLink);
        // }
        
        
        oRM.write("<span class=\"tagContentText\">" + sanitizeHTML(oControl._oRB.getText('CTRL_TAG_CARD_CAMPAIGN')));
        oRM.write("</span>");
        oRM.write("</li>");
        
        oRM.write("<li");
        oRM.addClass("split");
        oRM.writeClasses();
        oRM.write(">");
        oRM.write("</li>");
        
        oRM.write("<li");
        oRM.addClass("cardright");
        oRM.writeClasses();
        oRM.write(">");
        oRM.renderControl(oControl._getIdeaLink());
        // var oIdaeLink = oControl.getAggregation("_ideaLink");
        // if (oIdaeLink) {
        //     oRM.renderControl(oIdaeLink);
        // }
        oRM.write("<span class=\"tagContentText\">" + sanitizeHTML(oControl._oRB.getText('CTRL_TAG_CARD_IDEA')));
        oRM.write("</span>");
        oRM.write("</li>");
        oRM.write("</ul>");
        
        oRM.write("</div>");
        
        oRM.write("</div>");
        
        oRM.write("<div");
        oRM.addClass("splitH");
        oRM.writeClasses();
        oRM.write(">");
        oRM.write("</div>");
        
        oRM.write("<div>");
        var oFollowPlaceholderControl = oControl.getAggregation("followPlaceholder");
        if (oFollowPlaceholderControl) {
            oRM.renderControl(oFollowPlaceholderControl);
        }
        oRM.write("</div>");
        oRM.write("</div>");
	},
	onAfterRendering: function(){
	    this._initTabs();
	},
	_getTabs: function() {
		return this._tabs;
	},
	_initTabs: function(){
 	    this._tabs = [];
	    if (this.getAggregation("_campaignLink") && this.getAggregation("_campaignLink").$().length) {
			this._tabs.push(this.getAggregation("_campaignLink").$()[0].id);
		}
		if (this.getAggregation("_ideaLink") && this.getAggregation("_ideaLink").$().length) {
			this._tabs.push(this.getAggregation("_ideaLink").$()[0].id);
		}
		if( this.getAggregation("followPlaceholder")){
		    this._tabs.push(this.getAggregation("followPlaceholder").$().find("[tabindex=0],button")[0].id);
		}
	},
	_defaultOnKeyDown: function(oEvent) {
		if (Control.prototype.onkeydown) {
			Control.prototype.onkeydown.apply(this, arguments);
		}
	},

	onkeydown: function(oEvent) {
		var aTabs = this._getTabs();
		var fnUpdate = this._incr;

		if (oEvent.shiftKey || oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_UP || oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_LEFT) {
			fnUpdate = this._decr;
		}

		if (oEvent.keyCode === jQuery.sap.KeyCodes.ESCAPE) {
			this.getParent().focus();
		} else if (oEvent.keyCode === jQuery.sap.KeyCodes.TAB ||
			oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_DOWN ||
			oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_RIGHT ||
			oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_UP ||
			oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_LEFT) {
	        var $Current = jQuery(":focus");
			var iIdx = -1;
			if ($Current && $Current.length > 0) {
				iIdx = aTabs.indexOf($Current[0].id);
				iIdx = fnUpdate(iIdx, aTabs.length - 1);
				this._focus(jQuery("#" + aTabs[iIdx]));

				oEvent.preventDefault();
				oEvent.stopPropagation();
			} else {
				this.getParent().focus();
			}
		} else {
			this._defaultOnKeyDown(oEvent);
		}
	},
	_incr: function(iVal, iMax) {
		iVal++;
		if (iVal > iMax) {
			return 0;
		}
		return iVal;
	},

	/**
	 * @private
	 */
	_decr: function(iVal, iMax) {
		iVal--;
		if (iVal < 0) {
			return iMax;
		}
		return iVal;
	},
	_focus: function(oElement) {
		if (jQuery.type(oElement.focus) === "function") {
			setTimeout(function() {
				oElement.focus();
			}, 0);
		}
	}
});
    
return TagCard;
});
}; // end of sap/ino/controls/TagCard.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.TitleHeadItem') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.TitleHeadItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.unified.ShellHeadItem'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/TitleHeadItem",[
    "sap/ui/unified/ShellHeadItem"
], function(ShellHeadItem) {
	"use strict";

	return ShellHeadItem.extend("sap.ino.controls.TitleHeadItem", {
		metadata: {
			properties: {
				text: {
					type: "string"
				}
			}
		},
		setText: function(sText) {
			if (sText) {
				this.setProperty("text", sText, true);
			}
			this._refreshIcon();
		},

		_refreshIcon: function() {
			var sText = this.getText();
			if (jQuery("#sapInoLogoTextInfo").length === 0) {
				this.$().append("<div tabindex='0' id='sapInoLogoTextInfo'/>");
			}
			this.$().removeAttr('tabindex');
			jQuery("#sapInoLogoTextInfo").addClass("sapInoLogoTextInfo");
			jQuery("#sapInoLogoTextInfo").text(sText);

			//return oIcon;
		}		

	});
});
}; // end of sap/ino/controls/TitleHeadItem.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.VBoxWithSubmitEvent') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.VBoxWithSubmitEvent'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/VBoxWithSubmitEvent",[
    "sap/m/VBox"
], function(VBox) {
	"use strict";
	var VBoxWithSubmitEvent = VBox.extend("sap.ino.controls.VBoxWithSubmitEvent", {
		metadata: {
			events: {
				submit: {}
			}
		},
		renderer:"sap.m.VBoxRenderer"
	});
	VBoxWithSubmitEvent.prototype.onkeydown = function(oEvent) {
		if (oEvent.which === jQuery.sap.KeyCodes.ENTER) {
			this.fireSubmit({/* no parameters */});
		}
	};
	return VBoxWithSubmitEvent;
});
}; // end of sap/ino/controls/VBoxWithSubmitEvent.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.VoteType') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.controls.VoteType");
(function() {
	"use strict";
 	sap.ino.controls.VoteType = {
 		/**
 		 * Vote has type Star
 		 * @public
 		 */
 		TYPE_STAR: "STAR",

 		/**
 		 * Vote has type Like
 		 * @public
 		 */
 		TYPE_LIKE: "LIKE",

 		/**
 		 * Vote has type Like-Dislike
 		 * @public
 		 */
 		TYPE_LIKE_DISLIKE: "LIKE_DISLIKE"
 	};
})();
}; // end of sap/ino/controls/VoteType.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.WrappingList') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.WrappingList'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.List'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/WrappingList",[
	"sap/m/List"
], function (List) {
	"use strict";
	
	/**
     * @class Standard List that can display its items horizontally.
     * 
     * @static
     * @public
     */
	return List.extend("sap.ino.controls.WrappingList", {
		metadata: {
		    properties : {
		        wrapping : {
				    type : "boolean",
				    defaultValue : false
				},
				overwirteOnkeydown : {
				    type : "boolean",
				    defaultValue : true
				}
			}
		},
		
		init : function() {
		    var that = this;
		    
            List.prototype.init.apply(this, arguments);
            
            this.addEventDelegate({
                onAfterRendering : function() {
                    var bWrapping = that.getWrapping();
                    var $This = that.$();
                    
                    $This.addClass("sapInoWrappingList");    
                    
                    if (bWrapping) {
                        $This.removeClass("sapInoWrappingListNoWrap");
                        $This.addClass("sapInoWrappingListWrap");    
                    }
                    else {
                        $This.removeClass("sapInoWrappingListWrap");
                        $This.addClass("sapInoWrappingListNoWrap");
                    }
                }
            });
        },
        
        setNavigationItems : function() {
            // enable right-/left-arrowkey
            this.getItemNavigation().setTableMode(!this.getWrapping());
            List.prototype.setNavigationItems.apply(this, arguments);
        },
		
		_isRendered : function() {
            if (this._bIsInDOM === undefined || this._bIsInDOM === 0) {
                this._bIsInDOM = jQuery.sap.byId(this.getId()).length;
            }
    
            return this._bIsInDOM;
        },
		
		setWrapping : function(bWrapping) {
		    if (this.getWrapping() !== bWrapping) {
                this.setProperty("wrapping", bWrapping, true);
                if (this._isRendered()) {
                    var $This = this.$();
                    
                    if (bWrapping) {
                        $This.removeClass("sapInoWrappingListNoWrap");
                        $This.addClass("sapInoWrappingListWrap");    
                    }
                    else {
                        $This.removeClass("sapInoWrappingListWrap");
                        $This.addClass("sapInoWrappingListNoWrap");
                    }
                }
            }
            return this;
		},
		
		onkeydown : function(oEvent) {
		    if (!this.getWrapping() || !this.getOverwirteOnkeydown()) {
		        // return to default behaviour 
		        return;
		    }
		    
		    var $Current = this.$();
		    var $Next;
		    var $Children;
		    var bDone = false;
		    var bIgnore = false;
		    
		    var $All = this.$().find("[tabindex!=-1]:focusable");
		    if ($All && $All.length > 0) {
                if ($All[$All.length - 1] === oEvent.target) {
                    bIgnore = true;   
                }
            }
		    
		    // use arrow keys to navigate within list
		    // (shift +) tab jumps to element before / after the list
		    if (!bIgnore && oEvent.keyCode === jQuery.sap.KeyCodes.TAB) {
		        if (oEvent.shiftKey) {
		            // jump before list
		            do {
    		            $Next = $Current.prev();
    		            if ($Next && $Next.length > 0) {
    		                $Children = $Next.find("[tabindex!=-1]:focusable");
    		                if ($Children && $Children.length > 0) {
    		                    this._focus(jQuery($Children[$Children.length - 1]));
    		                    bDone = true;
    		                    break;
    		                }
    		                if ($Next.attr("tabindex") !== "-1" && $Next.is(":focusable")) {
    		                    this._focus($Next);
    		                    bDone = true;
    		                    break;
    		                }
    		            }
    		            $Next = $Current.parent();
    		            $Current = $Next;
		            } while ($Next && $Next.length > 0);
		        }
		        else {
		            // jump after list
		            var $Last = jQuery($All[$All.length - 1]);
		            $Next = $Last.next();
		            do {
		            	if ($Next && $Next.length > 0) {
							if ($Next.attr("tabindex") !== "-1" && $Next.is(":focusable")) {
								this._focus($Next);
								bDone = true;
								break;
							}
							$Children = $Next.find("[tabindex!=-1]:focusable");
							if ($Children && $Children.length > 0) {
								this._focus(jQuery($Children[0]));
								bDone = true;
								break;
							}
							$Last = $Next;							
		            	}
		            	else {
		            		$Last = $Last.parent();
		            	}

		            	$Next = $Last.next();

    		            while ($Next.length === 0 && $Last.parent().length > 0) {
    		            	$Last = $Last.parent();
    		            	$Next = $Last.next();
    		            } 
		            } while ($Next && $Next.length > 0);
		        }
		    
		        // if we couldn't set the focus => reset to first focusable element on screen    
	            if (!bDone) {
	                this._focus(jQuery("html").find("[tabindex!=-1]:focusable")[0]);
	            }
	        
	            oEvent.preventDefault();
				oEvent.stopPropagation();
				oEvent.stopImmediatePropagation();	
		    }
		    else {
		        List.prototype.onkeydown.apply(this, arguments);
		    }
		},
		
		_focus : function(oElement) {
		    if (oElement && jQuery.type(oElement.focus) === "function") {
    		    setTimeout(function() {
    		        oElement.focus();
    		    }, 10);
		    }
		},
		
		renderer : "sap.m.ListRenderer"
	});
});
}; // end of sap/ino/controls/WrappingList.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.library') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/library",[
    "sap/ui/core/library",
    "sap/m/library"
], function() {
	"use strict";
	sap.ui.getCore().initLibrary({
		name: "sap.ino.controls",
		dependencies: ["sap.ui.core", "sap.m"],
		types: [],
		interfaces: [],
		controls: [
            "sap.ino.controls.ActiveNavigationListItem",
            "sap.ino.controls.Campaign",
            "sap.ino.controls.ColorBar",
            "sap.ino.controls.ColorPicker",
            "sap.ino.controls.ColorPickerLite",
            "sap.ino.controls.ColorRibbon",
            "sap.ino.controls.EvaluationMatrix",
            "sap.ino.controls.EvaluationMatrixItem",
            "sap.ino.controls.GenericStyle",
            "sap.ino.controls.HorizontalLine",
            "sap.ino.controls.IdeaCard",
            "sap.ino.controls.Image",
            "sap.ino.controls.ImageCropping",
            "sap.ino.controls.LabelledIcon",
            "sap.ino.controls.MobileTextEditor",
            "sap.ino.controls.NotificationHeadItem",
            "sap.ino.controls.ProcessIndicator",
            "sap.ino.controls.RichTextEditor",
            "sap.ino.controls.SidePanel",
            "sap.ino.controls.Vote",
            "sap.ino.controls.VoteDisplay",
            "sap.ino.controls.WrappingList"
        ],
		elements: [
            "sap.ino.controls.EvaluationData",
            "sap.ino.controls.EvaluationDataCriterionValue",
            "sap.ino.controls.EvaluationMatrixItem",
            "sap.ino.controls.NotificationHeadItem"
        ],
		version: "2.4.16"
	});
});
}; // end of sap/ino/controls/library.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.util.ColorSupport') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare("sap.ino.controls.util.ColorSupport");
(function() {
    "use strict";

    sap.ino.controls.util.ColorSupport = {};

    sap.ino.controls.util.ColorSupport.calculateTitleTextColor = function(r, g, b) {
        var brightness;
        brightness = (parseInt(r, 16) * 0.299) + (parseInt(g, 16) * 0.587) + (parseInt(b, 16) * 0.114);

        // values range from 0 to 1
        if ((255 -brightness) < 105) {
            return "Dark";
        } else {
            return "Light";
        }
    };

    sap.ino.controls.util.ColorSupport.calculateMediaTextColor = function(r, g, b) {
        var brightness;
        brightness = (parseInt(r, 16) * 299) + (parseInt(g, 16) * 587) + (parseInt(b, 16) * 114);
        brightness = brightness / 255000;

        // values range from 0 to 1
        if (brightness >= 0.9) {
            var iR = parseInt(r, 16);
            iR = (iR - 40 > 0) ? iR - 40 : 0;
            r = iR.toString(16);
            var iG = parseInt(g, 16);
            iG = (iG - 40 > 0) ? iG - 40 : 0;
            g = iG.toString(16);
            var iB = parseInt(b, 16);
            iB = (iB - 40 > 0) ? iB - 40 : 0;
            b = iB.toString(16);
            return "#" + r + g + b;
        } else {
            return "#FFFFFF";
        }
    };
})();
}; // end of sap/ino/controls/util/ColorSupport.js
if ( !jQuery.sap.isDeclared('sap.ino.corelib.library') ) {
 /*!
  * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
  */
 jQuery.sap.declare('sap.ino.corelib.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/ino/corelib/library",[
    "sap/ui/core/library",
    "sap/m/library"
], function() {
 	"use strict";

 	sap.ui.getCore().initLibrary({
 		name: "sap.ino.corelib",
 		dependencies: ["sap.ui.core", "sap.m"],
 		types: [],
 		interfaces: [],
 		controls: [
            "sap.ino.commons.application.BaseComponent",
            "sap.ino.commons.application.Configuration",
            "sap.ino.commons.application.Router",
            "sap.ino.commons.application.WebAnalytics",

            "sap.ino.commons.formatters.BaseFormatter",
            "sap.ino.commons.formatters.BaseListFormatter",
            "sap.ino.commons.formatters.ListFormatter",
            "sap.ino.commons.formatters.ObjectFormatter",
            "sap.ino.commons.formatters.ObjectListFormatter",

            "sap.ino.commons.models.aof.ApplicationObject",
            "sap.ino.commons.models.aof.ApplicationObjectChange",
            "sap.ino.commons.models.aof.MessageParser",
            "sap.ino.commons.models.aof.MetaModel",
            "sap.ino.commons.models.aof.PropertyModel",
            "sap.ino.commons.models.aof.PropertyModelCache",

            "sap.ino.commons.models.core.CoreModel",
            "sap.ino.commons.models.core.Extensibility",
            "sap.ino.commons.models.core.ModelSynchronizer",
            "sap.ino.commons.models.core.ReadSource",

            "sap.ino.commons.models.object.Attachment",
            "sap.ino.commons.models.object.Campaign",
            "sap.ino.commons.models.object.CampaignComment",
            "sap.ino.commons.models.object.Evaluation",
            "sap.ino.commons.models.object.Idea",
            "sap.ino.commons.models.object.IdeaComment",
            "sap.ino.commons.models.object.Notification",
            "sap.ino.commons.models.object.UserSettings",
            "sap.ino.commons.models.object.Vote",
            "sap.ino.commons.models.object.Wall",
            "sap.ino.commons.models.object.WallItem",

            "sap.ino.commons.models.util.UUID",
            "sap.ino.commons.models.util.WallMapper",

            "sap.ino.controls.ActiveNavigationListItem",
            "sap.ino.controls.Campaign",
            "sap.ino.controls.ColorBar",
            "sap.ino.controls.ColorPicker",
            "sap.ino.controls.ColorPickerLite",
            "sap.ino.controls.ColorRibbon",
            "sap.ino.controls.EvaluationMatrix",
            "sap.ino.controls.EvaluationMatrixItem",
            "sap.ino.controls.GenericStyle",
            "sap.ino.controls.HorizontalLine",
            "sap.ino.controls.IdeaCard",
            "sap.ino.controls.Image",
            "sap.ino.controls.ImageCropping",
            "sap.ino.controls.LabelledIcon",
            "sap.ino.controls.MobileTextEditor",
            "sap.ino.controls.NotificationHeadItem",
            "sap.ino.controls.ProcessIndicator",
            "sap.ino.controls.RichTextEditor",
            "sap.ino.controls.SidePanel",
            "sap.ino.controls.Vote",
            "sap.ino.controls.VoteDisplay",
            "sap.ino.controls.WrappingList",

            "sap.ino.vc.commons.BaseController",
            "sap.ino.vc.commons.BaseListController",
            "sap.ino.vc.commons.BaseObjectController",
            "sap.ino.vc.commons.BaseObjectModifyController",
            "sap.ino.vc.commons.BaseVariantListController",
            "sap.ino.vc.commons.TopLevelPageFacet",
            "sap.ino.vc.evaluation.EvaluationFacet",
            "sap.ino.vc.evaluation.EvaluationFormatter",
            "sap.ino.vc.idea.ActivitiesBlock",
            "sap.ino.vc.idea.AttachmentBlock",
            "sap.ino.vc.idea.CommentBlock",
            "sap.ino.vc.idea.EvaluationsBlock",
            "sap.ino.vc.idea.ExpertFinderBlock",
            "sap.ino.vc.idea.ListInIdeaBlock",
            "sap.ino.vc.idea.RelatedIdeasBlock",
            "sap.ino.vc.wall.util.Helper",
            "sap.ino.vc.wall.util.WallFactory"],
 		elements: [
            "sap.ino.controls.EvaluationData",
            "sap.ino.controls.EvaluationDataCriterionValue",
            "sap.ino.controls.EvaluationMatrixItem",
            "sap.ino.controls.NotificationHeadItem"],
 		version: "2.4.16"
 	});
 });
}; // end of sap/ino/corelib/library.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.blog.CommentBlock-back') ) {
jQuery.sap.declare('sap.ino.vc.blog.CommentBlock-back'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.uxap.BlockBase'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/blog/CommentBlock-back",['sap/uxap/BlockBase'],
    function(BlockBase) {
        "use strict";
        return BlockBase.extend("sap.ino.vc.blog.CommentBlock", {
            metadata: {
    			views: {
    				Collapsed: {
    					viewName: "sap.ino.vc.comment.Comment",
    					type: "XML"
    				},
    				Expanded: {
    					viewName: "sap.ino.vc.comment.Comment",
    					type: "XML"
    				}
    			}
		    }
        });
    });

}; // end of sap/ino/vc/blog/CommentBlock-back.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.blog.mixins.BlogCardMixin') ) {
jQuery.sap.declare('sap.ino.vc.blog.mixins.BlogCardMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/vc/blog/mixins/BlogCardMixin",[
], function() {
	"use strict";

	/**
	 * Mixin that handles blog card actions
	 * @mixin
	 */
	var BlogCardMixin = function() {
		throw "Mixin may not be instantiated directly";
	};

	BlogCardMixin.onOpenCreator = function(oEvent) {
		var oSource = oEvent.getSource();
		var iIdentityId = oSource.getBindingContext("data").getProperty("CREATED_BY_ID");
		if (!this.oIdentityCardView) {
			this.oIdentityCardView = sap.ui.xmlview({
				viewName: "sap.ino.vc.iam.IdentityCard"
			});
			this.getView().addDependent(this.oIdentityCardView);
		}
		this.oIdentityCardView.getController().open(oSource, iIdentityId);
	};

	return BlogCardMixin;
});
}; // end of sap/ino/vc/blog/mixins/BlogCardMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.campaign.mixins.CampaignInstanceRolesMixin') ) {
jQuery.sap.declare('sap.ino.vc.campaign.mixins.CampaignInstanceRolesMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/vc/campaign/mixins/CampaignInstanceRolesMixin",[], function() {
	"use strict";

	/**
	 * @class
	 * CampaignInstanceRolesMixin
	 */
	var CampaignInstanceRolesMixin = function() {
		throw "Mixin may not be instantiated directly";
	};

	CampaignInstanceRolesMixin.getCampaignInstanceRolesData = function(iId) {
		var that = this;
		var sCampaignInstanceRoles = "/CampaignFull(" + iId + ")/InstanceRoles";
		if (!this.getModel("data").getProperty(sCampaignInstanceRoles)) {
			this.getModel("data").read(sCampaignInstanceRoles, {
				async: true,
				success: function(oData) {
					that.getModel("component").setProperty(sCampaignInstanceRoles, oData);
				},
				error: function() {
					that.getModel("component").setProperty(sCampaignInstanceRoles, undefined);
				}
			});
		}
	};

	return CampaignInstanceRolesMixin;
});
}; // end of sap/ino/vc/campaign/mixins/CampaignInstanceRolesMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.campaign.mixins.CampaignProfileMixin') ) {
jQuery.sap.declare('sap.ino.vc.campaign.mixins.CampaignProfileMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/campaign/mixins/CampaignProfileMixin",[
    "sap/ui/model/json/JSONModel"
], function(JSONModel) {
    "use strict";

    /**
     * @class
     * Mixin for a short Identity Profile
     */
    var IdentityMixin = function() {
        throw "Mixin may not be instantiated directly";
    };
    
    IdentityMixin.bindIdentityProfile = function(oIdentityProfile, mSettings, iContextId, oIdentityProfileButtons) {
        this._mIdentityMixinIdentityProfile = oIdentityProfile;
        this._setIdentityProfileContext(iContextId || 0);
        if (oIdentityProfile) {
            oIdentityProfile.bindElement("data>" + mSettings.PATH);
            oIdentityProfile.setModel(new JSONModel(mSettings), "IdentityProfile");
            
            if(oIdentityProfileButtons) {
                oIdentityProfileButtons.bindElement("data>" + this.getView().getBindingContext("data").sPath);
            }
        }
    };
    
    IdentityMixin.onIdentityProfileCreateIdea = function() {
        this.navigateTo("idea-create", {query: {campaign: this._getIdentityProfileContext()}});
    };
    
    IdentityMixin.onIdentityProfileCreateWall = function() {
        jQuery.sap.require("sap.ino.commons.models.object.Wall");
        var Wall = sap.ino.commons.models.object.Wall;
        var that = this;
        Wall.create({
            ID : -1,
            NAME : that.getText("WALL_BUT_CREATE_WALL_NAME"),
            WALL_TYPE_CODE : "sap.ino.config.WALL",
            BACKGROUND_IMAGE_REPEAT: 0,
            BACKGROUND_IMAGE_URL: "cork.jpg",
            BACKGROUND_IMAGE_ZOOM: 0
        }).done(function(oRequest) {
            that.navigateToWall("wall", {
                id : oRequest.GENERATED_IDS[-1]
            });
        });
    };
   IdentityMixin.onIdentityProfileCreateBlog = function()
   {
       this.navigateTo("blog-create", {query: {campaign: this._getIdentityProfileContext()}});
   };    
    
    IdentityMixin.formatIdentityProfileText = function(sKey) {
        var oProfile = this._mIdentityMixinIdentityProfile;
        if (oProfile) {
            var oTextModel = oProfile.getModel("i18n");
            if (!oTextModel) {
                return "";
            }
            return oTextModel.getResourceBundle().getText(sKey);
        }
        return "";
    };
    
    IdentityMixin.formatIdentityProfileCount = function(sCount) {
        //always use the first registered profile for formatting
        var oProfile = this._mIdentityMixinIdentityProfile;
        if (oProfile) {
            var oBinding = oProfile.getElementBinding("data");
            if (!oBinding) {
                return "0";
            }
            
            var oContext = oBinding.getBoundContext();
            if (!oContext) {
                return "0";
            }
            
            var oEntityCount = oContext.getObject();
            if (!oEntityCount) {
                return "0";
            }
            return oEntityCount[sCount] || "0";
        }
        return "0";
    };
    
    IdentityMixin.formatIdentityProfileNavigationLink = function(sRouteName, oParameter) {
        oParameter = oParameter || {};
        oParameter.id = this._getIdentityProfileContext();
        return this.getOwnerComponent().getNavigationLink(sRouteName, oParameter);
    };
    
    IdentityMixin._setIdentityProfileContext = function(vContext) {
        this._vIdentityProfileContext = vContext;
    };
    
    IdentityMixin._getIdentityProfileContext = function() {
        return this._vIdentityProfileContext;
    };
    
    IdentityMixin.navigateToList = function(oEvent){
        var oController = this.getView().getController();
        var oLink = oEvent.oSource;
        var sPath = oLink.oPropagatedProperties.oBindingContexts.IdentityProfile.sPath;
        var oRoute = oLink.getModel("IdentityProfile").getProperty(sPath).Route;
        
        if(oRoute.NAME === "campaign-idealist" || oRoute.NAME === "campaign-idealistvariant" || oRoute.NAME === "campaign-bloglist"){
            oRoute.QUERY.id = oController.getCampaignId();
        }
        
        oController.navigateTo(oRoute.NAME, oRoute.QUERY);
    };
    
    IdentityMixin.formatIdentityProfileCountVisibility = function(sCount, sVariant, bExpert, sNo, aRoles){
        // var bExpertInCampaign;
        // var oObject = this.getModel("object");
        // if(oObject) {
        //     bExpertInCampaign = oObject.getProperty("/property/nodes/Root/customProperties/expertInCampaign");
        // }
        // if(sVariant === "completed"){
        //     var oProfile = this._mIdentityMixinIdentityProfile;
        //     if (oProfile) {
        //         var oBinding = oProfile.getElementBinding("data");
        //         if (!oBinding) {
        //             return false;
        //         }
                
        //         var oContext = oBinding.getBoundContext();
        //         if (!oContext) {
        //             return false;
        //         }
                
        //         var oEntityCount = oContext.getObject();
        //         if (!oEntityCount) {
        //             return false;
        //         }
        //     }
        //     return Number(oEntityCount[sCount]) > 0;
        // } else {
        //     return !bExpert || bExpertInCampaign;
        // }
        
        if (aRoles && !this._formatIdentityProfileVisByRole(aRoles)) {
			return false;
		}
		return true;
    };
    
    IdentityMixin._formatIdentityProfileVisByRole = function(aRoles) {
		if (aRoles[0].indexOf("sap.ino.ui::") > -1) {
			return this._hasCampaignsPrivileges(aRoles);
		}
		return this._hasCampaignInstanceRole(aRoles);
	};

	IdentityMixin._hasCampaignsPrivileges = function(aRoles) {
		return this._checkCampaignsPrivileges(aRoles, this.getModel("user").getProperty("/privileges"));
	};

	IdentityMixin._hasCampaignInstanceRole = function(aRoles) {
		return this._checkCampaignsPrivileges(aRoles, this.getModel("data").getProperty("/CampaignInstanceRoles(" + this.getCampaignId() + ")"));
	};

	IdentityMixin._checkCampaignsPrivileges = function(aRoles, oExistsRoles) {
		if (!oExistsRoles) {
			return false;
		}
		var bExists = false;
		for (var iRoleIndex = 0; iRoleIndex <= aRoles.length - 1; iRoleIndex++) {
			if (oExistsRoles[aRoles[iRoleIndex]]) {
				bExists = true;
				break;
			}
		}
		if (!bExists) {
			return false;
		}
		return true;
	};

    
    return IdentityMixin;
});
}; // end of sap/ino/vc/campaign/mixins/CampaignProfileMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.commons.TopLevelPageFacet') ) {
jQuery.sap.declare('sap.ino.vc.commons.TopLevelPageFacet'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/commons/TopLevelPageFacet",[
    "sap/ui/Device",
    "sap/ino/commons/application/Configuration",
    "sap/ui/core/UIComponent"
], function(Device, Configuration, UIComponent) {
	"use strict";

	/**
	 * @class
	 * Facet for view controllers that are used on the top level in the application, i.e. as direct child of the shell.
	 */
	var TopLevelPage = function() {
		throw "Facet may not be instantiated directly";
	};

	// TODO: onInit is called in onInit of BaseController, i.e. it can only be called for exactly one facet
	TopLevelPage._onInit = function() {
		var that = this;

		this._oComponent = this.getOwnerComponent();
		this._oRouter = this._oComponent ? this._oComponent.getRouter() : undefined;

		if (this.routes && this._oRouter) {
			if (jQuery.type(this.routes) === "array") {
				jQuery.each(this.routes, function(iIdx, sRoute) {
					that._oRouter.getRoute(sRoute).attachMatched(that._onRouteMatched, that);
				});
			} else if (jQuery.type(this.routes) === "string") {
				that._oRouter.getRoute(this.routes).attachMatched(that._onRouteMatched, that);
			}
		}

		this._oNavEventDelegate = {
			onBeforeShow: function(oEvent) {

				if (this.onBeforeShow) {
					this.onBeforeShow(oEvent);
				}

				if (!this._bOrientationHandlerAttached && !Device.system.desktop) {
					this._bOrientationHandlerAttached = true;
					Device.orientation.attachHandler(this._onOrientationChange, this);
				}

			},
			onAfterShow: function(oEvent) {

				if (this.onAfterShow) {
					this.onAfterShow(oEvent);
				}
				// Base controller to set initial focus
				if (this.setViewFocus) {
					this.setViewFocus();
				}
			},
			onBeforeHide: function(oEvent) {
				if (this.onBeforeHide) {
					this.onBeforeHide(oEvent);
					//this.initFullScreen();
				}
			},
			onAfterHide: function(oEvent) {
				if (this.onAfterHide) {
					this.onAfterHide(oEvent);
				}

				this._bOrientationHandlerAttached = false;
				Device.orientation.detachHandler(this._onOrientationChange, this);
			}
		};
		this.getView().addEventDelegate(this._oNavEventDelegate, this);

		// add the normal background if view does not specify sth else
		if (!this.getView().hasStyleClass("sapInoViewNoBackground")) {
			this.getView().addStyleClass("sapUiGlobalBackgroundColor sapUiGlobalBackgroundColorForce");
		}

		if (this._oRouter) {
			this._oRouter.attachRouteMatched(this._onAnyRouteMatched, this);
			this._oRouter.attachBypassed(that._onBypassed, that);
		}
	};

	// TODO: onInit is called in onInit of BaseController, i.e. it can only be called for exactly one facet
	TopLevelPage._onExit = function() {
		this.getView().removeEventDelegate(this._oNavEventDelegate);
	};

	TopLevelPage._onOrientationChange = function(oEvent) {
		if (this._onBaseOrientationChange) {
			this._onBaseOrientationChange(oEvent);
		}
		if (this.onOrientationChange) {
			this.onOrientationChange(oEvent);
		}
	};

	TopLevelPage.setBackgroundImages = function(sBackgroundImageId, sSmallBackgroundImageId) {
		var sBackgroundImageURL = this._selectAppropriateBackgroundImageURL(sBackgroundImageId, sSmallBackgroundImageId);
		if (sBackgroundImageURL) {
			this._setBackgroundImage(sBackgroundImageURL);
		}
	};

	TopLevelPage.resetBackgroundImage = function() {
		var sDefaultURL = this.getDefaultBackgroundImageURL();
		if (sDefaultURL) {
			this._setBackgroundImage(sDefaultURL);
		} else {
			this._removeBackgroundImage();
		}
	};

	TopLevelPage.getDefaultBackgroundImageURL = function() {
		var bIsHighContrast = Configuration.getTheme() === "THEME_HIGHCONTRAST";
		var sBackgroundImageURL = Configuration.getFrontofficeDefaultBackgroundImageURL(bIsHighContrast);
		var sSmallBackgroundImageId = Configuration.getMobileSmallDefaultBackgroundImageURL();

		return this._selectAppropriateBackgroundImageURL(sBackgroundImageURL, sSmallBackgroundImageId);
	};

	TopLevelPage.updateBackgroundColor = function(sColorCode) {
		function hexToRgb(hex) {
			var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
			return result ? {
				r: parseInt(result[1], 16),
				g: parseInt(result[2], 16),
				b: parseInt(result[3], 16)
			} : null;
		}

		function colorLuminance(hex, lum) {
			// validate hex string
			hex = String(hex).replace(/[^0-9a-f]/gi, '');
			if (hex.length < 6) {
				hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
			}
			lum = lum || 0;
			// convert to decimal and change luminosity
			var lighterColor = "#",
				c, i;
			for (i = 0; i < 3; i++) {
				c = parseInt(hex.substr(i * 2, 2), 16);
				c = Math.round(Math.min(Math.max(0, c + (c * lum)), 220)).toString(16);
				lighterColor += ("00" + c).substr(c.length);
			}
			return lighterColor;
		}
		if (sColorCode) {

			var oComponent = this.getOwnerComponent();
			var oRootController = oComponent.getRootController();
			var oShellRef = oRootController.byId("innerShell").getDomRef();
			var aRGB = hexToRgb(sColorCode);
			var hexLighter = colorLuminance(sColorCode, 0.7);
			var aRGBL = hexToRgb(hexLighter);
			$(oShellRef).css("background-color", "#" + sColorCode);
			if (sColorCode === "FFFFFF") {
				// sBGBodyColor = "";
				//$(oShellRef).css("background-image", sBGBodyColor);
				this.resetBackgroundImage();
			} else {
				$(oShellRef).css('background-image', 'none');
				var sBGBodyColorWebKit = "-webkit-linear-gradient(top, rgba(" + aRGB.r + "," + aRGB.g + "," + aRGB.b + "," + "0.2) 70%, rgba(" + aRGB.r +
					"," + aRGB.g + "," + aRGB.b + "," + "0.9) 100%)";
				var sBGBodyColorIE = "-ms-linear-gradient(top, #ffffff 10%, rgba(" + aRGB.r + "," + aRGB.g + "," + aRGB.b + "," + "0.9) 100%)";
				var sBGBodyColorW3C = "linear-gradient(to bottom, rgba(" + aRGBL.r + "," + aRGBL.g + "," + aRGBL.b + "," + "1) 30%, rgba(" + aRGB.r +
					"," + aRGB.g + "," + aRGB.b + "," + "1) 90%)";
				var sBGBodyColorFF = "-moz-linear-gradient(top, #ffffff 10%, rgba(" + aRGB.r + "," + aRGB.g + "," + aRGB.b + "," + "0.9) 100%)";
				$(oShellRef).css("background-image", sBGBodyColorWebKit);
				$(oShellRef).css("background-image", sBGBodyColorIE);
				$(oShellRef).css("background-image", sBGBodyColorW3C);
				$(oShellRef).css("background-image", sBGBodyColorFF);
			}
		} else {
			this.resetBackgroundImage();
		}

	};

	/**
	 * Takes some properties of the navigation source if they can be reused in the navigation target
	 * @param oSourceController The controller of the navigation source
	 * @returns {boolean} true/false if something was navigate
	 */
	TopLevelPage.reusePropertiesOnNavigation = function(oSourceController) {
		//Empty, return false, to indicate that nothing could be reused
		return false;
	};

	TopLevelPage._selectAppropriateBackgroundImageURL = function(sBackgroundImageURL, sSmallBackgroundImageURL) {
		var sImageURL = sBackgroundImageURL;
		if (Device.system.phone) {
			sImageURL = sSmallBackgroundImageURL;
		}

		if (jQuery.isNumeric(sImageURL)) {
			return Configuration.getAttachmentTitleImageDownloadURL(sImageURL);
		} else {
			//do not return the non-numeric images, as this is the default image. by default, we display nothing
			//return ("/" + sImageURL);
			return null;
		}
	};

	TopLevelPage._setBackgroundImage = function(sURL) {
		var oComponent = this.getOwnerComponent();
		var oRootController = oComponent.getRootController();
		var oShellRef = oRootController.byId("innerShell").getDomRef();
		if ($(oShellRef).css("background-image") !== sURL) {
			if (sURL) {
				$(oShellRef).css("background-image", "url(" + sURL + ")");
				oRootController.byId("app").setBackgroundOpacity(0.5);
			} else {
				$(oShellRef).css("background-image", "");
				oRootController.byId("app").setBackgroundOpacity(1);
			}
		}
	};

	// TODO removing the image from the app causes a rerendering e.g. of the idea list what results in losing the scrolling location => change this 
	TopLevelPage._removeBackgroundImage = function() {
		this._setBackgroundImage(undefined);
	};

	TopLevelPage._onRouteMatched = function(oEvent) {
		this._oComponent.setCurrentRoute(oEvent.getParameter("name"));
		if (jQuery.type(this.onRouteMatched) === "function") {
			if (this.getViewProperty("/HIDE_SYS_MSG") === true || this._oComponent.getRootController().byId("systemMessage").data().msgClosed) {
				this._oComponent.getRootController().byId("systemMessage").setProperty("visible", false);
				this._oComponent.getRootController().byId("innerShell").removeStyleClass("sapInoInnoMgmtMShellMsg");
			} else {
				this._oComponent.getRootController().byId("systemMessage").setProperty("visible", true);
				this._oComponent.getRootController().byId("innerShell").addStyleClass("sapInoInnoMgmtMShellMsg");
			}
			this.onRouteMatched(oEvent);
		}
		if (!this.bKeepMessages) {
			var oMsgMgr = sap.ui.getCore().getMessageManager();
			oMsgMgr.removeAllMessages();
		}
		if (!this.hasBackgroundImage || !this.hasBackgroundImage()) {
			this.resetBackgroundImage();
		}
		this._oComponent.getRootController().onAfterNavigate();
	};

	TopLevelPage._onAnyRouteMatched = function(oEvent) {
		if (jQuery.type(this.onAnyRouteMatched) === "function") {
			this.onAnyRouteMatched(oEvent);
		}
	};

	TopLevelPage._onBypassed = function(oEvent) {
		// TODO duplicate to JSON manifest
		this._oComponent.setCurrentRoute("home");
		this._oComponent.getRootController().onBypassedNavigate();
	};

	return TopLevelPage;
});
}; // end of sap/ino/vc/commons/TopLevelPageFacet.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.commons.mixins.IdentityQuickviewMixin') ) {
jQuery.sap.declare('sap.ino.vc.commons.mixins.IdentityQuickviewMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/vc/commons/mixins/IdentityQuickviewMixin",["sap/ino/commons/application/Configuration"], 
    function(Configuration) {
    "use strict";

    /**
     * @class
     * Mixin that provides a single feature for displaying a Identity QuickView 
     */
    var IdentityQuickviewMixin = function() {
        throw "Mixin may not be instantiated directly";
    };
    
    /**
     * programmatic form for opening an identity QuickView
     */ 
    IdentityQuickviewMixin.openIdentityQuickView = function(oSource, iIdentityId) {
        if (oSource && iIdentityId) {
            if (!this._oIdentityCardView || !this._oIdentityCardView.getController()) {
                this._oIdentityCardView = sap.ui.xmlview({
                    viewName: "sap.ino.vc.iam.IdentityCard"
                });
                oSource.addDependent(this._oIdentityCardView);
            }
            this._oIdentityCardView.getController().open(oSource, iIdentityId);
        }
    };
    
    /**
     * event form for opening an identity QuickView
     */ 
    IdentityQuickviewMixin.onOpenIdentityQuickView = function(oEvent) {
        var oSource =  oEvent.getSource();
        var iIdentityId = 
            // identity card
            oEvent.getParameter("identityId") || 
            // idea card
            oEvent.getParameter("ideaSubmitterId");
        if (oSource && iIdentityId) {
            if (!this._oIdentityCardView || !this._oIdentityCardView.getController()) {
                this._oIdentityCardView = sap.ui.xmlview({
                    viewName: "sap.ino.vc.iam.IdentityCard"
                });
                oSource.addDependent(this._oIdentityCardView);
            }
            this._oIdentityCardView.getController().open(oSource, iIdentityId);
        }
    };

    return IdentityQuickviewMixin;
});
}; // end of sap/ino/vc/commons/mixins/IdentityQuickviewMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.commons.mixins.SimilarIdeasMixin') ) {
jQuery.sap.declare('sap.ino.vc.commons.mixins.SimilarIdeasMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/vc/commons/mixins/SimilarIdeasMixin",[], function() {
	"use strict";

	/**
	 * @class
	 * Mixin that relate to similar ideas
	 */
	var SimilarIdeasMixin = function() {
		throw "Mixin may not be instantiated directly";
	};

	SimilarIdeasMixin.groupByCampaignId = function(aIdeaList, nSelectedCampaignId, nSelectedCampaignName) {
		if (!aIdeaList) {
			return aIdeaList;
		}
		var that = this;
		var aIdeaGroups = [];
		//var selectedCampaignGroup;
		
		var selectedIdeaGroups = [];
		var  otherIdeaGroups = [];
		jQuery.each(aIdeaList, function(index, oIdea) {
			if (oIdea.CAMPAIGN_ID === nSelectedCampaignId) {
				selectedIdeaGroups.push(oIdea);
			}else{
			    otherIdeaGroups.push(oIdea);
			}
		});
        aIdeaGroups.push({
        	GROUP_NAME: that.getText("IDEA_SIMILAR_CURRENT_CAMPAIGN_NAME"),
        	IDEAS: selectedIdeaGroups
        });
        aIdeaGroups.push({
        	GROUP_NAME: that.getText("IDEA_SIMILAR_OTHER_CAMPAIGN_NAME"),
        	IDEAS: otherIdeaGroups
        });

// 		jQuery.each(aIdeaList, function(index, oIdea) {
// 			if (that._filterByCampaignId(aIdeaGroups, oIdea.CAMPAIGN_ID).length === 0) {
// 				aIdeaGroups.push({
// 					CAMPAIGN_ID: oIdea.CAMPAIGN_ID,
// 					CAMPAIGN_NAME: oIdea.CAMPAIGN_NAME,
// 					IDEAS: that._getIdeas(aIdeaList, oIdea)
// 				});
// 			}
// 		});
// 		aIdeaGroups.sort(function(oPrevious, oNextField) {
// 			return that._sort(oPrevious, oNextField, "CAMPAIGN_ID");
// 		});
// 		jQuery.each(aIdeaGroups, function(index, oIdea) {
// 			if(oIdea.CAMPAIGN_ID === nSelectedCampaignId){
// 			    selectedCampaignGroup = aIdeaGroups.splice(index, 1);
// 			    aIdeaGroups.unshift({
// 					CAMPAIGN_ID: selectedCampaignGroup.CAMPAIGN_ID,
// 					CAMPAIGN_NAME: selectedCampaignGroup.CAMPAIGN_NAME,
// 					IDEAS: selectedCampaignGroup.IDEAS
// 				});
// 			    return false;
// 			}
// 		});
		return aIdeaGroups;
	};

	SimilarIdeasMixin._sort = function(oPrevious, oNext, sSortField) {
		if (oPrevious[sSortField] === null) {
			return 1;
		}
		if (oNext[sSortField] === null) {
			return -1;
		}
		var oPreviousField = oPrevious[sSortField];
		var oNextField = oNext[sSortField];
		if (oPreviousField > oNextField) {
			return 1;
		}
		if (oPreviousField < oNextField) {
			return -1;
		}
		return 0;
	};

	SimilarIdeasMixin._getIdeas = function(aIdeaList, oCurrentIdea) {
		var that = this;
		var result = jQuery.map(that._filterByCampaignId(aIdeaList, oCurrentIdea.CAMPAIGN_ID), function(oIdea) {
			return {
				ID: oIdea.ID,
				NAME: oIdea.NAME,
				AGG_SCORE: oIdea.AGG_SCORE
			};
		});
		result.sort(function(oPrevious, oNextField) {
			return that._sort(oPrevious, oNextField, "AGG_SCORE");
		});
		return result;
	};

	SimilarIdeasMixin._filterByCampaignId = function(aIdeaList, nCampaignId) {
		return jQuery.grep(aIdeaList, function(element) {
			return nCampaignId === element.CAMPAIGN_ID;
		});
	};

	return SimilarIdeasMixin;
});
}; // end of sap/ino/vc/commons/mixins/SimilarIdeasMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.commons.mixins.TagGroupMixin') ) {
jQuery.sap.declare('sap.ino.vc.commons.mixins.TagGroupMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/vc/commons/mixins/TagGroupMixin",[], function() {
	"use strict";

	/**
	 * @class
	 * Mixin that relate to tag group
	 */
	var TagGroupMixin = function() {
		throw "Mixin may not be instantiated directly";
	};

	TagGroupMixin.groupByTagGroup = function(aGroupList, aSelectedTag, sOtherTxt) {
		if (!aGroupList) {
			return aGroupList;
		}
		var that = this;
		var aRankedTag = aGroupList;
		aRankedTag.sort(function(oPrevious, oNext) {
			return that._sortTag(oPrevious, oNext, "GROUP_NAME");
		});
		var aTagGroups = [];
		jQuery.each(aRankedTag, function(index, oGroup) {
			if (that._filterByGroupId(aTagGroups, oGroup.GROUP_ID).length === 0) {
				aTagGroups.push({
					GROUP_EXPANDED: that._filterByGroupId(aSelectedTag, oGroup.GROUP_ID).length > 0,
					GROUP_DESCRIPTION: oGroup.GROUP_DESCRIPTION,
					GROUP_ID: oGroup.GROUP_ID,
					GROUP_NAME: oGroup.GROUP_NAME || sOtherTxt,
					GROUP_TAGS: that._getTagFromGroup(aRankedTag, oGroup)
				});
			}
		});
		return aTagGroups;
	};

	TagGroupMixin.setTagCloudProperty = function(oTagData, bHasGroup) {
		if (oTagData.length === 1 && !bHasGroup) {
			oTagData[0].GROUP_EXPANDED = true;
			this.setViewProperty("/List/TAGCLOUD_EXPABLE", false);
			this.setViewProperty("/List/TAGCLOUD_EXP", true);
			this.setViewProperty("/List/TAGCLOUD_BAR_VISIBLE", false);
		} else {
			this.setViewProperty("/List/TAGCLOUD_EXPABLE", true);
			this.setViewProperty("/List/TAGCLOUD_EXP", false);
			this.setViewProperty("/List/TAGCLOUD_BAR_VISIBLE", true);
		}
	};

	TagGroupMixin._sortTag = function(oPrevious, oNext, sSortField) {
		if (oPrevious[sSortField] === null) {
			return 1;
		}
		if (oNext[sSortField] === null) {
			return -1;
		}
		var oPreviousField = oPrevious[sSortField].toUpperCase();
		var oNextField = oNext[sSortField].toUpperCase();
		if (oPreviousField > oNextField) {
			return 1;
		}
		if (oPreviousField < oNextField) {
			return -1;
		}
		return 0;
	};

	TagGroupMixin._getTagFromGroup = function(oRankedTag, oCurrentGroup) {
		var that = this;
		var result = jQuery.map(that._filterByGroupId(oRankedTag, oCurrentGroup.GROUP_ID), function(oGroup) {
			return {
				GROUP_ID: oCurrentGroup.GROUP_ID,
				ID: oGroup.ID,
				NAME: oGroup.NAME,
				RANK: oGroup.RANK
			};
		});
		result.sort(function(oPrevious, oNextField) {
			return that._sortTag(oPrevious, oNextField, "NAME");
		});
		return result;
	};

	TagGroupMixin._filterByGroupId = function(aGroupList, sGroupId) {
		return jQuery.grep(aGroupList, function(element) {
			return sGroupId === element.GROUP_ID;
		});
	};

	return TagGroupMixin;
});
}; // end of sap/ino/vc/commons/mixins/TagGroupMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.evaluation.mixins.ExpertFinderMixin') ) {
jQuery.sap.declare('sap.ino.vc.evaluation.mixins.ExpertFinderMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/vc/evaluation/mixins/ExpertFinderMixin",[],function(){
    "use strict";
    
    /**
     * @class
     * Mixin for a short Identity Profile
     */
    var ExpertFinderMixin = function() {
        throw "Mixin may not be instantiated directly";
    };
    
    ExpertFinderMixin.getExpertFinderDialog = function() {
		if (!this._oExpertFinderDialog) {
 			this._oExpertFinderDialog = this.createFragment("sap.ino.vc.evaluation.fragments.ExpertFinder", this.getView().createId());
			this.getView().addDependent(this._oExpertFinderDialog);
// 			this._oExpertFinderDialog.onAfterRendering = function(){
// 			    jQuery.sap.delayedCall(1000, this, function(){
// 			        jQuery("button.sapInoIdentityAddRemoveBtn").each(function(iIndex, oItem){
//     			        if(!jQuery(oItem).attr("title")){
//     			            jQuery(oItem).remove();
//     			        }
// 			        });
// 			    });
// 			};
		}
		return this._oExpertFinderDialog;
	};
	
	ExpertFinderMixin.onFindExpert = function(oEvent) {
	    var oModel = this.getObjectModel();
		var oDialog = this.getExpertFinderDialog();
		this.setViewProperty("/IS_DIALOG", true);
		this._aExperts = [].concat(oModel.getProperty("/Experts") || []);
		oDialog.open();
	};
	
	ExpertFinderMixin.onExpertFinderDialogOK = function(oEvent){
	    var oDialog = this.getExpertFinderDialog();
	    oDialog.close();
	};
	
	ExpertFinderMixin.onExpertFinderDialogCancel = function(oEvent){
	    var oModel = this.getObjectModel();
	    var oDialog = this.getExpertFinderDialog();
	    oModel.setProperty("/Experts", this._aExperts);
		oDialog.close();
	};
	
    return ExpertFinderMixin;
});
}; // end of sap/ino/vc/evaluation/mixins/ExpertFinderMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.iam.mixins.IdentityProfileMixin') ) {
jQuery.sap.declare('sap.ino.vc.iam.mixins.IdentityProfileMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/iam/mixins/IdentityProfileMixin",[
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/application/Configuration"
], function(
	JSONModel,
	Configuration) {
	"use strict";

	/**
	 * @class
	 * Mixin for a short Identity Profile
	 */
	var IdentityMixin = function() {
		throw "Mixin may not be instantiated directly";
	};

	IdentityMixin.bindIdentityProfile = function(oIdentityProfile, mSettings, iContextId, oIdentityProfileButtons) {
		this._mIdentityMixinIdentityProfile = oIdentityProfile;
		this._setIdentityProfileContext(iContextId || 0);
		if (oIdentityProfile) {
			oIdentityProfile.bindElement("data>" + mSettings.PATH);
			oIdentityProfile.setModel(new JSONModel(mSettings), "IdentityProfile");

			if (oIdentityProfileButtons) {
				oIdentityProfileButtons.bindElement("data>" + this.getView().getBindingContext("data").sPath);
			}
		}
	};

	IdentityMixin.onIdentityProfileCreateIdea = function() {
		if (this._getIdentityProfileContext()) {
			this.navigateTo("idea-create", {
				query: {
					campaign: this._getIdentityProfileContext()
				}
			});
		} else {
			this.navigateTo("idea-create");
		}

	};

	IdentityMixin.onIdentityProfileCreateWall = function() {
		jQuery.sap.require("sap.ino.commons.models.object.Wall");
		var Wall = sap.ino.commons.models.object.Wall;
		var that = this;
		Wall.create({
			ID: -1,
			NAME: that.getText("WALL_BUT_CREATE_WALL_NAME"),
			WALL_TYPE_CODE: "sap.ino.config.WALL",
			BACKGROUND_IMAGE_REPEAT: 0,
			BACKGROUND_IMAGE_URL: "cork.jpg",
			BACKGROUND_IMAGE_ZOOM: 0
		}).done(function(oRequest) {
			that.navigateToWall("wall", {
				id: oRequest.GENERATED_IDS[-1]
			});
		});
	};
	IdentityMixin.onIdentityProfileCreateBlog = function() {
		this.navigateTo("blog-create", {
			query: {
				campaign: this._getIdentityProfileContext()
			}
		});
	};

	IdentityMixin.formatIdentityProfileText = function(sKey) {
		var oProfile = this._mIdentityMixinIdentityProfile;
		if (oProfile) {
			var oTextModel = oProfile.getModel("i18n");
			if (!oTextModel || !sKey) {
				return "";
			}
			return oTextModel.getResourceBundle().getText(sKey);
		}
		return "";
	};

	IdentityMixin.formatIdentityProfileCount = function(sCount) {
		//always use the first registered profile for formatting
		var oProfile = this._mIdentityMixinIdentityProfile;
		if (oProfile) {
			var oBinding = oProfile.getElementBinding("data");
			if (!oBinding) {
				return "0";
			}

			var oContext = oBinding.getBoundContext();
			if (!oContext) {
				return "0";
			}

			var oEntityCount = oContext.getObject();
			if (!oEntityCount) {
				return "0";
			}
			return oEntityCount[sCount] || "0";
		}
		return "0";
	};

	IdentityMixin.formatIdentityProfileNavigationLink = function(sRouteName, oParameter) {
		oParameter = oParameter || {};
		oParameter.id = this._getIdentityProfileContext();
		return this.getOwnerComponent().getNavigationLink(sRouteName, oParameter);
	};

	IdentityMixin._setIdentityProfileContext = function(vContext) {
		this._vIdentityProfileContext = vContext;
	};

	IdentityMixin._getIdentityProfileContext = function() {
		return this._vIdentityProfileContext;
	};

	IdentityMixin.navigateToList = function(oEvent) {
		var oController = this.getView().getController();
		var oLink = oEvent.oSource;
		var sPath = oLink.oPropagatedProperties.oBindingContexts.IdentityProfile.sPath;
		var oRoute = oLink.getModel("IdentityProfile").getProperty(sPath).Route;

		if (oRoute.NAME === "campaign-idealistvariant" || oRoute.NAME === "campaign-idealist" || oRoute.NAME === "campaign-registerapprovallistvariant") {
			oRoute.QUERY.id = oController.getCampaignId();
		}
		oController.navigateTo(oRoute.NAME, oRoute.QUERY);
	};

	IdentityMixin.formatIdentityProfileCountVisibility = function(sCount, sVariant, bExpert, sNo, aRoles, bVisible) {
		// 		var bExpertInCampaign;
		// 		var oObject = this.getModel("object");
		// 		if (oObject) {
		// 			bExpertInCampaign = oObject.getProperty("/property/nodes/Root/customProperties/expertInCampaign");
		// 		}
		if (aRoles && !this._formatIdentityProfileVisByRole(aRoles, sCount)) {
			return false;
		}
		///For Qualified ideas for rewards(Reward Enable and Count > 0, will enable this visible)
		var bSysReward = !!(Configuration.getSystemSetting("sap.ino.config.REWARD_ACTIVE") * 1);

		if (sCount === "QUALIFIED_IDEAS_FOR_REWARDS") {
			if (!bVisible || !bSysReward) {
				return false;
			}
		}
		if(sCount === "MY_PENDING_APPR_COUNT" && this.getCurrentRoute() === "campaign"){
			if (!bVisible) {
				return false;
			}		    
		}

		return true;
		// 		if (sCount === "REWARDS_MANAGEMENT_COUNT" && (!(this._oComponent && this._oComponent.getModel("user").getProperty(
		// 			"/privileges/sap.ino.ui::campaign_manager")) || Configuration.getSystemSetting("sap.ino.config.REWARD_ACTIVE") !== "1")) {
		// 			return false;
		// 		}
		// 		if (sCount === "COMPLETED_IDEA_COUNT" || sCount === "MY_PENDING_EVAL_ITEM_COUNT" || sCount === "REWARDS_MANAGEMENT_COUNT") {
		// 			var oProfile = this._mIdentityMixinIdentityProfile;
		// 			if (!oProfile) {
		// 				return false;
		// 			}
		// 			var oBinding = oProfile.getElementBinding("data");
		// 			if (!oBinding) {
		// 				return false;
		// 			}

		// 			var oContext = oBinding.getBoundContext();
		// 			if (!oContext) {
		// 				return false;
		// 			}

		// 			var oEntityCount = oContext.getObject();
		// 			if (!oEntityCount) {
		// 				return false;
		// 			}
		// 			return Number(oEntityCount[sCount]) > 0;
		// 		}
		// 		return !bExpert || !!bExpertInCampaign;
	};

	IdentityMixin._formatIdentityProfileVisByRole = function(aRoles, sCountName) {

		if (aRoles[0].indexOf("sap.ino.ui::") > -1) {
				return this._hasCampaignsPrivileges(aRoles);
		}
		return this._hasCampaignInstanceRole(aRoles);
	};

	IdentityMixin._hasCampaignsPrivileges = function(aRoles) {
		return this._checkCampaignsPrivileges(aRoles, this.getModel("user").getProperty("/privileges"));
	};

	IdentityMixin._hasCampaignInstanceRole = function(aRoles) {
		return this._checkCampaignsPrivileges(aRoles, this.getModel("data").getProperty("/CampaignInstanceRoles(" + this.getCampaignId() + ")"));
	};

	IdentityMixin._checkCampaignsPrivileges = function(aRoles, oExistsRoles) {
		if (!oExistsRoles) {
			return false;
		}
		var bExists = false;
		for (var iRoleIndex = 0; iRoleIndex <= aRoles.length - 1; iRoleIndex++) {
			if (oExistsRoles[aRoles[iRoleIndex]]) {
				bExists = true;
				break;
			}
		}
		if (!bExists) {
			return false;
		}
		return true;
	};

	return IdentityMixin;
});
}; // end of sap/ino/vc/iam/mixins/IdentityProfileMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.ActivitiesBlock') ) {
jQuery.sap.declare('sap.ino.vc.idea.ActivitiesBlock'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.uxap.BlockBase'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/ActivitiesBlock",['sap/uxap/BlockBase'],
    function(BlockBase) {
        "use strict";
        var fnBlock = BlockBase.extend("sap.ino.vc.idea.ActivitiesBlock", {
            metadata: {
    			views: {
    				Collapsed: {
    					viewName: "sap.ino.vc.idea.Activities",
    					type: "XML"
    				},
    				Expanded: {
    					viewName: "sap.ino.vc.idea.Activities",
    					type: "XML"
    				}
    			}
		    }
        });
        return fnBlock;
    });

}; // end of sap/ino/vc/idea/ActivitiesBlock.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.AttachmentBlock') ) {
jQuery.sap.declare('sap.ino.vc.idea.AttachmentBlock'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.uxap.BlockBase'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/AttachmentBlock",['sap/uxap/BlockBase'],
    function(BlockBase) {
        "use strict";
        return BlockBase.extend("sap.ino.vc.idea.AttachmentBlock", {
            metadata: {
    			views: {
    				Collapsed: {
    					viewName: "sap.ino.vc.attachment.Attachment",
    					type: "XML"
    				},
    				Expanded: {
    					viewName: "sap.ino.vc.attachment.Attachment",
    					type: "XML"
    				}
    			}
		    }
        });
    });

}; // end of sap/ino/vc/idea/AttachmentBlock.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.CommentBlock') ) {
jQuery.sap.declare('sap.ino.vc.idea.CommentBlock'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.uxap.BlockBase'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/CommentBlock",['sap/uxap/BlockBase'],
    function(BlockBase) {
        "use strict";
        return BlockBase.extend("sap.ino.vc.idea.CommentBlock", {
            metadata: {
    			views: {
    				Collapsed: {
    					viewName: "sap.ino.vc.comment.Comment",
    					type: "XML"
    				},
    				Expanded: {
    					viewName: "sap.ino.vc.comment.Comment",
    					type: "XML"
    				}
    			}
		    }
        });
    });

}; // end of sap/ino/vc/idea/CommentBlock.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.CommentRichBlock') ) {
jQuery.sap.declare('sap.ino.vc.idea.CommentRichBlock'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.uxap.BlockBase'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/CommentRichBlock",['sap/uxap/BlockBase'],
    function(BlockBase) {
        "use strict";
        return BlockBase.extend("sap.ino.vc.idea.CommentRichBlock", {
            metadata: {
    			views: {
    				Collapsed: {
    					viewName: "sap.ino.vc.comment.RichComment",
    					type: "XML"
    				},
    				Expanded: {
    					viewName: "sap.ino.vc.comment.RichComment",
    					type: "XML"
    				}
    			}
		    }
        });
    });

}; // end of sap/ino/vc/idea/CommentRichBlock.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.EvaluationsBlock') ) {
jQuery.sap.declare('sap.ino.vc.idea.EvaluationsBlock'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.uxap.BlockBase'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/EvaluationsBlock",['sap/uxap/BlockBase'],
    function(BlockBase) {
        "use strict";
        return BlockBase.extend("sap.ino.vc.idea.EvaluationsBlock", {
            metadata: {
    			views: {
    				Collapsed: {
    					viewName: "sap.ino.vc.idea.Evaluations",
    					type: "XML"
    				},
    				Expanded: {
    					viewName: "sap.ino.vc.idea.Evaluations",
    					type: "XML"
    				}
    			}
		    }
        });
    });

}; // end of sap/ino/vc/idea/EvaluationsBlock.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.ExpertsBlock') ) {
jQuery.sap.declare('sap.ino.vc.idea.ExpertsBlock'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.uxap.BlockBase'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/ExpertsBlock",['sap/uxap/BlockBase'],
    function(BlockBase) {
        "use strict";
        return BlockBase.extend("sap.ino.vc.idea.ExpertsBlock", {
            metadata: {
    			views: {
    				Collapsed: {
    					viewName: "sap.ino.vc.idea.Experts",
    					type: "XML"
    				},
    				Expanded: {
    					viewName: "sap.ino.vc.idea.Experts",
    					type: "XML"
    				}
    			}
		    }
        });
    });

}; // end of sap/ino/vc/idea/ExpertsBlock.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.IntegrationBlock') ) {
jQuery.sap.declare('sap.ino.vc.idea.IntegrationBlock'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.uxap.BlockBase'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/IntegrationBlock",['sap/uxap/BlockBase'],
    function(BlockBase) {
        "use strict";
        return BlockBase.extend("sap.ino.vc.idea.IntegrationBlock", {
            metadata: {
    			views: {
    				Collapsed: {
    					viewName: "sap.ino.vc.idea.Integration",
    					type: "XML"
    				},
    				Expanded: {
    					viewName: "sap.ino.vc.idea.Integration",
    					type: "XML"
    				}
    			}
		    }
        });
    });
}; // end of sap/ino/vc/idea/IntegrationBlock.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.InternalAttachmentBlock') ) {
jQuery.sap.declare('sap.ino.vc.idea.InternalAttachmentBlock'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.uxap.BlockBase'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/InternalAttachmentBlock",['sap/uxap/BlockBase'],
    function(BlockBase) {
        "use strict";
        return BlockBase.extend("sap.ino.vc.idea.InternalAttachmentBlock", {
            metadata: {
    			views: {
    				Collapsed: {
    					viewName: "sap.ino.vc.internal.InternalAttachment",
    					type: "XML"
    				},
    				Expanded: {
    					viewName: "sap.ino.vc.internal.InternalAttachment",
    					type: "XML"
    				}
    			}
		    }
        });
    });

}; // end of sap/ino/vc/idea/InternalAttachmentBlock.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.InternalCommentBlock') ) {
jQuery.sap.declare('sap.ino.vc.idea.InternalCommentBlock'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.uxap.BlockBase'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/InternalCommentBlock",['sap/uxap/BlockBase'],
    function(BlockBase) {
        "use strict";
        return BlockBase.extend("sap.ino.vc.idea.InternalCommentBlock", {
            metadata: {
    			views: {
    				Collapsed: {
    					viewName: "sap.ino.vc.internal.InternalNote",
    					type: "XML"
    				},
    				Expanded: {
    					viewName: "sap.ino.vc.internal.InternalNote",
    					type: "XML"
    				}
    			}
		    }
        });
    });

}; // end of sap/ino/vc/idea/InternalCommentBlock.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.InternalSectionBlock') ) {
jQuery.sap.declare('sap.ino.vc.idea.InternalSectionBlock'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.uxap.BlockBase'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/InternalSectionBlock",['sap/uxap/BlockBase'],
    function(BlockBase) {
        "use strict";
        return BlockBase.extend("sap.ino.vc.idea.InternalSectionBlock", {
            metadata: {
    			views: {
    				Collapsed: {
    					viewName: "sap.ino.vc.internal.InternalSection",
    					type: "XML"
    				},
    				Expanded: {
    					viewName: "sap.ino.vc.internal.InternalSection",
    					type: "XML"
    				}
    			}
		    }
        });
    });
}; // end of sap/ino/vc/idea/InternalSectionBlock.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.InternalWallBlock') ) {
jQuery.sap.declare('sap.ino.vc.idea.InternalWallBlock'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.uxap.BlockBase'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/InternalWallBlock",['sap/uxap/BlockBase'],
    function(BlockBase) {
        "use strict";
        return BlockBase.extend("sap.ino.vc.idea.InternalWallBlock", {
            metadata: {
    			views: {
    				Collapsed: {
    					viewName: "sap.ino.vc.internal.InternalWall",
    					type: "XML"
    				},
    				Expanded: {
    					viewName: "sap.ino.vc.internal.InternalWall",
    					type: "XML"
    				}
    			}
		    }
        });
    });

}; // end of sap/ino/vc/idea/InternalWallBlock.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.PPMBlock') ) {
jQuery.sap.declare('sap.ino.vc.idea.PPMBlock'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.uxap.BlockBase'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/PPMBlock",['sap/uxap/BlockBase'],
    function(BlockBase) {
        "use strict";
        return BlockBase.extend("sap.ino.vc.idea.PPMBlock", {
            metadata: {
    			views: {
    				Collapsed: {
    					viewName: "sap.ino.vc.idea.PPM",
    					type: "XML"
    				},
    				Expanded: {
    					viewName: "sap.ino.vc.idea.PPM",
    					type: "XML"
    				}
    			}
		    }
        });
    });

}; // end of sap/ino/vc/idea/PPMBlock.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.RelatedIdeasBlock') ) {
jQuery.sap.declare('sap.ino.vc.idea.RelatedIdeasBlock'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.uxap.BlockBase'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/RelatedIdeasBlock",['sap/uxap/BlockBase'],
    function(BlockBase) {
        "use strict";
        return BlockBase.extend("sap.ino.vc.idea.RelatedIdeasBlock", {
            metadata: {
    			views: {
    				Collapsed: {
    					viewName: "sap.ino.vc.idea.RelatedIdeas",
    					type: "XML"
    				},
    				Expanded: {
    					viewName: "sap.ino.vc.idea.RelatedIdeas",
    					type: "XML"
    				}
    			}
		    }
        });
    });

}; // end of sap/ino/vc/idea/RelatedIdeasBlock.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.RewardsBlock') ) {
jQuery.sap.declare('sap.ino.vc.idea.RewardsBlock'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.uxap.BlockBase'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/RewardsBlock",['sap/uxap/BlockBase'],
    function(BlockBase) {
        "use strict";
        return BlockBase.extend("sap.ino.vc.idea.RewardsBlock", {
            metadata: {
    			views: {
    				Collapsed: {
    					viewName: "sap.ino.vc.idea.Rewards",
    					type: "XML"
    				},
    				Expanded: {
    					viewName: "sap.ino.vc.idea.Rewards",
    					type: "XML"
    				}
    			}
		    }
        });
    });

}; // end of sap/ino/vc/idea/RewardsBlock.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.VolunteersBlock') ) {
jQuery.sap.declare('sap.ino.vc.idea.VolunteersBlock'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.uxap.BlockBase'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/VolunteersBlock",['sap/uxap/BlockBase'],
    function(BlockBase) {
        "use strict";
        return BlockBase.extend("sap.ino.vc.idea.VolunteersBlock", {
            metadata: {
    			views: {
    				Collapsed: {
    					viewName: "sap.ino.vc.idea.Volunteers",
    					id: "volunteerView",
    					type: "XML"
    				},
    				Expanded: {
    					viewName: "sap.ino.vc.idea.Volunteers",
    					id: "volunteerView",
    					type: "XML"
    				}
    			}
		    }
        });
    });

}; // end of sap/ino/vc/idea/VolunteersBlock.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.VotesBlock') ) {
jQuery.sap.declare('sap.ino.vc.idea.VotesBlock'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.uxap.BlockBase'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/VotesBlock",['sap/uxap/BlockBase'],
    function(BlockBase) {
        "use strict";
        return BlockBase.extend("sap.ino.vc.idea.VotesBlock", {
            metadata: {
    			views: {
    				Collapsed: {
    					viewName: "sap.ino.vc.idea.Votes",
    					id: "voteView",
    					type: "XML"
    				},
    				Expanded: {
    					viewName: "sap.ino.vc.idea.Votes",
    					id: "voteView",
    					type: "XML"
    				}
    			}
		    }
        });
    });

}; // end of sap/ino/vc/idea/VotesBlock.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.WallListBlock') ) {
jQuery.sap.declare('sap.ino.vc.idea.WallListBlock'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.uxap.BlockBase'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/WallListBlock",['sap/uxap/BlockBase'],
    function(BlockBase) {
        "use strict";
        return BlockBase.extend("sap.ino.vc.idea.WallListBlock", {
            metadata: {
    			views: {
    				Collapsed: {
    					viewName: "sap.ino.vc.wall.ListInIdea",
    					type: "XML"
    				},
    				Expanded: {
    					viewName: "sap.ino.vc.wall.ListInIdea",
    					type: "XML"
    				}
    			}
		    }
        });
    });

}; // end of sap/ino/vc/idea/WallListBlock.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.mixins.CampaignFormFilterMixin') ) {
jQuery.sap.declare('sap.ino.vc.idea.mixins.CampaignFormFilterMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/mixins/CampaignFormFilterMixin",[
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator"],
	function(Filter, FilterOperator) {
		var CampaignFormFilterMixin = function() {
			throw "Mixin may not be instantiated directly";
		};

		CampaignFormFilterMixin.initCampaignFormItems = function() {
			var sIdeaFormId = this.getFilterItem("/CAMPAIGNFORM");
			if (!sIdeaFormId) {
				return;
			}
			var oModel = this.getDefaultODataModel ? this.getDefaultODataModel() : this.getModel("data");
			var that = this;
			var bIsManaged = this._check4ManagingList();

			oModel.read("/CampaignFormSuggestionParams(searchToken='',filterBackoffice=" + (bIsManaged ? 1 : 0) + ")/Results", {
				urlParameters: {
					"$orderby": "DEFAULT_TEXT",
					"$filter": "CODE eq '" + (sIdeaFormId || "") + "'"
				},
				success: function(oData) {
					that.setFilterItem("/campaignFormSuggestion", oData.results);
					var oCampaignFormFilter = that.byId("campaignFormFilterList") || that.getFilterElementById("campaignFormFilterList");
					oCampaignFormFilter.setFilterSuggests(false);
					if (oCampaignFormFilter.getSuggestionItems().length > 0) {
						oCampaignFormFilter.setSelectionItem(oCampaignFormFilter.getSuggestionItems()[0]);
					}
				}
			});
		};

		CampaignFormFilterMixin.onCampaignFormSuggestion = function(oEvent) {
			var that = this;
			var oModel = that.getDefaultODataModel ? that.getDefaultODataModel() : that.getModel("data");
			var mEvent = jQuery.extend({}, oEvent, true);
			var sTerm = jQuery.sap.encodeURL(mEvent.getParameter("suggestValue"));
			that.resetClientMessages();
			var bIsManaged = this._check4ManagingList();
			oModel.read("/CampaignFormSuggestionParams(searchToken='" + sTerm + "',filterBackoffice=" + (bIsManaged ? 1 : 0) + ")/Results", {
				urlParameters: {
					"$orderby": "DEFAULT_TEXT"
				},
				success: function(oData) {
					that.setFilterItem("/campaignFormSuggestion", oData.results);
					var oCampFilter = that.byId("campaignFormFilterList") || that.getFilterElementById("campaignFormFilterList");
					oCampFilter.setFilterSuggests(false);
				}
			});
		};

		CampaignFormFilterMixin.hasCampaignFormFilter = function() {
			return !!this.getFilterItem("/CAMPAIGNFORM");
		};

		CampaignFormFilterMixin.getCampaignFormFilter = function() {
			return new Filter({
				filters: [
                    new Filter("CAMPAIGN_FORM_CODE", FilterOperator.EQ, (this.getFilterItem("/CAMPAIGNFORM") || "")),
					new Filter("CAMPAIGN_ADMIN_FORM_CODE", FilterOperator.EQ, (this.getFilterItem("/CAMPAIGNFORM") || ""))],
				and: false
			});
		};

		CampaignFormFilterMixin.getCampaignFormQuery = function() {
			return this.getFilterItem("/CAMPAIGNFORM");
		};

		CampaignFormFilterMixin.restCampaignForm = function() {
			this.setCampaignForm("");
		};

		CampaignFormFilterMixin.setCampaignForm = function(sIdeaFormId) {
			this.setFilterItem("/CAMPAIGNFORM", sIdeaFormId);
		};

		CampaignFormFilterMixin.onHandleCampaignFormFilterHelp = function() {
			var that = this;
			var oModel = that.getDefaultODataModel ? that.getDefaultODataModel() : that.getModel("data");
			var bIsManaged = this._check4ManagingList();
			oModel.read("/CampaignFormSuggestionParams(searchToken='',filterBackoffice=" + (bIsManaged ? 1 : 0) + ")/Results", {
				urlParameters: {
					"$orderby": "DEFAULT_TEXT"
				},
				success: function(oData) {
					that.setFilterItem("/campaignFormSuggestion", oData.results);
					var oCampFilter = that.byId("campaignFormFilterList") || that.getFilterElementById("campaignFormFilterList");
					oCampFilter.setFilterSuggests(false);
					// create dialog
					var oCampaignFormListDialog = that.createCampaignFormListDialog();
					oCampaignFormListDialog.open();
				}
			});
		};

		CampaignFormFilterMixin.createCampaignFormListDialog = function() {
			if (!this._campaignFormDialog) {
				this._campaignFormDialog = this.createFragment("sap.ino.vc.idea.fragments.CampaignFormSuggestionSelectList", this.getView().getId());
				this.getView().addDependent(this._campaignFormDialog);
			}
			return this._campaignFormDialog;
		};

		CampaignFormFilterMixin.onCampaignFormDialogSearch = function(oEvent) {
			var sValue = jQuery.sap.encodeURL(oEvent.getParameter("value"));
			var oModel = this.getDefaultODataModel ? this.getDefaultODataModel() : this.getModel("data");
			var that = this;
			var bIsManaged = this._check4ManagingList();
			oModel.read("/CampaignFormSuggestionParams(searchToken='" + sValue + "',filterBackoffice=" + (bIsManaged ? 1 : 0) + ")/Results", {
				urlParameters: {
					"$orderby": "DEFAULT_TEXT"
				},
				success: function(oData) {
					that.setFilterItem("/campaignFormSuggestion", oData.results);
				}
			});
		};

		CampaignFormFilterMixin.onCampaignFormDialogItemsSelect = function(oEvent) {
			var sSelectedKey = oEvent.getParameter("selectedItem").data("CODE") + "";
			var oCampaignFormFilterList = this.byId("campaignFormFilterList") || this.getFilterElementById("campaignFormFilterList");
			var oCampaignFormFilterItems = oCampaignFormFilterList.getSuggestionItems();
			for (var i = 0; i < oCampaignFormFilterItems.length; i++) {
				if (oCampaignFormFilterItems[i].getProperty("key") === sSelectedKey) {
					oCampaignFormFilterList.setSelectionItem(oCampaignFormFilterItems[i]);
					break;
				}
			}
			this.setFilterItem("/CAMPAIGNFORM", sSelectedKey);
			this.clearIdeaFormFieldsCriterias();
			this.getIdeaFormFieldsCriterias();
		};

		CampaignFormFilterMixin.onFilterCampaignFormChange = function(oEvent) {
			var oSource = oEvent.getParameter("selectedItem");
			if (oSource) {
				var sSelectedKey = oSource.getProperty("key");
				this.setFilterItem("/CAMPAIGNFORM", sSelectedKey);

				this.clearIdeaFormFieldsCriterias();
				this.getIdeaFormFieldsCriterias();
			}
		};

		CampaignFormFilterMixin.onClearCampaignFormFilter = function(oEvent) {
			var sValue = oEvent.getParameter("value");
			if (sValue.trim() === "") {
				this.setFilterItem("/CAMPAIGNFORM", "");
			}
			this.clearIdeaFormFieldsCriterias();
		};

		CampaignFormFilterMixin.campaignFormFormatter = function(sValue, sPersonalize) {
			return !sValue && !!sPersonalize;
		};

		CampaignFormFilterMixin.campaignFormLabelFormatter = function(sValue, sPersonalize, sIdeaFormValue, aIdeaFormList) {
		    if(!sPersonalize){
		        return false;
		    }
		    if(!sValue){
		        return true;
		    }
			return aIdeaFormList && aIdeaFormList.length > 1;
		};

		return CampaignFormFilterMixin;
	});
}; // end of sap/ino/vc/idea/mixins/CampaignFormFilterMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.mixins.ChangeAuthorActionFormatter') ) {
jQuery.sap.declare('sap.ino.vc.idea.mixins.ChangeAuthorActionFormatter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/vc/idea/mixins/ChangeAuthorActionFormatter",[], function() {
    "use strict";
    
    var oChangeAuthorActionFormatter = function() {};
    
    oChangeAuthorActionFormatter.formatterMoveRewardMessage = function(sOldAuthor, sNewAuthor) {
        return this.getText("IDEA_OBJECT_MSG_MOVE_REWARDS", [sOldAuthor, sNewAuthor]);
    };
    
    oChangeAuthorActionFormatter.formatterMoveSelfEvluMessage = function(sOldAuthor, sNewAuthor) {
        return this.getText("IDEA_OBJECT_MSG_MOVE_EVALUATION_AUTHOR", [sOldAuthor, sNewAuthor]);
    };
    
    return oChangeAuthorActionFormatter;
});
}; // end of sap/ino/vc/idea/mixins/ChangeAuthorActionFormatter.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.mixins.ChangeStatusActionFormatter') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.vc.idea.mixins.ChangeStatusActionFormatter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/vc/idea/mixins/ChangeStatusActionFormatter",[], function () {
    "use strict";
    
    var oChangeStatusActionFormatter = function() {};
    
    oChangeStatusActionFormatter.reponseTextMinLength = function(sTextModuleCode) {
        return sTextModuleCode ? 0 : 1;
    };
    
    return oChangeStatusActionFormatter;
});
}; // end of sap/ino/vc/idea/mixins/ChangeStatusActionFormatter.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.mixins.CommonFilterMixin') ) {
jQuery.sap.declare('sap.ino.vc.idea.mixins.CommonFilterMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/mixins/CommonFilterMixin",["sap/ui/model/json/JSONModel"],
	function(JSONModel) {
		var CommonFilterMixin = function() {
			throw "Mixin may not be instantiated directly";
		};

		CommonFilterMixin.initFilterItemModel = function() {
			this.setModel(new JSONModel(), "filterItemModel");
			this.setFilterItem("/IsValidDueFrom", true);
			this.setFilterItem("/IsValidDueTo", true);
		};

		CommonFilterMixin.getFilterItemModel = function() {
			return this.getModel("filterItemModel");
		};

		CommonFilterMixin.getFilterItem = function(sPath) {
			return this.getModel("filterItemModel").getProperty(sPath);
		};

		CommonFilterMixin.setFilterItem = function(sPath, value) {
			return this.getModel("filterItemModel").setProperty(sPath, value);
		};

		CommonFilterMixin.isCanApply = function() {
			return this.getModel("filterItemModel").getProperty("/IsValidDueFrom") &&
				this.getModel("filterItemModel").getProperty("/IsValidDueTo");
		};

		return CommonFilterMixin;
	});
}; // end of sap/ino/vc/idea/mixins/CommonFilterMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.mixins.CompanyViewFilterMixin') ) {
jQuery.sap.declare('sap.ino.vc.idea.mixins.CompanyViewFilterMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/vc/idea/mixins/CompanyViewFilterMixin",["sap/ino/commons/application/Configuration"],
	function(Configuration) {
		var CompanyViewFilterMixin = function() {
			throw "Mixin may not be instantiated directly";
		};

		function initDefaultCompanyViewCriterias() {
			this.setFilterItem("/CompanyViewCriterias", {
				CriteriaType: Configuration.getSysCompanyView(),
				CriteriaToken: '',
				CriteriaRole: '1',
				CriteriaEnable: Configuration.getSysCompanyEnable(),
				CriteriaLabel: Configuration.getSysCompanyLabel()
			});
		}

		function initCompanyViewCriteriaFromQueryString(oQuery) {
			var that = this;
			var oCompanyViewCriterias = {
				CriteriaType: Configuration.getSysCompanyView(),
				CriteriaToken: '',
				CriteriaRole: '1',
				CriteriaEnable: Configuration.getSysCompanyEnable(),
				CriteriaLabel: Configuration.getSysCompanyLabel()
			};

			if (oQuery.hasOwnProperty("cvt")) {
				oCompanyViewCriterias.CriteriaToken = decodeURIComponent(oQuery.cvt);
			}
			if (oQuery.hasOwnProperty("cvr")) {
				oCompanyViewCriterias.CriteriaRole = decodeURIComponent(oQuery.cvr);
			}
			that.setFilterItem("/CompanyViewCriterias", oCompanyViewCriterias);
		}

		CompanyViewFilterMixin.initCompanyView = function() {
			initDefaultCompanyViewCriterias.call(this);
			this.setFilterItem("/CompanyViewRoleList", [
				{
					KEY: "1",
					TEXT: this.getText("LIST_TIT_FILTER_ORGANIZATION_VIEW_ROLE_SUBMITTER")
			    }, {
					KEY: "2",
					TEXT: this.getText("LIST_TIT_FILTER_ORGANIZATION_VIEW_ROLE_VOTER")
			    }, {
					KEY: "3",
					TEXT: this.getText("LIST_TIT_FILTER_ORGANIZATION_VIEW_ROLE_COMMENTER")
			    }]);
		};

		CompanyViewFilterMixin.hasCompanyViewFilters = function() {
			var aCriterias = this.getFilterItem("/CompanyViewCriterias");
			if (!aCriterias) {
				return false;
			}
			return aCriterias.CriteriaToken;
		};

		CompanyViewFilterMixin.initCompanyViewItems = function(oQuery) {
			if (!oQuery || !oQuery.hasOwnProperty("cvt")) {
				initDefaultCompanyViewCriterias.call(this);
				return;
			}
			initCompanyViewCriteriaFromQueryString.call(this, oQuery);
		};

		CompanyViewFilterMixin.getCompanyViewQuery = function(oQuery) {
			var aCriterias = this.getFilterItem("/CompanyViewCriterias");
			if (!aCriterias) {
				return;
			}
			oQuery.cvt = decodeURIComponent(this.getFilterItem("/CompanyViewCriterias/CriteriaToken"));
			oQuery.cvr = this.getFilterItem("/CompanyViewCriterias/CriteriaRole");
			oQuery.cvy = this.getFilterItem("/CompanyViewCriterias/CriteriaType");
		};

		CompanyViewFilterMixin.getEmptyCompanyViewFilters = function() {
			return ",cvt='',cvr=1,cvy=1";
		};

		CompanyViewFilterMixin.setQueryObjectCompanyViewFilters = function(oParameter) {
			var aCriterias = this.getFilterItem("/CompanyViewCriterias");
			oParameter.cvt = '';
			oParameter.cvr = '1';
			oParameter.cvy = Configuration.getSysCompanyView();
			if (!aCriterias) {
				return;
			}
			
			oParameter.cvy = this.getFilterItem("/CompanyViewCriterias/CriteriaType");
			oParameter.cvr = this.getFilterItem("/CompanyViewCriterias/CriteriaRole");
			oParameter.cvt = encodeURIComponent(this.getFilterItem("/CompanyViewCriterias/CriteriaToken"));
		};

		CompanyViewFilterMixin.getCompanyViewFilters = function() {
			var aCriterias = this.getFilterItem("/CompanyViewCriterias");
			if (!aCriterias || !Configuration.getSysCompanyEnable()) {
				return this.getEmptyCompanyViewFilters();
			}
			return ",cvt='" + encodeURIComponent(this.getFilterItem("/CompanyViewCriterias/CriteriaToken")) + "',cvr=" + this.getFilterItem(
				"/CompanyViewCriterias/CriteriaRole") + ",cvy=" + this.getFilterItem("/CompanyViewCriterias/CriteriaType");
		};

		CompanyViewFilterMixin.setCompanyCriteriaToQuery = function(oQuery) {
			var aCriterias = this.getFilterItem("/CompanyViewCriterias");
			if (!aCriterias || !aCriterias.CriteriaToken) {
				return;
			}
			oQuery.cvy = Configuration.getSysCompanyView();
			oQuery.cvr = this.getFilterItem("/CompanyViewCriterias/CriteriaRole");
			oQuery.cvt = encodeURIComponent(this.getFilterItem("/CompanyViewCriterias/CriteriaToken"));
		};

		CompanyViewFilterMixin.resetCompanyCriterias = function() {
			initDefaultCompanyViewCriterias.call(this);
		};

		CompanyViewFilterMixin.onCompanyViewRoleChange = function(oEvent) {
			this.setFilterItem("/CompanyViewCriterias/CriteriaRole", oEvent.getParameter("selectedItem").getKey());
		};

		CompanyViewFilterMixin.onFilterCompanyViewChange = function(oEvent) {
			var oSource = oEvent.getParameter("selectedItem");
			if (oSource) {
				var sSelectedKey = oSource.getProperty("key");
				this.setFilterItem("/CompanyViewCriterias/CriteriaToken", sSelectedKey);
			}
		};

		CompanyViewFilterMixin.onCompanyViewSuggestion = function(oEvent) {
			var that = this;
			var oModel = that.getDefaultODataModel ? that.getDefaultODataModel() : that.getModel("data");
			var mEvent = jQuery.extend({}, oEvent, true);
			var sTerm = jQuery.sap.encodeURL(mEvent.getParameter("suggestValue"));
			var type = Configuration.getSysCompanyView(),
				sTypeName = type === "1" ? "COMPANY" : "ORGANIZATION";
			that.resetClientMessages();
			oModel.read("/SearchIdentityOrgCompanyParams(searchToken='" + sTerm + "')/Results", {
				urlParameters: {
					"$orderby": "SEARCH_SCORE",
					"$filter": "TYPENAME eq '" + type + "'"
				},
				success: function(oData) {
					var aSuggestion = [];
					if (oData.results) {
						oData.results.forEach(function(oItem) {
							aSuggestion.push({
								"DEFAULT_TEXT": oItem[sTypeName],
								"DISPLAY_LABEL": oItem.DISPLAYLABEL
							});
						});
					}
					that.setFilterItem("/companyViewSuggestion", aSuggestion);
					var oCampFilter = that.byId("companyViewFilterList") || that.getFilterElementById("companyViewFilterList");
					oCampFilter.setFilterSuggests(false);
				}
			});
		};

		CompanyViewFilterMixin.companyViewTitle = function(sValue) {
			if (!sValue) {
				return "";
			}
			return sValue === "1" ? this.getText("LIST_TIT_FILTER_COMPANY_VIEW_HEADER") : this.getText("LIST_TIT_FILTER_ORGANIZATION_VIEW_HEADER");
		};
		return CompanyViewFilterMixin;
	});
}; // end of sap/ino/vc/idea/mixins/CompanyViewFilterMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.mixins.DueFilterMixin') ) {
jQuery.sap.declare('sap.ino.vc.idea.mixins.DueFilterMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ValueState'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/mixins/DueFilterMixin",[
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/ui/core/ValueState",
    "sap/ui/core/format/DateFormat"],
	function(Filter, FilterOperator, ValueState, DateFormat) {
		var KEY_FILTER_NAME = "FOLLOW_UP_DATE";
		var oFilterValues = {
			from: undefined,
			to: undefined
		};
		var DateFormatter = DateFormat.getInstance({
			pattern: "YYYY-MM-dd"
		});

		function validValue(oEvent, bFrom) {
			if (!oEvent.getParameter("valid")) {
				oEvent.getSource().setValueState(ValueState.Error);
				return false;
			}
			oEvent.getSource().setValueState(ValueState.None);
			var sValue = DateFormatter.format(oEvent.getSource().getDateValue());
			if (bFrom && oFilterValues.to && sValue > oFilterValues.to) {
				oEvent.getSource().setValueState(ValueState.Error);
				return false;
			}
			if (!bFrom && oFilterValues.from && sValue < oFilterValues.from) {
				oEvent.getSource().setValueState(ValueState.Error);
				return false;
			}
			return true;
		}

		var DueFilterMixin = function() {
			throw "Mixin may not be instantiated directly";
		};

		DueFilterMixin.hasDueFromFilter = function() {
			return !!oFilterValues.from;
		};

		DueFilterMixin.hasDueToFilter = function() {
			return !!oFilterValues.to;
		};

		DueFilterMixin.hasDueFilter = function() {
			return this.hasDueFromFilter() || this.hasDueToFilter();
		};

		DueFilterMixin.getDueFilter = function() {
			if (oFilterValues.from && oFilterValues.to) {
				return new Filter({
					filters: [
        				new Filter({
							filters: [
        					    new Filter(KEY_FILTER_NAME, FilterOperator.EQ, DateFormatter.parse(oFilterValues.from)),
        			            new Filter(KEY_FILTER_NAME, FilterOperator.GE, DateFormatter.parse(oFilterValues.from))],
							and: false
						}),
        				new Filter({
							filters: [
        					    new Filter(KEY_FILTER_NAME, FilterOperator.EQ, DateFormatter.parse(oFilterValues.to)),
        			            new Filter(KEY_FILTER_NAME, FilterOperator.LE, DateFormatter.parse(oFilterValues.to))],
							and: false
						})],
					and: true
				});
			}
			if (oFilterValues.from) {
				return new Filter(KEY_FILTER_NAME, FilterOperator.EQ, DateFormatter.parse(oFilterValues.from));
			}
			if (oFilterValues.to) {
				return new Filter(KEY_FILTER_NAME, FilterOperator.EQ, DateFormatter.parse(oFilterValues.to));
			}
			return new Filter(KEY_FILTER_NAME, FilterOperator.EQ, '');
		};

		DueFilterMixin.setDueFrom = function(oEvent) {
			if (!validValue(oEvent, true)) {
				oEvent.getSource().setValueStateText(this.getText("LIST_TIT_FILTER_DUEFROM_GT_DUETO"));
				this.setFilterItem("/IsValidDueFrom", false);
				return;
			}
			var dueFrom = DateFormatter.format(oEvent.getSource().getDateValue());
			this.setFilterItem("/DueFrom", dueFrom);
			this.setFilterItem("/IsValidDueFrom", true);
			oFilterValues.from = dueFrom;
		};

		DueFilterMixin.setDueTo = function(oEvent) {
			if (!validValue(oEvent, false)) {
				oEvent.getSource().setValueStateText(this.getText("LIST_TIT_FILTER_DUEFROM_GT_DUETO"));
				this.setFilterItem("/IsValidDueTo", false);
				return;
			}
			var dueTo = DateFormatter.format(oEvent.getSource().getDateValue());
			this.setFilterItem("/DueTo", dueTo);
			this.setFilterItem("/IsValidDueTo", true);
			oFilterValues.to = dueTo;
		};

		DueFilterMixin.setDueFromValue = function(oValue) {
			var dueFrom = "";
			if(oValue){
			    dueFrom = DateFormatter.format(DateFormatter.parse(oValue));
			}
			this.setFilterItem("/DueFrom", dueFrom);
			oFilterValues.from = dueFrom;
		};

		DueFilterMixin.setDueToValue = function(oValue) {
			var dueTo = "";
			if(oValue){
			    dueTo = DateFormatter.format(DateFormatter.parse(oValue));
			}
			this.setFilterItem("/DueTo", dueTo);
			oFilterValues.to = dueTo;
		};

		DueFilterMixin.restDue = function() {
			oFilterValues = {
				from: undefined,
				to: undefined
			};

			this.setFilterItem("/DueFrom", undefined);
			this.setFilterItem("/DueTo", undefined);
		};

		DueFilterMixin.clearDueValueState = function() {
			var aCtr = [this.byId("dpDue"), this.byId("dpDueTo")];
			jQuery.each(aCtr, function(index, ctr) {
				ctr.setValueState(ValueState.None);
			});
		};
		return DueFilterMixin;

	});
}; // end of sap/ino/vc/idea/mixins/DueFilterMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.mixins.IdeaFormCriteriaFilterMixin') ) {
jQuery.sap.declare('sap.ino.vc.idea.mixins.IdeaFormCriteriaFilterMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/mixins/IdeaFormCriteriaFilterMixin",["sap/ino/commons/application/Configuration",
    "sap/ui/core/format/DateFormat",
    "sap/ino/commons/models/types/StringBooleanType"],
	function(Configuration, DateFormat, StringBooleanType) {
		var IdeaFormCriteriaFilterMixin = function() {
			throw "Mixin may not be instantiated directly";
		};
		var DateFormatter = DateFormat.getInstance({
			pattern: "YYYY-MM-dd"
		});
		var Operator = {
			empty: {
				TEXT: "",
				ACTION: -1
			},
			eq: {
				TEXT: "OPERATOR_MIT_EQ",
				ACTION: 0
			},
			ge: {
				TEXT: "OPERATOR_MIT_GE",
				ACTION: 1
			},
			le: {
				TEXT: "OPERATOR_MIT_LE",
				ACTION: 2
			},
			like: {
				TEXT: "OPERATOR_MIT_LIKE",
				ACTION: 3
			}
		};

		var DefaultControlTypes = {
			"BOOLEAN": 1,
			"INTEGER": 2,
			"NUMERIC": 2,
			"DATE": 4,
			"TEXT": 8,
			"RICHTEXT": 8,
			"VALUEOPTIONLIST": 16
		};
		var DefaultOperators = {
			"BOOLEAN": [Operator.eq],
			"INTEGER": [Operator.eq, Operator.ge, Operator.le],
			"NUMERIC": [Operator.eq, Operator.ge, Operator.le],
			"DATE": [Operator.eq, Operator.ge, Operator.le],
			"TEXT": [Operator.like],
			"RICHTEXT": [Operator.like]
		};

		function setOperatorType(sPath, sDataType, sValueOptionList) {
			var aOperators = [Operator.eq];
			if (!sDataType) {
				aOperators = [Operator.empty];
			} else if (!sValueOptionList) {
				aOperators = DefaultOperators[sDataType];
			}
			var defaultAction = this.getFilterItem(sPath + "/CriteriaOp");
			if (!this.getFilterItem(sPath + "/CriteriaOp")) {
				defaultAction = aOperators[0].ACTION;
			}
			this.setFilterItem(sPath + "/IdeaFormOperator", aOperators);
			this.setFilterItem(sPath + "/CriteriaOp", defaultAction);
		}

		function setControlType(sPath, sDataType, sValueOptionList) {
			var nValueDataType = -1;
			if (sValueOptionList) {
				sDataType = "VALUEOPTIONLIST";
			}
			if (sDataType) {
				nValueDataType = DefaultControlTypes[sDataType];
			}
			this.setFilterItem(sPath + "/CriteriaValueDataType", nValueDataType);
		}

		function getValueOptionListDefer(sValueOptionListCode) {
			var defer = new jQuery.Deferred();
			var oModel = this.getDefaultODataModel ? this.getDefaultODataModel() : this.getModel("data");
			var sPathPrefix = Configuration.hasCurrentUserPrivilege("sap.ino.ui::backoffice.access") ? "/StagingValueOptions" : "/ValueOptions";
			oModel.read(sPathPrefix, {
				urlParameters: {
					"$orderby": "SEQUENCE_NO",
					"$filter": "LIST_CODE eq '" + sValueOptionListCode + "'"
				},
				success: function(oData) {
					var oResults = oData.results;
					oResults.unshift({
						CODE: "",
						DEFAULT_TEXT: ""
					});
					defer.resolve(oResults);
				}
			});
			return defer.promise();
		}

		function setValueOptionList(sPath, sValueOptionList) {
			var that = this;
			if (!sValueOptionList) {
				if (sPath) {
					this.setFilterItem(sPath + "/CriteriaValueList", []);
				}
				return;
			}
			getValueOptionListDefer.call(this, sValueOptionList).then(function(oResults) {
				that.setFilterItem(sPath + "/CriteriaValueList", oResults);
			});
		}

		function clearIdeaFormList() {
			var oResults = [];
			oResults.unshift({
				CODE: "",
				DATATYPE_CODE: "",
				DEFAULT_TEXT: ""
			});
			this.setFilterItem("/IdeaFormList", oResults);
		}

		function initDefualtIdeaFormCriterias() {
			this.setFilterItem("/IdeaFormCriterias", [{
				CriteriaID: 0,
				CriteriaCode: '',
				CriteriaOp: -1,
				CriteriaType: -1,
				CriteriaValue: undefined,
				CriteriaValueCode: undefined,
				IdeaFormOperator: [],
				CriteriaValueDataType: 0,
				CriteriaValueList: [],
				CriteriaTime: new Date().getTime()
		    }]);
		}

		function getIdeaFormFieldsCriteriaDefer() {
			var sIdeaFormId = this.getFilterItem("/CAMPAIGNFORM");
			var sCampId = this.getViewProperty("/List/CAMPAIGN");
			var defer = new jQuery.Deferred();
			if (!sIdeaFormId && !sCampId) {
				defer.resolve();
				return defer.promise();
			}
			var bIsManaged = Configuration.hasCurrentUserPrivilege("sap.ino.ui::backoffice.access");
			var oModel = this.getDefaultODataModel ? this.getDefaultODataModel() : this.getModel("data");
			oModel.read("/IdeaFormFieldSuggestionParams(CampaignID=" + (sCampId || -1) + ",FormID='" + (sIdeaFormId || "") + "',filterBackoffice=" +
				(bIsManaged ? 1 : 0) + ")/Results", {
					success: function(oData) {
						var oResults = jQuery.extend(true, {}, oData).results;
						oResults.unshift({
							CODE: "",
							DATATYPE_CODE: "",
							DEFAULT_TEXT: ""
						});
						defer.resolve(oResults);
					}
				});
			return defer.promise();
		}

		function initIdeaFormCriteriaFromQueryString(oQuery) {
			var that = this;
			var aIdeaFormCriterias = [],
				aIdeaFormList = that.getFilterItem("/IdeaFormList");

			for (var index = 1; index <= 3; index++) {
				if (oQuery.hasOwnProperty("c" + index)) {
					aIdeaFormCriterias.push({
						CriteriaID: index - 1,
						CriteriaCode: oQuery["c" + index],
						CriteriaOp: oQuery["o" + index],
						CriteriaType: oQuery["t" + index],
						CriteriaValue: oQuery["v" + index],
						CriteriaValueCode: oQuery["vc" + index],
						IdeaFormOperator: [],
						CriteriaValueDataType: oQuery["vdt" + index],
						CriteriaValueList: [],
						CriteriaTime: new Date().getTime()
					});
				}
			}
			aIdeaFormCriterias[0].CriteriaValue = decodeURIComponent(aIdeaFormCriterias[0].CriteriaValue);
			that.setFilterItem("/IdeaFormCriterias", aIdeaFormCriterias);

			function initIdeaForm() {
				aIdeaFormList = that.getFilterItem("/IdeaFormList");
				for (var i = 0; i < aIdeaFormCriterias.length; i++) {
					for (var j = 0; j < aIdeaFormList.length; j++) {
						if (aIdeaFormList[j].CODE === aIdeaFormCriterias[i].CriteriaCode) {
							//change operator
							setOperatorType.call(that, "/IdeaFormCriterias/" + i, aIdeaFormList[j].DATATYPE_CODE, aIdeaFormList[j].VALUE_OPTION_LIST_CODE);
							//change the control type
							setControlType.call(that, "/IdeaFormCriterias/" + i, aIdeaFormList[j].DATATYPE_CODE, aIdeaFormList[j].VALUE_OPTION_LIST_CODE);
							//change value option list
							setValueOptionList.call(that, "/IdeaFormCriterias/" + i, aIdeaFormList[j].VALUE_OPTION_LIST_CODE);
						}
					}
				}
			}
			if (!aIdeaFormList) {
				getIdeaFormFieldsCriteriaDefer.call(that).then(function(oResults) {
					that.setFilterItem("/IdeaFormList", oResults);
					initIdeaForm();
				});
			} else {
				initIdeaForm();
			}
		}

		function getUtcDate(sValue) {
			var result = JSON.stringify(new Date(sValue + " 00:00:00"));
			return result.replace(/"/g, "");
		}

		function getCriteriaValue(index) {
			if (this.getFilterItem("/IdeaFormCriterias/" + index + "/CriteriaValueDataType") === 4 && !!this.getFilterItem("/IdeaFormCriterias/" +
				index + "/CriteriaValue")) {
				return getUtcDate.call(this, this.getFilterItem("/IdeaFormCriterias/" + index + "/CriteriaValue"));
			}
			return this.getFilterItem("/IdeaFormCriterias/" + index + "/CriteriaValue") || "";
		}

		IdeaFormCriteriaFilterMixin.hasIdeaformFilters = function() {
			var aCriterias = this.getFilterItem("/IdeaFormCriterias");
			if (!aCriterias || aCriterias.length <= 0) {
				return false;
			}
			return aCriterias[0].CriteriaCode;
		};

		IdeaFormCriteriaFilterMixin.initIdeaFormItems = function(oQuery) {
			if (!oQuery || !oQuery.hasOwnProperty("c1")) {
				initDefualtIdeaFormCriterias.call(this);
				return;
			}
			initIdeaFormCriteriaFromQueryString.call(this, oQuery);
		};

		IdeaFormCriteriaFilterMixin.getIdeaformQuery = function(oQuery) {
			var aCriterias = this.getFilterItem("/IdeaFormCriterias");
			if (!aCriterias || aCriterias.length <= 0) {
				return;
			}
			for (var index = 0; index < 3; index++) {
				if (index > aCriterias.length - 1 || !this.getFilterItem("/IdeaFormCriterias/" + index + "/CriteriaCode")) {
					continue;
				}
				oQuery["c" + (index + 1)] = this.getFilterItem("/IdeaFormCriterias/" + index + "/CriteriaCode");
				oQuery["o" + (index + 1)] = this.getFilterItem("/IdeaFormCriterias/" + index + "/CriteriaOp");
				oQuery["v" + (index + 1)] = getCriteriaValue.call(this, index);
			}
		};

		IdeaFormCriteriaFilterMixin.getEmptyIdeaformFilters = function() {
			return ",c1='',o1=-1,v1='',c2='',o2=-1,v2='',c3='',o3=-1,v3=''";
		};

		IdeaFormCriteriaFilterMixin.setQueryObjectIdeaformFilters = function(oParameter) {
			var aCriterias = this.getFilterItem("/IdeaFormCriterias");
			for (var index = 0; index < 3; index++) {
				oParameter["c" + (index + 1)] = '';
				oParameter["o" + (index + 1)] = -1;
				oParameter["v" + (index + 1)] = '';
			}
			if (!aCriterias || aCriterias.length <= 0) {
				return;
			}

			for (index = 0; index < 3; index++) {
				if (index > aCriterias.length - 1 || !this.getFilterItem("/IdeaFormCriterias/" + index + "/CriteriaCode")) {
					continue;
				}
				oParameter["c" + (index + 1)] = this.getFilterItem("/IdeaFormCriterias/" + index + "/CriteriaCode");
				oParameter["o" + (index + 1)] = this.getFilterItem("/IdeaFormCriterias/" + index + "/CriteriaOp");
				oParameter["v" + (index + 1)] = encodeURIComponent(getCriteriaValue.call(this, index));
			}
		};

		IdeaFormCriteriaFilterMixin.getIdeaformFilters = function() {
			var aCriterias = this.getFilterItem("/IdeaFormCriterias");
			if (!aCriterias || aCriterias.length <= 0) {
				return this.getEmptyIdeaformFilters();
			}
			var sResult = "";
			for (var index = 0; index < 3; index++) {
				if (index > aCriterias.length - 1 || !this.getFilterItem("/IdeaFormCriterias/" + index + "/CriteriaCode")) {
					sResult += ",c" + (index + 1) + "=''";
					sResult += ",o" + (index + 1) + "=-1";
					sResult += ",v" + (index + 1) + "=''";
					continue;
				}
				sResult += ",c" + (index + 1) + "='" + this.getFilterItem("/IdeaFormCriterias/" + index + "/CriteriaCode") + "'";
				sResult += ",o" + (index + 1) + "=" + this.getFilterItem("/IdeaFormCriterias/" + index + "/CriteriaOp");
				sResult += ",v" + (index + 1) + "='" + encodeURIComponent(getCriteriaValue.call(this, index)) + "'";
			}
			return sResult;
		};

		IdeaFormCriteriaFilterMixin.setIdeaformCriteriaToQuery = function(oQuery) {
			var aCriterias = this.getFilterItem("/IdeaFormCriterias");
			if (!aCriterias || aCriterias.length <= 0 || !aCriterias[0].CriteriaCode) {
				return;
			}
			for (var index = 0; index < aCriterias.length; index++) {
				oQuery["c" + (index + 1)] = this.getFilterItem("/IdeaFormCriterias/" + index + "/CriteriaCode");
				oQuery["o" + (index + 1)] = this.getFilterItem("/IdeaFormCriterias/" + index + "/CriteriaOp");
				oQuery["v" + (index + 1)] = encodeURIComponent(this.getFilterItem("/IdeaFormCriterias/" + index + "/CriteriaValue"));
				oQuery["vc" + (index + 1)] = this.getFilterItem("/IdeaFormCriterias/" + index + "/CriteriaValueCode");
				oQuery["vdt" + (index + 1)] = this.getFilterItem("/IdeaFormCriterias/" + index + "/CriteriaValueDataType");
			}
		};

		IdeaFormCriteriaFilterMixin.restIdeaFormFieldsCriterias = function() {
			clearIdeaFormList.call(this);
			initDefualtIdeaFormCriterias.call(this);
		};

		IdeaFormCriteriaFilterMixin.clearIdeaFormFieldsCriterias = function() {
			clearIdeaFormList.call(this);
			initDefualtIdeaFormCriterias.call(this);
		};

		IdeaFormCriteriaFilterMixin.getIdeaFormFieldsCriterias = function() {
			var that = this;
			getIdeaFormFieldsCriteriaDefer.call(that).then(function(oResults) {
				that.setFilterItem("/IdeaFormList", oResults);
			});
		};

		IdeaFormCriteriaFilterMixin.CriteriaCodeChange = function(oEvent) {
			var oSource = oEvent.getSource();
			var aCusData = oEvent.getParameter("selectedItem").getAggregation("customData");
			var sDataType = aCusData[0].getProperty("value");
			var sValueOptionList = aCusData[1].getProperty("value");
			var sPath = oSource.getBinding("selectedKey").getContext().sPath;
			//change operator
			setOperatorType.call(this, sPath, sDataType, sValueOptionList);
			//change the control type
			setControlType.call(this, sPath, sDataType, sValueOptionList);
			//change value option list
			setValueOptionList.call(this, sPath, sValueOptionList);
			this.setFilterItem(sPath + "/CriteriaValue", (sDataType === "BOOLEAN" ? "0" : ""));
			this.setFilterItem(sPath + "/CriteriaValueCode", "");
		};

		IdeaFormCriteriaFilterMixin.onAddCriteriaFilter = function() {
			var aIdeaFormCriterias = this.getFilterItem("/IdeaFormCriterias");
			aIdeaFormCriterias.push({
				CriteriaID: aIdeaFormCriterias.length,
				CriteriaCode: '',
				CriteriaOp: -1,
				CriteriaType: -1,
				CriteriaValue: undefined,
				CriteriaValueCode: undefined,
				IdeaFormOperator: [],
				CriteriaValueDataType: 0,
				CriteriaValueList: [],
				CriteriaTime: new Date().getTime()
			});
			this.setFilterItem("/IdeaFormCriterias", aIdeaFormCriterias);
			for (var index = 0; index < aIdeaFormCriterias.length; index++) {
				this.setFilterItem("/IdeaFormCriterias/" + index + "/CriteriaTime", new Date().getTime());
			}
		};

		IdeaFormCriteriaFilterMixin.onRemoveCriteriaFilter = function() {
			var aIdeaFormCriterias = this.getFilterItem("/IdeaFormCriterias");
			aIdeaFormCriterias.pop();
			this.setFilterItem("/IdeaFormCriterias", aIdeaFormCriterias);

			for (var index = 0; index < aIdeaFormCriterias.length; index++) {
				this.setFilterItem("/IdeaFormCriterias/" + index + "/CriteriaTime", new Date().getTime());
			}
		};

		IdeaFormCriteriaFilterMixin.onDataPickerCriteriaValueChange = function(oEvent) {
			var sPath = oEvent.getSource().getBindingInfo("value").binding.getContext().sPath;
			this.setFilterItem(sPath + "/CriteriaValue", DateFormatter.format(oEvent.getSource().getDateValue()));
		};

		IdeaFormCriteriaFilterMixin.onCriteriaValueCodeChange = function(oEvent) {
			var sPath = oEvent.getSource().getBindingInfo("selectedKey").binding.getContext().sPath;
			var sCriteriaValue = '',
				aValueOptionList = this.getFilterItem(sPath + "/CriteriaValueList"),
				DefaultValueOptionTypes = {
					"BOOLEAN": "BOOL_VALUE",
					"INTEGER": "NUM_VALUE",
					"NUMERIC": "NUM_VALUE",
					"TEXT": "TEXT_VALUE"
				};
			if (aValueOptionList) {
				for (var index = 0; index < aValueOptionList.length; index++) {
					if (aValueOptionList[index].CODE === this.getFilterItem(sPath + "/CriteriaValueCode") && DefaultValueOptionTypes.hasOwnProperty(
						aValueOptionList[index].DATATYPE_CODE)) {
						sCriteriaValue = aValueOptionList[index][DefaultValueOptionTypes[aValueOptionList[index].DATATYPE_CODE]];
						break;
					}
				}
			}
			this.setFilterItem(sPath + "/CriteriaValue", sCriteriaValue);
		};

		IdeaFormCriteriaFilterMixin.addCriteriaFilterFormatter = function(aCriterias, nCriteriaID, nCriteriaTime) {
			return aCriterias && aCriterias.length < 3 && aCriterias.length - 1 === nCriteriaID && nCriteriaTime > 0;
		};

		IdeaFormCriteriaFilterMixin.removeCriteriaFilterFormatter = function(aCriterias, nCriteriaID, nCriteriaTime) {
			return aCriterias && aCriterias.length > 1 && aCriterias.length - 1 === nCriteriaID && nCriteriaTime > 0;
		};

		IdeaFormCriteriaFilterMixin.campaignIdeaFormFormatter = function(sCampValue, sIdeaFormValue, aIdeaFormList,sPersonalize) {
		    if(!sPersonalize){
		        return false;
		    }
			if (!sCampValue && !sIdeaFormValue) {
				return false;
			}
			return aIdeaFormList && aIdeaFormList.length > 1;
		};

		return IdeaFormCriteriaFilterMixin;
	});
}; // end of sap/ino/vc/idea/mixins/IdeaFormCriteriaFilterMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.library') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.vc.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained
jQuery.sap.require('sap.m.library'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/library",[
    "sap/ui/core/library",
    "sap/m/library"
], function() {
    "use strict";
    
    sap.ui.getCore().initLibrary({
        name : "sap.ino.vc",
        dependencies : ["sap.ui.core", "sap.m"],
        types : [], 
        interfaces : [],
        controls : [
            "sap.ino.vc.commons.BaseController",
            "sap.ino.vc.commons.BaseListController",
            "sap.ino.vc.commons.BaseObjectController",
            "sap.ino.vc.commons.BaseObjectModifyController",
            "sap.ino.vc.commons.BaseVariantListController",
            "sap.ino.vc.commons.TopLevelPageFacet",
            "sap.ino.vc.evaluation.EvaluationFacet",
            "sap.ino.vc.evaluation.EvaluationFormatter",
            "sap.ino.vc.idea.ActivitiesBlock",
            "sap.ino.vc.idea.AttachmentBlock",
            "sap.ino.vc.idea.CommentBlock",
            "sap.ino.vc.idea.EvaluationsBlock",
            "sap.ino.vc.idea.ExpertFinderBlock",
            "sap.ino.vc.idea.ListInIdeaBlock",
            "sap.ino.vc.idea.RelatedIdeasBlock",
            "sap.ino.vc.wall.util.Helper",
            "sap.ino.vc.wall.util.WallFactory"
        ],
        noLibraryCSS: true, 
        elements : [
        ],
        version : "2.4.16" 
    });
});
}; // end of sap/ino/vc/library.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.aof.PropertyModel') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.aof.PropertyModel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/models/aof/PropertyModel",[
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/models/aof/MetaModel",
    "sap/ino/commons/models/aof/PropertyModelCache"
], function(JSONModel, MetaModel, PropertyModelCache) {
	"use strict";

	var Node = {
		Root: "Root",
		Extension: "Extension"
	};

	var oPropertiesCache = new PropertyModelCache({});

	var PropertyModel = JSONModel.extend("sap.aof.PropertyModel", {
		metadata: {
			events: {
				"modelInitialized": {},
				"modelCacheUpdated": {},
				"modelCacheInvalidated": {}
			}
		},

		/**
		 * @param sApplicationObjectName
		 *            name of the application object
		 * @param vKey
		 *            key of the application object instance
		 * @param oScope
		 *            scope object definition, e.g. the { nodes : ["Root"], actions : ["update", { "customAction" : { "A" : 1 } }],
		 *            staticActions : [ { "create" : { "OBJECT_ID" : 1 } } } ]
		 * @param bSync
		 *            properties are fetched synchronously
		 * @param fnModelInitialized
		 *            event triggered after model initialization
		 * @param oPropertyDefault
		 *            default data for properties
		 * @return instance of the property model
		 */
		constructor: function(sApplicationObjectName, vKey, oScope, bSync, fnModelInitialized, oPropertyDefault) {
			JSONModel.apply(this, []);
			if (fnModelInitialized) {
				this.attachEvent("modelInitialized", fnModelInitialized);
			}
			this.applicationObjectName = sApplicationObjectName;
			this.key = vKey;
			this.scope = oScope;
			this.syncRead = bSync;
			this.propertyDefault = oPropertyDefault;
			this.initDefault = false;
			this._load();
		},

		bindProperty: function(sPath, oContext, mParameters) {
			return JSONModel.prototype.bindProperty.apply(this, arguments);
		},

		_load: function() {
			var that = this;

			// Initialization
			if (!this.initDefault) {
				var oData = {
					nodes: {},
					actions: {}
				};
				if (this.scope.staticNodes) {
					jQuery.each(this.scope.staticNodes, function(i, sNodeName) {
						var bDefault = _readPropertyDefaultPath(that.propertyDefault, "readOnly", sNodeName);
						oData.nodes[sNodeName] = {
							readOnly: bDefault !== undefined ? bDefault : true,
							messages: []
						};
					});
				}
				if (this.scope.staticActions) {
					jQuery.each(this.scope.staticActions,
						function(i, vActionDef) {
							var sActionName = _getActionName(vActionDef);
							var bDefault = _readPropertyDefaultPath(that.propertyDefault, "enabled", undefined,
								sActionName);
							oData.actions[sActionName] = {
								enabled: bDefault !== undefined ? bDefault : false,
								messages: []
							};
						});
				}
				if (this.scope.nodes) {
					jQuery.each(this.scope.nodes, function(i, sNodeName) {
						var bDefault = _readPropertyDefaultPath(that.propertyDefault, "readOnly", sNodeName);
						oData.nodes[sNodeName] = {
							readOnly: bDefault !== undefined ? bDefault : true,
							messages: []
						};
						oData.nodes[sNodeName][that.key] = {
							readOnly: bDefault !== undefined ? bDefault : true,
							messages: []
						};
					});
				}
				if (this.scope.actions) {
					jQuery.each(this.scope.actions,
						function(i, vActionDef) {
							var sActionName = _getActionName(vActionDef);
							var bDefault = _readPropertyDefaultPath(that.propertyDefault, "enabled", undefined,
								sActionName);
							oData.actions[sActionName] = {
								enabled: bDefault !== undefined ? bDefault : false,
								messages: []
							};
						});
				}
				if (that.propertyDefault) {
					if (that.propertyDefault.nodes) {
						jQuery.each(that.propertyDefault.nodes, function(sNodeName, oNode) {
							var bDefault = oNode.readOnly;
							if (!oData.nodes[sNodeName]) {
								oData.nodes[sNodeName] = {
									readOnly: bDefault !== undefined ? bDefault : true,
									messages: []
								};
							}
						});
					}
					if (that.propertyDefault.actions) {
						jQuery.each(that.propertyDefault.actions, function(sActioneName, oAction) {
							var bDefault = oAction.enabled;
							if (!oData.actions[sActioneName]) {
								oData.actions[sActioneName] = {
									enabled: bDefault !== undefined ? bDefault : false,
									messages: []
								};
							}
						});
					}
				}
				this.setData(oData);
				this.initDefault = true;
			}
			var oDeferred = new jQuery.Deferred();
			this._oDataInitPromise = oDeferred.promise();
			_getProperties(this.applicationObjectName, this.key, this.scope, !this.syncRead, function(oProperties) {
				if (oProperties.properties && oProperties.properties[that.key]) {
					if (oProperties.properties[that.key].nodes) {
						jQuery.each(oProperties.properties[that.key].nodes, function(sNodeName, oNode) {
							// Optimization access for Root (duplicate data without key)
							if (sNodeName === Node.Root && oNode[that.key]) {
								jQuery.each(oNode[that.key], function(sProperty, oProperty) {
									oNode[sProperty] = oProperty;
								});
							}
							// Optimize access for Extension (duplicate data without key)
							if (sNodeName === Node.Extension) {
								var aKey = Object.keys(oNode);
								if (aKey.length === 1) {
									jQuery.each(oNode[aKey[0]], function(sProperty, oProperty) {
										oNode[sProperty] = oProperty;
									});
								}
							}
						});
						if (oProperties.properties[that.key].nodes) {
							jQuery.each(oProperties.properties[that.key].nodes, function(sNodeName, oNode) {
								that.setPropertyInternal("/nodes/" + sNodeName, oNode);
							});
						}
						if (oProperties.properties[that.key].actions) {
							jQuery.each(oProperties.properties[that.key].actions, function(sActionName, oAction) {
								that.setPropertyInternal("/actions/" + sActionName, oAction);
							});
						}
					}
				}
				if (oProperties.staticProperties) {
					if (oProperties.staticProperties.nodes) {
						jQuery.each(oProperties.staticProperties.nodes, function(sNodeName, oNode) {
							if (!that.getProperty("/nodes/" + sNodeName)) {
								that.setPropertyInternal("/nodes/" + sNodeName, oNode);
							}
						});
					}
					if (oProperties.staticProperties.actions) {
						jQuery.each(oProperties.staticProperties.actions, function(sActionName, oAction) {
							that.setPropertyInternal("/actions/" + sActionName, oAction);
						});
					}
				}
				oDeferred.resolve(that.getData());
				setTimeout(function() {
					that.fireEvent("modelInitialized");
				}, 0);
			});
		},

		setProperty: function() {
			// enforce that from outside nobody can change the properties
			// e.g. UI setting buttons explicitly to disabled
			return;
		},

		setPropertyInternal: function() {
			// Internal setter for properties
			JSONModel.prototype.setProperty.apply(this, arguments);
		},

		getNodeReadOnlyFormatter: function(sNodeName) {
			var that = this;
			return function(vKey) {
				vKey = vKey ? vKey : that.key;
				return !!that.getProperty("/nodes/" + sNodeName + "/" + vKey + "/readOnly");
			};
		},

		getNodeChangeableFormatter: function(sNodeName) {
			var that = this;
			return function(vKey) {
				vKey = vKey ? vKey : that.key;
				return !!that.getProperty("/nodes/" + sNodeName + "/" + vKey + "/changeable");
			};
		},

		getAttributeReadOnlyFormatter: function(sNodeName, sAttributeName) {
			var that = this;
			return function(vKey) {
				vKey = vKey ? vKey : that.key;
				return !!that.getProperty("/nodes/" + sNodeName + "/" + vKey + "/attributes/" +
					sAttributeName + "/readOnly");
			};
		},

		getAttributeChangeableFormatter: function(sNodeName, sAttributeName) {
			var that = this;
			return function(vKey) {
				vKey = vKey ? vKey : that.key;
				return !!that.getProperty("/nodes/" + sNodeName + "/" + vKey + "/attributes/" +
					sAttributeName + "/changeable");
			};
		},

		getActionEnabledFormatter: function(sActionName) {
			var that = this;
			return function(vKey) {
				return !!that.getProperty("/actions/" + sActionName + "/enabled");
			};
		},

		getStaticActionEnabledFormatter: function(sActionName) {
			return this.getActionEnabledFormatter(sActionName);
		},

		getProperties: function() {
			return this.getData();
		},

		sync: function(vKey, bSuppressInvalidateCache) {
			if (!bSuppressInvalidateCache) {
				PropertyModel.invalidateCachedProperties(this.applicationObjectName, this.key);
			}
			this.key = vKey || this.key;
			this._load();
		},

		getDataInitializedPromise: function() {
			return this._oDataInitPromise;
		}
	});

	function _getActionName(vActionDef) {
		if (typeof vActionDef === "object") {
			return Object.keys(vActionDef)[0];
		}
		return vActionDef;
	}

	function _getProperties(sApplicationObjectName, vKey, oScope, bAsync, fnSuccess) {
		var bReRead = false;
		var oProperty = oPropertiesCache.getProperty("/" + sApplicationObjectName);
		if (!oProperty) {
			oPropertiesCache.setProperty("/" + sApplicationObjectName, {
				nodes: {},
				actions: {}
			});
			bReRead = true;
		}
		if (vKey && (!oProperty || !oProperty[vKey])) {
			oPropertiesCache.setProperty("/" + sApplicationObjectName + "/" + vKey, {
				nodes: {},
				actions: {}
			});
			bReRead = true;
		} else {
			if (vKey) {
				if (!bReRead && oScope.nodes) {
					jQuery.each(oScope.nodes, function(iIndex, sNodeName) {
						if (!oPropertiesCache.getProperty("/" + sApplicationObjectName + "/" + vKey +
							"/nodes/" + sNodeName)) {
							bReRead = true;
						}
					});
				}
				if (!bReRead && oScope.actions) {
					jQuery.each(oScope.actions, function(iIndex, vActionDef) {
						if (typeof vActionDef === "object") {
							bReRead = true;
						} else {
							if (!oPropertiesCache.getProperty("/" + sApplicationObjectName + "/" + vKey +
								"/actions/" + vActionDef)) {
								bReRead = true;
							}
						}
					});
				}
			} else {
				if (!bReRead && oScope.staticNodes) {
					jQuery.each(oScope.staticNodes, function(iIndex, sNodeName) {
						if (!oPropertiesCache.getProperty("/" + sApplicationObjectName + "/nodes/" + sNodeName)) {
							bReRead = true;
						}
					});
				}
				if (!bReRead && !jQuery.isEmptyObject(oScope.staticActions)) {
					// Re-read static actions always, as static action parameters cannot be buffered
					bReRead = true;
				}
			}
		}
		var oSyncResult = {
			properties: {},
			staticProperties: {}
		};
		if (bReRead) {
			// Scope changed, trigger re-read
			_readProperties(sApplicationObjectName, vKey, oScope, bAsync).done(function(oNewProperty) {
				// Merge cache
				if (oNewProperty.properties) {
					var oNewProperties = oNewProperty.properties[vKey];
					if (oNewProperties) {
						if (oNewProperties.nodes) {
							jQuery.each(oNewProperties.nodes, function(sNodeName, oNode) {
								oPropertiesCache.setProperty("/" + sApplicationObjectName + "/" + vKey +
									"/nodes/" + sNodeName, oNode);
							});
						}
						if (oNewProperties.actions) {
							jQuery.each(oNewProperties.actions, function(sActionName, oAction) {
								oPropertiesCache.setProperty("/" + sApplicationObjectName + "/" + vKey +
									"/actions/" + sActionName, oAction);
							});
						}
					}
					oSyncResult.properties = oNewProperty.properties;
				}
				if (oNewProperty.staticProperties) {
					var oNewStaticProperties = oNewProperty.staticProperties;
					if (oNewStaticProperties) {
						if (oNewStaticProperties.nodes) {
							jQuery.each(oNewStaticProperties.nodes, function(sNodeName, oNode) {
								oPropertiesCache.setProperty("/" + sApplicationObjectName + "/nodes/" + sNodeName,
									oNode);
							});
						}
						if (oNewStaticProperties.actions) {
							jQuery.each(oNewStaticProperties.actions, function(sActionName, oAction) {
								oPropertiesCache.setProperty("/" + sApplicationObjectName + "/actions/" + sActionName,
									oAction);
							});
						}
					}
					oSyncResult.staticProperties = oNewProperty.staticProperties;
				}
				oPropertiesCache.fireEvent("modelCacheUpdated", oNewProperty);
				if (fnSuccess) {
					fnSuccess(oNewProperty);
				}
			});
		} else {
			if (vKey) {
				oSyncResult.properties[vKey] = oProperty[vKey];
			}
			oSyncResult.staticProperties = {
				nodes: oProperty.nodes,
				actions: oProperty.actions
			};
			if (fnSuccess) {
				fnSuccess({
					properties: oSyncResult.properties,
					staticProperties: oSyncResult.staticProperties
				});
			}
		}
		return oSyncResult;
	}

	function _readProperties(sApplicationObjectName, vKey, oScope, bAsync) {
		var aUrlParam, sUrlParam;
		var sEndpoint = MetaModel.getEndpoint(sApplicationObjectName);

		var bReadProperties = vKey && vKey > 0 && ((!!oScope.nodes && oScope.nodes.length > 0) || (!!oScope.actions && oScope.actions.length > 0));
		var bReadStaticProperties = (!!oScope.staticNodes && oScope.staticNodes.length > 0) || (!!oScope.staticActions && oScope.staticActions.length >
			0);

		// Nodes and Actions
		var oPropertiesRequest;
		if (bReadProperties) {
			aUrlParam = [];
			if (oScope.nodes) {
				jQuery.each(oScope.nodes, function(iIndex, sNodeName) {
					aUrlParam.push("node=" + sNodeName);
				});
			}
			if (oScope.actions) {
				jQuery.each(oScope.actions, function(iIndex, vActionDef) {
					if (typeof vActionDef === "object") {
						aUrlParam.push("action=" + encodeURI(JSON.stringify(vActionDef)));
					} else {
						aUrlParam.push("action=" + vActionDef);
					}
				});
			}
			sUrlParam = aUrlParam.length > 0 ? "?" + aUrlParam.join("&") : "";

			oPropertiesRequest = jQuery.ajax({
				url: sEndpoint + "/" + vKey + "/properties" + sUrlParam,
				async: bAsync,
				dataType: "json"
			});

			oPropertiesRequest.fail(function() {
				jQuery.sap.log.debug("Property request failed");
			});
		}

		// Static Nodes and Static Actions
		var oStaticPropertiesRequest;
		if (bReadStaticProperties) {
			aUrlParam = [];
			if (oScope.staticNodes) {
				jQuery.each(oScope.staticNodes, function(iIndex, sNodeName) {
					aUrlParam.push("node=" + sNodeName);
				});
			}
			if (oScope.staticActions) {
				jQuery.each(oScope.staticActions, function(iIndex, vActionDef) {
					if (typeof vActionDef === "object") {
						aUrlParam.push("action=" + encodeURI(JSON.stringify(vActionDef)));
					} else {
						aUrlParam.push("action=" + vActionDef);
					}
				});
			}
			sUrlParam = aUrlParam.length > 0 ? "?" + aUrlParam.join("&") : "";

			oStaticPropertiesRequest = jQuery.ajax({
				url: sEndpoint + "/staticProperties" + sUrlParam,
				async: bAsync,
				dataType: "json"
			});

			oStaticPropertiesRequest.fail(function() {
				jQuery.sap.log.debug("Static property request failed");
			});
		}
		var oDeferred = new jQuery.Deferred();

		jQuery.when(oPropertiesRequest, oStaticPropertiesRequest).done(function(aPropertiesResult, aStaticPropertiesResult) {
			var oResult = {};
			if (aPropertiesResult && aPropertiesResult.length > 0) {
				var oProperties = aPropertiesResult[0];
				if (oProperties) {
					if (oProperties[vKey] && oProperties[vKey].nodes) {
						jQuery.each(oProperties[vKey].nodes, function(sNodeName, oNode) {
							jQuery.each(oNode, function(vKey, oInstance) {
								oInstance.changeable = !oInstance.readOnly;
								jQuery.each(oInstance.attributes, function(sAttributeName, oAttribute) {
									oAttribute.changeable = !oAttribute.readOnly;
								});
							});
						});
					}
					oResult.properties = oProperties;
				}
			}
			if (aStaticPropertiesResult && aStaticPropertiesResult.length > 0) {
				var oStaticProperties = aStaticPropertiesResult[0];
				if (oStaticProperties) {
					if (oStaticProperties.nodes) {
						jQuery.each(oStaticProperties.nodes, function(sNodeName, oNode) {
							oNode.changeable = !oNode.readOnly;
							jQuery.each(oNode.attributes, function(sAttributeName, oAttribute) {
								oAttribute.changeable = !oAttribute.readOnly;
							});
						});
					}
					oResult.staticProperties = oStaticProperties;
				}
			}
			oDeferred.resolve(oResult);
		});

		return oDeferred.promise();
	}

	function _readPropertyPath(oProperties, sProperty, vKey, sNodeName, vNodeKey, sAttributeName, sActionName) {
		if (vKey) {
			if (oProperties.properties && oProperties.properties[vKey]) {
				var oInstance = oProperties.properties[vKey];
				if (sActionName && oInstance.actions && oInstance.actions[sActionName]) {
					var oAction = oInstance.actions[sActionName];
					return oAction[sProperty];
				} else if (sNodeName && oInstance.nodes && oInstance.nodes[sNodeName] &&
					oInstance.nodes[sNodeName][vNodeKey]) {
					var oNode = oInstance.nodes[sNodeName][vNodeKey];
					if (sAttributeName && oNode.attributes && oNode.attributes[sAttributeName]) {
						var oAttribute = oNode.attributes[sAttributeName];
						return oAttribute[sProperty];
					} else {
						return oNode[sProperty];
					}
				}
			}
		} else {
			if (sActionName && oProperties.staticProperties && oProperties.staticProperties.actions &&
				oProperties.staticProperties.actions[sActionName]) {
				var oStaticAction = oProperties.staticProperties.actions[sActionName];
				return oStaticAction[sProperty];
			} else if (sNodeName && oProperties.staticProperties && oProperties.staticProperties.nodes &&
				oProperties.staticProperties.nodes[sNodeName]) {
				var oStaticNode = oProperties.staticProperties.nodes[sNodeName];
				return oStaticNode[sProperty];
			}
		}
		return undefined;
	}

	function _readPropertyDefaultPath(oProperties, sProperty, sNodeName, sActionName) {
		if (oProperties) {
			if (sActionName && oProperties.actions && oProperties.actions[sActionName]) {
				var oAction = oProperties.actions[sActionName];
				return oAction[sProperty];
			} else if (sNodeName && oProperties.nodes && oProperties.nodes[sNodeName]) {
				var oNode = oProperties.nodes[sNodeName];
				return oNode[sProperty];
			}
		}
		return undefined;
	}

	PropertyModel.getNodeReadOnlyStaticFormatter = function(sApplicationObjectName, sNodeName) {
		return function(vKey, vNodeKey) {
			var oProperties = _getProperties(sApplicationObjectName, vKey, {
				nodes: [sNodeName]
			}, false);
			return !!_readPropertyPath(oProperties, "readOnly", vKey, sNodeName, vNodeKey || vKey);
		};
	};

	PropertyModel.getNodeChangeableStaticFormatter = function(sApplicationObjectName, sNodeName) {
		return function(vKey, vNodeKey) {
			var oProperties = _getProperties(sApplicationObjectName, vKey, {
				nodes: [sNodeName]
			}, false);
			return !!_readPropertyPath(oProperties, "changeable", vKey, sNodeName, vNodeKey || vKey);
		};
	};

	PropertyModel.getAttributeReadOnlyStaticFormatter = function(sApplicationObjectName,
		sNodeName, sAttributeName) {
		return function(vKey, vNodeKey) {
			var oProperties = _getProperties(sApplicationObjectName, vKey, {
				nodes: [sNodeName]
			}, false);
			return !!_readPropertyPath(oProperties, "readOnly", vKey, sNodeName, vNodeKey || vKey, sAttributeName);
		};
	};

	PropertyModel.getAttributeChangeableStaticFormatter = function(sApplicationObjectName,
		sNodeName, sAttributeName) {
		return function(vKey, vNodeKey) {
			var oProperties = _getProperties(sApplicationObjectName, vKey, {
				nodes: [sNodeName]
			}, false);
			return !!_readPropertyPath(oProperties, "changeable", vKey, sNodeName, vNodeKey || vKey, sAttributeName);
		};
	};

	PropertyModel.getActionEnabledStaticFormatter = function(sApplicationObjectName, sActionName, oParameter) {
		var bResult;
		var sResultContext;
		var fnParameter = typeof oParameter === "function" ? oParameter : undefined;
		return function(vKey, vNodeKey) {
			if (fnParameter) {
				if (!vKey) {
					return false;
				}
				oParameter = fnParameter(vKey, vNodeKey || vKey);
			}
			var sContext = JSON.stringify({
				key: vKey,
				parameter: oParameter
			});
			if (sResultContext === sContext && bResult !== undefined) {
				return bResult;
			}
			sResultContext = sContext;
			var oAction = null;
			if (oParameter) {
				oAction = {};
				oAction[sActionName] = oParameter;
			} else {
				oAction = sActionName;
			}
			var oProperties = _getProperties(sApplicationObjectName, vKey, {
				actions: [oAction]
			}, false);
			bResult = !!_readPropertyPath(oProperties, "enabled", vKey, undefined, undefined, undefined, sActionName);
			return bResult;
		};
	};

	PropertyModel.getStaticActionEnabledStaticFormatter = function(sApplicationObjectName,
		sActionName, oParameter) {
		var bResult;
		var sResultContext;
		var fnParameter = typeof oParameter === "function" ? oParameter : undefined;
		return function(vKey, vNodeKey) {
			if (fnParameter) {
				if (!vKey) {
					return false;
				}
				oParameter = fnParameter(vKey, vNodeKey || vKey);
			}
			var sContext = JSON.stringify({
				parameter: oParameter
			});
			if (sResultContext === sContext && bResult !== undefined) {
				return bResult;
			}
			sResultContext = sContext;
			var oStaticAction = {};
			oStaticAction[sActionName] = oParameter;
			var oProperties = _getProperties(sApplicationObjectName, undefined, {
				staticActions: [oStaticAction]
			}, false);
			bResult = !!_readPropertyPath(oProperties, "enabled", undefined, undefined, undefined, undefined, sActionName);
			return bResult;
		};
	};

	PropertyModel.getStaticActionEnabledDynamicFormatter = function(sApplicationObjectName,
		sActionName, oParameter) {
		var fnParameter = typeof oParameter === "function" ? oParameter : undefined;
		return function(vKey, vNodeKey) {
			var bResult;

			if (fnParameter) {
				if (!vKey) {
					return false;
				}
				oParameter = fnParameter(vKey, vNodeKey || vKey);
			}
			
			var oStaticAction = {};
			oStaticAction[sActionName] = oParameter;
			var oProperties = _getProperties(sApplicationObjectName, undefined, {
				staticActions: [oStaticAction]
			}, false);
			bResult = !!_readPropertyPath(oProperties, "enabled", undefined, undefined, undefined, undefined, sActionName);
			return bResult;
		};
	};

	PropertyModel.getCacheModel = function() {
		return oPropertiesCache;
	};

	PropertyModel.getCachedProperties = function(sApplicationObjectName) {
		if (!sApplicationObjectName) {
			return oPropertiesCache.getData();
		} else {
			return oPropertiesCache.getProperty("/" + sApplicationObjectName);
		}
	};

	PropertyModel.invalidateCachedProperties = function(sApplicationObjectName, vKey) {
		if (!vKey) {
			if (sApplicationObjectName) {
				var oData = oPropertiesCache.getData();
				delete oData[sApplicationObjectName];
				oPropertiesCache.setData(oData);
			} else {
				oPropertiesCache.setData({});
			}
		} else {
			var oProperty = oPropertiesCache.getProperty("/" + sApplicationObjectName);
			if (oProperty) {
				if (jQuery.isArray(vKey)) {
					jQuery.each(vKey, function(iIndex, vAKey) {
						delete oProperty[vAKey];
					});
				} else {
					delete oProperty[vKey];
				}
				oPropertiesCache.setProperty("/" + sApplicationObjectName, oProperty);
			}
		}
		oPropertiesCache.fireEvent("modelCacheInvalidated", {
			applicationObjectName: sApplicationObjectName,
			key: vKey
		});
	};

	PropertyModel.refresh = function() {
		PropertyModel.invalidateCachedProperties();
	};

	PropertyModel.setMetaModel = function(oMetaModel) {
		MetaModel = oMetaModel;
	};

	return PropertyModel;
});
}; // end of sap/ino/commons/models/aof/PropertyModel.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.core.ModelSynchronizer') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.core.ModelSynchronizer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.v2.ODataListBinding'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/models/core/ModelSynchronizer",[
    "sap/ino/commons/models/aof/ApplicationObjectChange",
    "sap/ino/commons/models/aof/PropertyModel",
    "sap/ui/base/ManagedObject",
    "sap/ui/model/odata/v2/ODataListBinding"
], function(ApplicationObjectChange,
            PropertyModel,
            ManagedObject,
            ODataListBinding) {
    "use strict";

    /**
     * A collection of application object instances to be synchronized
     */
    var oObjects = {}; 
    
    /**
     * A collection of application object instance dependencies. One dependence is an object:
     * 1. application object instance
     * 2. dependent model instance
     * 3. function to be called when the application object instance is changed
     */
    var oDependencies = {};
    
    /**
     * A reference to the global OData model that has to be synchronized.
     */
    var oODataModel;
    
    var ModelSynchronizer = ManagedObject.extend("sap.ino.commons.models.core.ModelSynchronizer", {
        metadata : {
        }
    });

    ModelSynchronizer = new ModelSynchronizer({});

    /**
     * Copies the values of oData object properties to the corresponding
     * properties of oInstance application object.
     */
    function updateAOInstance(oNewInstanceData, oAOInstance) {
        if (oAOInstance && oNewInstanceData) {
            for (var prop in oNewInstanceData) {
                if (oNewInstanceData.hasOwnProperty(prop)) {
                    oAOInstance.setProperty("/" + prop, oNewInstanceData[prop]);
                }
            }
            return true;
        }
        return false;
    }

    /**
     * Copies the values of oSource object properties to
     * the corresponding properties of oTarget object.
     */
    function copyProperties(oSource, oTarget) {
        if (oSource && oTarget) {
            for (var prop in oTarget) {
                if (oSource.hasOwnProperty(prop) && oTarget.hasOwnProperty(prop)) {
                    if(oTarget[prop] && typeof oTarget[prop] === "object" && (oTarget[prop].hasOwnProperty("__deferred") 
                        || oTarget[prop].hasOwnProperty("__list")
                        || oTarget[prop].hasOwnProperty("__ref"))){
                        continue;
                    }
                    oTarget[prop] = oSource[prop];
                }
            }
            return true;
        }
        return false;
    }

    /**
     * Constructs an OData entity key from the entity name and an object key
     */
    function getEntityKey(sEntitySetName, vKey) {
        var oCalcViewRegex = new RegExp("^" + sEntitySetName + "\\(.*" + vKey + "\\)$");
        var oCalcViewRegex2 = new RegExp("^" + sEntitySetName + "\\(.*(')(" + vKey + ")\\1\\)$");
        var oCalcViewRegex3 = new RegExp("^" + sEntitySetName + "\\(.*=" + vKey + "\\)$");
        var oCalcViewRegex4 = new RegExp("^" + sEntitySetName + "\\(.*(=')(" + vKey + ")\\1\\)$");
        var oData = oODataModel.getProperty("/");
    	var sEntityKey;
    	var aEntityKey=[];
        jQuery.each(oData, function(sKey) {
            if (oCalcViewRegex.test(sKey) || oCalcViewRegex2.test(sKey)) {
                aEntityKey.push(sKey);
            }
        });
        if (aEntityKey.length > 1) {
            aEntityKey.forEach(function(sKey) {
                if (oCalcViewRegex3.test(sKey) || oCalcViewRegex4.test(sKey)) {
                    sEntityKey = sKey;
                }
            } );
        } else {
            sEntityKey = aEntityKey && aEntityKey[0];
        }    
        return sEntityKey;
    }
    
    function removeEntityFromListBindings(sEntityKey, aListBindingsToUpdate){
        var aUpdatedListBindings;
        if (aListBindingsToUpdate && aListBindingsToUpdate.length > 0) {
            aUpdatedListBindings = [];
            aListBindingsToUpdate.forEach(function(oBindingToUpdate) {
                var iContextIndex = -1;
                if (oBindingToUpdate.aLastContexts && oBindingToUpdate.aLastContexts.length > 0) {
                    oBindingToUpdate.aLastContexts.forEach(function(oLastContext, iCurrentContextIndex) {
                        if (oLastContext.getPath() === "/" + sEntityKey) {
                            iContextIndex = iCurrentContextIndex;
                        }
                    });
                }
                
                if (iContextIndex > -1) {
                    aUpdatedListBindings.push({
                        "index": iContextIndex,
                        "bindingContext": oBindingToUpdate.aLastContexts[iContextIndex],
                        "bindingToUpdate": oBindingToUpdate,
                        "isClientOperation": oBindingToUpdate.bClientOperation,
                        "allKeys": oBindingToUpdate.aAllKeys
                    });
                    oBindingToUpdate.bClientOperation = true;
                    oBindingToUpdate.aAllKeys = oBindingToUpdate.aKeys.slice();
                    oBindingToUpdate.aKeys.splice(iContextIndex, 1);
                    oBindingToUpdate.aLastContexts.splice(iContextIndex, 1);
                }
            });
        }
        return aUpdatedListBindings;
    }
    
    function addEntityToListBindings(mBindingsToUpdate) {
        jQuery.each(mBindingsToUpdate, function(sEntityKey, aCurrentBindingsToUpdate) {
            aCurrentBindingsToUpdate.forEach(function(oTemp) {
                oTemp.bindingToUpdate.bClientOperation = true;
                oTemp.bindingToUpdate.aAllKeys = oTemp.bindingToUpdate.aKeys.slice();
                oTemp.bindingToUpdate.aKeys.splice(oTemp.index, 0, sEntityKey);
                oTemp.bindingToUpdate.aLastContexts.splice(oTemp.index, 0, oTemp.bindingContext);
            });
        });
    }
    
    function resetListBindingParameters(mBindingsToUpdate) {
        jQuery.each(mBindingsToUpdate, function(sEntityKey, aCurrentBindingsToUpdate) {
            aCurrentBindingsToUpdate.forEach(function(oTemp) {
                oTemp.bindingToUpdate.bClientOperation = oTemp.isClientOperation;
                oTemp.bindingToUpdate.aAllKeys = oTemp.allKeys;
            });
        });
    }
    
    /**
     * Copies the content of oData object to the OData entities identified by
     * entity set names contained in aEntitySetNames and vKey
     */
    function syncODataModels(aEntitySetNames, vKey, oData) {
        var mBindingsToUpdate = {};
        var mChangedEntities = {};
        var bListBindingRequiresUpdate = false;
        jQuery.each(aEntitySetNames, function(iIndex, sEntitySetName) {
            function odataListBindingWithMatchingEntitySetName(oBinding) {
                function getPrefixBeforeType(sName){
                    if (sName && sName.length > 3) {
                        return sName.substring(0, sName.length - 4);
                    }
                    return sName;
                }
                if (oBinding instanceof ODataListBinding) {
                    var sBindingEntitySetName = oBinding && oBinding.oEntityType && oBinding.oEntityType.name;
                    sBindingEntitySetName = getPrefixBeforeType(sBindingEntitySetName) + "Type" === sBindingEntitySetName ? getPrefixBeforeType(sBindingEntitySetName) : undefined;
                    return sBindingEntitySetName === sEntitySetName || oBinding.getPath() === "/" + sEntitySetName;
                }
                return false;
            }
            var sEntityKey = getEntityKey(sEntitySetName, vKey);
            var oTarget = oODataModel.getProperty("/" + sEntityKey);
            if (oTarget) {
                copyProperties(oData, oTarget);
                mChangedEntities[sEntityKey] = true;
                var aListBindingsToUpdate = oODataModel.aBindings.filter(odataListBindingWithMatchingEntitySetName);
                bListBindingRequiresUpdate = aListBindingsToUpdate.length > 0;
                if (bListBindingRequiresUpdate) {
                    var aBindingsToUpdate = removeEntityFromListBindings(sEntityKey, aListBindingsToUpdate);
                    if (aBindingsToUpdate) {
                        mBindingsToUpdate[sEntityKey] = aBindingsToUpdate;
                    }
                }
            }
        });
        oODataModel.checkUpdate(true, false, mChangedEntities);
        if (bListBindingRequiresUpdate) {
            addEntityToListBindings(mBindingsToUpdate);
            oODataModel.checkUpdate(true, false, mChangedEntities);
            resetListBindingParameters(mBindingsToUpdate);
        }
    }
    
    /**
     * Adds the application object instance to the collection of 
     * application object instances to be kept in sync
     */
    ModelSynchronizer.putApplicationObject = function(sApplicationObjectKey, oInstance) {
        var sApplicationObjectName = oInstance.getApplicationObject().getMetadata().getName();
        if (!oObjects[sApplicationObjectName]) {
            oObjects[sApplicationObjectName] = {};
        }
        if (!oObjects[sApplicationObjectName][sApplicationObjectKey]) {
            oObjects[sApplicationObjectName][sApplicationObjectKey] = [];
        }
        var aInstances = oObjects[sApplicationObjectName][sApplicationObjectKey];
        if (jQuery.inArray(oInstance, aInstances) === -1) {
            aInstances.push(oInstance);
        }
    };
    
    /**
     * Remove application object instance from the list of instances synchronized by ModelSynchronizer.
     */
    ModelSynchronizer.removeApplicationObject = function(sApplicationObjectKey, oInstance) {
        var sApplicationObjectName = oInstance.getApplicationObject().getMetadata().getName();
        var aInstances = oObjects && oObjects[sApplicationObjectName] && oObjects[sApplicationObjectName][sApplicationObjectKey];
        if (aInstances) {
            oObjects[sApplicationObjectName][sApplicationObjectKey] = jQuery.grep(aInstances, function(oAOInstance, iIndex){
                return oInstance !== oAOInstance;
            });    
        }
    };
    
    /**
     * Retrieves a set of application object instances with the given type and key
     */
    ModelSynchronizer.getApplicationObject = function(sApplicationObjectName, sApplicationObjectKey) {
        return oObjects && oObjects[sApplicationObjectName] && oObjects[sApplicationObjectName][sApplicationObjectKey];
    };
    
    /**
     * Add a dependency between two models. The dependency consists of the application object instance,
     * the dependent model instance, and a function that is executed. Once the application object instance
     * is changed, the function is called with arguments:
     * the changed application object instance and the dependent model.
     */
    ModelSynchronizer.addAOInstanceDependency = function(oAOInstance, oDependentModel, fnSyncFunction) {
        if (oAOInstance && oDependentModel && fnSyncFunction) {
            var oInstanceDependencies = oDependencies[oAOInstance];
            if (!oInstanceDependencies) {
                oDependencies[oAOInstance] = {};
                oInstanceDependencies = oDependencies[oAOInstance];
            }
            oInstanceDependencies[oDependentModel] = {"dependentModel": oDependentModel, "syncFunction": fnSyncFunction};
            return true;
        }
        return false;
    };
    
    /**
     * Set an ODataModel to be kept in sync
     */
    ModelSynchronizer.setODataModel = function(oNewODataModel) {
        oODataModel = oNewODataModel;
    };
    
    /**
     * Obtain an ODataModel that is kept in sync
     */
    ModelSynchronizer.getODataModel = function() {
        return oODataModel;
    };
    
    ModelSynchronizer._getApplicationObjectByName = function(sImpactedObjectName) {
        jQuery.sap.require(sImpactedObjectName);
        return jQuery.sap.getObject(sImpactedObjectName, 0);
    };
    
    ModelSynchronizer.syncEntity = function (oEntitySet) {
        var oDeferred = new jQuery.Deferred();
        var sEntityKey = getEntityKey(oEntitySet.entitySetName, oEntitySet.entitySetKey);
            if (sEntityKey) {
                oODataModel.read("/" + sEntityKey, {
                success: function(oData) {
                    syncODataModels([oEntitySet.entitySetName], oEntitySet.entitySetKey, oData);
                    oDeferred.resolve({
                        success: true
                    });
                },
                error: function(oRequestInfo) {
                    // 404 is OK entities might not me there any more due to different
                    // filter criteria e.g. in OData
                    if (oRequestInfo.response.statusCode !== 404) {
                        jQuery.sap.log.error("Error when retrieving " + oEntitySet.entitySetKey,
                            undefined,
                            "sap.ino.commons.models.core.ModelSynchronizer");
                    }
                    oDeferred.reject({
                        success: true
                    });
                }
            });
        } else {
            oDeferred.reject({
                success: true
            });
        }
        
        return oDeferred.promise();
    };
    
    ModelSynchronizer.update = function (oInstance, sActionName, oApplicationObject, vKey, oData, oChangeRequest) {
        if (oInstance) {
            oApplicationObject = oApplicationObject || oInstance.getApplicationObject();
            vKey = vKey || oInstance.getKey();
            oData = oData || oInstance.getData();
        }
        var aEntitySetNames = oApplicationObject && oApplicationObject.invalidation && oApplicationObject.invalidation.entitySets;
        var aAOInstances;
        if (oData) {
            /**
             * The application object that triggered the change event
             * has inconsistent OData models. These models have to be updated.
             */
            if (aEntitySetNames) {
                syncODataModels(aEntitySetNames, vKey, oData);
            }
            aAOInstances = vKey && oApplicationObject && ModelSynchronizer.getApplicationObject(oApplicationObject.getMetadata().getName(), vKey);
            if (aAOInstances && aAOInstances.length > 1) {
                jQuery.each(aAOInstances, function(iIndex, oAOInstance){
                    if (oAOInstance !== oInstance) {
                        updateAOInstance(oData, oAOInstance);
                    }
                });
                //update property models of the impacted AO instances
                if (oInstance && oInstance.getPropertyModel()) {
                    oInstance.getPropertyModel().getDataInitializedPromise().done(function () {
                        jQuery.each(aAOInstances, function(iIndex, oAOInstance){
                            if (oAOInstance !== oInstance && oAOInstance.getPropertyModel()) {
                                oAOInstance.getPropertyModel().sync(vKey, true);
                            }
                        });    
                    });
                }
            }
        } else {
            // A static action is handled
            if (!oInstance && vKey && sActionName !== "del") {
                var sAOName = oApplicationObject.getMetadata().getName();
                var oStaticAO = ModelSynchronizer._getApplicationObjectByName(sAOName);
                var oStaticRequest = oStaticAO.readData(vKey, {model: oODataModel, onlyRoot: true});
                if (oStaticRequest) {
                    oStaticRequest.done(function (oSData) {
                        if (aEntitySetNames) {
                            syncODataModels(aEntitySetNames, vKey, oSData);
                        }
                        // Check if there is an application objects instance to be updated
                        var aSAOInstances = ModelSynchronizer.getApplicationObject(sAOName, vKey);
                        if (aSAOInstances) {
                            jQuery.each(aSAOInstances, function(iIndex, oSAOInstance){
                                updateAOInstance(oSData, oSAOInstance);
                            });
                        }
                    });
                }
                PropertyModel.invalidateCachedProperties(oApplicationObject.getObjectName(), vKey);
            }
        }
        
        /**
         * The change of application object that triggered the event impacts other
         * application objects. The models describing these objects have to be updated
         */
        // Check if there are application object types that are impacted by the application object event
        var aImpacted = sActionName &&
                        oApplicationObject.actionImpacts &&
                        oApplicationObject.actionImpacts[sActionName];
            
        var aImpactedAOs = [];
        if (aImpacted) {
            aImpacted.forEach(function(oImpacted) {
                if (oImpacted.objectName !== undefined) {
                    aImpactedAOs.push(oImpacted);
                }
            });
        }
        if (aImpactedAOs && aImpactedAOs.length > 0) {
            // There are application object types impacted by the application object event
            jQuery.each(aImpactedAOs, function(iIndex, oImpacted) {
                // Retrieve data about the impacted application objects
                var sImpactedObjectName = oImpacted.objectName;
                var aObjectKey = oChangeRequest &&
                                 oImpacted.objectKey &&
                                 oChangeRequest[oImpacted.objectKey];
                if (aObjectKey && !Array.isArray(aObjectKey)) {
                    aObjectKey = [aObjectKey];
                }
                if (aObjectKey && sImpactedObjectName) {
                    var oImpactedAO = ModelSynchronizer._getApplicationObjectByName(sImpactedObjectName);
                    // Request the new data for the impacted application object
                    var sImpactedAOName = oImpactedAO.getMetadata().getName();
                    var oSettings = {model: oODataModel, projection: oImpacted.impactedAttributes};
                    jQuery.each(aObjectKey, function (iObjectKeyIndex, vObjectKey) {
                        var oApplicationObjectRequest = oImpactedAO.readSource(vObjectKey,
                                                                               sImpactedAOName,
                                                                               {},
                                                                               oSettings);
                        oApplicationObjectRequest.done(function(oTempData) {
                            var aImpactedEntitySetNames = oImpactedAO &&
                                                          oImpactedAO.invalidation &&
                                                          oImpactedAO.invalidation.entitySets;
                            syncODataModels(aImpactedEntitySetNames, vObjectKey, oTempData);
                            // Check if there is an application objects instance to be updated
                            aAOInstances = ModelSynchronizer.getApplicationObject(sImpactedObjectName, vObjectKey);
                            if (aAOInstances) {
                                jQuery.each(aAOInstances, function(iAOInstanceIndex, oAOInstance){
                                    updateAOInstance(oTempData, oAOInstance);
                                });
                            }
                        });
                    });
                }
            });
        }

        if (aImpacted) {
            aImpacted.forEach(function(oImpacted) {
                if (oImpacted.entitySetName !== undefined) {
                    ModelSynchronizer.syncEntity(oImpacted);
                }
            });
        }
        
        // Check if changed application object instance has additional dependents that need an update
        var oInstanceDependencies = oInstance && oDependencies && oDependencies[oInstance];
        if (oInstanceDependencies) {
            jQuery.each(oInstanceDependencies, function(i, oDependency){
                if (oDependency && oDependency.dependentModel && oDependency.syncFunction) {
                    oDependency.syncFunction(oInstance, oDependency.dependentModel);
                }
            });
        }
        
        if (sActionName === "del" && aAOInstances) {
            aAOInstances.forEach(function(oAOInstance) {
                ModelSynchronizer.removeApplicationObject(oInstance.getKey(), oAOInstance);
                oAOInstance._isDeleted = true;
            });
            delete oObjects[oApplicationObject.getMetadata().getName()][vKey];
        }
    };

    ApplicationObjectChange.attachChange(ApplicationObjectChange.Action.All, function (oEvent) {
        var oInstance = oEvent.getParameter("instance");
        var sActionName = oEvent.getParameter("actionName");
        var oApplicationObject = oEvent.getParameter("object");
        var vKey = oEvent.getParameter("key");
        var oData = oEvent.getParameter("dataUpdate");
        var oChangeRequest = oEvent.getParameter("changeRequest"); 
        ModelSynchronizer.update(oInstance, sActionName, oApplicationObject, vKey, oData, oChangeRequest);
    });
    
    return ModelSynchronizer;
});
}; // end of sap/ino/commons/models/core/ModelSynchronizer.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.Campaign') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.Campaign'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.InvisibleText'); // unlisted dependency retained
jQuery.sap.require('sap.m.Image'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.FormattedText'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
jQuery.sap.require('sap.base.security.sanitizeHTML'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/Campaign",[
    "sap/ui/core/Control",
    "sap/ui/core/InvisibleText",
    "sap/m/Image",
    "sap/m/Link",
    "sap/m/Text",
    "sap/m/FormattedText",
    "sap/m/Button",
    "sap/ino/controls/util/ColorSupport",
    "sap/ino/controls/LabelledIcon",
    "sap/ui/Device",
    "sap/ui/core/ResizeHandler",
    "sap/ino/controls/CampaignType",
    "sap/ino/controls/CampaignStatusType",
    "sap/ino/commons/application/Configuration",
	"sap/base/security/sanitizeHTML"
], function(Control, InvisibleText, Image, Link, Text, FormattedText, Button, ColorSupport, LabelledIcon, Device, ResizeHandler, CampaignType,
	CampaignStatusType, Configuration, sanitizeHTML) {
	"use strict";
	/**
	 *
	 * Constructor for a visual representation of a Campaign. It can be used as an item (incl. renderer) within a list
	 * (type "Small" or "Normal") or as a banner on top of a OPL (type "Banner").
	 *
	 * <ul>
	 * <li>Properties
	 * <ul>
	 * <li>color: The color of the campaign</li>
	 * <li>objectId: Id of the campaign</li>
	 * <li>href: For type "Normal" the title links to this href, e.g. an OPL</li>
	 * <li>title: The campaign title (not displayed for type "Small", link for type "Normal", text for type "Banner")</li>
	 * <li>type: Option for visual representation of the campaign: "Small" icon, "Normal" card or "Banner" with background image</li>
	 * <li>width: Width of the whole "Small" and "Normal" control, width of the info box of the "Banner" that spans 100%</li>
	 * <li>height: Height of the control, not including margins of the "Banner"</li>
	 * <li>image: An image representation of the campaign, used as background for type "Banner" and as image for the other types</li>
	 * <li>date: A text string (usually the end date of the campaign) displayed at the bottom</li>
	 * <li>submissionDate: A text string (usually the idea submission end date of the campaign) displayed at the bottom</li>
	 * <li>registrationDate: A text string (usually the registration end date of the campaign) displayed at the bottom</li>
	 * <li>dateTooltip: A string (usually the end date of the campaign) displayed at the date</li>
	 * <li>submissionDateTooltip: A string (usually the idea submission end date of the campaign) displayed at the submissionDate</li>
	 * <li>registrationDateTooltip: A string (usually the registration end date of the campaign) displayed at the registrationDate</li>
	 * <li>ideaCount: Number of ideas in this campaign</li>
	 * <li>participantCount: Number of participants in this campaign</li>
	 * <li>activeParticipantCount: Number of avtive participants in this campaign</li>
	 * <li>viewCount: Number of views</li>
	 * <li>openForSubmission: If true a create-idea-button is shown</li>
	 * <li>openForRegistration: If true a register-button is shown</li>
	 * </ul>
	 * </li>
	 * <li>Events
	 * <ul>
	 * <li>press: event is thrown when control or title link is tapped</li>
	 * <li>createIdea: event is thrown when the submit-idea-button is pressed</li>
	 * </ul>
	 * </li>
	 * </ul>
	 *
	 * @class The Campaign represents a Campaign. It can be used as an item (incl. renderer) within a list or as banner.
	 * @extends sap.ino.controls.Card
	 * @version 2.0
	 *
	 * @constructor
	 * @public
	 * @name sap.ino.controls.Campaign
	 */
	var Campaign = Control.extend("sap.ino.controls.Campaign", {
		metadata: {
			properties: {
				"color": {
					type: "sap.ui.core.CSSColor",
					defaultValue: "#FFFFFF"
				},
				"objectId": {
					type: "int"
				},
				"isManaged": {
					type: "string",
					defaultValue: "false"
				},
				"href": {
					type: "sap.ui.core.URI"
				},
				"title": {
					type: "string"
				},
				"type": {
					type: "sap.ino.controls.CampaignType",
					defaultValue: "Banner"
				},

				"status": {
					type: "sap.ino.controls.CampaignStatusType",
					defaultValue: CampaignStatusType.Published
				},
				"width": {
					type: "sap.ui.core.CSSSize",
					defaultValue: "300px"
				},
				"height": {
					type: "sap.ui.core.CSSSize",
					defaultValue: "160px"
				},
				"image": {
					type: "sap.ui.core.URI"
				},
				"date": {
					type: "string"
				},
				"submissionDate": {
					type: "string"
				},
				"registrationDate": {
					type: "string"
				},
				"dateTooltip": {
					type: "string"
				},
				"submissionDateTooltip": {
					type: "string"
				},
				"registrationDateTooltip": {
					type: "string"
				},
				"ideaCount": {
					type: "sap.ui.model.odata.type.Int64"
				},
				"participantCount": {
					type: "sap.ui.model.odata.type.Int64"
				},
				"activeParticipantCount": {
					type: "sap.ui.model.odata.type.Int64"
				},
				"viewCount": {
					type: "sap.ui.model.odata.type.Int64"
				},
				"openForSubmission": {
					type: "boolean"
				},
				"openForRegistration": {
					type: "boolean"
				},
				"isInnovationView": {
					type: "string",
					defaultValue: "true"
				},
			},
			aggregations: {
				"_image": {
					type: "sap.m.Image",
					multiple: false,
					visibility: "hidden"
				},
				"_title": {
					type: "sap.ui.core.Control",
					multiple: false,
					visibility: "hidden"
				},
				"_date": {
					type: "sap.m.FormattedText",
					multiple: false,
					visibility: "hidden"
				},
				"_submissionDate": {
					type: "sap.m.FormattedText",
					multiple: false,
					visibility: "hidden"
				},
				"_registrationDate": {
					type: "sap.m.FormattedText",
					multiple: false,
					visibility: "hidden"
				},
				"_ideaCount": {
					type: "sap.ino.controls.LabelledIcon",
					multiple: false,
					visibility: "hidden"
				},
				"_participantCount": {
					type: "sap.ino.controls.LabelledIcon",
					multiple: false,
					visibility: "hidden"
				},
				"_activeParticipantCount": {
					type: "sap.ino.controls.LabelledIcon",
					multiple: false,
					visibility: "hidden"
				},
				"_isManaged": {
					type: "string",
					defaultValue: "false"
				},
				"_viewCount": {
					type: "sap.ino.controls.LabelledIcon",
					multiple: false,
					visibility: "hidden"
				},
				"_createIdeaButton": {
					type: "sap.m.Button",
					multiple: false,
					visibility: "hidden"
				},
				"registerButton": {
					type: "sap.ui.core.Control",
					multiple: false
				},
				"campaignSettingButton": {
					type: "sap.ui.core.Control",
					multiple: false

				},
				"_titleDescription": {
					type: "sap.ui.core.InvisibleText",
					multiple: false,
					visibility: "hidden"
				},
				"_createIdeaDescription": {
					type: "sap.ui.core.InvisibleText",
					multiple: false,
					visibility: "hidden"
				},
				"_registerDescription": {
					type: "sap.ui.core.InvisibleText",
					multiple: false,
					visibility: "hidden"
				},
				"_settingDescription": {
					type: "sap.ui.core.InvisibleText",
					multiple: false,
					visibility: "hidden"
				},
				"followButton": {
					type: "sap.ui.core.Control",
					multiple: false
				}
			},
			events: {
				press: {},
				createIdea: {},
				openSetting: {}
			}

		},

		/**
		 * Getter for property <code>color</code>. The color in hex value format with leading "#".
		 *
		 * Default value is <code>FFFFFF</code>
		 *
		 * @return {string} the value of property <code>color</code>
		 * @public
		 * @name sap.ino.controls.Campaign#getColor
		 * @function
		 */

		/**
		 * Setter for property <code>color</code>.
		 *
		 * Default value is <code>FFFFFF</code>
		 *
		 * @param {string} sColor new value (with leading "#") for property <code>color</code>
		 * @public
		 * @name sap.ino.controls.Campaign#setColor
		 * @function
		 */

		/**
		 * @private
		 */
		init: function() {
			this._oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ino.controls");
			this._sResizeRegId = ResizeHandler.register(this, this._onResize);
		},

		/**
		 * @private
		 */
		exit: function() {
			ResizeHandler.deregister(this._sResizeRegId);
			this.destroyAggregation('_image');
		},

		/**
		 * @private
		 */
		_onResize: function(oEvent) {
			// if triggered via event this.oControl, else this
			var oControl = this.oControl || this;
			var oImage;

			if (oControl.getType() === CampaignType.Banner) {
				var $Info = oControl.$().find(".sapInoCampaignInfo");
				var iBuffer = 30;
				var iBufferExceptional = 20; // this buffer is to avoid jumping if shrink removes the need for a scrollbar

				if ($Info && $Info.length > 0) {
					var iLeftMargin = parseInt($Info.css("margin-left"), 10) || 0;

					if (oEvent.size.width < 2 * parseInt(oControl.getWidth(), 10) && !oControl.$().hasClass("sapInoCampaignSqueeze")) {
						oControl.$().addClass("sapInoCampaignSqueeze");
						return;
					}

					if (oEvent.size.width < iLeftMargin + parseInt(oControl.getWidth(), 10) + iBuffer && !oControl.$().hasClass("sapInoCampaignShrink")) {
						oControl._iLeftMargin = iLeftMargin;
						oControl.$().addClass("sapInoCampaignShrink");
						return;
					}

					if (oEvent.size.width > (oControl._iLeftMargin || 0) + parseInt(oControl.getWidth(), 10) + iBuffer + iBufferExceptional && oControl
						.$().hasClass("sapInoCampaignShrink")) {
						oControl.$().removeClass("sapInoCampaignShrink");

						if (Device.system.phone) {
							oImage = oControl._getImage();
							if (oImage && !oImage.getVisible()) {
								oImage.setVisible(true);
							}
						}
						return;
					}

					if (oEvent.size.width >= 2 * parseInt(oControl.getWidth(), 10) && oControl.$().hasClass("sapInoCampaignSqueeze")) {
						oControl.$().removeClass("sapInoCampaignSqueeze");
						return;
					}
				}
			} else {
				if (Device.system.phone) {
					oImage = oControl._getImage();
					if (oImage && !oImage.getVisible()) {
						oImage.setVisible(true);
					}
				}
			}
		},

		/**
		 * @private
		 */
		_getCount: function(sKey, sIcon, sTextKey) {
			var oCount = this.getAggregation("_" + sKey);
			// undefined counts are not rendered at all
			if (!oCount && this.getProperty(sKey) !== undefined) {
				oCount = new LabelledIcon({
					iconUrl: sIcon,
					label: this.getProperty(sKey),
					tooltip: this._oRB.getText(sTextKey)
				});
				this.setAggregation("_" + sKey, oCount, true);
			}
			return oCount;
		},

		/**
		 * @private
		 */
		_getIdeaCount: function() {
			return this._getCount("ideaCount", "sap-icon://InoIcons/idea", "CTRL_CAMPAIGN_EXP_IDEA_COUNT");
		},

		/**
		 * @private
		 */
		_getParticipantCount: function() {
			return this._getCount("participantCount", "sap-icon://group", "CTRL_CAMPAIGN_EXP_PARTICIPANT_COUNT");
		},

		/**
		 * @private
		 */
		_getActiveParticipantCount: function() {
			return this._getCount("activeParticipantCount", "sap-icon://InoIcons/active-participates", "CTRL_CAMPAIGN_EXP_ACTIVE_PARTICIPANT_COUNT");
		},

		/**
		 * @private
		 */
		_getViewCount: function() {
			return this._getCount("viewCount", "sap-icon://show", "CTRL_CAMPAIGN_EXP_VIEW_COUNT");
		},

		_getDate: function() {
			var oDate = this.getAggregation("_date");
			if (!oDate) {
				oDate = new FormattedText({
					htmlText: this.getProperty("date") || "",
				// 	maxLines: 2,
					tooltip: this.getProperty("dateTooltip")
				}).addStyleClass("sapInoCampaignDate sapInoCampaignMaxSize");
				this.setAggregation("_date", oDate, true);
			}
			return oDate;
		},

		_getSubmissionDate: function() {
			var oDate = this.getAggregation("_submissionDate");
			if (!oDate) {
				oDate = new FormattedText({
					htmlText: this.getProperty("submissionDate") || "",
				// 	maxLines: 2,
				// sanitizeContent:true,
					tooltip: this.getProperty("submissionDateTooltip")
				}).addStyleClass("sapInoCampaignDate sapInoCampaignMaxSize");
				this.setAggregation("_submissionDate", oDate, true);
			}
			return oDate;
		},
		_getManaged: function() {
			var isManaged = this.getAggregation("_isManaged");
			if (!isManaged) {
				isManaged = "false";
			}
			return isManaged;
		},
		_getRegistrationDate: function() {
			var oDate = this.getAggregation("_registrationDate");
			if (!oDate) {
				oDate = new FormattedText({
					htmlText: this.getProperty("registrationDate") || "",
				// 	maxLines: 2,
				// sanitizeContent:true,
					tooltip: this.getProperty("registrationDateTooltip")
				}).addStyleClass("sapInoCampaignDate sapInoCampaignMaxSize");
				this.setAggregation("_registrationDate", oDate, true);
			}
			return oDate;
		},

		/**
		 * @private
		 */
		_getImage: function() {
			var oImage = this.getAggregation("_image");
			if (!oImage) {
				var sURL = this.getProperty("image");
				if (sURL) {
					oImage = new Image({
						src: sURL,
						mode: "Background",
						width: "100%",
						height: "100%",
						visible: !Device.system.phone,
						densityAware: false
					});
					this.setAggregation("_image", oImage);
				}
			}
			return oImage;
		},

		/**
		 * @private
		 */
		_getTitleDescription: function() {
			var oDescr = this.getAggregation("_titleDescription");
			if (!oDescr) {
				/*oDescr = new InvisibleText({
					text: this._oRB.getText("CTRL_CAMPAIGN_EXP_NAV_LINK", [this.getProperty("title")])
				});*/
				oDescr = new InvisibleText().setText(this._oRB.getText("CTRL_CAMPAIGN_EXP_NAV_LINK", [this.getProperty("title")]));
				if (this.getProperty("title")) {
					this.setAggregation("_titleDescription", oDescr);
				}
			}
			return oDescr;
		},

		/**
		 * @private
		 */
		_getTitle: function() {
			var that = this;
			var oTitle = this.getAggregation("_title");
			if (!oTitle) {
				var sTitle = this.getProperty("title");
				if (sTitle) {
					if (this.getType() === CampaignType.Banner) {
						if (this.hasListeners("press")) {
							oTitle = new Link({
								ariaDescribedBy: that._getTitleDescription(),
								//text: sTitle,
								wrapping: true,
								href: jQuery.sap.validateUrl(this.getProperty("href")) ? this.getProperty("href") : "",
								press: function(oEvent) {
									// prevent href
									oEvent.preventDefault();
									that.firePress({
										campaignId: that.getProperty("objectId")
									});
								}
							}).setText(sTitle).addStyleClass("sapInoCampaignTitle sapInoCampaignMaxSize");
						} else {
							oTitle = new Text({
								//text: sTitle,
								wrapping: true
							}).setText(sTitle).addStyleClass("sapInoCampaignTitle sapInoCampaignMaxSize");
						}
					} else {
						oTitle = new Link({
							ariaDescribedBy: that._getTitleDescription(),
							//text: sTitle,
							wrapping: true,
							href: jQuery.sap.validateUrl(this.getProperty("href")) ? this.getProperty("href") : "",
							press: function(oEvent) {
								// prevent href
								oEvent.preventDefault();
								that.firePress({
									campaignId: that.getProperty("objectId")
								});
							}
						}).setText(sTitle).addStyleClass("sapInoCampaignTitle sapInoCampaignMaxSize");
					}
					this.setAggregation("_title", oTitle);
				}
			}
			return oTitle;
		},

		/**
		 * @private
		 */
		_getCreateIdeaDescription: function() {
			var oDescr = this.getAggregation("_createIdeaDescription");
			if (!oDescr) {
				oDescr = new InvisibleText({
					text: this._oRB.getText("CTRL_CAMPAIGN_EXP_CREATE_IDEA_DESCRIPTION", [this.getProperty("title")])
				});
				if (this.getProperty("title")) {
					this.setAggregation("_createIdeaDescription", oDescr);
				}
			}
			return oDescr;
		},

		_getFollowButton: function() {
			var followButton = this.getAggregation("followButton");
			return followButton;
		},
		_getRegisterDescription: function() {
			var oDescr = this.getAggregation("_registerDescription");
			if (!oDescr) {
				oDescr = new InvisibleText({
					text: this._oRB.getText("CTRL_CAMPAIGN_EXP_REGISTER_DESCRIPTION")
				});
				this.setAggregation("_registerDescription", oDescr);
			}
			return oDescr;
		},
		_getSettingButton: function() {
			var that = this;
			var oSettingButton = this.getAggregation("campaignSettingButton");
			if (!oSettingButton) {
				oSettingButton = new Button({
					ariaDescribedBy: that._getSettingDescription(),
					icon: "sap-icon://action-settings",
					tooltip: that._oRB.getText("CTRL_CAMPAIGN_EXP_SETTING_DESCRIPTION"),
					press: function(oEvent) {
						oEvent.preventDefault();

						that.fireOpenSetting();
					},
					enabled: true
				});

				this.setAggregation("campaignSettingButton", oSettingButton, true);
			}
			return oSettingButton;

		},
		_getSettingDescription: function() {
			var oDescr = this.getAggregation("_settingDescription");
			if (!oDescr) {
				oDescr = new InvisibleText({
					text: this._oRB.getText("CTRL_CAMPAIGN_EXP_SETTING_DESCRIPTION")
				});
				this.setAggregation("_settingDescription", oDescr);
			}
			return oDescr;
		},

		_getRegisterButton: function() {
			var registerButton = this.getAggregation('registerButton');
			if (registerButton) {
				registerButton.addAriaDescribedBy(this._getRegisterDescription());
			}
			return registerButton;
		},
		/**
		 * @private
		 */
		_getCreateIdeaButton: function() {
			var that = this;
			var oCreateIdeaButton = this.getAggregation("_createIdeaButton");
			if (!oCreateIdeaButton) {
				oCreateIdeaButton = new Button({
					ariaDescribedBy: that._getCreateIdeaDescription(),
					icon: "sap-icon://InoIcons/idea-add",
					tooltip: that._oRB.getText("CTRL_CAMPAIGN_EXP_BTN_CREATE_IDEA"),
					press: function(oEvent) {
						oEvent.preventDefault();
						that.fireCreateIdea({
							campaignId: that.getProperty("objectId")
						});
					},
					enabled: true
				});

				this.setAggregation("_createIdeaButton", oCreateIdeaButton, true);
			}
			return oCreateIdeaButton;
		},

		/**
		 * @private
		 */
		_displayCreateIdeaButton: function() {
			return this.getOpenForSubmission() && this.hasListeners("createIdea");
		},

		onAfterRendering: function() {
			// correct initial display 
			this._onResize({
				size: {
					width: this.$().width()
				}
			});

			var aBottomClass = [".sapInoCampaignInfoBottomCounts", ".sapInoCampaignInfoBottom"];
			var that = this;

			aBottomClass.forEach(function(sBottomClass) {

				var $Info = that.$().find(".sapInoCampaignInfo");
				var $InfoTop = that.$().find(".sapInoCampaignInfoTop");
				var $InfoBottom = that.$().find(".sapInoCampaignInfoBottom");
				var $Control = that.$().find(sBottomClass);

				if ($Info && $Info.length > 0 && $InfoTop && $InfoTop.length > 0 && $InfoBottom && $InfoBottom.length > 0) {
					var iTopPadding = (parseInt($InfoTop.css("padding-top"), 10) || 0) + (parseInt($InfoTop.css("padding-bottom"), 10) || 0);
					var iBottomPadding = (parseInt($InfoBottom.css("padding-top"), 10) || 0) + (parseInt($InfoBottom.css("padding-bottom"), 10) || 0);
					if ($Info.height() < $InfoTop.height() + iTopPadding + $InfoBottom.height() + iBottomPadding) {
						if (!$Control.hasClass("sapInoCampaignHide")) {
							$Control.addClass("sapInoCampaignHide");
						}
					}
				}
			});

			this._initTabs();
		},

		renderer: function(oRm, oControl) {
			var sColor = sanitizeHTML(oControl.getColor());

			oRm.write("<div");
			oRm.writeControlData(oControl);
			oRm.addStyle("background-color", sColor);
			oRm.writeStyles();
			oRm.addClass("sapInoCampaign");
			oRm.addClass("sapInoCampaign" + sanitizeHTML(oControl.getType()));
			if (!sColor) {
				sColor = "#FFFFFF";
			}
			oRm.addClass("sapInoCampaign" + ColorSupport.calculateTitleTextColor(sColor.substr(1, 2), sColor.substr(3, 2), sColor.substr(5, 2)));
			oRm.writeClasses();
			oRm.write(">");

			if (oControl.getType() === CampaignType.Banner) {
				oRm.write("<style>#" + sanitizeHTML(oControl.getId()) + ".sapInoCampaignSqueeze { height : " + sanitizeHTML(oControl.getHeight()) + "; }</style>");
			}

			oControl._renderContent(oRm, oControl);

			oRm.write("</div>");
		},

		_renderContent: function(oRm, oControl) {
			var sColor = sanitizeHTML(oControl.getColor());
			oRm.write("<div");
			oRm.addStyle("width", sanitizeHTML(oControl.getWidth()));
			oRm.addStyle("height", sanitizeHTML(oControl.getHeight()));
			oRm.writeStyles();
			oRm.write(">");

			var sInfoWidth = oControl.getWidth();
			if (oControl._getImage() && oControl.getType() === CampaignType.Normal) {
				sInfoWidth = "60%";
			} else if (oControl._getImage() && oControl.getType() === CampaignType.Small) {
				sInfoWidth = "50%";
			} else if (oControl._getImage() && oControl.getType() === CampaignType.Banner) {
				if (Device.system.phone) {
					sInfoWidth = "97%";
				}

				oRm.write("<div");
				oRm.addStyle("width", "100%");
				oRm.addStyle("height", "100%");
				oRm.writeStyles();
				oRm.addClass("sapInoCampaignImage");
				oRm.writeClasses();
				oRm.write(">");

				oRm.renderControl(oControl._getImage());

				oRm.write("</div>");
			}

			oRm.write("<div");
			oRm.addStyle("width", sInfoWidth);
			oRm.addStyle("height", sanitizeHTML(oControl.getHeight()));
			oRm.addStyle("background-color", sColor);
			oRm.writeStyles();
			oRm.addClass("sapInoCampaignInfo");
			oRm.writeClasses();
			oRm.write(">");

			// this is an assumption about the padding (1 rem) of the container
			// if needed change this to calculate the correct value from padding, margin and border
			oRm.write("<style>#" + sanitizeHTML(oControl.getId()) + " .sapInoCampaignMaxSize { max-width : calc(" + sanitizeHTML(oControl.getWidth()) + " - 2rem); }</style>");

			oRm.write("<div");
			oRm.addClass("sapInoCampaignInfoTop");
			oRm.writeClasses();
			oRm.write(">");

			var oTitle = oControl._getTitle();
			if (oTitle) {
				oRm.renderControl(oTitle);
				// TODO: correctly style this
				if (oControl.getStatus() === CampaignStatusType.Draft) {
					oRm.write("<div");
					oRm.addClass("sapInoCampaignInfoDraftIndicator");
					oRm.writeClasses();
					oRm.write(">");
					oRm.write(oControl._oRB.getText("CTRL_CAMPAIGNCARD_MSG_DRAFT"));
					oRm.write("</div>");
				}
				if (oTitle instanceof Link) {
					oRm.renderControl(oControl._getTitleDescription());
				}
			}

			oRm.write("</div>");

			oRm.write("<div");
			oRm.addClass("sapInoCampaignInfoBottom");
			oRm.writeClasses();
			oRm.write(">");

			oRm.write("<div");
			oRm.addClass("sapInoCampaignInfoBottomDate");
			oRm.writeClasses();
			oRm.write(">");

			if (oControl.getOpenForRegistration() && oControl._getRegistrationDate()) {
				oRm.renderControl(oControl._getRegistrationDate());
			} else if (oControl._getSubmissionDate()) {
				oRm.renderControl(oControl._getSubmissionDate());
			}
			if (oControl._getDate()) {
				oRm.renderControl(oControl._getDate());
			}

			oRm.write("</div>");

			oRm.write("<div");
			oRm.addClass("sapInoCampaignInfoBottomCounts");
			oRm.writeClasses();
			oRm.write(">");

			if (oControl._getIdeaCount()) {
				oRm.renderControl(oControl._getIdeaCount().addStyleClass("sapInoCampaignInfoBottomCount"));
			}
			if (oControl._getViewCount() && this.getProperty("isInnovationView") === "true") {
				oRm.renderControl(oControl._getViewCount().addStyleClass("sapInoCampaignInfoBottomCount"));
			}
			if (oControl._getParticipantCount() && this.getProperty("isInnovationView") === "true") {
				oRm.renderControl(oControl._getParticipantCount().addStyleClass("sapInoCampaignInfoBottomCount"));
			}
			if (oControl._getActiveParticipantCount() && this.getProperty("isInnovationView") === "true") {
				oRm.renderControl(oControl._getActiveParticipantCount().addStyleClass("sapInoCampaignInfoBottomCount"));
			}

			oRm.write("</div>");

			oRm.write("</div>");

			oRm.write("</div>");

			if (oControl._getImage() && (oControl.getType() === CampaignType.Normal || oControl.getType() === CampaignType.Small)) {

				var iWidth = 100 - parseInt(sInfoWidth, 10);

				oRm.write("<div");
				oRm.addStyle("width", iWidth + "%");
				oRm.addStyle("height", oControl.getHeight());
				oRm.writeStyles();
				oRm.addClass("sapInoCampaignImage");
				oRm.writeClasses();
				oRm.write(">");

				oRm.renderControl(oControl._getImage());

				oRm.write("</div>");
			}

			oRm.write("<div");
			oRm.addClass("sapInoCampaignClear");
			oRm.writeClasses();
			oRm.write(">");

			oRm.write("</div>");

			oRm.write("<div");
			oRm.addClass('sapInoCampaignButtons');
			oRm.writeClasses();
			oRm.write('>');

			oRm.write("<div");
			oRm.addClass('sapInoCampaignRegisterButton');
			oRm.writeClasses();
			oRm.write('>');

			if (oControl._getRegisterButton() && oControl._getRegisterButton().getVisible()) {
				oRm.renderControl(oControl._getRegisterButton());
				oRm.renderControl(oControl._getRegisterDescription());
			}

			oRm.write('</div>');

			oRm.write("<div");
			oRm.addClass("sapInoCampaignCreateIdeaButton");
			oRm.writeClasses();
			oRm.write(">");

			if (oControl._displayCreateIdeaButton() && oControl.getType() === "Normal") {
				oRm.renderControl(oControl._getCreateIdeaButton());
				oRm.renderControl(oControl._getCreateIdeaDescription());
			}

			oRm.write("</div>");

			oRm.write("<div");
			oRm.addClass('sapInoCampaignFollowButton');
			oRm.writeClasses();
			oRm.write('>');

			oRm.renderControl(oControl._getFollowButton());

			oRm.write('</div>');

			oRm.write("<div");
			oRm.addClass('sapInoCampaignFollowButton');
			oRm.writeClasses();
			oRm.write('>');
			if (this.getProperty("isManaged") === "true") {
				oRm.renderControl(oControl._getSettingButton());
			}
			oRm.write('</div>');
			oRm.write("</div>");

			oRm.write("</div>");
		},

		ontap: function(oEvent) {
			if ((oEvent.srcControl && oEvent.srcControl.sParentAggregationName === "_follow") || (oEvent.srcControl.getParent() && oEvent.srcControl
				.getParent().sParentAggregationName === "_follow")) {
				return false;
			}
			if ((oEvent.srcControl && oEvent.srcControl.sParentAggregationName === "registerButton") || (oEvent.srcControl.getParent() && oEvent.srcControl
				.getParent().sParentAggregationName === "registerButton")) {
				return false;
			}
			// the create idea button could be srcControl in IE or parent in Chrome 
			if ((!oEvent.srcControl || oEvent.srcControl !== this._getCreateIdeaButton()) &&
				(!oEvent.srcControl.getParent() || (oEvent.srcControl.getParent() && oEvent.srcControl.getParent() !== this._getCreateIdeaButton()))
			) {
				if ((!oEvent.srcControl || oEvent.srcControl !== this._getSettingButton()) &&
					(!oEvent.srcControl.getParent() || (oEvent.srcControl.getParent() && oEvent.srcControl.getParent() !== this._getSettingButton()))
				) {
					oEvent.stopPropagation();
					this.firePress({
						campaignId: this.getObjectId()
					});
				}
			}
		},

		getFocusDomRef: function() {
			if (this._getTitle() instanceof Link) {
				return this._getTitle().$();
			} else if (this._displayCreateIdeaButton()) {
				this._getCreateIdeaButton().$();
			} else {
				return undefined;
			}
		},

		/**
		 * @private
		 */
		_initTabs: function() {
			this._tabs = [];
			if (this._getTitle() instanceof Link) {
				this._tabs.push(this._getTitle().$()[0].id);
			}
			if (this._displayCreateIdeaButton() && this.getType() === "Normal") {
				this._tabs.push(this._getCreateIdeaButton().$()[0].id);
			}
			if (this.getAggregation("followButton")) {
				this._tabs.push(this.getAggregation("followButton").$().find("[tabindex=0],button")[0].id);
			}
			if (this.getAggregation('registerButton') && this.getAggregation('registerButton').$().length) {
				this._tabs.push(this.getAggregation('registerButton').$()[0].id);
			}
		},

		/**
		 * @private
		 */
		_getTabs: function() {
			return this._tabs;
		},

		/**
		 * @private
		 */
		_defaultOnKeyDown: function(oEvent) {
			if (Control.prototype.onkeydown) {
				Control.prototype.onkeydown.apply(this, arguments);
			}
		},

		onkeydown: function(oEvent) {
			var aTabs = this._getTabs();
			var fnUpdate = this._incr;

			if (this.getType() !== CampaignType.Normal) {
				this._defaultOnKeyDown(oEvent);
				return;
			}

			if (oEvent.shiftKey || oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_UP || oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_LEFT) {
				fnUpdate = this._decr;
			}

			if (oEvent.keyCode === jQuery.sap.KeyCodes.ESCAPE) {
				this.getParent().focus();
			} else if (oEvent.keyCode === jQuery.sap.KeyCodes.TAB ||
				oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_DOWN ||
				oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_RIGHT ||
				oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_UP ||
				oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_LEFT) {
				var $Current = jQuery(":focus");
				var iIdx = -1;
				if ($Current && $Current.length > 0) {
					iIdx = aTabs.indexOf($Current[0].id);
					if (iIdx !== -1) {
						iIdx = fnUpdate(iIdx, aTabs.length - 1);
						this._focus(jQuery("#" + aTabs[iIdx]));

						oEvent.preventDefault();
						oEvent.stopPropagation();
					} else {
						this.getParent().focus();
					}
				} else {
					this.getParent().focus();
				}
			} else {
				this._defaultOnKeyDown(oEvent);
			}
			event.stopPropagation();
		},

		/**
		 * @private
		 */
		_incr: function(iVal, iMax) {
			iVal++;
			if (iVal > iMax) {
				return 0;
			}
			return iVal;
		},

		/**
		 * @private
		 */
		_decr: function(iVal, iMax) {
			iVal--;
			if (iVal < 0) {
				return iMax;
			}
			return iVal;
		},

		/**
		 * @private
		 */
		_focus: function(oElement) {
			if (jQuery.type(oElement.focus) === "function") {
				setTimeout(function() {
					oElement.focus();
				}, 0);
			}
		}
	});

	Campaign.prototype.setDate = function(sValue) {
		this.setProperty("date", sValue);
		this._getDate().setHtmlText(sValue);
	};

	Campaign.prototype.setSubmissionDate = function(sValue) {
		this.setProperty("submissionDate", sValue);
		this._getSubmissionDate().setHtmlText(sValue);
	};

	Campaign.prototype.setRegistrationDate = function(sValue) {
		this.setProperty("registrationDate", sValue);
		this._getRegistrationDate().setHtmlText(sValue);
	};
	
	Campaign.prototype.setDateTooltip = function(sValue) {
		this.setProperty("dateTooltip", sValue);
		this._getDate().setTooltip(sValue);
	};

	Campaign.prototype.setSubmissionDateTooltip = function(sValue) {
		this.setProperty("submissionDateTooltip", sValue);
		this._getSubmissionDate().setTooltip(sValue);
	};

	Campaign.prototype.setRegistrationDateTooltip = function(sValue) {
		this.setProperty("registrationDateTooltip", sValue);
		this._getRegistrationDate().setTooltip(sValue);
	};

	Campaign.prototype.setIdeaCount = function(iValue) {
		this.setProperty("ideaCount", iValue);
		if (this._getIdeaCount()) {
			this._getIdeaCount().setLabel(iValue);
		}
	};

	Campaign.prototype.setParticipantCount = function(iValue) {
		this.setProperty("participantCount", iValue);
		if (this._getParticipantCount()) {
			this._getParticipantCount().setLabel(iValue);
		}
	};

	Campaign.prototype.setActiveParticipantCount = function(iValue) {
		this.setProperty("activeParticipantCount", iValue);
		if (this._getActiveParticipantCount()) {
			this._getActiveParticipantCount().setLabel(iValue);
		}
	};

	Campaign.prototype.setViewCount = function(iValue) {
		this.setProperty("viewCount", iValue);
		if (this._getViewCount()) {
			this._getViewCount().setLabel(iValue);
		}
	};

	Campaign.prototype.RegistrationenForSubmission = function(bValue) {
		this.setProperty("openForSubmission", bValue);
	};

	Campaign.prototype.setOpenForRegistration = function(bValue) {
		this.setProperty("openForRegistration", bValue);
	};

	Campaign.prototype.setTitle = function(sValue) {
		this.setProperty("title", sValue);
		if (this._getTitle()) {
			this._getTitle().setText(sValue);
		}
	};

	Campaign.prototype.setHref = function(sValue) {
		this.setProperty("href", sValue);
		if (this._getTitle() && this._getTitle().setHref) {
			this._getTitle().setHref(sValue);
		}
	};

	Campaign.prototype.setImage = function(sValue) {
		this.setProperty("image", sValue);
		if (this._getImage()) {
			this._getImage().setSrc(sValue);
		}
	};

	return Campaign;
});
}; // end of sap/ino/controls/Campaign.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.CampaignFollowButton') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.CampaignFollowButton'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.InvisibleText'); // unlisted dependency retained
jQuery.sap.require('sap.m.Image'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
jQuery.sap.require('sap.base.security.sanitizeHTML'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/CampaignFollowButton",[
    "sap/ui/core/Control",
    "sap/ui/core/InvisibleText",
    "sap/m/Image",
    "sap/m/Link",
    "sap/m/Text",
    "sap/m/Button",
    "sap/ino/controls/util/ColorSupport",
    "sap/ino/controls/LabelledIcon",
    "sap/ui/Device",
    "sap/ui/core/ResizeHandler",
    "sap/ino/controls/CampaignType",
    "sap/ino/controls/CampaignStatusType",
    "sap/ino/commons/application/Configuration",
	"sap/base/security/sanitizeHTML"
], function(Control, InvisibleText, Image, Link, Text, Button, ColorSupport, LabelledIcon, Device, ResizeHandler, CampaignType,
	CampaignStatusType, Configuration, sanitizeHTML) {
	"use strict";
	/**
	 *
	 * Constructor for a visual representation of a Campaign. It can be used as an item (incl. renderer) within a list
	 * (type "Small" or "Normal") or as a banner on top of a OPL (type "Banner").
	 *
	 * <ul>
	 * <li>Properties
	 * <ul>
	 * <li>color: The color of the campaign</li>
	 * <li>objectId: Id of the campaign</li>
	 * <li>href: For type "Normal" the title links to this href, e.g. an OPL</li>
	 * <li>title: The campaign title (not displayed for type "Small", link for type "Normal", text for type "Banner")</li>
	 * <li>type: Option for visual representation of the campaign: "Small" icon, "Normal" card or "Banner" with background image</li>
	 * <li>width: Width of the whole "Small" and "Normal" control, width of the info box of the "Banner" that spans 100%</li>
	 * <li>height: Height of the control, not including margins of the "Banner"</li>
	 * <li>image: An image representation of the campaign, used as background for type "Banner" and as image for the other types</li>
	 * <li>date: A text string (usually the end date of the campaign) displayed at the bottom</li>
	 * <li>submissionDate: A text string (usually the idea submission end date of the campaign) displayed at the bottom</li>
	 * <li>registrationDate: A text string (usually the registration end date of the campaign) displayed at the bottom</li>
	 * <li>ideaCount: Number of ideas in this campaign</li>
	 * <li>participantCount: Number of participants in this campaign</li>
	 * <li>viewCount: Number of views</li>
	 * <li>openForSubmission: If true a create-idea-button is shown</li>
	 * <li>openForRegistration: If true a register-button is shown</li>
	 * </ul>
	 * </li>
	 * <li>Events
	 * <ul>
	 * <li>press: event is thrown when control or title link is tapped</li>
	 * <li>createIdea: event is thrown when the submit-idea-button is pressed</li>
	 * </ul>
	 * </li>
	 * </ul>
	 *
	 * @class The Campaign represents a Campaign. It can be used as an item (incl. renderer) within a list or as banner.
	 * @extends sap.ino.controls.Card
	 * @version 2.0
	 *
	 * @constructor
	 * @public
	 * @name sap.ino.controls.Campaign
	 */
	var CampaignFollowButton = Control.extend("sap.ino.controls.CampaignFollowButton", {
		metadata: {
			properties: {

				"objectId": {
					type: "int"
				},

				"type": {
					type: "sap.ino.controls.CampaignType",
					defaultValue: "Normal"
				},

				"openForSubmission": {
					type: "boolean"
				},
				"openForRegistration": {
					type: "boolean"
				}
			},
			aggregations: {
				"_createIdeaButton": {
					type: "sap.m.Button",
					multiple: false,
					visibility: "hidden"
				},
				"registerButton": {
					type: "sap.ui.core.Control",
					multiple: false
				},
				"campaignSettingButton": {
					type: "sap.ui.core.Control",
					multiple: false

				},

				"_createIdeaDescription": {
					type: "sap.ui.core.InvisibleText",
					multiple: false,
					visibility: "hidden"
				},
				"_registerDescription": {
					type: "sap.ui.core.InvisibleText",
					multiple: false,
					visibility: "hidden"
				},
				"_settingDescription": {
					type: "sap.ui.core.InvisibleText",
					multiple: false,
					visibility: "hidden"
				},
				"followButton": {
					type: "sap.ui.core.Control",
					multiple: false
				}
			},
			events: {

				createIdea: {},
				openSetting: {}
			}

		},

		/**
		 * Getter for property <code>color</code>. The color in hex value format with leading "#".
		 *
		 * Default value is <code>FFFFFF</code>
		 *
		 * @return {string} the value of property <code>color</code>
		 * @public
		 * @name sap.ino.controls.Campaign#getColor
		 * @function
		 */

		/**
		 * Setter for property <code>color</code>.
		 *
		 * Default value is <code>FFFFFF</code>
		 *
		 * @param {string} sColor new value (with leading "#") for property <code>color</code>
		 * @public
		 * @name sap.ino.controls.Campaign#setColor
		 * @function
		 */

		/**
		 * @private
		 */
		init: function() {
			this._oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ino.controls");
			this._sResizeRegId = ResizeHandler.register(this, this._onResize);
		},

		/**
		 * @private
		 */
		exit: function() {
			ResizeHandler.deregister(this._sResizeRegId);
			this.destroyAggregation('_image');
		},

		/**
		 * @private
		 */

		/**
		 * @private
		 */
		_getCreateIdeaDescription: function() {
			var oDescr = this.getAggregation("_createIdeaDescription");

			return oDescr;
		},

		_getFollowButton: function() {
			var followButton = this.getAggregation("followButton");
			return followButton;
		},
		_getRegisterDescription: function() {
			var oDescr = this.getAggregation("_registerDescription");
			if (!oDescr) {
				oDescr = new InvisibleText({
					text: this._oRB.getText("CTRL_CAMPAIGN_EXP_REGISTER_DESCRIPTION")
				});
				this.setAggregation("_registerDescription", oDescr);
			}
			return oDescr;
		},
		_getSettingButton: function() {
			var that = this;
			var oSettingButton = this.getAggregation("campaignSettingButton");
			if (!oSettingButton) {
				oSettingButton = new Button({
					ariaDescribedBy: that._getSettingDescription(),
					icon: "sap-icon://action-settings",
					tooltip: that._oRB.getText("CTRL_CAMPAIGN_EXP_SETTING_DESCRIPTION"),
					type: "Transparent",
					press: function(oEvent) {
						oEvent.preventDefault();

						that.fireOpenSetting();
					},
					enabled: true
				});

				this.setAggregation("campaignSettingButton", oSettingButton, true);
			}
			return oSettingButton;

		},
		_getSettingDescription: function() {
			var oDescr = this.getAggregation("_settingDescription");
			if (!oDescr) {
				oDescr = new InvisibleText({
					text: this._oRB.getText("CTRL_CAMPAIGN_EXP_SETTING_DESCRIPTION")
				});
				this.setAggregation("_settingDescription", oDescr);
			}
			return oDescr;
		},

		_getRegisterButton: function() {
			var registerButton = this.getAggregation('registerButton');
			if (registerButton) {
				registerButton.addAriaDescribedBy(this._getRegisterDescription());
			}
			return registerButton;
		},
		/**
		 * @private
		 */
		_getCreateIdeaButton: function() {
			var that = this;
			var oCreateIdeaButton = this.getAggregation("_createIdeaButton");
			if (!oCreateIdeaButton) {
				oCreateIdeaButton = new Button({
					ariaDescribedBy: that._getCreateIdeaDescription(),
					icon: "sap-icon://InoIcons/idea-add",
					tooltip: that._oRB.getText("CTRL_CAMPAIGN_EXP_BTN_CREATE_IDEA"),
					type: "Transparent",
					press: function(oEvent) {
						oEvent.preventDefault();
						that.fireCreateIdea({
							campaignId: that.getProperty("objectId")
						});
					},
					enabled: true
				});

				this.setAggregation("_createIdeaButton", oCreateIdeaButton, true);
			}
			return oCreateIdeaButton;
		},

		/**
		 * @private
		 */
		_displayCreateIdeaButton: function() {
			return this.getOpenForSubmission() && this.hasListeners("createIdea");
		},

		renderer: function(oRm, oControl) {

		//	if (oControl._getRegisterButton() && oControl._getRegisterButton().getVisible()) {
				oRm.renderControl(oControl._getRegisterButton());
				oRm.renderControl(oControl._getRegisterDescription());
			//}

			if (oControl._displayCreateIdeaButton()) {
				oRm.renderControl(oControl._getCreateIdeaButton());
				oRm.renderControl(oControl._getCreateIdeaDescription());
			}

			oRm.renderControl(oControl._getFollowButton());

			if (oControl.getType() === "Managed") {
				oRm.renderControl(oControl._getSettingButton());
			}

		},

		ontap: function(oEvent) {
			if ((oEvent.srcControl && oEvent.srcControl.sParentAggregationName === "_follow") || (oEvent.srcControl.getParent() && oEvent.srcControl
				.getParent().sParentAggregationName === "_follow")) {
				return false;
			}
			if ((oEvent.srcControl && oEvent.srcControl.sParentAggregationName === "registerButton") || (oEvent.srcControl.getParent() && oEvent.srcControl
				.getParent().sParentAggregationName === "registerButton")) {
				return false;
			}
			// the create idea button could be srcControl in IE or parent in Chrome 
			if ((!oEvent.srcControl || oEvent.srcControl !== this._getCreateIdeaButton()) &&
				(!oEvent.srcControl.getParent() || (oEvent.srcControl.getParent() && oEvent.srcControl.getParent() !== this._getCreateIdeaButton()))
			) {
				if ((!oEvent.srcControl || oEvent.srcControl !== this._getSettingButton()) &&
					(!oEvent.srcControl.getParent() || (oEvent.srcControl.getParent() && oEvent.srcControl.getParent() !== this._getSettingButton()))
				) {
					oEvent.stopPropagation();
					this.firePress({
						campaignId: this.getObjectId()
					});
				}
			}
		},

		/**
		 * @private
		 */
		_initTabs: function() {
			this._tabs = [];

			if (this._displayCreateIdeaButton()) {
				this._tabs.push(sanitizeHTML(this._getCreateIdeaButton().$()[0].id));
			}
			if (this.getAggregation("followButton")) {
				this._tabs.push(sanitizeHTML(this.getAggregation("followButton").$().find("[tabindex=0],button")[0].id));
			}
			if (this.getAggregation('registerButton') && this.getAggregation('registerButton').$().length) {
				this._tabs.push(sanitizeHTML(this.getAggregation('registerButton').$()[0].id));
			}
		},

		/**
		 * @private
		 */
		_getTabs: function() {
			return this._tabs;
		},

		/**
		 * @private
		 */
		_defaultOnKeyDown: function(oEvent) {
			if (Control.prototype.onkeydown) {
				Control.prototype.onkeydown.apply(this, arguments);
			}
		},

		onkeydown: function(oEvent) {
			var aTabs = this._getTabs();
			var fnUpdate = this._incr;

			if (this.getType() !== CampaignType.Normal) {
				this._defaultOnKeyDown(oEvent);
				return;
			}

			if (oEvent.shiftKey || oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_UP || oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_LEFT) {
				fnUpdate = this._decr;
			}

			if (oEvent.keyCode === jQuery.sap.KeyCodes.ESCAPE) {
				this.getParent().focus();
			} else if (oEvent.keyCode === jQuery.sap.KeyCodes.TAB ||
				oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_DOWN ||
				oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_RIGHT ||
				oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_UP ||
				oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_LEFT) {
				var $Current = jQuery(":focus");
				var iIdx = -1;
				if ($Current && $Current.length > 0) {
					iIdx = aTabs.indexOf($Current[0].id);
					if (iIdx !== -1) {
						iIdx = fnUpdate(iIdx, aTabs.length - 1);
						this._focus(jQuery("#" + aTabs[iIdx]));

						oEvent.preventDefault();
						oEvent.stopPropagation();
					} else {
						this.getParent().focus();
					}
				} else {
					this.getParent().focus();
				}
			} else {
				this._defaultOnKeyDown(oEvent);
			}
			event.stopPropagation();
		},

		/**
		 * @private
		 */
		_incr: function(iVal, iMax) {
			iVal++;
			if (iVal > iMax) {
				return 0;
			}
			return iVal;
		},

		/**
		 * @private
		 */
		_decr: function(iVal, iMax) {
			iVal--;
			if (iVal < 0) {
				return iMax;
			}
			return iVal;
		},

		/**
		 * @private
		 */
		_focus: function(oElement) {
			if (jQuery.type(oElement.focus) === "function") {
				setTimeout(function() {
					oElement.focus();
				}, 0);
			}
		}
	});

	CampaignFollowButton.prototype.RegistrationenForSubmission = function(bValue) {
		this.setProperty("openForSubmission", bValue);
	};

	CampaignFollowButton.prototype.setOpenForRegistration = function(bValue) {
		this.setProperty("openForRegistration", bValue);
	};

	return CampaignFollowButton;
});
}; // end of sap/ino/controls/CampaignFollowButton.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.ColorBar') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
 jQuery.sap.declare('sap.ino.controls.ColorBar'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.OverflowToolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.OverflowToolbarRenderer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/ColorBar",[
	"sap/ino/controls/util/ColorSupport",
	"sap/m/OverflowToolbar",
	"sap/m/OverflowToolbarRenderer",
	"sap/ui/Device"
], function (ColorSupport, Bar, BarRenderer, Device) {
	"use strict";
	
	/**
     * 
     * A Color bar is a standard bar with a background color and the adapted font color. 
     * 
     * <ul>
     * <li>Properties
     * <ul>
     * <li>backgroundColor: color used for rendering the background (hex encoded incl. #)</li>
     * </ul>
     * </li>
     * </ul>
     */
	return Bar.extend("sap.ino.controls.ColorBar", {
	    metadata: {
            properties : {
                "backgroundColor" : {
                    type : "sap.ui.core.CSSColor"
                },
                "enablePhone" : {
                    type : "boolean",
                    defaultValue : false
                }
            }
        },
		
		renderer : BarRenderer,
        
		onAfterRendering : function() {
		    var $this = jQuery(this.getDomRef());
		    $this.addClass("sapInoColorBar");
		    if (this.getProperty("enablePhone")) {
		        $this.addClass("sapInoColorBarPhoneEnabled");
		    }
			if(!Device.system.phone || this.getProperty("enablePhone")){
			    var sBackgroundColor = this.getProperty("backgroundColor");
	            if(sBackgroundColor && sBackgroundColor.length === 7){
	                var sTextColor = ColorSupport.calculateTitleTextColor(sBackgroundColor.substr(1, 2), sBackgroundColor.substr(3, 2), sBackgroundColor.substr(5, 2));
	               	$this.css("background-color", sBackgroundColor);
	               	$this.css("background", sBackgroundColor);
	                $this.addClass("sapInoColorBarText" + sTextColor);
	            }   
			}		    
        },
        
        onfocusin : function() {
            // for testing only
        }
		
	});
});
}; // end of sap/ino/controls/ColorBar.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.EvaluationMatrix') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.EvaluationMatrix'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/EvaluationMatrix",[
    "sap/ui/core/Control",
    "sap/ino/controls/EvaluationMatrixItem",
    "sap/ui/thirdparty/d3"
], function(Control,
            EvaluationMatrixItem,
            d3) {
    "use strict";

    /*
     * the usage of the global variable d3 (sap.ui.thirdparty.d3) will cause a warning during the build process =>
     * that's ok
     */

    /**
     * The evaluation matrix shows evaluations as bubble in a matrix with 4 quadrants. In addition to the x and y
     * coordinates evaluations may have 2 for more dimensions which are represented as different radius' of the
     * evaluations' bubble.<br />
     * The quadrants are numbered like this:
     *
     * <pre>
     * 12
     * <br />
     * 34
     * </pre>
     *
     * <ul>
     * <li>Properties
     * <ul>
     * <li>width: width of the control</li>
     * <li>height: height of the control</li>
     * <li>xMin: minimum value of the x axis</li>
     * <li>xMax: maximum value of the x axis</li>
     * <li>xLabel: Label of the x axis</li>
     * <li>yMin: minimum value of the y axis</li>
     * <li>yMax: maximum value of the y axis</li>
     * <li>yLabel: Label of the y axis</li>
     * <li>r1Min: minimum value of the inner bubble</li>
     * <li>r1Max: maximum value of the inner bubble</li>
     * <li>r2Min: minimum value of the outer bubble</li>
     * <li>r2Max: maximum value of the outer bubble</li>
     * <li>rMax: maximum value of the bubble radius</li>
     * <li>xSegments: Number of segments on x-axis</li>
     * <li>ySegments: Number of segments on y-axis</li>
     * <li>mode: if mode is "radio" only one bubble is selected at a time</li>
     * <li>clickable: is the matrix clickable</li>
     * <li>selectedItemName: name of currently selected matrix item</li>
     * </li>
     * <li>Aggregations
     * <ul>
     * <li>items: sap.ino.controls.EvaluationMatrixItem
     * </ul>
     * <li>Events
     * <ul>
     * <li>itemSelected: matrix item has been selected. Name of item is given as parameter.</li>
     * </ul>
     * </li>
     * </ul>
     */
    return Control.extend("sap.ino.controls.EvaluationMatrix", {
        metadata: {
            properties: {
                width: {
                    type: "float",
                    defaultValue: 500
                },
                height: {
                    type: "float",
                    defaultValue: 500
                },
                xMin: {
                    type: "float",
                    defaultValue: 0
                },
                xMax: {
                    type: "float",
                    defaultValue: 50
                },
                xLabel: {
                    type: "string"
                },
                xLabelUom: {
                    type: "string"
                },
                yMin: {
                    type: "float",
                    defaultValue: 0
                },
                yMax: {
                    type: "float",
                    defaultValue: 50
                },
                yLabel: {
                    type: "string"
                },
                yLabelUom: {
                    type: "string"
                },
                r1Min: {
                    type: "float",
                    defaultValue: 0
                },
                r1Max: {
                    type: "float",
                    defaultValue: null
                },
                r2Min: {
                    type: "float",
                    defaultValue: 0
                },
                r2Max: {
                    type: "float",
                    defaultValue: null
                },
                rMin: {
                    type: "float",
                    defaultValue: 6
                },
                rMax: {
                    type: "float",
                    defaultValue: 25
                },
                xSegments: {
                    type: "int",
                    defaultValue: 2
                },
                ySegments: {
                    type: "int",
                    defaultValue: 2
                },
                mode: {
                    type: "string",
                    defaultValue: "radio" // check
                },
                clickable: {
                    type: "boolean",
                    defaultValue: true
                },
                selectedItemName: {
                    type: "string",
                    defaultValue: "item"
                },
                legendHeight: {
                    type: "float",
                    defaultValue: 0
                },
                displayLegend: {
                    type: "boolean",
                    defaultValue: false
                },
                innerCircleText: "string",
                outerCircleText: "string"
            },

            aggregations: {
                "items": {
                    type: "sap.ino.controls.EvaluationMatrixItem",
                    multiple: true,
                    singularName: "item",
                    bindable: true
                },
                "evalData": {
                    type: "sap.ino.controls.EvaluationData",
                    multiple: true,
                    singularName: "datum",
                    bindable: true
                }
            },

            events: {
                "itemSelected": {}
            }
        },

        renderer: function(orm, oControl) {
            orm.write("<div");
            orm.writeControlData(oControl);
            orm.addClass("matrix");
            orm.writeClasses();
            orm.write(">");
            orm.write("</div>");
        },

        determineRadiusMax: function() {
            var aItems = this.getItems();
            var i, oItem;
            this._r1MaxCalc = null;
            if (this.getR1Max()) {
                this._r1MaxCalc = this.getR1Max();
            } else if (aItems.length > 0) {
                for (i = 0; i < aItems.length; i++) {
                    oItem = aItems[i];
                    if (!this._r1MaxCalc || this._r1MaxCalc < oItem.getR1Value()) {
                        this._r1MaxCalc = oItem.getR1Value();
                    }
                }
            }

            this._r2MaxCalc = null;
            if (this.getR2Max()) {
                this._r2MaxCalc = this.getR2Max();
            } else if (aItems.length > 0) {
                for (i = 0; i < aItems.length; i++) {
                    oItem = aItems[i];
                    if (!this._r2MaxCalc || this._r2MaxCalc < oItem.getR2Value()) {
                        this._r2MaxCalc = oItem.getR2Value();
                    }
                }
            }
        },
        
        onBeforeRendering: function() {
            this.prepareMatrix();
        },
        
        prepareMatrix: function() {
            this.removeAllAggregation("items", true);
            var aData = this.getEvalData();
            var visParam1Score;
            var visParam2Score;
            
            if (aData.length === 0) {
                return;
            }
            for (var i = 0; i < aData.length; i ++) {
                var oMatrixCriterion = aData[i].findValueByAggregationTypeMatrix();
                if (oMatrixCriterion) {
                    this.setXSegments(oMatrixCriterion.getXAxisSegmentNo());
                    this.setYSegments(oMatrixCriterion.getYAxisSegmentNo());

                    var xAxisScore = aData[i].findValueByCriterionCode(oMatrixCriterion.getXAxisCriterionCode());
                    var yAxisScore = aData[i].findValueByCriterionCode(oMatrixCriterion.getYAxisCriterionCode());

                    if (yAxisScore && xAxisScore) {
                        this.setXLabel(xAxisScore.getCriterionName());
                        if (xAxisScore.getUomCode()) {
                            this.setXLabelUom(xAxisScore.getXAxisCriterionCodeLabel());
                        }
                        this.setYLabel(yAxisScore.getCriterionName());
                        if (yAxisScore.getUomCode()) {
                            this.setYLabelUom(yAxisScore.getYAxisCriterionCodeLabel());
                        }

                        if (oMatrixCriterion.getVisParam1CriterionCode()) {
                            visParam1Score = aData[i].findValueByCriterionCode(oMatrixCriterion.getVisParam1CriterionCode());
                        }

                        if (oMatrixCriterion.getVisParam2CriterionCode()) {
                            visParam2Score = aData[i].findValueByCriterionCode(oMatrixCriterion.getVisParam2CriterionCode());
                        }

                        var oMatrixItem = new sap.ino.controls.EvaluationMatrixItem({
                            name: aData[i].getEvaluationId()
                        });

                        // X-Axis
                        if (xAxisScore.getCriterionValue()) {
                            oMatrixItem.setXValue(parseFloat(xAxisScore.getCriterionValue()));
                            oMatrixItem.setXValueDataType(xAxisScore.getCriterionDataType());
                        }

                        if (xAxisScore.getValueMin()) {
                            this.setXMin(xAxisScore.getValueMin());
                        }

                        if (xAxisScore.getValueMax()) {
                            this.setXMax(xAxisScore.getValueMax());
                        }

                        // Y-Axis
                        if (yAxisScore.getCriterionValue()) {
                            oMatrixItem.setYValue(parseFloat(yAxisScore.getCriterionValue()));
                            oMatrixItem.setYValueDataType(yAxisScore.getCriterionDataType());
                        }

                        if (yAxisScore.getValueMin()) {
                            this.setYMin(yAxisScore.getValueMin());
                        }

                        if (yAxisScore.getValueMax()) {
                            this.setYMax(yAxisScore.getValueMax());
                        }

                        // Inner Radius
                        if (visParam1Score) {
                            if (visParam1Score.getCriterionValue()) {
                                oMatrixItem.setR1Value(parseFloat(visParam1Score.getCriterionValue()));
                                oMatrixItem.setR1ValueDataType(visParam1Score.getCriterionDataType());
                            }

                            if (visParam1Score.getValueMin()) {
                                this.setR1Min(visParam1Score.getValueMin());
                            }

                            if (visParam1Score.getValueMax()) {
                                this.setR1Max(visParam1Score.getValueMax());
                            }
                        }

                        // Outer Radius
                        if (visParam2Score) {
                            if (visParam2Score.getCriterionValue()) {
                                oMatrixItem.setR2Value(parseFloat(visParam2Score.getCriterionValue()));
                                oMatrixItem.setR2ValueDataType(visParam2Score.getCriterionDataType());
                            }

                            if (visParam2Score.getValueMin()) {
                                this.setR2Min(visParam2Score.getValueMin());
                            }

                            if (visParam2Score.getValueMax()) {
                                this.setR2Max(visParam2Score.getValueMax());
                            }
                        }
                        this.addItem(oMatrixItem);
                    }
                }
            }
        },

        onAfterRendering: function() {
            var margin = {
                top: 10,
                right: 10,
                bottom: 30,
                left: 30
            };

            if (this.getDisplayLegend()) {
                margin.bottom += this.getLegendHeight();
            }

            this.determineRadiusMax();
            var data = elementsToPlainObjects(this.getItems());

            var width = this.getWidth() - margin.left - margin.right;
            var height = this.getHeight() - margin.top - margin.bottom;

            var x = d3.scale.linear().domain([this.getXMin(), this.getXMax()]).range([0, width]);
            var y = d3.scale.linear().domain([this.getYMin(), this.getYMax()]).range([height, 0]);

            var rMin = this.getR1Min() < this.getR2Min() ? this.getR1Min() : this.getR2Min();
            var rMax = this._r1MaxCalc > this._r2MaxCalc ? this._r1MaxCalc : this._r2MaxCalc;
            var r = d3.scale.linear().domain([rMin, rMax]).range([this.getRMin(), this.getRMax()]);

            var root = d3.select("#" + this.getId());
            var svg = svgAppendSvgElement(root, width, height, margin);

            var xMax = this.getXMax() - this.getXMin();
            var sX = xMax / this.getXSegments();
            var i, j;
            for (i = 1; i <= this.getXSegments(); i++) {
                svgAppendVLine(svg, x(this.getXMin() + i * sX), y(this.getYMin()), y(this.getYMax()));
            }
            var yMax = this.getYMax() - this.getYMin();
            var sY = yMax / this.getYSegments();
            for (j = 1; j <= this.getYSegments(); j++) {
                svgAppendHLine(svg, x(this.getXMin()), x(this.getXMax()), y(this.getYMin() + j * sY));
            }

            svgAppendXAxis(svg, x(this.getXMin()), x(this.getXMax()), y(this.getYMin()), this.getXLabel(), this.getXLabelUom());
            svgAppendYAxis(svg, y(this.getYMin()), this.getYLabel(), this.getYLabelUom());

            var aEvalData = this.getEvalData();
            for (i = 0; i < aEvalData.length; i++) {
                var oMatrixCriterion = aEvalData[i].findValueByAggregationTypeMatrix();
                if(oMatrixCriterion) {
                    var aLabelCodes = oMatrixCriterion.getValueOptionListLabelCodes();
                    if (aLabelCodes) {
                        for (j = 0; j < aLabelCodes.length; j++) {
                            var oQLabelCode = aLabelCodes[j];
                            var jCode = oQLabelCode.CODE - 1;
                            if (jCode >= 0) {
                                var qX = jCode % this.getXSegments();
                                var qY = Math.floor(jCode / this.getXSegments());
                                svgAppendQuadrantLabel(svg, x(this.getXMin() + qX * sX + 0.5 * sX), y(this.getYMin() + (1 + qY) * sY) + 20, oQLabelCode.TEXT, x(this.getXMin() + sX), this.getXSegments());
                            }
                        }
                    }
                }
            }
            var ce = svgAppendCircleEnter(this, svg, x, y, data);
            svgAppendCoordinates(this, ce, x, y, data);
            svgAppendCircles(this, ce, r, this.getMode(), this.getClickable());
            var cg = jQuery(this.getDomRef()).find("g[name='circleGroup_" + this.getSelectedItemName() + "']")[0];
            if (cg) {
                highlightCircle(this, cg, this.getMode());
            }
        }
    });

    function wrap(that) {
        /* jshint validthis: true */
        var self = d3.select(this),
            textLength = self.node().getComputedTextLength(),
            text = self.text();
        while (textLength > 260 && text.length > 0) {
            text = text.slice(0, -1);
            self.text(text + '...');
            textLength = self.node().getComputedTextLength();
        }
    }

    function svgAppendSvgElement(el, width, height, margin) {
        var svg = el.append("svg").attr("width", width + margin.left + margin.right).attr("focusable", "false").attr("height", height + margin.top + margin.bottom).attr("class", "sapUiInoEvaluationMatrixSvgElement").append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        return svg;
    }

    function svgAppendHLine(el, x1, x2, y) {
        var l = el.append("g").attr("class", "sapUiInoEvaluationMatrixLine").attr("transform", "translate(" + x1 + "," + y + ")").append("svg:line").attr("x1", 0).attr("y1", 0).attr("x2", x2 - x1).attr("y2", 0);
        return l;
    }

    function svgAppendVLine(el, x, y1, y2) {
        var l = el.append("g").attr("class", "sapUiInoEvaluationMatrixLine").attr("transform", "translate(" + x + "," + y1 + ")").append("svg:line").attr("x1", 0).attr("y1", 0).attr("x2", 0).attr("y2", y2 - y1);
        return l;
    }

    function svgAppendXAxis(el, x1, x2, y, label, uom) {
        var sLabel = uom ? label + " [" + uom + "]" : label;
        var ax = el.append("g").attr("class", "sapUiInoEvaluationMatrixAxis").attr("transform", "translate(" + x1 + "," + y + ")");
        ax.append("svg:line").attr("x1", 0).attr("y1", 0).attr("x2", x2 + 1).attr("y2", 0); // + 1 is for 2px width of
        // border
        ax.append("svg:text").attr("transform", "translate(" + x2 + ",0)").attr("class", "sapUiInoEvaluationMatrixLabel").attr("y", "25").attr("x", "0").style("text-anchor", "end").text(sLabel);
        return ax;
    }

    function svgAppendYAxis(el, y2, label, uom) {
        var sLabel = uom ? label + " [" + uom + "]" : label;
        var ax = el.append("g").attr("class", "sapUiInoEvaluationMatrixAxis");
        ax.append("svg:line").attr("x1", 0).attr("y1", 0).attr("x2", 0).attr("y2", y2 + 1); // + 1 is for 2px width of
        // border
        ax.append("svg:text").attr("transform", "rotate(-90)").attr("class", "sapUiInoEvaluationMatrixLabel").attr("x", "0").attr("y", "-18").style("text-anchor", "end").text(sLabel);
        return ax;
    }

    function svgAppendQuadrantLabel(el, x, y, label, width, segments) {
        var sClass = "sapUiInoEvaluationMatrixQuadrant sapUiInoEvaluationMatrixQuadrantSegments" + segments;
        var lb = el.append("g").attr("transform", "translate(" + x + "," + y + ")").append("svg:text").attr("class", sClass).style("text-anchor", "middle").text(label);
        return lb;
    }

    function svgAppendCircleEnter(that, el, xScale, yScale, values) {
        var ce = el.selectAll("circle").data(values).enter().append("g").attr("name", "circleEnter").attr("transform", function(d) {
            return "translate(" + xScale(d.xValue) + "," + yScale(d.yValue) + ")";
        });
        return ce;
    }

    function svgAppendCoordinates(that, el, xScale, yScale, values) {
        var co = el.append("g").attr("class", "sapUiInoEvaluationMatrixHidden").attr("name", function(d) {
            return "coord_" + d.name;
        });
        co.append("svg:line").attr("x1", 0).attr("y1", 0).attr("x2", function(d) {
            var fAxisLeft = -xScale(d.xValue);
            return fAxisLeft;
        }).attr("y2", 0).attr("class", "sapUiInoEvaluationMatrixValueLine");
        co.append("svg:line").attr("x1", 0).attr("y1", 0).attr("x2", 0).attr("y2", function(d) {
            var fAxisBottom = yScale(that.getYMax() - d.yValue + that.getYMin());
            return fAxisBottom;
        }).attr("class", "sapUiInoEvaluationMatrixValueLine");
        co.append("svg:text").attr("transform", function(d) {
            var fAxisLeft = -xScale(d.xValue);
            return "translate(" + (fAxisLeft - 17) + ", 5)";
        }).attr("class", "sapUiInoEvaluationMatrixCoordinate").text(function(d) {
            return getFormattedValue(d.yValueDataType, d.yValue);
        });
        co.append("svg:text").attr("transform", function(d) {
            var fAxisBottom = yScale(that.getYMax() - d.yValue + that.getYMin());
            return "translate(0, " + (fAxisBottom + 14) + ")";
        }).attr("class", "sapUiInoEvaluationMatrixCoordinate").style("text-anchor", "middle").text(function(d) {
            return getFormattedValue(d.xValueDataType, d.xValue);
        });
        svgAppendLegend(that, co, xScale, yScale);
        return co;
    }

    function svgAppendLegend(that, co, xScale, yScale) {
        var aEvalData = that.getEvalData();
        var sR1Label, sR2Label, r1LabelUom, r2LabelUom;
        for (var i = 0; i < aEvalData.length; i++) {
            var oMatrixCriterion = aEvalData[i].findValueByAggregationTypeMatrix();
            if (oMatrixCriterion) {
                var visParam1Score, visParam2Score;
                if (oMatrixCriterion.getVisParam1CriterionCode()) {
                    visParam1Score = aEvalData[i].findValueByCriterionCode(oMatrixCriterion.getVisParam1CriterionCode());
                    if (visParam1Score) {
                        sR1Label = visParam1Score.getCriterionLabel();
                        r1LabelUom = visParam1Score.getVisParam1CriterionCodeLabel();
                    }
                }
                if (oMatrixCriterion.getVisParam2CriterionCode()) {
                    visParam2Score = aEvalData[i].findValueByCriterionCode(oMatrixCriterion.getVisParam2CriterionCode());
                    if (visParam2Score) {
                        sR2Label = visParam2Score.getCriterionLabel();
                        r2LabelUom = visParam2Score.getVisParam2CriterionCodeLabel();
                    }
                }
            }
        }
        if (that.getDisplayLegend() && sR1Label && sR2Label) {
            // Inner Circle
            co.append("svg:circle").attr("cx", function(d) {
                var fAxisLeft = -xScale(d.xValue);
                return fAxisLeft + 3;
            }).attr("cy", function(d) {
                var fAxisBottom = yScale(that.getYMax() - d.yValue + that.getYMin());
                return fAxisBottom + 40;
            }).attr("r", 6).attr("class", function(d) {
                if (d.r1Value <= d.r2Value) {
                    return "sapUiInoEvaluationMatrixInnerCircleHighlight";
                } else {
                    return "sapUiInoEvaluationMatrixOuterCircleHighlight";
                }
            });
            co.append("svg:text").attr("transform", function(d) {
                var fAxisLeft = -xScale(d.xValue);
                var fAxisBottom = yScale(that.getYMax() - d.yValue + that.getYMin());
                return "translate(" + (fAxisLeft + 15) + ", " + (fAxisBottom + 45) + ")";
            }).text(function(d) {
                var sLegendText;
                if (d.r1Value <= d.r2Value) {
                    sLegendText = sR1Label;
                    if (r1LabelUom) {
                        sLegendText = sLegendText + " " + r1LabelUom;
                    }
                } else {
                    sLegendText = sR2Label;
                    if (r2LabelUom) {
                        sLegendText = sLegendText + " " + r2LabelUom;
                    }
                }
                return sLegendText + " (" + that.getInnerCircleText() + ")";
            }).each(wrap);
            // Outside Circle
            co.append("svg:circle").attr("cx", function(d) {
                var fAxisLeft = -xScale(d.xValue);
                return fAxisLeft + 3;
            }).attr("cy", function(d) {
                var fAxisBottom = yScale(that.getYMax() - d.yValue + that.getYMin());
                return fAxisBottom + 60;
            }).attr("r", 6).attr("class", function(d) {
                if (d.r1Value > d.r2Value) {
                    return "sapUiInoEvaluationMatrixInnerCircleHighlight";
                } else {
                    return "sapUiInoEvaluationMatrixOuterCircleHighlight";
                }
            });
            co.append("svg:text").attr("transform", function(d) {
                var fAxisLeft = -xScale(d.xValue);
                var fAxisBottom = yScale(that.getYMax() - d.yValue + that.getYMin());
                return "translate(" + (fAxisLeft + 15) + ", " + (fAxisBottom + 65) + ")";
            }).text(function(d) {
                var sLegendText;
                if (d.r1Value > d.r2Value) {
                    sLegendText = sR1Label;
                    if (r1LabelUom) {
                        sLegendText = sLegendText + " " + r1LabelUom;
                    }
                } else {
                    sLegendText = sR2Label;
                    if (r2LabelUom) {
                        sLegendText = sLegendText + " " + r2LabelUom;
                    }
                }
                return sLegendText + " (" + that.getOuterCircleText() + ")";
            }).each(wrap);
        }
    }

    function svgAppendCircles(that, el, rScale, mode, clickable) {
        var c = el.append("g").attr("name", function(d) {
            return "circleGroup_" + d.name;
        });
        c.append("svg:circle").attr("cx", 0).attr("cy", 0).attr("r", function(d) {
            return rScale(d.r2Value);
        }).attr("class", "sapUiInoEvaluationMatrixOuterCircle").attr("name", "outerCircle").attr("title", function(d) {
            return d.r2Value;
        });
        c.append("svg:circle").attr("cx", 0).attr("cy", 0).attr("r", function(d) {
            return rScale(d.r1Value);
        }).attr("class", "sapUiInoEvaluationMatrixInnerCircle").attr("name", "innerCircle").attr("title", function(d) {
            return d.r1Value;
        });
        c.select("circle").each(function(d) {
            // Bring first circle (r2Value) to front when having lower value
            if (d.r2Value < d.r1Value) {
                var circleGroup = this.parentNode;
                circleGroup.appendChild(circleGroup.removeChild(this));
            }
        });
        if (clickable) {
            c.on("click", function(d) {
                that.setSelectedItemName(getNameForCircleGroup(this), true);
                that.fireItemSelected({
                    itemName: getNameForCircleGroup(this)
                });
            });
        }
        c.append("svg:text").attr("transform", function(d) {
            var rMax = d.r1Value > d.r2Value ? d.r1Value : d.r2Value;
            return "translate(" + (rScale(rMax) + 4) + ", 4)";
        }).attr("class", "sapUiInoEvaluationMatrixItemName").
        // style("text-anchor", "begin"). //doesn't work in IE9!
        text(function(d) {
            return d.name;
        });
    }

    function getNameForCircleGroup(circleGroup) {
        var parts = circleGroup.attributes.name.value.split("_");
        if (parts && parts.length > 1) {
            return parts[1];
        }
        return circleGroup.attributes.name.value;
    }

    function highlightCircle(that, circleGroup, mode) {
        // highlight the clicked circle
        var innerCircle = jQuery(circleGroup).find("> circle[name*='innerCircle']")[0];
        addClass(innerCircle, "sapUiInoEvaluationMatrixInnerCircleHighlight");
        removeClass(innerCircle, "sapUiInoEvaluationMatrixInnerCircle");

        var outerCircle = jQuery(circleGroup).find("> circle[name*='outerCircle']")[0];
        addClass(outerCircle, "sapUiInoEvaluationMatrixOuterCircleHighlight");
        removeClass(outerCircle, "sapUiInoEvaluationMatrixOuterCircle");

        // un-highlight the other circles
        jQuery(circleGroup.parentNode.parentNode.parentNode).find("g[name*='circleGroup']").each(function(idx, el) {
            if (el !== circleGroup) {
                var innerCircle = jQuery(el).find("> circle[name*='innerCircle']")[0];
                addClass(innerCircle, "sapUiInoEvaluationMatrixInnerCircle");
                removeClass(innerCircle, "sapUiInoEvaluationMatrixInnerCircleHighlight");

                var outerCircle = jQuery(el).find("> circle[name*='outerCircle']")[0];
                addClass(outerCircle, "sapUiInoEvaluationMatrixOuterCircle");
                removeClass(outerCircle, "sapUiInoEvaluationMatrixOuterCircleHighlight");
            }
        });

        // show the coordinates for the clicked circle
        var coord = circleGroup.previousSibling;
        removeClass(coord, "sapUiInoEvaluationMatrixHidden");
        if (mode === "radio") {
            jQuery(circleGroup.parentNode.parentNode.parentNode).find("g[name*='coord']").each(function(idx, el) {
                if (el !== coord) {
                    addClass(el, "sapUiInoEvaluationMatrixHidden");
                }
            });
        }
        // Bring highlighted circle to the top
        var circleEnter = coord.parentNode;
        circleEnter.parentNode.appendChild(circleEnter.parentNode.removeChild(circleEnter));
    }

    function toggleBetweenClasses(element, class1, class2) {
        if (hasClass(element, class1)) {
            removeClass(element, class1);
            if (!hasClass(element, class2)) {
                addClass(element, class2);
            }
        } else if (hasClass(element, class2)) {
            removeClass(element, class2);
            if (!hasClass(element, class1)) {
                addClass(element, class1);
            }
        }
    }

    function toggleClass(element, cls) {
        var value = element.getAttribute("class");
        var p = new RegExp("\\b" + cls + "\\b");
        if (p.test(value)) {
            value = value.replace(p, "");
        } else {
            value = value.concat(" " + cls);
        }
        element.setAttribute("class", value);
        return element;
    }

    function addClass(element, cls) {
        var value = element.getAttribute("class");
        var p = new RegExp("\\b" + cls + "\\b");
        if (!p.test(value)) {
            value = value.concat(" " + cls);
            element.setAttribute("class", value);
        }
        return element;
    }

    function removeClass(element, cls) {
        var value = element.getAttribute("class");
        var p = new RegExp("\\b" + cls + "\\b");
        if (p.test(value)) {
            value = value.replace(p, "");
            element.setAttribute("class", value);
        }
        return element;
    }

    function hasClass(element, cls) {
        var value = element.getAttribute("class");
        var p = new RegExp("\\b" + cls + "\\b");
        return (p.test(value));
    }

    function elementsToPlainObjects(elements) {
        var data = [];
        for (var i = 0; i < elements.length; i++) {
            var oEntry = {};
            for (var j in elements[i].mProperties) {
                oEntry[j] = elements[i].mProperties[j];
            }
            data.push(oEntry);
        }
        return data;
    }

    function getFormattedValue(sDataType, fValue) {
        if (isNaN(fValue) || fValue === undefined || fValue === null) {
            return 0;
        }
        switch (sDataType) {
            case "INTEGER":
                fValue = Math.round(fValue);
                break;
            case "NUMERIC":
                fValue = (Math.round(fValue * 100) / 100).toLocaleString();
                break;
            default:
                break;
        }
        return fValue;
    }
});
}; // end of sap/ino/controls/EvaluationMatrix.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.IdeaCard') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.IdeaCard'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.HTML'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.TextAlign'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Icon'); // unlisted dependency retained
jQuery.sap.require('sap.base.security.sanitizeHTML'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/IdeaCard",[
    "sap/ui/core/Control",
    "sap/ino/controls/util/ColorSupport",
    "sap/m/Button",
    "sap/m/ButtonType",
    "sap/m/Label",
    "sap/m/Link",
    "sap/m/Text",
    "sap/ui/core/HTML",
    "sap/ui/core/TextAlign",
    "sap/ui/core/Icon",
    "sap/ino/controls/VoteType",
	"sap/base/security/sanitizeHTML"
], function(Control,
    ColorSupport,
    Button,
    ButtonType,
    Label,
    Link,
    Text,
    HTML,
    TextAlign,
    Icon,
    VoteType,
    sanitizeHTML) {
    "use strict";

    /**
     *
     * Constructor for the IdeaCard, a visual representation of an Idea. It can be used as an item (with renderer) within a list or as a
     * preview during idea creation etc.
     *
     * <ul>
     * <li>Properties
     * <ul>
     * <li>ideaDescription: idea description</li>
     * <li>ideaId: idea id</li>
     * <li>ideaName: name of the idea</li>
     * <li>ideaSubmittedAt: timestamp of the idea submission</li>
     * <li>ideaSubmitter: full name of the idea submitter</li>
     * <li>ideaSubmitterId: id of the idea's submitter</li>
     * <li>isDraft: is the idea in state draft</li>
     * <li>color: color of the campaign</li>
     * <li>campaignId: id of the campaign</li>
     * <li>campaignHref: URL of the campaign</li>
     * <li>campaignName: name of the campaign</li>
     * </ul>
     * </li>
     * <li>Aggregations
     * <ul>
     * <li>processPlaceholder: placeholder for process indicator</li>
     * <li>voteDisplayPlaceholder: placeholder for vote</li>
     * <li>commentPlaceholder: placeholder for comment control</li>
     * <li>image: placeholder for an image representation control</li>
     * <li>_campaignLink: aggregation storing the control rendering the campaign link</li>
     * <li>_campaignLinkBack: aggregation holds a control representing a link to idea's campaign</li>
     * <li>_ideaLink: aggregation holds a control representing a link to idea</li>
     * <li>_ideaLinkBack: aggregation holds a control representing a link to idea on the back side</li>
     * <li>_ideaDescription: aggregation holds a control representing an idea description</li>
     * <li>_ideaSubmitter: aggregation holds a control representing an idea's submitter</li>
     * <li>_ideaMoreLink: aggregation holds a control representing a link to idea</li>
     * <li>_flipButton: aggregation holds a control flipping the card to back</li>
     * <li>_commentButton: aggregation holds a control representing a navigation to idea comment section</li>
     * <li>_flipButtonBack: aggregation holds a control flipping the card to face</li>
     * <li>_draftLabel: aggregation holds a control representing the Draft label</li>
     * <li>_noticeStatusIcon: aggregation holds a control representing the notice status icon</li>
     * <li>_noticeCommentIcon: aggregation holds a control representing the notice comment icon</li>
     * <li>_noticeUpdateIcon: aggregation holds a control representing the notice update icon</li>
     * <li>_noticeCreateIcon: aggregation holds a control representing the notice create icon</li>
     * <li>_IdeaReadButton: aggregation holds a control representing the idea read Btn</li>
     * </ul>
     * </li>
     * <li>Events
     * <ul>
     * <li>openIdea: event is thrown when idea details are to be opened</li>
     * <li>openSubmitter: event is thrown when the idea's submitter details are to be opened</li>
     * <li>openCampaign: event is thrown when the campaign details are to be opened</li>
     * <li>press: event is thrown when the control istapped</li>
     * </ul>
     * </li>
     * </ul>
     * 
     * @class The IdeaCard is a representation of an Idea. It can be used as an item (with renderer) within a list or as a preview during idea creation etc.
     * @extends sap.ino.controls.Card
     * @version 1.3.0
     * 
     * @constructor
     * @public
     * @name sap.ino.controls.IdeaCard
     */
    var IdeaCard = Control.extend("sap.ino.controls.IdeaCard", {
        metadata: {
            properties: {
                "ideaCreatedAt": {
                    type: "string"
                },
                "ideaDescription": {
                    type: "string"
                },
                "ideaHref": {
                    type: "sap.ui.core.URI"
                },
                "ideaId": {
                    type: "int"
                },
                "ideaName": {
                    type: "string"
                },
                "ideaSubmittedAt": {
                    type: "string"
                },
                "ideaSubmitter": {
                    type: "string"
                },
                "ideaSubmitterId": {
                    type: "int"
                },
                "ideaSubmitterHref": {
                    type: "sap.ui.core.URI"
                },
                "isDraft": {
                    type: "boolean"
                },
                "isOpenForContributors": {
                    type: "boolean"
                },
                "color": {
				    type: "sap.ui.core.CSSColor"
				},
				"campaignId": {
				    type: "int"
				},
				"campaignHref": {
				    type: "sap.ui.core.URI"
				},
				"campaignName": {
				    type: "string"
				}
            },
            aggregations: {
                "commentDisplayPlaceholder": {
                    type: "sap.ui.core.Control",
                    multiple: false
                },
                "processDisplayPlaceholder": {
                    type: "sap.ui.core.Control",
                    multiple: false
                },
                "viewDisplayPlaceholder": {
                    type: "sap.ui.core.Control",
                    multiple: false
                },
                "anonymousDisplayPlaceholder": {
                    type: "sap.ui.core.Control",
                    multiple: false
                },
                "voteDisplayPlaceholder": {
                    type: "sap.ui.core.Control",
                    multiple: false
                },
                "votePlaceholder": {
                    type: "sap.ui.core.Control",
                    multiple: false
                },
                "followButton": {
                    type: "sap.ui.core.Control",
                    multiple: false
                },
                "image": {
                    type: "sap.m.Image",
                    multiple: false
                },
                "_campaignLink": {
                    type: "sap.m.Link",
                    multiple: false,
                    visibility: "hidden"
                },
                "_campaignLinkBack": {
                    type: "sap.m.Link",
                    multiple: false,
                    visibility: "hidden"
                },
                "_draftLabel": {
                    type: "sap.m.Label",
                    multiple: false,
                    visibility: "hidden"
                },                
                "_ideaDescription": {
                    type: "sap.ui.core.HTML",
                    multiple: false,
                    visibility: "hidden"
                },
                "_ideaLink": {
                    type: "sap.m.Link",
                    multiple: false,
                    visibility: "hidden"
                },
                "_ideaLinkBack": {
                    type: "sap.m.Link",
                    multiple: false,
                    visibility: "hidden"
                },
                "_ideaMoreLink": {
                    type: "sap.m.Link",
                    multiple: false,
                    visibility: "hidden"
                },
                "_ideaSubmitter": {
                    type: "sap.m.Link",
                    multiple: false,
                    visibility: "hidden"
                },
                "_flipButton": {
                    type: "sap.m.Button",
                    multiple: false,
                    visibility: "hidden"
                },
                "_commentButton": {
                    type: "sap.m.Button",
                    multiple: false,
                    visibility: "hidden"
                },
                "_flipButtonBack": {
                    type: "sap.m.Button",
                    multiple: false,
                    visibility: "hidden"
                },
                "contributorButton": {
                    type: "sap.ui.core.Control",
                    multiple: false
                },
                "_noticeStatusIcon" : {
                    type : "sap.ui.core.Icon",
                    multiple : false,
                    visibility : "hidden"
                },
                "_noticeCommentIcon" : {
                    type : "sap.ui.core.Icon",
                    multiple : false,
                    visibility : "hidden"
                },
                "_noticeUpdateIcon" : {
                    type : "sap.ui.core.Icon",
                    multiple : false,
                    visibility : "hidden"
                },
                "_noticeCreateIcon" : {
                    type : "sap.ui.core.Icon",
                    multiple : false,
                    visibility : "hidden"
                },
                "_IdeaReadButton": {
                    type: "sap.m.Button",
                    multiple: false,
                    visibility: "hidden"
                }
            },
            events: {
                openIdea: {},
                openSubmitter: {},
                press : {},
                openCampaign : {},
                openIdeaComment: {},
                readIdea:{}
            }
        },
        
        init: function () {
            this._oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ino.controls");
            this.isFront = true;
		},
		
		_getCampaignLink: function(sAggregationNameSuffix) {
            var that = this;
            var sAggregationName = "_campaignLink";
            if (sAggregationNameSuffix) {
                sAggregationName += sAggregationNameSuffix;
            }
            var oCampaignLink = this.getAggregation(sAggregationName);
            var sCampaignName = this.getProperty("campaignName");
            if (!oCampaignLink) {
                oCampaignLink = new Link({
                    id : this.getId() + sAggregationName,
                    href : this.getProperty("campaignHref"),
                    press : function(oEvent) {
                        // prevent href
                        oEvent.preventDefault();
                        that.fireOpenCampaign({campaignId: that.getProperty("campaignId")});
                    },
                    text: sCampaignName
                }).addStyleClass("sapInoIdeaCardAccessibilityCampaignLink");
                this.setAggregation(sAggregationName, oCampaignLink, true);
            }
            return oCampaignLink;
		},
        
        /*
         * Accessing aggregations
         */
        _getIdeaLink: function(sAggregationNameSuffix) {
            var that = this;
            var sAggregationName = "_ideaLink";
            if (sAggregationNameSuffix) {
                sAggregationName += sAggregationNameSuffix;
            }
            var oIdeaLink = this.getAggregation(sAggregationName);
            var sIdeaName = this.getProperty("ideaName");
            if (!oIdeaLink) {
                oIdeaLink = new Link({
                    id: this.getId() + sAggregationName,
                    href: this.getProperty("ideaHref"),
                    press: function(oEvent) {
                        // prevent href
                        oEvent.preventDefault();
                        
                        that.fireOpenIdea({
                            ideaId: that.getProperty("ideaId")
                        });
                    }//,
                    //text: sIdeaName
                }).setText(sIdeaName).addStyleClass("sapInoIdeaCardAccessibilityIdeaLink");
                this.setAggregation(sAggregationName, oIdeaLink, true);
            }
            if(this.getProperty("ideaHref")){
               oIdeaLink.setHref(this.getProperty("ideaHref"));
            }
            return oIdeaLink;
        },

        _getIdeaDescription: function() {
            var oIdeaDescription = this.getAggregation("_ideaDescription");
            if (!oIdeaDescription) {
                oIdeaDescription = new HTML({
                    content: "<span>" + (this.getProperty("ideaDescription") || "") + "</span>",
                    sanitizeContent: true,
                    preferDOM: false
                });
                this.setAggregation("_ideaDescription", oIdeaDescription, true);
            }
            return oIdeaDescription;
        },

        _getIdeaSubmitter: function() {
            var that = this;
            var oIdeaSubmitter = this.getAggregation("_ideaSubmitter");
            if (!oIdeaSubmitter) {
                oIdeaSubmitter = new Link({
                    id: this.getId() + "_ideaSubmitter",
                    press: function(oEvent) {
                        // prevent href to being used
                        oEvent.preventDefault();
                        
                        that._bIsFlipped = true;
                        that.fireOpenSubmitter({
                            ideaSubmitterId: that.getProperty("ideaSubmitterId")
                        });
                    },
                    // href to be used to open identity in new window
                    href : this.getProperty("ideaSubmitterHref"),
                    text: that._getIdeaSubmitterText()
                }).addStyleClass("sapInoIdeaCardAccessibilitySubmitter");
                this.setAggregation("_ideaSubmitter", oIdeaSubmitter, true);
            }
            return oIdeaSubmitter;
        },
        
        _getIdeaSubmitterText : function(){
            return this._oRB.getText("CTRL_IDEACARD_FLD_SUBMITTED_BY", [this.getProperty("ideaSubmitter"), this.getProperty("ideaSubmittedAt") || this.getProperty("ideaCreatedAt")]);
        },

        _getDraftLabel: function() {
            var that = this;
            var oDraftLabel = this.getAggregation("_draftLabel");
            if (!oDraftLabel) {
                oDraftLabel = new Label({
                    id: this.getId() + "_draftLabel",
                    text: that._oRB.getText("CTRL_IDEACARD_TIT_DRAFT"),
                    tooltip: that._oRB.getText("CTRL_IDEACARD_TIT_DRAFT"),
                    textAlign: TextAlign.Center
                });
                this.setAggregation("_draftLabel", oDraftLabel, true);
            }
            return oDraftLabel;
        },

        _getIdeaMoreLink: function(sAggregationNameSuffix) {
            var that = this;
            var sAggregationName = "_ideaMoreLink";
            if (sAggregationNameSuffix) {
                sAggregationName += sAggregationNameSuffix;
            }
            var oIdeaMoreLink = this.getAggregation(sAggregationName);
            var sIdeaName = this.getProperty("ideaName");
            if (!oIdeaMoreLink) {
                oIdeaMoreLink = new Link({
                    id: this.getId() + sAggregationName,
                    href: that.getProperty("ideaHref"),
                    press: function(oEvent) {
                        // prevent href
                        oEvent.preventDefault();
                        
                        that.fireOpenIdea({
                            ideaId: that.getProperty("ideaId")
                        });
                    },
                    text: that._oRB.getText("CTRL_IDEACARD_XLNK_MORE")/*,
                    tooltip: that._oRB.getText("CTRL_IDEACARD_ALT_IDEA_TOOLTIP", [sIdeaName])*/
                }).setTooltip(that._oRB.getText("CTRL_IDEACARD_ALT_IDEA_TOOLTIP", [sIdeaName])).addStyleClass("sapInoIdeaCardAccessibilityMoreButton");
                this.setAggregation(sAggregationName, oIdeaMoreLink, true);
            }
            return oIdeaMoreLink;
        },

        _getFlipButton: function(sAggregationNameSuffix) {
            var that = this;
            var sAggregationName = "_flipButton";
            if (sAggregationNameSuffix) {
                sAggregationName += sAggregationNameSuffix;
            }
            var oFlipButton = this.getAggregation(sAggregationName);
            if (!oFlipButton) {
                oFlipButton = new Button({
                    type: ButtonType.Transparent,
                    icon: "sap-icon://redo",
                    tooltip: that._oRB.getText("CTRL_IDEACARD_BUT_FLIP_BUTTON"),
                    press: function() {
                        that._flip();
                    },
                    enabled: true
                }).addStyleClass("sapInoIdeaCardAccessibilityFlipButton" + sAggregationNameSuffix);
                this.setAggregation(sAggregationName, oFlipButton, true);
            }
            return oFlipButton;
        },
        
        _getCommentButton: function(sAggregationNameSuffix) {
            var that = this;
            var sAggregationName = "_commentButton";
            if (sAggregationNameSuffix) {
                sAggregationName += sAggregationNameSuffix;
            }
            var oCommentButton = this.getAggregation(sAggregationName);
            if (!oCommentButton) {
                oCommentButton = new Button({
                    type: ButtonType.Transparent,
                    icon: "sap-icon://comment",
                    tooltip: {parts:[{path: 'data>COMMENT_HAS_PRIVILEGE'},{path:'data>PARTICIPANT_CAN_COMMENT'},{path:'data>OPEN_STATUS_SETTING'}],
                              formatter: function(iCommentHasPrivilege,iCanComment,iOpenStatusSetting){
                                var bStatusComment = iOpenStatusSetting > 0 && iCommentHasPrivilege > 0 || !iOpenStatusSetting;  
                                if(iCanComment > 0 && bStatusComment){
                                    return that._oRB.getText("CTRL_IDEACARD_BUT_COMMENT_BUTTON");
	                            }
	                            return that._oRB.getText("VOTE_MSG_COMMENT_NO_PRIVILEGE");
                              }},
                    press: function() {
                        that.fireOpenIdeaComment({
                            ideaId: that.getProperty("ideaId")
                        });
                    },
                    enabled: {parts:[{path: 'data>COMMENT_HAS_PRIVILEGE'},{path:'data>PARTICIPANT_CAN_COMMENT'},{path:'data>OPEN_STATUS_SETTING'}],
                              formatter: function(iCommentHasPrivilege,iCanComment,iOpenStatusSetting){
                                var bStatusComment = iOpenStatusSetting > 0 && iCommentHasPrivilege > 0 || !iOpenStatusSetting;  
                                return iCanComment > 0 && bStatusComment;
                              }}
                }).addStyleClass("sapInoIdeaCardBottomRibbonContent sapInoIdeaCardAccessibilityCommentButton");
                this.setAggregation(sAggregationName, oCommentButton, true);
            }
            return oCommentButton;
        },

        _getIdeaReadButton: function() {
            var that = this;
            var sAggregationName = "_IdeaReadButton";
            var oIdeaReadButton = this.getAggregation(sAggregationName);
            if (!oIdeaReadButton) {
                oIdeaReadButton = new Button({
                    type: ButtonType.Transparent,
                    icon: "sap-icon://InoIcons/idea_read",
                    tooltip: that._oRB.getText("IDEA_LIST_FLD_READ"),
                    press: function() {
                        that.fireReadIdea({
                            ideaId: that.getProperty("ideaId")
                        });
                    },
                    visible: "{= !!${data>SHOW_UPDATED_VIEWER} || !!${data>SHOW_COMMENT_VIEWER} || !!${data>SHOW_STATUSCHANGE_VIEWER}}"
                }).addStyleClass("ideaNoticeReadButton");
                this.setAggregation(sAggregationName, oIdeaReadButton, true);
            }
            return oIdeaReadButton;
        },

        _getNoticeStatusIcon : function() {
            var that = this;
            var oNoticeStatusIcon = this.getAggregation("_noticeStatusIcon");
            if (!oNoticeStatusIcon) {
                oNoticeStatusIcon = new Icon({
                    src : "sap-icon://InoIcons/new_status",
                    tooltip: that._oRB.getText("IDEA_LIST_ITEM_IDEA_STATUS"),
                    size: "1.5rem",
                    visible: "{= !!${data>SHOW_STATUSCHANGE_VIEWER}}",
                    press: function() {
                        that.fireOpenIdea({
                            ideaId: that.getProperty("ideaId")
                        });
                    }
                }).addStyleClass("ideaNoticeStatusIcon");
                this.setAggregation("_noticeStatusIcon", oNoticeStatusIcon, true);
            }
            return oNoticeStatusIcon;
        },

        _getNoticeCommentIcon : function() {
            var that = this;
            var oNoticeCommentIcon = this.getAggregation("_noticeCommentIcon");
            if (!oNoticeCommentIcon) {
                oNoticeCommentIcon = new Icon({
                    src : "sap-icon://InoIcons/new_comment",
                    tooltip: that._oRB.getText("IDEA_LIST_ITEM_IDEA_COMMENT"),
                    size: "1.5rem",
                    visible: "{= !!${data>SHOW_COMMENT_VIEWER}}",
                    press: function() {
                        that.fireOpenIdeaComment({
                            ideaId: that.getProperty("ideaId")
                        });
                    }
                }).addStyleClass("ideaNoticeCommentIcon");
                this.setAggregation("_noticeCommentIcon", oNoticeCommentIcon, true);
            }
            return oNoticeCommentIcon;
        },

        _getNoticeUpdateIcon : function() {
            var that = this;
            var oNoticeUpdateIcon = this.getAggregation("_noticeUpdateIcon");
            if (!oNoticeUpdateIcon) {
                oNoticeUpdateIcon = new Icon({
                    src : "sap-icon://InoIcons/idea_update",
                    tooltip: that._oRB.getText("IDEA_LIST_ITEM_IDEA_UPDATE"),
                    size: "1.5rem",
                    visible: "{= !!${data>SHOW_UPDATED_VIEWER}}",
                    press: function() {
                        that.fireOpenIdea({
                            ideaId: that.getProperty("ideaId")
                        });
                    }
                }).addStyleClass("ideaNoticeUpdateIcon");
                this.setAggregation("_noticeUpdateIcon", oNoticeUpdateIcon, true);
            }
            return oNoticeUpdateIcon;
        },
        
        _getNoticeCreateIcon : function() {
            var that = this;
            var oNoticeCreateIcon = this.getAggregation("_noticeCreateIcon");
            if (!oNoticeCreateIcon) {
                oNoticeCreateIcon = new Icon({
                    src : "sap-icon://InoIcons/idea_create",
                    tooltip: that._oRB.getText("IDEA_LIST_ITEM_IDEA_CREATE"),
                    size: "1.5rem",
                    visible: "{= !!${data>SHOW_CREATED_VIEWER}}",
                    press: function() {
                        that.fireOpenIdea({
                            ideaId: that.getProperty("ideaId")
                        });
                    }
                }).addStyleClass("ideaNoticeCreateIcon");
                this.setAggregation("_noticeCreateIcon", oNoticeCreateIcon, true);
            }
            return oNoticeCreateIcon;
        },

        _flip: function() {
            var oFlipper = this._getFlipper(this);
            if (oFlipper) {
                this._bIsFlipped = !this._bIsFlipped;
                oFlipper.classList.toggle("flip");
                if (!jQuery(oFlipper).hasClass("flip")) {
                    this._getFlipButton().focus();
                } else {
                    this._getFlipButton("Back").focus();
                }
            }
        },

        _getFlipper: function(oControl) {
            var aFlipper = oControl.$().find(".sapInoIdeaCardFlipContainer");
            if (aFlipper && aFlipper.length > 0) {
                return aFlipper[0];
            }
            return undefined;
        },
        
        onAfterRendering: function() {
            if (Control.prototype.onAfterRendering) {
                Control.prototype.onAfterRendering.apply(this, arguments);
            }
            
            this.initTabIndex();
            
            this.setAccessibility();
            
            this._initTabs();
        },

        setAccessibility: function(){
            var li = this.getParent();
            if(li && li.attachBrowserEvent){
                li.attachBrowserEvent('focus', function(event){
                    var target = event.target;
                    $(target).find('.ideaListFollow button').attr("tabindex", "0");
                });
                li.attachBrowserEvent('blur', function(event){
                    var target = event.target;
                    var starVote = $(target).find('.starVote');
                    $(target).find('.ideaListFollow button').attr('tabindex', '-1');
                    if(starVote && starVote.length){
                        starVote.attr('tabindex', '-1');
                    }
                });
            }
        },

        initTabIndex: function(){
            // required for accessibility => List tabbing
            this._getIdeaLink().$().attr("tabindex", "-1");
            this._getIdeaLink("Back").$().attr("tabindex", "-1");
            this._getFlipButton().$().attr("tabindex", "-1");
            this._getCommentButton().$().attr("tabindex", "-1");
            this._getFlipButton("Back").$().attr("tabindex", "-1");
            this._getCampaignLink().$().attr("tabindex", "-1");
            this._getCampaignLink("Back").$().attr("tabindex", "-1");
            this._getIdeaMoreLink().$().attr("tabindex", "-1");
            this._getIdeaSubmitter().$().attr("tabindex", "-1");
            
            //this.getAggregation("votePlaceholder").$().attr('tabindex', '-1');
            this.getAggregation("votePlaceholder").$().find('.starVote, button').attr('tabindex', '-1');
            this.getAggregation("followButton").$().find('button').attr("tabindex", "-1");
            this.getAggregation("contributorButton").$().find('button').attr("tabindex", "-1");
        },

        renderer: function (oRM, oControl) {
		    oRM.write("<div");
		    oRM.writeControlData(oControl);
			oRM.addClass("sapInoIdeaCard");
			oRM.addClass("sapUiSizeCompact");
			oRM.writeClasses();
			oRM.write(">");
			
			oControl._renderContent(oRM, oControl);

			oRM.write("</div>");
		},

        _renderContent: function(oRM, oControl) {
            oRM.write("<div");
            oRM.addClass("sapInoIdeaCardFlipContainer");
            if (this._bIsFlipped) {
                oRM.addClass("flip");
            }

            oRM.writeClasses();
            oRM.write(">");

            oRM.write("<div");
            oRM.addClass("sapInoIdeaCardFlipper");
            oRM.writeClasses();
            oRM.write(">");

            oControl._renderFrontContent(oRM, oControl);
            oControl._renderBackContent(oRM, oControl);

            oRM.write("</div>");

            oRM.write("</div>");
        },
        
        _renderImage: function(oRM, oControl) {
		    var oImage = oControl.getAggregation("image");
            if(oImage) {
                oRM.renderControl(oImage);
            }
		},
		

        /*
         * Rendering the card front face
         */
        _renderFrontContent: function(oRM, oControl) {
            oRM.write("<div");
            oRM.addClass("sapInoIdeaCardFront");
            oRM.writeClasses();
            oRM.write(">");

            oControl._renderTopRibbon(oRM, oControl);
            oControl._renderImage(oRM, oControl);
            oControl._renderTopPlaceholder(oRM, oControl);
            oControl._renderIdeaLink(oRM, oControl);
            oControl._renderBottomPlaceholder(oRM, oControl);
            oControl._renderIdeaNoticeIcon(oRM, oControl);
            oControl._renderBottomRibbon(oRM, oControl);
            oControl._renderFollowButton(oRM, oControl);
            oRM.write("</div>");
        },

        /*
         * Rendering the card front face
         */
        _renderBackContent: function(oRM, oControl) {
            oRM.write("<div");
            oRM.addClass("sapInoIdeaCardBack");
            oRM.writeClasses();
            oRM.write(">");

            oControl._renderTopRibbon(oRM, oControl, true);
            oControl._renderIdeaLink(oRM, oControl, true);
            oControl._renderIdeaSubmitter(oRM, oControl);
            oControl._renderIdeaDescription(oRM, oControl);
            oControl._renderIdeaMoreLink(oRM, oControl);
            oControl._renderBottomRibbon(oRM, oControl, true);

            oRM.write("</div>");
        },

        _renderIdeaLink: function(oRM, oControl, bRenderBack) {
            oRM.write("<div");
            oRM.addClass("sapInoIdeaCardIdeaLink");
            oRM.writeClasses();
            oRM.write(">");
            
            oRM.write("<div");
            oRM.addClass("sapInoIdeaCardIdeaLinkTooltip");
            oRM.writeAttributeEscaped("title", oControl._oRB.getText("CTRL_IDEACARD_ALT_IDEA_TOOLTIP", [this.getProperty("ideaName")]));
            oRM.writeClasses();
            oRM.write(">");

            if (bRenderBack) {
                oRM.renderControl(oControl._getIdeaLink("Back"));
            } else {
                oRM.renderControl(oControl._getIdeaLink());
            }
            
            oRM.write("</div>");
            
            if (this.getProperty("isOpenForContributors")) {
                oRM.renderControl(new Icon({
                    src: "sap-icon://InoIcons/shake_hands",
                    tooltip: oControl._oRB.getText("CTRL_IDEACARD_ALT_OPEN_CONTRIBUTION_TOOLTIP")
                }));
            }
            
            oRM.write("</div>");
        },

        _renderTopPlaceholder: function(oRM, oControl) {
            oRM.write("<div");
            oRM.addClass("sapInoIdeaCardTopPlaceholder");
            oRM.writeClasses();
            oRM.write(">");

            var oVoteDisplayPlaceholderControl = oControl.getAggregation("voteDisplayPlaceholder");
            if (oVoteDisplayPlaceholderControl) {
                oRM.renderControl(oVoteDisplayPlaceholderControl);
            }

            var oCommentDisplayPlaceholderControl = oControl.getAggregation("commentDisplayPlaceholder");
            if (oCommentDisplayPlaceholderControl) {
                oRM.renderControl(oCommentDisplayPlaceholderControl);
            }

            var oViewDisplayPlaceholderControl = oControl.getAggregation("viewDisplayPlaceholder");
            if (oViewDisplayPlaceholderControl) {
                oRM.renderControl(oViewDisplayPlaceholderControl);
            }
            
            var oAnonymousPlaceholderControl = oControl.getAggregation("anonymousDisplayPlaceholder");
            if (oAnonymousPlaceholderControl) {
                oRM.renderControl(oAnonymousPlaceholderControl);
            }

            oRM.write("</div>");
        },
        
        _renderBottomPlaceholder: function(oRM, oControl) {
            oRM.write("<div");
            oRM.addClass("sapInoIdeaCardBottomPlaceholder");
            oRM.writeClasses();
            oRM.write(">");

            if (oControl.getProperty("isDraft")) {
                oControl._renderDraftLabel(oRM, oControl);
            } else {
                var oProcessDisplayPlaceholderControl = oControl.getAggregation("processDisplayPlaceholder");
                if (oProcessDisplayPlaceholderControl) {
                    oRM.renderControl(oProcessDisplayPlaceholderControl);
                }
            }

            oRM.write("</div>");
        },

        _renderIdeaNoticeIcon: function(oRM, oControl) {
            oRM.write("<div");
            oRM.addClass("sapInoIdeaNoticeIconPlaceholder");
            oRM.writeClasses();
            oRM.write(">");
            oRM.renderControl(oControl._getNoticeStatusIcon());
            oRM.renderControl(oControl._getNoticeCommentIcon());
            oRM.renderControl(oControl._getNoticeUpdateIcon());
            //oRM.renderControl(oControl._getNoticeCreateIcon());
            oRM.write("</div>");
        },

        _renderFollowButton: function(oRM, oControl){
            oRM.write("<div");
            oRM.write(">");
    
            var oFollowButton = oControl.getAggregation("followButton");
            
            oRM.renderControl(oFollowButton);

            oRM.write("</div>");
        },
        
        _renderContributorButton: function(oRM, oControl){
            var contributorButton = oControl.getAggregation("contributorButton");
            contributorButton.addStyleClass("sapInoIdeaCardBottomRibbonContent sapInoIdeaCardAccessibilityContributorButton");
            oRM.renderControl(contributorButton);
        },
        
        _renderDraftLabel: function(oRM, oControl) {
            oRM.write("<div");
            oRM.addClass("sapInoIdeaCardDraftLabel");
            oRM.writeClasses();
            oRM.write(">");
            var oDraftLabel = oControl._getDraftLabel();
            oRM.renderControl(oDraftLabel);
            oRM.write("</div>");
        },

        _renderIdeaSubmitter: function(oRM, oControl) {
            oRM.write("<div");
            oRM.addClass("sapInoIdeaCardIdeaSubmitter");
            oRM.writeClasses();
            oRM.write(">");
            var oIdeaSubmitter = oControl._getIdeaSubmitter();
            oRM.renderControl(oIdeaSubmitter);
            oRM.write("</div>");
        },

        _renderIdeaDescription: function(oRM, oControl) {
            oRM.write("<div");
            oRM.addClass("sapInoIdeaCardIdeaDescription");
            oRM.writeClasses();
            oRM.write(">");
            var oIdeaDescription = oControl._getIdeaDescription();
            oRM.renderControl(oIdeaDescription);
            oRM.write("</div>");
        },

        _renderIdeaMoreLink: function(oRM, oControl) {
            oRM.write("<div");
            oRM.addClass("sapInoIdeaCardIdeaMoreLink");
            oRM.writeClasses();
            oRM.write(">");

            oRM.write("<div");
            oRM.addClass("sapInoIdeaCardIdeaMoreLinkTooltip");
            oRM.writeAttributeEscaped("title", oControl._oRB.getText("CTRL_IDEACARD_ALT_IDEA_TOOLTIP", [this.getProperty("ideaName")]));
            oRM.writeClasses();
            oRM.write(">");

            var oIdeaMoreLink = oControl._getIdeaMoreLink();
            oRM.renderControl(oIdeaMoreLink);
            oRM.write("</div>");
            
            oRM.write("</div>");
        },

        _renderBottomRibbon: function(oRM, oControl, bRenderBack) {
            oRM.write("<div");
            oRM.addClass("sapInoIdeaCardRibbon");
            oRM.addClass("sapInoIdeaCardBottomRibbon");
            oRM.writeClasses();
            oRM.write(">");

            if (!bRenderBack) {
                var oVotePlaceholderControl = oControl.getAggregation("votePlaceholder");
                if (oVotePlaceholderControl) {
                    oVotePlaceholderControl.addStyleClass("sapInoIdeaCardAccessibilityVote");
                    oVotePlaceholderControl.addStyleClass("sapInoIdeaCardBottomRibbonContent");
                    oRM.renderControl(oVotePlaceholderControl);
                }
                
                oRM.renderControl(oControl._getCommentButton());
                oControl._renderContributorButton(oRM, oControl);
            }

            oRM.write("<div");
            oRM.addClass("sapInoIdeaCardBottomRibbonContent");
            oRM.writeClasses();
            oRM.write(">");
            
            if (bRenderBack) {
                oRM.renderControl(oControl._getFlipButton("Back"));
            } else {
                oRM.renderControl(oControl._getFlipButton());
            }
            oRM.renderControl(oControl._getIdeaReadButton());
            oRM.write("</div>");
            oRM.write("</div>");
        },

        _renderTopRibbon: function(oRM, oControl, bRenderBack) {
            oRM.write("<div");
            oRM.addClass("sapInoIdeaCardRibbon sapInoIdeaCardTopRibbon");
            oRM.writeClasses();
            var sCampaignColor = oControl.getProperty("color");
            if (sCampaignColor && sCampaignColor.length === 7) {
                oRM.writeAttributeEscaped("style", "background-color: " + sCampaignColor);
            }
            oRM.write(">");
            
            // this is the text that is ALWAYS read by the screenreader, this is why we adapt it
            oRM.write("<span");
            oRM.addClass("sapInoIdeaCardAccessibilityText");
            oRM.addClass("sapUiInvisibleText");
            oRM.writeAttributeEscaped("title", this._oRB.getText("CTRL_IDEACARD_ALT_ACCESSIBILITY_TEXT_IDEA_LINK", [this.getProperty("ideaName")]));
            oRM.writeClasses();
            oRM.write("></span>");

            oRM.write("<div");
            oRM.addClass("sapInoIdeaCardCampaignLink");
            if (!sCampaignColor) {
                sCampaignColor = "#FFFFFF";
            }
            oRM.addClass("sapInoIdeaCardCampaignTitle" + ColorSupport.calculateTitleTextColor(sCampaignColor.substr(1, 2), sCampaignColor.substr(3, 2), sCampaignColor.substr(5, 2)));
            oRM.writeClasses();
            oRM.write(">");

            oRM.write("<div");
            oRM.addClass("sapInoIdeaCardCampaignLinkTooltip");
            oRM.writeAttributeEscaped("title", oControl._oRB.getText("CTRL_CARD_ALT_CAMPAIGN_TOOLTIP"));
            oRM.writeClasses();
            oRM.write(">");

            if (bRenderBack) {
                oRM.renderControl(oControl._getCampaignLink("Back"));
            } else {
                oRM.renderControl(oControl._getCampaignLink());
            }
            
            oRM.write("</div>");

            oRM.write("</div>");
            oRM.write("</div>");
        },
        
        ontouchstart : function(oEvent) {
            oEvent.setMarked();  
        },
        
        ontap : function(oEvent) {
            this.firePress();  
        },
        
        /**
         * Accessibility methods
         */
        getFocusDomRef: function() {
            if (this._bIsFlipped) {
                return this._getIdeaLink("Back").$();
            }
            return this._getIdeaLink().$();
        },
        
        onfocusin : function(oEvent) {
            if (!this._$AccessibilityText) {
                this._$AccessibilityText = this.$().find(".sapInoIdeaCardAccessibilityText");
            }
            
            if (!oEvent || !oEvent.target || !oEvent.target.className) {
                this._$AccessibilityText.attr("title", "");
                return;
            }
            
            if (oEvent.target.className.indexOf("sapInoIdeaCardAccessibilityCampaignLink") !== -1) {
                this._$AccessibilityText.attr("title", this._oRB.getText("CTRL_IDEACARD_ALT_ACCESSIBILITY_TEXT_CAMPAIGN_LINK", [this.getProperty("campaignName")]));
            }
            else if (oEvent.target.className.indexOf("sapInoIdeaCardAccessibilityFlipButtonBack") !== -1) {
                this._$AccessibilityText.attr("title", this._oRB.getText("CTRL_IDEACARD_ALT_ACCESSIBILITY_TEXT_FLIP_BACK"));
            }
            else if (oEvent.target.className.indexOf("sapInoIdeaCardAccessibilityFlipButton") !== -1) {
                this._$AccessibilityText.attr("title", this._oRB.getText("CTRL_IDEACARD_ALT_ACCESSIBILITY_TEXT_FLIP"));
            }
            else if (oEvent.target.className.indexOf("sapInoIdeaCardAccessibilitySubmitter") !== -1) {
                this._$AccessibilityText.attr("title", this._oRB.getText("CTRL_IDEACARD_ALT_ACCESSIBILITY_TEXT_SUBMITTER"));
            }
            else if (oEvent.target.className.indexOf("sapInoIdeaCardAccessibilityIdeaLink") !== -1) {
                this._$AccessibilityText.attr("title", this._oRB.getText("CTRL_IDEACARD_ALT_ACCESSIBILITY_TEXT_IDEA_LINK", [this.getProperty("ideaName")]));
            }
            else if (oEvent.target.className.indexOf("sapInoIdeaCardAccessibilityMoreButton") !== -1) {
                this._$AccessibilityText.attr("title", this._oRB.getText("CTRL_IDEACARD_ALT_ACCESSIBILITY_TEXT_MORE", [this.getProperty("ideaName")]));
            }
            else if (oEvent.target.className.indexOf("sapInoIdeaCardAccessibilityVote") !== -1) {
                this._$AccessibilityText.attr("title", this._oRB.getText("CTRL_IDEACARD_ALT_ACCESSIBILITY_TEXT_VOTE", [this.getProperty("ideaName")]));
            }
            else if (oEvent.target.className.indexOf('sapInoIdeaCardAccessibilityCommentButton') !== -1){
                this._$AccessibilityText.attr("title", this._oRB.getText("CTRL_IDEACARD_ALT_ACCESSIBILITY_TEXT_COMMENT", [this.getProperty("ideaName")]));
            }
            else if (oEvent.target.className.indexOf('sapInoIdeaCardAccessibilityContributorButton') !== -1){
                this._$AccessibilityText.attr("title", this._oRB.getText("CTRL_IDEACARD_ALT_ACCESSIBILITY_TEXT_CONTRIBUTOR", [this.getProperty("ideaName")]));
            }
            else {
                // this may be one of the different voting controls, where the focus target differs from the control itself
                var $Vote = jQuery(oEvent.target).closest(".sapInoIdeaCardAccessibilityVote");
                if ($Vote && $Vote.length > 0) {
                    this._$AccessibilityText.attr("title", this._oRB.getText("CTRL_IDEACARD_ALT_ACCESSIBILITY_TEXT_VOTE", [this.getProperty("ideaName")]));
                }
            }
        },
        
        _initTabs: function() {
            var oFlipButton = this._getFlipButton();
            var oBackFlipButton = this._getFlipButton("Back");
            oFlipButton.addStyleClass("sapInoIdeaCardFlipButton");
            oBackFlipButton.addStyleClass("sapInoIdeaCardFlipButton");

            var oFrontVote = this.getAggregation("votePlaceholder");
            var oFrontFollow = this.getAggregation("followButton");
            var oFrontContributor = this.getAggregation("contributorButton");

            this._aFrontTabs = [];
            this._aFrontTabs.push(this._getCampaignLink().$()[0].id);
            this._aFrontTabs.push(this._getIdeaLink().$()[0].id);
            if (oFrontVote.getEnabled()) {
                var $FrontVote = oFrontVote.$().find(".starVote, button");
                if ($FrontVote && $FrontVote.length > 0) {
                    this._aFrontTabs.push($FrontVote[0].id);
                     for(var oFrontNum = 1;oFrontNum < $FrontVote.length;oFrontNum++){
                            this._aFrontTabs.push($FrontVote[oFrontNum].id);
                        }
                }
            }
            if (oFrontFollow.getEnabled()){
                var $FrontFollow = oFrontFollow.$().find("button");
                if($FrontFollow && $FrontFollow.length){
                    this._aFrontTabs.push($FrontFollow[0].id);
                }
            }
            
            if(oFrontContributor.getEnabled()){
                var $contributorButton = oFrontContributor.$().find('button');
                if($contributorButton && $contributorButton.length){
                    this._aFrontTabs.push($contributorButton[0].id);
                }
            }
            this._aFrontTabs.push(this._getFlipButton().$()[0].id);
            this._aFrontTabs.push(this._getCommentButton().$()[0].id);

            this._aBackTabs = [];
            this._aBackTabs.push(this._getCampaignLink("Back").$()[0].id);
            this._aBackTabs.push(this._getIdeaLink("Back").$()[0].id);
            this._aBackTabs.push(this._getIdeaSubmitter().$()[0].id);
            this._aBackTabs.push(sanitizeHTML(this._getIdeaMoreLink().$()[0].id));
            this._aBackTabs.push(this._getFlipButton("Back").$()[0].id);
        },
        
        _getTabs: function() {
            if (this._bIsFlipped) {
                return this._aBackTabs;
            }
            return this._aFrontTabs;
        },
        
        _defaultOnKeyDown: function(oEvent) {
            if (Control.prototype.onkeydown) {
                Control.prototype.onkeydown.apply(this, arguments);
            }
        },
        
        onkeydown: function(oEvent) {
            var aTabs = this._getTabs();
            var fnUpdate = this._incr;

            if (oEvent.shiftKey || oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_UP || oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_LEFT) {
                fnUpdate = this._decr;
            }
         
            if (oEvent.keyCode === jQuery.sap.KeyCodes.ESCAPE) {
                this.getParent().focus();
            } else if (oEvent.keyCode === jQuery.sap.KeyCodes.TAB ||
                oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_DOWN ||
                oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_RIGHT ||
                oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_UP ||
                oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_LEFT) {
                var $Current = jQuery(":focus");
                var iIdx = -1;
                if ($Current && $Current.length > 0) {
                    iIdx = aTabs.indexOf($Current[0].id);
                    if (iIdx !== -1) {
                        iIdx = fnUpdate(iIdx, aTabs.length - 1);
                        this._focus(jQuery("#" + aTabs[iIdx]));

                        oEvent.preventDefault();
                        oEvent.stopPropagation();
                    } else {
                        this.getParent().focus();
                    }
                } else {
                    this.getParent().focus();
                }
            } else {
                this._defaultOnKeyDown(oEvent);
            }
        },
		
        _incr: function(iVal, iMax) {
            iVal++;
            if (iVal > iMax) {
                return 0;
            }
            return iVal;
        },

        _decr: function(iVal, iMax) {
            iVal--;
            if (iVal < 0) {
                return iMax;
            }
            return iVal;
        },
        
        _focus: function(oElement) {
            if (jQuery.type(oElement.focus) === "function") {
                setTimeout(function() {
                    oElement.focus();
                }, 0);
            }
        }
        /**
         * Accessibility methods end here
         */
    });

    IdeaCard.prototype.setIdeaDescription = function(sValue) {
        this.setProperty("ideaDescription", sValue);
        this._getIdeaDescription().setContent("<span>" + (sValue || "") + "</span>");
    };

    IdeaCard.prototype.setIdeaName = function(sValue) {
        this.setProperty("ideaName", sValue);
        var oIdeaLink = this._getIdeaLink();
        if (oIdeaLink) {
            oIdeaLink.setText(sValue);
        }
        oIdeaLink = this._getIdeaLink("Back");
        if (oIdeaLink) {
            oIdeaLink.setText(sValue);
        }
    };
    
    IdeaCard.prototype.setIdeaSubmittedAt = function(oValue) {
        this.setProperty("ideaSubmittedAt", oValue);
        this._getIdeaSubmitter().setText(this._getIdeaSubmitterText());
    };
    
    IdeaCard.prototype.setIdeaCreatedAt = function(oValue) {
        this.setProperty("ideaCreatedAt", oValue);
        this._getIdeaSubmitter().setText(this._getIdeaSubmitterText());
    };
    
    IdeaCard.prototype.setIdeaSubmitter = function(oValue) {
        this.setProperty("ideaSubmitter", oValue);
        this._getIdeaSubmitter().setText(this._getIdeaSubmitterText());
    };

    return IdeaCard;
});

}; // end of sap/ino/controls/IdeaCard.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.IdeaCardNoImage') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.IdeaCardNoImage'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.HTML'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.TextAlign'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Icon'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.commons.Label'); // unlisted dependency retained
jQuery.sap.require('sap.base.security.sanitizeHTML'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/IdeaCardNoImage",[
    "sap/ui/core/Control",
    "sap/ino/controls/util/ColorSupport",
    "sap/m/Button",
    "sap/m/ButtonType",
    "sap/m/Label",
    "sap/m/Link",
    "sap/m/Text",
    "sap/ui/core/HTML",
    "sap/ui/core/TextAlign",
    "sap/ui/core/Icon",
    "sap/ino/controls/VoteType",
	"sap/m/FlexBox",
	"sap/ui/commons/Label",
	"sap/base/security/sanitizeHTML"
], function(Control,
	ColorSupport,
	Button,
	ButtonType,
	Label,
	Link,
	Text,
	HTML,
	TextAlign,
	Icon,
	VoteType,
	FlexBox,
	commonLabel,
	sanitizeHTML) {
	"use strict";

	/**
	 *
	 * Constructor for the IdeaCard, a visual representation of an Idea. It can be used as an item (with renderer) within a list or as a
	 * preview during idea creation etc.
	 *
	 * <ul>
	 * <li>Properties
	 * <ul>
	 * <li>ideaDescription: idea description</li>
	 * <li>ideaId: idea id</li>
	 * <li>ideaName: name of the idea</li>
	 * <li>ideaSubmittedAt: timestamp of the idea submission</li>
	 * <li>ideaSubmitter: full name of the idea submitter</li>
	 * <li>ideaSubmitterId: id of the idea's submitter</li>
	 * <li>isDraft: is the idea in state draft</li>
	 * <li>color: color of the campaign</li>
	 * <li>campaignId: id of the campaign</li>
	 * <li>campaignHref: URL of the campaign</li>
	 * <li>campaignName: name of the campaign</li>
	 * </ul>
	 * </li>
	 * <li>Aggregations
	 * <ul>
	 * <li>processPlaceholder: placeholder for process indicator</li>
	 * <li>voteDisplayPlaceholder: placeholder for vote</li>
	 * <li>commentPlaceholder: placeholder for comment control</li>
	 * <li>image: placeholder for an image representation control</li>
	 * <li>_campaignLink: aggregation storing the control rendering the campaign link</li>
	 * <li>_campaignLinkBack: aggregation holds a control representing a link to idea's campaign</li>
	 * <li>_ideaLink: aggregation holds a control representing a link to idea</li>
	 * <li>_ideaLinkBack: aggregation holds a control representing a link to idea on the back side</li>
	 * <li>_ideaDescription: aggregation holds a control representing an idea description</li>
	 * <li>_ideaSubmitter: aggregation holds a control representing an idea's submitter</li>
	 * <li>_ideaMoreLink: aggregation holds a control representing a link to idea</li>
	 * <li>_flipButton: aggregation holds a control flipping the card to back</li>
	 * <li>_commentButton: aggregation holds a control representing a navigation to idea comment section</li>
	 * <li>_flipButtonBack: aggregation holds a control flipping the card to face</li>
	 * <li>_draftLabel: aggregation holds a control representing the Draft label</li>
	 * <li>_noticeStatusIcon: aggregation holds a control representing the notice status icon</li>
     * <li>_noticeCommentIcon: aggregation holds a control representing the notice comment icon</li>
     * <li>_noticeUpdateIcon: aggregation holds a control representing the notice update icon</li>
     * <li>_noticeCreateIcon: aggregation holds a control representing the notice create icon</li>
     * <li>_IdeaReadButton: aggregation holds a control representing the idea read Btn</li>
	 * </ul>
	 * </li>
	 * <li>Events
	 * <ul>
	 * <li>openIdea: event is thrown when idea details are to be opened</li>
	 * <li>openSubmitter: event is thrown when the idea's submitter details are to be opened</li>
	 * <li>openCampaign: event is thrown when the campaign details are to be opened</li>
	 * <li>press: event is thrown when the control istapped</li>
	 * </ul>
	 * </li>
	 * </ul>
	 *
	 * @class The IdeaCard is a representation of an Idea. It can be used as an item (with renderer) within a list or as a preview during idea creation etc.
	 * @extends sap.ino.controls.Card
	 * @version 1.3.0
	 *
	 * @constructor
	 * @public
	 * @name sap.ino.controls.IdeaCard
	 */
	var IdeaCardNoImage = Control.extend("sap.ino.controls.IdeaCardNoImage", {
		metadata: {
			properties: {
				"ideaCreatedAt": {
					type: "string"
				},
				"ideaDescription": {
					type: "string"
				},
				"ideaHref": {
					type: "sap.ui.core.URI"
				},
				"ideaId": {
					type: "int"
				},
				"ideaName": {
					type: "string"
				},
				"ideaSubmittedAt": {
					type: "string"
				},
				"ideaSubmitter": {
					type: "string"
				},
				"ideaSubmitterId": {
					type: "int"
				},
				"ideaSubmitterHref": {
					type: "sap.ui.core.URI"
				},
				"isDraft": {
					type: "boolean"
				},
				"isOpenForContributors": {
					type: "boolean"
				},
				"color": {
					type: "sap.ui.core.CSSColor"
				},
				"campaignId": {
					type: "int"
				},
				"campaignHref": {
					type: "sap.ui.core.URI"
				},
				"campaignName": {
					type: "string"
				},
				"phase": {
					type: "string"
				},
				"status": {
					type: "string"
				},
				statusColor: {
					type: "string"
				},
				"respValue": {
					type: "string"
				},
				"voteType": {
					type: "string"
				},
				'voteCount': {
					type: "int"
				},
				'voteLike': {
					type: "int"
				},
				'voteDislike': {
					type: 'int'
				},
				'likeVotes': {
					type: 'float'
				},
				'negativeVotes': {
					type: 'int'
				},
				'positiveVotes': {
					type: 'int'
				}
			},
			aggregations: {
				"commentDisplayPlaceholder": {
					type: "sap.ui.core.Control",
					multiple: false
				},
				/*"processDisplayPlaceholder": {
                    type: "sap.ui.core.Control",
                    multiple: false
                },*/
				"viewDisplayPlaceholder": {
					type: "sap.ui.core.Control",
					multiple: false
				},
				"voteDisplayPlaceholder": {
					type: "sap.ui.core.Control",
					multiple: false
				},
				"votePlaceholder": {
					type: "sap.ui.core.Control",
					multiple: false
				},
				"followButton": {
					type: "sap.ui.core.Control",
					multiple: false
				},
				/* "image": {
                    type: "sap.m.Image",
                    multiple: false
                },*/
				"_campaignLink": {
					type: "sap.m.Link",
					multiple: false,
					visibility: "hidden"
				},
				"_campaignLinkBack": {
					type: "sap.m.Link",
					multiple: false,
					visibility: "hidden"
				},
				"_draftLabel": {
					type: "sap.m.Label",
					multiple: false,
					visibility: "hidden"
				},
				"_ideaDescription": {
					type: "sap.ui.core.HTML",
					multiple: false,
					visibility: "hidden"
				},
				"_ideaLink": {
					type: "sap.m.Link",
					multiple: false,
					visibility: "hidden"
				},
				"_ideaLinkBack": {
					type: "sap.m.Link",
					multiple: false,
					visibility: "hidden"
				},
				"_ideaMoreLink": {
					type: "sap.m.Link",
					multiple: false,
					visibility: "hidden"
				},
				"_ideaSubmitter": {
					type: "sap.m.Link",
					multiple: false,
					visibility: "hidden"
				},
				"_flipButton": {
					type: "sap.m.Button",
					multiple: false,
					visibility: "hidden"
				},
				"_commentButton": {
					type: "sap.m.Button",
					multiple: false,
					visibility: "hidden"
				},
				"_flipButtonBack": {
					type: "sap.m.Button",
					multiple: false,
					visibility: "hidden"
				},
				"contributorButton": {
					type: "sap.ui.core.Control",
					multiple: false
				},
				"_status": {
					type: "sap.m.FlexBox",
					multiple: false,
					visibility: "hidden"
				},
				"_phase": {
					type: "sap.m.FlexBox",
					multiple: false,
					visibility: "hidden"
				},
				"_ideaId": {
					type: "sap.m.FlexBox",
					multiple: false,
					visibility: "hidden"
				},
				"_respValue": {
					type: "sap.m.FlexBox",
					multiple: false,
					visibility: "hidden"
				},
				"_voteCount": {
					type: "sap.m.FlexBox",
					multiple: false,
					visibility: "hidden"
				},
				"_noticeStatusIcon" : {
                    type : "sap.ui.core.Icon",
                    multiple : false,
                    visibility : "hidden"
                },
                "_noticeCommentIcon" : {
                    type : "sap.ui.core.Icon",
                    multiple : false,
                    visibility : "hidden"
                },
                "_noticeUpdateIcon" : {
                    type : "sap.ui.core.Icon",
                    multiple : false,
                    visibility : "hidden"
                },
                "_noticeCreateIcon" : {
                    type : "sap.ui.core.Icon",
                    multiple : false,
                    visibility : "hidden"
                },
                "_IdeaReadButton": {
                    type: "sap.m.Button",
                    multiple: false,
                    visibility: "hidden"
                }
			},
			events: {
				openIdea: {},
				openSubmitter: {},
				press: {},
				openCampaign: {},
				openIdeaComment: {},
				readIdea:{}
			}
		},

		init: function() {
			this._oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ino.controls");
			this.isFront = true;
		},

		_getCampaignLink: function(sAggregationNameSuffix) {
			var that = this;
			var sAggregationName = "_campaignLink";
			if (sAggregationNameSuffix) {
				sAggregationName += sAggregationNameSuffix;
			}
			var oCampaignLink = this.getAggregation(sAggregationName);
			var sCampaignName = this.getProperty("campaignName");
			if (!oCampaignLink) {
				oCampaignLink = new Link({
					id: this.getId() + sAggregationName,
					href: this.getProperty("campaignHref"),
					press: function(oEvent) {
						// prevent href
						oEvent.preventDefault();
						that.fireOpenCampaign({
							campaignId: that.getProperty("campaignId")
						});
					},
					text: sCampaignName
				}).addStyleClass("sapInoIdeaCardAccessibilityCampaignLink");
				this.setAggregation(sAggregationName, oCampaignLink, true);
			}
			return oCampaignLink;
		},

		/*
		 * Accessing aggregations
		 */
		_getIdeaLink: function(sAggregationNameSuffix) {
			var that = this;
			var sAggregationName = "_ideaLink";
			if (sAggregationNameSuffix) {
				sAggregationName += sAggregationNameSuffix;
			}
			var oIdeaLink = this.getAggregation(sAggregationName);
			var sIdeaName = this.getProperty("ideaName");
			if (!oIdeaLink) {
				oIdeaLink = new Link({
					id: this.getId() + sAggregationName,
					href: this.getProperty("ideaHref"),
					press: function(oEvent) {
						// prevent href
						oEvent.preventDefault();

						that.fireOpenIdea({
							ideaId: that.getProperty("ideaId")
						});
					} //,
					//text: sIdeaName
				}).setText(sIdeaName).addStyleClass("sapInoIdeaCardAccessibilityIdeaLink");
				this.setAggregation(sAggregationName, oIdeaLink, true);
			}
			if (this.getProperty("ideaHref")) {
				oIdeaLink.setHref(this.getProperty("ideaHref"));
			}
			return oIdeaLink;
		},

		_getIdeaDescription: function() {
			var oIdeaDescription = this.getAggregation("_ideaDescription");
			if (!oIdeaDescription) {
				oIdeaDescription = new HTML({
					content: "<span>" + (this.getProperty("ideaDescription") || "") + "</span>",
					sanitizeContent: true,
					preferDOM: false
				});
				this.setAggregation("_ideaDescription", oIdeaDescription, true);
			}
			return oIdeaDescription;
		},

		_getIdeaSubmitter: function() {
			var that = this;
			var oIdeaSubmitter = this.getAggregation("_ideaSubmitter");
			if (!oIdeaSubmitter) {
				oIdeaSubmitter = new Link({
					id: this.getId() + "_ideaSubmitter",
					press: function(oEvent) {
						// prevent href to being used
						oEvent.preventDefault();

						that._bIsFlipped = true;
						that.fireOpenSubmitter({
							ideaSubmitterId: that.getProperty("ideaSubmitterId")
						});
					},
					// href to be used to open identity in new window
					href: this.getProperty("ideaSubmitterHref"),
					text: that._getIdeaSubmitterText()
				}).addStyleClass("sapInoIdeaCardAccessibilitySubmitter");
				this.setAggregation("_ideaSubmitter", oIdeaSubmitter, true);
			}
			return oIdeaSubmitter;
		},

		_getIdeaSubmitterText: function() {
			var submitterName = this.getProperty("ideaSubmitter");
			if (this.getProperty("ideaSubmitterId") === 0) {
				submitterName = this.getModel("i18n").getProperty("IDEA_OBJECT_TIT_IDEA_Anonymity");
			}
			return this._oRB.getText("CTRL_IDEACARD_FLD_SUBMITTED_BY", [submitterName, this.getProperty("ideaSubmittedAt") || this.getProperty(
				"ideaCreatedAt")]);
		},

		_getDraftLabel: function() {
			var that = this;
			var oDraftLabel = this.getAggregation("_draftLabel");
			if (!oDraftLabel) {
				oDraftLabel = new Label({
					id: this.getId() + "_draftLabel",
					text: that._oRB.getText("CTRL_IDEACARD_TIT_DRAFT"),
					tooltip: that._oRB.getText("CTRL_IDEACARD_TIT_DRAFT"),
					textAlign: TextAlign.Center
				});
				this.setAggregation("_draftLabel", oDraftLabel, true);
			}
			return oDraftLabel;
		},

		_getIdeaMoreLink: function(sAggregationNameSuffix) {
			var that = this;
			var sAggregationName = "_ideaMoreLink";
			if (sAggregationNameSuffix) {
				sAggregationName += sAggregationNameSuffix;
			}
			var oIdeaMoreLink = this.getAggregation(sAggregationName);
			var sIdeaName = this.getProperty("ideaName");
			if (!oIdeaMoreLink) {
				oIdeaMoreLink = new Link({
					id: this.getId() + sAggregationName,
					href: that.getProperty("ideaHref"),
					press: function(oEvent) {
						// prevent href
						oEvent.preventDefault();

						that.fireOpenIdea({
							ideaId: that.getProperty("ideaId")
						});
					},
					text: that._oRB.getText("CTRL_IDEACARD_XLNK_MORE")
					/*,
                    tooltip: that._oRB.getText("CTRL_IDEACARD_ALT_IDEA_TOOLTIP", [sIdeaName])*/
				}).setTooltip(that._oRB.getText("CTRL_IDEACARD_ALT_IDEA_TOOLTIP", [sIdeaName])).addStyleClass(
					"sapInoIdeaCardAccessibilityMoreButton");
				this.setAggregation(sAggregationName, oIdeaMoreLink, true);
			}
			return oIdeaMoreLink;
		},

		_getFlipButton: function(sAggregationNameSuffix) {
			var that = this;
			var sAggregationName = "_flipButton";
			if (sAggregationNameSuffix) {
				sAggregationName += sAggregationNameSuffix;
			}
			var oFlipButton = this.getAggregation(sAggregationName);
			if (!oFlipButton) {
				oFlipButton = new Button({
					type: ButtonType.Transparent,
					icon: "sap-icon://redo",
					tooltip: that._oRB.getText("CTRL_IDEACARD_BUT_FLIP_BUTTON"),
					press: function(oEvent) {
						that._flip();
					},
					enabled: true
				}).addStyleClass("sapInoIdeaCardAccessibilityFlipButton" + sAggregationNameSuffix);
				this.setAggregation(sAggregationName, oFlipButton, true);
			}
			return oFlipButton;
		},

		_getCommentButton: function(sAggregationNameSuffix) {
			var that = this;
			var sAggregationName = "_commentButton";
			if (sAggregationNameSuffix) {
				sAggregationName += sAggregationNameSuffix;
			}
			var oCommentButton = this.getAggregation(sAggregationName);
			if (!oCommentButton) {
				oCommentButton = new Button({
					type: ButtonType.Transparent,
					icon: "sap-icon://comment",
					tooltip: {parts:[{path: 'data>COMMENT_HAS_PRIVILEGE'},{path:'data>PARTICIPANT_CAN_COMMENT'},{path:'data>OPEN_STATUS_SETTING'}],
                              formatter: function(iCommentHasPrivilege,iCanComment,iOpenStatusSetting){
                                var bStatusComment = iOpenStatusSetting > 0 && iCommentHasPrivilege > 0 || !iOpenStatusSetting;  
                                if(iCanComment > 0 && bStatusComment){
                                    return that._oRB.getText("CTRL_IDEACARD_BUT_COMMENT_BUTTON");
	                            }
	                            return that._oRB.getText("VOTE_MSG_COMMENT_NO_PRIVILEGE");
                              }},
					press: function(oEvent) {
						that.fireOpenIdeaComment({
							ideaId: that.getProperty("ideaId")
						});
					},
					enabled: {parts:[{path: 'data>COMMENT_HAS_PRIVILEGE'},{path:'data>PARTICIPANT_CAN_COMMENT'},{path:'data>OPEN_STATUS_SETTING'}],
                              formatter: function(iCommentHasPrivilege,iCanComment,iOpenStatusSetting){
                                var bStatusComment = iOpenStatusSetting > 0 && iCommentHasPrivilege > 0 || !iOpenStatusSetting;  
                                return iCanComment > 0 && bStatusComment;
                              }}
				}).addStyleClass("sapInoIdeaCardBottomRibbonContent sapInoIdeaCardAccessibilityCommentButton");
				this.setAggregation(sAggregationName, oCommentButton, true);
			}
			return oCommentButton;
		},

		_getIdeaReadButton: function() {
            var that = this;
            var sAggregationName = "_IdeaReadButton";
            var oIdeaReadButton = this.getAggregation(sAggregationName);
            if (!oIdeaReadButton) {
                oIdeaReadButton = new Button({
                    type: ButtonType.Transparent,
					icon: "sap-icon://InoIcons/idea_read",
                    tooltip: that._oRB.getText("IDEA_LIST_FLD_READ"),
                    press: function() {
                        that.fireReadIdea({
                            ideaId: that.getProperty("ideaId")
                        });
                    },
                    visible: "{= !!${data>SHOW_UPDATED_VIEWER} || !!${data>SHOW_COMMENT_VIEWER} || !!${data>SHOW_STATUSCHANGE_VIEWER}}"
                }).addStyleClass("ideaNoticeReadButton");
                this.setAggregation(sAggregationName, oIdeaReadButton, true);
            }
            return oIdeaReadButton;
        },

        _getNoticeStatusIcon : function() {
            var that = this;
            var oNoticeStatusIcon = this.getAggregation("_noticeStatusIcon");
            if (!oNoticeStatusIcon) {
                oNoticeStatusIcon = new Icon({
                    src : "sap-icon://InoIcons/new_status",
                    tooltip: that._oRB.getText("IDEA_LIST_ITEM_IDEA_STATUS"),
					size: "1.5rem",
					visible: "{= !!${data>SHOW_STATUSCHANGE_VIEWER}}",
                    press: function() {
                        that.fireOpenIdea({
                            ideaId: that.getProperty("ideaId")
                        });
                    }
                }).addStyleClass("ideaNoticeStatusIcon");
                this.setAggregation("_noticeStatusIcon", oNoticeStatusIcon, true);
            }
            return oNoticeStatusIcon;
        },

        _getNoticeCommentIcon : function() {
            var that = this;
            var oNoticeCommentIcon = this.getAggregation("_noticeCommentIcon");
            if (!oNoticeCommentIcon) {
                oNoticeCommentIcon = new Icon({
                    src : "sap-icon://InoIcons/new_comment",
                    tooltip: that._oRB.getText("IDEA_LIST_ITEM_IDEA_COMMENT"),
                    size: "1.5rem",
                    visible: "{= !!${data>SHOW_COMMENT_VIEWER}}",
                    press: function() {
                        that.fireOpenIdeaComment({
                            ideaId: that.getProperty("ideaId")
                        });
                    }
                }).addStyleClass("ideaNoticeCommentIcon");
                this.setAggregation("_noticeCommentIcon", oNoticeCommentIcon, true);
            }
            return oNoticeCommentIcon;
        },

        _getNoticeUpdateIcon : function() {
            var that = this;
            var oNoticeUpdateIcon = this.getAggregation("_noticeUpdateIcon");
            if (!oNoticeUpdateIcon) {
                oNoticeUpdateIcon = new Icon({
                    src : "sap-icon://InoIcons/idea_update",
                    tooltip: that._oRB.getText("IDEA_LIST_ITEM_IDEA_UPDATE"),
                    size: "1.5rem",
                    visible: "{= !!${data>SHOW_UPDATED_VIEWER}}",
                    press: function() {
                        that.fireOpenIdea({
                            ideaId: that.getProperty("ideaId")
                        });
                    }
                }).addStyleClass("ideaNoticeUpdateIcon");
                this.setAggregation("_noticeUpdateIcon", oNoticeUpdateIcon, true);
            }
            return oNoticeUpdateIcon;
        },
        
        _getNoticeCreateIcon : function() {
            var that = this;
            var oNoticeCreateIcon = this.getAggregation("_noticeCreateIcon");
            if (!oNoticeCreateIcon) {
                oNoticeCreateIcon = new Icon({
                    src : "sap-icon://InoIcons/idea_create",
                    tooltip: that._oRB.getText("IDEA_LIST_ITEM_IDEA_CREATE"),
                    size: "1.5rem",
                    visible: "{= !!${data>SHOW_CREATED_VIEWER}}",
                    press: function() {
                        that.fireOpenIdea({
                            ideaId: that.getProperty("ideaId")
                        });
                    }
                }).addStyleClass("ideaNoticeCreateIcon");
                this.setAggregation("_noticeCreateIcon", oNoticeCreateIcon, true);
            }
            return oNoticeCreateIcon;
        },

		_getVoteCountLabel: function() {
			var voteType = this.getProperty('voteType');
			var labelsContainer = [];
			var labelIcon, countNumber, toolTip;
			switch (voteType) {
				case VoteType.TYPE_LIKE:
					labelIcon = "sap-icon://InoIcons/heart";
					countNumber = this.getProperty('voteCount');
					toolTip = this._oRB.getText('CTRL_IDEACARD_FLD_VOTE_LABEL', [countNumber]);
					break;
				case VoteType.TYPE_LIKE_DISLIKE:
					labelIcon = "sap-icon://InoIcons/thumbsup";
					countNumber = this.getProperty('positiveVotes');
					toolTip = this._oRB.getText('CTRL_IDEACARD_FLD_LIKE_LABEL', [countNumber]);
					break;
				case VoteType.TYPE_STAR:
					labelIcon = "sap-icon://favorite";
					countNumber = this.getProperty('voteCount');
					toolTip = this._oRB.getText('CTRL_IDEACARD_FLD_VOTE_LABEL', [countNumber]);
					break;
				default:
					labelIcon = "sap-icon://InoIcons/heart";
					countNumber = this.getProperty('voteCount');
					toolTip = this._oRB.getText('CTRL_IDEACARD_FLD_VOTE_LABEL', [countNumber]);
					break;
			}
			labelsContainer.push(new commonLabel({
				icon: labelIcon,
				text: countNumber,
				tooltip: toolTip
			}));
			if (voteType === VoteType.TYPE_LIKE_DISLIKE) {
				labelsContainer.push(new commonLabel({
					icon: "sap-icon://InoIcons/thumbsdown",
					text: this.getProperty('negativeVotes'),
					tooltip: this._oRB.getText('CTRL_IDEACARD_FLD_DISLIKE_LABEL', [this.getProperty('voteDislike')])
				}));
			}
			return labelsContainer;
		},

		_getVoteCount: function() {
			var voteCount = this.getAggregation('_voteCount');
			var labels = this._getVoteCountLabel();
			if (!voteCount) {
				voteCount = new FlexBox({
					items: labels,
					alignItems: "Start",
					justifyContent: "Start",
					alignContent: "Start"
				});
				this.setAggregation('_voteCount', voteCount);
			}
			return voteCount;
		},

		_flip: function() {
			var oFlipper = this._getFlipper(this);
			if (oFlipper) {
				this._bIsFlipped = !this._bIsFlipped;
				oFlipper.classList.toggle("flip");
				if (!jQuery(oFlipper).hasClass("flip")) {
					this._getFlipButton().focus();
				} else {
					this._getFlipButton("Back").focus();
				}
			}
		},

		_getFlipper: function(oControl) {
			var aFlipper = oControl.$().find(".sapInoIdeaCardFlipContainer");
			if (aFlipper && aFlipper.length > 0) {
				return aFlipper[0];
			}
			return undefined;
		},

		onAfterRendering: function() {
			if (Control.prototype.onAfterRendering) {
				Control.prototype.onAfterRendering.apply(this, arguments);
			}

			this.initTabIndex();

			this.setAccessibility();

			this._initTabs();

			var sStatusColor = this.getProperty("statusColor");
			if (sStatusColor && sStatusColor.length === 6) {
				sStatusColor = "#" + sStatusColor;
			} else {
				sStatusColor = "#333333";
			}
			if(this.getDomRef()){
			    $(this.getDomRef()).find('.sapInoNoImageStatusText').css("color",sStatusColor);
			}
		},

		setAccessibility: function() {
			var li = this.getParent();
			if (li) {
				li.attachBrowserEvent('focus', function(event) {
					var target = event.target;
					$(target).find('.ideaListFollow button').attr("tabindex", "0");
				});
				li.attachBrowserEvent('blur', function(event) {
					var target = event.target;
					var starVote = $(target).find('.starVote');
					$(target).find('.ideaListFollow button').attr('tabindex', '-1');
					if (starVote && starVote.length) {
						starVote.attr('tabindex', '-1');
					}
				});
			}
		},

		initTabIndex: function() {
			// required for accessibility => List tabbing
			this._getIdeaLink().$().attr("tabindex", "-1");
			this._getIdeaLink("Back").$().attr("tabindex", "-1");
			this._getFlipButton().$().attr("tabindex", "-1");
			this._getCommentButton().$().attr("tabindex", "-1");
			this._getFlipButton("Back").$().attr("tabindex", "-1");
			this._getCampaignLink().$().attr("tabindex", "-1");
			this._getCampaignLink("Back").$().attr("tabindex", "-1");
			this._getIdeaMoreLink().$().attr("tabindex", "-1");
			this._getIdeaSubmitter().$().attr("tabindex", "-1");

			this.getAggregation("votePlaceholder").$().attr('tabindex', '-1');
			this.getAggregation("votePlaceholder").$().find('.starVote, button').attr('tabindex', '-1');
			this.getAggregation("followButton").$().find('button').attr("tabindex", "-1");
			this.getAggregation("contributorButton").$().find('button').attr("tabindex", "-1");
		},

		renderer: function(oRM, oControl) {
			oRM.write("<div");
			oRM.writeControlData(oControl);
			oRM.addClass("sapInoIdeaCard");
			oRM.addClass("sapUiSizeCompact");
			oRM.writeClasses();
			oRM.write(">");

			oControl._renderContent(oRM, oControl);

			oRM.write("</div>");
		},

		_renderContent: function(oRM, oControl) {
			oRM.write("<div");
			oRM.addClass("sapInoIdeaCardFlipContainer sapInoIdeaCardFlipContainerNoImage");
			if (this._bIsFlipped) {
				oRM.addClass("flip");
			}

			oRM.writeClasses();
			oRM.write(">");

			oRM.write("<div");
			oRM.addClass("sapInoIdeaCardFlipper");
			oRM.writeClasses();
			oRM.write(">");

			oControl._renderFrontContent(oRM, oControl);
			oControl._renderBackContent(oRM, oControl);

			oRM.write("</div>");

			oRM.write("</div>");
		},

		/*
		 * Rendering the card front face
		 */
		_renderFrontContent: function(oRM, oControl) {
			oRM.write("<div");
			oRM.addClass("sapInoIdeaCardFront");
			oRM.writeClasses();
			oRM.write(">");

			oControl._renderTopRibbon(oRM, oControl);
			// oControl._renderImage(oRM, oControl);
			// oControl._renderTopPlaceholder(oRM, oControl);
			oControl._renderIdeaLink(oRM, oControl);
			oControl._renderTopDesciption(oRM, oControl);
			oControl._renderVotePlaceholder(oRM, oControl);
			oControl._renderVoteCount(oRM, oControl);
			oControl._renderBottomPlaceholder(oRM, oControl);
			oControl._renderIdeaNoticeIcon(oRM, oControl);
			oControl._renderBottomRibbon(oRM, oControl);
			//oControl._renderFollowButton(oRM, oControl);
			oRM.write("</div>");
		},

		/*
		 * Rendering the card front face
		 */
		_renderBackContent: function(oRM, oControl) {
			oRM.write("<div");
			oRM.addClass("sapInoIdeaCardBack sapInoIdeaCardBackNoImage");
			oRM.writeClasses();
			oRM.write(">");

			oControl._renderTopRibbon(oRM, oControl, true);
			oControl._renderIdeaLink(oRM, oControl, true);
			oControl._renderIdeaSubmitter(oRM, oControl);
			oControl._renderIdeaDescription(oRM, oControl);
			oControl._renderIdeaMoreLink(oRM, oControl);
			oControl._renderBottomRibbon(oRM, oControl, true);

			oRM.write("</div>");
		},

		_renderIdeaLink: function(oRM, oControl, bRenderBack) {
			oRM.write("<div");
			oRM.addClass("sapInoIdeaCardIdeaLink");
			oRM.writeClasses();
			oRM.write(">");

			oRM.write("<div");
			oRM.addClass("sapInoIdeaCardIdeaLinkTooltip");
			oRM.writeAttributeEscaped("title", oControl._oRB.getText("CTRL_IDEACARD_ALT_IDEA_TOOLTIP", [this.getProperty("ideaName")]));
			oRM.writeClasses();
			oRM.write(">");

			if (bRenderBack) {
				oRM.renderControl(oControl._getIdeaLink("Back"));
			} else {
				oRM.renderControl(oControl._getIdeaLink());
			}

			oRM.write("</div>");

			if (this.getProperty("isOpenForContributors")) {
				oRM.renderControl(new Icon({
					src: "sap-icon://InoIcons/shake_hands",
					tooltip: oControl._oRB.getText("CTRL_IDEACARD_ALT_OPEN_CONTRIBUTION_TOOLTIP")
				}));
			}

			oRM.write("</div>");
		},

		_renderVotePlaceholder: function(oRM, oControl) {
			oRM.write("<div");
			oRM.addClass("sapInoIdeaCardNoImageVotePlaceholder");
			oRM.writeClasses();
			oRM.write(">");
			// var oVoteDisplayPlaceholderControl = oControl.getAggregation("voteDisplayPlaceholder");
			// if (oVoteDisplayPlaceholderControl) {
			//     oRM.renderControl(oVoteDisplayPlaceholderControl);
			// }
			var oVotePlaceholderControl = oControl.getAggregation("votePlaceholder");
			if (oVotePlaceholderControl) {
				//oVotePlaceholderControl.addStyleClass("sapInoIdeaCardAccessibilityVote");
				//oVotePlaceholderControl.addStyleClass("sapInoIdeaCardNoImageVote");

				oVotePlaceholderControl.addStyleClass("sapInoIdeaCardNoImageVote");
				oRM.renderControl(oVotePlaceholderControl);
			}
			/*var oCommentDisplayPlaceholderControl = oControl.getAggregation("commentDisplayPlaceholder");
            if (oCommentDisplayPlaceholderControl) {
                oRM.renderControl(oCommentDisplayPlaceholderControl);
            }

            var oViewDisplayPlaceholderControl = oControl.getAggregation("viewDisplayPlaceholder");
            if (oViewDisplayPlaceholderControl) {
                oRM.renderControl(oViewDisplayPlaceholderControl);
            }*/
			//  var oAnonymousPlaceholderControl = oControl.getAggregation("anonymousDisplayPlaceholder");
			// if (oAnonymousPlaceholderControl) {
			//     oRM.renderControl(oAnonymousPlaceholderControl);
			// }

			oRM.write("</div>");
		},
		_renderVoteCount: function(oRM, oControl) {
			oRM.write("<div");
			oRM.addClass("sapInoIdeaCardNoImageVoteCount");
			oRM.writeClasses();
			oRM.write(">");
			oRM.renderControl(oControl._getVoteCount());
			oRM.write("</div>");
		},
		_renderTopDesciption: function(oRM, oControl) {
			oRM.write("<div");
			oRM.addClass("sapInoIdeaCardNoImageTopDes");
			oRM.writeClasses();
			oRM.write(">");
			oControl._renderTopInfoText(oRM, oControl);
			oRM.write("</div>");
		},
		_renderPhaseStatus: function(oRM, oControl) {
			var bRenderText = false;
			if (oControl.getProperty("phase") || oControl.getProperty("status")) {
				bRenderText = true;
			}
			oRM.write("<div>");
			oControl._renderInfoText(oRM, oControl, bRenderText);
			oRM.write("</div>");
		},
		_renderBottomPlaceholder: function(oRM, oControl) {
			oRM.write("<div");
			oRM.addClass("sapInoIdeaCardNoImageBottomPlaceholder");
			oRM.writeClasses();
			oRM.write(">");

			if (oControl.getProperty("isDraft")) {
				oControl._renderDraftLabel(oRM, oControl);
			} else {
				oControl._renderPhaseStatus(oRM, oControl);
			}

			oRM.write("</div>");
		},
		_renderIdeaNoticeIcon: function(oRM, oControl) {
            oRM.write("<div");
            oRM.addClass("sapInoIdeaNoticeIconPlaceholder");
            oRM.writeClasses();
            oRM.write(">");

            oRM.renderControl(oControl._getNoticeStatusIcon());
            oRM.renderControl(oControl._getNoticeCommentIcon());
            oRM.renderControl(oControl._getNoticeUpdateIcon());
            //oRM.renderControl(oControl._getNoticeCreateIcon());
            oRM.write("</div>");
        },
		// New Added for text
		_getPhase: function() {
			var oPhase = this.getAggregation("_phase");
			if (!oPhase) {
				oPhase = new FlexBox({
					items: [this._getPhaseLabel(), this._getPhaseText()],
					alignItems: "Start",
					justifyContent: "Start",
					alignContent: "Start"
				}); //.addStyleClass("sapInoProcessIndicatorPhase");
				this.setAggregation("_phase", oPhase);
			}
			return oPhase;
		},
		_getIdeaId: function() {
			var oIdeaId = this.getAggregation("_ideaId");
			if (!oIdeaId) {
				oIdeaId = new FlexBox({
					items: [this._getIdeaIdLabel(), this._getIdeaIdLink()],
					alignItems: "Start",
					justifyContent: "Start",
					alignContent: "Start"
				}).addStyleClass("sapInoNoImagesId");
				this.setAggregation("_ideaId", oIdeaId);
			}
			return oIdeaId;
		},
		_getResponsibility: function() {
			var oRespValue = this.getAggregation("_respValue");
			if (!oRespValue) {
				oRespValue = new FlexBox({
					items: [this._getRespValueLabel(), this._getRespValueText()],
					alignItems: "Start",
					justifyContent: "Start",
					alignContent: "Start"
				}).addStyleClass("sapInoNoImageResp");
				this.setAggregation("_respValue", oRespValue);
			}
			return oRespValue;
		},
		_getStatus: function() {
			var oStatus = this.getAggregation("_status");
			if (!oStatus) {
				oStatus = new FlexBox({
					items: [this._getStatusLabel(), this._getStatusText()],
					alignItems: "Start",
					justifyContent: "Start",
					alignContent: "Start"
				}).addStyleClass("sapInoNoImageStatus");
				this.setAggregation("_status", oStatus);
			}
			return oStatus;
		},
		_getStatusReason: function() {
			var oStatusReason = this.getAggregation("_statusReason");
			if (!oStatusReason) {
				oStatusReason = new FlexBox({
					items: [this._getStatusReasonLabel(), this._getStatusReasonText()],
					alignItems: "Start",
					justifyContent: "Start",
					alignContent: "Start"
				}).addStyleClass("sapInoNoImageStatus");
				this.setAggregation("_statusReason", oStatusReason);
			}
			return oStatusReason;
		},
		_getPhaseLabel: function() {
			var sPhase = this.getProperty("phase");
			if (this.getProperty("isDraft")) {
				sPhase = "";
			}
			return new Label({
				text: this._oRB.getText("CTRL_PROCESSINDICATOR_FLD_PHASE_LABEL"),
				tooltip: this._oRB.getText("CTRL_PROCESSINDICATOR_ALT_PHASE_TOOLTIP", sPhase)
			}).addStyleClass("sapInoNoImagePhaseLabel");
		},

		_getPhaseText: function() {
			var sPhase = this.getProperty("phase");
			if (this.getProperty("isDraft")) {
				sPhase = "";
			}
			return new Text({
				text: sPhase,
				tooltip: this._oRB.getText("CTRL_PROCESSINDICATOR_ALT_PHASE_TOOLTIP", sPhase)
			}); //.addStyleClass("sapInoProcessIndicatorPhaseText");
		},

		_getStatusLabel: function() {
			var sStatus = this.getProperty("status");
			return new Label({
				text: this._oRB.getText("CTRL_PROCESSINDICATOR_FLD_STATUS_LABEL"),
				tooltip: this._oRB.getText("CTRL_PROCESSINDICATOR_ALT_STATUS_TOOLTIP", sStatus)
			}).addStyleClass("sapInoNoImageStatusLabel");
		},

		_getStatusText: function() {
			var sStatus = this.getProperty("status");
			return new Text({
				text: sStatus,
				tooltip: this._oRB.getText("CTRL_PROCESSINDICATOR_ALT_STATUS_TOOLTIP", sStatus)
			}).addStyleClass("sapInoNoImageStatusText"); //.addStyleClass("sapInoProcessIndicatorStatusText");
		},
		_getStatusReasonLabel: function() {
			var sStatusReason = this.getProperty("statusReason");
			return new Label({
				text: "Reason:", //this._oRB.getText("CTRL_PROCESSINDICATOR_FLD_STATUS_LABEL"),
				tooltip: this._oRB.getText("CTRL_PROCESSINDICATOR_ALT_STATUS_TOOLTIP", sStatusReason)
			}).addStyleClass("sapInoNoImageStatusLabel");
		},

		_getStatusReasonText: function() {
			var sStatusReason = this.getProperty("statusReason");
			return new Text({
				text: sStatusReason,
				tooltip: this._oRB.getText("CTRL_PROCESSINDICATOR_ALT_STATUS_TOOLTIP", sStatusReason)
			}); //.addStyleClass("sapInoProcessIndicatorStatusText");
		},
		_getIdeaIdLabel: function() {
			var sId = this.getProperty("ideaId");
			return new Label({
				text: this._oRB.getText("CTRL_PROCESSINDICATOR_FLD_IDEA_LABEL"),
				tooltip: this._oRB.getText("CTRL_PROCESSINDICATOR_ALT_IDEA_TOOLTIP", sId)
			}).addStyleClass("sapInoNoImageStatusLabel");
		},

		_getIdeaIdLink: function() {
			var that = this;
			var sId = this.getProperty("ideaId");
			// return new Text({
			//     text : sId,
			//     tooltip : this._oRB.getText("CTRL_PROCESSINDICATOR_ALT_STATUS_TOOLTIP", sId)
			// }).addStyleClass("sapInoProcessIndicatorStatusText");
			var sAggregationName = "_ideaIdLink";
			return new Link({
				id: this.getId() + sAggregationName,
				href: this.getProperty("ideaHref"),
				tooltip: this._oRB.getText("CTRL_PROCESSINDICATOR_ALT_IDEA_TOOLTIP", sId),
				press: function(oEvent) {
					// prevent href
					oEvent.preventDefault();

					that.fireOpenIdea({
						ideaId: that.getProperty("ideaId")
					});
				} //,
				//text: sIdeaName
			}).setText(sId).addStyleClass("sapInoIdeaCardAccessibilityIdeaLink");

		},
		_getRespValueLabel: function() {
			var sRespValue = this.getProperty("respValue");
			return new Label({
				text: this._oRB.getText("CTRL_PROCESSINDICATOR_FLD_RESP_LABEL"),
				tooltip: this._oRB.getText("CTRL_PROCESSINDICATOR_ALT_RESP_TOOLTIP", sRespValue)
			}).addStyleClass("sapInoNoImageStatusLabel");
		},

		_getRespValueText: function() {
			var sRespValue = this.getProperty("respValue");
			return new Text({
				text: sRespValue,
				tooltip: this._oRB.getText("CTRL_PROCESSINDICATOR_ALT_RESP_TOOLTIP", sRespValue)
			}); //.addStyleClass("sapInoProcessIndicatorStatusText");
		},
		_renderTopInfoText: function(oRm, oControl) {
			oRm.renderControl(oControl._getIdeaId());
			oRm.renderControl(oControl._getResponsibility());
		},
		_renderInfoText: function(oRm, oControl, bRenderText) {
			if (bRenderText && !oControl.getProperty("isDraft") && !!this.getProperty("phase")) {
				oRm.renderControl(oControl._getPhase());
			}

			if ((bRenderText || oControl.getProperty("isDraft")) && !!this.getProperty("status")) {
				oRm.renderControl(oControl._getStatus());
			}
			// if (bRenderText || oControl.getProperty("isDraft")) {
			//     oRm.renderControl(oControl._getStatusReason());
			// }            
		},
		// New added for text
		_renderFollowButton: function(oRM, oControl) {
			oRM.write("<div");
			oRM.write(">");

			var oFollowButton = oControl.getAggregation("followButton");

			oRM.renderControl(oFollowButton);

			oRM.write("</div>");
		},

		_renderContributorButton: function(oRM, oControl) {
			var contributorButton = oControl.getAggregation("contributorButton");
			contributorButton.addStyleClass("sapInoIdeaCardBottomRibbonContent sapInoIdeaCardAccessibilityContributorButton");
			oRM.renderControl(contributorButton);
		},

		_renderDraftLabel: function(oRM, oControl) {
			oRM.write("<div");
			oRM.addClass("sapInoIdeaCardDraftLabel");
			oRM.writeClasses();
			oRM.write(">");
			var oDraftLabel = oControl._getDraftLabel();
			oRM.renderControl(oDraftLabel);
			oRM.write("</div>");
		},

		_renderIdeaSubmitter: function(oRM, oControl) {
			oRM.write("<div");
			oRM.addClass("sapInoIdeaCardIdeaSubmitter");
			oRM.writeClasses();
			oRM.write(">");
			var oIdeaSubmitter = oControl._getIdeaSubmitter();
			oRM.renderControl(oIdeaSubmitter);
			oRM.write("</div>");
		},

		_renderIdeaDescription: function(oRM, oControl) {
			oRM.write("<div");
			oRM.addClass("sapInoIdeaCardIdeaDescription");
			oRM.writeClasses();
			oRM.write(">");
			var oIdeaDescription = oControl._getIdeaDescription();
			oRM.renderControl(oIdeaDescription);
			oRM.write("</div>");
		},

		_renderIdeaMoreLink: function(oRM, oControl) {
			oRM.write("<div");
			oRM.addClass("sapInoIdeaCardIdeaMoreLink");
			oRM.writeClasses();
			oRM.write(">");

			oRM.write("<div");
			oRM.addClass("sapInoIdeaCardIdeaMoreLinkTooltip");
			oRM.writeAttributeEscaped("title", oControl._oRB.getText("CTRL_IDEACARD_ALT_IDEA_TOOLTIP", [this.getProperty("ideaName")]));
			oRM.writeClasses();
			oRM.write(">");

			var oIdeaMoreLink = oControl._getIdeaMoreLink();
			oRM.renderControl(oIdeaMoreLink);
			oRM.write("</div>");

			oRM.write("</div>");
		},

		_renderBottomRibbon: function(oRM, oControl, bRenderBack) {
			oRM.write("<div");
			oRM.addClass("sapInoIdeaCardRibbon");
			oRM.addClass("sapInoIdeaCardBottomRibbon");
			oRM.writeClasses();
			oRM.write(">");

			if (!bRenderBack) {
				// var oVotePlaceholderControl = oControl.getAggregation("votePlaceholder");
				// if (oVotePlaceholderControl) {
				//     oVotePlaceholderControl.addStyleClass("sapInoIdeaCardAccessibilityVote");
				//     oVotePlaceholderControl.addStyleClass("sapInoIdeaCardBottomRibbonContent");
				//     oRM.renderControl(oVotePlaceholderControl);
				// }
				var oFollowButton = oControl.getAggregation("followButton");
				if (oFollowButton) {
					oFollowButton.addStyleClass("sapInoIdeaCardAccessibilityVote");
					oFollowButton.addStyleClass("sapInoIdeaCardBottomRibbonContent");
					oRM.renderControl(oFollowButton);
				}
				oRM.renderControl(oControl._getCommentButton());
				oControl._renderContributorButton(oRM, oControl);
			}

			oRM.write("<div");
			oRM.addClass("sapInoIdeaCardBottomRibbonContent");
			oRM.writeClasses();
			oRM.write(">");

			if (bRenderBack) {
				oRM.renderControl(oControl._getFlipButton("Back"));
			} else {
				oRM.renderControl(oControl._getFlipButton());
			}
			oRM.write("</div>");
			oRM.renderControl(oControl._getIdeaReadButton());
			oRM.write("</div>");
		},

		_renderTopRibbon: function(oRM, oControl, bRenderBack) {
			oRM.write("<div");
			oRM.addClass("sapInoIdeaCardRibbon sapInoIdeaCardTopRibbon");
			oRM.writeClasses();
			var sCampaignColor = oControl.getProperty("color");
			if (sCampaignColor && sCampaignColor.length === 7) {
				oRM.writeAttributeEscaped("style", "background-color: " + sCampaignColor);
			}
			oRM.write(">");

			// this is the text that is ALWAYS read by the screenreader, this is why we adapt it
			oRM.write("<span");
			oRM.addClass("sapInoIdeaCardAccessibilityText");
			oRM.addClass("sapUiInvisibleText");
			oRM.writeAttributeEscaped("title", this._oRB.getText("CTRL_IDEACARD_ALT_ACCESSIBILITY_TEXT_IDEA_LINK", [this.getProperty("ideaName")]));
			oRM.writeClasses();
			oRM.write("></span>");

			oRM.write("<div");
			oRM.addClass("sapInoIdeaCardCampaignLink");
			if (!sCampaignColor) {
				sCampaignColor = "#FFFFFF";
			}
			oRM.addClass("sapInoIdeaCardCampaignTitle" + ColorSupport.calculateTitleTextColor(sCampaignColor.substr(1, 2), sCampaignColor.substr(
				3, 2), sCampaignColor.substr(5, 2)));
			oRM.writeClasses();
			oRM.write(">");

			oRM.write("<div");
			oRM.addClass("sapInoIdeaCardCampaignLinkTooltip");
			oRM.writeAttributeEscaped("title", oControl._oRB.getText("CTRL_CARD_ALT_CAMPAIGN_TOOLTIP"));
			oRM.writeClasses();
			oRM.write(">");

			if (bRenderBack) {
				oRM.renderControl(oControl._getCampaignLink("Back"));
			} else {
				oRM.renderControl(oControl._getCampaignLink());
			}

			oRM.write("</div>");

			oRM.write("</div>");
			oRM.write("</div>");
		},

		ontouchstart: function(oEvent) {
			oEvent.setMarked();
		},

		ontap: function(oEvent) {
			this.firePress();
		},

		/**
		 * Accessibility methods
		 */
		getFocusDomRef: function() {
			if (this._bIsFlipped) {
				return this._getIdeaLink("Back").$();
			}
			return this._getIdeaLink().$();
		},

		onfocusin: function(oEvent) {
			if (!this._$AccessibilityText) {
				this._$AccessibilityText = this.$().find(".sapInoIdeaCardAccessibilityText");
			}

			if (!oEvent || !oEvent.target || !oEvent.target.className) {
				this._$AccessibilityText.attr("title", "");
				return;
			}

			if (oEvent.target.className.indexOf("sapInoIdeaCardAccessibilityCampaignLink") !== -1) {
				this._$AccessibilityText.attr("title", this._oRB.getText("CTRL_IDEACARD_ALT_ACCESSIBILITY_TEXT_CAMPAIGN_LINK", [this.getProperty(
					"campaignName")]));
			} else if (oEvent.target.className.indexOf("sapInoIdeaCardAccessibilityFlipButtonBack") !== -1) {
				this._$AccessibilityText.attr("title", this._oRB.getText("CTRL_IDEACARD_ALT_ACCESSIBILITY_TEXT_FLIP_BACK"));
			} else if (oEvent.target.className.indexOf("sapInoIdeaCardAccessibilityFlipButton") !== -1) {
				this._$AccessibilityText.attr("title", this._oRB.getText("CTRL_IDEACARD_ALT_ACCESSIBILITY_TEXT_FLIP"));
			} else if (oEvent.target.className.indexOf("sapInoIdeaCardAccessibilitySubmitter") !== -1) {
				this._$AccessibilityText.attr("title", this._oRB.getText("CTRL_IDEACARD_ALT_ACCESSIBILITY_TEXT_SUBMITTER"));
			} else if (oEvent.target.className.indexOf("sapInoIdeaCardAccessibilityIdeaLink") !== -1) {
				this._$AccessibilityText.attr("title", this._oRB.getText("CTRL_IDEACARD_ALT_ACCESSIBILITY_TEXT_IDEA_LINK", [this.getProperty(
					"ideaName")]));
			} else if (oEvent.target.className.indexOf("sapInoIdeaCardAccessibilityMoreButton") !== -1) {
				this._$AccessibilityText.attr("title", this._oRB.getText("CTRL_IDEACARD_ALT_ACCESSIBILITY_TEXT_MORE", [this.getProperty("ideaName")]));
			} else if (oEvent.target.className.indexOf("sapInoIdeaCardAccessibilityVote") !== -1) {
				this._$AccessibilityText.attr("title", this._oRB.getText("CTRL_IDEACARD_ALT_ACCESSIBILITY_TEXT_VOTE", [this.getProperty("ideaName")]));
			} else if (oEvent.target.className.indexOf('sapInoIdeaCardAccessibilityCommentButton') !== -1) {
				this._$AccessibilityText.attr("title", this._oRB.getText("CTRL_IDEACARD_ALT_ACCESSIBILITY_TEXT_COMMENT", [this.getProperty(
					"ideaName")]));
			} else if (oEvent.target.className.indexOf('sapInoIdeaCardAccessibilityContributorButton') !== -1) {
				this._$AccessibilityText.attr("title", this._oRB.getText("CTRL_IDEACARD_ALT_ACCESSIBILITY_TEXT_CONTRIBUTOR", [this.getProperty(
					"ideaName")]));
			} else {
				// this may be one of the different voting controls, where the focus target differs from the control itself
				var $Vote = jQuery(oEvent.target).closest(".sapInoIdeaCardAccessibilityVote");
				if ($Vote && $Vote.length > 0) {
					this._$AccessibilityText.attr("title", this._oRB.getText("CTRL_IDEACARD_ALT_ACCESSIBILITY_TEXT_VOTE", [this.getProperty("ideaName")]));
				}
			}
		},

		_initTabs: function() {
			var oFlipButton = this._getFlipButton();
			var oBackFlipButton = this._getFlipButton("Back");
			oFlipButton.addStyleClass("sapInoIdeaCardFlipButton");
			oBackFlipButton.addStyleClass("sapInoIdeaCardFlipButton");

			var oFrontVote = this.getAggregation("votePlaceholder");
			var oFrontFollow = this.getAggregation("followButton");
			var oFrontContributor = this.getAggregation("contributorButton");

			this._aFrontTabs = [];
			this._aFrontTabs.push(this._getCampaignLink().$()[0].id);
			this._aFrontTabs.push(this._getIdeaLink().$()[0].id);
			if (oFrontVote.getEnabled()) {
				var $FrontVote = oFrontVote.$().find(".starVote, button");
				if ($FrontVote && $FrontVote.length > 0) {
					this._aFrontTabs.push($FrontVote[0].id);
					for (var oFrontNum = 1; oFrontNum < $FrontVote.length; oFrontNum++) {
						this._aFrontTabs.push($FrontVote[oFrontNum].id);
					}
				}
			}
			if (oFrontFollow.getEnabled()) {
				var $FrontFollow = oFrontFollow.$().find("button");
				if ($FrontFollow && $FrontFollow.length) {
					this._aFrontTabs.push($FrontFollow[0].id);
				}
			}

			if (oFrontContributor.getEnabled()) {
				var $contributorButton = oFrontContributor.$().find('button');
				if ($contributorButton && $contributorButton.length) {
					this._aFrontTabs.push($contributorButton[0].id);
				}
			}
			this._aFrontTabs.push(this._getFlipButton().$()[0].id);
			this._aFrontTabs.push(this._getCommentButton().$()[0].id);

			this._aBackTabs = [];
			this._aBackTabs.push(this._getCampaignLink("Back").$()[0].id);
			this._aBackTabs.push(this._getIdeaLink("Back").$()[0].id);
			this._aBackTabs.push(this._getIdeaSubmitter().$()[0].id);
			this._aBackTabs.push(sanitizeHTML(this._getIdeaMoreLink().$()[0].id));
			this._aBackTabs.push(this._getFlipButton("Back").$()[0].id);
		},

		_getTabs: function() {
			if (this._bIsFlipped) {
				return this._aBackTabs;
			}
			return this._aFrontTabs;
		},

		_defaultOnKeyDown: function(oEvent) {
			if (Control.prototype.onkeydown) {
				Control.prototype.onkeydown.apply(this, arguments);
			}
		},

		onkeydown: function(oEvent) {
			var aTabs = this._getTabs();
			var fnUpdate = this._incr;

			if (oEvent.shiftKey || oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_UP || oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_LEFT) {
				fnUpdate = this._decr;
			}

			if (oEvent.keyCode === jQuery.sap.KeyCodes.ESCAPE) {
				this.getParent().focus();
			} else if (oEvent.keyCode === jQuery.sap.KeyCodes.TAB ||
				oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_DOWN ||
				oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_RIGHT ||
				oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_UP ||
				oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_LEFT) {
				var $Current = jQuery(":focus");
				var iIdx = -1;
				if ($Current && $Current.length > 0) {
					iIdx = aTabs.indexOf($Current[0].id);
					if (iIdx !== -1) {
						iIdx = fnUpdate(iIdx, aTabs.length - 1);
						this._focus(jQuery("#" + aTabs[iIdx]));

						oEvent.preventDefault();
						oEvent.stopPropagation();
					} else {
						this.getParent().focus();
					}
				} else {
					this.getParent().focus();
				}
			} else {
				this._defaultOnKeyDown(oEvent);
			}
		},

		_incr: function(iVal, iMax) {
			iVal++;
			if (iVal > iMax) {
				return 0;
			}
			return iVal;
		},

		_decr: function(iVal, iMax) {
			iVal--;
			if (iVal < 0) {
				return iMax;
			}
			return iVal;
		},

		_focus: function(oElement) {
			if (jQuery.type(oElement.focus) === "function") {
				setTimeout(function() {
					oElement.focus();
				}, 0);
			}
		}
		/**
		 * Accessibility methods end here
		 */
	});

	IdeaCardNoImage.prototype.setIdeaDescription = function(sValue) {
		this.setProperty("ideaDescription", sValue);
		this._getIdeaDescription().setContent("<span>" + (sValue || "") + "</span>");
	};

	IdeaCardNoImage.prototype.setIdeaName = function(sValue) {
		this.setProperty("ideaName", sValue);
		var oIdeaLink = this._getIdeaLink();
		if (oIdeaLink) {
			oIdeaLink.setText(sValue);
		}
		oIdeaLink = this._getIdeaLink("Back");
		if (oIdeaLink) {
			oIdeaLink.setText(sValue);
		}
	};

	IdeaCardNoImage.prototype.setIdeaSubmittedAt = function(oValue) {
		this.setProperty("ideaSubmittedAt", oValue);
		this._getIdeaSubmitter().setText(this._getIdeaSubmitterText());
	};

	IdeaCardNoImage.prototype.setIdeaCreatedAt = function(oValue) {
		this.setProperty("ideaCreatedAt", oValue);
		this._getIdeaSubmitter().setText(this._getIdeaSubmitterText());
	};

	IdeaCardNoImage.prototype.setIdeaSubmitter = function(oValue) {
		this.setProperty("ideaSubmitter", oValue);
		this._getIdeaSubmitter().setText(this._getIdeaSubmitterText());
	};

	return IdeaCardNoImage;
});

}; // end of sap/ino/controls/IdeaCardNoImage.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.IdentityActionCard') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.IdentityActionCard'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToggleButton'); // unlisted dependency retained
jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/IdentityActionCard",[
    "sap/ui/core/Control",
    "sap/ino/controls/IdentityCard",
	"sap/m/Button",
	"sap/m/Text",
	"sap/m/ToggleButton",
	"sap/m/ButtonType"
], function (Control,IdentityCard, Button, Text, ToggleButton, ButtonType) {
	"use strict";
	
	/**
     * 
     * A control that displays a User / Identity
     * 
     * <ul><li>Properties
     *   <ul>
     *     <li></li>
     *     <li></li>
     *     <li></li>
     *     <li></li>
     *   </ul></li>
     * <li>Aggregations
     *   <ul>
     *   </ul></li>
     * <li>Events
     *  <ul>
     *   </ul></li>
     * </ul>
     */
     
    var IdentityActionCard = IdentityCard.extend("sap.ino.controls.IdentityActionCard", {
        metadata: {
            properties: {
                userRole: {
                    type: "string"
                },
                actionable: {
                    type: "boolean"
                },
                mailable: {
                    type: "boolean"
                },
                pinnable: {
                    type: "boolean"
                },
                isAdd: {
                    type: "boolean"
                },
                isPinned: {
                    type: "boolean"
                }
            },
            events: {
                pinPressed: {},
                addRemovePressed: {},
                mailPressed: {}
            }
        },
        
        init: function() {
            IdentityCard.prototype.init.call(this, arguments);
            
            this._oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ino.controls");
            
            this.addStyleClass("sapInoIdentityBox sapUiTinyMarginBeginEnd sapUiTinyMarginTopBottom sapThemeBaseBG sapUiResponsiveContentPadding");
            
            this.addContent(new Text({text: "", visible: false, wrapping:true}));
            this.addAction(new ToggleButton({
                type: ButtonType.Transparent, icon: "sap-icon://pushpin-off", 
                visible: false, 
                press: this._firePinPressed.bind(this)
            }).addStyleClass("sapInoPinBtn"));
            this.addAction(new Button({
                type: ButtonType.Transparent, icon: "sap-icon://add",
                visible: false, press: 
                this._fireAddRemovePressed.bind(this)
            }).addStyleClass("sapInoIdentityAddRemoveBtn"));
            this.addAction(new Button({
                type: ButtonType.Transparent, icon: "sap-icon://email",
                visible: false, press: 
                this._fireMailPressed.bind(this)
            }));
        },
        
        setUserRole: function(sRole) {
            var oRoleText = this.getContent()[0];
            oRoleText.setText(sRole);
            oRoleText.setVisible(!!sRole);
            this.setProperty("userRole", sRole);
            return this;
        },
        
        setActionable: function(bIsActionable) {
            var oActionBtn = this.getActions()[1];
            oActionBtn.setVisible(bIsActionable);
            this.setProperty("actionable", bIsActionable);
            return this;
        },
        
        setMailable: function(bIsMailable) {
            var oActionBtn = this.getActions()[2];
            oActionBtn.setVisible(bIsMailable);
            this.setProperty("mailable", bIsMailable);
            return this;
        },
        
        setIsAdd: function(bIsAdd) {
            var oActionBtn = this.getActions()[1];
            oActionBtn.setIcon(bIsAdd ? "sap-icon://add" : "sap-icon://decline");
            oActionBtn.setTooltip(this._oRB.getText(bIsAdd ? "CTRL_IDENTITY_CARD_BTN_TOOLTIP_ADD" : "CTRL_IDENTITY_CARD_BTN_TOOLTIP_REMOVE"));
            this.setProperty("isAdd", bIsAdd);
            return this;
        },
        
        setPinnable: function(bIsPinnable) {
            var oPinBtn = this.getActions()[0];
            oPinBtn.setVisible(bIsPinnable);
            this.setProperty("pinnable", bIsPinnable);
            return this;
        },
        
        setIsPinned: function(bIsPinned) {
            var oPinBtn = this.getActions()[0];
            oPinBtn.setTooltip(this._oRB.getText(bIsPinned ? "CTRL_CLIPBOARD_BTN_TOOLTIP_PERSON_REMOVE" : "CTRL_CLIPBOARD_BTN_TOOLTIP_PERSON_ADD"));
            oPinBtn.setPressed(bIsPinned);
            this.setProperty("isPinned", bIsPinned);
            return this;
        },
        
        _firePinPressed: function(oEvent) {
            this.firePinPressed({
                identityId: this.getIdentityId(), 
                userName: this.getUserName(), 
                pinned: oEvent.getSource().getPressed()
            });
        }, 
        
        _fireAddRemovePressed: function(oEvent) {
            this.fireAddRemovePressed({
                identityId: this.getIdentityId(),
                userName: this.getUserName(),
                action: this.getIsAdd() ? "add" : "remove"
            });
        },
        
        _fireMailPressed: function(oEvent) {
            this.fireMailPressed({
                identityId: this.getIdentityId(),
                userName: this.getUserName()
            });
        }, 
        
        renderer : "sap.ino.controls.IdentityCardRenderer",
        

        onAfterRendering : function() {
            IdentityCard.prototype.onAfterRendering.call(this, arguments);
            this._initTabs();
        },
        
        /**
		 * @private
		 */
		_initTabs: function() {
			this._tabs = [];
			var that = this;
			if(this.getAggregation("_nameLink")){
			    this._tabs.push(this.getAggregation("_nameLink").$()[0].id);
			}
			this.getActions().forEach(function(item){
			    if(item.$().length > 0){
			        that._tabs.push(item.$()[0].id);
			    }
			});
		},
		/**
		 * @private
		 */
		_getTabs: function() {
			return this._tabs;
		},

		onkeydown: function(oEvent) {
			var aTabs = this._getTabs();
			var bForward = true;
			var fnUpdate = this._incr;

			if (oEvent.shiftKey || oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_UP || oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_LEFT) {
				fnUpdate = this._decr;
				bForward = false;
			}
	   //     //jump out from list		
    //         if(oEvent.shiftKey || oEvent.keyCode === jQuery.sap.KeyCodes.TAB){
    //             this.getParent().getParent().focus();
    //             oEvent.preventDefault();
				// oEvent.stopPropagation();
    //         }			

			if (oEvent.keyCode === jQuery.sap.KeyCodes.ESCAPE) {
				this.getParent().focus();
			} else if (oEvent.keyCode === jQuery.sap.KeyCodes.TAB ||
				oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_DOWN ||
				oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_RIGHT ||
				oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_UP ||
				oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_LEFT) {
				var iIdx = -1;
				if (document.activeElement) {
					iIdx = aTabs.indexOf(document.activeElement.id);
					if (iIdx === -1){
					    return;
					}
					if ( ( bForward && iIdx < aTabs.length - 1) || (!bForward && iIdx > 0 )){
						iIdx = fnUpdate(iIdx, aTabs.length - 1);
						this._focus(jQuery("#" + aTabs[iIdx]));
						oEvent.preventDefault();
						oEvent.stopPropagation();
					}
				} 
			}
		},

		/**
		 * @private
		 */
		_incr: function(iVal, iMax) {
			iVal++;
			if (iVal > iMax) {
				return 0;
			}
			return iVal;
		},

		/**
		 * @private
		 */
		_decr: function(iVal, iMax) {
			iVal--;
			if (iVal < 0) {
				return iMax;
			}
			return iVal;
		},

		/**
		 * @private
		 */
		_focus: function(oElement) {
			if (jQuery.type(oElement.focus) === "function") {
				setTimeout(function() {
					oElement.focus();
				}, 0);
			}
		}
        
    });
    
	return IdentityActionCard;
});

}; // end of sap/ino/controls/IdentityActionCard.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.Image') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.Image'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.Image'); // unlisted dependency retained
jQuery.sap.require('sap.m.ImageRenderer'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/Image",[
	"sap/ino/controls/util/ColorSupport",
	"sap/m/Image",
	"sap/m/ImageRenderer"
], function (ColorSupport, Image, ImageRenderer) {
	"use strict";
	
	/**
     * 
     * An Image control that shows an image or writes the object title in a boxed area.
     * 
     * <ul>
     * <li>Properties
     * <ul>
     * <li>foregroundColor: foreground color used for rendering the text if no src property is provided</li>
     * <li>objectId: id of the object</li>
     * <li>objectName: The object name.
     * This text is written in the box if no src properti is specified.</li>
     * <li>src: The URL of the object image</li>
     * </ul>
     * </li>
     * </ul>
     */
	var InoImage =  Image.extend("sap.ino.controls.Image", {
	    metadata: {
            properties : {
                "foregroundColor" : {
                    type : "sap.ui.core.CSSColor"
                },
                "objectId" : {
                    type : "int"
                },
                "objectName" : {
                    type : "string"
                },
                "imageAlt": {
                    type : "string"
                },
                "disableImage": {
				    type: 'boolean'
				}
            },
            aggregations: {
                "followButton": {
                    type: "sap.ui.core.Control",
                    multiple: false
                }
            },
            events : {
                press : {
                    parameters : {
                        objectId : {type: "int"}
                    }
                }
            }
        },
        
        init : function () {
            this._oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ino.controls");
		},

        renderDisableImage: function(oRM, oControl){
            oRM.write("<div");
            oRM.writeControlData(oControl);
            oRM.addClass("sapInoImage sapInoImageTextContainer");
            if (oControl.hasListeners("press")) {
                oRM.addClass("sapInoImageTextContainerNav");
            }
            
            var sSizeAttrs = "";
            if (oControl.getProperty("width")) {
                sSizeAttrs = "width:" + oControl.getProperty("width") + ";";
            }
            if (oControl.getProperty("height")) {
                sSizeAttrs = sSizeAttrs + "height:" + oControl.getProperty("height") + ";";
            }
            if (sSizeAttrs) {
                oRM.writeAttributeEscaped("style", sSizeAttrs);
            }

            oRM.writeClasses();
            oRM.write(">");

            oRM.write("<div");
            oRM.addClass("sapInoImageDescription");
            var sForegroundColor = oControl.getProperty("foregroundColor");

            if (sForegroundColor && sForegroundColor.length === 7) {
                oRM.writeAttributeEscaped("style", "color: " + 
                                            ColorSupport.calculateMediaTextColor(
                                                sForegroundColor.substr(1, 2), 
                                                sForegroundColor.substr(3, 2), 
                                                sForegroundColor.substr(5, 2)
                                            ) + "; background-color: " + sForegroundColor
                );
            }
            oRM.writeClasses();
            if (oControl.hasListeners("press")) {
                if (oControl.getTooltip_Text()) {
                    oRM.writeAttributeEscaped("title",  oControl.getTooltip_Text());
                }
            }
            oRM.write(">");

            var imageAlt = oControl.getProperty("imageAlt");
            if(imageAlt && imageAlt.length > 100){
                imageAlt = imageAlt.slice(0, 99) + '...';
            }
            
            if (imageAlt) {
                oRM.writeEscaped(imageAlt);
            }

            oRM.write("</div>");
            
            oControl._renderFollowButton(oRM, oControl);
            
            oRM.write("</div>");
        },

        renderImage: function(oRM, oControl){
            oRM.write("<div>");
	        oControl._renderFollowButton(oRM, oControl);
            ImageRenderer.render.apply(this, arguments);
            oRM.write("</div>");
        },

        renderDefault: function(oRM, oControl){
            oRM.write("<div");
            oRM.writeControlData(oControl);
            oRM.addClass("sapInoImage sapInoImageTextContainer");
            if (oControl.hasListeners("press")) {
                oRM.addClass("sapInoImageTextContainerNav");
            }
            
            var sSizeAttrs = "";
            if (oControl.getProperty("width")) {
                sSizeAttrs = "width:" + oControl.getProperty("width") + ";";
            }
            if (oControl.getProperty("height")) {
                sSizeAttrs = sSizeAttrs + "height:" + oControl.getProperty("height") + ";";
            }
            if (sSizeAttrs) {
                oRM.writeAttributeEscaped("style", sSizeAttrs);
            }

            oRM.writeClasses();
            oRM.write(">");

            oRM.write("<div");
            oRM.addClass("sapInoImageDefaultText");
            var sForegroundColor = oControl.getProperty("foregroundColor");

            if (sForegroundColor && sForegroundColor.length === 7) {
                oRM.writeAttributeEscaped("style", "opacity: 0.4; color: " + 
                                            ColorSupport.calculateMediaTextColor(
                                                sForegroundColor.substr(1, 2), 
                                                sForegroundColor.substr(3, 2), 
                                                sForegroundColor.substr(5, 2)
                                            ) + "; background-color: " + sForegroundColor
                );
            }
            oRM.writeClasses();
            if (oControl.hasListeners("press")) {
                if (oControl.getTooltip_Text()) {
                    oRM.writeAttributeEscaped("title",  oControl.getTooltip_Text());
                }
            }
            oRM.write(">");

            var sObjectName = oControl.getProperty("objectName");
            if (sObjectName) {
                oRM.writeEscaped(sObjectName);
            }

            oRM.write("</div>");
            
            oControl._renderFollowButton(oRM, oControl);
            
            oRM.write("</div>");
        },

		renderer : function(oRM, oControl) {
		    var disableImage = oControl.getProperty('disableImage');
            var imageSrc = oControl.getProperty("src");
            if (disableImage){
                return oControl.renderDisableImage(oRM, oControl);
            }

		    if (!imageSrc) {
		        return oControl.renderDefault(oRM, oControl);    
            } 
            
            return oControl.renderImage(oRM, oControl);
		},
		
		_renderFollowButton: function(oRM, oControl){
    
            var oFollowButton = oControl.getAggregation("followButton");
            
            oRM.renderControl(oFollowButton);
            
        },
		
		onAfterRendering : function() {
		    var $this = jQuery(this.getDomRef());
		    $this.addClass("sapInoImage");
		    if ($this.is("img")) {
		        $this.addClass("sapInoImageMargins");
		        $this.attr("tabindex", "-1");
		    } else if (this.getWidth()) {
		        var parts = this.getWidth().match(/^([+-]?(?:\d+|\d*\.\d+))([a-z]*|%)$/);
		        if (parts && parts[1]) {
		            var iPrecision = (parts[2] === "px") ? 0 : 2;
		            var sFS = "" + (parts[1] * 0.37).toFixed(iPrecision) + parts[2];
    		        $this.children(".sapInoImageText").css("font-size", sFS);
		        }
		    }
        }
		
	});
	
	InoImage.prototype.setSrc = function (oValue) {
        this.setProperty("src", oValue);
        //this._getLabel().setText(oValue);
    };
	
	return InoImage;
});
}; // end of sap/ino/controls/Image.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.Vote') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.Vote'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
jQuery.sap.require('sap.m.HBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.RatingIndicator'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToggleButton'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/Vote",[
    "sap/m/ButtonType",
    "sap/ui/core/Control",
    "sap/ui/core/IconPool",
    "sap/m/HBox",
    "sap/m/RatingIndicator",
    "sap/m/ToggleButton",
    "sap/ino/controls/VoteType"
], function (ButtonType,
             Control,
             IconPool,
             HBox,
             RatingIndicator,
             ToggleButton,
             VoteType) {
    "use strict";
        
    /**
     *
     * The VoteDisplay shows the current state of votes for an object, for instance, for an idea.
     * It indicates the type of votes and their amount.
     *
     * <ul>
     * <li>Properties
     * <ul>
     * <li> objectId: ID of the object for which the voting is rendered</li>
     * <li> enabled: the flag shows if voting is enabled</li>
     * <li> type: the type of voting, i.e., LIKE, DISLIKE, and STAR</li>
     * <li> value: the vote score</li>
     * <li> maxStar: the maximum number of stars if voting has type STAR</li>
     * </ul>
     * </li>
     * <li>Aggregations
     * <ul>
     * <li> _like: the child control for LIKE voting</li>
     * <li> _likeDislike: the child control for LIKE-DISLIKE voting</li>
     * <li> _star: the child control for STAR voting</li>
     * </ul>
     * </li>
     * </ul>
     */
    var VoteControl = Control.extend("sap.ino.controls.Vote", {
        metadata: {
            properties: {
                "voteId": {
                    type: "int"
                },
                "objectId": {
                    type: "int"
                },
                "enabled": {
                    type: "boolean"
                },
                "type": {
                    type: "string"
                },
                "value": {
                    type: "float"
                },
                "maxStar": {
                    type: "int"
                },
                "tooltip": {
                    type: "string"
                }
            },
            aggregations: {
                "_like": {
                    type: "sap.m.ToggleButton",
                    multiple: false,
                    visibility: "hidden"
                },
                "_likeDislike": {
                    type: "sap.m.HBox",
                  // typd:"sap.m.ToggleButton",
                    multiple: false,
                    visibility: "hidden"
                },
                "_star": {
                    type: "sap.m.RatingIndicator",
                    multiple: false,
                    visibility: "hidden"
                }
			},
			events: {
			    userVote: {}
			}
        },
        
        init: function () {
            this._oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ino.controls");
        },
        
        _getLike: function() {
            var oLikeControl = this.getAggregation("_like");
            var that = this;
            if (!oLikeControl) {
                oLikeControl = new ToggleButton({
                    enabled: this.getProperty("enabled"),
                    icon: IconPool.getIconURI("heart", "InoIcons"),
                    press: function() {
                        that._onButtonPressed();
                    },
                    pressed: this.getProperty("value") === 1,
                    tooltip: this.getProperty("tooltip"),
                    type : ButtonType.Transparent
                });
                this.setAggregation("_like", oLikeControl, true);
            }
            return oLikeControl;
		},
		
		_getLikeDislike: function() {
		    var oLikeDislikeControl = this.getAggregation("_likeDislike");
            var that = this;
            if (!oLikeDislikeControl) {
                var oLikeControl = new ToggleButton({
                    enabled: this.getProperty("enabled"),
                    icon: IconPool.getIconURI("thumbsup", "InoIcons"),
                    press: function() {
                        that._onButtonPressed(true);
                    },
                    pressed: this.getValue() === 1,
                    tooltip: this.getProperty("tooltip") + '(' + this._oRB.getText("VOTE_FLD_LIKE_THUMBS_UP_TOOLTIP") + ')',
                    type : ButtonType.Transparent
                });
                oLikeControl.addStyleClass("sapInoVoteLikeDislikeLike");
                
                var oDislikeControl = new ToggleButton({
                    enabled: this.getProperty("enabled"),
                    icon: IconPool.getIconURI("thumbsdown", "InoIcons"),
                    press: function() {
                        that._onButtonPressed();
                    },
                    pressed: this.getValue() === -1,
                    tooltip: this.getProperty("tooltip") + '(' + this._oRB.getText("VOTE_FLD_DISLIKE_THUMBS_DOWN_TOOLTIP") + ')',
                    type : ButtonType.Transparent
                });
                oDislikeControl.addStyleClass("sapInoVoteLikeDislikeDislike");
                
                oLikeDislikeControl = new HBox({
                    displayInline: true,
                    items: [oLikeControl, oDislikeControl],
                    tooltip: this.getProperty("tooltip")
                });
                this.setAggregation("_likeDislike", oLikeDislikeControl, true);
            }
            return oLikeDislikeControl;
		},
		
		_getLikeDislikeLike: function() {
		    return this._getLikeDislike().getItems()[0];
		},
		
		_getLikeDislikeDislike: function() {
		    return this._getLikeDislike().getItems()[1];
		},
		
		_getStar: function() {
            var oStarControl = this.getAggregation("_star");
            var that = this;
            if (!oStarControl) {
                oStarControl = new RatingIndicator({
                    change: function() {
                        that._onButtonPressed();
                    },
                    enabled: this.getEnabled(),
                    maxValue: this.getMaxStar(),
                    value : this.getValue(),
                    tooltip: this.getProperty("tooltip")
                }).addStyleClass('starVote');
                this.setAggregation("_star", oStarControl, true);
            }
            return oStarControl;
		},
                
        renderer: function (oRM, oControl) {
            oRM.write("<div");
			oRM.writeControlData(oControl);
			oRM.addClass("sapInoVote");
			oRM.writeClasses();
			if (oControl.getTooltip_Text()) {
			    oRM.writeAttributeEscaped("title", oControl.getTooltip());
			}
			oRM.write(">");
			
            var oVoteControl;
            switch (oControl.getProperty("type")) {
                case VoteType.TYPE_LIKE:
                    oVoteControl = oControl._getLike();
                    break;
                case VoteType.TYPE_LIKE_DISLIKE:
                    oVoteControl = oControl._getLikeDislike();
                    break;
                case VoteType.TYPE_STAR:
                    oVoteControl = oControl._getStar();
                    break;
                default:
                    break;
            }
            if(oVoteControl) {
                // ATTN.: DO NOT SET THE TOOLTIP FOR THE STARCONTROL LIKE THIS, AS THIS CAUSES A RERENDERING OF THE WHOLE LIST
                //oVoteControl.setTooltip(oControl.getTooltip_Text());
                oRM.renderControl(oVoteControl);
            }
            
            oRM.write("</div>");
        },
        
        _onButtonPressed: function(bLikePressed) {
            var fValue = this.getProperty("value");
            var sType = this.getProperty("type");
            if (sType) {
                switch (sType) {
                    case VoteType.TYPE_LIKE:
                        this.setProperty("value", (fValue === 1) ? 0 : 1);
                        break;
                    case VoteType.TYPE_LIKE_DISLIKE:
                        var oLikeControl = this._getLikeDislikeLike();
                        var oDislikeControl = this._getLikeDislikeDislike();
                        if (bLikePressed && oLikeControl && oDislikeControl) {
                            oDislikeControl.setPressed(false);
                            oLikeControl.setPressed(oLikeControl.getPressed());
                            this.setProperty("value", (oLikeControl.getPressed()) ? 1 : 0);
                        } else if (oLikeControl &&  oDislikeControl) {
                            oDislikeControl.setPressed(oDislikeControl.getPressed());
                            oLikeControl.setPressed(false);
                            this.setProperty("value", (oDislikeControl.getPressed()) ? -1 : 0);
                        }
                        break;
                    case VoteType.TYPE_STAR:
                        var oStar = this._getStar();
                        this.setProperty("value", oStar.getValue());
                        break;
                    default:
                        break;
                }
                this.fireUserVote({
                    voteId: this.getVoteId(),
                    value: this.getValue(), 
                    objectId: this.getObjectId(),
                    type: this.getType(),
                    oldValue: fValue
                });
            }
        }
    });
    
    VoteControl.prototype.setEnabled = function (oValue) {
        this.setProperty("enabled", oValue);
        if (this.getProperty("type")) {
            switch (this.getProperty("type")) {
                case VoteType.TYPE_LIKE:
                    this._getLike().setEnabled(oValue);
                    break;
                case VoteType.TYPE_LIKE_DISLIKE:
                    this._getLikeDislikeLike().setEnabled(oValue);
                    this._getLikeDislikeDislike().setEnabled(oValue);
                    break;
                case VoteType.TYPE_STAR:
                    this._getStar().setEnabled(oValue);
                    break;
                default:
                    break;
            }
        }
    };
    
    VoteControl.prototype.setValue = function (oValue) {
        this.setProperty("value", oValue);
        if (this.getProperty("type")) {
            switch (this.getProperty("type")) {
                case VoteType.TYPE_LIKE:
                    this._getLike().setPressed(oValue === 1);
                    break;
                case VoteType.TYPE_LIKE_DISLIKE:
                    this._getLikeDislikeLike().setPressed(oValue === 1);
                    this._getLikeDislikeDislike().setPressed(oValue === -1);
                    break;
                case VoteType.TYPE_STAR:
                    this._getStar().setValue(oValue);
                    break;
                default:
                    break;
            }
        }
    };
    
    VoteControl.prototype.setType = function (oValue) {
        this.setProperty("type", oValue);
        this.setValue(this.getValue());
        this.setEnabled(this.getEnabled());
    };
    
    VoteControl.prototype.setMaxStar = function (iMaxStar) {
        this.setProperty("maxStar", iMaxStar);
        if (this.getProperty("type") === VoteType.TYPE_STAR) {
            this._getStar().setMaxValue(iMaxStar);
        }
    };
    
    VoteControl.prototype.setTooltip = function (oValue) {
        this.setProperty("tooltip", oValue);
        if (this.getProperty("type")) {
            switch (this.getProperty("type")) {
                case VoteType.TYPE_LIKE:
                    this._getLike().setTooltip(oValue);
                    break;
                case VoteType.TYPE_LIKE_DISLIKE:
                    this._getLikeDislikeLike().setTooltip(oValue);
                    this._getLikeDislikeDislike().setTooltip(oValue);
                    break;
                case VoteType.TYPE_STAR:
                    this._getStar().setTooltip(oValue);
                    break;
                default:
                    break;
            }
        } else {
            this.setAggregation("_like", undefined);
            this.setAggregation("_likeDislike", undefined);
            this.setAggregation("_star", undefined);
        }
    };
    
    return VoteControl;
});
}; // end of sap/ino/controls/Vote.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.VoteDisplay') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.VoteDisplay'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.HBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.NumberFormat'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/VoteDisplay",[
    "sap/ui/core/Control",
    "sap/ui/core/IconPool",
    "sap/m/Text",
    "sap/m/HBox",
    "sap/ino/controls/LabelledIcon",
    "sap/ui/core/format/NumberFormat",
    "sap/ino/controls/VoteType"
], function (Control,
             IconPool,
             Text,
             HBox,
             LabelledIcon,
             NumberFormat,
             VoteType) {
    "use strict";
    
    var oIntegerFormat = NumberFormat.getIntegerInstance({
        style: "short"
    });
    var oFloatFormat = NumberFormat.getFloatInstance({
        decimals: 1
    });
    
    /**
     *
     * The VoteDisplay shows the current state of votes for an object, for instance, for an idea.
     * It indicates the type of votes and their amount.
     *
     * <ul>
     * <li>Properties
     * <ul>
     * <li> likeVotes: the number of LIKE votes</li>
     * <li> negativeVotes: the number of negative votes for LIKE_DISLIKE voting</li>
     * <li> positiveVotes: the number of positive votes for LIKE_DISLIKE voting</li>
     * <li> starVoteCount: the number of votes for STAR voting</li>
     * <li> starVotes: the average score for STAR voting</li>
     * <li> type: type of voting, i.e., LIKE, LIKE-DISLIKE, and STAR</li>
     * </ul>
     * </li>
     * <li>Aggregations
     * <ul>
     * <li> _like: the child control for displaying LIKE voting</li>
     * <li> _likeDislike: the child control for displaying LIKE-DISLIKE voting</li>
     * <li> _star: the child control for displaying STAR voting</li>
     * </ul>
     * </li>
     * </ul>
     */
    var VoteDisplay = Control.extend("sap.ino.controls.VoteDisplay", {
        metadata: {
            properties: {
                "likeVotes": {
                    type: "int"
                },
                "negativeVotes": {
                    type: "int"
                },
                "positiveVotes": {
                    type: "int"
                },
                "starVoteCount": {
                    type: "int"
                },
                "starVotes": {
                    type: "float"
                },
                "score" : {
                    type: "float"
                },
                "type": {
                    type: "string"
                },
                "isExpert": {
                    type : "boolean",
                    defaultValue : false
                }
            },
            aggregations: {
                "_like": {
                    type: "sap.ino.controls.LabelledIcon",
                    multiple: false,
                    visibility: "hidden"
                },
                "_likeDislike": {
                    type: "sap.m.HBox",
                    multiple: false,
                    visibility: "hidden"
                },
                "_star": {
                    type: "sap.ino.controls.LabelledIcon",
                    multiple: false,
                    visibility: "hidden"
                },
                "_score": {
                    type: "sap.m.Text",
                    multiple: false,
                    visibility: "hidden"
                }                
			}
        },
        
        init: function () {
            this._oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ino.controls");
        },
        
        _getLike: function() {
            var oLikeControl = this.getAggregation("_like");
            if (!oLikeControl) {
                oLikeControl = new LabelledIcon({
                    iconUrl: this.getIsExpert() ? "sap-icon://person-placeholder" : IconPool.getIconURI("heart","InoIcons"),
                    label: oIntegerFormat.format(this.getLikeVotes())
                });
                this.setAggregation("_like", oLikeControl, true);
            }
            return oLikeControl;
		},
		
		_getLikeDislike: function() {
            var oLikeDislikeControl = this.getAggregation("_likeDislike");
            if (!oLikeDislikeControl) {            
                var oLikeControl = new LabelledIcon({
                    iconUrl: this.getIsExpert() ? "sap-icon://employee-approvals" : IconPool.getIconURI("thumbsup","InoIcons"),
                    label: oIntegerFormat.format(this.getPositiveVotes())
                }).addStyleClass("sapInoVoteDisplayLike");
                var oDislikeControl = new LabelledIcon({
                    iconUrl: this.getIsExpert() ? "sap-icon://employee-rejections" : IconPool.getIconURI("thumbsdown","InoIcons"),
                    label: oIntegerFormat.format(this.getNegativeVotes())
                }).addStyleClass("sapInoVoteDisplayDislike");
                oLikeDislikeControl = new HBox({
                    items: [oLikeControl, oDislikeControl],
                    displayInline: true
                });
                this.setAggregation("_likeDislike", oLikeDislikeControl, true);
            }
            return oLikeDislikeControl;
		},
		
		_getLikeDislikeLike: function() {
		    return this._getLikeDislike().getItems()[0];
		},
		
		_getLikeDislikeDislike: function() {
		    return this._getLikeDislike().getItems()[1];
		},
		
		_getStarLabel: function() {
		    var sLabel;
            var sStarVotes = this.getStarVotes();
            var iStarVoteCount = this.getStarVoteCount();
            if (sStarVotes !== undefined && sStarVotes !== null && iStarVoteCount !== undefined && iStarVoteCount !== null) {
                if(iStarVoteCount !== 1){
                    sLabel = this._oRB.getText("CTRL_VOTE_DISPLAY_FLD_STARS", [oFloatFormat.format(sStarVotes), oIntegerFormat.format(iStarVoteCount)]);
                } else {
                    sLabel = this._oRB.getText("CTRL_VOTE_DISPLAY_FLD_STAR", [oFloatFormat.format(sStarVotes), iStarVoteCount]);
                }
            }
            
            return sLabel;
		},
		
		_getStar: function() {
            var oStarControl = this.getAggregation("_star");
            if (!oStarControl) {
                oStarControl = new LabelledIcon({
                    iconUrl: this.getIsExpert() ? "sap-icon://person-placeholder" : "sap-icon://favorite",
                    label: this._getStarLabel()
                });
                this.setAggregation("_star", oStarControl, true);
            }
            return oStarControl;
		},
		
		_getScore: function() {
            var oScoreControl = this.getAggregation("_score");
            if (!oScoreControl) {
                oScoreControl = new Text({
                    text: this.getScore()
                });
                this.setAggregation("_score", oScoreControl, true);
            }
            return oScoreControl;
        },
                
        renderer: function (oRM, oControl) {
            oRM.write("<div");
			oRM.writeControlData(oControl);
			oRM.addClass("sapInoVoteDisplay");
			oRM.writeClasses();
			if (oControl.getTooltip_Text()) {
			    oRM.writeAttributeEscaped("title", oControl.getTooltip_Text());
			}
			oRM.write(">");
			
            var oVoteControl;
            switch (oControl.getProperty("type")) {
                case VoteType.TYPE_LIKE:
                    oVoteControl = oControl._getLike();
                    break;
                case VoteType.TYPE_LIKE_DISLIKE:
                    oVoteControl = oControl._getLikeDislike();
                    break;
                case VoteType.TYPE_STAR:
                    oVoteControl = oControl._getStar();
                    break;
                default:
                    break;
            }
            if(oVoteControl) {
                oRM.renderControl(oVoteControl);
            }
            
            oRM.write("</div>");
        }
    });

    VoteDisplay.prototype.onAfterRendering = function() {
        this._getLike().data("ignoreExport", true);
        this._getLikeDislikeLike().data("ignoreExport", true);
        this._getLikeDislikeDislike().data("ignoreExport", true);
        this._getStar().data("ignoreExport", true);
    };    
    
    VoteDisplay.prototype.bindProperty = function (sKey, oBinding) {
        Control.prototype.bindProperty.apply(this, arguments);
        switch (sKey) {
            case "likeVotes":
                this._getLike().bindProperty("label", oBinding);
                break;
            case "positiveVotes":
                this._getLikeDislikeLike().bindProperty("label", oBinding);
                break;
            case "negativeVotes":
                this._getLikeDislikeDislike().bindProperty("label", oBinding);
                break;
            case "starVotes": 
                this._getStar().bindProperty("label", oBinding);
                break;
            case "score": 
                this._getScore().bindProperty("text", oBinding);
                break;
            default:
                break;
        }
    };
    
    VoteDisplay.prototype.setLikeVotes = function (oValue) {
        this.setProperty("likeVotes", oValue);
        this._getLike().setLabel(oIntegerFormat.format(oValue));
    };
    
    VoteDisplay.prototype.setStarVotes = function (oValue) {
        this.setProperty("starVotes", oValue);
        this._getStar().setLabel(this._getStarLabel());
    };
    
    VoteDisplay.prototype.setStarVoteCount = function (oValue) {
        this.setProperty("starVoteCount", oValue);
        this._getStar().setLabel(this._getStarLabel());
    };
    
    VoteDisplay.prototype.setPositiveVotes = function (oValue) {
        this.setProperty("positiveVotes", oValue);
        this._getLikeDislikeLike().setLabel(oIntegerFormat.format(oValue));
    };
    
    VoteDisplay.prototype.setNegativeVotes = function (oValue) {
        this.setProperty("negativeVotes", oValue);
        this._getLikeDislikeDislike().setLabel(oIntegerFormat.format(oValue));
    };
    
    return VoteDisplay;
});
}; // end of sap/ino/controls/VoteDisplay.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.VoteNoImage') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.VoteNoImage'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
jQuery.sap.require('sap.m.HBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.RatingIndicator'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToggleButton'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.NumberFormat'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/VoteNoImage",[
    "sap/m/ButtonType",
    "sap/ui/core/Control",
    "sap/ui/core/IconPool",
    "sap/m/HBox",
    "sap/m/RatingIndicator",
    "sap/m/ToggleButton",
    "sap/ino/controls/VoteType",
    "sap/ui/core/format/NumberFormat",
    "sap/ino/controls/LabelledIcon",
    "sap/m/Label"
], function(ButtonType,
	Control,
	IconPool,
	HBox,
	RatingIndicator,
	ToggleButton,
	VoteType,
	NumberFormat,
	LabelledIcon,
	Label) {
	"use strict";
	var oIntegerFormat = NumberFormat.getIntegerInstance({
		style: "short"
	});
	var oFloatFormat = NumberFormat.getFloatInstance({
		decimals: 1
	});
	/**
	 *
	 * The VoteDisplay shows the current state of votes for an object, for instance, for an idea.
	 * It indicates the type of votes and their amount.
	 *
	 * <ul>
	 * <li>Properties
	 * <ul>
	 * <li> objectId: ID of the object for which the voting is rendered</li>
	 * <li> enabled: the flag shows if voting is enabled</li>
	 * <li> type: the type of voting, i.e., LIKE, DISLIKE, and STAR</li>
	 * <li> value: the vote score</li>
	 * <li> maxStar: the maximum number of stars if voting has type STAR</li>
	 * </ul>
	 * </li>
	 * <li>Aggregations
	 * <ul>
	 * <li> _like: the child control for LIKE voting</li>
	 * <li> _likeDislike: the child control for LIKE-DISLIKE voting</li>
	 * <li> _star: the child control for STAR voting</li>
	 * </ul>
	 * </li>
	 * </ul>
	 */
	var VoteControl = Control.extend("sap.ino.controls.VoteNoImage", {
		metadata: {
			properties: {
				"voteId": {
					type: "int"
				},
				"objectId": {
					type: "int"
				},
				"enabled": {
					type: "boolean"
				},
				"type": {
					type: "string"
				},
				"value": {
					type: "float"
				},
				"maxStar": {
					type: "int"
				},
				"tooltip": {
					type: "string"
				},
				"likeVotes": {
					type: "int"
				},
				"starVoteCount": {
					type: "int"
				},
				"starVotes": {
					type: "float"
				},
				"score": {
					type: "float"
				},
				"voteCount":{
				    type: "int"
				}
			},
			aggregations: {
				"_like": {
					type: "sap.m.ToggleButton",
					multiple: false,
					visibility: "hidden"
				},
				"_likeDislike": {
					type: "sap.m.HBox",
					// typd:"sap.m.ToggleButton",
					multiple: false,
					visibility: "hidden"
				},
				"_star": {
					type: "sap.m.RatingIndicator",
					multiple: false,
					visibility: "hidden"
				},
				"_score": {
					type: "sap.m.Text",
					multiple: false,
					visibility: "hidden"
				}
			},
			events: {
				userVote: {}
			}
		},

		init: function() {
			this._oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ino.controls");
		},

		_getLike: function() {
			var oLikeControl = this.getAggregation("_like");
			var that = this;
			if (!oLikeControl) {
				oLikeControl = new ToggleButton({
					enabled: this.getProperty("enabled"),
					icon: IconPool.getIconURI("heart", "InoIcons"),
					press: function() {
						that._onButtonPressed();
					},
					pressed: this.getProperty("value") === 1,
					tooltip: this.getProperty("tooltip"),
					type: ButtonType.Transparent
				});
				this.setAggregation("_like", oLikeControl, true);
			}
			return oLikeControl;
		},

		_getLikeDislike: function() {
			var oLikeDislikeControl = this.getAggregation("_likeDislike");
			var that = this;
			if (!oLikeDislikeControl) {
				var oLikeControl = new ToggleButton({
					enabled: this.getProperty("enabled"),
					icon: IconPool.getIconURI("thumbsup", "InoIcons"),
					press: function() {
						that._onButtonPressed(true);
					},
					pressed: this.getValue() === 1,
					tooltip: this.getProperty("tooltip"),
					type: ButtonType.Transparent
				});
				oLikeControl.addStyleClass("sapInoVoteLikeDislikeLike");
				
				var oDislikeControl = new ToggleButton({
					enabled: this.getProperty("enabled"),
					icon: IconPool.getIconURI("thumbsdown", "InoIcons"),
					press: function() {
						that._onButtonPressed();
					},
					pressed: this.getValue() === -1,
					tooltip: this.getProperty("tooltip"),
					type: ButtonType.Transparent
				});
				oDislikeControl.addStyleClass("sapInoVoteLikeDislikeDislike");

				oLikeDislikeControl = new HBox({
					displayInline: true,
					items: [oLikeControl, oDislikeControl],
					tooltip: this.getProperty("tooltip")
				});
				this.setAggregation("_likeDislike", oLikeDislikeControl, true);
			}
			return oLikeDislikeControl;
		},

		_getLikeDislikeLike: function() {
			return this._getLikeDislike().getItems()[0];
		},

		_getLikeDislikeDislike: function() {
			return this._getLikeDislike().getItems()[1];
		},

		_getStar: function() {
			var oStarControl = this.getAggregation("_star");
			var that = this;
			
			if (!oStarControl) {
				oStarControl = new RatingIndicator({
					change: function() {
						that._onButtonPressed();
					},
					enabled: this.getEnabled(),
					maxValue: this.getMaxStar(),
					value: this.getValue(),
					tooltip: this.getProperty("tooltip")
				}).addStyleClass('starVote');
				this.setAggregation("_star", oStarControl, true);
			}
			
			return oStarControl;
		},

        _getStatusText: function(){
            var voteStatus = this.getValue() === 1 || this.getValue() === -1 ? this._oRB.getText('CTRL_VOTE_DISPLAY_VOTED') : this._oRB.getText('CTRL_VOTE_DISPLAY_VOTE');
            return  voteStatus ;
        },

		renderer: function(oRM, oControl) {
			oRM.write("<div");
			oRM.writeControlData(oControl);
			oRM.addClass("sapInoVoteNoImage");
			oRM.writeClasses();
			if (oControl.getTooltip_Text()) {
				oRM.writeAttributeEscaped("title", oControl.getTooltip());
			}
			oRM.write(">");

			var oVoteControl;
			switch (oControl.getProperty("type")) {
				case VoteType.TYPE_LIKE:
					oVoteControl = oControl._getLike();
					break;
				case VoteType.TYPE_LIKE_DISLIKE:
					oVoteControl = oControl._getLikeDislike();
					break;
				case VoteType.TYPE_STAR:
					oVoteControl = oControl._getStar();
					break;
				default:
					break;
			}
			if (oVoteControl) {
				// ATTN.: DO NOT SET THE TOOLTIP FOR THE STARCONTROL LIKE THIS, AS THIS CAUSES A RERENDERING OF THE WHOLE LIST
				//oVoteControl.setTooltip(oControl.getTooltip_Text());
				oRM.renderControl(oVoteControl);
				if (oControl.getProperty("type") === VoteType.TYPE_STAR) {
					var oDisplayControl = oControl._getStarLabel();
					oRM.renderControl(oDisplayControl);
				}
				
			}

			oRM.write("</div>");
		},
		_getStarLabel: function() {
			var sLabel;
			var voteStatus = this.getVoteId() ? this._oRB.getText('CTRL_VOTE_DISPLAY_VOTED') : this._oRB.getText('CTRL_VOTE_DISPLAY_VOTE');
			var starVoted = this.getVoteId() ? 'sapInoStarVoted' : '' ; 
			var sStarVotes = this.getStarVotes();
			var iStarVoteCount = this.getStarVoteCount();
			if (sStarVotes !== undefined && sStarVotes !== null && iStarVoteCount !== undefined && iStarVoteCount !== null) {
				sLabel =  voteStatus + '  ' + oFloatFormat.format(sStarVotes);
			}
			var oLabelIcon = new LabelledIcon({
				label: sLabel
			}).addStyleClass(starVoted);
			return oLabelIcon;
		},
		_onButtonPressed: function(bLikePressed) {
			var fValue = this.getProperty("value");
			var sType = this.getProperty("type");
			if (sType) {
				switch (sType) {
					case VoteType.TYPE_LIKE:
						this.setProperty("value", (fValue === 1) ? 0 : 1);
						break;
					case VoteType.TYPE_LIKE_DISLIKE:
						var oLikeControl = this._getLikeDislikeLike();
						var oDislikeControl = this._getLikeDislikeDislike();
						if (bLikePressed && oLikeControl && oDislikeControl) {
							oDislikeControl.setPressed(false);
							oLikeControl.setPressed(oLikeControl.getPressed());
							this.setProperty("value", (oLikeControl.getPressed()) ? 1 : 0);
						} else if (oLikeControl && oDislikeControl) {
							oDislikeControl.setPressed(oDislikeControl.getPressed());
							oLikeControl.setPressed(false);
							this.setProperty("value", (oDislikeControl.getPressed()) ? -1 : 0);
						}
						break;
					case VoteType.TYPE_STAR:
						var oStar = this._getStar();
						this.setProperty("value", oStar.getValue());
						break;
					default:
						break;
				}
				this.fireUserVote({
					voteId: this.getVoteId(),
					value: this.getValue(),
					objectId: this.getObjectId(),
					type: this.getType(),
					oldValue: fValue
				});
			}
		}
	});

	VoteControl.prototype.setEnabled = function(oValue) {
		this.setProperty("enabled", oValue);
		if (this.getProperty("type")) {
			switch (this.getProperty("type")) {
				case VoteType.TYPE_LIKE:
					this._getLike().setEnabled(oValue);
					break;
				case VoteType.TYPE_LIKE_DISLIKE:
					this._getLikeDislikeLike().setEnabled(oValue);
					this._getLikeDislikeDislike().setEnabled(oValue);
					break;
				case VoteType.TYPE_STAR:
					this._getStar().setEnabled(oValue);
					break;
				default:
					break;
			}
		}
	};

	VoteControl.prototype.setValue = function(oValue) {
		this.setProperty("value", oValue);
		
		if (this.getProperty("type")) {
			switch (this.getProperty("type")) {
				case VoteType.TYPE_LIKE:
					this._getLike().setPressed(oValue === 1).setText(this._getStatusText());
					break;
				case VoteType.TYPE_LIKE_DISLIKE:
					this._getLikeDislikeLike().setPressed(oValue === 1);
					this._getLikeDislikeDislike().setPressed(oValue === -1);
					if(oValue === 1){
					    this._getLikeDislikeLike().setText(this._getStatusText());
					}else if(oValue === -1){
					    this._getLikeDislikeDislike().setText(this._getStatusText());
					}else{
					    this._getLikeDislikeLike().setText(this._getStatusText());
					    this._getLikeDislikeDislike().setText(this._getStatusText());
					}
					break;
				case VoteType.TYPE_STAR:
					this._getStar().setValue(oValue);
					break;
				default:
					break;
			}
		}
	};

	VoteControl.prototype.setType = function(oValue) {
		this.setProperty("type", oValue);
		this.setValue(this.getValue());
		this.setEnabled(this.getEnabled());
	};

	VoteControl.prototype.setMaxStar = function(iMaxStar) {
		this.setProperty("maxStar", iMaxStar);
		if (this.getProperty("type") === VoteType.TYPE_STAR) {
			this._getStar().setMaxValue(iMaxStar);
		}
	};

	VoteControl.prototype.setTooltip = function(oValue) {
		this.setProperty("tooltip", oValue);
		if (this.getProperty("type")) {
			switch (this.getProperty("type")) {
				case VoteType.TYPE_LIKE:
					this._getLike().setTooltip(oValue);
					break;
				case VoteType.TYPE_LIKE_DISLIKE:
					this._getLikeDislikeLike().setTooltip(oValue);
					this._getLikeDislikeDislike().setTooltip(oValue);
					break;
				case VoteType.TYPE_STAR:
					this._getStar().setTooltip(oValue);
					break;
				default:
					break;
			}
		} else {
			this.setAggregation("_like", undefined);
			this.setAggregation("_likeDislike", undefined);
			this.setAggregation("_star", undefined);
		}
	};

	return VoteControl;
});
}; // end of sap/ino/controls/VoteNoImage.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.commons.mixins.ExportMixin') ) {
jQuery.sap.declare('sap.ino.vc.commons.mixins.ExportMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.BusyIndicator'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/commons/mixins/ExportMixin",[
    //"sap/ino/commons/util/Export",
    "sap/ino/commons/application/Configuration",
    "sap/ui/core/format/DateFormat",
    "sap/m/MessageToast",
    "sap/ui/core/BusyIndicator",
    "sap/ino/vc/idea/mixins/IdeaFormCriteriaFilterMixin"
], function( /*Export, */ Configuration, DateFormat, MessageToast, BusyIndicator1) {
	"use strict";

	/**
	 * @class
	 * Mixin that provides export functionality
	 */
	var ExportMixin = function() {
		throw "Mixin may not be instantiated directly";
	};

	var CallExportService = function(sFormat, oExportControl) {
		//call a backend service to generate the XLS/CSV/PPTX file
		var that = this;
		var oParameter = this._getExportParam(sFormat, oExportControl);
		if (!oParameter) {
			BusyIndicator1.hide();
			return;
		}
		jQuery.ajax({
			url: Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/export_idea.xsjs",
			data: oParameter,
			beforeSend: function() {
				that.setBusy(true);
			},
			success: function(res, status, xhr) {
				that.setBusy(false);
				BusyIndicator1.hide();
				MessageToast.show(that.getText(res.messageKey));
			},
			error: function(res, status, xhr) {
				that.setBusy(false);
				BusyIndicator1.hide();
				MessageToast.show(that.getText(res.responseJSON.messageKey));
			}
		});
	};

	/*ExportMixin.onExportTopSheetShow = function(oEvent) {
	    if (!this._oExportTopSheet) {
	        this._oExportTopSheet = this.createFragment("sap.ino.vc.commons.fragments.ExportTopSheet", this.getView().getId());
	        this.getView().addDependent(this._oExportTopSheet);
	    }
	    if (oEvent.getSource().data("placement")) {
			this._oExportTopSheet.setPlacement(oEvent.getSource().data("placement"));
		}
		this._oExportTopSheet.triggerButton = oEvent.getSource();
		this._oExportTopSheet.openBy(oEvent.getSource());
	};*/

	ExportMixin.onListExport = function(oEvent) {
		if (!this._oExportActionSheet) {
			this._oExportActionSheet = this.createFragment("sap.ino.vc.commons.fragments.ExportActionSheet", this.getView().getId());
			this.getView().addDependent(this._oExportActionSheet);
		}
		if (oEvent.getSource().data("placement")) {
			this._oExportActionSheet.setPlacement(oEvent.getSource().data("placement"));
		}
		this._oExportActionSheet.triggerButton = oEvent.getSource();
		this._oExportActionSheet.openBy(oEvent.getSource());
	};

	ExportMixin.onListExportXLS = function(oEvent) {
		/*Export.i18n = this.getModel("i18n");
		var oExportControl = typeof this.getExportControl === "function" ? this.getExportControl() : this.getList();
		var fnCompleted = typeof this.fnCompleted === "function" ? this.fnCompleted : null;
        
		if (this._IsExportIdeaViaEmail()) {
			//call a backend service to generate the XLS file
			CallExportService.call(this, "xls", oExportControl);
		} else if (this._IsExportIdeaDirectly()) {
		    var oParameter = this._getExportParam("xls",oExportControl);
            if(!oParameter){
                return;
            }
            oParameter.ISNOTSENDEMAIL =  true;
			Export.exportAdvancedIdea("xls", oParameter, this._oExportActionSheet.triggerButton, this.getText.bind(this));
		} else if (fnCompleted) {
			Export.exportAdvanced(oExportControl, "xls", this.getExportPrefix && this.getExportPrefix(), this._oExportActionSheet.triggerButton,
				Configuration.getCurrentUser().NAME, null, fnCompleted(this));
		} else {
			Export.exportAdvanced(oExportControl, "xls", this.getExportPrefix && this.getExportPrefix(), this._oExportActionSheet.triggerButton,
				Configuration.getCurrentUser().NAME);
		}*/
		var that = this,
			oLimitCount = {
				xls: 2000
			};
		if (!that._checkExportCount("xls", oLimitCount)) {
			MessageToast.show(that.getText("EXPORT_XLS_LIMIT_COUNT_MSG", oLimitCount.xls));
			return;
		}
		BusyIndicator1.show(0);
		setTimeout(function() {
			sap.ui.require(["sap/ino/commons/util/Export"], function(Export) {
				Export.i18n = that.getModel("i18n");
				var oExportControl = typeof that.getExportControl === "function" ? that.getExportControl() : that.getList();
				var fnCompleted = typeof that.fnCompleted === "function" ? that.fnCompleted : null;

				if (that._IsExportIdeaViaEmail()) {
					//call a backend service to generate the XLS file
					CallExportService.call(that, "xls", oExportControl);
				} else if (that._IsExportIdeaDirectly()) {
					var oParameter = that._getExportParam("xls", oExportControl);
					if (!oParameter) {
						BusyIndicator1.hide();
						return;
					}
					oParameter.ISNOTSENDEMAIL = true;
					Export.exportAdvancedIdea("xls", oParameter, that._oExportActionSheet.triggerButton, that.getText.bind(that));
				} else if (fnCompleted) {
					Export.exportAdvanced(oExportControl, "xls", that.getExportPrefix && that.getExportPrefix(), that._oExportActionSheet.triggerButton,
						Configuration.getCurrentUser().NAME, null, fnCompleted(that));
				} else {
					Export.exportAdvanced(oExportControl, "xls", that.getExportPrefix && that.getExportPrefix(), that._oExportActionSheet.triggerButton,
						Configuration.getCurrentUser().NAME);
				}
			});
		});
	};

	ExportMixin.onListExportCSV = function(oEvent) {
		/*Export.i18n = this.getModel("i18n");
		var oExportControl = typeof this.getExportControl === "function" ? this.getExportControl() : this.getList();
		var fnCompleted = typeof this.fnCompleted === "function" ? this.fnCompleted : null;

		if (this._IsExportIdeaViaEmail()) {
			//call a backend service to generate the CSV file
			CallExportService.call(this, "csv", oExportControl);
		} else if (this._IsExportIdeaDirectly()) { 
		    var oParameter = this._getExportParam("csv",oExportControl);
            if(!oParameter){
                return;
            }
            oParameter.ISNOTSENDEMAIL =  true;
			Export.exportAdvancedIdea("csv", oParameter, this._oExportActionSheet.triggerButton, this.getText.bind(this));
		} else if (fnCompleted) {
			Export.exportAdvanced(oExportControl, "csv", this.getExportPrefix && this.getExportPrefix(), this._oExportActionSheet.triggerButton,
				Configuration.getCurrentUser().NAME, null, fnCompleted(this));
		} else {
			Export.exportAdvanced(oExportControl, "csv", this.getExportPrefix && this.getExportPrefix(), this._oExportActionSheet.triggerButton,
				Configuration.getCurrentUser().NAME);
		}*/
		var that = this,
			oLimitCount = {
				csv: 3000
			};
		if (!that._checkExportCount("csv", oLimitCount)) {
			MessageToast.show(that.getText("EXPORT_CSV_LIMIT_COUNT_MSG", oLimitCount.csv));
			return;
		}
		BusyIndicator1.show(0);
		setTimeout(function() {
			sap.ui.require(["sap/ino/commons/util/Export"], function(Export) {
				Export.i18n = that.getModel("i18n");
				var oExportControl = typeof that.getExportControl === "function" ? that.getExportControl() : that.getList();
				var fnCompleted = typeof that.fnCompleted === "function" ? that.fnCompleted : null;

				if (that._IsExportIdeaViaEmail()) {
					//call a backend service to generate the CSV file
					CallExportService.call(that, "csv", oExportControl);
				} else if (that._IsExportIdeaDirectly()) {
					var oParameter = that._getExportParam("csv", oExportControl);
					if (!oParameter) {
						BusyIndicator1.hide();
						return;
					}
					oParameter.ISNOTSENDEMAIL = true;
					Export.exportAdvancedIdea("csv", oParameter, that._oExportActionSheet.triggerButton, that.getText.bind(that));
				} else if (fnCompleted) {
					Export.exportAdvanced(oExportControl, "csv", that.getExportPrefix && that.getExportPrefix(), that._oExportActionSheet.triggerButton,
						Configuration.getCurrentUser().NAME, null, fnCompleted(that));
				} else {
					Export.exportAdvanced(oExportControl, "csv", that.getExportPrefix && that.getExportPrefix(), that._oExportActionSheet.triggerButton,
						Configuration.getCurrentUser().NAME);
				}
			});
		});
	};

	ExportMixin.onListExportPPT = function(oEvent) {
		/*Export.i18n = this.getModel("i18n");
		var oExportControl = typeof this.getExportControl === "function" ? this.getExportControl() : this.getList();
		var fnCompleted = typeof this.fnCompleted === "function" ? this.fnCompleted : null;

		if (this._IsExportIdeaViaEmail()) {
			//call a backend service to generate the PPT file
			CallExportService.call(this, "pptx", oExportControl);
		} else if (this._IsExportIdeaDirectly()) {
		    var oParameter = this._getExportParam("pptx",oExportControl);
            if(!oParameter){
                return;
            }
            oParameter.ISNOTSENDEMAIL =  true;
			Export.exportAdvancedIdea("pptx", oParameter, this._oExportActionSheet.triggerButton, this.getText.bind(this));
		} else if (fnCompleted) {
			Export.exportAdvanced(oExportControl, "pptx", this.getExportPrefix && this.getExportPrefix(), this._oExportActionSheet.triggerButton,
				Configuration.getCurrentUser().NAME, null, fnCompleted(this));
		} else {
			Export.exportAdvanced(oExportControl, "pptx", this.getExportPrefix && this.getExportPrefix(), this._oExportActionSheet.triggerButton,
				Configuration.getCurrentUser().NAME, 50);
		}*/

		// 		CallExportService.call(this, "pptx", oExportControl);
		// 		Export.exportAdvanced(oExportControl, "pptx", this.getExportPrefix && this.getExportPrefix(), this._oExportActionSheet.triggerButton,
		// 			Configuration.getCurrentUser().NAME, 50); 

		var that = this,
			oLimitCount = {
				pptx: 2000
			};
		if (!that._checkExportCount("pptx", oLimitCount)) {
			MessageToast.show(that.getText("EXPORT_PPTX_LIMIT_COUNT_MSG", oLimitCount.pptx));
			return;
		}
		BusyIndicator1.show(0);
		setTimeout(function() {
			sap.ui.require(["sap/ino/commons/util/Export"], function(Export) {
				Export.i18n = that.getModel("i18n");
				var oExportControl = typeof that.getExportControl === "function" ? that.getExportControl() : that.getList();
				var fnCompleted = typeof that.fnCompleted === "function" ? that.fnCompleted : null;

				if (that._IsExportIdeaViaEmail()) {
					//call a backend service to generate the PPT file
					CallExportService.call(that, "pptx", oExportControl);
				} else if (that._IsExportIdeaDirectly()) {
					var oParameter = that._getExportParam("pptx", oExportControl);
					if (!oParameter) {
						BusyIndicator1.hide();
						return;
					}
					oParameter.ISNOTSENDEMAIL = true;
					Export.exportAdvancedIdea("pptx", oParameter, that._oExportActionSheet.triggerButton, that.getText.bind(that));
				} else if (fnCompleted) {
					Export.exportAdvanced(oExportControl, "pptx", that.getExportPrefix && that.getExportPrefix(), that._oExportActionSheet.triggerButton,
						Configuration.getCurrentUser().NAME, null, fnCompleted(that));
				} else {
					Export.exportAdvanced(oExportControl, "pptx", that.getExportPrefix && that.getExportPrefix(), that._oExportActionSheet.triggerButton,
						Configuration.getCurrentUser().NAME, 50);
				}
			});
		});
	};

	ExportMixin._IsExportIdeaViaEmail = function() {
		return this.getExportPrefix && this.getExportPrefix() === this.getText("EXPORT_PREFIX_IDEA") && this.getViewProperty(
			"/List/EXPORT_IDEA_VIA_EMAIL");
	};

	ExportMixin._IsExportIdeaDirectly = function() {
		return this.getExportPrefix && this.getExportPrefix() === this.getText("EXPORT_PREFIX_IDEA");
	};

	ExportMixin._getExportParam = function(sFormat, oExportControl) {
		var oBindingParams = this.getBindingParameter();
		var bIsManaged = this._check4ManagingList();
		var sFilterParams = oExportControl.getBinding('items').sFilterParams;

		var oDateFormat = DateFormat.getDateTimeInstance({
			pattern: "dd-MM-yyyy_HH-mm"
		});
		var sFilename = this.getText("EXPORT_PREFIX_IDEA") + "_" + oDateFormat.format(new Date());
		var sIdeaformFilters = typeof this.getIdeaformFilters === "function" ? this.getIdeaformFilters().replace(/\'/g, "").replace(/\"/g, "").split(",") : undefined;
		var aCompanyViewFilters = typeof this.getCompanyViewFilters === "function" ? this.getCompanyViewFilters().replace(/\'/g, "").replace(/\"/g, "").split(",") : undefined;
		var aTags = this.getViewProperty("/List/TAGS");
		var tagGroup = {};
		var tagGroupKey = [];
		aTags.forEach(function(item, index) {
			if (!tagGroup[item.ROOTGROUPID]) {
				tagGroup[item.ROOTGROUPID] = [];
				tagGroup[item.ROOTGROUPID].push(item.ID);
				tagGroupKey.push(item.ROOTGROUPID);
			} else {
				tagGroup[item.ROOTGROUPID].push(item.ID);
			}
		});

		var oParameter = {
			searchToken: oBindingParams.SearchTerm || "",
			tagsToken: tagGroup[tagGroupKey[0]] ? tagGroup[tagGroupKey[0]].join(",") : "",
			tagsToken1: tagGroup[tagGroupKey[1]] ? tagGroup[tagGroupKey[1]].join(",") : "",
			tagsToken2: tagGroup[tagGroupKey[2]] ? tagGroup[tagGroupKey[2]].join(",") : "",
			tagsToken3: tagGroup[tagGroupKey[3]] ? tagGroup[tagGroupKey[3]].join(",") : "",
			tagsToken4: tagGroup[tagGroupKey[4]] ? tagGroup[tagGroupKey[4]].join(",") : "",
			filterName: oBindingParams.VariantFilter || "",
			filterBackoffice: bIsManaged ? "1" : "0",
			c1: sIdeaformFilters ? (sIdeaformFilters[1].slice(3) || "" ) : "",
			o1: sIdeaformFilters ? (sIdeaformFilters[2].slice(3) || -1 ) : -1,
			v1: sIdeaformFilters ? (decodeURIComponent(sIdeaformFilters[3].slice(3)) || "") : "",
			c2: sIdeaformFilters ? (sIdeaformFilters[4].slice(3) || "") : "",
			o2: sIdeaformFilters ? (sIdeaformFilters[5].slice(3) || -1 ) : "",
			v2: sIdeaformFilters ? (decodeURIComponent(sIdeaformFilters[6].slice(3)) || "") : "",
			c3: sIdeaformFilters ? (sIdeaformFilters[7].slice(3) || "" ) : "",
			o3: sIdeaformFilters ? (sIdeaformFilters[8].slice(3) || -1) : -1,
			v3: sIdeaformFilters ? (decodeURIComponent(sIdeaformFilters[9].slice(3)) || "") : "",
			cvy: aCompanyViewFilters ? (aCompanyViewFilters[3].slice(4) || 0 ) : 0,
			cvr: aCompanyViewFilters ? (aCompanyViewFilters[2].slice(4) || 0 ) : 0,
			cvt: aCompanyViewFilters ? (decodeURIComponent(aCompanyViewFilters[1].slice(4)) || "") : "",
			filterString: sFilterParams || "",
			fileName: sFilename,
			fileFormat: sFormat
		};
		if(!bIsManaged){
		var oGroupVariant = typeof this.getGroupViewParameters === "function" ? this.getGroupViewParameters(oBindingParams) : undefined;
		    oParameter.cvy = oGroupVariant ? oGroupVariant.groupType : 0;
		    oParameter.cvr = oGroupVariant ? oGroupVariant.groupRole : 0;
		    oParameter.cvt = oGroupVariant ? oGroupVariant.groupToken : "";		    
		} else {
            oParameter.searchType = typeof this.getSearchType === "function" ? this.getSearchType() : 0;		    
		}

		var sFilterContent = oParameter.filterString ? (/\$filter=(.*)/gm.exec(sFilterParams)[1]) : "";

		var aIdeasId = [];
		if (this.getViewProperty("/List/SELECT_ALL") || this.getViewProperty("/List/EXPORT_ALL")) {
			oParameter.ideasId = "";
			for (var p in this._oDeselectionMap) {
				if (this._oDeselectionMap.hasOwnProperty(p)) {
					sFilterContent += "%20and%20ID%20ne%20" + p;
				}
			}
			if (sFilterContent.indexOf("%20and%20") === 0) {
				sFilterContent = sFilterContent.slice(9);
			}
			oParameter.filterString = "$filter=(" + sFilterContent + ")";
		} else {
			jQuery.each(this._oSelectionMap, function(iIdx, oData) {
				aIdeasId.push(oData.ID);
			});
			// if this is no selected items then not do export
			if (aIdeasId.length === 0) {
				MessageToast.show(this.getText("MSG_EXPORT_IDEA_NO_SELECTED"));
				return undefined;
			}
			oParameter.ideasId = aIdeasId.join(",");
		}
		return oParameter;
	};

	ExportMixin.onChartExportSVG = function(oEvent) {
		/*Export.i18n = this.getModel("i18n");
		var oExportControl = typeof this.getExportChartControl === "function" ? this.getExportChartControl() : this.getChart();
		Export.exportChartAdvanced(oExportControl, this.getChartTitle && this.getChartTitle(), oEvent.getSource());*/

		var that = this;
		BusyIndicator1.show(0);
		setTimeout(function() {
			sap.ui.require(["sap/ino/commons/util/Export"], function(Export) {
				Export.i18n = that.getModel("i18n");
				var oExportControl = typeof that.getExportChartControl === "function" ? that.getExportChartControl() : that.getChart();
				Export.exportChartAdvanced(oExportControl, that.getChartTitle && that.getChartTitle(), oEvent.getSource());
			});
		});
	};

	ExportMixin._checkExportCount = function(sType, oLimitCount) {
		var that = this,
			oCountConfig = {
				"xls": 2000,
				"csv": 3000,
				"pptx": 2000
			};
		var viewName = that.getView().getProperty("viewName");
		if (viewName && viewName.indexOf("idea") <= 0) {
			return true;
		}
		var sCountConfig = Configuration.getSystemSetting("sap.ino.config.COUNT_LIMIT_EXPORT_IDEAS"),
			aCountConfig;
		if (sCountConfig) {
			aCountConfig = sCountConfig.split("|");
			oCountConfig.xls = Number(aCountConfig[0]);
			oCountConfig.csv = Number(aCountConfig[1]);
			oCountConfig.pptx = Number(aCountConfig[2]);
		}
		oLimitCount[sType] = oCountConfig[sType];
		var oExportControl = typeof that.getExportControl === "function" ? that.getExportControl() : that.getList();
		if (!oExportControl) {
			return true;
		}
		var oParameter = that._getExportParam(sType, oExportControl);
		if (!oParameter) {
			return true;
		}
		if (oParameter.ideasId && oParameter.ideasId.split(",").length <= oCountConfig[sType]) {
			return true;
		}
		if (!that.getView().getModel("view") || !that.getView().getModel("view").getProperty("/List/VARIANT")) {
			return true;
		}
		var filterName = that.getView().getModel("view").getProperty("/List/VARIANT");
		var oCount = Configuration.getIdeaFilterCountData();
		if (oCount && oCount[filterName] && oCount[filterName] > oCountConfig[sType]) {
			return false;
		}

		return true;
	};

	return ExportMixin;
});
}; // end of sap/ino/vc/commons/mixins/ExportMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.commons.mixins.GlobalSearchMixin') ) {
jQuery.sap.declare('sap.ino.vc.commons.mixins.GlobalSearchMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/commons/mixins/GlobalSearchMixin",[
    "sap/ino/commons/models/aof/PropertyModel",
    "sap/m/MessageToast",
    "sap/ui/model/json/JSONModel",
	"sap/ino/commons/application/Configuration"
], function(PropertyModel, MessageToast, JSONModel, Configuration) {

	var GlobalSearchMixin = function() {
		throw "Mixin may not be instantiated directly";
	};

	var openSearch = {
		'search': {
			key: 'search',
			value: 'CTRL_GLOBAL_SEARCH_ALL'
		},
		'campaignlist': {
			key: 'campaignlist',
			value: 'CTRL_GLOBAL_SEARCH_CAMPAIGNS'
		},
		'campaignlistvariant': {
			key: 'campaignlistvariant',
			value: 'CTRL_GLOBAL_SEARCH_CAMPAIGNS'
		},
		'idealist': {
			key: 'idealist',
			value: 'CTRL_GLOBAL_SEARCH_IDEAS'
		},
		'idealistbycompany': {
			key: 'idealistbycompany',
			value: Configuration.getGroupConfiguration().DISPLAY_LABEL,
			bNotFormatter: true
		},
		'idealistvariant': {
			key: 'idealistvariant',
			value: 'CTRL_GLOBAL_SEARCH_IDEAS'
		},
		'peoplelist': {
			key: 'peoplelist',
			value: 'CTRL_GLOBAL_SEARCH_USERS'
		},
		'peoplelistvariant': {
			key: 'peoplelistvariant',
			value: 'CTRL_GLOBAL_SEARCH_USERS'
		},
		'walllist': {
			key: 'walllist',
			value: 'CTRL_GLOBAL_SEARCH_WALLS'
		},
		'walllistvariant': {
			key: 'walllistvariant',
			value: 'CTRL_GLOBAL_SEARCH_WALLS'
		},
		'taglist': {
			key: 'taglist',
			value: 'CTRL_GLOBAL_SEARCH_TAGS'
		},
		'taglistvariant': {
			key: 'taglistvariant',
			value: 'CTRL_GLOBAL_SEARCH_TAGS'
		},
		'campaign': {
			key: 'campaign',
			value: 'CTRL_GLOBAL_SEARCH_CURRENT_CAMPAIGN'
		},
		'searchcategory': {
			key: 'searchcategory',
			value: 'CTRL_GLOBAL_SEARCH_CURRENT_CAMPAIGN'
		},
		'campaign-idealist': {
			key: 'campaign-idealist',
			value: 'CTRL_GLOBAL_SEARCH_CAMPAIGN_IDEAS'
		},
		'campaign-idealistvariant': {
			key: 'campaign-idealistvariant',
			value: 'CTRL_GLOBAL_SEARCH_CAMPAIGN_IDEAS'
		},
		'campaign-idealistbycompany': {
			key: 'campaign-idealistbycompany',
			value: Configuration.getGroupConfiguration().DISPLAY_LABEL,
			bNotFormatter: true
		},
		'campaign-bloglist': {
			key: 'campaign-bloglist',
			value: 'CTRL_GLOBAL_SEARCH_CAMPAIGN_BLOGS'
		},
		'campaign-bloglistvariant': {
			key: 'campaign-bloglistvariant',
			value: 'CTRL_GLOBAL_SEARCH_CAMPAIGN_BLOGS'
		},
		'bloglist': {
			key: 'bloglist',
			value: 'CTRL_GLOBAL_SEARCH_BLOGS'
		},
		'bloglistvariant': {
			key: 'bloglistvariant',
			value: 'CTRL_GLOBAL_SEARCH_BLOGS'
		}
	};

	var searchCategory = [openSearch.search, openSearch.campaignlist, openSearch.idealist, openSearch.peoplelist, openSearch.walllist,
			openSearch.taglist];

	var searchType = {
		ALL: 'all',
		CAMPAIGN: 'campaign'
	};

	var searchVariant = {
		ALL: 'all',
		MANAGE: 'manage'
	};

	GlobalSearchMixin.setCategroyData = function() {
		var searchModel = this.getOwnerComponent().getModel('search');
		if (searchModel) {
			if (Configuration.getSystemSetting("sap.ino.config.PEOPLE_MENU_FOR_ALL_ACTIVE") !== "1") {
				this._removeCategory(openSearch.peoplelist.key);
			}
			searchModel.setProperty('/category', searchCategory);
		}
	};

	GlobalSearchMixin.listenRouteMatch = function() {
		var self = this;
		this.getOwnerComponent().getRootView().attachEvent('routeMatchedEvent', function(e) {
			var category = e.getParameters().name;
			var selectedCategory = this.getModel('search').getProperty('/selectedCategory');
			var searchAguments = $.extend({}, e.getParameters().arguments);
			self._handleSearchRule(category, searchAguments, selectedCategory);
		});
	};

	// stupid design. 
	GlobalSearchMixin._handleSearchRule = function(key, searchAguments, selectedCategory) {
		var self = this;
		var searchModel = self.getOwnerComponent().getModel('search');
		var params = searchAguments;
		var category = (key === "idea-display" ? openSearch.campaign.key : key);

		//enable company'idea search only for backoffice access
		var userAccess = this.getOwnerComponent().getModel("component").getProperty("/SHOW_BACKOFFICE");
		var companyViewEnabled = Configuration.getGroupConfiguration().ENABLE_GROUP_VIEW;
		if (!userAccess || !companyViewEnabled) {
			this._removeCategory(openSearch['campaign-idealistbycompany'].key);
			this._removeCategory(openSearch.idealistbycompany.key);
			selectedCategory = category;
		} else if (userAccess && companyViewEnabled) {
			if (category === 'campaign-idealistvariant' || category === 'campaign-idealist') {
				this._addCategory(openSearch['campaign-idealistbycompany']);
				this._removeCategory(openSearch.idealistbycompany.key);
				selectedCategory = selectedCategory !== 'campaign-idealistbycompany' ? category : selectedCategory;
			} else if (category === 'idealistvariant' || category === 'idealist') {
				this._addCategory(openSearch.idealistbycompany);
				this._removeCategory(openSearch['campaign-idealistbycompany'].key);
				selectedCategory = selectedCategory !== 'idealistbycompany' ? category : selectedCategory;
			} else if (category === 'home') {
				this._addCategory(openSearch.idealistbycompany);
				this._removeCategory(openSearch['campaign-idealistbycompany'].key);
				selectedCategory = category;
			} else {
				this._removeCategory(openSearch['campaign-idealistbycompany'].key);
				this._removeCategory(openSearch.idealistbycompany.key);
				selectedCategory = category;
			}
		}

		switch (category) {
			case openSearch.campaignlistvariant.key:
				this._replaceKey([openSearch.campaignlist.key], openSearch.campaignlistvariant.key);
				break;
			case openSearch.campaignlist.key:
				this._replaceKey([openSearch.campaignlistvariant.key], openSearch.campaignlist.key);
				break;
			case openSearch.idealistvariant.key:
				this._replaceKey([openSearch.idealist.key], openSearch.idealistvariant.key);
				break;
			case openSearch.idealist.key:
				this._replaceKey([openSearch.idealistvariant.key], openSearch.idealist.key);
				break;
			case openSearch.campaign.key:
				this._addCategory(openSearch.campaign);
				break;
			case openSearch.searchcategory.key:
				this._addCategory(openSearch.searchcategory);
				break;
			case openSearch.walllist.key:
				this._replaceKey([openSearch.walllistvariant.key], openSearch.walllist.key);
				break;
			case openSearch.walllistvariant.key:
				this._replaceKey([openSearch.walllist.key], openSearch.walllistvariant.key);
				break;
			case openSearch.taglist.key:
				this._replaceKey([openSearch.taglistvariant.key], openSearch.taglist.key);
				break;
			case openSearch.taglistvariant.key:
				this._replaceKey([openSearch.taglist.key], openSearch.taglistvariant.key);
				break;
			case openSearch.peoplelist.key:
				this._replaceKey([openSearch.peoplelistvariant.key], openSearch.peoplelist.key);
				break;
			case openSearch.peoplelistvariant.key:
				this._replaceKey([openSearch.peoplelist.key], openSearch.peoplelistvariant.key);
				break;
			case openSearch['campaign-idealist'].key:
				this._addCategory(openSearch['campaign-idealist']);
				break;
			case openSearch['campaign-idealistvariant'].key:
				this._addCategory(openSearch['campaign-idealistvariant']);
				break;
			case openSearch['campaign-bloglist'].key:
				this._addCategory(openSearch['campaign-bloglist']);
				break;
			case openSearch['campaign-bloglistvariant'].key:
				this._addCategory(openSearch['campaign-bloglistvariant']);
				break;
			case openSearch.bloglist.key:
				this._addCategory(openSearch.bloglist);
				break;
			case openSearch.bloglistvariant.key:
				this._addCategory(openSearch.bloglistvariant);
				break;
			default:
				category = this._getSelectedCate(key, category);
				break;
		}

		if (category !== openSearch.campaign.key) {
			this._removeCategory(openSearch.campaign.key);
		}

		if (category !== openSearch.searchcategory.key) {
			this._removeCategory(openSearch.searchcategory.key);
		}

		if (category !== openSearch['campaign-idealist'].key) {
			this._removeCategory(openSearch['campaign-idealist'].key);
		}

		if (category !== openSearch['campaign-idealistvariant'].key) {
			this._removeCategory(openSearch['campaign-idealistvariant'].key);
		}

		if (category !== openSearch['campaign-bloglist'].key) {
			this._removeCategory(openSearch['campaign-bloglist'].key);
		}

		if (category !== openSearch['campaign-bloglistvariant'].key) {
			this._removeCategory(openSearch['campaign-bloglistvariant'].key);
		}

		if (category !== openSearch.bloglist.key) {
			this._removeCategory(openSearch.bloglist.key);
		}

		if (category !== openSearch.bloglistvariant.key) {
			this._removeCategory(openSearch.bloglistvariant.key);
		}
		if (key !== "idea-display") {
			searchModel.setProperty('/searchAguments', params);
		}

		if (selectedCategory === 'idealistbycompany' || selectedCategory === 'campaign-idealistbycompany') {
			searchModel.setProperty('/selectedCategory', selectedCategory);
		} else {
			searchModel.setProperty('/selectedCategory', category);
		}

	};

	GlobalSearchMixin._getParams = function(key, params) {
		if (key === "idea-display") {
			return openSearch.campaign.key;
		}
		return params;
	};

	GlobalSearchMixin._getSelectedCate = function(key, category) {
		if (key === "idea-display") {
			return openSearch.campaign.key;
		}
		return openSearch[key] ? category : openSearch.search.key;
	};

	GlobalSearchMixin._replaceKey = function(keys, replace) {
		var result = this._findCategory(keys);
		if (!result.value || !openSearch[replace]) {
			return false;
		}
		searchCategory[result.index] = openSearch[replace];
	};

	GlobalSearchMixin._findCategory = function(keys) {
		var result = {};
		for (var i = 0; i < searchCategory.length; i++) {
			if (~keys.indexOf(searchCategory[i].key)) {
				result.value = searchCategory[i];
				result.index = i;
				break;
			}
		}
		return result;
	};

	GlobalSearchMixin._addCategory = function(category) {
		if (!category || !category.key || !category.value) {
			return false;
		}
		var result = this._findCategory([category.key]);
		if (result.value) {
			return false;
		}
		searchCategory.unshift(category);
	};

	GlobalSearchMixin._removeCategory = function(key) {
		var result = this._findCategory([key]);
		if (!result.value) {
			return false;
		}
		searchCategory.splice(result.index, 1);
	};

	GlobalSearchMixin._handleSearchNavgate = function(keyword, data) {
		var category = openSearch[data.category] ? data.category : openSearch.search.key;
		if (!data.param.variant && category === "idealistvariant") {
			category = "idealist";
		}
		var query = $.extend({}, data.param['?query']);
		var userAccess = this.getOwnerComponent().getModel("component").getProperty("/SHOW_BACKOFFICE");
		var defaulVariant = userAccess ? searchVariant.MANAGE : searchVariant.ALL;

		var navToParams = {
			query: query,
			variant: data.param.variant || defaulVariant
		};

		if (keyword) {
			navToParams.query.search = keyword;
		}

		if (!keyword && !$.isEmptyObject(navToParams.query)) {
			delete navToParams.query.search;
		}

		if (!keyword && $.isEmptyObject(navToParams.query)) {
			return false;
		}

		if (navToParams.query.type) {
			delete navToParams.query.type;
		}

		if (navToParams.query.id) {
			delete navToParams.query.id;
		}

		switch (category) {
			case openSearch.searchcategory.key:
				$.extend(navToParams, {
					query: {
						type: searchType.CAMPAIGN,
						id: data.param['?query'].id,
						search: keyword || '',
						managed: 0
					}
				});
				break;
			case openSearch.campaign.key:
				category = openSearch.searchcategory.key;
				$.extend(navToParams, {
					query: {
						type: searchType.CAMPAIGN,
						id: data.param.id,
						search: keyword || '',
						managed: 0
					}
				});
				break;
			case openSearch['campaign-bloglist'].key:
			case openSearch['campaign-bloglistvariant'].key:
			case openSearch['campaign-idealistvariant'].key:
			case openSearch['campaign-idealist'].key:
			case openSearch['campaign-idealistbycompany'].key:
				$.extend(true, navToParams, {
					id: data.param.id
				});
				break;
			case openSearch.search.key:
				$.extend(navToParams, {
					query: {
						type: searchType.ALL,
						search: keyword || '',
						managed: Number(userAccess || false)
					}
				});
				break;
			default:
				$.extend(true, navToParams, {
					query: {
						search: keyword || ''
					}
				});
				break;
		}

		// set company view route
		if (category === 'idealistbycompany') {
			if (data.param.variant) {
				category = 'idealistvariant';
			} else {
				category = 'idealist';
			}
		} else if (category === 'campaign-idealistbycompany') {
			if (data.param.variant) {
				category = 'campaign-idealistvariant';
			} else {
				category = 'campaign-idealist';
			}

		}

		this.getOwnerComponent().navigateTo(category, navToParams);

	};

	GlobalSearchMixin.onSearch = function(oEvent) {
		var params = oEvent.getParameters();
		var searchKey = window.encodeURIComponent(params.search);

		if (params.search && params.category && params.param && (params.param.variant === 'all' || params.param.variant === 'manage')) {
			params.param['?query'] = params.param['?query'] || {};
			params.param['?query'].sort = "SEARCH_SCORE DESC";
		} else if (params.param && params.param['?query']) {
			params.param['?query'].sort = "";
		}
		this._handleSearchNavgate(searchKey, params);
	};

	return GlobalSearchMixin;
});
}; // end of sap/ino/vc/commons/mixins/GlobalSearchMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.commons.mixins.MailMixin') ) {
jQuery.sap.declare('sap.ino.vc.commons.mixins.MailMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/commons/mixins/MailMixin",[
    "sap/ino/commons/models/aof/PropertyModel",
    "sap/m/MessageToast"
], function() {
	"use strict";

	/**
	 * @class
	 * Mixin that generate mail body and subject
	 */
	var MailMixin = function() {
		throw "Mixin may not be instantiated directly";
	};

	MailMixin.createMailContent = function() {
		var oContextObjectModel = this.getView().getModel("object") || this.getView().getModel("contextObject");
		if (oContextObjectModel) {
			var sSubject = "";
			var sContextObjectName = oContextObjectModel.getProperty("/NAME");
			var sContextObjectType = oContextObjectModel.getProperty("/_OBJECT_TYPE_CODE");
			if (sContextObjectType === "IDEA") {
				sSubject = this.getText("MAIL_SUBJECT_TEMPLATE", [oContextObjectModel.getProperty("/CAMPAIGN_NAME"), sContextObjectName]);
			} else {
				sSubject = sContextObjectName;
			}

			var sBody = "";
			var iContextObjectId = oContextObjectModel.getProperty("/ID");
			if (sContextObjectType && iContextObjectId) {
				var sNavigationTarget = sContextObjectType.toLowerCase();
				if (sNavigationTarget === "idea" || sNavigationTarget === "evaluation") {
					sNavigationTarget += "-display";
				}
				var sOrigin = document.location.origin;
				if (!sOrigin) {
					sOrigin = window.location.protocol + "//" + window.location.hostname + (window.location.port ? ':' + window.location.port : '');
				}
				var sURL = sOrigin +
					document.location.pathname +
					this.getOwnerComponent().getNavigationLink(sNavigationTarget, {
						id: iContextObjectId
					});
				sBody = this.getText("MAIL_TEMPLATE_" + sContextObjectType, sURL);
			}
			return {
				subject: sSubject,
				body: sBody
			};
		} else {
			var sSubject = "";
			var sBody = "";
			var sOrigin = document.location.origin;

			if (!sOrigin) {
				sOrigin = window.location.protocol + "//" + window.location.hostname + (window.location.port ? ':' + window.location.port : '');
			}

			var sURL = sOrigin +
				document.location.pathname;

			sBody = this.getText("MAIL_TEMPLATE_INM", sURL);
			
			return {
				subject: sSubject,
				body: sBody
			};
		}
	};

	return MailMixin;
});
}; // end of sap/ino/vc/commons/mixins/MailMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.commons.mixins.UI5Mixin') ) {
jQuery.sap.declare('sap.ino.vc.commons.mixins.UI5Mixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/commons/mixins/UI5Mixin",[
    "sap/ino/commons/models/aof/PropertyModel",
    "sap/m/MessageToast"
], function() {
	"use strict";

	/**
	 * @class
	 * Mixin that fix some bug in UI5 lib
	 */
	var UI5Mixin = function() {
		throw "Mixin may not be instantiated directly";
	};

	UI5Mixin.changeMethodGetObjectInV2ODataModel = function() {
		sap.ui.model.odata.v2.ODataModel.prototype._getObject = function(sPath, oContext, bOriginalValue) {
			var oNode = this.isLegacySyntax() ? this.oData : null,
				oChangedNode, oOrigNode,
				sResolvedPath = this.resolve(sPath, oContext),
				iSeparator, sDataPath, sMetaPath, oMetaContext, sKey, oMetaModel;

			if (!sResolvedPath) {
				return oNode;
			}

			//check for metadata path
			if (this._isMetadataPath(sResolvedPath)) {
				if (this.oMetadata && this.oMetadata.isLoaded()) {
					if (this.isMetaModelPath(sResolvedPath)) {
						// Metadata binding resolved by ODataMetaModel
						iSeparator = sResolvedPath.indexOf('/##');
						oMetaModel = this.getMetaModel();
						if (!this.bMetaModelLoaded) {
							return null;
						}
						sDataPath = sResolvedPath.substr(0, iSeparator);
						sMetaPath = sResolvedPath.substr(iSeparator + 3);
						oMetaContext = oMetaModel.getMetaContext(sDataPath);
						oNode = oMetaModel.getProperty(sMetaPath, oMetaContext);
					} else {
						// Metadata binding resolved by ODataMetadata
						oNode = this.oMetadata._getAnnotation(sResolvedPath);
					}
				}
			} else if (/^\/IdeaEvaluation\(\d+\)\/EvalAttachments$/gi.test(sResolvedPath)) {
				oNode = undefined;
			} else {
				// doesn't make any sense, but used to work
				if (sResolvedPath === "/") {
					return this.oData;
				}
				var aParts = sResolvedPath.split("/"),
					iIndex = 0;
				// absolute path starting with slash
				sKey = aParts[1];
				aParts.splice(0, 2);

				oChangedNode = this.mChangedEntities[sKey];
				oOrigNode = this._getEntity(sKey);
				oNode = bOriginalValue ? oOrigNode : oChangedNode || oOrigNode;
				while (oNode && aParts[iIndex]) {
					var bHasChange = oChangedNode && oChangedNode.hasOwnProperty(aParts[iIndex]);
					oChangedNode = oChangedNode && oChangedNode[aParts[iIndex]];
					oOrigNode = oOrigNode && oOrigNode[aParts[iIndex]];
					oNode = bOriginalValue || !bHasChange ? oOrigNode : oChangedNode;
					if (oNode) {
						if (oNode.__ref) {
							oChangedNode = this.mChangedEntities[oNode.__ref];
							oOrigNode = this._getEntity(oNode.__ref);
							oNode = bOriginalValue ? oOrigNode : oChangedNode || oOrigNode;
						} else if (oNode.__list) {
							oNode = oNode.__list;
						} else if (oNode.__deferred) {
							// set to undefined and not to null because navigation properties can have a null value
							oNode = undefined;
						}
					}
					iIndex++;
				}
			}
			//if we have a changed Entity/complex type we need to extend it with the backend data
			if (jQuery.isPlainObject(oChangedNode)) {
				oNode = bOriginalValue ? oOrigNode : jQuery.sap.extend(true, {}, oOrigNode, oChangedNode);
			}
			return oNode;
		};
	};

	return UI5Mixin;
});
}; // end of sap/ino/vc/commons/mixins/UI5Mixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.follow.mixins.FeedsMixin') ) {
jQuery.sap.declare('sap.ino.vc.follow.mixins.FeedsMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/follow/mixins/FeedsMixin",[
    "sap/ino/commons/application/Configuration",
    "sap/ui/model/json/JSONModel",
    "sap/m/Label",
    "sap/ino/controls/IdentityActionCard",
    "sap/ino/vc/commons/mixins/IdentityQuickviewMixin"
], function(Configuration, JSONModel, Label, IdentityActionCard,IdentityQuickviewMixin) {
    "use strict";
    
    var FeedsMixin = function() {
        throw "Mixin may not be instantiated directly";
    };
    
	FeedsMixin.onOpenActor = function(oEvent) {
		var oSource = oEvent.getSource();
		var sModelName = oSource.getBindingInfo("text") && oSource.getBindingInfo("text").parts[0].model || "data";
		var iIdentityId = oSource.getBindingContext(sModelName).getProperty("ACTOR_ID");
		if (!this.oIdentityCardView) {
			this.oIdentityCardView = sap.ui.xmlview({
				viewName: "sap.ino.vc.iam.IdentityCard"
			});
			this.getView().addDependent(this.oIdentityCardView);
		}
		this.oIdentityCardView.getController().open(oSource, iIdentityId);
	};
	
    /**
     * adds identity list item in panel
     * 
     * @private
     * @param   {object}    oSourceCtrl     the originating source control
     * @param   {int}       iIdentId         an identity ID
     */
    FeedsMixin._createPanelIdentity = function(oSourceCtrl, iIdentId) {
        var oSourceCtrl2 = oSourceCtrl;
        var oCtrl;
        
//         if (iIdentId) {
//             var sPath = "/Identity(" + iIdentId + ")";
//             var that = this;
//             var oDatamodel = this.getModel("data");
// 			oDatamodel.read(sPath, {
// 			    async: true,
// 				success: function(oData) {
// 				    var iImgId = oData.IDENTITY_IMAGE_ID;
// 				    var sUserName = oData.NAME;
// 				    oSourceCtrl2.removeAllContent();
// 					oCtrl = new IdentityActionCard({
//                         identityId: iIdentId,
//                         userImageUrl: iImgId ? that.formatter.userImage(iImgId) : null,
//                         userName: sUserName,
//                         actionable: false,
//                         pinnable: that.getModel("clipboard").getProperty("/enabled"),
//                         isPinned: that.formatIsUserInClipboard(iIdentId),
//                         pinPressed: [that.onUserPinPressed, that],
//                         identityPress: [that.onOpenIdentityQuickView, that]
//                     });
//                     oSourceCtrl2.addContent(oCtrl);
// 				},
// 				error: function() {
// 				  // idea has been deleted
// 				    oSourceCtrl2.removeAllContent();
//                     oCtrl = new Label({text: {path: "i18n>ACTIVITIES_MSG_TAG_NON_EXISTENT"}});
//                     oCtrl.addStyleClass("sapInoFeedDetailBox");
//                     oSourceCtrl2.addContent(oCtrl);  
// 				}
// 			});
//         } else {
//             // idea has been deleted
//             oSourceCtrl2.removeAllContent();
//             oCtrl = new Label({text: this.getText("ACTIVITIES_MSG_TAG_NON_EXISTENT")});
//             oCtrl.addStyleClass("sapInoFeedDetailBox");
//             oSourceCtrl2.addContent(oCtrl);
//         }
    };
    
    /**
     * adds tag to panel
     * 
     * @private
     * @param   {object}    oSourceCtrl     the originating source control
     * @param   {int}       iTagId          an tag ID
     */ 
    FeedsMixin._createPanelTag = function(oSourceCtrl, iTagId) {
        var oSourceCtrl2 = oSourceCtrl;
        var oCtrl;
        
        if (iTagId) {
            var sPath = "/SearchTagsAllFull(searchToken='',ID=" + iTagId + ")/";
            var that = this;
            var oDatamodel = this.getModel("data");
			oDatamodel.read(sPath, {
			    async: true,
				success: function() {
				    oSourceCtrl2.removeAllContent();
					oCtrl = that.getFragment("sap.ino.vc.tag.fragments.TagCard").clone();
                    oCtrl.addStyleClass("sapInoFeedDetailBox");
                    oCtrl.bindElement({path: "data>/SearchTagsAllFull(searchToken='',ID=" + iTagId + ")"});
                    oSourceCtrl2.addContent(oCtrl);
				},
				error: function() {
				  // idea has been deleted
				    oSourceCtrl2.removeAllContent();
                    oCtrl = new Label({text: {path: "i18n>ACTIVITIES_MSG_TAG_NON_EXISTENT"}});
                    oCtrl.addStyleClass("sapInoFeedDetailBox");
                    oSourceCtrl2.addContent(oCtrl);  
				}
			});
            
        } else {
            // idea has been deleted
            oSourceCtrl2.removeAllContent();
            oCtrl = new Label({text: this.getText("ACTIVITIES_MSG_TAG_NON_EXISTENT")});
            oCtrl.addStyleClass("sapInoFeedDetailBox");
            oSourceCtrl2.addContent(oCtrl);
        }
    };
    
    /**
     * adds attachment to panel
     * 
     * @private
     * @param   {object}    oSourceCtrl     the originating source control
     * @param   {int}       iAttachmentId         an attachment ID
     */ 
    FeedsMixin._createPanelAttachment = function(oSourceCtrl, iAttachmentId, sAttachmentType, bInternalAttachment) {
        var oSourceCtrl2 = oSourceCtrl;
        var oCtrl;
        var that = this;
        if (iAttachmentId) {
            var sPath = "/" + ( sAttachmentType === "CAMPAIGN" ? "Campaign" : "Idea") + (bInternalAttachment ? "Internal" : "") + "Attachment(" + iAttachmentId + ")/";
            var oDatamodel = this.getModel("data");
			oDatamodel.read(sPath, {
				async: true,
				success: function() {
				    oSourceCtrl2.removeAllContent();
				    // add suffix id to make attachment url work
					oCtrl = that.getFragment("sap.ino.vc.attachment.fragments.AttachmentListItem").clone((new Date()).getTime() + "-0");
                    oCtrl.bindElement({path: "data>" + sPath});
                    oSourceCtrl2.addContent(oCtrl);
				},
				error: function() {
				  // attachment has been deleted
				    oSourceCtrl2.removeAllContent();
                    oCtrl = new Label({text: {path: "i18n>ACTIVITIES_MSG_ATTACHMENT_NON_EXISTENT"}});
                    oCtrl.addStyleClass("sapInoFeedDetailBox");
                    oSourceCtrl2.addContent(oCtrl);  
				}
			});
        } else {
            // blog has been deleted
            oSourceCtrl2.removeAllContent();
            oCtrl = new Label({text: this.getText("ACTIVITIES_MSG_ATTACHMENT_NON_EXISTENT")});
            oCtrl.addStyleClass("sapInoFeedDetailBox");
            oSourceCtrl2.addContent(oCtrl);
        }
        
    };
    
    /**
     * opens wall
     */ 
    FeedsMixin.onOpenWall = function(oEvent) {
        var iWallId = oEvent.getSource().getBindingContext("data").getProperty("INVOLVED_ID");
        if (iWallId) {
            this.navigateToWall("wall", {id : iWallId});
        }
    };
    
    FeedsMixin._onAfterRendering = function(oEvent) {
	    var oSource = oEvent.getSource();
	    var sModelName = oSource.getBindingInfo("content") && oSource.getBindingInfo("content").parts[0].model || "data";
	    var oBindingContext = oSource.getBindingContext(sModelName);
	    var sInvolvedObjectType = oBindingContext.getProperty("INVOLVED_OBJ_TYPE_CODE");
	    var sInvolvedObjectId = oBindingContext.getProperty("INVOLVED_ID");
	    var sObjectType = oBindingContext.getProperty("OBJECT_TYPE_CODE");
	    var sObjectId = oBindingContext.getProperty("OBJECT_ID");
	    var oSourceCtrl = oSource.getParent().getParent().getItems();
	    var bInternalAttachment = oBindingContext.getProperty("FILTER_TYPE_CODE") === "BACKOFFICE";
	    oSourceCtrl = oSourceCtrl[oSourceCtrl.length - 1];
	    if(sObjectType === "TAG"){
	        this._createPanelTag(oSourceCtrl, sObjectId);
	    }else if(sInvolvedObjectType === "TAG"){
	        this._createPanelTag(oSourceCtrl, sInvolvedObjectId);
	    }
	    if(sInvolvedObjectType === "ATTACHMENT" || sInvolvedObjectType === "TITLE_IMAGE" || sInvolvedObjectType === "BACKGROUND_IMAGE" || sInvolvedObjectType === "CAMPAIGN_LIST_IMAGE"){
	        this._createPanelAttachment(oSourceCtrl, sInvolvedObjectId, sObjectType, bInternalAttachment);
	    }
	   // if(sInvolvedObjectType === "WALL"){
	   //     this._createPanelWall(oSourceCtrl, sInvolvedObjectId);
	   // }
	    if(sInvolvedObjectType === "EXPERT" || sInvolvedObjectType === "CONTRIBUTOR" || sInvolvedObjectType === "COACH"){
	        this._createPanelIdentity(oSourceCtrl, sInvolvedObjectId);
	    }
	};
    
    return FeedsMixin;
});
}; // end of sap/ino/vc/follow/mixins/FeedsMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.aof.ApplicationObject') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.aof.ApplicationObject'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONListBinding'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONPropertyBinding'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.PropertyBinding'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.BindingMode'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.String'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.Date'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.DateTime'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.Time'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/models/aof/ApplicationObject",[
    "./ApplicationObjectChange",
    "./MetaModel",
    "./PropertyModel",
    "./MessageParser",
    "sap/ino/commons/application/Configuration",
    "sap/ui/model/json/JSONModel",
    "sap/ui/model/json/JSONListBinding",
    "sap/ui/model/json/JSONPropertyBinding",
    "sap/ui/model/PropertyBinding",
    "sap/ui/model/BindingMode",
    "sap/ino/commons/models/types/IntegerType",
    "sap/ino/commons/models/types/FloatType",
    "sap/ino/commons/models/types/IntBooleanType",
    "sap/ui/model/type/String",
    "sap/ui/model/type/Date",
    "sap/ui/model/type/DateTime",
    "sap/ui/model/type/Time",
    "sap/ino/commons/models/core/ModelSynchronizer"
], function (ApplicationObjectChange,
             MetaModel,
             PropertyModel,
             MessageParser,
             Configuration,
             JSONModel,
             JSONListBinding,
             JSONPropertyBinding,
             PropertyBinding,
             BindingMode,
             IntegerType,
             FloatType,
             IntBooleanType,
             StringType,
             DateType,
             DateTimeType,
             TimeType,
             ModelSynchronizer) {
    "use strict";

    var ObjectType = {
        Standard: "STANDARD",
        Configuration: "CONFIGURATION",
        Stage: "STAGE",
        SystemConfiguration: "SYSTEM_CONFIGURATION"
    };

    var Node = {
        Root: "Root"
    };

    var Action = {
        Create: "create",
        Copy: "copy",
        Update: "update",
        Del: "del",
        Modify: "modify"
    };

    var ApplicationObject = JSONModel.extend("sap.ino.commons.models.aof.ApplicationObject", {
        constructor: function(vKey, oSettings) {
            JSONModel.apply(this, []);
            this._initKey = vKey;
            this._isDeleted = false;
            this._continuousUse = (oSettings && oSettings.continuousUse) || false;
            this._oSettings = oSettings;
            this._oReadSourceSettings = oSettings && oSettings.readSource;
            this._bLastBackendSyncSuppressed = false;
            this._oMessageParser = new MessageParser();
            this._oMessageParser.setProcessor(this);
            if (vKey === undefined || (jQuery.isNumeric(vKey) && vKey <= 0)) {
                vKey = {};
            }
            var oDefaultData;
            if (!vKey || isPlainObject(vKey)) {
                if (isPlainObject(vKey)) {
                    oDefaultData = vKey;
                }
                initCreateData(this, oDefaultData);
                initPropertyModel(vKey, this, {
                    actions: oSettings && oSettings.actions,
                    staticActions: oSettings && oSettings.staticActions,
                    nodes: oSettings && oSettings.nodes
                }, oDefaultData, oSettings && oSettings.propertyDefaults);
            } else {
                initUpdateData(this, vKey);
                oDefaultData = {};
                var oMetadata = this.getApplicationObjectMetadata();
                oDefaultData[oMetadata.nodes.Root.primaryKey] = vKey;
                initPropertyModel(vKey, this, {
                    actions: oSettings && oSettings.actions,
                    staticActions: oSettings && oSettings.staticActions,
                    nodes: oSettings && oSettings.nodes
                }, oDefaultData, oSettings && oSettings.propertyDefaults);
                ModelSynchronizer.putApplicationObject(vKey, this);
            }
        }
    });

    ApplicationObject.ObjectType = ObjectType;
    ApplicationObject.Action = Action;
    ApplicationObject.Node = Node;

    var fnDefaultExtend = ApplicationObject.extend;
    ApplicationObject.extend = function(sClass, oClassInfo) {
        jQuery.sap.assert(oClassInfo.objectName, "objectName needs to be defined");
        var oMetadata = MetaModel.getApplicationObjectMetadata(oClassInfo.objectName);

        jQuery.sap.assert(oMetadata, "Metadata for object " + oClassInfo.objectName + " not available");
        if (!oMetadata) {
            fnDefaultExtend.call(this, sClass, oClassInfo);
            return;
        }
        var oApplicationObject = fnDefaultExtend.call(this, sClass, oClassInfo);

        oApplicationObject.prototype.getApplicationObject = function() {
            return oApplicationObject;
        };

        // getMetadata is already taken by UI5 :-)
        oApplicationObject.getApplicationObjectMetadata = function() {
            return oMetadata;
        };

        oApplicationObject.getObjectName = function() {
            return oClassInfo.objectName;
        };

        oApplicationObject.getEndpointURL = oApplicationObject.prototype.getEndpointURL = function() {
            return MetaModel.getEndpoint(oClassInfo.objectName);
        };

        oApplicationObject.readData = function(vKey, oSettings) {
            if (oApplicationObject.readSource) {
                return oApplicationObject.readSource(vKey, oApplicationObject.getObjectName(), oApplicationObject.getApplicationObjectMetadata(), oSettings);
            }
            return null;
        };

        // remembers action call stack action
        // to be able to recognize internal and external calls
        var iActionCallLevel = 0;
        oApplicationObject.beginAction = function() {
            iActionCallLevel++;
        };

        oApplicationObject.endAction = function() {
            iActionCallLevel--;
        };

        oApplicationObject.isInitiatingAction = function() {
            return iActionCallLevel === 1;
        };

        oApplicationObject.process = process;
        oApplicationObject.parseResponse = parseResponse;
        oApplicationObject.registerDirtyObject = registerDirtyObject;

        var oActionMethods = getActionMethods(oApplicationObject);
        jQuery.extend(oApplicationObject.prototype, oActionMethods.instanceMethods);
        jQuery.extend(oApplicationObject, oActionMethods.staticMethods, oClassInfo);

        return oApplicationObject;
    };

    function isPlainObject(oObject) {
        if (!oObject) {
            return false;
        }
        return oObject.constructor === Object;
    }

    function getActionName(vActionDef) {
        if (typeof vActionDef === "object") {
            return Object.keys(vActionDef)[0];
        }
        return vActionDef;
    }

    function visitDataTree(oData, sNodeName, fnVisit, oParent, oContext) {
        if (!isPlainObject(oData)) {
            return;
        }

        fnVisit(oData, sNodeName, oParent, oContext);
        var oNewContext = jQuery.extend(true, {}, oContext, {
            parentNodeName: sNodeName,
            parentData: oData
        });
        jQuery.each(oData, function(sName, oValue) {
            if (jQuery.isArray(oValue)) {
                jQuery.each(oValue, function(iIndex, oArrayElement) {
                    visitDataTree(oArrayElement, sName, fnVisit, oValue, oNewContext);
                });
            } else {
                visitDataTree(oValue, sNodeName, fnVisit, oParent, oNewContext);
            }
        });
    }

    function visitNodeDataTree(oData, sNodeName, fnVisit, oParent, oContext) {
        if (!isPlainObject(oData) && !jQuery.isArray(oData)) {
            return;
        }
        fnVisit(jQuery.isArray(oData) ? oData : [oData], sNodeName, oParent, oContext);
        if (isPlainObject(oData)) {
            var oNewContext = jQuery.extend(true, {}, oContext, {
                parentNodeName: sNodeName,
                parentData: oData
            });
            jQuery.each(oData, function(sName, oValue) {
                if (jQuery.isArray(oValue)) {
                    visitNodeDataTree(oValue, sName, fnVisit, oData, oNewContext);
                }
            });
        } else if (jQuery.isArray(oData)) {
            jQuery.each(oData, function(index, oDataInstance) {
                jQuery.each(oDataInstance, function(sName, oValue) {
                    if (jQuery.isArray(oValue)) {
                        var oNewContext = jQuery.extend(true, {}, oContext, {
                            parentNodeName: sNodeName,
                            parentData: oData
                        });
                        visitNodeDataTree(oValue, sName, fnVisit, oDataInstance, oNewContext);
                    }
                });
            });
        }
    }

    function findNodeInstance(oMetadata, oData, sFindNodeName, vFindKey) {
        if (sFindNodeName === Node.Root && oData[oMetadata.nodes.Root.primaryKey] === vFindKey) {
            return oData;
        }
        var oResult;
        visitDataTree(oData, Node.Root, function(oChild, sNodeName, oParent) {
            if (sNodeName === sFindNodeName && oMetadata.nodes[sNodeName] && oChild[oMetadata.nodes[sNodeName].primaryKey] === vFindKey) {
                oResult = oChild;
            }
        });
        return oResult;
    }

    function findNode(oMetadata, oData, sFindNodeName) {
        if (sFindNodeName === Node.Root) {
            return [oData];
        }
        var oResult;
        visitNodeDataTree(oData, Node.Root, function(oChild, sNodeName, oParent) {
            if (sNodeName === sFindNodeName) {
                oResult = oChild;
            }
        });
        return oResult;
    }

    function isNodePresent(oData, sFindNodeName) {
        if (sFindNodeName === Node.Root && oData) {
            return true;
        }
        var bResult = false;
        visitDataTree(oData, Node.Root, function(oChild, sNodeName, oParent) {
            if (sNodeName === sFindNodeName) {
                bResult = true;
            }
        });
        return bResult;
    }

    function calculateChangeRequest(oApplicationObject, oBeforeImage, oCurrentImage, bComplete, oObjectInstance) {
        var oMetadata = oApplicationObject.getApplicationObjectMetadata();

        function cleanAttributes(oObjectData) {
            var oCleanData = jQuery.extend(true, {}, oObjectData);
            // recursively remove attributes/nodes not known to the backend
            visitDataTree(oCleanData, Node.Root, function(oData, sNodeName) {
                jQuery.each(oData, function(sName) {
                    var oAttributeMetadata = oMetadata.nodes[sNodeName] && oMetadata.nodes[sNodeName].attributes[sName];
                    var oNodeMetadata = oMetadata.nodes[sName];
                    if (!bComplete && !oAttributeMetadata && !oNodeMetadata) {
                        delete oData[sName];
                        return;
                    }

                    if (!bComplete && oAttributeMetadata && oAttributeMetadata.readOnly && !oAttributeMetadata.isPrimaryKey) {
                        delete oData[sName];
                        return;
                    }

                    // Open: Consider readOnly node with not read-only subnodes
                    if (!bComplete && oNodeMetadata && oNodeMetadata.readOnly) {
                        delete oData[sName];
                        return;
                    }

                    if (oAttributeMetadata) {
                        oData[sName] = mapInitialValueToNull(oData[sName], oAttributeMetadata);
                    }

                });
            });
            return oCleanData;
        }

        if (oApplicationObject.determinations && oApplicationObject.determinations.onNormalizeData) {
            // Data normalization is necessary when read model and the data model assumed for backend are
            // structurally completely different, e.g. to provide better UI binding for it
            // onNormalize is supposed to transform data to the model expected by the backend
            oCurrentImage = jQuery.extend(true, {}, oCurrentImage);
            oCurrentImage = oApplicationObject.determinations.onNormalizeData(oCurrentImage, oObjectInstance);

            oBeforeImage = jQuery.extend(true, {}, oBeforeImage);
            oBeforeImage = oApplicationObject.determinations.onNormalizeData(oBeforeImage, oObjectInstance);
        }

        var oCleanCurrentImage = cleanAttributes(oCurrentImage);
        var oCleanBeforeImage = cleanAttributes(oBeforeImage);

        if (!bComplete) {
            // Only transfer changed deltas
            visitDataTree(oCleanCurrentImage, Node.Root, function(oCurrentData, sNodeName) {
                var sPKName = oMetadata.nodes[sNodeName].primaryKey;
                var vNodeKey = oCurrentData[sPKName];
                var oBeforeImage = findNodeInstance(oMetadata, oCleanBeforeImage, sNodeName, vNodeKey);
                // New nodes are always transferred completely
                if (oCurrentData[sPKName] <= 0) {
                    return;
                }
                jQuery.each(oCurrentData, function(sName, oValue) {
                    var oBeforeValue = oBeforeImage && oBeforeImage[sName];
                    // delete values which are not changed, never delete the primary key
                    if (jQuery.sap.equal(oBeforeValue, oValue) && sName !== sPKName) {
                        delete oCurrentData[sName];
                    }
                });
            });
        }

        return oCleanCurrentImage;
    }

    function getActionMethods(oApplicationObject) {
        var oObject = {
            instanceMethods: {
                create: getCreateProcessor(oApplicationObject),
                copy: getCopyProcessor(oApplicationObject),
                update: getUpdateProcessor(oApplicationObject),
                modify: getModifyProcessor(oApplicationObject),
                del: getDeleteProcessor(oApplicationObject)
            },
            staticMethods: {
                create: getStaticCreateProcessor(oApplicationObject),
                copy: getStaticCopyProcessor(oApplicationObject),
                update: getStaticUpdateProcessor(oApplicationObject),
                modify: getStaticModifyProcessor(oApplicationObject),
                del: getStaticDeleteProcessor(oApplicationObject)
            }
        };

        function isFrameworkAction(sActionName) {
            return jQuery.map(Action, function(sAction) {
                return sAction;
            }).indexOf(sActionName) >= 0;
        }

        var oMetadata = oApplicationObject.getApplicationObjectMetadata();
        var oActions = jQuery.extend({}, oMetadata.actions || {});

        jQuery.each(oApplicationObject.prototype.actions || [], function(sActionName, oActionDefinition) {
            if (!oMetadata.actions[sActionName] && oActionDefinition.execute && jQuery.isFunction(oActionDefinition.execute)) {
                oActions[sActionName] = {
                    name: sActionName
                };
            }
        });

        jQuery.each(oActions, function(sActionName, oActionMetadata) {
            if (isFrameworkAction(sActionName)) {
                return;
            }

            if (oActionMetadata.isStatic === true) {
                oObject.staticMethods[sActionName] = getStaticCustomStaticActionProcessor(oApplicationObject, oActionMetadata);
            } else {
                oObject.instanceMethods[sActionName] = getCustomActionProcessor(oApplicationObject, oActionMetadata);
                oObject.staticMethods[sActionName] = getStaticCustomActionProcessor(oApplicationObject, oActionMetadata);
            }

            var sParameterModelMethod = sActionName + "Model";
            var fnParameterModelMethod = getCustomActionParameterProcessor(oApplicationObject, oActionMetadata);
            oObject.instanceMethods[sParameterModelMethod] = fnParameterModelMethod;
            oObject.staticMethods[sParameterModelMethod] = fnParameterModelMethod;
        });

        return oObject;
    }

    function process(oAjaxSettings) {
        var oDeferred = new jQuery.Deferred();

        var aURLParam = [];
        if (Configuration.isExtensionsDisabled()) {
            aURLParam.push("$disableExtensions=true");
        }
        if (Configuration.isBackendTraceActive()) {
            aURLParam.push("$trace=true");
        }
        if (aURLParam.length > 0) {
            oAjaxSettings.url += "?" + aURLParam.join("&");
        }

        var oAjaxPromise = jQuery.ajax(oAjaxSettings);

        oAjaxPromise.done(function(oResponse, sSuccess, oAjaxResponse) {
            oDeferred.resolve(oResponse, sSuccess, oAjaxResponse);
        });
        oAjaxPromise.fail(function(oResponse) {
            var bXSRFValid = Configuration.validateXSRFToken(oResponse);
            if (!bXSRFValid) {
                // XSRFToken was not valid, but was reloaded in configuration already
                // We need to resend the request with the new XSRFToken
                oAjaxPromise = jQuery.ajax(oAjaxSettings);
                oAjaxPromise.done(function(oResponse, sSuccess, oAjaxResponse) {
                    oDeferred.resolve(oResponse, sSuccess, oAjaxResponse);
                });
                oAjaxPromise.fail(function(oResponse) {
                    // We only try resending once once
                    oDeferred.reject(parseResponse(oResponse));
                });
            } else {
                oDeferred.reject(parseResponse(oResponse));
            }
        });

        return oDeferred.promise();
    }

    function parseResponse(oResponse) {
        var oResponseObject = {};
        // No response text ==> Response is already parsed
        if (!oResponse.responseText) {
            oResponseObject = oResponse;
        } else {
            try {
                oResponseObject = JSON.parse(oResponse.responseText);
            } catch (e) {
                var sText = oResponse.responseText;
                if (sText) {
                    sText = sText.replace(/<(.|\n)*?>/g, " ").replace(/\s+/g, " ").trim();
                }

                oResponseObject.MESSAGES = [{
                    MESSAGE : oResponse.status === 403 ? "MSG_GENERIC_AUTH_ERROR" : "MSG_GENERIC_ERROR",
                    TYPE : "E",
                    PARAMETERS : [sText]
                }];
            }
        }
        if (oResponse.status === 412) {
            oResponseObject.concurrencyConflict = true;
        }
        oResponseObject.getHeader = jQuery.proxy(oResponse.getResponseHeader, oResponse);
        return oResponseObject;
    }

    function registerDirtyObject(aApplicationObjectIds, oApplicationObjectChangeAction) {
        /* jshint validthis: true */
        var that = this;
        var oDate = new Date();
        jQuery.each(aApplicationObjectIds, function(iIndex, iApplicationObjectId) {
            var oChange = {
                object: that,
                key: iApplicationObjectId,
                actionName: oApplicationObjectChangeAction
            };
            ApplicationObjectChange.fireChange(oChange);
        });
    }

    function updateConcurrencyTokenOnFail(oObjectInstance, oDeferred) {
        return function(oResponse) {
            var sConcurrencyToken = oResponse.getHeader("ETag");
            oObjectInstance.setConflictConcurrencyToken(sConcurrencyToken);
            oDeferred.reject(oResponse);
        };
    }

    function create(oApplicationObject, oChangeRequest, oHeaders, bProcessSync) {
        var sURL = oApplicationObject.getEndpointURL();
        var oMetadata = oApplicationObject.getApplicationObjectMetadata();
        if (!oChangeRequest[oMetadata.nodes.Root.primaryKey]) {
            oChangeRequest[oMetadata.nodes.Root.primaryKey] = -1;
        }
        oHeaders = oHeaders || {};
        return oApplicationObject.process({
            url: sURL,
            type: "POST",
            contentType: "application/json; charset=UTF-8",
            data: JSON.stringify(oChangeRequest),
            headers: oHeaders,
            async: !bProcessSync
        });
    }

    function getCreateProcessor(oApplicationObject) {
        var oMetadata = oApplicationObject.getApplicationObjectMetadata();
        if (!oMetadata.actions.create) {
            return undefined;
        }
        return function(oSettings) {
            oApplicationObject.beginAction();
            var bSuppressBackendSync = (oSettings && oSettings.suppressBackendSync) ? true : false;
            var bProcessSync = (oSettings && oSettings.processSync) ? true : false;
            var oObjectInstance = this;
            var oChangeRequest = this.getChangeRequest();
            var oCreateRequest = create(oApplicationObject, oChangeRequest, oObjectInstance.processHeaders(), bProcessSync);
            var oDeferred = new jQuery.Deferred();

            oCreateRequest.always(function(){
                oObjectInstance._parseMessages.apply(oObjectInstance, arguments);
            });
            oCreateRequest.done(function(oResponse) {
                if (oResponse.GENERATED_IDS) {
                    updateHandles(oObjectInstance, oResponse.GENERATED_IDS);
                    oObjectInstance._isNew = false;
                }
                onPersist(oApplicationObject, oObjectInstance.getKey(), oChangeRequest, oObjectInstance, oMetadata.actions.create, bSuppressBackendSync);
                if (!bSuppressBackendSync) {
                    delete oObjectInstance._oDeterminationData;
                }
                oObjectInstance._bLastBackendSyncSuppressed = bSuppressBackendSync;
                oObjectInstance._resolveAfterInitialize(oDeferred, oResponse, true);
            });
            oCreateRequest.fail(oApplicationObject.endAction, oDeferred.reject);
            return oDeferred.promise();
        };
    }

    function getStaticCreateProcessor(oApplicationObject) {
        var oMetadata = oApplicationObject.getApplicationObjectMetadata();
        if (!oMetadata.actions.create) {
            return undefined;
        }
        return function(oChangeRequest) {
            oApplicationObject.beginAction();
            var oRequest = create(oApplicationObject, oChangeRequest);
            oRequest.done(function(oResponse) {
                var vKey;
                if (oResponse.GENERATED_IDS) {
                    vKey = oResponse.GENERATED_IDS[oChangeRequest[oMetadata.nodes.Root.primaryKey]];
                }
                onPersist(oApplicationObject, vKey, oChangeRequest, undefined, oMetadata.actions.create);
            });
            oRequest.fail(oApplicationObject.endAction);
            return oRequest;
        };
    }

    function copy(oApplicationObject, vKey, oCopyRequest, oHeaders, bProcessSync) {
        var sURL = oApplicationObject.getEndpointURL();
        var oMetadata = oApplicationObject.getApplicationObjectMetadata();
        if (!oCopyRequest[oMetadata.nodes.Root.primaryKey]) {
            oCopyRequest[oMetadata.nodes.Root.primaryKey] = -1;
        }
        oHeaders = oHeaders || {};
        return oApplicationObject.process({
            url: sURL + "/" + vKey + "/copy",
            type: "POST",
            contentType: "application/json; charset=UTF-8",
            data: JSON.stringify(oCopyRequest),
            headers: oHeaders,
            async: !bProcessSync
        });
    }

    function getCopyProcessor(oApplicationObject) {
        var oMetadata = oApplicationObject.getApplicationObjectMetadata();
        if (!oMetadata.actions.copy) {
            return undefined;
        }
        return function(oCopyData, oCopySettings) {
            oApplicationObject.beginAction();
            var oObjectInstance = this;
            var vKey = this.getKey();
            if (this.isNew()) {
                jQuery.sap.log.error("Backend copy cannot be done on new objects");
                return;
            }
            var bProcessSync = (oCopySettings && oCopySettings.processSync) ? true : false;

            var oSettings = jQuery.extend({}, this._oSettings);
            var vCopyHandle = (oCopyData && oCopyData[oMetadata.nodes.Root.primaryKey]) || -1;
            var oCopyRequest = copy(oApplicationObject, vKey, oCopyData, oObjectInstance.processHeaders(), bProcessSync);
            var oDeferred = new jQuery.Deferred();

            oCopyRequest.done(function(oResponse) {
                var oCopyInstance = new oApplicationObject(oResponse.GENERATED_IDS[vCopyHandle], oSettings);
                onPersist(oApplicationObject, oCopyInstance.getInitKey(), oCopyData, oCopyInstance, oMetadata.actions.copy);
                oDeferred.resolve(oCopyInstance);
            });
            oCopyRequest.fail(oApplicationObject.endAction, oDeferred.reject);
            return oDeferred.promise();
        };
    }

    function getStaticCopyProcessor(oApplicationObject) {
        var oMetadata = oApplicationObject.getApplicationObjectMetadata();
        if (!oMetadata.actions.copy) {
            return undefined;
        }
        return function(vKey, oCopyRequest) {
            oApplicationObject.beginAction();
            var oRequest = copy(oApplicationObject, vKey, oCopyRequest);
            oRequest.done(function(oResponse) {
                onPersist(oApplicationObject, oResponse.GENERATED_IDS[-1], oCopyRequest, undefined, oMetadata.actions.copy);
            });
            oRequest.fail(oApplicationObject.endAction);
            return oRequest;
        };
    }

    function update(oApplicationObject, vKey, oChangeRequest, sConcurrencyToken, oHeaders, bProcessSync) {
        var sURL = oApplicationObject.getEndpointURL();
        var oMetadata = oApplicationObject.getApplicationObjectMetadata();
        if (!oChangeRequest[oMetadata.nodes.Root.primaryKey]) {
            oChangeRequest[oMetadata.nodes.Root.primaryKey] = vKey;
        }
        var oEmptyUpdate = {};
        oEmptyUpdate[oMetadata.nodes.Root.primaryKey] = vKey;
        if (jQuery.sap.equal(oChangeRequest, oEmptyUpdate)) {
            var oDeferred = new jQuery.Deferred();
            oDeferred.resolve({});
            return oDeferred.promise();
        }
        oHeaders = oHeaders || {};
        if (sConcurrencyToken) {
            oHeaders["If-Match"] = sConcurrencyToken;
        }
        return oApplicationObject.process({
            url: sURL + "/" + vKey,
            type: "PUT",
            contentType: "application/json; charset=UTF-8",
            data: JSON.stringify(oChangeRequest),
            headers: oHeaders,
            async: !bProcessSync
        });
    }

    function getUpdateProcessor(oApplicationObject) {
        var oMetadata = oApplicationObject.getApplicationObjectMetadata();
        if (!oMetadata.actions.update) {
            return undefined;
        }
        return function(oSettings) {
            oApplicationObject.beginAction();

            var bSuppressBackendSync = (jQuery.isPlainObject(oSettings) && oSettings.suppressBackendSync) ? oSettings.suppressBackendSync : false;
            var bIgnoreConcurrencyConflict = (jQuery.isPlainObject(oSettings)) ? oSettings.bIgnoreConcurrencyConflict : oSettings;
            var bProcessSync = (jQuery.isPlainObject(oSettings) && oSettings.processSync) ? oSettings.processSync : false;
            var oObjectInstance = this;
            var oDeferred = new jQuery.Deferred();

            var vKey = this.getKey();
            var oChangeRequest = this.getChangeRequest();
            this.applyConflictConcurrencyToken(bIgnoreConcurrencyConflict);
            var oUpdateRequest = update(oApplicationObject, vKey, oChangeRequest, oObjectInstance._sConcurrencyToken, oObjectInstance.processHeaders(), bProcessSync);

            oUpdateRequest.always(function(){
                oObjectInstance._parseMessages.apply(oObjectInstance, arguments);
            });
            oUpdateRequest.done(function(oResponse) {
                if (oResponse.GENERATED_IDS) {
                    if (!oObjectInstance._continuousUse) {
                        updateHandles(oObjectInstance, oResponse.GENERATED_IDS);
                    }
                }
                onPersist(oApplicationObject, oObjectInstance.getKey(), oChangeRequest, oObjectInstance, oMetadata.actions.update, bSuppressBackendSync);
                oObjectInstance._bLastBackendSyncSuppressed = bSuppressBackendSync;
                oObjectInstance._resolveAfterInitialize(oDeferred, oResponse);
            });
            oUpdateRequest.fail(updateConcurrencyTokenOnFail(oObjectInstance, oDeferred), oApplicationObject.endAction);

            return oDeferred.promise();
        };
    }

    function getStaticUpdateProcessor(oApplicationObject) {
        var oMetadata = oApplicationObject.getApplicationObjectMetadata();
        if (!oMetadata.actions.update) {
            return undefined;
        }
        return function(vKey, oChangeRequest) {
            oApplicationObject.beginAction();
            var oRequest = update(oApplicationObject, vKey, oChangeRequest);
            oRequest.done(function() {
                onPersist(oApplicationObject, vKey, oChangeRequest, undefined, oMetadata.actions.update);
            });

            oRequest.fail(oApplicationObject.endAction);
            return oRequest;
        };
    }

    function getModifyProcessor(oApplicationObject) {
        var oMetadata = oApplicationObject.getApplicationObjectMetadata();
        if (!oMetadata.actions.create && !oMetadata.actions.update) {
            return undefined;
        }
        return function(oSettings) {
            if (this.isNew()) {
                return this.create(oSettings);
            } else {
                return this.update(oSettings);
            }
        };
    }

    function getStaticModifyProcessor(oApplicationObject) {
        var oMetadata = oApplicationObject.getApplicationObjectMetadata();
        if (!oMetadata.actions.create && !oMetadata.actions.update) {
            return undefined;
        }
        return function(vKey, oChangeRequest) {
            var oRequest;
            if (vKey === undefined || (jQuery.isNumeric(vKey) && vKey <= 0)) {
                oApplicationObject.beginAction();

                oRequest = create(oApplicationObject, oChangeRequest);
                oRequest.done(function(oResponse) {
                    var vKey;
                    if (oResponse.GENERATED_IDS) {
                        vKey = oResponse.GENERATED_IDS[oChangeRequest[oMetadata.nodes.Root.primaryKey]];
                    }
                    onPersist(oApplicationObject, vKey, oChangeRequest, undefined, oMetadata.actions.create);
                });
                oRequest.fail(oApplicationObject.endAction);
                return oRequest;
            } else {
                oApplicationObject.beginAction(oApplicationObject, oMetadata.actions.update);
                oRequest = update(oApplicationObject, vKey, oChangeRequest);
                oRequest.done(function() {
                    onPersist(oApplicationObject, vKey, oChangeRequest, undefined, oMetadata.actions.update);
                });
                oRequest.fail(oApplicationObject.endAction);
                return oRequest;
            }
        };
    }

    function del(oApplicationObject, vKey, sConcurrencyToken, oHeaders, bProcessSync) {
        var sURL = oApplicationObject.getEndpointURL();
        oHeaders = oHeaders || {};
        if (sConcurrencyToken) {
            oHeaders["If-Match"] = sConcurrencyToken;
        }
        return oApplicationObject.process({
            url: sURL + "/" + vKey,
            type: "DELETE",
            headers: oHeaders,
            async: !bProcessSync
        });
    }

    function getDeleteProcessor(oApplicationObject) {
        var oMetadata = oApplicationObject.getApplicationObjectMetadata();
        if (!oMetadata.actions.del) {
            return undefined;
        }
        return function(bIgnoreConcurrencyConflict, oSettings) {
            var oObjectInstance = this;
            if (this.isNew()) {
                // New objects are not known to the backend
                // so for deletion nothing needs to be done
                // Return a "dummy" promise
                var oDeferred = new jQuery.Deferred();
                oDeferred.resolve({
                    MESSAGES: []
                });
                return oDeferred.promise();
            }

            oApplicationObject.beginAction();

            var bProcessSync = (oSettings && oSettings.processSync) ? true : false;

            var oDeleteDeferred = new jQuery.Deferred();
            // make sure delete request is sent after data initialization has happened
            this._oDataInitPromise.done(function() {
                oObjectInstance.applyConflictConcurrencyToken(bIgnoreConcurrencyConflict);
                var oDeleteRequest = del(oApplicationObject, oObjectInstance.getKey(), oObjectInstance._sConcurrencyToken, oObjectInstance.processHeaders(), bProcessSync);
                oDeleteRequest.always(function(){
                    oObjectInstance._parseMessages.apply(oObjectInstance, arguments);
                });
                oDeleteRequest.done(function() {
                    // Revert pending changes after deletion
                    oObjectInstance.revertChanges();
                    var oChangeRequest;
                    var aDeleteImpacts = oApplicationObject && oApplicationObject.actionImpacts && oApplicationObject.actionImpacts.del;
                    if(aDeleteImpacts) {
                        oChangeRequest = {};
                        jQuery.each(aDeleteImpacts, function(iIndex, oObject){
                            if(oObjectInstance.oData.hasOwnProperty(oObject.objectKey)) {
                                oChangeRequest[oObject.objectKey] = oObjectInstance.getProperty("/" + oObject.objectKey);
                            }
                        });
                        if (oChangeRequest === {}) {
                            oChangeRequest = undefined;
                        }
                    }
                    onPersist(oApplicationObject, oObjectInstance.getKey(), oChangeRequest, oObjectInstance, oMetadata.actions.del);
                    oDeleteDeferred.resolve.apply(undefined, arguments);
                });
                oDeleteRequest.fail(updateConcurrencyTokenOnFail(oObjectInstance, oDeleteDeferred), oApplicationObject.endAction);
            });
            return oDeleteDeferred.promise();
        };
    }

    function getStaticDeleteProcessor(oApplicationObject) {
        var oMetadata = oApplicationObject.getApplicationObjectMetadata();
        if (!oMetadata.actions.del) {
            return undefined;
        }
        return function(vKey, oChangeRequest) {
            oApplicationObject.beginAction();
            var oRequest = del(oApplicationObject, vKey);
            oRequest.done(function() {
                onPersist(oApplicationObject, vKey, oChangeRequest, undefined, oMetadata.actions.del);
            });

            oRequest.fail(oApplicationObject.endAction);
            return oRequest;
        };
    }

    function executeCustomAction(oApplicationObject, oActionMetadata, vKey, oParameter, sConcurrencyToken, oHeaders, bProcessSync) {
        var sURL = oApplicationObject.getEndpointURL();
        var oAjaxSettings = {
            url: sURL + "/" + vKey + "/" + oActionMetadata.name,
            type: "POST",
        };
        if (oParameter) {
            oAjaxSettings.contentType = "application/json; charset=UTF-8";
            oAjaxSettings.data = JSON.stringify(oParameter);
        }
        oHeaders = oHeaders || {};
        if (sConcurrencyToken) {
            oHeaders["If-Match"] = sConcurrencyToken;
        }
        oAjaxSettings.headers = oHeaders;
        oAjaxSettings.async = !bProcessSync;
        return oApplicationObject.process(oAjaxSettings);
    }

    function executeCustomStaticAction(oApplicationObject, oActionMetadata, oParameter, oHeaders) {
        oApplicationObject.beginAction();
        var sURL = oApplicationObject.getEndpointURL();
        var oAjaxSettings = {
            url: sURL + "/" + oActionMetadata.name,
            type: "POST",
        };
        if (oParameter) {
            oAjaxSettings.contentType = "application/json; charset=UTF-8";
            oAjaxSettings.data = JSON.stringify(oParameter);
        }
        oHeaders = oHeaders || {};
        
        var oRequest = oApplicationObject.process(oAjaxSettings);
        oRequest.always(oApplicationObject.endAction);
        var oChange;
    
        oRequest.done(function() {
            if (oActionMetadata.isMassAction) {
                jQuery.each(oParameter.keys, function(iIndex, vKey) {
                    oChange = {
                        object: oApplicationObject,
                        key: vKey,
                        actionName: oActionMetadata.name
                    };
                    ApplicationObjectChange.fireChange(oChange);
                });
            } else {
                oChange = {
                    object: oApplicationObject,
                    changeRequest: oParameter,
                    actionName: oActionMetadata.name
                };
                ApplicationObjectChange.fireChange(oChange);
            }
        });
        return oRequest;
    }

    function getCustomActionProcessor(oApplicationObject, oActionMetadata) {
        var fnCustomActionProcessor = function(oParameter, oSettings) {
            oApplicationObject.beginAction();

            var oMetadata = oApplicationObject.getApplicationObjectMetadata();
            var bSuppressBackendSync = (jQuery.isPlainObject(oSettings) && oSettings.suppressBackendSync) ? oSettings.suppressBackendSync : false;
            var bIgnoreConcurrencyConflict = (jQuery.isPlainObject(oSettings)) ? oSettings.bIgnoreConcurrencyConflict : oSettings;
            var bProcessSync = (jQuery.isPlainObject(oSettings) && oSettings.processSync) ? oSettings.processSync : false;
            var oObjectInstance = this;
            var vKey = this.getKey();
            var oDeferred = new jQuery.Deferred();
            var oActionRequest;
            var bIsBackendAction = !! oMetadata.actions[oActionMetadata.name];
            if (bIsBackendAction) {
                oObjectInstance.applyConflictConcurrencyToken(bIgnoreConcurrencyConflict);
                oActionRequest = executeCustomAction(oApplicationObject, oActionMetadata, vKey, oParameter, oObjectInstance._sConcurrencyToken, oObjectInstance.processHeaders(), bProcessSync);
                oActionRequest.fail(oApplicationObject.endAction, updateConcurrencyTokenOnFail(oObjectInstance, oDeferred));
                oActionRequest.done(function(oResponse, sSuccess, oAjaxResponse) {
                    var sConcurrencyToken = oAjaxResponse.getResponseHeader("ETag");
                    oObjectInstance.setConcurrencyToken(sConcurrencyToken);
                });
            } else {
                var fnActionExecute = this.actions[oActionMetadata.name].execute;
                oActionRequest = fnActionExecute(vKey, oObjectInstance, oParameter, oActionMetadata, oSettings);
                if (oActionRequest && jQuery.isFunction(oActionRequest.done)) {
                    oActionRequest.fail(oApplicationObject.endAction, oDeferred.reject);
                } else {
                    var oWrapper = new jQuery.Deferred();
                    var oActionResult = oActionRequest;
                    oActionRequest = oWrapper.promise();
                    oWrapper.resolve(oActionResult);
                }
            }

            oActionRequest.always(function(){
                oObjectInstance._parseMessages.apply(oObjectInstance, arguments);
            });
            oActionRequest.done(function(oResponse) {
                vKey = oObjectInstance.getKey();
                onPersist(oApplicationObject, vKey, oParameter, oObjectInstance, oActionMetadata, bSuppressBackendSync || !bIsBackendAction);
                oObjectInstance._bLastBackendSyncSuppressed = bSuppressBackendSync;
                oObjectInstance._resolveAfterInitialize(oDeferred, oResponse);
            });
            return oDeferred.promise();
        };
        fnCustomActionProcessor.isCustomAction = true;
        return fnCustomActionProcessor;
    }

    function getStaticCustomActionProcessor(oApplicationObject, oActionMetadata) {
        return function(vKey, oParameter) {
            var oRequest;
            var oMetadata = oApplicationObject.getApplicationObjectMetadata();
            oApplicationObject.beginAction();

            if (oMetadata.actions[oActionMetadata.name]) {
                var sURL = oApplicationObject.getEndpointURL();
                var oAjaxSettings = {
                    url: sURL + "/" + vKey + "/" + oActionMetadata.name,
                    type: "POST",
                };
                if (oParameter) {
                    oAjaxSettings.contentType = "application/json; charset=UTF-8";
                    oAjaxSettings.data = JSON.stringify(oParameter);
                }
                oRequest = executeCustomAction(oApplicationObject, oActionMetadata, vKey, oParameter);
            } else {
                var oDeferred = new jQuery.Deferred();
                var fnActionExecute = oApplicationObject.prototype.actions[oActionMetadata.name].execute;
                var oExecResult = fnActionExecute(vKey, undefined, oParameter, oActionMetadata);
                if (oExecResult && jQuery.isFunction(oExecResult.done)) {
                    oExecResult.done(oDeferred.resolve);
                    oExecResult.fail(oDeferred.reject);
                } else {
                    oDeferred.resolve(oExecResult);
                }
                oRequest = oDeferred.promise();
            }
            oRequest.done(function() {
                onPersist(oApplicationObject, vKey, oParameter, undefined, oActionMetadata);
            });

            oRequest.fail(oApplicationObject.endAction);
            return oRequest;
        };
    }

    function getStaticCustomStaticActionProcessor(oApplicationObject, oActionMetadata) {
        return function(oParameter) {
            return executeCustomStaticAction(oApplicationObject, oActionMetadata, oParameter);
        };
    }

    function getCustomActionParameterProcessor(oApplicationObject, oActionMetadata) {
        return function() {
            var oModel = new JSONModel();
            var oParameter = {};
            var fnParameterInit = oApplicationObject.prototype.actions[oActionMetadata.name].initParameter;
            if (fnParameterInit) {
                fnParameterInit.apply(undefined, [oParameter].concat(jQuery.makeArray(arguments)));
            }
            oModel.setData(oParameter);
            return oModel;
        };
    }

    function onPersist(oApplicationObject, vKey, oChangeRequest, oObjectInstance, oActionMetadata, bSuppressBackendSync) {
        var oDate = new Date();
        
        var bDataUpdateNeccessary = oObjectInstance && oObjectInstance._continuousUse && oActionMetadata.name != Action.Del && !bSuppressBackendSync;
        if (bDataUpdateNeccessary && oObjectInstance._oPropertyModel) {
            // After successful create the new (permanent) key is passed
            oObjectInstance._oPropertyModel.sync(vKey);
        }

        if (bDataUpdateNeccessary) {
            initUpdateData(oObjectInstance, vKey);
        }

        if (oObjectInstance && bSuppressBackendSync) {
            oObjectInstance._oBeforeData = jQuery.extend(true, {}, oObjectInstance.getData());
        }

        if (oApplicationObject.determinations && oApplicationObject.determinations.onPersist) {
            var fnRegisterDirtyObject = function(oApplicationObject, vKey, bDeleted) {
            };
            oApplicationObject.determinations.onPersist(vKey, oChangeRequest, oObjectInstance && oObjectInstance.getData(), oActionMetadata, fnRegisterDirtyObject, oObjectInstance);
        }

        // Trigger eventing only for initiating action, not for nested actions
        var oChange = {
            object: oApplicationObject,
            key: vKey,
            actionName: oActionMetadata.name,
            changeRequest: oChangeRequest,
            instance: oObjectInstance
        };
        if (bDataUpdateNeccessary) {
            oObjectInstance.getDataInitializedPromise().done(function(oDataUpdate) {
                oChange.dataUpdate = oDataUpdate;
                if (oApplicationObject.isInitiatingAction()) {
                    ApplicationObjectChange.fireChange(oChange);
                }
                oApplicationObject.endAction();
            });
            oObjectInstance.getDataInitializedPromise().fail(function() {
                if (oApplicationObject.isInitiatingAction()) {
                    ApplicationObjectChange.fireChange(oChange);
                }
                oApplicationObject.endAction();
            });
        } else {
            if (oApplicationObject.isInitiatingAction()) {
                ApplicationObjectChange.fireChange(oChange);
            }
            oApplicationObject.endAction();
        }
    }

    function initCreateData(oObjectInstance, oDefaultData) {
        function getInitialValue(oAttributeMetadata) {
            if (mTypeMapping[oAttributeMetadata.dataType] === "sap.ui.model.type.String") {
                return "";
            } else {
                return null;
            }
        }

        var oMetadata = oObjectInstance.getApplicationObjectMetadata();

        var oData = {};
        jQuery.each(oMetadata.nodes.Root.attributes, function(sAttributeName, oAttributeMetadata) {
            oData[sAttributeName] = getInitialValue(oAttributeMetadata);
        });

        jQuery.each(oMetadata.nodes, function(iIndex, oNode) {
            if (oNode.parentNode && oNode.parentNode === Node.Root) {
                var oReadSourceSettings = oObjectInstance.readSource && oObjectInstance.readSource.settings && oObjectInstance.readSource.settings(oObjectInstance._oReadSourceSettings);
                if (!(oReadSourceSettings && oReadSourceSettings.excludeNodes && oReadSourceSettings.excludeNodes.indexOf(oNode.name) > -1)) {
                    oData[oNode.name] = [];
                }
            }
        });

        jQuery.extend(oData, oDefaultData);
        var oDeferred = new jQuery.Deferred();
        oObjectInstance._oDataInitPromise = oDeferred.promise();
        oObjectInstance._isNew = true;
        
        function handleInitDone(oInitData) {
            if (oInitData) {
                jQuery.extend(oData, oInitData);
            }
            oData[oMetadata.nodes.Root.primaryKey] = oObjectInstance.getNextHandle();
            oObjectInstance.setData(oData);
            // Modifications could have been made in setData using setProperty
            oData = oObjectInstance.getData();
            oObjectInstance._oDeterminationData = jQuery.extend(true, {}, oData);
            oDeferred.resolve(oData);
        }

        if (oObjectInstance.determinations && oObjectInstance.determinations.onCreate) {
            var oDetResult = oObjectInstance.determinations.onCreate(oData, oObjectInstance);
            if (oDetResult && jQuery.isFunction(oDetResult.done)) {
                oDetResult.done(handleInitDone);
            } else {
                handleInitDone(oDetResult);
            }
        } else {
            handleInitDone({});
        }
    }

    function initUpdateData(oObjectInstance, vKey, bMergeConcurrentChanges) {
        var oMetadata = oObjectInstance.getApplicationObjectMetadata();

        var oDeferred = new jQuery.Deferred();
        oObjectInstance._oDataInitPromise = oDeferred.promise();
        oObjectInstance._isNew = false;

        if (oObjectInstance.readSource) {
            oObjectInstance._lastReadDate = new Date();
            var oReadPromise = oObjectInstance.readSource(vKey, oObjectInstance.getObjectName(), oMetadata, oObjectInstance._oReadSourceSettings);
            oReadPromise.done(function(oData, sConcurrencyToken) {
                var oDataBeforeMerge;

                if (!oData) {
                    jQuery.sap.log.error("Object " + vKey + " does not exist (" + oObjectInstance.getObjectName() + ")");
                    return;
                }

                if (bMergeConcurrentChanges) {
                    oDataBeforeMerge = oData;
                    oData = oObjectInstance._mergeConcurrentChanges(oData);
                }

                mapNullToInitialValues(oData, oObjectInstance.getApplicationObject());

                function handleInitDone(oInitData) {
                    if (oInitData) {
                        jQuery.extend(oData, oInitData);
                    }
                    oData[oMetadata.nodes.Root.primaryKey] = vKey;
                    oObjectInstance.setData(oData);
                    oObjectInstance._oBeforeData = jQuery.extend(true, {}, oDataBeforeMerge || oData);
                    oObjectInstance.setConcurrencyToken(sConcurrencyToken);
                    oDeferred.resolve(oData);
                }

                if (oObjectInstance.determinations && oObjectInstance.determinations.onRead) {
                    var oDetResult = oObjectInstance.determinations.onRead(oData, oObjectInstance);
                    if (oDetResult && jQuery.isFunction(oDetResult.done)) {
                        oDetResult.done(handleInitDone);
                    } else {
                        handleInitDone(oDetResult);
                    }
                } else {
                    handleInitDone({});
                }

            });
            oReadPromise.fail(function() {
                jQuery.sap.log.error("Reading object " + vKey + " failed (" + oObjectInstance.getObjectName() + ")");
                oDeferred.reject();
            });
        } else {
            var oData = {};
            oData[oMetadata.nodes.Root.primaryKey] = vKey;
            oObjectInstance.setData(oData);
            oObjectInstance._oBeforeData = jQuery.extend(true, {}, oData);
            oDeferred.resolve(oData);
        }
    }

    function initPropertyModel(vKey, oObjectInstance, oScope, oDefaultData, oSettingsPropertyDefault) {
        if (!oScope.nodes && !oScope.actions && !oScope.staticActions) {
            return;
        }

        var oMetadata = oObjectInstance.getApplicationObjectMetadata();

        var oPropertyScope = {
            nodes: [],
            actions: [],
            staticActions: []
        };

        if (oScope.nodes) {
            jQuery.each(oScope.nodes, function(iIndex, sNodeName) {
                if (oMetadata.nodes[sNodeName]) {
                    oPropertyScope.nodes.push(sNodeName);
                }
            });
        }

        var aScopeActionName = [];
        if (oScope.actions) {
            jQuery.each(oScope.actions, function(iIndex, vActionDef) {
                var sActionName = getActionName(vActionDef);
                if (oMetadata.actions[sActionName] && sActionName != Action.Create) {
                    oPropertyScope.actions.push(vActionDef);
                }
                aScopeActionName.push(sActionName);
            });
        }

        var aScopeStaticActionName = [];
        if (oScope.staticActions) {
            jQuery.each(oScope.staticActions, function(iIndex, vActionDef) {
                var sActionName = getActionName(vActionDef);
                if (oMetadata.actions[sActionName]) {
                    oPropertyScope.staticActions.push(vActionDef);
                }
                aScopeStaticActionName.push(sActionName);
            });
        }

        var iModifyIndex = aScopeActionName.indexOf(Action.Modify);
        if (iModifyIndex >= 0) {
            if (aScopeActionName.indexOf(Action.Update) < 0) {
                oPropertyScope.actions.push(Action.Update);
            }
        }
        var iCreateIndex = aScopeActionName.indexOf(Action.Create);
        var iStaticCreateIndex = aScopeStaticActionName.indexOf(Action.Create);
        if (oObjectInstance._isNew && (iModifyIndex >= 0 || iCreateIndex >= 0) && iStaticCreateIndex < 0) {
            var oStaticCreateAction = {};
            oStaticCreateAction[Action.Create] = oDefaultData;
            oPropertyScope.staticActions.push(oStaticCreateAction);
        }
        var oDeferred = new jQuery.Deferred();
        oObjectInstance._oPropertyModelInitPromise = oDeferred.promise();

        function updatePropertyModel(oEvent) {
            var oPropertyModel = oEvent.getSource();
            oObjectInstance._oPropertyModel = oPropertyModel;
            // make sure the enabled checks do have the full initialization data available
            oObjectInstance.getDataInitializedPromise().done(function() {
                if (iModifyIndex >= 0) {
                    var bModifyEnabled;
                    if (oObjectInstance._isNew) {
                        bModifyEnabled = oPropertyModel.getProperty("/actions/create/enabled");
                    } else {
                        bModifyEnabled = oPropertyModel.getProperty("/actions/update/enabled");
                    }
                    if (bModifyEnabled !== undefined) {
                        oPropertyModel.setPropertyInternal("/actions/modify", {
                            enabled: bModifyEnabled
                        });
                    }
                }
                jQuery.each((oScope.actions || []).concat(oScope.staticActions || []), function(iIndex, vActionDef) {
                    var sActionName = getActionName(vActionDef);
                    var fnEnabledCheck = oObjectInstance.actions && oObjectInstance.actions[sActionName] && oObjectInstance.actions[sActionName].enabledCheck;
                    if (fnEnabledCheck) {
                        var sPropertyPath = "/actions/" + sActionName;
                        var bPropertyModelEnabled = oPropertyModel.getProperty(sPropertyPath + "/enabled");
                        var bCheckResult = fnEnabledCheck(oObjectInstance, bPropertyModelEnabled);
                        if (bCheckResult !== undefined) {
                            oPropertyModel.setPropertyInternal(sPropertyPath, {
                                enabled: bCheckResult
                            });
                        }
                    }
                });
                oDeferred.resolve(oPropertyModel.getData());
            });

            oPropertyModel.fireEvent("modelModified");
        }

        // Set property defaults
        var oPropertyDefault = {
            actions: {
                modify: {
                    enabled: false
                }
            }
        };
        jQuery.each((oScope.actions || []).concat(oScope.staticActions || []), function(iIndex, vActionDef) {
            var sActionName = getActionName(vActionDef);
            var fnExecute = oObjectInstance.actions && oObjectInstance.actions[sActionName] && oObjectInstance.actions[sActionName].execute;
            if (fnExecute) {
                oPropertyDefault.actions[sActionName] = {
                    enabled: false
                };
            }
        });
        
        if (oSettingsPropertyDefault) {
            oPropertyDefault = jQuery.extend(true, oPropertyDefault, oSettingsPropertyDefault);
        }

        var oPropertyModel = new PropertyModel(oObjectInstance.getObjectName(), vKey, oPropertyScope, false, updatePropertyModel, oPropertyDefault);
        oObjectInstance._oPropertyModel = oPropertyModel;
    }

    function updateHandles(oObject, mGeneratedKeys) {
        var oMetadata = oObject.getApplicationObjectMetadata();
        var oApplicationObject = oObject.getApplicationObject();
        var oData = oObject.getProperty("/");

        if (oApplicationObject.determinations && oApplicationObject.determinations.onUpdateHandles) {
            oData = oApplicationObject.determinations.onUpdateHandles(oData, mGeneratedKeys);
        } else {
            visitDataTree(oData, Node.Root, function(oData, sNodeName) {
                var oNodeMetadata = oMetadata.nodes[sNodeName];
                if (!oNodeMetadata) {
                    // ignore artificial nodes
                    return;
                }
                var sPrimaryKey = oNodeMetadata.primaryKey;
                var vPrimaryKey = oData[sPrimaryKey];
                if (mGeneratedKeys[vPrimaryKey]) {
                    oData[sPrimaryKey] = mGeneratedKeys[vPrimaryKey];
                    ModelSynchronizer.putApplicationObject(oData[sPrimaryKey], oObject);
                }
            });
        }
        oObject.setData(oData);
    }

    var mTypeMapping = {
        "NVARCHAR": "sap.ui.model.type.String",
        "NCLOB": "sap.ui.model.type.String",
        "VARCHAR": "sap.ui.model.type.String",
        "CHAR": "sap.ui.model.type.String",
        "NCHAR": "sap.ui.model.type.String",
        "INTEGER": "sap.ui.model.type.Integer",
        "INT": "sap.ui.model.type.Integer",
        "TINYINT": "sap.ui.model.type.Integer",
        "SMALLINT": "sap.ui.model.type.Integer",
        "BIGINT": "sap.ui.model.type.Integer",
        "SMALLDECIMAL": "sap.ui.model.type.Float",
        "DECIMAL": "sap.ui.model.type.Float",
        "DOUBLE": "sap.ui.model.type.Float",
        "REAL": "sap.ui.model.type.Float",
        "FLOAT": "sap.ui.model.type.Float",
        "DATE": "sap.ui.model.type.Date",
        "SECONDDATE": "sap.ui.model.type.DateTime",
        "TIMESTAMP": "sap.ui.model.type.DateTime",
        "TIME": "sap.ui.model.type.Time"
    };

    function mapNullToInitialValues(oObjectData, oApplicationObject) {
        var oMetadata = oApplicationObject.getApplicationObjectMetadata();
        visitDataTree(oObjectData, Node.Root, function(oData, sNodeName) {
            jQuery.each(oData, function(sName) {
                var oAttributeMetadata = oMetadata.nodes[sNodeName] && oMetadata.nodes[sNodeName].attributes[sName];
                if (oAttributeMetadata) {
                    oData[sName] = mapNullToInitialValue(oData[sName], oAttributeMetadata);
                }
            });
        });
    }

    function mapNullToInitialValue(vValue, oAttributeMetadata) {
        if (vValue !== null) {
            return vValue;
        }
        if (!oAttributeMetadata) {
            return vValue;
        }
        var sTypeName = mTypeMapping[oAttributeMetadata.dataType];
        if (!sTypeName) {
            return null;
        }
        // Other types need to follow but are not as straight-forward as String
        switch (sTypeName) {
            case "sap.ui.model.type.String":
                return "";
            default:
                return null;
        }
    }

    function mapInitialValueToNull(vValue, oAttributeMetadata) {
        if (!oAttributeMetadata) {
            return vValue;
        }
        var sTypeName = mTypeMapping[oAttributeMetadata.dataType];
        if (!sTypeName) {
            return vValue;
        }
        // Other types need to follow but are not as straight-forward as String
        switch (sTypeName) {
            case "sap.ui.model.type.String":
                return (vValue === "") ? null : vValue;
            default:
                return vValue;
        }
    }

    function getBindingType(oBinding, oMetadata) {
        var sPath = oBinding.getPath();
        var oContext = oBinding.getContext();

        if (oContext && oContext.getPath() !== "/") {
            sPath = oContext.getPath();
        } else {
            sPath = (sPath[0] === "/") ? sPath : "/" + sPath;
        }

        var aPath = sPath.split("/");
        var sBindingPrefix = aPath.shift();

        if (isReservedBindingPrefix(sBindingPrefix)) {
            return undefined;
        }
        var sAttributeName = aPath.pop();
        // For structured bindings (:1) the path is like /SUBNODE/ATTRIBUTE
        // For subnodes in arrays the path is like /SUBNODE/1/ATTRIBUTE
        var sNodeName;

        if (aPath.length === 0) {
            sNodeName = Node.Root;
        }

        if (aPath.length === 1) {
            sNodeName = aPath.pop();
        }

        if (aPath.length > 1) {
            sNodeName = aPath.pop() && aPath.pop();
        }

        jQuery.sap.log.debug(sNodeName, "getBindingType could not retrieve node for " + sPath);

        if (oMetadata.nodes[sNodeName] === undefined) {
            // This is the case when the read source contains additional nodes
            return undefined;
        }
        var oAttributeMetadata = oMetadata.nodes[sNodeName].attributes[sAttributeName];
        if (!oAttributeMetadata) {
            // This is the case when the read source contains additional attributes
            return undefined;
        }

        var sTypeName = mTypeMapping[oAttributeMetadata.dataType];
        if (!sTypeName) {
            return undefined;
        }

        var oType;

        switch (sTypeName) {
            case "sap.ui.model.type.String":
                oType = new StringType(null, {
                    minLength: (oAttributeMetadata.required ? 1 : undefined),
                    maxLength: (oAttributeMetadata.maxLength || undefined)
                });
                break;
            case "sap.ui.model.type.Integer":
                if (oAttributeMetadata.dataType === "TINYINT") {
                    oType = new IntBooleanType();
                } else {
                    oType = new IntegerType({
                        groupingEnabled : false,
                        minFractionDigits : 0,
                        maxFractionDigits : 0
                    }, {
                        minimum : oAttributeMetadata.minValue != oAttributeMetadata.maxValue ? oAttributeMetadata.minValue : undefined,
                        maximum : oAttributeMetadata.maxValue != oAttributeMetadata.minValue ? oAttributeMetadata.maxValue : undefined
                    });
                }
                break;
            case "sap.ui.model.type.Float":
                oType = new FloatType({
                    groupingEnabled : false,
                    minFractionDigits : 0
                }, {
                    minimum : oAttributeMetadata.minValue != oAttributeMetadata.maxValue ? oAttributeMetadata.minValue : undefined,
                    maximum : oAttributeMetadata.maxValue != oAttributeMetadata.minValue ? oAttributeMetadata.maxValue : undefined
                });
                break;
            case "sap.ui.model.type.Date":
                oType = new DateType({
                    source: {
                        pattern: "yyyy-MM-dd"
                    },
                    style: "medium"
                }, {
                    minimum: oAttributeMetadata.required ? "1970-01-01" : undefined
                });
                break;
            case "sap.ui.model.type.DateTime":
                oType = new DateTimeType({
                    style: "medium"
                }, {
                    minimum: oAttributeMetadata.required ? "1970-01-01T00:00:00Z" : undefined
                });
                break;
            case "sap.ui.model.type.Time":
                oType = new TimeType({
                    style: "medium"
                }, {
                    minimum: oAttributeMetadata.required ? "00:00:00" : undefined
                });
                break;
            default:
                break;
        }
        return oType;
    }

    var BindingPrefix = {
        Meta: "meta",
        Property: "property"
    };

    function isReservedBindingPrefix(sBindingPrefix) {
        return jQuery.map(BindingPrefix, function(sBindingPrefix) {
            return sBindingPrefix;
        }).indexOf(sBindingPrefix) >= 0;
    }

    function getDelegateModelInfo(oObjectInstance, sPath) {
        if (sPath) {
            var bAbsolute = sPath[0] === "/";
            var aPaths = sPath.split("/");
            if (!bAbsolute) {
                aPaths.splice(0, 0, "");
            }
            if (aPaths.length > 2) {
                var sBindingPrefix = aPaths[1];
                if (sBindingPrefix === BindingPrefix.Meta) {
                    var sObjectName = oObjectInstance.getObjectName();
                    var aMetadataPath = [sObjectName].concat(aPaths.slice(2));
                    var sMetadataPath = (bAbsolute ? "/" : "") + aMetadataPath.join("/");
                    return {
                        model: MetaModel,
                        path: sMetadataPath
                    };
                }

                if (sBindingPrefix === BindingPrefix.Property) {
                    var sPropertyPath = (bAbsolute ? "/" : "") + aPaths.slice(2).join("/");
                    if (!oObjectInstance._oPropertyModel) {
                        jQuery.sap.log.error("Scope for property binding needs to be defined when creating the object");
                    }
                    return {
                        model: oObjectInstance._oPropertyModel,
                        path: sPropertyPath
                    };
                }
            }
        }
        return undefined;
    }

    ApplicationObject.prototype.bindProperty = function(sPath, oContext, mParameters) {
        // meta and property access is delegated to different models
        // data of the object instance itself is kept in the instances' JSON model
        var oDelegateModelInfo = getDelegateModelInfo(this, sPath);
        if (!oDelegateModelInfo || !oDelegateModelInfo.model) {
            return JSONModel.prototype.bindProperty.apply(this, arguments);
        }
        return new JSONPropertyBinding(oDelegateModelInfo.model, oDelegateModelInfo.path, oContext, mParameters);
    };

    ApplicationObject.prototype.bindList = function(sPath, oContext, aSorters, aFilters, mParameters) {
        // meta and property access is delegated to different models
        // data of the object instance itself is kept in the instances' JSON model
        var oDelegateModelInfo = getDelegateModelInfo(this, sPath);
        if (!oDelegateModelInfo || !oDelegateModelInfo.model) {
            return JSONModel.prototype.bindList.apply(this, arguments);
        }
        return new JSONListBinding(oDelegateModelInfo.model, oDelegateModelInfo.path, oContext, aSorters, aFilters, mParameters);
    };

    ApplicationObject.prototype.getProperty = function(sPath, oContext) {
        // meta and property access is delegate to different models
        // data of the object instance itself is kept in the instances' JSON model
        var oDelegateModelInfo = getDelegateModelInfo(this, sPath);
        if (!oDelegateModelInfo || !oDelegateModelInfo.model) {
            return JSONModel.prototype.getProperty.apply(this, arguments);
        }
        return oDelegateModelInfo.model.getProperty(oDelegateModelInfo.path);
    };

    ApplicationObject.prototype.getPropertyModel = function() {
        return this._oPropertyModel;
    };

    // Add Binding is used for setting the type as it is called later than bindProperty
    // When doing so in bindProperty the set type is reset by SAPUI5
    ApplicationObject.prototype.addBinding = function(oBinding) {
        JSONModel.prototype.addBinding.apply(this, arguments);
        // We only set types for two-way bindings as for formatters and expression bindings
        // types for bindings do not work properly, especially when bound against Boolean properties
        if (oBinding instanceof sap.ui.model.PropertyBinding && oBinding.getBindingMode() === BindingMode.TwoWay ) {
            var oControlType = oBinding.getType();
            // Don't override types specified in the control binding
            if (oControlType === undefined) {
                var oBindingType = getBindingType(oBinding, this.getApplicationObjectMetadata());
                if (oBindingType) {
                    oBinding.setType(oBindingType, oBinding.sInternalType);
                }
            }
        }
    };

    ApplicationObject.prototype.process = process;
    ApplicationObject.prototype.calculateChangeRequest = calculateChangeRequest;

    ApplicationObject.prototype.processHeaders = function() {
        return null;
    };
    ApplicationObject.prototype.parseResponse = parseResponse;

    ApplicationObject.prototype.readData = function(oSettings) {
        return this.getApplicationObject().readData(this.getKey(), oSettings);
    };

    ApplicationObject.prototype.getLastReadDate = function() {
        return this._lastReadDate;
    };

    ApplicationObject.prototype.getKey = function() {
        var oData = this.getData();
        var oMetadata = this.getApplicationObjectMetadata();
        var vKey = oData[oMetadata.nodes.Root.primaryKey];
        if(!vKey){
        	return this.getInitKey();
        }
        return vKey;
    };

    ApplicationObject.prototype.getInitKey = function() {
        return this._initKey;
    };

    ApplicationObject.prototype.getApplicationObjectMetadata = function() {
        return this.getApplicationObject().getApplicationObjectMetadata();
    };

    ApplicationObject.prototype.getObjectName = function() {
        return this.getApplicationObject().getObjectName();
    };

    ApplicationObject.prototype.getDataInitializedPromise = function() {
        return this._oDataInitPromise;
    };

    ApplicationObject.prototype.getPropertyModelInitializedPromise = function() {
        return this._oPropertyModelInitPromise;
    };

    ApplicationObject.prototype.hasPendingChanges = function() {
        var oMetadata = this.getApplicationObjectMetadata();
        var oUserChanges = this.getUserChanges();
        // primary key is always part of the change request -> ignore it for comparison
        delete oUserChanges[oMetadata.nodes.Root.primaryKey];

        var bResult = !jQuery.sap.equal(oUserChanges, {});
        if (bResult) {
            jQuery.sap.log.info("Pending changes: user change:" + JSON.stringify(oUserChanges));
        }
        return bResult;
    };

    ApplicationObject.prototype.getChangeRequest = function(bComplete) {
        return this.calculateChangeRequest(this.getApplicationObject(), this._oBeforeData || {}, this.getData(), bComplete, this);
    };

    ApplicationObject.prototype.getUserChanges = function() {
        // User changes are all changes which need to be sent to backend MINUS changes triggered by defaulting data by
        // frontend determinations
        var oResult = {};
        var oMetadata = this.getApplicationObjectMetadata();

        var oDeterminationChangeRequest;
        if (this._oDeterminationData) {
            oDeterminationChangeRequest = this.calculateChangeRequest(this.getApplicationObject(), {}, this._oDeterminationData, false, this);
        }
        var oChangeRequest = this.getChangeRequest();

        oResult = oChangeRequest;
        if (oDeterminationChangeRequest) {
            if (jQuery.sap.equal(oDeterminationChangeRequest, oChangeRequest)) {
                return {};
            }
            // Remove attributes from change request when no difference to determination attributes exists
            visitDataTree(oResult, Node.Root, function(oData, sNodeName, oParent) {
                // Find matching node in determination data
                var oDeterminationNode = findNodeInstance(oMetadata, oDeterminationChangeRequest, sNodeName, oData[oMetadata.nodes[sNodeName].primaryKey]);
                if (oDeterminationNode) {
                    jQuery.each(oData, function(sName, vValue) {
                        if (jQuery.isArray(vValue)) {
                            return;
                        }
                        if (jQuery.sap.equal(oDeterminationNode[sName], vValue)) {
                            delete oData[sName];
                        }
                    });
                }
            });
            // Remove nodes from change request when no difference to determination nodes exists
            visitNodeDataTree(oResult, Node.Root, function(oData, sNodeName, oParent) {
                if (sNodeName != Node.Root) {
                    var oDeterminationNode = findNode(oMetadata, oDeterminationChangeRequest, sNodeName);
                    if (oDeterminationNode) {
                        if (oData.length == oDeterminationNode.length) {
                            var bUserChange = false;
                            jQuery.each(oData, function(index, oDataInstance) {
                                if (!jQuery.isEmptyObject(oDataInstance)) {
                                    bUserChange = true;
                                    return false;
                                }
                                return true;
                            });
                            if (!bUserChange) {
                                delete oParent[sNodeName];
                            }
                        }
                    }
                }
            });
        }
        return oResult;
    };

    ApplicationObject.prototype._parseMessages = function(oResponse){
        this._oMessageParser.parse(oResponse);
    };

    ApplicationObject.prototype.getMessageParser = function() {
        return this._oMessageParser;
    };

    ApplicationObject.prototype._resolveAfterInitialize = function(oDeferred) {
        var oDataInitializedPromise = this.getDataInitializedPromise();
        // all arguments after oDeferred are used for resolving the deferred
        var aResolveArguments = Array.prototype.slice.call(arguments, 1);
        if (oDataInitializedPromise) {
            // "Really done" is when data has been initialized again and the application object is
            // in a consistent state
            oDataInitializedPromise.done(function() {
                oDeferred.resolve.apply(oDeferred, aResolveArguments);
            });
            oDataInitializedPromise.fail(function() {
                oDeferred.resolve.apply(oDeferred, aResolveArguments);
            });
        } else {
            oDeferred.resolve.apply(oDeferred, aResolveArguments);
        }
    };

    ApplicationObject.prototype._mergeConcurrentChanges = function(oData) {
        var that = this;
        var oMetadata = this.getApplicationObjectMetadata();
        var oApplicationObject = this.getApplicationObject();
        var oUserChange = this.getUserChanges();
        var oCurrentStateComplete = this.getChangeRequest(true);
        var oMergeResult = jQuery.extend(true, {}, oData);

        var oNormalizedBeforeImage = that._oBeforeData;
        if (oApplicationObject.determinations && oApplicationObject.determinations.onNormalizeData) {
            oNormalizedBeforeImage = jQuery.extend(true, {}, oNormalizedBeforeImage);
            oNormalizedBeforeImage = oApplicationObject.determinations.onNormalizeData(oNormalizedBeforeImage, this);
        }

        // 1. find same instances and overwrite data changed by the current user
        visitDataTree(oMergeResult, Node.Root, function(oData, sNodeName, oParent) {
            if (!oMetadata.nodes[sNodeName]) {
                // ignore artificial nodes
                return;
            }
            var sKeyName = oMetadata.nodes[sNodeName].primaryKey;
            var vKey = oData[sKeyName];
            var bNodePresent = isNodePresent(oUserChange, sNodeName);
            // if node is not present, it is unchanged
            if (bNodePresent) {
                // Find matching node user changes
                var oUserChangeInstance = findNodeInstance(oMetadata, oUserChange, sNodeName, vKey);
                if (oUserChangeInstance) {

                    jQuery.each(oData, function(sName, vValue) {
                        if (jQuery.isArray(vValue)) {
                            return;
                        }
                        if (oUserChangeInstance[sName] !== undefined) {
                            oData[sName] = oUserChangeInstance[sName];
                        }
                    });
                } else {
                    // Not in current state: if node was explicitely deleted we will remove it
                    // Explicit remove is recognized by checking whether the node was there before
                    var oBeforeInstance = findNodeInstance(oMetadata, oNormalizedBeforeImage, sNodeName, vKey);
                    if (oBeforeInstance) {
                        for (var i = 0; i < oParent.length; i++) {
                            if (oParent[i][sKeyName] === vKey) {
                                oParent.splice(i, 1);
                                return;
                            }
                        }
                    }
                }
            }
        });

        // 2. add instances in user change not present in backend data
        // Two reasons: it is a new instance or the instance has been deleted
        // we need the current state in order to restore deleted backend nodes
        visitDataTree(oUserChange, Node.Root, function(oData, sNodeName, oParent, oContext) {
            var sPKName = oMetadata.nodes[sNodeName].primaryKey;
            var sParentNodeName = oMetadata.nodes[sNodeName].parentNode;
            var sParentNodePK = sParentNodeName && oMetadata.nodes[sParentNodeName].primaryKey;
            var oNodeInstance = findNodeInstance(oMetadata, oMergeResult, sNodeName, oData[sPKName]);
            if (!oNodeInstance) {

                // This is only the "place holder" object in the node which was not touched
                // as it has been deleted concurrently we will not recreate it again
                if (Object.keys(oData).length === 1 && oData[sPKName]) {
                    return;
                }

                var oNewNodeInstance = jQuery.extend(true, {}, oData);
                var oNodeInstanceData = findNodeInstance(oMetadata, oCurrentStateComplete, sNodeName, oNewNodeInstance[sPKName]);
                if (oNodeInstanceData) {
                    oNewNodeInstance = jQuery.extend(true, {}, oNodeInstanceData);
                }
                // make sure entries deleted in the meanwhile get a proper handle
                // deleted entries are kept in merge as changes might have been done already
                if (oNewNodeInstance[sPKName] >= 0) {
                    oNewNodeInstance[sPKName] = that.getNextHandle();
                }
                var vParentKey = oContext.parentData[sParentNodePK];
                var oParentInstance = findNodeInstance(oMetadata, oMergeResult, sParentNodeName, vParentKey);
                if (oParentInstance) {
                    oParentInstance[sNodeName] = oParentInstance[sNodeName] || [];
                    oParentInstance[sNodeName].push(oNewNodeInstance);
                } else {
                    jQuery.sap.log.fatal("Merging may only be enabled for objects where deleting parents is impossible");
                }
            }
        });

        if (oApplicationObject.determinations && oApplicationObject.determinations.onMergeConcurrentChanges) {
            oMergeResult = oApplicationObject.determinations.onMergeConcurrentChanges(oMergeResult, oUserChange);
        }
        return oMergeResult;
    };

    ApplicationObject.prototype.isNew = function() {
        if (this._isNew === undefined) {
            // initialize correctly, if it is undefined it must be new
            this._isNew = true;
        }
        return this._isNew;
    };
    
    ApplicationObject.prototype.isDeleted = function() {
        return this._isDeleted;
    };

    ApplicationObject.prototype.setProperty = function(sPath, vValue, oContext) {
        // redefined for better debugging
        return JSONModel.prototype.setProperty.apply(this, arguments);
    };

    ApplicationObject.prototype.revertChanges = function() {
        if (this.isNew()) {
            //in order to aviod poping up twice data lose dialog
            this.setData({});
        } else {
            this.setData(jQuery.extend(true, {}, this._oBeforeData) || {});
        }
    };

    ApplicationObject.prototype.sync = function() {
        // syncs object state with backend after external update
        // After successful create the new (permanent) key is passed
        if (this._oPropertyModel) {
            this._oPropertyModel.sync(this.getKey());
        }
        initUpdateData(this, this.getKey());
    };

    ApplicationObject.prototype.mergeConcurrentChanges = function() {
        initUpdateData(this, this.getKey(), true);
    };

    ApplicationObject.prototype.setConcurrencyToken = function(sConcurrencyToken) {
        if (this._oSettings && this._oSettings.concurrencyEnabled) {
            this._sConcurrencyToken = sConcurrencyToken;
        }
    };

    ApplicationObject.prototype.setConflictConcurrencyToken = function(sConcurrencyToken) {
        // In conflict state we remember the token so that we can enforce it, if users wish to ignore the conflict
        if (this._oSettings && this._oSettings.concurrencyEnabled) {
            this._sConflictConcurrencyToken = sConcurrencyToken;
        }
    };

    ApplicationObject.prototype.applyConflictConcurrencyToken = function(bIgnoreConcurrencyConflict) {
        if (bIgnoreConcurrencyConflict) {
            this._sConcurrencyToken = this._sConflictConcurrencyToken;
        }
        this._sConflictConcurrencyToken = undefined;
    };

    ApplicationObject.prototype.resolveConflictManually = function() {
        this.applyConflictConcurrencyToken(true);
    };

    ApplicationObject.prototype.updateNode = function(oNode, sNodeName) {
        var oMetadata = this.getApplicationObject().getApplicationObjectMetadata();
        var oNodeMetadata = oMetadata.nodes[sNodeName];
        if (!oNodeMetadata) {
            jQuery.sap.log.error(sNodeName + " in " + this.getObjectName() + " is not known");
            return;
        }

        // move over the tree and replace the node with the same key
        visitDataTree(this.getData(), "Root", function(oData, sVisitedNodeName, oParent) {
            if ( sVisitedNodeName === sNodeName && oData[oNodeMetadata.primaryKey] === oNode[oNodeMetadata.primaryKey] ) {
                // found! overwrite!
                oData = jQuery.extend(oData, oNode);
            }
        });
        this.checkUpdate(true);
    };

    ApplicationObject.prototype.addChild = function(oChild, sNodeName) {
        var oMetadata = this.getApplicationObject().getApplicationObjectMetadata();
        var oNodeMetadata = oMetadata.nodes[sNodeName];
        if (!oNodeMetadata) {
            jQuery.sap.log.error(sNodeName + " in " + this.getObjectName() + " is not known");
            return 0;
        }

        if (oNodeMetadata.parentNode !== Node.Root) {
            jQuery.sap.log.error("addChild only works for subnodes of Root");
            return 0;
        }

        var iHandle = this.getNextHandle();
        oChild[oNodeMetadata.primaryKey] = iHandle;
        var oNodeArray = this.getProperty("/" + sNodeName);
        if (!oNodeArray) {
            oNodeArray = [];
            this.setProperty("/" + sNodeName, oNodeArray);
        }
        oNodeArray.push(oChild);
        this.checkUpdate(true);
        return iHandle;
    };

    ApplicationObject.prototype.removeChild = function(oChild) {
        visitDataTree(this.getData(), Node.Root, function(oData, sNodeName, oParent) {
            if (oData === oChild) {
                if (!oParent || !jQuery.isArray(oParent)) {
                    jQuery.sap.log.error("No parent available to remove child");
                    return;
                }
                var iIndex = oParent.indexOf(oChild);
                if (iIndex >= 0) {
                    oParent.splice(iIndex, 1);
                } else {
                    jQuery.sap.log.error("Child not found");
                }
            }
        });
        this.checkUpdate(true);
    };

    ApplicationObject.prototype.getReadSourceModel = function() {
        return this._oReadSourceSettings ? this._oReadSourceSettings.model : undefined;
    };

    ApplicationObject.prototype.setAfterInitChanges = function() {
        if (this.isNew()) {
            this._oDeterminationData = jQuery.extend(true, {}, this.getData());
        } else {
            this._oBeforeData = jQuery.extend(true, {}, this.getData());
        }
    };
    
    ApplicationObject.prototype.getNextHandle = function() {
        if (!this._iNextHandle) {
            this._iNextHandle = -1;
        }
        return this._iNextHandle--;
    };

    ApplicationObject.prototype.getBeforeData = function() {
        return this._oBeforeData;
    };

    ApplicationObject.setMetaModel = function(oModel) {
        MetaModel = oModel;
    };
    
    ApplicationObject.prototype.releaseFromSyncMode = function() {
        ModelSynchronizer.removeApplicationObject(this.getKey(), this);
    };

    ApplicationObject.prototype.destroy = function(){
        if (this._oPropertyModel) {
            this._oPropertyModel.destroy();
        }
        return JSONModel.prototype.destroy.apply(this, arguments);
    };

    return ApplicationObject;
});

}; // end of sap/ino/commons/models/aof/ApplicationObject.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.core.CodeModel') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.core.CodeModel'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.BindingMode'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONListBinding'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.ODataModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.resource.ResourceModel'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/models/core/CodeModel",[
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/models/aof/MetaModel",
    "sap/ino/commons/models/aof/ApplicationObject",
    "sap/ino/commons/models/aof/ApplicationObjectChange",
    "sap/ino/commons/application/Configuration",
    "sap/ui/model/BindingMode",
    "sap/ui/model/json/JSONListBinding",
    "sap/ui/model/odata/ODataModel",
    "sap/ui/model/resource/ResourceModel"
], function (JSONModel, MetaModel, ApplicationObject, ApplicationObjectChange, Configuration, BindingMode, JSONListBinding, ODataModel, ResourceModel) {
    "use strict";


    jQuery.sap.declare("sap.ino.commons.models.core.CodeModel");
    
    var ObjectType = ApplicationObject.ObjectType;

    /**
     * Per configuration object node there is property in the model containing all code values (and texts). The model
     * buffers the whole node to avoid separate requests.
     * 
     * Example structure: { sap.ino.xs.object.campaign.Phase.Root: [ { CODE: sap.ino.config.PRE_SCREENING, TEXT:
     * "Pre-Screening", LONG_TEXT: "ABC" } ] }
     */

    sap.ino.commons.models.core.CodeModel = new JSONModel({});

    var CodeModel = sap.ino.commons.models.core.CodeModel;

    CodeModel.sDefaultBindingMode = BindingMode.OneWay;
    CodeModel.mSupportedBindingModes = {
        "OneWay" : true,
        "OneTime" : true,
        "TwoWay" : false
    };

    // clean up code buffer, so that new / deleted entries are reflected
    ApplicationObjectChange.attachChange(undefined, function(oEvent) {
        var oMetadata = oEvent.getParameter("object").getApplicationObjectMetadata();
        if (oMetadata.type === ObjectType.Stage) {
            // remove "Stage" at the end
            var sConfigObjectName = oMetadata.name.substring(0, oMetadata.name.length - 5);
            CodeModel.refresh(sConfigObjectName);
        }
    });

    var VALUE_OPTION_LIST_PREFIX = "sap.ino.xs.object.basis.ValueOptionList.Root_";
    var VALUE_OPTION_CODE_TABLE = "sap.ino.xs.object.basis.ValueOptionList.ValueOptions";
    var VALUE_OPTION_LIST_TABLE = "sap.ino.xs.object.basis.ValueOptionList.Root";
    var DATATYPE_INTEGER = "INTEGER";
    var DATATYPE_NUMERIC = "NUMERIC";
    var DATATYPE_BOOLEAN = "BOOLEAN";
    var DATATYPE_TEXT = "TEXT";

    var _oODataModel = null;

    function _getODataModel() {
        if (_oODataModel === null) {
            _oODataModel = new ODataModel(Configuration.getFullApplicationPath("sap.ino.config.URL_PATH_OD_CONFIGURATION"), true);
        }

        return _oODataModel;
    }

    function _isValueOptionListTable(sConfigObjectNode) {
        return jQuery.sap.startsWith(sConfigObjectNode, VALUE_OPTION_LIST_PREFIX);
    }

    function _getValueOptionListCode(sConfigObjectNode) {
        var aParts = sConfigObjectNode.split(VALUE_OPTION_LIST_PREFIX, 2);
        if (aParts.length === 2) {
            return aParts[1];
        } else {
            return null;
        }
    }

    function _sortCodesByText(oA, oB) {
        if (oA.TEXT > oB.TEXT) {
            return 1;
        }
        if (oA.TEXT < oB.TEXT) {
            return -1;
        }
        return 0;
    }

	function _sortCodesByTextReverse(oA, oB){
		if (oA.TEXT > oB.TEXT) {
			return -1;
		}
		if (oA.TEXT < oB.TEXT) {
			return 1;
		}
		return 0;	    
	}    

    function _sortCodesByValueField(sValueField) {
        return function(oA, oB) {
            if(sValueField === "NUM_VALUE"){
                oA[sValueField] = parseFloat(oA[sValueField]);
                oB[sValueField] = parseFloat(oB[sValueField]);
            }
            if (oA[sValueField] > oB[sValueField]) {
                return 1;
            }
            if (oA[sValueField] < oB[sValueField]) {
                return -1;
            }
            return 0;
        };
    }
    function _sortCodesBySequenceNo(sValueField){
    return function(o1, o2) {
			if (o1[sValueField] < o2[sValueField]) {
				return -1;
			} else {
				return 1;
			}
		};      
    }    

    function _readCodeValues(sConfigObjectNode) {

        var oODataModel = _getODataModel();
        var sPath = sConfigObjectNode;

        // Value option list are a specific case as they are generic code lists with a shared persistency
        // To users of the code model we hide that fact and each value option list is a configuration object node with
        // the following naming convention: "sap.ino.xs.object.basis.ValueOptionList.Root_" + oValueOptionListCode
        if (_isValueOptionListTable(sConfigObjectNode)) {
            var sValueOptionListCode = _getValueOptionListCode(sConfigObjectNode);

            // We read all value options codes and filter by list code
            // Attention: _getCode might call _readCodeValues again, take care of endless loops!
            var aValues = _getCode(VALUE_OPTION_CODE_TABLE, function(oCode) {
                return oCode.LIST_CODE === sValueOptionListCode;
            });

            var oValueOptionList = _getCode(VALUE_OPTION_LIST_TABLE, sValueOptionListCode);

            // Sort options according to their value
            var sValueField = "";
            switch (oValueOptionList.DATATYPE_CODE) {
                case DATATYPE_INTEGER :
                case DATATYPE_NUMERIC :
                    sValueField = "NUM_VALUE";
                    break;
                case DATATYPE_BOOLEAN :
                    sValueField = "BOOL_VALUE";
                    break;
                case DATATYPE_TEXT :
                    sValueField = "NUM_VALUE";
                    break;
                default :
                    break;
            }
            //aValues.sort(_sortCodesByValueField(sValueField));
			 //aValues.sort(_sortCodesByTextReverse);
            aValues.sort(_sortCodesBySequenceNo("SEQUENCE_NO"));
            // based on the type of the value option, the code is set to
            // the defined value, so that dropdowns can work as expected
            var aResultValues = jQuery.map(aValues, function(oCode) {
                var oCodeCopy = jQuery.extend({}, oCode);

                switch (oValueOptionList.DATATYPE_CODE) {
                    case DATATYPE_INTEGER :
                        oCodeCopy.NUM_VALUE = parseInt(oCodeCopy.NUM_VALUE, 10);
                        oCodeCopy.CODE = oCodeCopy.NUM_VALUE;
                        break;
                    case DATATYPE_NUMERIC :
                        oCodeCopy.NUM_VALUE = parseFloat(oCodeCopy.NUM_VALUE);
                        oCodeCopy.CODE = oCodeCopy.NUM_VALUE;
                        break;
                    case DATATYPE_BOOLEAN :
                        // value options for Boolean does not make real sense
                        // but to be complete we consider this as well
                        oCodeCopy.CODE = oCodeCopy.BOOL_VALUE;
                        break;
                    case DATATYPE_TEXT :
                        oCodeCopy.CODE = oCodeCopy.TEXT_VALUE;
                        break;
                    default :
                        break;
                }
                return oCodeCopy;
            });
            return aResultValues;
        }

        var aCodes = [];

        // At the moment we do synchronous read (4th parameter = false) in order
        // to simplify the API. As code fetching is fast and happens only once per configuration object node
        // this seems OK from a responsive UI point of view
        oODataModel.read(sPath, null, null, false, function(oResponse) {
            if (oResponse && oResponse.results && oResponse.results.length > 0) {
                jQuery.each(oResponse.results, function(iIndex, oCode) {

                    // copy it, as we also delete data
                    oCode = jQuery.extend({}, oCode);
                    delete oCode.__metadata;

                    oCode.TEXT = _getBundleText(sConfigObjectNode, oCode.CODE);
                    // Set default text if no bundle text is available
                    if (oCode.DEFAULT_TEXT && (oCode.TEXT === null || !oCode.TEXT)) {
                        oCode.TEXT = oCode.DEFAULT_TEXT;
                    }
                    if(["sap.ino.xs.object.iam.IdentityLogSetting.Root"].indexOf(sConfigObjectNode) === -1){
                        oCode.LONG_TEXT = _getBundleLongText(sConfigObjectNode, oCode.CODE);
                    }
                    // Set default text if no bundle text is available
                    // If there is still nothing to display use short text
                    if (oCode.LONG_TEXT === null) {
                        if (oCode.DEFAULT_LONG_TEXT) {
                            oCode.LONG_TEXT = oCode.DEFAULT_LONG_TEXT;
                        } else {
                            oCode.LONG_TEXT = oCode.TEXT;
                        }
                    }

                    aCodes.push(oCode);
                });
            }
        });

        // Sort it alphabetically by text
        if(sPath !== "sap.ino.xs.object.basis.ValueOptionList.ValueOptions"){
            return aCodes.sort(_sortCodesByText);
        }
        else {
            return  aCodes.sort(_sortCodesBySequenceNo("SEQUENCE_NO"));
        }
    }

    /**
     * @param sConfigObjectNode
     * @param vCodeFilter
     *            Optional. If vCode is a string: only the code object for the code value is returned, if function: it
     *            is used as filter function for jQuery.grep to filter code values
     * @returns Array<Code> || <Code> 
     * Example: ({CODE: "sap.ino.config.A", TEXT: "ABC"})
     */
    function _getCode(sConfigObjectNode, vCodeFilter, mParameters) {
        var aCodes = CodeModel.getProperty("/" + sConfigObjectNode);
        var aParamCodes;
        if (mParameters) {
            aParamCodes = CodeModel.getProperty("/" + JSON.stringify(mParameters) + "/" + sConfigObjectNode);
        }
        if (aCodes === null || aCodes === undefined) {
            aCodes = _readCodeValues(sConfigObjectNode);
            CodeModel.setProperty("/" + sConfigObjectNode, aCodes);
        }

        if (mParameters && aParamCodes) {
            aCodes = aParamCodes;
        }

        // add codes based on parameters
        if (mParameters && !aParamCodes) {
            if (mParameters.includeEmptyCode === true) {
                var oEmptyCode = {
                    CODE : "",
                    TEXT : "",
                    LONG_TEXT : ""
                };
                aParamCodes = [oEmptyCode].concat(aCodes);
            } else {
                aParamCodes = aCodes;
            }

            aCodes = aParamCodes;
            var oCodeTable = CodeModel.getProperty("/" + JSON.stringify(mParameters)) || {};
            oCodeTable[sConfigObjectNode] = aParamCodes;
            CodeModel.setProperty("/" + JSON.stringify(mParameters), oCodeTable);
        }

        if (vCodeFilter === undefined || vCodeFilter === "") {
            return aCodes;
        }

        var fnFilter = vCodeFilter;
        if (!jQuery.isFunction(fnFilter)) {
            fnFilter = function(oCode) {
                return (oCode.CODE === vCodeFilter);
            };
        }

        if (fnFilter && jQuery.isFunction(fnFilter)) {
            var aFilteredCodes = jQuery.grep(aCodes, fnFilter);
            if (!jQuery.isFunction(vCodeFilter)) {
                return aFilteredCodes[0];
            } else {
                return aFilteredCodes;
            }
        }

        return aCodes;
    }

    function _getBundleText(sConfigObjectNode, sCode) {
        // We have to use "getProperty()". getResourceBundle.getText() does NOT consider the custom texts
        var sText;
		if(_getResourceModel(sConfigObjectNode)){
		    sText = _getResourceModel(sConfigObjectNode).getProperty(sCode);
		}
		
        if (sText === sCode) {
            return null;
        } else {
            return sText;
        }
    }

    function _getBundleLongText(sConfigObjectNode, sCode) {
        // We have to use "getProperty()". getResourceBundle.getText() does NOT consider the custom texts
        var sLongTextKey = sCode + "_LONG";
        var sText;
		if(_getResourceModel(sConfigObjectNode)){
		    sText = _getResourceModel(sConfigObjectNode).getProperty(sLongTextKey);
		}
        if (sText === sLongTextKey) {
            return null;
        } else {
            return sText;
        }
    }

    var _mResourceModels = {};
    function _getResourceModel(sConfigObjectNode) {
        // The "code Table" is referenced by AOF object name + node name
        // The textbundle is annoted as custom property "codeTextBundle"
        // at each node

        if (_mResourceModels[sConfigObjectNode]) {
            return _mResourceModels[sConfigObjectNode];
        }

        var aNameParts = sConfigObjectNode.split(".");
        var sNodeName = aNameParts.pop();
        var sObjectName = aNameParts.join(".");
        var oMetadata = MetaModel.getApplicationObjectMetadata(sObjectName);
        if (!oMetadata) {
            throw Error("Please provide valid fully qualified AOF object node reference");
        }

        var oModel;
		if (oMetadata.nodes[sNodeName].customProperties && oMetadata.nodes[sNodeName].customProperties.codeTextBundle) {
			oModel = new sap.ui.model.resource.ResourceModel({
				bundleUrl: _getResourceName(oMetadata.nodes[sNodeName].customProperties.codeTextBundle)
			});
		}

        _mResourceModels[sConfigObjectNode] = oModel;
        return oModel;
    }

    function _getResourceName(sResourceName) {
        if (sResourceName.indexOf("::") > -1) {
            var aParts = arguments[0].split("::");
            sResourceName = aParts[1];
        }
        return Configuration.getResourceBundleURL(sResourceName);
    }

    function _getTextFormatter(fnTextAccess, sConfigObjectNode) {
        if (sConfigObjectNode) {
            return function(sCode) {
                return fnTextAccess(sConfigObjectNode, sCode);
            };
        } else {
            return function(sConfigObjectNode, sCode) {
                return fnTextAccess(sConfigObjectNode, sCode);
            };
        }
    }

    function _getTextInternal(sConfigObjectNode, sCode, sTextProperty) {
        if (sCode === null || sCode === undefined) {
            return "";
        }

        var oCode = _getCode(sConfigObjectNode, sCode);
        if (!oCode) {
            return sCode;
        }

        return oCode[sTextProperty];
    }

    // we override bindList in order to implement lazy loading of codes
    // when the code model is bound
    CodeModel.bindList = function(sPath, oContext, aSorters, aFilters, mParameters) {

        // iStartIndex and iLength are ignored as code lists are always fetched completely
        // If binding context is given no loading is necessary as code lists are loaded completely
        // If sPath is root path we do not load all codes

        // get rid of the leading / in the path
        var sCodeTableName = sPath.substring(1, sPath.length);

        if (!oContext && sPath != "/") {
            // this method load the codes lazy
            CodeModel.getCodes(sCodeTableName, undefined, mParameters);
        }

        if (mParameters) {
            sPath = "/" + JSON.stringify(mParameters) + "/" + sCodeTableName;
        }

        var oBinding = new JSONListBinding(this, sPath, oContext, aSorters, aFilters, mParameters);
        return oBinding;
    };

    /**
     * @param sConfigObjectNode
     *            Name of configuration object node
     * @param fnFilterFunction
     *            optional function to filter results (@see jQuery.grep)
     * @return an array of code value and text tuples [{CODE: "SAP_DISCONTINUED", TEXT:"Rejected"}]
     */
    CodeModel.getCodes = function(sConfigObjectNode, fnFilterFunction, mParameters) {
        return _getCode(sConfigObjectNode, fnFilterFunction, mParameters);
    };

    /**
     * @param sConfigObjectNode
     *            Name of configuration object node
     * @param sCode
     *            code in the node
     * @return short text of code
     */

    CodeModel.getText = function(sConfigObjectNode, sCode) {
        return _getTextInternal(sConfigObjectNode, sCode, "TEXT");
    };

    /**
     * @param sConfigObjectNode
     *            Name of configuration object node
     * @param sCode
     *            code in the node
     * @return long, descriptive text of code
     */
    CodeModel.getLongText = function(sConfigObjectNode, sCode) {
        return _getTextInternal(sConfigObjectNode, sCode, "LONG_TEXT");
    };

    /**
     * @param sConfigObjectNode
     *            Name of configuration object node
     * @return formatter function to be used as formatter in SAPUI5, which formats codes to its short text
     */
    CodeModel.getFormatter = function(sConfigObjectNode) {
        return _getTextFormatter(CodeModel.getText, sConfigObjectNode);
    };

    /**
     * @param sConfigObjectNode
     *            Name of configuration object node
     * @return formatter function to be used as formatter in SAPUI5, which formats codes to its long text
     */
    CodeModel.getLongTextFormatter = function(sConfigObjectNode) {
        return _getTextFormatter(CodeModel.getLongText, sConfigObjectNode);
    };
    
    /**
     * @param sValueOptionListCode
     *            Code of the Value option List
     * @return configuration object node to use for getting the formatter functions
     */
    CodeModel.getConfigObjectNodeForValueOptionList = function(sValueOptionListCode){
        return VALUE_OPTION_LIST_PREFIX + sValueOptionListCode;
    };

    CodeModel.refresh = function(sObjectName) {
        if (!sObjectName) {
            CodeModel.setData({});
            return;
        }
        var aPathsToInitialize = [];
        jQuery.each(CodeModel.getData(), function(sProperty, vValue) {
            if (sProperty.lastIndexOf(sObjectName) != -1) {
                aPathsToInitialize.push("/" + sProperty);
                return;
            }

            // Check also the parameterized part of the code model
            if (jQuery.isPlainObject(vValue)) {
                jQuery.each(vValue, function(sChildProperty) {
                    if (sChildProperty.lastIndexOf(sObjectName) != -1) {
                        aPathsToInitialize.push("/" + sProperty + "/" + sChildProperty);
                    }
                });
            }
        });

        jQuery.each(aPathsToInitialize, function(iIndex, sPath) {
            CodeModel.setProperty(sPath, null);
        });
    };
    
    return sap.ino.commons.models.core.CodeModel;
});
}; // end of sap/ino/commons/models/core/CodeModel.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.Attachment') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.object.Attachment'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.unified.FileUploaderParameter'); // unlisted dependency retained
jQuery.sap.require('sap.ino.thirdparty.jimp.min'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/models/object/Attachment",[
    "sap/ino/commons/models/aof/ApplicationObject",
    "sap/ino/commons/models/core/ReadSource",
    "sap/ino/commons/application/Configuration",
    "sap/ui/unified/FileUploaderParameter",
    "sap/ino/thirdparty/jimp.min"
], function(ApplicationObject, ReadSource, Configuration, FileUploaderParameter) {
	"use strict";

	var Attachment = ApplicationObject.extend("sap.ino.commons.models.object.Attachment", {
		objectName: "sap.ino.xs.object.attachment.Attachment",
		readSource: ReadSource.getDefaultODataSource("Attachment")
	});

	function ajaxCall(sUrl, oFile, sFilename, sType, fnSuccess, fnError,sFileLabel) {
		var oFormData = new FormData();
		if (Array.isArray(oFile)) {
			oFile.map(function(f) {
				if (sFilename !== null && sFilename !== undefined) {
					oFormData.append("upload", f, sFilename);
				} else {
					oFormData.append("upload", f, sFilename);
				}
			});
		} else {
			if (sFilename !== null && sFilename !== undefined) {
				oFormData.append("upload", oFile, sFilename);
			} else {
				oFormData.append("upload", oFile);
			}
		}
		var oHeaders = {};
		oHeaders.label = sFileLabel;
		return jQuery.ajax({
			url: sUrl,
			type: sType,
			headers : oHeaders,
			success: function(oResponse) {
				var oResult = Attachment.parseUploadResponse(oResponse);
				if (jQuery.type(fnSuccess) === "function") {
					fnSuccess(oResult);
				}
			},
			error: function(oResponse) {
				if (jQuery.type(fnError) === "function") {
					fnError(oResponse);
				}
			},
			data: oFormData,
			cache: false,
			contentType: false,
			processData: false
		});
	}

	Attachment.prepareFileUploader = function(oFileUploader, aFile) {
		oFileUploader.removeAllHeaderParameters();
		var oCustomerHeaderToken = new FileUploaderParameter({
			name: "x-csrf-token",
			value: Configuration.getXSRFToken()
		});
		oFileUploader.addHeaderParameter(oCustomerHeaderToken);
		var oCustomerHeaderFilename = new FileUploaderParameter({
			name: "unicode_filename",
			value: Attachment.stringToUnicode(aFile[0].name)
		});
		oFileUploader.addHeaderParameter(oCustomerHeaderFilename);
	};

	Attachment.uploadFile = function(oFile, oSrcFile, iFileId, bCompressed) {
		var oDeferred = new jQuery.Deferred();
		var sFileName = oFile.name || oFile.type.replace(/\//g, ".");
		var sUrlPath = iFileId ? '/' + iFileId : '';
		var sUrl = Attachment.getEndpointURL() + sUrlPath;
		var sType = iFileId ? 'PUT' : 'POST';
		var bUploadSource = oSrcFile && !iFileId ? true : false;
		if(bCompressed){
    		this.compressFile(oFile, oSrcFile, bUploadSource).then(function(oData) {
    			ajaxCall(sUrl, oData, sFileName, sType, function(oResult) {
    				oDeferred.resolve(oResult);
    			}, function() {
    				oDeferred.reject();
    			});
    		}).catch(function() {
    			oDeferred.reject();
    		});
		} else {
		    ajaxCall(sUrl, oFile, sFileName, sType, function(oResult) {
				oDeferred.resolve(oResult);
			}, function() {
				oDeferred.reject();
			});
		}
		return oDeferred.promise();
	};
	Attachment.uploadFileIncludeFileLabel = function(oFile, sFileLabel, oSrcFile, iFileId, bCompressed) {
		var oDeferred = new jQuery.Deferred();
		var sFileName = oFile.name || oFile.type.replace(/\//g, ".");
		var sUrlPath = iFileId ? '/' + iFileId : '';
		var sUrl = Attachment.getEndpointURL() + sUrlPath;
		var sType = iFileId ? 'PUT' : 'POST';
		var bUploadSource = oSrcFile && !iFileId ? true : false;
		if(bCompressed){
    		this.compressFile(oFile, oSrcFile, bUploadSource).then(function(oData) {
    			ajaxCall(sUrl, oData, sFileName, sType, function(oResult) {
    				oDeferred.resolve(oResult);
    			}, function() {
    				oDeferred.reject();
    			},sFileLabel);
    		}).catch(function() {
    			oDeferred.reject();
    		});
		} else {
		    ajaxCall(sUrl, oFile, sFileName, sType, function(oResult) {
				oDeferred.resolve(oResult);
			}, function() {
				oDeferred.reject();
			},sFileLabel);
		}
		
		return oDeferred.promise();
	};
	function _getPromise(oBlob, quality) {
		return new Promise(function(resolve) {
			if (!quality) {
				resolve(oBlob);
			} else {
				try {
					if (oBlob.type.startsWith('image') && Jimp) {
						var reader = new FileReader();

						reader.onload = function() {
							var fBuffer = reader.result;
                            
						    Jimp.read(fBuffer).then(function(img) {
								var compressedImg = img;

								compressedImg = compressedImg.quality(
									quality
								);

								compressedImg
									.getBufferAsync(oBlob.type)
									.then(function(compressedBuffer) {
										var newBlob = new Blob([compressedBuffer], {
											type: oBlob.type
										});
										// assign file.name to blob
										newBlob.name = oBlob.name;

										// Sometimes the compressed image will be larger than the original size
										if (newBlob.size > oBlob.size) {
											resolve(oBlob);
										} else {
											resolve(newBlob);
										}

									});
							});

						};

						reader.readAsArrayBuffer(oBlob);

					} else {
						// no image
						resolve(oBlob);
					}
				} catch (err) {
					// compress failed, downgrade to original blob file
					// MessageToast.show('compress img failed');
					resolve(oBlob);
				}
			}

		});
	}

	Attachment.compressFile = function(oFile, oSrcFile, bUploadSource) {
		var promiseList = [];
		if(bUploadSource && oSrcFile){
		    promiseList.push(_getPromise(oSrcFile));
		}
		promiseList.push(_getPromise(oFile, 20));
		promiseList.push(_getPromise(oFile, 80));
		return Promise.all(promiseList);
	};

	Attachment.parseUploadResponse = function(sResponseRaw) {
		// expected format <html><head></head><body>[statuscode]:{...}</body></html>
		var aReg = sResponseRaw.match(new RegExp("^<html.*<body>.*((?:[0-9]*...))\]:(.*)</body></html>"));
		if (aReg && aReg.length === 3 && !isNaN(parseInt(aReg[1], 10))) {
			var iStatusCode = parseInt(aReg[1], 10);
			try {
				var oResponse = JSON.parse(aReg[2]);
				var oResult = JSON.parse(aReg[2]);
				return {
					success: iStatusCode < 300,
					attachmentId: oResult.GENERATED_IDS && oResult.GENERATED_IDS[-1] || null,
					fileName: oResult.FILE_NAME,
					mediaType: oResult.MEDIA_TYPE,
					messages: oResult.MESSAGES
				};
			} catch (oException) {
				return null;
			}
		} else {
			return null;
		}
	};

	Attachment.stringToUnicode = function(sString) {
		return sString.replace(/[\s\S]/g, function(sEscape) {
			return "\\u" + ("0000" + sEscape.charCodeAt().toString(16)).slice(-4);
		});
	};

	Attachment.unicodeToString = function(sString) {
		return sString.replace(/\\u[\dABCDEFabcdef][\dABCDEFabcdef][\dABCDEFabcdef][\dABCDEFabcdef]/g, function(sMatch) {
			return String.fromCharCode(parseInt(sMatch.replace(/\\u/g, ""), 16));
		});
	};

	return Attachment;
});
}; // end of sap/ino/commons/models/object/Attachment.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.Blog') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.object.Blog'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.message.Message'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/models/object/Blog",[
    "sap/ino/commons/models/aof/ApplicationObject",
    "sap/ino/commons/models/core/ReadSource",
    "sap/ui/core/message/Message",
    "sap/ui/core/MessageType",
    "sap/ino/commons/application/Configuration",
    "sap/ino/controls/BlogStatusType"
], function(ApplicationObject, ReadSource, Message, MessageType, Configuration, BlogStatusType) {
	"use strict";

	var Blog = ApplicationObject.extend("sap.ino.commons.models.object.Blog", {
		objectName: "sap.ino.xs.object.blog.Blog",
		readSource: ReadSource.getDefaultODataSource("CampaignBlogsFull", {
			excludeNodes: ["Relations"]
		}),
		invalidation: {
			entitySets: ["CampaignBlogsFull"]
		},
		actionImpacts: {},
		determinations: {
			onCreate: _determineCreate
		},
		actions: {
			submit: {
				execute: _modify
			},
			majorPublishSubmit: {
				execute: _majorPublish
			},
			publishSubmit: {
				execute: _publish
			},
			unPublishSubmit: {
				execute: _unPublish
			}
		},
		setData: _setData,
		setProperty: _setProperty,
		addTag: _addTag,
		addAttachment: _addAttachment,
		removeAttachment: _removeAttachment
	});

	function _determineCreate(oData, oBlog) {
		var aTag = jQuery.map(oData.Tags || [], function(sTag) {
			return {
				ID: oBlog.getNextHandle(),
				NAME: sTag
			};
		});
		var oCurrentUser = Configuration.getCurrentUser();
		return {
			"TITLE": oData.TITLE || "",
			"DESCRIPTION": oData.DESCRIPTION || "",
			"CREATED_AT": new Date(),
			"CREATED_BY_NAME": oCurrentUser.NAME,
			"STATUS_CODE": BlogStatusType.Draft,
			"OBJECT_TYPE_CODE": "CAMPAIGN",
			"OBJECT_ID": oData.OBJECT_ID || 0,
			"Tags": aTag
		};
	}

	function _setData(oData) {
		/* jshint validthis: true */
		ApplicationObject.prototype.setData.apply(this, arguments);
		if (oData.OBJECT_ID > 0) {
			this.setProperty("/OBJECT_ID", oData.OBJECT_ID);
		}
	}

	function _setProperty(sPath, vValue, oContext, bAsyncUpdate) {
		/* jshint validthis: true */
		var bSuccess = false;
		bSuccess = ApplicationObject.prototype.setProperty.apply(this, arguments);
		// Normalize the path to be able to deal with bindings where the property of the root
		// model starts with "/"
		_handleCampaign.call(this, sPath, vValue, oContext, bAsyncUpdate);
		return bSuccess;
	}

	function _handleCampaign(sPath, vValue, oContext, bAsyncUpdate) {
		var sPropName = (sPath[0] === "/" ? sPath.substring(1) : sPath);
		if (sPropName !== "OBJECT_ID") {
			return;
		}
		var oDataModel = this.getReadSourceModel();
		var oBlog = this;
		var iCampaignId = vValue;
		// this happens when invalid values are entered in the combobox
		if (iCampaignId === "" || iCampaignId === "0") {
			iCampaignId = 0;
			ApplicationObject.prototype.setProperty.apply(oBlog, [sPath, iCampaignId, oContext, bAsyncUpdate]);
			return;
		}

		if (iCampaignId === 0) {
			_setCampaignDetails.call(oBlog, {
				NAME: "",
				SHORT_NAME: "",
				COLOR_CODE: "",
				PHASE_COUNT: 4,
				IDEA_DESCRIPTION_TEMPLATE: ""
			});
			return;
		}
		oDataModel.read("/CampaignSmall(" + iCampaignId + ")", {
			success: function(oCampaign) {
				_setCampaignDetails.call(oBlog, oCampaign);
			}
		});
	}

	function _setCampaignDetails(oCampaign) {
		this.setProperty("/CAMPAIGN_NAME", oCampaign.NAME);
		this.setProperty("/CAMPAIGN_SHORT_NAME", oCampaign.SHORT_NAME);
		this.setProperty("/CAMPAIGN_COLOR", oCampaign.COLOR_CODE);
		this.setProperty("/STEPS", oCampaign.PHASE_COUNT);
		this.setProperty("/CAMPAIGN_BACKGROUND_IMAGE_ID", oCampaign.CAMPAIGN_BACKGROUND_IMAGE_ID);
		this.setProperty("/CAMPAIGN_SMALL_BACKGROUND_IMAGE_ID", oCampaign.CAMPAIGN_SMALL_BACKGROUND_IMAGE_ID);
		this.setProperty("/CAMPAIGN_VOTE_TYPE_CODE", oCampaign.VOTE_TYPE_CODE);
	}

	function _addTag(oNewTag) {
		/* jshint validthis: true */
		var oMessage;
		var aTags = this.getProperty("/Tags");

		if (!oNewTag.NAME || jQuery.trim(oNewTag.NAME).length === 0) {
			oMessage = new Message({
				key: "MSG_INVALID_EMPTY_TAG",
				type: MessageType.Error,
				group: "TAG"
			});
			return oMessage;
		}

		oNewTag.NAME = jQuery.trim(oNewTag.NAME);

		if (!oNewTag.TAG_ID && oNewTag.NAME) {
			// Tags are created "on the fly"
			// so for new tags (not only tag assignment)
			// a new handle is used
			oNewTag.TAG_ID = this.getNextHandle();
		}
		var aMatches = jQuery.grep(aTags, function(oTag) {
			return oTag.NAME.toLowerCase() === oNewTag.NAME.toLowerCase();
		});

		if (aMatches.length === 0) {
			this.addChild(oNewTag, "Tags");
		} else {
			return new Message({
				key: "MSG_DUPLICATE_TAG",
				type: MessageType.Error
			});
		}
	}

	function _addAttachment(oNewAttachment) {
		oNewAttachment.ROLE_TYPE_CODE = "ATTACHMENT";
		this.addChild(oNewAttachment, "Attachments");
	}

	function _removeAttachment(iId) {
		var aAttachment = jQuery.grep(this.getProperty("/Attachments") || [], function(oAttachment) {
			return oAttachment.ATTACHMENT_ID === iId;
		});
		var oFirstAttachment = aAttachment && aAttachment[0];
		if (oFirstAttachment) {
			this.removeChild(oFirstAttachment);
		}
	}

	function _unPublish(vKey, oBlog, oParameter, oActionMetadata, oSettings) {
		var oDeferred = new jQuery.Deferred();
		var oUnPublishRequest = oBlog.unPublish(oSettings);
		oUnPublishRequest.fail(oDeferred.reject);
		oUnPublishRequest.done(oDeferred.resolve);
		return oDeferred.promise();
	}

	function _modify(vKey, oBlog, oParameter, oActionMetadata, oSettings) {
		return _update.call(this, vKey, oBlog, oParameter, oActionMetadata, oSettings);
	}

	function _majorPublish(vKey, oBlog, oParameter, oActionMetadata, oSettings) {
		return _update.call(this, vKey, oBlog, oParameter, oActionMetadata, oSettings, "majorPublish");
	}

	function _publish(vKey, oBlog, oParameter, oActionMetadata, oSettings) {
		return _update.call(this, vKey, oBlog, oParameter, oActionMetadata, oSettings, "publish");
	}

	function _update(vKey, oBlog, oParameter, oActionMetadata, oSettings, sMethod) {
		var oDeferred = new jQuery.Deferred();
		var oModifyRequest = oBlog.modify(oSettings);
		oModifyRequest.fail(oDeferred.reject);
		if (!sMethod) {
			oModifyRequest.done(oDeferred.resolve);
		} else {
			oModifyRequest.done(function() {
				var oSubmitRequest = oBlog[sMethod](oParameter, oSettings);
				oSubmitRequest.fail(oDeferred.reject);
				oSubmitRequest.done(oDeferred.resolve);
			});
		}
		return oDeferred.promise();
	}

	return Blog;
});
}; // end of sap/ino/commons/models/object/Blog.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.BlogComment') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.object.BlogComment'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/models/object/BlogComment",[
       "sap/ino/commons/models/aof/ApplicationObject",
       "sap/ino/commons/models/core/ReadSource"
   ], function(ApplicationObject, ReadSource) {
	"use strict";
	return ApplicationObject.extend("sap.ino.commons.models.object.BlogComment", {
		objectName: "sap.ino.xs.object.blog.Comment",
		readSource: ReadSource.getDefaultAOFSource(),
		invalidation: {
			entitySets: ["BlogComment"]
		},
		actionImpacts: {
			"del": [{
				"objectName": "sap.ino.commons.models.object.Blog",
				"objectKey": "OBJECT_ID",
				"impactedAttributes": ["COMMENT_COUNT"]
			}],
			"create": [{
				"objectName": "sap.ino.commons.models.object.Blog",
				"objectKey": "OBJECT_ID",
				"impactedAttributes": ["COMMENT_COUNT"]
			}]
		}
	});
});
}; // end of sap/ino/commons/models/object/BlogComment.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.Campaign') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.object.Campaign'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.message.Message'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/models/object/Campaign",[
       "sap/ino/commons/models/aof/ApplicationObject",
       "sap/ino/commons/models/aof/PropertyModel",
       "sap/ino/commons/models/core/ReadSource",
       "sap/ino/commons/models/core/Extensibility",
       "sap/ino/commons/application/Configuration",
       "sap/ui/core/message/Message",
       "sap/ui/core/MessageType",
       "sap/ui/core/format/DateFormat",
       "sap/ino/commons/models/core/CodeModel"
   ], function(ApplicationObject, PropertyModel, ReadSource, Extensibility, Configuration, Message, MessageType, DateFormat, CodeModel) {
    "use strict";

    var Status = {
        Draft : "sap.ino.config.CAMP_DRAFT",
        Published : "sap.ino.config.CAMP_PUBLISHED"
    };

    var Campaign = ApplicationObject.extend("sap.ino.commons.models.object.Campaign", {
        objectName : "sap.ino.xs.object.campaign.Campaign",
        readSource : ReadSource.getDefaultODataSource("CampaignFull"),
        invalidation : {
            entitySets : ["CampaignFull", "CampaignSmall", "CampaignSmallIdeaAssign", "CampaignCount", "CampaignSearch", "CampaignSearchParams", "CampaignEntityCount", "MyCampaignFollow"]
        },
        determinations : {
            onCreate : function(oData, oCampaign) {
                var dToday = DateFormat.setBeginOfDay(new Date());
                var dOneYearAfter = new Date();
                dOneYearAfter.setFullYear(dOneYearAfter.getFullYear() + 1);
                sap.ui.ino.models.util.Date.setEndOfDay(dOneYearAfter);

                var aVoteCodes = CodeModel.getCodes("sap.ino.xs.object.campaign.VoteType.Root");
                var sVoteCode;
                if (aVoteCodes && aVoteCodes.length > 0) {
                    sVoteCode = aVoteCodes[0].CODE;
                }

                var oInitialCampaignData = {
                    VALID_FROM : dToday,
                    VALID_TO : dOneYearAfter,
                    SUBMIT_FROM : dToday,
                    SUBMIT_TO : dOneYearAfter,
                    IS_BLACK_BOX : 0,
                    STATUS_CODE : Status.Draft,
                    COLOR_CODE : "FFFFFF",
                    VOTE_TYPE_CODE : sVoteCode,
                    LanguageTexts : [],
                    Managers : [],
                    Experts : [],
                    Coaches : [],
                    Participants : [],
                    LanguagePages : [],
                    Attachments : []
                };
                _mergeLanguageTexts(oInitialCampaignData, oCampaign);
                Extensibility.initExtensionNode(oInitialCampaignData, "Extension", oCampaign);
                return oInitialCampaignData;
            },

            onRead : function(oData, oCampaign) {
                _mergeLanguageTexts(oData, oCampaign);
                oData.LanguagePages.sort(function(a, b) {
                    return a.PAGE_NO - b.PAGE_NO;
                });
                oData.Phases.sort(function(a, b) {
                    return a.SEQUENCE_NO - b.SEQUENCE_NO;
                });
                Extensibility.initExtensionNode(oData, "Extension", oCampaign);
                return oData;
            },

            onPersist : function(oData, oCampaign) {
                /*
                 * we need to invalidate all touched groups due to they must not be deleted if the are used in the
                 * campaign or they now can be deleted as they are no longer part of the campaign => we simply
                 * invalidate all groups
                 */
                PropertyModel.invalidateCachedProperties("sap.ino.xs.object.iam.Group");
            },

            onNormalizeData : function(oCampaign) {
                // determine page number based on current array order
                // page numbers are cross-language which does not hurt as relative order in language is important
                jQuery.each(oCampaign.LanguagePages || [], function(iIndex, oPage) {
                    oPage.PAGE_NO = iIndex;
                });

                jQuery.each(oCampaign.Phases || [], function(iIndex, oPage) {
                    oPage.SEQUENCE_NO = iIndex;
                });

                return oCampaign;
            },

            onMergeConcurrentChanges : function(oMergeResult, oUserChange) {
                // When two users have created texts in the same language
                // there are two objects after standard merge
                // As the UI shows only one text per language we make sure that for this
                // case the user change wins
                jQuery.each(oUserChange.LanguageTexts || [], function(iIndex, oText) {
                    if (oText.ID < 0) {
                        var sLanguage = oText.LANG;
                        var iId = oText.ID;
                        var aDuplicate = jQuery.grep(oMergeResult.LanguageTexts || [], function(oText, iIndex) {
                            return oText.LANG === sLanguage && oText.ID !== iId;
                        });
                        jQuery.sap.assert((aDuplicate.length <= 1));
                        if (aDuplicate.length === 1) {
                            // apply user change to existing text
                            oText.ID = aDuplicate[0].ID;
                            jQuery.extend(aDuplicate[0], oText);
                            for (var i = 0; oMergeResult.LanguageTexts; i++) {
                                if (oMergeResult.LanguageTexts[i].ID === iId) {
                                    oMergeResult.LanguageTexts.splice(i, 1);
                                    return;
                                }
                            }
                        }
                    }
                });

                return oMergeResult;
            }

        },
        actions : {
            publish : {
                enabledCheck : function(oCampaign, bEnabled) {
                    if (bEnabled === undefined) {
                        return oCampaign.getProperty("/property/actions/create/enabled");
                    } else {
                        var bUpdate = oCampaign.getProperty("/property/actions/update/enabled");
                        var bSubmit = oCampaign.getProperty("/property/actions/submit/enabled");
                        return bUpdate && bSubmit && bEnabled;
                    }
                },
                execute : function(vKey, oCampaign, oParameter, oActionMetadata, oSettings) {
                    var bDraft = (oCampaign.getProperty("/STATUS_CODE") == Status.Draft);

                    var oDeferred = new jQuery.Deferred();
                    var oModifyRequest = oCampaign.modify(oSettings);
                    oModifyRequest.fail(oDeferred.reject);
                    if (bDraft) {
                        oModifyRequest.done(function() {
                            var oSubmitRequest = oCampaign.submit(oSettings);
                            oSubmitRequest.fail(oDeferred.reject);
                            oSubmitRequest.done(oDeferred.resolve);
                        });
                    } else {
                        oModifyRequest.done(oDeferred.resolve);
                    }
                    return oDeferred.promise();
                }
            },
            save : {
                enabledCheck : function(oCampaign) {
                    if (oCampaign.getProperty("/ID") < 0) {
                        return oCampaign.getProperty("/property/actions/create/enabled");
                    } else {
                        var bUpdate = oCampaign.getProperty("/property/actions/update/enabled");
                        var bDraft = (oCampaign.getProperty("/STATUS_CODE") == Status.Draft);
                        return bUpdate && bDraft;
                    }
                },
                execute : function(vKey, oCampaign, oParameter, oActionMetadata, oSettings) {
                    return oCampaign.modify(oSettings);
                }
            }
        },

        setProperty : function(sPath, vValue) {
            if (sPath === "/SUBMIT_TO" || sPath === "/VALID_TO") {
                sap.ui.ino.models.util.Date.setEndOfDay(vValue);
            }
            return ApplicationObject.prototype.setProperty.apply(this, arguments);
        },

        setCampaignImage : function(oData) {
        	this._setImage(oData, "CAMPAIGN_DETAIL_IMG", "/CAMPAIGN_IMAGE_ASSIGN_ID", "/CAMPAIGN_IMAGE_ID");
        },
        
        setCampaignBackgroundImage : function(oData) {
        	this._setImage(oData, "BACKGROUND_IMG", "/CAMPAIGN_BACKGROUND_IMAGE_ASSIGN_ID", "/CAMPAIGN_BACKGROUND_IMAGE_ID");
        },
        
        setCampaignMobileSmallBackgroundImage : function(oData) {
            this._setImage(oData, "SMALL_BACKGROUND_IMG", "/CAMPAIGN_SMALL_BACKGROUND_IMAGE_ASSIGN_ID", "/CAMPAIGN_SMALL_BACKGROUND_IMAGE_ID");
        },
        
        setCampaignListImage : function(oData) {
            this._setImage(oData, "CAMPAIGN_LIST_IMG", "/CAMPAIGN_LIST_IMAGE_ASSIGN_ID", "/CAMPAIGN_LIST_IMAGE_ID");
        },
        
        _setImage : function(oData, sRoleTypeCode, sAssignmentIdPropertyName, sAttachmentIdPropertyName) {
            var sPropertyName = "/Attachments";
            oData.ROLE_TYPE_CODE = sRoleTypeCode;
            var aChildrenData = this.getProperty(sPropertyName);
            aChildrenData = aChildrenData ? aChildrenData : [];
            var iAssignmentId = 0;
            var iAttachmentId = 0;
            jQuery.each(aChildrenData, function(oKey, sChildData) {
                if (sChildData.ATTACHMENT_ID == oData.ATTACHMENT_ID) {
                    iAssignmentId = sChildData.ID;
                    jQuery.each(aChildrenData, function(oKey, sChildData) {
                        if (sChildData.ROLE_TYPE_CODE === sRoleTypeCode) {
                            sChildData.ROLE_TYPE_CODE = "ATTACHMENT";
                            iAttachmentId = sChildData.ATTACHMENT_ID;
                        }
                    });
                    sChildData.ROLE_TYPE_CODE = oData.ROLE_TYPE_CODE;
                    return false;
                }
                return true;
            });

            if (iAssignmentId === 0) {
                iAssignmentId = this.getNextHandle();
                oData.ID = iAssignmentId;
                jQuery.each(aChildrenData, function(oKey, sChildData) {
                    if (sChildData.ROLE_TYPE_CODE === sRoleTypeCode) {
                        sChildData.ROLE_TYPE_CODE = "ATTACHMENT";
                        iAttachmentId = sChildData.ATTACHMENT_ID;
                    }
                });
                aChildrenData.push(oData);
            } else {
            	aChildrenData = jQuery.grep(aChildrenData, function(oChild, iIndex) {
            		if(oChild.ATTACHMENT_ID !== iAttachmentId){
            			return true;
            		}
            		
            		return false;
            	});
            }
            this.setProperty(sAssignmentIdPropertyName, iAssignmentId);
            this.setProperty(sAttachmentIdPropertyName, oData.ATTACHMENT_ID);
            this.setProperty(sPropertyName, aChildrenData);
        },

        clearCampaignImage : function(assignmentId) {
        	this._clearImage(assignmentId, "/CAMPAIGN_IMAGE_ASSIGN_ID", "/CAMPAIGN_IMAGE_ID");
        },
        
        clearCampaignBackgroundImage : function(assignmentId) {
        	this._clearImage(assignmentId, "/CAMPAIGN_BACKGROUND_IMAGE_ASSIGN_ID", "/CAMPAIGN_BACKGROUND_IMAGE_ID");
        },
        
        clearCampaignMobileSmallBackgroundImage : function(assignmentId) {
            this._clearImage(assignmentId, "/CAMPAIGN_SMALL_BACKGROUND_IMAGE_ASSIGN_ID", "/CAMPAIGN_SMALL_BACKGROUND_IMAGE_ID");
        },
        
        clearCampaignListImage : function(assignmentId) {
            this._clearImage(assignmentId, "/CAMPAIGN_LIST_IMAGE_ASSIGN_ID", "/CAMPAIGN_LIST_IMAGE_ID");
        },
        
        _clearImage : function(assignmentId, sAssignmentIdPropertyName, sAttachmentIdPropertyName) {
        	this.setProperty(sAssignmentIdPropertyName, null);
            this.setProperty(sAttachmentIdPropertyName, null);
            var sPropertyName = "/Attachments";
            var aChildrenData = this.getProperty(sPropertyName);
            aChildrenData = jQuery.grep(aChildrenData, function(oChild, iIndex) {
        		if(oChild.ID !== assignmentId){
        			return true;
        		}
        		return false;
        	});
            this.setProperty(sPropertyName, aChildrenData);
        },

        addAttachment : function(oNewAttachment) {
            oNewAttachment.ROLE_TYPE_CODE = "ATTACHMENT";
            this.addChild(oNewAttachment, "Attachments");
        },

        removeAttachment : function(iId) {
            var aAttachment = jQuery.grep(this.getProperty("/Attachments"), function(oAttachment) {
                return oAttachment.ID === iId;
            });
            var oAttachment = aAttachment && aAttachment[0];
            if (oAttachment) {
                if (oAttachment.ROLE_TYPE_CODE === "CAMPAIGN_DETAIL_IMG") {
                    this.setProperty("/CAMPAIGN_IMAGE_ASSIGN_ID", null);
                    this.setProperty("/CAMPAIGN_IMAGE_ID", null);
                } else if (oAttachment.ROLE_TYPE_CODE === "BACKGROUND_IMG") {
                    this.setProperty("/CAMPAIGN_BACKGROUND_IMAGE_ASSIGN_ID", null);
                    this.setProperty("/CAMPAIGN_BACKGROUND_IMAGE_ID", null);
                } else if (oAttachment.ROLE_TYPE_CODE === "SMALL_BACKGROUND_IMG") {
                    this.setProperty("/CAMPAIGN_SMALL_BACKGROUND_IMAGE_ASSIGN_ID", null);
                    this.setProperty("/CAMPAIGN_SMALL_BACKGROUND_IMAGE_ID", null);
                } else if (oAttachment.ROLE_TYPE_CODE === "CAMPAIGN_LIST_IMG") {
                    this.setProperty("/CAMPAIGN_LIST_IMAGE_ASSIGN_ID", null);
                    this.setProperty("/CAMPAIGN_LIST_IMAGE_ID", null);
                }
                this.removeChild(oAttachment);
            }
        },
        
        addTag : function(oNewTag) {
            var oMessage;
            var aTags = this.getProperty("/Tags");

            if (!oNewTag.NAME || jQuery.trim(oNewTag.NAME).length === 0) {
                oMessage = new sap.ui.ino.application.Message({
                    key : "MSG_INVALID_EMPTY_TAG",
                    level : sap.ui.core.MessageType.Error,
                    group : "TAG"
                });
                return oMessage;
            }

            oNewTag.NAME = jQuery.trim(oNewTag.NAME);

            if (!oNewTag.TAG_ID && oNewTag.NAME) {
                // Tags are created "on the fly"
                // so for new tags (not only tag assignment)
                // a new handle is used
                oNewTag.TAG_ID = this.getNextHandle();
            }
            var aMatches = jQuery.grep(aTags, function(oTag) {
                return oTag.TAG_ID === oNewTag.TAG_ID;
            });

            if (aMatches.length === 0) {
                this.addChild(oNewTag, "Tags");
            }
        },

        // No XS HTML check possible, check on UI
        validateHTML : function(iId) {
            var aMessage = [];
            jQuery.each(this.getData().LanguagePages, function(i, oLanguagePage) {
                if (iId && oLanguagePage.ID != iId) {
                    return;
                }
                var aCodes = CodeModel.getCodes("sap.ino.xs.object.basis.Language.Root", function(oLanguage) {
                    return oLanguage.ISO_CODE == oLanguagePage.LANG;
                });
                var oMessage = {
                    "TYPE" : "E",
                    "MESSAGE" : "MSG_CAMPAIGN_INVALID_HTML",
                    "REF_ID" : oLanguagePage.ID,
                    "REF_NODE" : "LanguagePages",
                    "REF_FIELD" : "HTML_CONTENT",
                    "PARAMETERS" : [oLanguagePage.TITLE, "{code>sap.ino.xs.object.basis.Language.Root:" + aCodes[0].CODE + "}"]
                };
                try {
                    // Validate HTML
                    var aResult = new jQuery(oLanguagePage.HTML_CONTENT);
                    if (!aResult || aResult.length === 0) {
                        aMessage.push(oMessage);
                    }
                } catch (e) {
                    aMessage.push(oMessage);
                }
            });
            return aMessage;
        },

        determinePageCreate : function(sLangCode) {
            return {
                ID : this.getNextHandle(),
                PAGE_NO : 0,
                HTML_CONTENT : "<p></p>",
                TITLE : "",
                IS_VISIBLE : 1,
                LANG : sLangCode
            };
        },

        determinePhaseCreate : function() {
            var aPhases = this.getProperty("/Phases");
            var iSeqNo = 0;
            for (var ii = 0; ii < aPhases.length; ++ii) {
                iSeqNo = aPhases[ii].SEQUENCE_NO >= iSeqNo ? aPhases[ii].SEQUENCE_NO + 1 : iSeqNo;
            }

            var aPhaseCodes = CodeModel.getCodes("sap.ino.xs.object.campaign.Phase.Root");
            var sPhaseCode = "";
            var bSuccess = true;
            // get a not used phase code
            for (var jj = 0; jj < aPhaseCodes.length; ++jj) {
                sPhaseCode = aPhaseCodes[jj].CODE;
                bSuccess = true;

                for (var kk = 0; kk < aPhases.length; ++kk) {
                    if (sPhaseCode === aPhases[kk].PHASE_CODE) {
                        bSuccess = false;
                        break;
                    }
                }

                if (bSuccess) {
                    break;
                }
            }

            var aStatusCodes = CodeModel.getCodes("sap.ino.xs.object.status.Model.Root");
            var sStatusCode = (aStatusCodes && aStatusCodes.length > 0) ? aStatusCodes[0].CODE : "";

            return {
                PHASE_CODE : sPhaseCode,
                STATUS_MODEL_CODE : sStatusCode,
                EVALUATION_MODEL_CODE : "",
                VOTING_ACTIVE : 1,
                SHOW_IDEA_IN_COMMUNITY : 1,
                IDEA_CONTENT_EDITABLE : 1,
                SEQUENCE_NO : iSeqNo,
                AUTO_EVAL_PUB_CODE : ""
            };
        },

        setData : function(oData) {
            ApplicationObject.prototype.setData.apply(this, arguments);

            // this is done to give the possibility to trigger an update of the language binding, as the index of the
            // languages in the languagetexts might have changed
            var oEvtBus = sap.ui.getCore().getEventBus();
            oEvtBus.publish("sap.ui.ino.models.object.Campaign", "language_update", {});
        }
    });

    function _mergeLanguageTexts(oData, oCampaign) {
        var aExistingLanguageTexts = oData.LanguageTexts;
        var aCodes = CodeModel.getCodes("sap.ino.xs.object.basis.Language.Root", function(oLanguage) {
            var aFound = jQuery.grep(aExistingLanguageTexts, function(oLanguageText) {
                return oLanguageText.LANG == oLanguage.ISO_CODE;
            });
            // only take currently unused language codes
            return aFound.length === 0;
        });

        var aInitialLanguageTexts = jQuery.map(aCodes, function(oLanguageCode) {
            return {
                LANG : oLanguageCode.ISO_CODE,
                ID : oCampaign.getNextHandle(),
                NAME : "",
                SHORT_NAME : "",
                DESCRIPTION : "",
                IDEA_DESCRIPTION_TEMPLATE : ""
            };
        });

        oData.LanguageTexts = oData.LanguageTexts.concat(aInitialLanguageTexts);

        return oData;
    }

    Campaign.Status = Status;
    
    return Campaign;
    
});
}; // end of sap/ino/commons/models/object/Campaign.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.CampaignComment') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.object.CampaignComment'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/models/object/CampaignComment",[
       "sap/ino/commons/models/aof/ApplicationObject",
       "sap/ino/commons/models/core/ReadSource"
   ], function(ApplicationObject, ReadSource) {
        "use strict";
	    return ApplicationObject.extend("sap.ino.commons.models.object.CampaignComment", {
	        objectName : "sap.ino.xs.object.campaign.Comment",
	        readSource : ReadSource.getDefaultAOFSource(),
	        invalidation : {
	            entitySets : ["CampaignComment"]
	        },
	        actionImpacts : {
	            "del": [{"objectName": "sap.ino.commons.models.object.Campaign",
	                     "objectKey": "OBJECT_ID",
	                     "impactedAttributes": ["COMMENT_COUNT"]}],
	            "create": [{"objectName": "sap.ino.commons.models.object.Campaign",
	                        "objectKey": "OBJECT_ID",
	                        "impactedAttributes": ["COMMENT_COUNT"]}]
            }
    });
});
}; // end of sap/ino/commons/models/object/CampaignComment.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.CampaignFollow') ) {
jQuery.sap.declare('sap.ino.commons.models.object.CampaignFollow'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/models/object/CampaignFollow",[
    "sap/ino/commons/models/aof/ApplicationObject",
    "sap/ino/commons/models/core/ReadSource"
], function(ApplicationObject, ReadSource) {
	"use strict";
	return ApplicationObject.extend('sap.ino.commons.models.object.CampaignFollow', {
        objectName: "sap.ino.xs.object.follow.Follow",
		readSource: ReadSource.getDefaultAOFSource(),
		actionImpacts: {
		    "create":[
		        {
				    "objectName": "sap.ino.commons.models.object.Campaign",
				    "objectKey": "OBJECT_ID",
				    "impactedAttributes": ["FOLLOW"]
			    }
		    ],
			"del": [
			    {
				    "objectName": "sap.ino.commons.models.object.Campaign",
				    "objectKey": "OBJECT_ID",
				    "impactedAttributes": ["FOLLOW"]
			    }
			]
		},
		follow: function(objectId, type, value){
		    return !value ? this.modify(value, { OBJECT_ID:objectId, OBJECT_TYPE_CODE:type }) : this.del(value, { OBJECT_ID: objectId, OBJECT_TYPE_CODE: type});
		}
	});
});
}; // end of sap/ino/commons/models/object/CampaignFollow.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.Evaluation') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.object.Evaluation'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.type.Float'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.Integer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.message.Message'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.ParseException'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/models/object/Evaluation",[
    "sap/ino/commons/models/aof/ApplicationObject",
    "sap/ino/commons/models/core/CodeModel",
    "sap/ino/commons/application/Configuration",
    "sap/ui/model/type/Float",
    "sap/ui/model/type/Integer",
    "sap/ui/core/message/Message",
    "sap/ui/core/MessageType",
    "sap/ui/model/ParseException",
    "sap/ino/commons/models/core/ReadSource"
], function(ApplicationObject,
	CodeModel,
	Configuration,
	Float,
	Integer,
	Message,
	MessageType,
	ParseException,
	ReadSource) {
	"use strict";

	var Status = {
		Draft: "sap.ino.config.EVAL_DRAFT"
	};

	var Evaluation = ApplicationObject.extend("sap.ino.commons.models.object.Evaluation", {
		objectName: "sap.ino.xs.object.evaluation.Evaluation",

		readSource: ReadSource.getDefaultODataSource("IdeaEvaluation", {
			excludeNodes: ["Owner"]
		}),

		invalidation: {
			entitySets: ["IdeaEvaluation", "IdeaMyEvaluation", "IdeaPublishedEvaluation", "EvaluationRequestItems"]
		},

		actionImpacts: {
			"del": [{
				"objectName": "sap.ino.commons.models.object.Idea",
				"objectKey": "IDEA_ID",
				"impactedAttributes": ["EVALUATION_COUNT"]
			}],
			"create": [{
				"objectName": "sap.ino.commons.models.object.Idea",
				"objectKey": "IDEA_ID",
				"impactedAttributes": ["EVALUATION_COUNT"]
			}],
			"modifyAndSubmit": [{
				"objectName": "sap.ino.commons.models.object.Idea",
				"objectKey": "IDEA_ID",
				"impactedAttributes": ["EVALUATION_COUNT"]
			}, {
				"objectName": "sap.ino.commons.models.object.EvaluationRequestItem",
				"objectKey": "EVAL_REQ_ITEM_ID",
				"impactedAttributes": ["STATUS_CODE"]
			}],
			"executeStatusTransition": [{
				"objectName": "sap.ino.commons.models.object.Idea",
				"objectKey": "IDEA_ID",
				"impactedAttributes": ["EVALUATION_COUNT"]
			}]
		},

		determinations: {
			onCreate: function(oDefaultData, objectInstance) {
				var iIdeaId = oDefaultData.IDEA_ID;
				var oDeferred = jQuery.Deferred();
				var oTemplatePromise = oDeferred.promise();
				if (iIdeaId > 0) {
					var oModel = objectInstance.getReadSourceModel();
					// TODO: Parallelize two requests
					var aDeferred = [];	
					var oTempDeferred = new jQuery.Deferred();
					oModel.read("/IdeaFull(" + iIdeaId + ")/EvaluationTemplate", {
						success: function(oEvaluation) {
							oTempDeferred.resolve({
								"oEvaluation": oEvaluation
							});
						},
						error: function(oError) {
							oTempDeferred.reject(oError);
						}
					});
					aDeferred.push(oTempDeferred);
					
					var oCriValDeferred = new jQuery.Deferred();
					oModel.read("/IdeaFull(" + iIdeaId + ")/EvaluationTemplate/CriterionValues", {
						success: function(oEvaluationCriterionValues) {
							oCriValDeferred.resolve({
								"oEvaluationCriterionValues": oEvaluationCriterionValues
							});
						},
						error: function(oError) {
							oCriValDeferred.reject(oError);
						}
					});
					aDeferred.push(oCriValDeferred);
					
					jQuery.when.apply(jQuery, aDeferred).done(function() {
					    var oEvaluation, oEvaluationCriterionValues;
					    jQuery.each(arguments, function(index, oData) {
							if (oData.hasOwnProperty("oEvaluation")) {
								oEvaluation = oData.oEvaluation;
							} else if (oData.hasOwnProperty("oEvaluationCriterionValues")) {
								oEvaluationCriterionValues = oData.oEvaluationCriterionValues;
							}
						});
						oEvaluation.CriterionValues = oEvaluationCriterionValues.results;
						oEvaluation = ReadSource.cleanData(oEvaluation);
						fnHandleTemplate(oEvaluation);
						oDeferred.resolve(oEvaluation);
					});
					
				// 	oModel.read("/IdeaFull(" + iIdeaId + ")/EvaluationTemplate", {
				// 		success: function(oEvaluation) {
				// 			oModel.read("/IdeaFull(" + iIdeaId + ")/EvaluationTemplate/CriterionValues", {
				// 				success: function(oEvaluationCriterionValues) {
				// 					oEvaluation.CriterionValues = oEvaluationCriterionValues.results;
				// 					oEvaluation = ReadSource.cleanData(oEvaluation);
				// 					fnHandleTemplate(oEvaluation);
				// 					oDeferred.resolve(oEvaluation);
				// 				}
				// 			});
				// 		}
				// 	});
				} else {
					fnHandleTemplate(oDefaultData);
					oDeferred.resolve(oDefaultData);
				}

				var fnHandleTemplate = function(oEvaluationTemplate) {
					var sTodaysDate = new Date();
					if (oEvaluationTemplate) {
						oEvaluationTemplate.EVALUATOR_NAME = Configuration.getCurrentUser() && Configuration.getCurrentUser().NAME;
						oEvaluationTemplate.CREATED_AT = sTodaysDate;
						oEvaluationTemplate.CHANGED_AT = sTodaysDate;
						if (oEvaluationTemplate.CriterionValues) {
							jQuery.each(oEvaluationTemplate.CriterionValues, function(iIndex, oValue) {
								if (!oValue.NUM_VALUE && oValue.NUM_VALUE_MIN !== null) {
									oValue.NUM_VALUE = oValue.NUM_VALUE_MIN;
								}
								// handle null values: convert null values to 0
								if (oValue.NUM_VALUE === null) {
									oValue.NUM_VALUE = 0;
								}
								// make sure that "0" is converted to 0
								oValue.NUM_VALUE = parseFloat(oValue.NUM_VALUE);

								// Default Matrix value to first value of value option list
								if (oValue.AGGREGATION_TYPE === "MATRIX") {
									oValue.NUM_VALUE = 1;
								}
								oValue.ID = objectInstance.getNextHandle();
							});
						} else {
							oEvaluationTemplate.CriterionValues = [];
						}
					}
					var aCriterionValue = oEvaluationTemplate.CriterionValues;
					if (oDefaultData && oDefaultData.aggregationData) {
						if (aCriterionValue) {
							//TODO: Replace with each
							for (var sCriterionCode in oDefaultData.aggregationData) {
								var oCriterionValue = _getCriterionByCode(aCriterionValue, sCriterionCode);
								if (oCriterionValue && (oCriterionValue.DATATYPE_CODE === "INTEGER" || oCriterionValue.DATATYPE_CODE === "NUMERIC")) {
									oCriterionValue.NUM_VALUE = oDefaultData.aggregationData[sCriterionCode];
								} else if (oCriterionValue && oCriterionValue.DATATYPE_CODE === "BOOLEAN") {
									oCriterionValue.BOOL_VALUE = oDefaultData.aggregationData[sCriterionCode];
								}
							}
						}
					}
					if (oDefaultData && oDefaultData.totalData) {
						if (aCriterionValue) {
							//TODO: Replace with each
							for (var sCriterionCode in oDefaultData.totalData) {
								var oCriterionValue = _getCriterionByCode(aCriterionValue, sCriterionCode);
								if (oCriterionValue && (oCriterionValue.DATATYPE_CODE === "INTEGER" || oCriterionValue.DATATYPE_CODE === "NUMERIC")) {
									oCriterionValue.NUM_VALUE = oDefaultData.totalData[sCriterionCode].value;
								} else if (oCriterionValue && oCriterionValue.DATATYPE_CODE === "BOOLEAN") {
									oCriterionValue.BOOL_VALUE = oDefaultData.totalData[sCriterionCode].value;
								} else if (oCriterionValue && oCriterionValue.DATATYPE_CODE === "TEXT") {
									oCriterionValue.TEXT_VALUE = oDefaultData.totalData[sCriterionCode].value;
								}
								oCriterionValue.MSG = oDefaultData.totalData[sCriterionCode].msg;
								oCriterionValue.MSG_TOOLTIP = oDefaultData.totalData[sCriterionCode].msg_tooltip;
								oCriterionValue.COMMENT = oDefaultData.totalData[sCriterionCode].comment;
							}
						}
					}
					oEvaluationTemplate.CriterionValues.sort(function(a, b) {
						return a.SEQUENCE_NO - b.SEQUENCE_NO;
					});
					if (aCriterionValue) {
						_updateCompleteCalculations(aCriterionValue);
					}
					_buildCriteriaHierarchy(oEvaluationTemplate);
				};
				if (oDefaultData.averEval) {
					jQuery.each(oDefaultData.EvalAttachments, function(index, oEval) {
						oEval.ID = objectInstance.getNextHandle();
					});
				}
				return oTemplatePromise;
			},

			onRead: function(oDefaultData, objectInstance) {
				if (oDefaultData && oDefaultData.CriterionValues) {
					oDefaultData.CriterionValues.sort(function(a, b) {
						return a.SEQUENCE_NO - b.SEQUENCE_NO;
					});
					_buildCriteriaHierarchy(oDefaultData);
				}
			},

			onPersist: function(vKey, oChangeRequest, oInstanceData, oAction, fnRegisterDirtyObject, oObjectInstance) {},

			onNormalizeData: function(oEvaluation) {
				var aCriterionValues = oEvaluation.CriterionValues;
				if (aCriterionValues) {
					jQuery.each(oEvaluation.CriterionValues, function(iIndex, oValue) {
						oValue.NUM_VALUE = parseFloat(oValue.NUM_VALUE);
						if (oValue.DATATYPE_CODE === "TEXT") {
							oValue.NUM_VALUE = null;
						}
					});
				}
				return oEvaluation;
			}
		},

		actions: {
			modifyAndSubmit: {
				enabledCheck: function(oObjectInstance, bEnabled) {
					var sStatus = oObjectInstance.getProperty("/STATUS_CODE");
					return sStatus === Status.Draft;
				},
				execute: function(vKey, oObjectInstance, oParameter, oActionMetadata) {
					var oDeferred = new jQuery.Deferred();
					var oModifyRequest = oObjectInstance.modify();
					oModifyRequest.fail(oDeferred.reject);
					oModifyRequest.done(function() {
						var oSubmitRequest = oObjectInstance.submit();
						oSubmitRequest.fail(oDeferred.reject);
						oSubmitRequest.done(oDeferred.resolve);
					});
					return oDeferred.promise();
				}
			},
			del: {
				enabledCheck: function(oIdea, bEnabled) {
					if (bEnabled === undefined) {
						return false;
					}
				}
			},
			executeStatusTransition: {
				initParameter: function(oParameter, sStatusAction) {
					oParameter.STATUS_ACTION_CODE = sStatusAction;
				}
			}
		},

		setProperty: setProperty,

		updateDeltaCalculation: updateDeltaCalculation,

		addBinding: addBinding,
		addAttachment: _addAttachment,
		removeAttachment: _removeAttachment
	});

	Evaluation.Status = Status;

	var aNumValuePaths = ["NUM_VALUE", "criterion/NUM_VALUE"];

	function addBinding(oBinding) {
		/* jshint validthis: true */
		ApplicationObject.prototype.addBinding.apply(this, arguments);
		var sPath = oBinding && oBinding.sPath;
		var oContext = oBinding.getContext();
		if (sPath && aNumValuePaths && aNumValuePaths.indexOf(sPath) > -1 && oContext) {
			var oObject;
			if (sPath === "NUM_VALUE") {
				oObject = oContext.getObject();
			} else if (sPath === "criterion/NUM_VALUE") {
				oObject = oContext.getObject().criterion;
			}
			if (oObject) {
				switch (oObject.DATATYPE_CODE) {
					case "INTEGER":
						oBinding.setType(new Integer(), oBinding.sInternalType);
						break;
					case "NUMERIC":
						oBinding.setType(new Float(), oBinding.sInternalType);
						break;
				}
			}
		}
	}

	function setProperty(sPath, vValue, oContext) {
		/* jshint validthis: true */
		// IE does not know the constants
		var MIN_INT = Number.MIN_SAFE_INTEGER || -9007199254740991;
		var MAX_INT = Number.MAX_SAFE_INTEGER || 9007199254740991;
		var bSuccess = false;
		var oObject = oContext && oContext.getObject();
		if (!oContext && sPath.indexOf("/") === 0) {
			oObject = this.getData();
			sPath = sPath.substr(1);
		}

		if (sPath.indexOf("NUM_VALUE") > -1 && (vValue > MAX_INT || vValue < MIN_INT)) {
			// TODO: Replace getCore() with a different approach to get the message bundle
			var oMsg = sap.ui.getCore().getModel(sap.ui.ino.application.ApplicationBase.MODEL_MSG);
			throw new ParseException(oMsg.getResourceBundle().getText("MSG_NUMERIC_INTERVAL", [vValue, MIN_INT, MAX_INT]));
		}

		if (oObject && sPath) {
			if (oObject && sPath && oObject.hasOwnProperty(sPath)) {
				if (oObject.VALUE_OPTION_LIST_CODE) {
					if (sPath === "COMMENT") {
						oObject[sPath] = vValue;
					}
					if (oObject.DATATYPE_CODE === "INTEGER" && sPath.indexOf("NUM_VALUE") > -1) {
						oObject[sPath] = vValue;
					} else if (oObject.DATATYPE_CODE === "NUMERIC" && sPath.indexOf("NUM_VALUE") > -1) {
						oObject[sPath] = vValue;
					} else if (oObject.DATATYPE_CODE === "TEXT" && sPath.indexOf("TEXT_VALUE") > -1) {
						oObject[sPath] = vValue;
					} else if (oObject.DATATYPE_CODE === "BOOLEAN" && sPath.indexOf("BOOL_VALUE") > -1) {
						oObject[sPath] = vValue;
					}
				} else {
					oObject[sPath] = vValue;
				}

			} else if (sPath.indexOf("criterion") > -1) {
				var sPropertyName = sPath.replace("criterion/", "");
				var oCriterion = oObject.criterion;
				if (oCriterion.hasOwnProperty(sPropertyName)) {
					if (oCriterion.VALUE_OPTION_LIST_CODE) {
						if (sPropertyName === "COMMENT") {
							oCriterion[sPropertyName] = vValue;
							bSuccess = true;
						}
						if (oCriterion.DATATYPE_CODE === "INTEGER" && sPath.indexOf("NUM_VALUE") > -1) {
							oCriterion[sPropertyName] = vValue;
							bSuccess = true;
						} else if (oCriterion.DATATYPE_CODE === "NUMERIC" && sPath.indexOf("NUM_VALUE") > -1) {
							oCriterion[sPropertyName] = vValue;
							bSuccess = true;
						} else if (oCriterion.DATATYPE_CODE === "TEXT" && sPath.indexOf("TEXT_VALUE") > -1) {
							oCriterion[sPropertyName] = vValue;
							bSuccess = true;
						} else if (oCriterion.DATATYPE_CODE === "BOOLEAN" && sPath.indexOf("BOOL_VALUE") > -1) {
							oCriterion[sPropertyName] = vValue;
							bSuccess = true;
						}
					} else {
						oCriterion[sPropertyName] = vValue;
						bSuccess = true;
					}
				}
			}
		}

		var aCriterionValue = this.getData().CriterionValues;
		if (arguments.length >= 3) {
			if (oContext && (sPath.indexOf("NUM_VALUE") > -1 || sPath.indexOf("BOOL_VALUE") > -1)) {
				this.updateDeltaCalculation(aCriterionValue, oContext, sPath);
			}
		} else if (arguments.length === 2) {
			if (sPath === "/CriterionValues") {
				_updateCompleteCalculations(aCriterionValue);
				//this.checkUpdate(true, false);
			}
		}

		var oData = oContext && oContext.getModel() && oContext.getModel().getData();
		if (oData) {
			var aRootCriteria = oContext.getModel().getData().CriterionValues;
			var aOverallResult = jQuery.grep(aRootCriteria, function(oCriterion, iIndex) {
				return oCriterion.IS_OVERALL_RESULT;
			});
			var aCriterionValues = oData.CriterionValues;
			var sCriterionValues = _getNumCriterion(aCriterionValues);
			var aCalcFormula = oData.MODEL_CALC_FORMULA;
			var aEnableFormula = oData.MODEL_ENABLE_FORMULA;
			if (aEnableFormula) {
				// aCalcFormula = aCalcFormula.replace(/\$/g, "");
				for (var i = 0; i < sCriterionValues.length; i++) {
					var sCriterionValue = sCriterionValues[i];
					if (sCriterionValue.DATATYPE_CODE === "NUMERIC" || sCriterionValue.DATATYPE_CODE === "INTEGER") {
						var sCriterionCode = sCriterionValue.CRITERION_CODE.split('.');
						sCriterionCode = sCriterionCode.slice(sCriterionCode.length - 1).toString();
						var sCriterionNumValue = sCriterionValue.NUM_VALUE || 0;
						sCriterionNumValue = (!sCriterionValue.AGGREGATION_TYPE && sCriterionValue.WEIGHT !== null && sCriterionValue.WEIGHT !== undefined) ?
							sCriterionNumValue * sCriterionValue.WEIGHT * 0.01 : sCriterionNumValue;
						aCalcFormula = aCalcFormula.replace(new RegExp("\\$" + sCriterionCode + "(?=[\\/+\\-*\\s,)(]|$)", 'g'), sCriterionNumValue);
					} else {
						aCalcFormula = aCalcFormula.replace(new RegExp("\\$" + sCriterionCode + "(?=[\\/+\\-*\\s,)(]|$)", 'g'), 0);
					}
				}
				oData.OV_RES_NUM_VALUE = eval(aCalcFormula);
				oData.OV_RES_DATATYPE_CODE = "NUMERIC";
			} else if (aOverallResult && aOverallResult[0]) {
				switch (oData.OV_RES_DATATYPE_CODE) {
					case "INTEGER":
						oData.OV_RES_NUM_VALUE = aOverallResult[0].NUM_VALUE;
						break;
					case "NUMERIC":
						oData.OV_RES_NUM_VALUE = aOverallResult[0].NUM_VALUE;
						break;
					case "BOOLEAN":
						oData.OV_RES_BOOL_VALUE = aOverallResult[0].BOOL_VALUE;
						break;
					case "TEXT":
						oData.OV_RES_TEXT_VALUE = aOverallResult[0].TEXT_VALUE;
						break;
				}
			}
		}
		this.checkUpdate(false, false);

		return bSuccess;
	}

	function updateDeltaCalculation(aCriterionValue, oContext, sAggregationProperty) {
		/* jshint validthis: true */
		var sPath = oContext.getPath();
		if (sPath.indexOf("/CriterionValues/") === 0 || sPath.indexOf("/criteriaHierarchy/") === 0) {
			var bCalcDone = false;
			if (_calcParentAggregation(aCriterionValue, sAggregationProperty, this.getProperty("PARENT_CRITERION_CODE", oContext))) {
				bCalcDone = true;
			}
			if (_calcMatrixAggregation(aCriterionValue)) {
				bCalcDone = true;
			}
			if (bCalcDone) {
				this.getData().CriterionValues = aCriterionValue;
			}
		}
	}

	function _updateCompleteCalculations(aCriterionValue) {
		for (var i = 0; i < aCriterionValue.length; i++) {
			var oCriterionValue = aCriterionValue[i];
			if (!oCriterionValue.PARENT_CRITERION_CODE) {
				var sDataType = oCriterionValue.DATATYPE_CODE;
				if (sDataType === "INTEGER" || sDataType === "NUMERIC") {
					_calcParentAggregation(aCriterionValue, "NUM_VALUE", oCriterionValue.CODE);
				} else if (sDataType === "BOOLEAN") {
					_calcParentAggregation(aCriterionValue, "BOOL_VALUE", oCriterionValue.CODE);
				}
			}
		}
		_calcMatrixAggregation(aCriterionValue);
	}

	function _calcMatrixAggregation(aCriterionValue) {
		var aMatrixCriterionValue = _getCriterionByAggregationTypeMatrix(aCriterionValue);
		if (aMatrixCriterionValue.length <= 0) {
			return;
		}
		for (var i = 0; i < aMatrixCriterionValue.length; i++) {
			var oMatrixCriterionValue = aMatrixCriterionValue[i];

			if (!oMatrixCriterionValue.X_AXIS_SEGMENT_NO || !oMatrixCriterionValue.X_AXIS_SEGMENT_NO) {
				return;
			}

			var sDataType = oMatrixCriterionValue.DATATYPE_CODE;
			if (sDataType !== "INTEGER" && sDataType !== "NUMERIC") {
				return;
			}
			var oXAxisCriterionValue = _getCriterionByCode(aCriterionValue, oMatrixCriterionValue.X_AXIS_CRITERION_CODE);
			var oYAxisCriterionValue = _getCriterionByCode(aCriterionValue, oMatrixCriterionValue.Y_AXIS_CRITERION_CODE);
			if (!oXAxisCriterionValue || !oYAxisCriterionValue) {
				return;
			}

			if (oXAxisCriterionValue.NUM_VALUE_MIN === null || oXAxisCriterionValue.NUM_VALUE_MAX === null || oYAxisCriterionValue.NUM_VALUE_MIN ===
				null || oYAxisCriterionValue.NUM_VALUE_MAX === null) {
				return;
			}

			if (oXAxisCriterionValue.NUM_VALUE < oXAxisCriterionValue.NUM_VALUE_MIN || oXAxisCriterionValue.NUM_VALUE > oXAxisCriterionValue.NUM_VALUE_MAX) {
				return;
			}

			if (oYAxisCriterionValue.NUM_VALUE < oYAxisCriterionValue.NUM_VALUE_MIN || oYAxisCriterionValue.NUM_VALUE > oYAxisCriterionValue.NUM_VALUE_MAX) {
				return;
			}

			var xSegment = Math.floor((oXAxisCriterionValue.NUM_VALUE - oXAxisCriterionValue.NUM_VALUE_MIN) / ((oXAxisCriterionValue.NUM_VALUE_MAX -
				oXAxisCriterionValue.NUM_VALUE_MIN) / oMatrixCriterionValue.X_AXIS_SEGMENT_NO)) + 1;
			xSegment = xSegment > oMatrixCriterionValue.X_AXIS_SEGMENT_NO ? oMatrixCriterionValue.X_AXIS_SEGMENT_NO : xSegment;

			var ySegment = Math.floor((oYAxisCriterionValue.NUM_VALUE - oYAxisCriterionValue.NUM_VALUE_MIN) / ((oYAxisCriterionValue.NUM_VALUE_MAX -
				oYAxisCriterionValue.NUM_VALUE_MIN) / oMatrixCriterionValue.Y_AXIS_SEGMENT_NO)) + 1;
			ySegment = ySegment > oMatrixCriterionValue.Y_AXIS_SEGMENT_NO ? oMatrixCriterionValue.Y_AXIS_SEGMENT_NO : ySegment;

			oMatrixCriterionValue.NUM_VALUE = xSegment + (ySegment - 1) * oMatrixCriterionValue.X_AXIS_SEGMENT_NO;
		}
		return true;
	}

	function _calcParentAggregation(aCriterionValue, sAggregationProperty, sParentCriterionCode) {
		if (sAggregationProperty !== "NUM_VALUE" && sAggregationProperty !== "BOOL_VALUE") {
			return;
		}
		var bChanged = false;
		if (sParentCriterionCode) {
			var oParentCriterionValue = _getCriterionByCode(aCriterionValue, sParentCriterionCode);
			if (!oParentCriterionValue) {
				return;
			}
			var aChildCriterionValue = _getCriterionsByParentCode(aCriterionValue, sParentCriterionCode);
			var sDataType = oParentCriterionValue.DATATYPE_CODE;
			var sAggregationType = oParentCriterionValue.AGGREGATION_TYPE;

			if (sDataType === "INTEGER" || sDataType === "NUMERIC") {
				if (sAggregationType === "SUM" || sAggregationType === "AVG") {
					bChanged = _aggregate(aChildCriterionValue, oParentCriterionValue, sAggregationProperty);
				}else if (sAggregationType === "FORMULA") {
					bChanged = _getFormulaValue(aCriterionValue, oParentCriterionValue, sAggregationProperty);
				}
			} else if (sDataType === "BOOLEAN") {
				if (sAggregationType === "AND" || sAggregationType === "OR") {
					var bAndValue = true;
					var bOrValue = false;
					jQuery.each(aChildCriterionValue, function(i, oCriterionValue) {
						if (oCriterionValue.DATATYPE_CODE === sDataType) {
							bAndValue = bAndValue && oCriterionValue[sAggregationProperty] && oCriterionValue[sAggregationProperty] === 1;
							if (oCriterionValue[sAggregationProperty]) {
								bOrValue = bOrValue || oCriterionValue[sAggregationProperty] === 1;
							}
						}
					});
					if (sAggregationType === "AND") {
						oParentCriterionValue[sAggregationProperty] = bAndValue ? 1 : 0;
					} else if (sAggregationType === "OR") {
						oParentCriterionValue[sAggregationProperty] = bOrValue ? 1 : 0;
					}
					bChanged = true;
				}
				if (sAggregationType === "AVG") {
					bChanged = _aggregate(aChildCriterionValue, oParentCriterionValue, sAggregationProperty);
				}
			}
			if (oParentCriterionValue.PARENT_CRITERION_CODE) {
				if (_calcParentAggregation(aCriterionValue, sAggregationProperty, oParentCriterionValue.PARENT_CRITERION_CODE)) {
					return true;
				}
			}
		}
		return bChanged;
	}

	function _aggregate(aChildCriterionValue, oParentCriterionValue, sAggregationProperty) {
		var sDataType = oParentCriterionValue.DATATYPE_CODE;
		var sAggregationType = oParentCriterionValue.AGGREGATION_TYPE;

		if ((sDataType === "BOOL_VALUE" || sAggregationProperty === "BOOL_VALUE") && sDataType !== sAggregationProperty) {
			return;
		}

		var fSumValue = 0;
		var fAvgCount = 0;
		jQuery.each(aChildCriterionValue, function(i, oCriterionValue) {
			if (((oCriterionValue.DATATYPE_CODE === "INTEGER" || oCriterionValue.DATATYPE_CODE === "NUMERIC") && sAggregationProperty ===
				"NUM_VALUE") || (oCriterionValue.DATATYPE_CODE === "BOOLEAN" && sAggregationProperty === "BOOL_VALUE")) {
				if (oCriterionValue[sAggregationProperty]) {
					if (oCriterionValue.WEIGHT === undefined || oCriterionValue.WEIGHT === null) {
						fSumValue += oCriterionValue[sAggregationProperty];
					} else {
						fSumValue += oCriterionValue[sAggregationProperty] * oCriterionValue.WEIGHT * 0.01;
					}
				}
				fAvgCount++;
			}
		});
		if (sAggregationType === "SUM") {
			if (sDataType === "BOOLEAN") {
				oParentCriterionValue[sAggregationProperty] = Math.max(fSumValue, 1);
			} else if (sDataType === "INTEGER") {
				if (oParentCriterionValue.WEIGHT === undefined || oParentCriterionValue.WEIGHT === null) {
					oParentCriterionValue[sAggregationProperty] = Math.round(fSumValue);
				} else {
					oParentCriterionValue[sAggregationProperty] = Math.round(fSumValue * oParentCriterionValue.WEIGHT * 0.01);
				}
			} else {
				if (oParentCriterionValue.WEIGHT === undefined || oParentCriterionValue.WEIGHT === null) {
					oParentCriterionValue[sAggregationProperty] = fSumValue;
				} else {
					oParentCriterionValue[sAggregationProperty] = fSumValue * oParentCriterionValue.WEIGHT * 0.01;
				}
			}
		} else if (sAggregationType === "AVG") {
			oParentCriterionValue[sAggregationProperty] = fSumValue / fAvgCount;
			if (sDataType === "BOOLEAN") {
				oParentCriterionValue[sAggregationProperty] = Math.round(oParentCriterionValue[sAggregationProperty]);
			} else if (sDataType === "INTEGER") {
				oParentCriterionValue[sAggregationProperty] = (oParentCriterionValue.WEIGHT === undefined || oParentCriterionValue.WEIGHT === null) ?
					Math.round(oParentCriterionValue[sAggregationProperty]) : Math.round(oParentCriterionValue[sAggregationProperty] *
						oParentCriterionValue.WEIGHT *
						0.01);
			} else {
				oParentCriterionValue[sAggregationProperty] = (oParentCriterionValue.WEIGHT === undefined || oParentCriterionValue.WEIGHT === null) ?
					oParentCriterionValue[sAggregationProperty] : oParentCriterionValue[sAggregationProperty] * oParentCriterionValue.WEIGHT * 0.01;
			}
		}
		return true;
	}
	
	function _getFormulaValue(aAllCriterionValue, oParentCriterionValue, sAggregationProperty) {
		var sDataType = oParentCriterionValue.DATATYPE_CODE;
		if ((sDataType === "BOOL_VALUE" || sAggregationProperty === "BOOL_VALUE") && sDataType !== sAggregationProperty) {
			return false;
		}
		function getShortCriterionCode(sCode) {
			if (!sCode) {
				return "";
			}
			if (sCode.lastIndexOf(".") > -1) {
				return sCode.substr(sCode.lastIndexOf(".") + 1);
			}
			return sCode;
		}
		var aValues = aAllCriterionValue,
			sFormula = oParentCriterionValue.FORMULA,
			aReplaceValues = sFormula.match(/\$([^+\-*\/\s\)\(,]+)/gm),
			nCurrentValue = void 0;
		for (var i = 0; i < aValues.length; i++) {
			for (var j = 0; j < aReplaceValues.length; j++) {
				if (aReplaceValues[j] === "$" + getShortCriterionCode(aValues[i].CODE)) {
					nCurrentValue = aValues[i][sAggregationProperty];
					if (!aValues[i].AGGREGATION_TYPE && (aValues[i].DATATYPE_CODE === "NUMERIC" || aValues[i].DATATYPE_CODE === "INTEGER")) {
						var weight = aValues[i].WEIGHT;
						if (!weight) {
							weight = 100;
						}
						nCurrentValue *= (Number(weight) || 100) / 100;
					}
					sFormula = sFormula.replace(aReplaceValues[j], nCurrentValue);
				}
			}
		}
		try {
		    var oParentWeight = oParentCriterionValue.WEIGHT;
		    if (!oParentWeight) {
				oParentWeight = 100;
			}
			var sResult = Math.round(Number(window.eval(sFormula)) * Number(oParentWeight)) / 100;
			if(sDataType === "INTEGER"){
			    sResult = Math.round(sResult);
			}
			oParentCriterionValue[sAggregationProperty] = sResult;
		} catch (ex) {
			oParentCriterionValue[sAggregationProperty] = 0;
		}
		return true;
	}

	function _getCriterionByCode(aCriterionValue, sCriterionCode) {
		return jQuery.map(aCriterionValue, function(oCriterionValue) {
			if (oCriterionValue.CODE === sCriterionCode) {
				return oCriterionValue;
			}
		})[0];
	}

	function _getCriterionsByParentCode(aCriterionValue, sParentCriterionCode) {
		return jQuery.map(aCriterionValue, function(oCriterionValue) {
			if (oCriterionValue.PARENT_CRITERION_CODE === sParentCriterionCode) {
				return oCriterionValue;
			}
		});
	}

	function _getRootCriteria(aCriterionValue) {
		return jQuery.map(aCriterionValue, function(oCriterionValue) {
			if (oCriterionValue.PARENT_CRITERION_CODE === null || oCriterionValue.PARENT_CRITERION_CODE === "") {
				return oCriterionValue;
			}
		});
	}

	function _getNumCriterion(aCriterionValue) {
		return jQuery.map(aCriterionValue, function(oCriterionValue) {
			if (oCriterionValue.DATATYPE_CODE === "NUMERIC" || oCriterionValue.DATATYPE_CODE === "INTEGER") {
				return oCriterionValue;
			}
		});
	}

	function _getCriterionByAggregationTypeMatrix(aCriterionValue, sCriterionCode) {
		return jQuery.map(aCriterionValue, function(oCriterionValue) {
			if (oCriterionValue.AGGREGATION_TYPE === "MATRIX") {
				return oCriterionValue;
			}
		});
	}
	//todo how it is updated
	function _calculateOVResult(oDefaultData) {
		var oOverallResultCriterion = oDefaultData &&
			oDefaultData.criteriaHierarchy &&
			oDefaultData.criteriaHierarchy.overallResultCriterion;
		var aCriterionValues = oDefaultData.CriterionValues;
		var sCriterionValues = _getNumCriterion(aCriterionValues);
		var aCalcFormula = oDefaultData.MODEL_CALC_FORMULA;
		var aEnableFormula = oDefaultData.MODEL_ENABLE_FORMULA;
		if (aEnableFormula) {
			// 			aCalcFormula = aCalcFormula.replace(/\$/g, "");
			for (var i = 0; i < sCriterionValues.length; i++) {
				var sCriterionValue = sCriterionValues[i];
				if (sCriterionValue.DATATYPE_CODE === "NUMERIC" || sCriterionValue.DATATYPE_CODE === "INTEGER") {
					var sCriterionCode = sCriterionValue.CRITERION_CODE.split('.');
					sCriterionCode = sCriterionCode.slice(sCriterionCode.length - 1).toString();
					var sCriterionNumValue = sCriterionValue.NUM_VALUE || 0;
					if (isNaN(sCriterionNumValue)) {
						sCriterionNumValue = 0;
					}
					sCriterionNumValue = (!sCriterionValue.AGGREGATION_TYPE && sCriterionValue.WEIGHT !== null && sCriterionValue.WEIGHT !== undefined) ?
						sCriterionNumValue * sCriterionValue.WEIGHT * 0.01 : sCriterionNumValue;
					aCalcFormula = aCalcFormula.replace(new RegExp("\\$" + sCriterionCode + "(?=[\\/+\\-*\\s,)(]|$)", 'g'), sCriterionNumValue);
				} else {
					aCalcFormula = aCalcFormula.replace(new RegExp("\\$" + sCriterionCode + "(?=[\\/+\\-*\\s,)(]|$)", 'g'), 0);
				}
			}
			oDefaultData.OV_RES_NUM_VALUE = eval(aCalcFormula);
			oDefaultData.OV_RES_DATATYPE_CODE = "NUMERIC";
		} else if (oOverallResultCriterion) {
			oDefaultData.OV_RES_NUM_VALUE = oOverallResultCriterion.NUM_VALUE;
			oDefaultData.OV_RES_BOOL_VALUE = oOverallResultCriterion.BOOL_VALUE;
			oDefaultData.OV_RES_DATATYPE_CODE = oOverallResultCriterion.DATATYPE_CODE;
			oDefaultData.OV_RES_VALUE_OPTION_LIST_CODE = oOverallResultCriterion.VALUE_OPTION_LIST_CODE;
			oDefaultData.OV_RES_UOM_CODE = oOverallResultCriterion.UOM_CODE;
		}
	}

	function _buildCriteriaHierarchy(oDefaultData) {
		var oHierarchy = {};

		var aCriterionValues = oDefaultData.CriterionValues;
		var aRootCriteria = _getRootCriteria(aCriterionValues);
		var aOverallResult = jQuery.grep(aRootCriteria, function(oCriterion, iIndex) {
			return oCriterion.IS_OVERALL_RESULT;
		});
		oHierarchy.overallResultCriterion = aOverallResult[0];
		var aAggregatingCriteria = jQuery.grep(aRootCriteria, function(oCriterion, iIndex) {
			return oCriterion.IS_OVERALL_RESULT === 0;
		});
		oHierarchy.aggregatingCriteria = [];
		if (aOverallResult && aOverallResult.length > 0 && aOverallResult[0].AGGREGATION_TYPE !== "MATRIX") {
			oHierarchy.aggregatingCriteria.push({
				criterion: oHierarchy.overallResultCriterion,
				children: _getCriterionsByParentCode(aCriterionValues, oHierarchy.overallResultCriterion.CRITERION_CODE)
			});
		}
		if (aAggregatingCriteria && aAggregatingCriteria.length > 0) {
			jQuery.each(aAggregatingCriteria, function(iIndex, oCriterion) {
				oHierarchy.aggregatingCriteria.push({
					criterion: oCriterion,
					children: _getCriterionsByParentCode(aCriterionValues, oCriterion.CRITERION_CODE)
				});
			});
		}

		//TODO: put into separate function
		jQuery.each(aCriterionValues, function(iIndex, oCriterion) {
			if (oCriterion.VALUE_OPTION_LIST_CODE) {
				var sCodeTable = "sap.ino.xs.object.basis.ValueOptionList.Root_" + oCriterion.VALUE_OPTION_LIST_CODE;
				oCriterion.valueOptionList = CodeModel.getCodes(sCodeTable, function(oCode) {
					return oCode.ACTIVE === 1;
				});
			}
			if(oCriterion.NUM_VALUE){
			    oCriterion.NUM_VALUE = Math.round(oCriterion.NUM_VALUE * 100) / 100;
			}
		});

		oDefaultData.criteriaHierarchy = oHierarchy;
		if (oDefaultData.OV_RES_DATATYPE_CODE || oDefaultData.MODEL_ENABLE_FORMULA) {
			_calculateOVResult(oDefaultData);
		}
	}

	function _addAttachment(oNewAttachment) {
		oNewAttachment.ROLE_TYPE_CODE = "ATTACHMENT";
		this.addChild(oNewAttachment, "EvalAttachments");
	}

	function _removeAttachment(iId) {
		var aAttachment = jQuery.grep(this.getProperty("/EvalAttachments") || [], function(oAttachment) {
			return oAttachment.ID === iId;
		});
		var oFirstAttachment = aAttachment && aAttachment[0];
		if (oFirstAttachment) {
			this.removeChild(oFirstAttachment);
		}
	}

	Evaluation.createAverageEvaluation = function(iIdeaId, aEvaluationsCriterion, oSettings, aEvalAttachments, sComment) {
		var oAggregationData = {};
		var oAggregationDataCount = {};
		var oAggregationDataType = {};

		var fnAggregation = function(oEvaluationCriterion, sValueField) {
			var fAggregationValue = oAggregationData[oEvaluationCriterion.CRITERION_CODE];
			if (!fAggregationValue) {
				fAggregationValue = 0;
			}
			fAggregationValue += parseFloat(oEvaluationCriterion[sValueField]) || 0;
			oAggregationData[oEvaluationCriterion.CRITERION_CODE] = fAggregationValue;

			var iAggregationDataCount = oAggregationDataCount[oEvaluationCriterion.CRITERION_CODE];
			if (!iAggregationDataCount) {
				iAggregationDataCount = 0;
			}
			iAggregationDataCount++;
			oAggregationDataCount[oEvaluationCriterion.CRITERION_CODE] = iAggregationDataCount;

			var sAggregationDataType = oAggregationDataType[oEvaluationCriterion.CRITERION_CODE];
			if (!sAggregationDataType) {
				sAggregationDataType = oEvaluationCriterion.DATATYPE_CODE;
				oAggregationDataType[oEvaluationCriterion.CRITERION_CODE] = sAggregationDataType;
			}
		};

		jQuery.each(aEvaluationsCriterion, function(iIndex, aEvaluationCriterion) {
			jQuery.each(aEvaluationCriterion, function(iCriterionIndex, oEvaluationCriterion) {
				if (oEvaluationCriterion.DATATYPE_CODE === "INTEGER" || oEvaluationCriterion.DATATYPE_CODE === "NUMERIC") {
					fnAggregation(oEvaluationCriterion, "NUM_VALUE");
				} else if (oEvaluationCriterion.DATATYPE_CODE === "BOOLEAN") {
					fnAggregation(oEvaluationCriterion, "BOOL_VALUE");
				}
			});
		});

		for (var sCriterionCode in oAggregationData) {
			var fValue = oAggregationData[sCriterionCode];
			var iCount = oAggregationDataCount[sCriterionCode];
			var sDataType = oAggregationDataType[sCriterionCode];
			fValue = fValue / iCount;
			if (sDataType === "INTEGER" || sDataType === "BOOLEAN") {
				fValue = Math.round(fValue);
			} else if (sDataType === "NUMERIC") {
				fValue = Math.round(fValue * 100) / 100;
			}
			oAggregationData[sCriterionCode] = fValue;
		}

		var aEvalAttachs = [];
		jQuery.each(aEvalAttachments, function(index, evalAttach) {
			aEvalAttachs = aEvalAttachs.concat(evalAttach);
		});

		var oEval = new Evaluation({
			IDEA_ID: iIdeaId,
			aggregationData: oAggregationData,
			averEval: true,
			COMMENT: sComment,
			EvalAttachments: aEvalAttachs
		}, oSettings);
		return oEval;
	};

	Evaluation.createTotalEvaluation = function(iIdeaId, aEvaluationsCriterion, oSettings, aEvalAttachments, sComment, nEvaluationId,
		fnFormat) {
		var oTotalData = {};
		var oAggregationDataType = {};

		var fnAggregation = function(oEvaluationCriterion, sValueField) {
			oTotalData[oEvaluationCriterion.CRITERION_CODE] = oTotalData[oEvaluationCriterion.CRITERION_CODE] || {
				comment: ""
			};
			var fAggregationValue = oTotalData[oEvaluationCriterion.CRITERION_CODE].value;
			if (!fAggregationValue) {
				fAggregationValue = 0;
			}
			fAggregationValue += parseFloat(oEvaluationCriterion[sValueField]) || 0;

			oTotalData[oEvaluationCriterion.CRITERION_CODE].value = fAggregationValue;
			oTotalData[oEvaluationCriterion.CRITERION_CODE].maxVal = parseFloat(oEvaluationCriterion.NUM_VALUE_MAX) || 0;
			oTotalData[oEvaluationCriterion.CRITERION_CODE].minVal = parseFloat(oEvaluationCriterion.NUM_VALUE_MIN) || -9007199254740991;

			var sAggregationDataType = oAggregationDataType[oEvaluationCriterion.CRITERION_CODE];
			if (!sAggregationDataType) {
				sAggregationDataType = oEvaluationCriterion.DATATYPE_CODE;
				oAggregationDataType[oEvaluationCriterion.CRITERION_CODE] = sAggregationDataType;
			}
		};
		jQuery.each(aEvaluationsCriterion, function(iIndex, aEvaluationCriterion) {
			jQuery.each(aEvaluationCriterion, function(iCriterionIndex, oEvaluationCriterion) {
				oTotalData[oEvaluationCriterion.CRITERION_CODE] = oTotalData[oEvaluationCriterion.CRITERION_CODE] || {
					comment: ""
				};
				if (oEvaluationCriterion.DATATYPE_CODE === "INTEGER" || oEvaluationCriterion.DATATYPE_CODE === "NUMERIC") {
					fnAggregation(oEvaluationCriterion, "NUM_VALUE");
				} else if (oEvaluationCriterion.DATATYPE_CODE === "BOOLEAN") {
					if (oTotalData[oEvaluationCriterion.CRITERION_CODE].value === undefined || oTotalData[oEvaluationCriterion.CRITERION_CODE].value === null) {
						oTotalData[oEvaluationCriterion.CRITERION_CODE].value = oEvaluationCriterion.BOOL_VALUE;
					}
				} else if (oEvaluationCriterion.DATATYPE_CODE === "TEXT") {
					if (!oTotalData[oEvaluationCriterion.CRITERION_CODE].value || oTotalData[oEvaluationCriterion.CRITERION_CODE].value.trim().length === 0) {
						oTotalData[oEvaluationCriterion.CRITERION_CODE].value = oEvaluationCriterion.TEXT_VALUE;
					}
				}
				oTotalData[oEvaluationCriterion.CRITERION_CODE].comment += " " + (oEvaluationCriterion.COMMENT || "");
			});
		});

		for (var sCriterionCode in oTotalData) {
			var sDataType = oAggregationDataType[sCriterionCode];
			if (oTotalData[sCriterionCode].hasOwnProperty("maxVal")) {
				var nMax = oTotalData[sCriterionCode].maxVal;
				if (nMax && oTotalData[sCriterionCode].value > nMax) {
					var oMsg = fnFormat([oTotalData[sCriterionCode].value, nMax],1);
					oTotalData[sCriterionCode].msg = oMsg.msg;
					oTotalData[sCriterionCode].msg_tooltip = oMsg.msg_tooltip;
					oTotalData[sCriterionCode].value = nMax;
				}
			}
			if (oTotalData[sCriterionCode].hasOwnProperty("minVal")) {
				var nMin = oTotalData[sCriterionCode].minVal;
				if (nMin && oTotalData[sCriterionCode].value < nMin) {
					var oMinMsg = fnFormat([oTotalData[sCriterionCode].value, nMin],2);
					oTotalData[sCriterionCode].msg = oMinMsg.msg;
					oTotalData[sCriterionCode].msg_tooltip = oMinMsg.msg_tooltip;
					oTotalData[sCriterionCode].value = nMin;
				}
			}
			if (sDataType === "INTEGER") {
				oTotalData[sCriterionCode].value = Math.round(oTotalData[sCriterionCode].value);
			} else if (sDataType === "NUMERIC") {
				oTotalData[sCriterionCode].value = Math.round(oTotalData[sCriterionCode].value * 100) / 100;
			}
		}

		var aEvalAttachs = [];
		jQuery.each(aEvalAttachments, function(index, evalAttach) {
			aEvalAttachs = aEvalAttachs.concat(evalAttach);
		});

		var oEval = new Evaluation({
			IDEA_ID: iIdeaId,
			totalData: oTotalData,
			averEval: true,
			EvalAttachments: aEvalAttachs,
			COMMENT: sComment
		}, oSettings);
		return oEval;
	};

	return Evaluation;
});
}; // end of sap/ino/commons/models/object/Evaluation.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.EvaluationRequest') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.object.EvaluationRequest'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.message.Message'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/models/object/EvaluationRequest",[
    "sap/ino/commons/models/aof/ApplicationObject",
    "sap/ui/core/message/Message",
    "sap/ui/core/MessageType",
    "sap/ino/commons/models/core/ReadSource",
    "sap/ino/commons/util/DateUtil"
], function(ApplicationObject,
	Message,
	MessageType,
	ReadSource,
	DateUtil) {
	"use strict";

	var EvaluationRequest = ApplicationObject.extend("sap.ino.commons.models.object.EvaluationRequest", {
		objectName: "sap.ino.xs.object.evaluation.EvaluationRequest",
		readSource: ReadSource.getDefaultODataSource("EvaluationRequest", {}),
		invalidation: {
			//entitySets: ["EvaluationRequest"]
		},
		determinations: {
			onCreate: _determineCreate,
			onRead: _read
		},
		actionImpacts: {
			"create": [{
				"objectName": "sap.ino.commons.models.object.Idea",
				"objectKey": "IDEA_ID",
				"impactedAttributes": ["EvaluationRequests", "IDEA_HAS_INCOMPLETED_EVAL_REQ"]
			}],
			"del": [{
				"objectName": "sap.ino.commons.models.object.Idea",
				"objectKey": "IDEA_ID",
				"impactedAttributes": ["EvaluationRequests", "IDEA_HAS_INCOMPLETED_EVAL_REQ"]
			}]
		},
		addExpert: addExpert,
		removeExpert: removeExpert,
		onNormalizeData: function(oReqEval) {
			oReqEval.ACCEPT_DATE = DateUtil.convertToUtcString(oReqEval.ACCEPT_DATE);
			oReqEval.COMPLETE_DATE = DateUtil.convertToUtcString(oReqEval.COMPLETE_DATE);
			return oReqEval;
		}
	});

	function _determineCreate() {
		var dAcceptDate = new Date();
		dAcceptDate.setDate(dAcceptDate.getDate() + 1);
		var dCompleteDate = new Date();
		dCompleteDate.setDate(dCompleteDate.getDate() + 7);
		return {
			//"ACCEPT_DATE": dAcceptDate,
			//"COMPLETE_DATE": dCompleteDate,
			"STATUS": "sap.ino.config.EVAL_REQ_DEFAULT"
		};
	}

	function filterFirstData(aData) {
		var result = {
			"Data": aData[0],
			"Index": 0
		};
		jQuery.each(aData, function(index, data) {
			if (result.Data.CREATED_AT > data.CREATED_AT) {
				result.Data = data;
				result.Index = index;
			}
		});
		return result;
	}

	function _getKey(data) {
		return ["ITEM_ID_" + data.EVAL_REQ_ITEM_ID + "_CREATED_BY_ID_" + data.CREATED_BY_ID + "_TO_IDENTITY_" + data.TO_IDENTITY, "ITEM_ID_" +
			data.EVAL_REQ_ITEM_ID + "_CREATED_BY_ID_" + data.TO_IDENTITY + "_TO_IDENTITY_" + data.CREATED_BY_ID];
	}

	function convertClarifications(oEvalRequest) {
		var result = [];
		if (!oEvalRequest || oEvalRequest.length === 0) {
			return result;
		}
		var oGroup = {};
		jQuery.each(oEvalRequest, function(index, data) {
			var aKey = _getKey(data);
			if (oGroup.hasOwnProperty(aKey[0])) {
				oGroup[aKey[0]].push(data);
			} else if (oGroup.hasOwnProperty(aKey[1])) {
				oGroup[aKey[1]].push(data);
			} else {
				oGroup[aKey[0]] = [];
				oGroup[aKey[0]].push(data);
			}
		});
		jQuery.each(oGroup, function(index, data) {
			var oFirstData = filterFirstData(data);
			data.splice(oFirstData.Index, 1);
			result.push({
				"CLARIFICATION_ENABLED": oFirstData.Data.CLARIFICATION_ENABLED,
				"CREATED_BY_ID": oFirstData.Data.CREATED_BY_ID,
				"EVAL_REQ_ITEM_ID": oFirstData.Data.EVAL_REQ_ITEM_ID,
				"TO_IDENTITY": oFirstData.Data.TO_IDENTITY,
				"CREATED_BY_NAME": oFirstData.Data.CREATED_BY_NAME,
				"CREATED_BY_IMAGE_ID": oFirstData.Data.CREATED_BY_IMAGE_ID,
				"CONTENT": oFirstData.Data.CONTENT,
				"CREATED_AT": oFirstData.Data.CREATED_AT,
				"Communications": data
			});
		});
		return result;
	}

	function _read(oData) {
		var oEvalRequest = oData;
		if (!(oEvalRequest.ACCEPT_DATE instanceof Date)) {
			oEvalRequest.ACCEPT_DATE = new Date(oData.ACCEPT_DATE);
		} else {
			oEvalRequest.ACCEPT_DATE = DateUtil.convertToLocalDate(oData.ACCEPT_DATE);
		}
		if (!(oEvalRequest.COMPLETE_DATE instanceof Date)) {
			oEvalRequest.COMPLETE_DATE = new Date(oData.COMPLETE_DATE);
		} else {
			oEvalRequest.COMPLETE_DATE = DateUtil.convertToLocalDate(oData.COMPLETE_DATE);
		}
		if (oEvalRequest.Clarifications) {
			oEvalRequest.ExpertsClarifications = convertClarifications(oEvalRequest.Clarifications);
		}
		return oEvalRequest;
	}

	function addExpert(oNewExpert) {
		/* jshint validthis: true */
		var oMessage;

		if (!oNewExpert.NAME || jQuery.trim(oNewExpert.NAME).length === 0) {
			oMessage = new Message({
				key: "MSG_IDEA_INVALID_EMPTY_EXPERT",
				type: MessageType.Error,
				group: "EXPERT"
			});
			return oMessage;
		}

		if (!oNewExpert.IDENTITY_ID) {
			oMessage = new Message({
				key: "MSG_IDEA_INVALID_EXPERT",
				type: MessageType.Error,
				group: "EXPERT"
			});
			return oMessage;
		}

		var aExperts = this.getProperty("/Experts");
		var aMatches = jQuery.grep(aExperts, function(oExpert) {
			return oExpert.IDENTITY_ID === oNewExpert.IDENTITY_ID;
		});
		if (aMatches.length === 0) {
			this.addChild(oNewExpert, "Experts");
		}
	}

	function removeExpert(iExpertId) {
		/* jshint validthis: true */
		var aExperts = this.getProperty("/Experts");
		var aMatches = jQuery.grep(aExperts, function(oExpert) {
			return oExpert.IDENTITY_ID === iExpertId;
		});
		var oRemoveExpert = aMatches[0];
		if (oRemoveExpert) {
			this.removeChild(oRemoveExpert, "Experts");
		}
	}

	return EvaluationRequest;
});
}; // end of sap/ino/commons/models/object/EvaluationRequest.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.EvaluationRequestComment') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.object.EvaluationRequestComment'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/models/object/EvaluationRequestComment",[
       "sap/ino/commons/models/aof/ApplicationObject",
       "sap/ino/commons/models/core/ReadSource"
   ], function(ApplicationObject, ReadSource) {
	"use strict";
	return ApplicationObject.extend("sap.ino.commons.models.object.EvaluationRequestComment", {
		objectName: "sap.ino.xs.object.evaluation.EvalReqComment",
		readSource: ReadSource.getDefaultAOFSource(),
		invalidation: {
			entitySets: ["EvaluationRequestComment"]
		},
		actionImpacts: {
			"del": [{
				"objectName": "sap.ino.commons.models.object.EvaluationRequest",
				"objectKey": "OBJECT_ID",
				"impactedAttributes": ["COMMENT_COUNT"]
			}],
			"create": [{
				"objectName": "sap.ino.commons.models.object.EvaluationRequest",
				"objectKey": "OBJECT_ID",
				"impactedAttributes": ["COMMENT_COUNT"]
			}]
		}
	});
});
}; // end of sap/ino/commons/models/object/EvaluationRequestComment.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.EvaluationRequestItem') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.object.EvaluationRequestItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.message.Message'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.ParseException'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/models/object/EvaluationRequestItem",[
    "sap/ino/commons/models/aof/ApplicationObject",
    "sap/ino/commons/application/Configuration",
    "sap/ui/core/message/Message",
    "sap/ui/core/MessageType",
    "sap/ui/model/ParseException",
    "sap/ino/commons/models/core/ReadSource"
], function(ApplicationObject,
	Configuration,
	Message,
	MessageType,
	ParseException,
	ReadSource) {
	"use strict";

	var EvaluationRequestItem = ApplicationObject.extend("sap.ino.commons.models.object.EvaluationRequestItem", {
		objectName: "sap.ino.xs.object.evaluation.EvaluationRequestItem",
		readSource: ReadSource.getDefaultODataSource("EvaluationRequestItem", {}),
		invalidation: {
			entitySets: []
		},
		actions: {
			executeStatusTransition: {

			}
		},
		determinations: {
			onRead: _read
		}
	});

	function filterFirstData(aData) {
		var result = {
			"Data": aData[0],
			"Index": 0
		};
		jQuery.each(aData, function(index, data) {
			if (result.Data.CREATED_AT > data.CREATED_AT) {
				result.Data = data;
				result.Index = index;
			}
		});
		return result;
	}

	function _getKey(data) {
		return "ITEM_ID_" + data.EVAL_REQ_ITEM_ID + "_CREATED_BY_ID_" + (data.CREATED_BY_ID ^ data.TO_IDENTITY);
	}

	function convertClarifications(oEvalRequest) {
		var result = [];
		if (!oEvalRequest || oEvalRequest.length === 0) {
			return result;
		}
		var oGroup = {};
		jQuery.each(oEvalRequest, function(index, data) {
			var sKey = _getKey(data);
			if (!oGroup.hasOwnProperty(sKey)) {
				oGroup[sKey] = [];
			}
			oGroup[sKey].push(data);
		});
		jQuery.each(oGroup, function(index, data) {
			var oFirstData = filterFirstData(data);
			data.splice(oFirstData.Index, 1);
			result.push({
				"CLARIFICATION_ENABLED": oFirstData.Data.CLARIFICATION_ENABLED,
			    "CREATED_BY_ID":oFirstData.Data.CREATED_BY_ID,
				"EVAL_REQ_ITEM_ID": oFirstData.Data.EVAL_REQ_ITEM_ID,
				"CREATED_BY_NAME": oFirstData.Data.CREATED_BY_NAME,
				"CREATED_BY_IMAGE_ID": oFirstData.Data.CREATED_BY_IMAGE_ID,
				"CONTENT": oFirstData.Data.CONTENT,
				"CREATED_AT": oFirstData.Data.CREATED_AT,
				"Communications": data
			});
		});
		return result;
	}

	function _read(oData) {
		var oEvalRequest = oData;
		if (oEvalRequest.Clarifications) {
			oEvalRequest.ExpertsClarifications = convertClarifications(oEvalRequest.Clarifications);
			oEvalRequest.InitRefObjectId = oEvalRequest.EVAL_REQ_ID;
		}
		return oEvalRequest;
	}
	return EvaluationRequestItem;
});
}; // end of sap/ino/commons/models/object/EvaluationRequestItem.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.Group') ) {
jQuery.sap.declare('sap.ino.commons.models.object.Group'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/models/object/Group",[
    "sap/ino/commons/models/aof/ApplicationObject",
    "sap/ino/commons/models/core/ReadSource"
], function(ApplicationObject, ReadSource) {
	"use strict";
	return ApplicationObject.extend('sap.ino.commons.models.object.Group', {
        objectName: "sap.ino.xs.object.iam.Group",
		readSource: ReadSource.getDefaultAOFSource(),
	    createMember: function(groups){
	        return this.massCreateMember(groups);
	    }
	});
});
}; // end of sap/ino/commons/models/object/Group.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.Homepagewidget') ) {
jQuery.sap.declare('sap.ino.commons.models.object.Homepagewidget'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/models/object/Homepagewidget",[
    "sap/ino/commons/models/aof/ApplicationObject",
    "sap/ino/commons/models/core/ReadSource"
], function(ApplicationObject, ReadSource) {
	"use strict";
	return ApplicationObject.extend('sap.ino.commons.models.object.Homepagewidget', {
        objectName: "sap.ino.xs.object.homepagewidget.Homepagewidget",
		readSource: ReadSource.getDefaultAOFSource()
	});
});
}; // end of sap/ino/commons/models/object/Homepagewidget.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.Idea') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.object.Idea'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.message.Message'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/models/object/Idea",[
    "sap/ino/commons/models/aof/ApplicationObject",
    "sap/ino/commons/models/aof/PropertyModel",
    "sap/ino/commons/models/core/ReadSource",
    "sap/ino/commons/models/core/Extensibility",
    "sap/ino/commons/application/Configuration",
    "sap/ui/core/message/Message",
    "sap/ui/core/MessageType",
    "sap/ui/core/format/DateFormat",
    "sap/ino/controls/IdeaAttachmentRoleType",
    "sap/ino/controls/IdeaStatusType",
    "sap/ino/controls/IdeaStatusActionType",
    "sap/ino/commons/models/core/CodeModel"
], function(ApplicationObject, PropertyModel, ReadSource, Extensibility, Configuration,
	Message, MessageType, DateFormat, IdeaAttachmentRoleType, IdeaStatusType, IdeaStatusActionType, CodeModel) {
	"use strict";

	var Idea = ApplicationObject.extend("sap.ino.commons.models.object.Idea", {
		objectName: "sap.ino.xs.object.idea.Idea",
		readSource: ReadSource.getDefaultODataSource("IdeaFull", {
			excludeNodes: ["Relations"],
			includeNodes: ["Evaluations"]
		}),
		invalidation: {
			entitySets: ["IdeaFull", "IdeaMedium", "IdeaMediumCommunity", "IdeaSmall", "IdeaMediumSearch", "IdeaMediumBackofficeSearch",
				"CampaignEntityCount", "MyIdeaMediumCommunity", "MyIdeaFollow"]
		},
		actionImpacts: {
			"create": [{
				"entitySetName": "EntityCount",
				"entitySetKey": "1",
				"impactedAttributes": ["AUTHORED_IDEA_COUNT"]
			}],
			"modifyAndSubmit": [{
				"objectName": "sap.ino.commons.models.object.Campaign",
				"objectKey": "CAMPAIGN_ID",
				"impactedAttributes": ["UNASSIGNED_IDEAS_COUNT"]
                        }],
			"assignCoach": [{
				"objectName": "sap.ino.commons.models.object.Campaign",
				"objectKey": "CAMPAIGN_ID",
				"impactedAttributes": ["UNASSIGNED_IDEAS_COUNT"]
                        }],
			"modifyAndAutoAssignCoach": [{
				"objectName": "sap.ino.commons.models.object.Campaign",
				"objectKey": "CAMPAIGN_ID",
				"impactedAttributes": ["UNASSIGNED_IDEAS_COUNT"]
                        }],      
			"autoAssignCoach": [{
				"objectName": "sap.ino.commons.models.object.Campaign",
				"objectKey": "CAMPAIGN_ID",
				"impactedAttributes": ["UNASSIGNED_IDEAS_COUNT"]
                        }],                    
			"unassignCoach": [{
				"objectName": "sap.ino.commons.models.object.Campaign",
				"objectKey": "CAMPAIGN_ID",
				"impactedAttributes": ["UNASSIGNED_IDEAS_COUNT"]
                        }],
			"del": [{
				"entitySetName": "EntityCount",
				"entitySetKey": "1",
				"impactedAttributes": ["AUTHORED_IDEA_COUNT"]
			}]
		},
		determinations: {
			onCreate: determineCreate,
			onRead: determineRead
		
		},
		actions: {
			executeStatusTransition: {
				initParameter: initStatusTransitionParameters
			},
			modifyAndSubmit: {
				enabledCheck: function(oIdea) {
					var sStatus = oIdea.getProperty("/STATUS_CODE");
					return sStatus === IdeaStatusType.Draft;
				},
				execute: function(vKey, oIdea, oParameter, oActionMetadata, oSettings) {
					var oDeferred = new jQuery.Deferred();
					var oModifyRequest = oIdea.modify(oSettings);
					oModifyRequest.fail(oDeferred.reject);
					oModifyRequest.done(function() {
						var oSubmitRequest = oIdea.submit(oParameter, oSettings);
						oSubmitRequest.fail(oDeferred.reject);
						oSubmitRequest.done(function() {
					        oParameter.VOTE_TYPE_TYPE_CODE = oIdea.getProperty("/VOTE_TYPE_TYPE_CODE");
					        oParameter.MAX_STAR_NO = oIdea.getProperty("/MAX_STAR_NO");
					        if(oIdea.getProperty("/VOTING_ACTIVE") && oIdea.getProperty("/AUTO_VOTE")){
					            var oAutoVoteRequest = oIdea.autoVote(oParameter, oSettings);
    							oAutoVoteRequest.fail(oDeferred.reject);
    							oAutoVoteRequest.done(oDeferred.resolve);
					        }
					        else{
                             oDeferred.resolve(); 
					        }
						});
					});
					return oDeferred.promise();
				}
			},
			del: {
				enabledCheck: function(oIdea, bEnabled) {
					if (bEnabled === undefined) {
						return false;
					}
				}
			},
			modifyAndAutoAssignCoach:{
				execute: function(vKey, oIdea, oParameter, oActionMetadata, oSettings) {
					var oDeferred = new jQuery.Deferred();
					var oModifyRequest = oIdea.modify(oSettings);
					oModifyRequest.fail(oDeferred.reject);
					if(oIdea.getData().COACH_ID === oParameter.DEFAULT_COACH){
						oModifyRequest.done(oDeferred.resolve);
					}else{
					oModifyRequest.done(function() {
						var oAutoAssignCoachRequest = oIdea.autoAssignCoach(oParameter, oSettings);
						oAutoAssignCoachRequest.fail(oDeferred.reject);
						oAutoAssignCoachRequest.done(oDeferred.resolve);
					});
					}
					return oDeferred.promise();
				}			    
			}
		},
		setProperty: setProperty,
		setData: setData,
		addWall: addWall,
		removeWall: removeWall,
		addInternalWall: addInternalWall,
		removeInternalWall: removeInternalWall,
		addContributor: addContributor,
		//addExpert: addExpert,
		//removeExpert: removeExpert,
		addTag: addTag,
		modifyLink: modifyLink,
		addLink: addLink,
		addAttachment: addAttachment,
		addInternalAttachment: addInternalAttachment,
		removeAttachment: removeAttachment,
		setTitleImage: setTitleImage,
		clearTitleImage: clearTitleImage,
		hasInitialDescription: hasInitialDescription,
		isSubmitted: isSubmitted,
		createWall: createWall,
		delVotesSimulate: delVotesSimulate
	});

	Idea.isPhaseChange = function(sStatusAction) {
		return sStatusAction === IdeaStatusActionType.nextPhase || sStatusAction === IdeaStatusActionType.prevPhase;
	};

	Idea.isFinalStatus = function(sStatusCode) {
		return sStatusCode === IdeaStatusType.Discontinued || sStatusCode === IdeaStatusType.Completed || sStatusCode === IdeaStatusType.Merged;
	};

	function setProperty(sPath, vValue, oContext, bAsyncUpdate) {
		/* jshint validthis: true */
		var bSuccess = false;
		bSuccess = ApplicationObject.prototype.setProperty.apply(this, arguments);

		// Normalize the path to be able to deal with bindings where the property of the root
		// model starts with "/"
		var sPropName = (sPath[0] === "/" ? sPath.substring(1) : sPath);
		if (sPropName === "CAMPAIGN_ID") {
			var oDataModel = this.getReadSourceModel();
			var oIdea = this;
			var iCampaignId = vValue;

			// this happens when invalid values are entered in the combobox
			if (iCampaignId === "" || iCampaignId === "0") {
				iCampaignId = 0;
				ApplicationObject.prototype.setProperty.apply(this, [sPath, iCampaignId, oContext, bAsyncUpdate]);
			}

			var fnSetCampaignDetails = function(oCampaign) {
				oIdea.setProperty("/CAMPAIGN_NAME", oCampaign.NAME);
				oIdea.setProperty("/CAMPAIGN_SHORT_NAME", oCampaign.SHORT_NAME);
				oIdea.setProperty("/CAMPAIGN_COLOR", oCampaign.COLOR_CODE);
				oIdea.setProperty("/STEPS", oCampaign.PHASE_COUNT);
				oIdea.setProperty("/CAMPAIGN_BACKGROUND_IMAGE_ID", oCampaign.CAMPAIGN_BACKGROUND_IMAGE_ID);
				oIdea.setProperty("/CAMPAIGN_SMALL_BACKGROUND_IMAGE_ID", oCampaign.CAMPAIGN_SMALL_BACKGROUND_IMAGE_ID);
				oIdea.setProperty("/CAMPAIGN_VOTE_TYPE_CODE", oCampaign.VOTE_TYPE_CODE);
				oIdea.setProperty("/RESP_NAME", oCampaign.RESP_NAME);
				oIdea.setProperty("/RESP_CODE",oCampaign.RESP_CODE);
				oIdea.setProperty("/RESP_DESCRIPTION", oCampaign.RESP_DESCRIPTION);
				oIdea.setProperty("/RESP_LIST_VISIBLE",false);
				oIdea.setProperty("/REWARD_ACTIVE",oCampaign.REWARD_ACTIVE);
				oIdea.setProperty("/AUTO_ASSIGN_RL_COACH",oCampaign.IS_AUTO_ASSIGN_RL_COACH);
				oIdea.setProperty("/OPEN_ANONYMOUS_FOR_IDEA",oCampaign.IS_OPEN_ANONYMOUS_FUNCTION);
				if  (oCampaign.RESP_CODE)
				{
				    oIdea.setProperty("/RESP_LIST_VISIBLE",true);
				}
				if (oIdea.hasInitialDescription(oCampaign.IDEA_DESCRIPTION_TEMPLATE)) {
					oIdea.setProperty("/IDEA_DESCRIPTION_TEMPLATE", oCampaign.IDEA_DESCRIPTION_TEMPLATE || "");
					oIdea.setProperty("/DESCRIPTION", oCampaign.IDEA_DESCRIPTION_TEMPLATE || "");
				}
			};
			if (iCampaignId === 0) {
				fnSetCampaignDetails({
					NAME: "",
					SHORT_NAME: "",
					COLOR_CODE: "",
					PHASE_COUNT: 4,
					IDEA_DESCRIPTION_TEMPLATE: ""
				});
			} else {
				oDataModel.read("/CampaignSmall(" + iCampaignId + ")", {
					success: function(oCampaign) {
						fnSetCampaignDetails(oCampaign);
					}
				});
			}
		}
		return bSuccess;
	}

	function setData(oData) {
		/* jshint validthis: true */
		ApplicationObject.prototype.setData.apply(this, arguments);
		if (oData.CAMPAIGN_ID > 0) {
			this.setProperty("/CAMPAIGN_ID", oData.CAMPAIGN_ID);
		}
	}

	function initWalls(oData) {
		oData.Walls = jQuery.extend(true, [], oData.Walls || []);
		oData.InternalWalls = jQuery.extend(true, [], oData.InternalWalls || []);
		var aWall = oData.Walls.concat(oData.InternalWalls);
		if (aWall && aWall.length > 0) {
			var aWallId = [];
			jQuery.each(aWall, function(index, oWall) {
				aWallId.push(oWall.WALL_ID);
			});
			// Executed synchronously as otherwise RichText-Editor will crash, if data is set asynchronously
			jQuery.sap.require("sap.ino.commons.models.object.Wall");
			var Wall = sap.ino.commons.models.object.Wall;
			Wall.readWalls(aWallId, false).done(function(aWallUpdate) {
				jQuery.each(aWall, function(index, oWall) {
					jQuery.each(aWallUpdate, function(index, oWallUpdate) {
						if (oWall.WALL_ID === oWallUpdate.ID) {
							oWall.NAME = oWallUpdate.NAME;
							oWall.BACKGROUND_IMAGE_URL = oWallUpdate.BACKGROUND_IMAGE_URL;
							oWall.BACKGROUND_IMAGE_ZOOM = oWallUpdate.BACKGROUND_IMAGE_ZOOM;
							oWall.BACKGROUND_IMAGE_REPEAT = oWallUpdate.BACKGROUND_IMAGE_REPEAT;
							oWall.BACKGROUND_COLOR = oWallUpdate.BACKGROUND_COLOR;
							oWall.BackgroundImage = oWallUpdate.BackgroundImage || [];
							oWall.CREATED_BY_NAME = oWallUpdate.CREATED_BY_NAME;
							oWall.Items = [];
							jQuery.each(oWallUpdate.Items || [], function(index, oItem) {
								if (oItem.WALL_ID === oWall.WALL_ID) {
									oWall.Items.push(oItem);
								}
							});
						}
					});
				});
			});
		}
		return oData;
	}
	
	function addContributionShare(oData){
	    var aContributionShare = oData.ContributionShare;
	    jQuery.each(oData.SubmitterContributorsCoach, function(iIndex, oPerson){
	        if(oPerson.ROLE_CODE === "IDEA_SUBMITTER" || oPerson.ROLE_CODE === "IDEA_CONTRIBUTOR" ){
	            var aContribution = aContributionShare.filter(function(oShare){
	                return oShare.AUTHOR_ID === oPerson.IDENTITY_ID;
	            });
	            
	            if(aContribution.length > 0){
	                oPerson.iContributionShare = aContribution[0].PERCENTAGE;
	            }
	        }
	    });
	}

	function determineCreate(oData, oIdea) {
		var aTag = jQuery.map(oData.Tags || [], function(sTag) {
			return {
				ID: oIdea.getNextHandle(),
				NAME: sTag
			};
		});
		var oCurrentUser = Configuration.getCurrentUser();

		var oDataObject = {
			"NAME": oData.NAME || "",
			"DESCRIPTION": oData.DESCRIPTION || "",
			"STATUS_CODE": IdeaStatusType.Draft,
			"CREATED_AT": new Date(),
			"CREATED_BY_NAME": oCurrentUser.NAME,
			"STEP": -1,
			"STEPS": 4,
			"CAMPAIGN_NAME": null,
			"CAMPAIGN_ID": oData.CAMPAIGN_ID || 0,
			"Tags": aTag,
			"Walls": oData.Walls && oData.Walls.length > 0 ? oData.Walls : []
		};
		oDataObject = initWalls(oDataObject);
		return Extensibility.initExtensionNode(oDataObject, "Extension", oIdea);
	}

	function _buildValueList(oData) {
		//put into separate function
		jQuery.each(oData.FieldsValue, function(iIndex, oFieldValue) {
			if (oFieldValue.VALUE_OPTION_LIST_CODE) {
				var sCodeTable = "sap.ino.xs.object.basis.ValueOptionList.Root_" + oFieldValue.VALUE_OPTION_LIST_CODE;
				oFieldValue.valueOptionList = CodeModel.getCodes(sCodeTable, function(oCode) {
							return oCode.ACTIVE === 1;
						});
			}
		});
	}
	

	function determineRead(oData, oIdea) {
		oData = initWalls(oData);
		oData.SubmitterContributorsCoach = (oData.Submitter || []).concat(oData.Contributors || []).concat(oData.Coach || []);
		oData.SubmitterContributors = (oData.Submitter || []).concat(oData.Contributors || []);
		oData.SubmitterCoach = oData.Coach;
		addContributionShare(oData);//add contribution share percentage to Contributors 
		//add valuelist option
		_buildValueList(oData);
		if(oIdea.getProperty("/EDITABLE") !== undefined){
		    oData.EDITABLE = oIdea.getProperty("/EDITABLE");
		}
		if(oData.FieldsValue && oData.FieldsValue.length > 0){
		 oData.FieldsValue.sort(function(o1, o2) {
    			if (o1.SEQUENCE_NO < o2.SEQUENCE_NO) {
    				return -1;
    			} else {
    				return 1;
    			}
    		});	
	      }
		if(oData.AdminFieldsValue && oData.AdminFieldsValue.length > 0){
		 oData.AdminFieldsValue.sort(function(o1, o2) {
    			if (o1.SEQUENCE_NO < o2.SEQUENCE_NO) {
    				return -1;
    			} else {
    				return 1;
    			}
    		});	
	      }		
		return Extensibility.initExtensionNode(oData, "Extension", oIdea);
	}
    
	function initStatusTransitionParameters(oParameter, oPropertyModel, sStatusAction) {
		var oDateFormat = DateFormat.getDateInstance({
			pattern: "yyyy-MM-dd"
		});
		var sTodaysDate = oDateFormat.format(new Date());

		var sUserName = "";
		var iUserId = null;

		var oUser = Configuration.getCurrentUser();
		if (oUser) {
			sUserName = oUser.NAME;
			iUserId = oUser.USER_ID;
		}

		oParameter.STATUS_ACTION_CODE = sStatusAction; // does not need to be set

		var aStatusTransition = oPropertyModel.getProperty("/actions/executeStatusTransition/customProperties/statusTransitions");

		var oStatusTransition = jQuery.grep(aStatusTransition, function(oTransition) {
			return oTransition.STATUS_ACTION_CODE === sStatusAction;
		})[0];
		oParameter.REWARD_ACTIVE = oStatusTransition && oStatusTransition.REWARD_ACTIVE;
		oParameter.NEXT_STATUS_CODE = oStatusTransition && oStatusTransition.NEXT_STATUS_CODE;
		oParameter.NEXT_PHASE_CODE = oStatusTransition && oStatusTransition.NEXT_PHASE_CODE;
		oParameter.IS_PHASE_CHANGE = oStatusTransition && Idea.isPhaseChange(sStatusAction);
		oParameter.IS_DECISION_RELEVANT = !!(oStatusTransition && oStatusTransition.DECISION_RELEVANT);
		oParameter.INCLUDE_RESPONSE = oStatusTransition && oStatusTransition.INCLUDE_RESPONSE;
		oParameter.DECISION_REASON_LIST_CODE = oStatusTransition && oStatusTransition.DECISION_REASON_LIST_CODE;
		oParameter.DECISION_REASON_LIST_VISIBLE = oStatusTransition && oStatusTransition.DECISION_REASON_LIST_VISIBLE;
		oParameter.TEXT_MODULE_CODE = oStatusTransition && oStatusTransition.TEXT_MODULE_CODE;
		oParameter.DECIDER_ID = iUserId;
		if (oParameter.IS_DECISION_RELEVANT) {
			oParameter.DECISION_DATE = sTodaysDate;
			oParameter.REASON = "";
			oParameter.SEND_RESPONSE = oParameter.INCLUDE_RESPONSE;
			oParameter.RESPONSE = "";
			oParameter.DECIDER_NAME = sUserName;
			oParameter.NOTIFY_AUTHOR = true;
			oParameter.REASON_CODE = "";
			oParameter.LINK_LABEL = "";
			oParameter.LINK_URL = "";
			if (oParameter.DECISION_REASON_LIST_CODE) {
				var sCodeTable = "sap.ino.xs.object.basis.ValueOptionList.ValueOptions";
				oParameter.reasonList = CodeModel.getCodes(sCodeTable, function(oCode) {
					return oCode.LIST_CODE === oParameter.DECISION_REASON_LIST_CODE && oCode.ACTIVE === 1;
				});
			}
		}

	}

	function addWall(oNewWall) {
		/* jshint validthis: true */
		var aWall = this.getProperty("/Walls");
		var aMatches = jQuery.grep(aWall, function(oWall) {
			return oWall.WALL_ID === oNewWall.WALL_ID;
		});
		if (aMatches.length === 0) {
			delete oNewWall.ID;
			this.addChild(oNewWall, "Walls");
			oNewWall.WALL_ASSIGN_ID = oNewWall.ID;
		}
	}

	function removeWall(iWallId) {
		/* jshint validthis: true */
		var that = this;
		var aWall = jQuery.grep(that.getProperty("/Walls") || [], function(oWall) {
			return oWall.WALL_ID === iWallId;
		});
		jQuery.each(aWall, function(index, oWall) {
			that.removeChild(oWall);
		});
	}

	function addInternalWall(oNewWall) {
		/* jshint validthis: true */
		var aWall = this.getProperty("/InternalWalls");
		var aMatches = jQuery.grep(aWall, function(oWall) {
			return oWall.WALL_ID === oNewWall.WALL_ID;
		});
		if (aMatches.length === 0) {
			delete oNewWall.ID;
			this.addChild(oNewWall, "InternalWalls");
			oNewWall.WALL_ASSIGN_ID = oNewWall.ID;
		}
	}

	function removeInternalWall(iWallId) {
		/* jshint validthis: true */
		var that = this;
		var aWall = jQuery.grep(that.getProperty("/InternalWalls") || [], function(oWall) {
			return oWall.WALL_ID === iWallId;
		});
		jQuery.each(aWall, function(index, oWall) {
			that.removeChild(oWall);
		});
	}

	function addContributor(oNewContributor) {
		/* jshint validthis: true */
		var oMessage;

		if (!oNewContributor.NAME || jQuery.trim(oNewContributor.NAME).length === 0) {
			oMessage = new Message({
				key: "MSG_IDEA_INVALID_EMPTY_CONTRIBUTOR",
				type: MessageType.Error,
				group: "CONTRIBUTOR"
			});
			return oMessage;
		}

		if (!oNewContributor.IDENTITY_ID) {
			oMessage = new Message({
				key: "MSG_IDEA_INVALID_CONTRIBUTOR",
				type: MessageType.Error,
				group: "CONTRIBUTOR"
			});
			return oMessage;
		}

		var aContributors = this.getProperty("/Contributors");
		var aMatches = jQuery.grep(aContributors, function(oContributor) {
			return oContributor.IDENTITY_ID === oNewContributor.IDENTITY_ID;
		});
		if (aMatches.length === 0) {
			this.addChild(oNewContributor, "Contributors");
		}
	}

	function addExpert(oNewExpert) {
		/* jshint validthis: true */
		var oMessage;

		if (!oNewExpert.NAME || jQuery.trim(oNewExpert.NAME).length === 0) {
			oMessage = new Message({
				key: "MSG_IDEA_INVALID_EMPTY_EXPERT",
				type: MessageType.Error,
				group: "EXPERT"
			});
			return oMessage;
		}

		if (!oNewExpert.IDENTITY_ID) {
			oMessage = new Message({
				key: "MSG_IDEA_INVALID_EXPERT",
				type: MessageType.Error,
				group: "EXPERT"
			});
			return oMessage;
		}

		var aExperts = this.getProperty("/Experts");
		var aMatches = jQuery.grep(aExperts, function(oExpert) {
			return oExpert.IDENTITY_ID === oNewExpert.IDENTITY_ID;
		});
		if (aMatches.length === 0) {
			this.addChild(oNewExpert, "Experts");
		}
	}

	function removeExpert(iExpertId) {
		/* jshint validthis: true */
		var aExperts = this.getProperty("/Experts");
		var aMatches = jQuery.grep(aExperts, function(oExpert) {
			return oExpert.IDENTITY_ID === iExpertId;
		});
		var oRemoveExpert = aMatches[0];
		if (oRemoveExpert) {
			this.removeChild(oRemoveExpert, "Experts");
		}
	}

	function addTag(oNewTag) {
		/* jshint validthis: true */
		var oMessage;
		var aTags = this.getProperty("/Tags");

		if (!oNewTag.NAME || jQuery.trim(oNewTag.NAME).length === 0) {
			oMessage = new Message({
				key: "MSG_INVALID_EMPTY_TAG",
				type: MessageType.Error,
				group: "TAG"
			});
			return oMessage;
		}

		oNewTag.NAME = jQuery.trim(oNewTag.NAME);

		if (!oNewTag.TAG_ID && oNewTag.NAME) {
			// Tags are created "on the fly"
			// so for new tags (not only tag assignment)
			// a new handle is used
			oNewTag.TAG_ID = this.getNextHandle();
		}
		var aMatches = jQuery.grep(aTags, function(oTag) {
			return oTag.NAME.toLowerCase() === oNewTag.NAME.toLowerCase();
		});

		if (aMatches.length === 0) {
			this.addChild(oNewTag, "Tags");
		} else {
			return new Message({
				key: "MSG_DUPLICATE_TAG",
				type: MessageType.Error
			});
		}
	}

	function modifyLink(iId, sURL, sLabel) {
		/* jshint validthis: true */
		return this.addLink(sURL, sLabel, iId);
	}

	function addLink(sURL, sLabel, iId) {
		/* jshint validthis: true */
		var oMessage;
		sURL = sURL.trim();

		if (!sURL || sURL === "") {
			oMessage = new Message({
				code: "IDEA_OBJECT_MSG_LINK_URL_NOT_ALLOWED",
				type: MessageType.Error
			});
			return oMessage;
		}

		if (sURL && sURL.indexOf("http://") !== 0 && sURL.indexOf("https://") !== 0 && sURL.indexOf("mailto:") !== 0) {
			sURL = "http://" + sURL;
		}

		if (!sURL || sURL === "" || !jQuery.sap.validateUrl(sURL)) {
			oMessage = new Message({
				code: "IDEA_OBJECT_MSG_LINK_URL_NOT_ALLOWED",
				type: MessageType.Error
			}); 
			return oMessage;
		}

		if (!sLabel || sLabel === "") {
			sLabel = null;
		}

		var oLink = {
			ID: iId,
			LABEL: sLabel,
			URL: sURL
		};

		if (iId !== undefined) {
			this.updateNode(oLink, "Links");
		} else {
			this.addChild(oLink, "Links");
		}
	}

	function addRelation(sObjectTypeCode, vKey, sSemantic) {
		/* jshint validthis: true */
		this.addChild({
			TARGET_OBJECT_TYPE_CODE: sObjectTypeCode,
			TARGET_OBJECT_ID: vKey,
			SEMANTIC: sSemantic
		}, "Relations");
	}

	function addAttachment(oNewAttachment) {
		/* jshint validthis: true */
		oNewAttachment.ROLE_TYPE_CODE = "ATTACHMENT";
		this.addChild(oNewAttachment, "Attachments");
	}

	function addInternalAttachment(oNewAttachment) {
		/* jshint validthis: true */
		oNewAttachment.ROLE_TYPE_CODE = "ATTACHMENT";
		this.addChild(oNewAttachment, "InternalAttachments");
	}

	function removeAttachment(iId) {
		/* jshint validthis: true */
		var aAttachment = jQuery.grep(this.getProperty("/Attachments") || [], function(oAttachment) {
			return oAttachment.ATTACHMENT_ID === iId;
		});
		var oAttachment = aAttachment && aAttachment[0];
		if (oAttachment) {
			if (oAttachment.ROLE_TYPE_CODE === "IDEA_TITLE_IMAGE") {
				this.setProperty("/TITLE_IMAGE_ASSIGN_ID", null);
				this.setProperty("/TITLE_IMAGE_ID", null);
			}
			this.removeChild(oAttachment);
		}
		var aInternalAttachment = jQuery.grep(this.getProperty("/InternalAttachments") || [], function(oInternalAttachment) {
			return oInternalAttachment.ID === iId;
		});
		var oInternalAttachment = aInternalAttachment && aInternalAttachment[0];
		if (oInternalAttachment) {
			this.removeChild(oInternalAttachment);
		}
	}

	function resetTitleImages(aAttachment) {
		jQuery.each(aAttachment, function(iIndex, oAttachment) {
			if (oAttachment.ROLE_TYPE_CODE === IdeaAttachmentRoleType.TitleImage) {
				oAttachment.ROLE_TYPE_CODE = IdeaAttachmentRoleType.Standard;
			}
		});
	}

	function removeOldTitleImages(aAttachment) {
		return jQuery.grep(aAttachment, function(oAttachment) {
			return oAttachment.ROLE_TYPE_CODE !== IdeaAttachmentRoleType.TitleImage;
		});
	}

	function setTitleImage(oInput) {
		/* jshint validthis: true */
		var aAllAttachment = this.getProperty("/Attachments");
		var aAttachment = jQuery.grep(aAllAttachment || [], function(oAttachment) {
			return oAttachment.ATTACHMENT_ID === oInput.ATTACHMENT_ID;
		});

		// Remove old title images
		aAllAttachment = removeOldTitleImages(aAllAttachment);

		var oTitleImage = aAttachment && aAttachment[0];
		if (!oTitleImage) {
			var aAllInternalAttachment = this.getProperty("/InternalAttachments");
			var aInternalAttachment = jQuery.grep(aAllInternalAttachment || [], function(oAttachment) {
				return oAttachment.ATTACHMENT_ID === oInput.ATTACHMENT_ID;
			});
			oTitleImage = aInternalAttachment && aInternalAttachment[0];
			if (oTitleImage) {
				oTitleImage = jQuery.extend({}, oTitleImage);
			} else {
				oTitleImage = {};
			}
			oTitleImage.ID = this.getNextHandle();
			aAllAttachment.push(oTitleImage);
		}

		oTitleImage.ATTACHMENT_ID = oInput.ATTACHMENT_ID;
		oTitleImage.FILE_NAME = oInput.FILE_NAME ? oInput.FILE_NAME : oTitleImage.FILE_NAME;
		oTitleImage.MEDIA_TYPE = oInput.MEDIA_TYPE ? oInput.MEDIA_TYPE : oTitleImage.MEDIA_TYPE;
		oTitleImage.ROLE_TYPE_CODE = IdeaAttachmentRoleType.TitleImage;

		this.setProperty("/TITLE_IMAGE_ASSIGN_ID", oTitleImage.ID);
		this.setProperty("/TITLE_IMAGE_ID", oTitleImage.ATTACHMENT_ID);
		this.setProperty("/TITLE_IMAGE_MEDIA_TYPE", oTitleImage.MEDIA_TYPE);
		this.setProperty("/Attachments", aAllAttachment);
	}

	function clearTitleImage() {
		/* jshint validthis: true */
		var aAllAttachment = this.getProperty("/Attachments");
		aAllAttachment = removeOldTitleImages(aAllAttachment);
		this.setProperty("/Attachments", aAllAttachment);
		this.setProperty("/TITLE_IMAGE_ASSIGN_ID", null);
		this.setProperty("/TITLE_IMAGE_ID", null);
		this.setProperty("/TITLE_IMAGE_MEDIA_TYPE", null);
	}

	function hasInitialDescription(sCampaignIdeaDescriptionTemplate) {
		/* jshint validthis: true */
		var sDescription = this.getProperty("/DESCRIPTION");
		var sIdeaDescriptionTemplate = this.getProperty("/IDEA_DESCRIPTION_TEMPLATE") || sCampaignIdeaDescriptionTemplate || "";
		var sIdeaDescriptionTemplateHTML = "<p>" + sIdeaDescriptionTemplate + "</p>";
		return !sDescription || sDescription === "" || sDescription === "<br>" || sDescription === "<div><br></div>" || sDescription ===
			sIdeaDescriptionTemplate || sDescription === sIdeaDescriptionTemplateHTML;
	}

	function isSubmitted() {
		/* jshint validthis: true */
		return (this.getProperty("/SUBMITTED_AT") !== null);
	}

	function _mapType(sType) {
		var AttachmentType = {
			DOCUMENT: "DOCUMENT",
			IMAGE: "IMAGE",
			VIDEO: "VIDEO",
			AUDIO: "AUDIO",
			TEXT: "TEXT",
			ERROR: "ERROR",
			DEFAULT: "DOCUMENT"
		};

		if (sType === AttachmentType.IMAGE || sType.indexOf("image/") === 0) {
			sType = AttachmentType.IMAGE;
		} else if (sType === AttachmentType.VIDEO || sType.indexOf("video/") === 0) {
			sType = AttachmentType.VIDEO;
		} else if (sType === AttachmentType.AUDIO || sType.indexOf("audio/") === 0) {
			sType = AttachmentType.AUDIO;
		} else if (sType === AttachmentType.TEXT || sType.indexOf("text/") === 0) {
			sType = AttachmentType.TEXT;
		} else if (sType === AttachmentType.ERROR) {
			sType = AttachmentType.ERROR;
		} else if (sType === AttachmentType.DOCUMENT) {
			sType = AttachmentType.DOCUMENT;
		} else {
			sType = AttachmentType.DEFAULT;
		}

		return sType;
	}

	function delVotesSimulate() {
		/* jshint validthis: true */
		//check if voting method differs after campaign changed
		var methodchange = this.getProperty("/VOTE_TYPE_CODE") !== this.getProperty("/CAMPAIGN_VOTE_TYPE_CODE");
		var hasvotes = this.getProperty("/VOTE_COUNT") > 0;
		return (methodchange && hasvotes);

	}

	function createWall(oComponent) {
		/* jshint validthis: true */
		var oIdea = this.getData();
		var oModel = this;

		var center = 4900;
		var size = 200;
		var zIndex = 1;
		var row = 0;
		var heightOffset = 0;
		var aWallItem = [];
		var aLinkID = [];

		function addItem(oItem, xOffset, yOffset, width, height) {
			oItem.POSITION_X = center + (xOffset || 0);
			oItem.POSITION_Y = center + (yOffset || 0) + (size * row) + heightOffset;
			oItem.WIDTH = width || size;
			oItem.HEIGHT = height || size;
			oItem.ZINDEX = zIndex;
			aWallItem.push(oItem);
			zIndex++;
			row++;
			if (height) {
				heightOffset += (height - (size / 2));
			}
		}

		function addItems(aItem, xOffset, yOffset, width, height, space) {
			if (aItem.length === 0) {
				return;
			}
			var itemWidth = ((width || size) + (space || 0));
			var totalWidth = aItem.length * itemWidth;
			jQuery.each(aItem, function(iIndex, oItem) {
				oItem.POSITION_X = center + (xOffset || 0) - (totalWidth / 2) + (iIndex + 0.5) * itemWidth;
				oItem.POSITION_Y = center + (yOffset || 0) + (size * row) + heightOffset;
				oItem.WIDTH = width || size;
				oItem.HEIGHT = height || size;
				oItem.ZINDEX = zIndex;
				aWallItem.push(oItem);
				zIndex++;
			});
			row++;
			if (height) {
				heightOffset += (height - (size / 2));
			}
		}

		// Link to Idea
		addItem({
			"WALL_ITEM_TYPE_CODE": "sap.ino.config.LINK",
			"CONTENT": {
				"TEXT": oIdea.NAME || "",
				"ICON": "IDEA",
				"URL": oComponent.getNavigationLink("idea-display", {
					id: this.getKey()
				})
			}
		}, 50);

		// Author
		addItem({
			"WALL_ITEM_TYPE_CODE": "sap.ino.config.PERSON",
			"CONTENT": {
				"NAME": oIdea.SUBMITTER_NAME || "",
				"PHONE": "",
				"EMAIL": oIdea.SUBMITTER_EMAIL || "",
				"ORIGIN_ID": oIdea.SUBMITTER_ID,
				"REQUEST_IMAGE": true
			}
		});

		// Co-Authors
		if (oIdea.Contributors && oIdea.Contributors.length > 0) {
			var aContributor = [];
			jQuery.each(oIdea.Contributors, function(iIndex, oContributor) {
				aContributor.push({
					"WALL_ITEM_TYPE_CODE": "sap.ino.config.PERSON",
					"CONTENT": {
						"NAME": oContributor.NAME || "",
						"PHONE": "",
						"EMAIL": oContributor.EMAIL || "",
						"ORIGIN_ID": oContributor.IDENTITY_ID,
						"REQUEST_IMAGE": true
					}
				});
			});
			addItems(aContributor);
		}

		// Campaign Name
		if (oIdea.CAMPAIGN_NAME) {
			addItem({
				"WALL_ITEM_TYPE_CODE": "sap.ino.config.HEADLINE",
				"CONTENT": {
					"TEXT": oIdea.CAMPAIGN_NAME || "",
					"STYLE": "BRAG",
					"SIZE": "H3"
				}
			}, -25, 50);
		}

		// Description
		if (oIdea.DESCRIPTION) {
			addItem({
				"WALL_ITEM_TYPE_CODE": "sap.ino.config.TEXT",
				"CONTENT": {
					"CAPTION": oIdea.NAME || "",
					"TEXT": oIdea.DESCRIPTION || ""
				}
			}, -275, 0, 800, 400);
		}

		// Tags
		if (oIdea.Tags && oIdea.Tags.length > 0) {
			var aTag = [];
			jQuery.each(oIdea.Tags, function(iIndex, oTag) {
				aTag.push({
					"WALL_ITEM_TYPE_CODE": "sap.ino.config.HEADLINE",
					"CONTENT": {
						"TEXT": oTag.NAME || "",
						"STYLE": "COOL",
						"SIZE": "H5"
					}
				});
			});
			addItems(aTag);
		}

		// Links
		if (oIdea.Links && oIdea.Links.length > 0) {
			var aLink = [];
			jQuery.each(oIdea.Links, function(iIndex, oLink) {
				aLinkID.push(oLink.ID);
				aLink.push({
					"WALL_ITEM_TYPE_CODE": "sap.ino.config.LINK",
					"CONTENT": {
						"TEXT": oLink.LABEL || oLink.URL || "",
						"ICON": "MISC",
						"URL": oLink.URL || ""
					}
				});
			});
			addItems(aLink, 50, -50);
		}

		// Attachments
		if (oIdea.Attachments && oIdea.Attachments.length > 0) {
			var aImage = [];
			var aAttachment = [];
			jQuery.each(oIdea.Attachments, function(iIndex, oAttachment) {
				if (oAttachment.MEDIA_TYPE.indexOf("image/") === 0) {
					aImage.push({
						"WALL_ITEM_TYPE_CODE": "sap.ino.config.IMAGE",
						"CONTENT": {
							"CAPTION": oAttachment.FILE_NAME || "",
							"SHOW_AS_ICON": false
						},
						"Image": [{
							"ATTACHMENT_ID": oAttachment.ATTACHMENT_ID
                        }]
					});
				} else {
					aAttachment.push({
						"WALL_ITEM_TYPE_CODE": "sap.ino.config.ATTACHMENT",
						"CONTENT": {
							"CAPTION": oAttachment.FILE_NAME || "",
							"TYPE": _mapType(oAttachment.MEDIA_TYPE),
							"FILE_NAME": oAttachment.FILE_NAME || ""
						},
						"Attachment": [{
							"ATTACHMENT_ID": oAttachment.ATTACHMENT_ID
                        }]
					});
				}
			});
			addItems(aImage, 0, 0, 0, 0, 50);
			addItems(aAttachment, 0, 50, 0, 0, 50);
		}
		jQuery.sap.require("sap.ino.commons.models.object.Wall");
		var Wall = sap.ino.commons.models.object.Wall;

		var oDeferred = new jQuery.Deferred();
		var that = this;
		var oRequest = Wall.create({
			ID: -1,
			NAME: oIdea.NAME,
			WALL_TYPE_CODE: "sap.ino.config.WALL",
			BACKGROUND_COLOR: oIdea.CAMPAIGN_COLOR || "FFFFFF",
			IDEA_ID: oIdea.ID,
			Items: aWallItem
		});
		oRequest.done(function(oResponse) {
			var iWallID = oResponse.GENERATED_IDS[-1];
			var bCreateLink = false;
			if (Configuration.getCurrentUser().USER_ID === oIdea.SUBMITTER_ID) {
				bCreateLink = true;
			}
			if (oIdea.Contributors && oIdea.Contributors.length > 0) {
				jQuery.each(oIdea.Contributors, function(iIndex, oContributor) {
					if (Configuration.getCurrentUser().USER_ID == oContributor.IDENTITY_ID) {
						bCreateLink = true;
					}
				});
			}
			if (bCreateLink) {
				var aLink = [];
				jQuery.each(aLinkID, function(index, iLinkID) {
					aLink.push({
						ID: iLinkID
					});
				});
				aLink.push({
					ID: -1,
					LABEL: oComponent.getModel("i18n").getResourceBundle().getText("IDEA_OBJECT_TIT_WALL", [oIdea.NAME]),
					URL: oComponent.getNavigationLink("wall", {
						id: iWallID
					})
				});
				that.setProperty("/Links", aLink);
				that.update();
			}

			oDeferred.resolve(iWallID);
		});
		
		oRequest.fail(function(oResponse){
		    oModel.getMessageParser().parse(oResponse);
		});

		return oDeferred.promise();
	}

	return Idea;
});
}; // end of sap/ino/commons/models/object/Idea.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.IdeaComment') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.object.IdeaComment'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/models/object/IdeaComment",[
       "sap/ino/commons/models/aof/ApplicationObject",
       "sap/ino/commons/models/core/ReadSource"
   ], function(ApplicationObject, ReadSource) {
	"use strict";
	return ApplicationObject.extend("sap.ino.commons.models.object.IdeaComment", {
		objectName: "sap.ino.xs.object.idea.Comment",
		readSource: ReadSource.getDefaultAOFSource(),
		invalidation: {
			entitySets: ["IdeaComment"]
		},
		actionImpacts: {
			"del": [{
				"objectName": "sap.ino.commons.models.object.Idea",
				"objectKey": "OBJECT_ID",
				"impactedAttributes": ["COMMENT_COUNT", "FOLLOW"]
			}],
			"create": [{
				"objectName": "sap.ino.commons.models.object.Idea",
				"objectKey": "OBJECT_ID",
				"impactedAttributes": ["COMMENT_COUNT", "FOLLOW"]
			}],
			"delComment": [{
				"objectName": "sap.ino.commons.models.object.Idea",
				"objectKey": "OBJECT_ID",
				"impactedAttributes": ["COMMENT_COUNT", "FOLLOW"]
			}]
		}
	});
});
}; // end of sap/ino/commons/models/object/IdeaComment.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.IdeaFollow') ) {
jQuery.sap.declare('sap.ino.commons.models.object.IdeaFollow'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/models/object/IdeaFollow",[
    "sap/ino/commons/models/aof/ApplicationObject",
    "sap/ino/commons/models/core/ReadSource"
], function(ApplicationObject, ReadSource) {
	"use strict";
	return ApplicationObject.extend('sap.ino.commons.models.object.IdeaFollow', {
        objectName: "sap.ino.xs.object.follow.Follow",
		readSource: ReadSource.getDefaultAOFSource(),
		actionImpacts: {
		    "create":[
		        {
				    "objectName": "sap.ino.commons.models.object.Idea",
				    "objectKey": "OBJECT_ID",
				    "impactedAttributes": ["FOLLOW","NEG_VOTES", "POS_VOTES", "SCORE", "USER_SCORE", "VOTE_COUNT", "VOTE_ID"]
			    }
		    ],
			"del": [
			    {
				    "objectName": "sap.ino.commons.models.object.Idea",
				    "objectKey": "OBJECT_ID",
				    "impactedAttributes": ["FOLLOW","NEG_VOTES", "POS_VOTES", "SCORE", "USER_SCORE", "VOTE_COUNT", "VOTE_ID"]
			    }
			]
		},
		follow: function(objectId, type, value){
		    return !value ? this.modify(value, { OBJECT_ID:objectId, OBJECT_TYPE_CODE:type }) : this.del(value, { OBJECT_ID: objectId, OBJECT_TYPE_CODE: type});
		}
	});
});
}; // end of sap/ino/commons/models/object/IdeaFollow.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.IdeaLatest') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.object.IdeaLatest'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.message.Message'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/models/object/IdeaLatest",[
    "sap/ino/commons/models/aof/ApplicationObject",
    "sap/ino/commons/models/core/ReadSource",
    "sap/ui/core/message/Message",
    "sap/ui/core/MessageType"
], function(ApplicationObject, ReadSource, Message, MessageType) {
    "use strict";

    var IdeaLatest = ApplicationObject.extend("sap.ino.commons.models.object.IdeaLatest", {
        objectName : "sap.ino.xs.object.idea.IdeaLatest",
        readSource : ReadSource.getDefaultAOFSource()
    });
    
    return IdeaLatest;
});
}; // end of sap/ino/commons/models/object/IdeaLatest.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.IdeaObjectIntegration') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.object.IdeaObjectIntegration'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/models/object/IdeaObjectIntegration",[
    "sap/ino/commons/models/aof/ApplicationObject"
], function(ApplicationObject) {
    "use strict";

    var IdeaObjectIntegration = ApplicationObject.extend("sap.ino.commons.models.object.IdeaObjectIntegration", {
        objectName : "sap.ino.xs.object.integration.IdeaObjectIntegration"
    });
    
    return IdeaObjectIntegration;
});
}; // end of sap/ino/commons/models/object/IdeaObjectIntegration.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.IdeaRead') ) {
jQuery.sap.declare('sap.ino.commons.models.object.IdeaRead'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/models/object/IdeaRead",[
    "sap/ino/commons/models/aof/ApplicationObject",
    "sap/ino/commons/models/core/ReadSource"
], function(ApplicationObject, ReadSource) {
	"use strict";
	return ApplicationObject.extend('sap.ino.commons.models.object.IdeaRead', {
        objectName: "sap.ino.xs.object.idea.IdeaRead",
		readSource: ReadSource.getDefaultAOFSource(),
		invalidation : {
            entitySets : ["IdeaRead"]
        },
		actionImpacts: {
		    "markRead":[{
			    "objectName": "sap.ino.commons.models.object.Idea",
			    "objectKey": "IDEA_ID",
			    "impactedAttributes": ["IS_READ", "READ_ID"]
		    }]
		}
	});
});
}; // end of sap/ino/commons/models/object/IdeaRead.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.IdeaVolunteer') ) {
jQuery.sap.declare('sap.ino.commons.models.object.IdeaVolunteer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/models/object/IdeaVolunteer",[
    "sap/ino/commons/models/aof/ApplicationObject",
    "sap/ino/commons/models/core/ReadSource"
], function(ApplicationObject, ReadSource) {
    "use strict";
    
    return ApplicationObject.extend("sap.ino.commons.models.object.IdeaVolunteer", {
        objectName: "sap.ino.xs.object.idea.Volunteer",
        readSource: ReadSource.getDefaultAOFSource(),
        invalidation: {
			entitySets: ["IdeaVolunteers"]
		},
        actionImpacts: {
            "create": [{
                "objectName": "sap.ino.commons.models.object.Idea",
                "objectKey": "IDEA_ID",
                "impactedAttributes": ["VOLUNTEER_ID"]
            }],
            "del": [{
                "objectName": "sap.ino.commons.models.object.Idea",
                "objectKey": "IDEA_ID",
                "impactedAttributes": ["VOLUNTEER_ID"]
            }]
        },
        toggleVolunteer: function(iKey, iIdeaId) {
            return !!iKey ? this.del(iKey, {IDEA_ID: iIdeaId}) : this.create({IDEA_ID: iIdeaId});
        }
    });
});
}; // end of sap/ino/commons/models/object/IdeaVolunteer.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.InternalNote') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.object.InternalNote'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/models/object/InternalNote",[
       "sap/ino/commons/models/aof/ApplicationObject",
       "sap/ino/commons/models/core/ReadSource"
   ], function(ApplicationObject, ReadSource) {
       "use strict";
       return ApplicationObject.extend("sap.ino.commons.models.object.InternalNote", {
          objectName : "sap.ino.xs.object.idea.InternalNote",
          readSource : ReadSource.getDefaultAOFSource(),
          invalidation : {
	            entitySets : ["IdeaInternalNote"]
	        },
		actionImpacts: {
			"del": [{
				"objectName": "sap.ino.commons.models.object.Idea",
				"objectKey": "OBJECT_ID",
				"impactedAttributes": ["INTERNAL_NOTE_COUNT", "INTERNAL_ATTACHMENT_COUNT"]
			}],
			"create": [{
				"objectName": "sap.ino.commons.models.object.Idea",
				"objectKey": "OBJECT_ID",
				"impactedAttributes": ["INTERNAL_NOTE_COUNT", "INTERNAL_ATTACHMENT_COUNT"]
			}],
			"delComment": [{
				"objectName": "sap.ino.commons.models.object.Idea",
				"objectKey": "OBJECT_ID",
				"impactedAttributes": ["INTERNAL_NOTE_COUNT", "INTERNAL_ATTACHMENT_COUNT"]
			}]
		}	        
       });
       
   });
}; // end of sap/ino/commons/models/object/InternalNote.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.MergeConfig') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.object.MergeConfig'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/models/object/MergeConfig",[
    "sap/ino/commons/models/aof/ApplicationObject",
    "sap/ino/commons/models/core/ReadSource"
], function(ApplicationObject, ReadSource) {
	"use strict";
	return ApplicationObject.extend('sap.ino.commons.models.object.MergeConfig', {
        objectName: "sap.ino.xs.object.idea.MergeConfig",
		readSource: ReadSource.getDefaultAOFSource()
	});
});
}; // end of sap/ino/commons/models/object/MergeConfig.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.Notification') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */

jQuery.sap.declare('sap.ino.commons.models.object.Notification'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/models/object/Notification",[
    "sap/ino/commons/models/aof/ApplicationObject"
], function(ApplicationObject) {

    return ApplicationObject.extend("sap.ino.commons.models.object.Notification", {
        objectName : "sap.ino.xs.object.notification.Notification"
    });
});
}; // end of sap/ino/commons/models/object/Notification.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.PersonalizeSetting') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.object.PersonalizeSetting'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.message.Message'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/models/object/PersonalizeSetting",[
    "sap/ino/commons/models/aof/ApplicationObject",
    "sap/ino/commons/models/core/ReadSource",
    "sap/ui/core/message/Message",
    "sap/ui/core/MessageType"
], function(ApplicationObject, ReadSource, Message, MessageType) {
    "use strict";

    var Personalize = ApplicationObject.extend("sap.ino.commons.models.object.PersonalizeSetting", {
        objectName : "sap.ino.xs.object.iam.PersonalizeSetting",
        readSource : ReadSource.getDefaultAOFSource(),
        checkQuickLinkNameValid: checkQuickLinkNameValid
    });
    
    Personalize.defaultPesonalize = {
        IDEA_VIEW: true,
        CAMPAIGN_VIEW: true,
        SCREEN_SIZE: true,
        FILTER: true,
        SIMILAR_IDEA: true,
        FILTER_ACTIVE_IDEA: false,
        REPORT_VIEW: false
    };
    
    function checkQuickLinkNameValid(aData, sName, aStandardName){
        var bValid = true;
        for(var i = 0; i < aData.length; i++){
            if(aData[i].LINK_TEXT === sName || aStandardName.indexOf(sName) >= 0){
                bValid = false;
            }
        }
        return bValid;
    }
    
    return Personalize;
});
}; // end of sap/ino/commons/models/object/PersonalizeSetting.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.Registration') ) {
jQuery.sap.declare('sap.ino.commons.models.object.Registration'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/models/object/Registration",[
    "sap/ino/commons/models/aof/ApplicationObject",
    "sap/ino/commons/models/core/ReadSource"
], function(ApplicationObject, ReadSource) {
	"use strict";
	return ApplicationObject.extend('sap.ino.commons.models.object.Registration', {
        objectName: "sap.ino.xs.object.campaign.Registration",
		readSource: ReadSource.getDefaultAOFSource(),
		actionImpacts: {
		    "create":[
		        {
				    "objectName": "sap.ino.commons.models.object.Campaign",
				    "objectKey": "CAMPAIGN_ID",
				    "impactedAttributes": ["REGISTER_ID", "REGISTER_STATUS", "IS_OPEN_FOR_REGISTRATION"]
			    }
		    ],
		    "update":[
		        {
				    "objectName": "sap.ino.commons.models.object.Campaign",
				    "objectKey": "CAMPAIGN_ID",
				    "impactedAttributes": ["REGISTER_ID", "REGISTER_STATUS"]
			    }
		    ],
			"del": [
			    {
				    "objectName": "sap.ino.commons.models.object.Campaign",
				    "objectKey": "CAMPAIGN_ID",
				    "impactedAttributes": ["REGISTER_ID", "REGISTER_STATUS","IS_OPEN_FOR_REGISTRATION"]
			    }
			]
		},
		Register: function(id, campaignId){
		    return this.modify(id || -1, { CAMPAIGN_ID:campaignId, STATUS:'sap.ino.config.REGISTER_NEW' });
		},
		Approved: function(id){
		    return this.update(id, { STATUS: 'sap.ino.config.REGISTER_APPROVED', REGISTER_ID:id});
		},
		Rejected: function(id,reason){
		    return this.update(id, { STATUS: 'sap.ino.config.REGISTER_REJECTED', REGISTER_ID:id,REASON:reason});
		},
		Leave: function(id, campaignId){
		    return this.del(id, { CAMPAIGN_ID:campaignId });
		}
	});
});
}; // end of sap/ino/commons/models/object/Registration.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.RewardList') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.object.RewardList'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.type.Float'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.Integer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.message.Message'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.ParseException'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/models/object/RewardList",[
    "sap/ino/commons/models/aof/ApplicationObject",
    "sap/ino/commons/models/core/CodeModel",
    "sap/ino/commons/application/Configuration",
    "sap/ui/model/type/Float",
    "sap/ui/model/type/Integer",
    "sap/ui/core/message/Message",
    "sap/ui/core/MessageType",
    "sap/ui/model/ParseException",
    "sap/ino/commons/models/core/ReadSource"
], function(ApplicationObject,
	CodeModel,
	Configuration,
	Float,
	Integer,
	Message,
	MessageType,
	ParseException,
	ReadSource) {
	"use strict";

	var RewardList = ApplicationObject.extend("sap.ino.commons.models.object.RewardList", {
		objectName: "sap.ino.xs.object.reward.RewardList",
		readSource: ReadSource.getDefaultODataSource("IdeaRewardList", {}),
		invalidation: {
			entitySets: ["IdeaRewardList", "RewardSearch", "IdeaMediumBackofficeSearch", "IdeaReward"]
		},
		actionImpacts: {
			"create": [{
				"objectName": "sap.ino.commons.models.object.Idea",
				"objectKey": "IDEA_ID",
				"impactedAttributes": ["CONTRIBUTION_READ_ONLY", "IDEA_PHASE_NEED_REWARD", "IDEA_HAS_REWARDS"]
			}],
			"del": [{
				"objectName": "sap.ino.commons.models.object.Idea",
				"objectKey": "IDEA_ID",
				"impactedAttributes": ["CONTRIBUTION_READ_ONLY", "IDEA_PHASE_NEED_REWARD", "IDEA_HAS_REWARDS"]
			}]
		},
		determinations: {
			onCreate: _determineCreate
		}
	});

	function _determineCreate(oData, oModel) {
		var oCurrentUser = Configuration.getCurrentUser();
		return {
			"CREATED_AT": new Date(),
			"CREATED_BY_NAME": oCurrentUser.NAME,
			"OBJECT_TYPE_CODE": "IDEA",
			"STATUS_CODE": "sap.ino.config.REWARD_DRAFT",
			"OBJECT_ID": oData.OBJECT_ID || 0
		};
	}

	return RewardList;
});
}; // end of sap/ino/commons/models/object/RewardList.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.Tag') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.object.Tag'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/models/object/Tag",[
    "sap/ino/commons/models/aof/ApplicationObject",
    "sap/ino/commons/models/core/ReadSource"
], function(ApplicationObject, ReadSource) {
    "use strict";
    
    return ApplicationObject.extend('sap.ino.commons.models.object.Tag', {
        objectName: "sap.ino.xs.object.tag.Tag",
        readSource: ReadSource.getDefaultODataSource("Tags"), 
        invalidation : {
            entitySets : ["Tags", "SearchTags", "SearchTagsAllFull", "MyTagFollow", "SearchTagsAll"]
        }
    });
});
}; // end of sap/ino/commons/models/object/Tag.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.TagFollow') ) {
jQuery.sap.declare('sap.ino.commons.models.object.TagFollow'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/models/object/TagFollow",[
    "sap/ino/commons/models/aof/ApplicationObject",
    "sap/ino/commons/models/core/ReadSource"
], function(ApplicationObject, ReadSource) {
	"use strict";
	return ApplicationObject.extend('sap.ino.commons.models.object.TagFollow', {
        objectName: "sap.ino.xs.object.follow.Follow",
		readSource: ReadSource.getDefaultAOFSource(),
		actionImpacts: {
		    "create":[
		        {
				    "objectName": "sap.ino.commons.models.object.Tag",
				    "objectKey": "OBJECT_ID",
				    "impactedAttributes": ["FOLLOW"]
			    }
		    ],
			"del": [
			    {
			    	"objectName": "sap.ino.commons.models.object.Tag",
				    "objectKey": "OBJECT_ID",
				    "impactedAttributes": ["FOLLOW"]
			    }
			]
		},
		follow: function(objectId, type, value){
		    return !value ? this.modify(value, { OBJECT_ID:objectId, OBJECT_TYPE_CODE:type }) : this.del(value, { OBJECT_ID: objectId, OBJECT_TYPE_CODE: type});
		}
	});
});
}; // end of sap/ino/commons/models/object/TagFollow.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.User') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.object.User'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/models/object/User",[
    "sap/ino/commons/models/aof/ApplicationObject",
    "sap/ino/commons/models/core/ReadSource"
], function(ApplicationObject, ReadSource) {
    "use strict";
    
    var StaticRoles = {
        CommunityUser        : "COMMUNITY_USER",
        InnovationOfficeUser : "INNOVATION_OFFICE_USER",
        InnovationManager    : "INNOVATION_MANAGER",
        SystemManager        : "INNOVATION_SYSTEM_MANAGER"        	
    };
    
    var User = ApplicationObject.extend("sap.ino.commons.models.object.User", {
        objectName : "sap.ino.xs.object.iam.User",
        readSource : ReadSource.getDefaultODataSource("Identity", {
			excludeNodes: ["MemberOf"]
		}),
        invalidation : {
            entitySets : ["Identity", "SearchIdentity"]
        }
    });
    
    
    User.StaticRoles = StaticRoles;
    
    return User;
});
}; // end of sap/ino/commons/models/object/User.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.UserSettings') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.object.UserSettings'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/models/object/UserSettings",[
    "sap/ino/commons/models/aof/ApplicationObject",
    "sap/ino/commons/models/core/ReadSource"
], function(ApplicationObject, ReadSource) {
    "use strict";

    var AttachmentRole = {
        UserImage: "IDENTITY_IMAGE"
    };
    
    var Theme = {
        HCB : "sap_hcb"
    };

    var Mail = {
        Active : "active",
        Inactive : "inactive"
    };

    var UserSettings = ApplicationObject.extend("sap.ino.commons.models.object.UserSettings", {
        objectName : "sap.ino.xs.object.iam.UserSettings",
        readSource : ReadSource.getDefaultODataSource("Identity", {
            includeNodes: [{
                name: "Settings",
                parentNode: "Root"
            }, {
                name: "Attachments",
                parentNode: "Root"
            }]
        }),
        actions : {
            create : {
                enabledCheck: function() {
                    return false;
                }
            }
        },
        setUserImage: setUserImage,
        clearUserImage: clearUserImage
    });
    
    UserSettings.Mail = Mail;
    UserSettings.Theme = Theme;
	    
    function setUserImage(oInput) {
        /* jshint validthis: true */
        var aAttachments = this.getProperty("/Attachments");
        var oUserImage;
        if (aAttachments === undefined || aAttachments === null || aAttachments.length === 0) {
            oUserImage = {};
            oUserImage.ID = this.getNextHandle();
        } else {
            oUserImage = aAttachments[0];
        }
    
        oUserImage.ATTACHMENT_ID = oInput.ATTACHMENT_ID;
        oUserImage.FILE_NAME = oInput.FILE_NAME;
        oUserImage.MEDIA_TYPE = oInput.MEDIA_TYPE;
        oUserImage.ROLE_TYPE_CODE = AttachmentRole.UserImage;
    
        this.setProperty("/Settings/TITLE_IMAGE_ASSIGN_ID", oUserImage.ID);
        this.setProperty("/Settings/TITLE_IMAGE_ID", oUserImage.ATTACHMENT_ID);
        this.setProperty("/Settings/TITLE_IMAGE_MEDIA_TYPE", oUserImage.MEDIA_TYPE);
        this.setProperty("/Attachments", [oUserImage]);
    }

    function clearUserImage() {
        /* jshint validthis: true */
        this.setProperty("/Attachments", []);
        this.setProperty("/Settings/TITLE_IMAGE_ASSIGN_ID", null);
        this.setProperty("/Settings/TITLE_IMAGE_ID", null);
        this.setProperty("/Settings/TITLE_IMAGE_MEDIA_TYPE", null);
    }
    
    return UserSettings;
});
}; // end of sap/ino/commons/models/object/UserSettings.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.Vote') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.object.Vote'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/models/object/Vote",[
    "sap/ino/commons/models/aof/ApplicationObject",
    "sap/ino/commons/models/core/ReadSource"
], function(ApplicationObject, ReadSource) {
	"use strict";

	var Vote = ApplicationObject.extend("sap.ino.commons.models.object.Vote", {
		objectName: "sap.ino.xs.object.idea.Vote",
		readSource: ReadSource.getDefaultAOFSource(),
		invalidation: {
			entitySets: ["IdeaVote"]
		},
		actionImpacts: {
			"del": [{
				"objectName": "sap.ino.commons.models.object.Idea",
				"objectKey": "IDEA_ID",
				"impactedAttributes": ["NEG_VOTES", "POS_VOTES", "SCORE", "USER_SCORE", "VOTE_COUNT", "VOTE_ID","FOLLOW"]
			}],
			"create": [{
				"objectName": "sap.ino.commons.models.object.Idea",
				"objectKey": "IDEA_ID",
				"impactedAttributes": ["NEG_VOTES", "POS_VOTES", "SCORE", "USER_SCORE", "VOTE_COUNT", "VOTE_ID","FOLLOW"]
			}],
			"update": [{
				"objectName": "sap.ino.commons.models.object.Idea",
				"objectKey": "IDEA_ID",
				"impactedAttributes": ["NEG_VOTES", "POS_VOTES", "SCORE", "USER_SCORE", "VOTE_COUNT", "VOTE_ID","FOLLOW"]
			}]
		}
	});

	Vote.TYPE_STAR = "STAR";
	Vote.TYPE_LIKE = "LIKE";
	Vote.TYPE_LIKE_DISLIKE = "LIKE_DISLIKE";

	Vote.vote = function(iObjectId, iScore, iVoteId, iReasonCode, sReasonComment) {
		if (!iScore) {
			return {
				vote: Vote.del(iVoteId || -1, {
					IDEA_ID: iObjectId
				}),
				mode: "DEL_VOTE"
			};
		} else {
			return {
				vote: Vote.modify(iVoteId || -1, {
					IDEA_ID: iObjectId,
					SCORE: iScore,
					VOTE_REASON: iReasonCode,
					VOTE_COMMENT: sReasonComment
				}),
				mode: "MODIFY_VOTE"
			};
		}
	};

	return Vote;
});
}; // end of sap/ino/commons/models/object/Vote.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.Wall') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.object.Wall'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/models/object/Wall",[
    "sap/ino/commons/models/aof/ApplicationObject",
    "sap/ino/commons/models/core/ReadSource",
    "sap/ino/commons/models/util/WallMapper",
    "sap/ino/commons/models/util/UUID",
    "sap/ino/commons/application/Configuration",
    "sap/ino/commons/models/aof/ApplicationObjectChange"
], function(ApplicationObject, ReadSource, WallMapper, UUID, Configuration, ApplicationObjectChange) {
    "use strict";
    
    var WallMode = {
            Readonly : "Readonly",
            Write : "Write"
    };
    
    var sObjectName = "sap.ino.xs.object.wall.Wall";
    
    var Wall;
    Wall = ApplicationObject.extend("sap.ino.commons.models.object.Wall", {
        objectName : sObjectName,
        readSource : ReadSource.getDefaultAOFSource({
            cache : false
        }),

        invalidation : {
            entitySets : ["Wall", "MyWalls", "WallSearch"]
        },
        
        actionImpacts: {
            "create": [{"objectName": "sap.ino.commons.models.object.Idea",
	                    "objectKey": "IDEA_ID"}]
        },

        determinations : {
            onRead : determineRead,
            onNormalizeData : normalizeData
        },

        constructor : function() {
            ApplicationObject.apply(this, arguments);
            this._wallSessionUUID = UUID.generate();
        },

        process : function(oAjaxSettings) {
            return Wall.processRequest(this, oAjaxSettings);
        },

        getSyncDate : function() {
            return new Date(this.getLastReadDate().getTime() - 2500);
        },
        
        /**
         * Reads wall delta changes compared to last read date
         */
        readDeltaData : function() {
            var oPromise = this.readData({
                cache : false,
                headers : {
                    "wall-last-read" : this.getSyncDate().toUTCString(),
                    "wall-session-uuid" : this._wallSessionUUID
                }
            });
            this._lastReadDate = new Date();
            return oPromise;
        },

        /**
         * Poll wall delta changes compared to last read date
         */
        pollDeltaData : function() {
            var oPromise = jQuery.ajax({
                url : this.getEndpointURL().replace("/wall.xsjs", "/wall_poll.xsjs") + "/" + this.getKey(),
                type : "GET",
                dataType : "json",
                contentType : "application/json",
                cache : false,
                headers : {
                    "wall-last-read" : this.getSyncDate().toUTCString(),
                    "wall-session-uuid" : this._wallSessionUUID
                }
            });
            this._lastReadDate = new Date();
            return oPromise;
        },

        save : function(oSettings) {
            var that = this;
            var oPromise = this.modify(oSettings);
            oPromise.done(function() {
                var oData = that.getData();
                normalizeData(oData, that);
                setWallProperties(oData, that);
                that.setProperty("/WALL_EDITABLE", oData.WALL_EDITABLE);
                that.setProperty("/WALL_ADMINISTRABLE", oData.WALL_ADMINISTRABLE);
                that.setProperty("/CHANGED_AT", (new Date()).toJSON());
            });
            return oPromise;
        },

        /**
         * Stores one or multiple items in the backend.
         * 
         * Make sure to refresh/re-read the Wall if this method was not triggered by a change of the Wall.
         * 
         * @param aItem: the items that have changed 
         * @param bSync: save is triggered sync
         */
        saveItems : function(aItem, bSync, bSupressMapping) {
            var that = this;
            var sJSON = this._stringifyItems(aItem, true, bSupressMapping);
            var oPromise = this.process({
                type : "POST",
                cache : false,
                url : this.getEndpointURL(),
                data : sJSON,
                async : !bSync,
                contentType: "application/json; charset=UTF-8"
            });
            oPromise.done(function(oResponse) {
                that.setProperty("/CHANGED_AT", (new Date()).toJSON());
                var oChange = {
                    object: that.getApplicationObject(),
                    key: that.getProperty("/ID"),
                    dataUpdate: {CHANGED_AT: that.getProperty("/CHANGED_AT")},
                };
                ApplicationObjectChange.fireChange(oChange);
            });
            
            return oPromise;
        },

        /**
         * Deletes one or multiple items in the backend.
         * 
         * Make sure to refresh/re-read the Wall if this method was not triggered by a change of the Wall.
         * 
         * @param aItemId: item ids to be deleted
         */
        deleteItems : function(aItemId) {
            var that = this;
            var sIDs = aItemId.join();
            var oPromise = this.process({
                type : "DELETE",
                cache : false,
                url : this.getEndpointURL(),
                headers : {
                    "wall-wallItemIds" : sIDs
                }
            });
            oPromise.done(function(oResponse){
                var oChange = {
                    object: that.getApplicationObject(),
                    key: that.getProperty("/ID"),
                    dataUpdate: {CHANGED_AT: that.getProperty("/CHANGED_AT")}
                };
                ApplicationObjectChange.fireChange(oChange);
            });
            return oPromise;
        },

        addPermission : function(oNewPermission) {
            var aPermission = this.getProperty("/Permissions");
            var aMatches = jQuery.grep(aPermission, function(oPermission) {
                return oPermission.ID === oNewPermission.ID || oPermission.IDENTITY_ID === oNewPermission.IDENTITY_ID;
            });
            if (aMatches.length === 0) {
                oNewPermission.ID = this.getNextHandle();
                this.oData.Permissions.push(oNewPermission);
                this.oData.Permissions.sort(Wall.fnSortByName);

                this.checkUpdate(true);
                return true;
            }
            return false;
        },

        notifyPermissionUpdated : function(iPermissionId) {
            var aPermission = jQuery.grep(this.getProperty("/Permissions") || [], function(oPermission) {
                return oPermission.ID === iPermissionId;
            });
            return aPermission.length > 0;
        },

        removePermission : function(iPermissionId) {
            var that = this;
            var aPermission = jQuery.grep(this.getProperty("/Permissions") || [], function(oPermission) {
                return oPermission.ID === iPermissionId;
            });
            jQuery.each(aPermission, function(index, oPermission) {
                that.removeChild(oPermission);
            });
            return aPermission.length !== 0;
        },

        setBackgroundAttachmentImage : setBackgroundAttachmentImage,

        clearBackgroundAttachmentImage : clearBackgroundAttachmentImage,

        deltaUpdate : deltaUpdate,

        /**
         * Stringifies items to INO format.
         * 
         * @param vWallItem: items in WALL format
         * @param bIncludeWallId: includes the items with wall id in a object structure
         */
        _stringifyItems : function(vWallItem, bIncludeWallId, bSupressMapping) {
            var that = this;
            var vItem;
            if(bSupressMapping) {
                vItem = vWallItem;
            } else {
                vItem = this._mapWallItemsWallToIno(vWallItem);    
            }
            

            if (bIncludeWallId) {
                if (jQuery.type(vItem) !== "array") {
                    vItem = [vItem];
                }

                var oWall = {
                    ID : this.getKey(),
                    Items : vItem
                };

                return JSON.stringify(oWall);
            } else {
                return JSON.stringify(vItem);
            }
        },

        /**
         * Format one or multiple WALL items to INO format.
         */
        _mapWallItemsWallToIno : function(vWallItem) {
            var that = this;

            if (jQuery.type(vWallItem) == "array") {
                var aWallItems = [];
                vWallItem.forEach(function(oItem) {
                    aWallItems.push(that._mapWallItemsWallToIno(oItem));
                });

                return aWallItems;
            } else {

                return WallMapper.mapItemToIno(vWallItem);
            }
        }
    });

    function determineRead(oData, oWall) {
        jQuery.each(oData.Items || [], function(iIndex, oItem) {
            if (oItem.CHANGED_AT > oData.CHANGED_AT) {
                oData.CHANGED_AT = oItem.CHANGED_AT;
            }
        });
        setWallAggregations(oData, oWall);
        setWallProperties(oData, oWall);
        return oData;
    }

    function setWallAggregations(oData, oWall) {
        oData.Permissions = [].concat(oData.Readers).concat(oData.Writers).concat(oData.Admins);
        oData.Permissions.sort(Wall.fnSortByName);
    }

    function setWallProperties(oData, oWall) {
        oData.WALL_EDITABLE = !oData.IS_LOCKED && oData.IS_EDITABLE === 1;
        oData.WALL_ADMINISTRABLE = !oData.IS_LOCKED && oData.IS_ADMINISTRABLE === 1;
    }

    function deltaUpdate(oData, fnCallback) {
        /* jshint validthis: true */
        if (!oData) {
            return undefined;
        }
        if (oData.ACTION_CODE != "DELETED") {
            var oWallJSON = WallMapper.mapWallFromIno(oData, true);
            if (oData.ITEM_SCOPE) {
                delete oWallJSON.strongestAuth;
            }
            fnCallback(oWallJSON);
            delete oData.ID;
            delete oData.ITEM_SCOPE;
            delete oData.ACTION_CODE;
            oData = jQuery.extend(this.getData(), oData);
            setWallAggregations(oData, this);
            setWallProperties(oData, this);
            this.setData(oData);
            this.setAfterInitChanges();
            return true;
        }
        return false;
    }

    function setBackgroundAttachmentImage(iAttachmentId) {
        /* jshint validthis: true */
        var aBackgroundImage = this.getProperty("/BackgroundImage") || [];
        if (aBackgroundImage.length === 0) {
            aBackgroundImage = [{
                ID : this.getNextHandle()
            }];
        }
        aBackgroundImage[0].ATTACHMENT_ID = iAttachmentId;
        this.setProperty("/BackgroundImage", aBackgroundImage);
        this.setProperty("/BACKGROUND_IMAGE_URL", "");
        this.setProperty("/BACKGROUND_COLOR", "");
        this.setProperty("/BACKGROUND_IMAGE_ZOOM", 100);
        this.setProperty("/BACKGROUND_IMAGE_REPEAT", 0);
        this.setProperty("/BACKGROUND_IMAGE_POSITION_X", 0);
        this.setProperty("/BACKGROUND_IMAGE_POSITION_Y", 0);
    }

    function clearBackgroundAttachmentImage(bExcludeURL) {
        /* jshint validthis: true */
        this.setProperty("/BackgroundImage", []);
        if (!bExcludeURL) {
            this.setProperty("/BACKGROUND_IMAGE_URL", "");
        }
        this.setProperty("/BACKGROUND_IMAGE_ZOOM", null);
        this.setProperty("/BACKGROUND_IMAGE_REPEAT", null);
        this.setProperty("/BACKGROUND_IMAGE_POSITION_X", null);
        this.setProperty("/BACKGROUND_IMAGE_POSITION_Y", null);
    }

    function normalizeData(oData, oWall) {
        var oBeforeData = oWall.getBeforeData();
        oData.Readers = [];
        oData.Writers = [];
        oData.Admins = [];
        jQuery.each(oData.Permissions || [], function(index, oPermission) {
            var aBeforeMatchingPermission = jQuery.grep(oBeforeData.Permissions, function(oBeforePermission) {
                return oBeforePermission.IDENTITY_ID === oPermission.IDENTITY_ID;
            });
            var iId = oPermission.ID;
            if (aBeforeMatchingPermission.length > 0 && aBeforeMatchingPermission[0].ROLE_CODE !== oPermission.ROLE_CODE) {
                iId = oWall.getNextHandle();
            }

            switch (oPermission.ROLE_CODE) {
                case "WALL_READER" :
                    oData.Readers.push({
                        ID : iId,
                        IDENTITY_ID : oPermission.IDENTITY_ID
                    });
                    break;
                case "WALL_WRITER" :
                    oData.Writers.push({
                        ID : iId,
                        IDENTITY_ID : oPermission.IDENTITY_ID
                    });
                    break;
                case "WALL_ADMIN" :
                    oData.Admins.push({
                        ID : iId,
                        IDENTITY_ID : oPermission.IDENTITY_ID
                    });
                    break;
                default:
                    break;
            }
        });
        return oData;
    }

    Wall.readItems = function(aWallId, bAsync) {
        return jQuery.ajax({
            url : Wall.getBackendUrl(),
            headers : {
                "wall-action" : "readItems",
                "wall-wallIds" : aWallId.toString()
            },
            accepts : "application/json",
            async : bAsync !== false,
            cache : false
        });
    };

    Wall.readWalls = function(aWallId, bAsync) {
        return jQuery.ajax({
            url : Wall.getBackendUrl(),
            headers : {
                "wall-action" : "readWalls",
                "wall-wallIds" : aWallId.toString()
            },
            accepts : "application/json",
            async : bAsync !== false,
            cache : false
        });
    };

    Wall.getBackendUrl = function() {
        return Configuration.getBackendRootURL() + Configuration.getApplicationObject(sObjectName);
    };

    Wall.fnSortByName = function(a, b) {
        var aName = a && a.IDENTITY_NAME && a.IDENTITY_NAME.toLowerCase();
        var bName = b && b.IDENTITY_NAME && b.IDENTITY_NAME.toLowerCase();
        return ((aName < bName) ? -1 : ((aName > bName) ? 1 : 0));
    };
    
    Wall.processRequest = function(oWall, oAjaxSettings) {
        var aProcessArguments = [oAjaxSettings];

        if (!oAjaxSettings.headers || !oAjaxSettings.headers["wall-session-uuid"]) {
            if (!oAjaxSettings.headers) {
                oAjaxSettings.headers = {};
            }
            oAjaxSettings.headers["wall-session-uuid"] = oWall._wallSessionUUID || UUID.generate();
        }

        var oPromise;

        if (!oWall._lastProcessPromise) {
            oPromise = ApplicationObject.prototype.process.apply(oWall, aProcessArguments);
        } else {
            var oDeferred = jQuery.Deferred();
            oWall._lastProcessPromise.hasSuccessor = true;
            oWall._lastProcessPromise.always(function() {
                ApplicationObject.prototype.process.apply(oWall, aProcessArguments).always(function(oResponse, sSuccess, oAjaxResponse) {
                    oDeferred.resolve(oResponse, sSuccess, oAjaxResponse);
                }).fail(function(oResponse) {
                    oDeferred.reject(oResponse);
                });
            });
            oPromise = oDeferred.promise();
        }
        oWall._lastProcessPromise = oPromise;
        oPromise.always(function() {
            if (oWall._lastProcessPromise && !oWall._lastProcessPromise.hasSuccessor) {
                oWall._lastProcessPromise = null;
            }
        });

        return oPromise;     
    };
    
    return Wall;
});
}; // end of sap/ino/commons/models/object/Wall.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.WallItem') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.object.WallItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/models/object/WallItem",[
    "sap/ino/commons/models/aof/ApplicationObject",
    "sap/ino/commons/models/core/ReadSource",
    "sap/ino/commons/models/util/UUID",
    "sap/ino/commons/models/object/Wall"
], function(ApplicationObject, ReadSource, UUID, Wall) {
    "use strict";
    
    var sObjectName = "sap.ino.xs.object.wall.WallItem";

    var WallItem = ApplicationObject.extend("sap.ino.commons.models.object.WallItem", {
        objectName : sObjectName,
        readSource : function(vKey, sObjectName, oMetadata, oAdditionalSettings) {
            oAdditionalSettings = oAdditionalSettings || {};
            oAdditionalSettings.headers = oAdditionalSettings.headers || {};
            oAdditionalSettings.headers["wall-action"] = "readItemById";
            oAdditionalSettings.headers["wall-wallItemId"] = vKey;
            return ReadSource.getDefaultAOFSource({
                cache : false
            })("", sObjectName, oMetadata, oAdditionalSettings);
        },
        
        invalidation : {
            entitySets : ["WallItems"]
        },

        constructor : function() {
            ApplicationObject.apply(this, arguments);
            this._wallSessionUUID = UUID.generate();
        },

        process : function(oAjaxSettings) {
            if(oAjaxSettings.type === "DELETE") {
                var iSplitIdx = oAjaxSettings.url.lastIndexOf("/");
                oAjaxSettings.headers["wall-wallItemIds"] = oAjaxSettings.url.substring(iSplitIdx + 1);
                oAjaxSettings.url = oAjaxSettings.url.substring(0,iSplitIdx);
            } else {    
                var oItemData = JSON.parse(oAjaxSettings.data);
                oItemData.CONTENT = JSON.parse(oItemData.CONTENT);
                oAjaxSettings.data = JSON.stringify({
                    ID : oItemData.WALL_ID,
                    Items: [oItemData]
                });
            }
            return Wall.processRequest(this, oAjaxSettings);
        },
   
        getChangeRequest : function(bComplete) {
            var oCurrentData = jQuery.extend({}, this.getData());
            oCurrentData.CONTENT = JSON.stringify(oCurrentData.CONTENT); 
            var oChangeRequest = this.calculateChangeRequest(this.getApplicationObject(), this._oBeforeData || {}, oCurrentData, bComplete, this);
            oChangeRequest.WALL_ID = oCurrentData.WALL_ID;
            return oChangeRequest;
        }
    });
 
    return WallItem;
});
}; // end of sap/ino/commons/models/object/WallItem.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.communityUser') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.object.communityUser'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/models/object/communityUser",[
    "sap/ino/commons/models/aof/ApplicationObject",
    "sap/ino/commons/models/core/ReadSource"
], function(ApplicationObject, ReadSource) {
    "use strict";
    
    var StaticRoles = {
        CommunityUser        : "COMMUNITY_USER",
        InnovationOfficeUser : "INNOVATION_OFFICE_USER",
        InnovationManager    : "INNOVATION_MANAGER",
        SystemManager        : "INNOVATION_SYSTEM_MANAGER"        	
    };
    
    var User = ApplicationObject.extend("sap.ino.commons.models.object.communityUser", {
        objectName : "sap.ino.xs.object.iam.CommunityUserGroup",
        readSource : ReadSource.getDefaultODataSource("Identity", {
			excludeNodes: ["MemberOf"]
		}),
        invalidation : {
            entitySets : ["Identity", "SearchIdentity"]
        }
    });
    
    
    User.StaticRoles = StaticRoles;
    
    return User;
});
}; // end of sap/ino/commons/models/object/communityUser.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.util.ExportPPT') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.util.ExportPPT'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
jQuery.sap.require('sap.ui.thirdparty.jszip'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/util/ExportPPT",[
    "sap/ino/commons/application/Configuration",
    "sap/ino/commons/models/core/CodeModel",
    "sap/ui/core/format/DateFormat",
    "sap/ino/controls/util/ColorSupport",
    "sap/ino/controls/IdeaStatusType",
    "sap/ui/thirdparty/jszip"
], function(Configuration, CodeModel, DateFormat, ColorSupport, IdeaStatusType, JSZip) {
    "use strict";

    var RegularExpressions = {
        CAMPAIGN_TEXT:           new RegExp("{{CAMPAIGN_TEXT}}", "g"),
        CAMPAIGN_NAME:           new RegExp("{{CAMPAIGN_NAME}}", "g"),
        CAMPAIGN_COLOR:          new RegExp("{{CAMPAIGN_COLOR}}", "g"),
        CAMPAIGN_TEXT_COLOR:     new RegExp("{{CAMPAIGN_TEXT_COLOR}}", "g"),
        IDEA_TITLE:              new RegExp("{{IDEA_TITLE}}", "g"),
        IDEA_NAME:               new RegExp("{{IDEA_NAME}}", "g"),
        STATUS_TEXT:             new RegExp("{{STATUS_TEXT}}", "g"),
        IDEA_STATUS:             new RegExp("{{IDEA_STATUS}}", "g"),
        PHASE_TEXT:              new RegExp("{{PHASE_TEXT}}", "g"),
        IDEA_PHASE:              new RegExp("{{IDEA_PHASE}}", "g"),
        IDEA_SHORT_DESCRIPTION:  new RegExp("{{IDEA_SHORT_DESCRIPTION}}", "g"),
        AUTHOR_TEXT:             new RegExp("{{AUTHOR_TEXT}}", "g"),
        AUTHOR_NAME:             new RegExp("{{AUTHOR_NAME}}", "g"),
        COACH_TEXT:              new RegExp("{{COACH_TEXT}}", "g"),
        COACH_NAME:              new RegExp("{{COACH_NAME}}", "g"),
        COMMENT_COUNT:           new RegExp("{{COMMENT_COUNT}}", "g"),
        EVALUATION_COUNT:        new RegExp("{{EVALUATION_COUNT}}", "g"),
        VOTE_COUNT:              new RegExp("{{VOTE_COUNT}}", "g"),
        IDEA_LINK:               new RegExp("%7b%7bIDEA_LINK%7d%7d", "g"),
        IDEA_TITLE_IMAGE:        new RegExp("{{IDEA_TITLE_IMAGE}}", "g"),
        STATUS_CHANGE_REASON_TEXT: new RegExp("{{REASON_TEXT}}", "g"),
        STATUS_CHANGE_REASON:    new RegExp("{{CHANGE_REASON}}", "g"), 
        
        XML_TAG:                 new RegExp("<[^>]*>", "g"),
        XML_FUNCTIONAL_CHAR:     new RegExp("&[a-z]*;", "g"),
        AMPERSAND:               new RegExp("&", "g"),
        BACKSPACE:               new RegExp("nbsp;", "g"),
        LOWER_THAN:              new RegExp("<", "g"),
        GREATER_THAN:            new RegExp(">", "g"),
        
        EMPTY_NAMESPACE:         new RegExp(" xmlns=\"\"", "g")
        
        // RESP_VALUE:             new RegExp("{{RESP_VALUE}}","g"),
        // RESP_NAME:              new RegExp("{{RESP_NAME}}","g"),
        // CHANGE_REASON_CODE:     new RegExp("{{CHANGE_REASON_CODE}}","g"),
        // CHANGE_REASON_CODE_TEXT:new RegExp("{{CHANGE_REASON_CODE_TEXT}}","g"),
        // IDEA_SHORT_DESCRIPTION_TEXT:new RegExp("{{IDEA_SHORT_DESCRIPTION_TEXT}}","g")
    };
    
    var Formatter = {
        STATUS_FORMATTER: CodeModel.getFormatter("sap.ino.xs.object.status.Status.Root"),
        PHASE_FORMATTER:  CodeModel.getFormatter("sap.ino.xs.object.campaign.Phase.Root"),
        VALUE_OPTION: CodeModel.getFormatter("sap.ino.xs.object.basis.ValueOptionList.ValueOptions")
    };
    
    var StatusColors = {
        INACTIVE: "E5E5E5",
        ACTIVE: "048E3E",
        STOPPED: "9F1313"
    };
    
    var _XMLSerializer = new XMLSerializer();

    return {
        _getText : function() {
            if (this.i18n) {
                return this.i18n.getResourceBundle().getText.apply(this.i18n.getResourceBundle(), arguments);
            }
            return "";
        },
        
        _getValidXMLString : function(sString) {
            return sString.replace(RegularExpressions.AMPERSAND, "&amp;")
                          .replace(RegularExpressions.LOWER_THAN, "&lt;")
                          .replace(RegularExpressions.GREATER_THAN, "&gt;")
                          .replace(RegularExpressions.XML_FUNCTIONAL_CHAR, " ")
                          .replace(RegularExpressions.BACKSPACE, "\r\n")
                          .replace(RegularExpressions.XML_TAG, "");
        },
        
        _getTemplate : function() {
            var oDeferred = new jQuery.Deferred();

            var sPath = Configuration.getBackendRootURL() + "/" +
                        Configuration.getSystemSetting("sap.ino.config.URL_PATH_XS_PPTX_TEMPLATE_DOWNLOAD") + "?FILE_NAME=IdeaExport";
            
            var oRequest = new XMLHttpRequest();
        
            oRequest.open("GET", sPath, true);
        
            if(oRequest.responseType){
                oRequest.responseType = "arraybuffer";
            }
            if(oRequest.overrideMimeType){
                oRequest.overrideMimeType("text/plain; charset=x-user-defined");
            }
        
            oRequest.onreadystatechange = function() {
                if (oRequest.readyState === 4) {
                    if(oRequest.status === 200) {
                        oDeferred.resolve(oRequest.response);
                    } else {
                        oDeferred.reject(oRequest.response);
                    }
                }
            };
            oRequest.send();
            
            return oDeferred;
        },
        
        _getProcessIndicator : function(oIdeaData, oPlaceholder) {
            var sImage = "";

            var iSteps = oIdeaData.STEPS;
            var iCurrentStep = oIdeaData.STEP;

            var iLineHeight = Math.round(oPlaceholder.cy / 5);
            var iLinePosY = oPlaceholder.y + Math.round(oPlaceholder.cy / 5) * 2;

            var fStepX = 0;
            if (iSteps >= 2) {
                fStepX = Math.round((oPlaceholder.cx - oPlaceholder.cy) / (iSteps - 1));
            }
            
            var iProgressLineWidth = ((iCurrentStep < 0) ? 0 : iCurrentStep * fStepX);
            if (iCurrentStep >= iSteps) {
                iProgressLineWidth = oPlaceholder.cx - oPlaceholder.cy;
            }

            var iObjectIndex = 100;
            function line(iX, iLineWidth, sColor) {
                sImage += '<p:sp><p:nvSpPr><p:cNvPr id="' + (iObjectIndex++) + '" name="Rectangle ' + (iObjectIndex++) + '"/><p:cNvSpPr/><p:nvPr/></p:nvSpPr>' +
                          '<p:spPr><a:xfrm><a:off x="' + iX + '" y="' + iLinePosY + '"/><a:ext cx="' + iLineWidth + '" cy="' + iLineHeight + 
                                '"/></a:xfrm><a:prstGeom prst="rect"><a:avLst/></a:prstGeom><a:solidFill><a:srgbClr val="' + sColor +'"/></a:solidFill><a:ln><a:noFill/></a:ln></p:spPr>' +
                          '<p:style><a:lnRef idx="2"><a:schemeClr val="accent1"><a:shade val="50000"/></a:schemeClr></a:lnRef><a:fillRef idx="1"><a:schemeClr val="accent1"/>' +
                                '</a:fillRef><a:effectRef idx="0"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="lt1"/></a:fontRef></p:style>' +
                          '<p:txBody><a:bodyPr rtlCol="0" anchor="ctr"/><a:lstStyle/><a:p><a:pPr algn="ctr"/><a:endParaRPr lang="en-US" dirty="0"/></a:p></p:txBody></p:sp>';
            }

            function circle(iX, sColor) {
                sImage += '<p:sp><p:nvSpPr><p:cNvPr id="' + iObjectIndex++ + '" name="Oval ' + iObjectIndex++ + '"/><p:cNvSpPr/><p:nvPr/></p:nvSpPr>' +
                            '<p:spPr><a:xfrm><a:off x="' + iX + '" y="' + oPlaceholder.y + '"/><a:ext cx="' + oPlaceholder.cy + '" cy="' + oPlaceholder.cy + '"/></a:xfrm><a:prstGeom prst="ellipse">' +
                            '<a:avLst/></a:prstGeom><a:solidFill><a:srgbClr val="' + sColor + '"/></a:solidFill><a:ln><a:noFill/></a:ln></p:spPr>' +
                            '<p:style><a:lnRef idx="2"><a:schemeClr val="accent1"><a:shade val="50000"/></a:schemeClr></a:lnRef><a:fillRef idx="1"><a:schemeClr val="accent1"/>' +
                            '</a:fillRef><a:effectRef idx="0"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="lt1"/></a:fontRef></p:style>' +
                            '<p:txBody><a:bodyPr rtlCol="0" anchor="ctr"/><a:lstStyle/><a:p><a:pPr algn="ctr"/><a:endParaRPr lang="en-US"/></a:p></p:txBody></p:sp>';
            }
            
            var sStatusColor = StatusColors.ACTIVE;
            if (oIdeaData.STATUS === IdeaStatusType.Discontinued || oIdeaData.STATUS === IdeaStatusType.Merged) {
                sStatusColor = StatusColors.STOPPED;
            }
            
            if (iSteps > 1) {
                if(iProgressLineWidth > 0) {
                    line(Math.round(oPlaceholder.x + oPlaceholder.cy / 2), iProgressLineWidth, sStatusColor);
                }
                if(oPlaceholder.cx - oPlaceholder.cy - iProgressLineWidth > 0) {
                    line(Math.round(oPlaceholder.x + oPlaceholder.cy / 2 + iProgressLineWidth), oPlaceholder.cx - oPlaceholder.cy - iProgressLineWidth, StatusColors.INACTIVE);
                }
            }
            
            for (var i = 0; i < iSteps; i ++) {
                var x = oPlaceholder.x + i * fStepX;
                var sStepStatusColor = sStatusColor;
                if (i > iCurrentStep || oIdeaData.STATUS === IdeaStatusType.Draft) {
                    sStepStatusColor = StatusColors.INACTIVE;
                }
                circle(x, sStepStatusColor);
            }
            
            return sImage;
        },
        
        _addImageTypesToContentTypes : function (oContentTypesContent){
            var oElement;
            if(jQuery(oContentTypesContent).find('[Extension="png"]').length === 0) {
                oElement = oContentTypesContent.createElement("Default");
                jQuery(oElement).attr("Extension","png").attr("ContentType","image/png");
                oContentTypesContent.documentElement.appendChild(oElement);
            }
            if(jQuery(oContentTypesContent).find('[Extension="jpeg"]').length === 0){
                oElement = oContentTypesContent.createElement("Default");
                jQuery(oElement).attr("Extension","jpeg").attr("ContentType","image/jpeg");
                oContentTypesContent.documentElement.appendChild(oElement);
            }
            if(jQuery(oContentTypesContent).find('[Extension="jpg"]').length === 0) {
                oElement = oContentTypesContent.createElement("Default");
                jQuery(oElement).attr("Extension","jpg").attr("ContentType","application/octet-stream");
                oContentTypesContent.documentElement.appendChild(oElement);
            }
            return "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>" +
                    _XMLSerializer.serializeToString(oContentTypesContent.documentElement).replace(RegularExpressions.EMPTY_NAMESPACE, "");
        },
        
        _stringToArrayBuffer : function(sString) {
            var oArrayBuffer = new ArrayBuffer(sString.length);
            var oBufferView = new Uint8Array(oArrayBuffer);
        
            for (var i = 0, strLen = sString.length; i < strLen; i++) {
                oBufferView[i] = sString.charCodeAt(i);
            }
            return oArrayBuffer;
        },
        
        _getImagePlaceholderDimensions : function(sSlideContent, sImagePlaceholder) {
            var oSlideContent = jQuery.parseXML(sSlideContent);
            var aElements = oSlideContent.getElementsByTagNameNS("*","sp");
            var oPlaceholder;
            jQuery.each(aElements, function(iIndex, oElement) {
                var aSubElements = oElement.getElementsByTagNameNS("*","t");
                if(aSubElements && aSubElements.length > 0 && oElement.getElementsByTagNameNS("*","t")[0].firstChild.data === sImagePlaceholder) {
                    oPlaceholder = oElement;
                    return false;
                }
            });
            if(oPlaceholder) {
                var oDimensionElement = oPlaceholder.getElementsByTagNameNS("*","xfrm")[0];
                var oOffset = oDimensionElement.getElementsByTagNameNS("*","off")[0];
                var oExtension = oDimensionElement.getElementsByTagNameNS("*","ext")[0];
    
                return {
                    name: sImagePlaceholder,
                    x: parseInt(oOffset.getAttribute("x"), 10),
                    y: parseInt(oOffset.getAttribute("y"), 10),
                    cx: parseInt(oExtension.getAttribute("cx"), 10),
                    cy: parseInt(oExtension.getAttribute("cy"), 10)
                };
            }
        },
        
        _addImage : function(iImageId, oPlaceholder, sFileExtension, sSlideContent, sRelsSlideContent) {
            var sImageElement =
                '<p:pic>' +
                    '<p:nvPicPr>' +
                        '<p:cNvPr id="' + iImageId + '" name="Picture ' + iImageId + '"/>' +
                        '<p:cNvPicPr>' + 
                            '<a:picLocks noChangeAspect="1"/>' +
                        '</p:cNvPicPr>' +
                        '<p:nvPr/>' +
                    '</p:nvPicPr>' +
                    '<p:blipFill>' +
                        '<a:blip r:embed="rId' + iImageId + '" cstate="print">' +
                            '<a:extLst>' +
                                '<a:ext uri="{28A0092B-C50C-407E-A947-70E740481C1C}">' +
                                    '<a14:useLocalDpi xmlns:a14="http://schemas.microsoft.com/office/drawing/2010/main" val="0"/>' +
                                '</a:ext>' +
                            '</a:extLst>' +
                        '</a:blip>' +
                        '<a:stretch>' +
                            '<a:fillRect/>' +
                        '</a:stretch>' +
                    '</p:blipFill>' +
                    '<p:spPr>' +
                        '<a:xfrm>' +
                            '<a:off x="' + oPlaceholder.x + '" y="' + oPlaceholder.y + '"/>' +
                            '<a:ext cx="' + oPlaceholder.cx + '" cy="' + oPlaceholder.cy + '"/>' +
                        '</a:xfrm>' +
                        '<a:prstGeom prst="rect">' +
                            '<a:avLst/>' +
                        '</a:prstGeom>' +
                    '</p:spPr>' +
                '</p:pic>';
            sSlideContent = sSlideContent.replace(new RegExp("<p:sp>(?:(?!<p:sp>).)*Rectangle(?:(?!<p:sp>).)*" + oPlaceholder.name + ".*?<\/p:sp>", "g"), sImageElement);

            var oRelsImageElement = jQuery.parseXML(
                '<Relationship Id="rId' + iImageId +
                    '" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/image" Target="../media/' +
                    'image' + iImageId + "." + sFileExtension + '"/>'
            );
            var oRelsSlideContent = jQuery.parseXML(sRelsSlideContent);
            oRelsSlideContent.documentElement.appendChild(oRelsImageElement.documentElement);
            
            return {
                SlideContent: sSlideContent,
                RelsSlideContent: "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>" + 
                                    _XMLSerializer.serializeToString(oRelsSlideContent.documentElement).replace(RegularExpressions.EMPTY_NAMESPACE, "")
            };
        },
        
        _addProcessIndicator : function(oIdeaData, sSlideContent) {
            var oPlaceholder = this._getImagePlaceholderDimensions(sSlideContent, "{{PROCESS_INDICATOR}}");
            if(!oPlaceholder) {
                return sSlideContent;
            }
            var sImage = this._getProcessIndicator(oIdeaData, oPlaceholder);
            sSlideContent = sSlideContent.replace(new RegExp("<p:sp>(?:(?!<p:sp>).)*Rectangle(?:(?!<p:sp>).)*" + oPlaceholder.name + ".*?<\/p:sp>", "g"), sImage);
            
            return sSlideContent;
        },
        
        _addTitelImage : function(oIdeaData, oZip, iImageId, sSlideContent, sRelsSlideContent) {
            if( oIdeaData.TITLE_IMAGE_ID ){
                var oPlaceholder = this._getImagePlaceholderDimensions(sSlideContent, "{{IDEA_TITLE_IMAGE}}");
                if(oPlaceholder) {
                    var sFileExtension = oIdeaData.TITLE_IMAGE_MEDIA_TYPE.indexOf("/") > -1 ? oIdeaData.TITLE_IMAGE_MEDIA_TYPE.split("/")[1] : oIdeaData.TITLE_IMAGE_MEDIA_TYPE;

                    var oDeferred = new jQuery.Deferred();
                    var oRequest = new XMLHttpRequest();
                    oRequest.onreadystatechange = function() {
                        if (oRequest.readyState === 4) {  // Makes sure the document is ready to parse.
                            if (oRequest.status === 200) {  // Makes sure it's found the file.
                                var oImage = oRequest.response || oRequest.responseText;
                                oZip.file("ppt/media/image" + iImageId + "." + sFileExtension, oImage);
                                oDeferred.resolve();
                            } else {
                                oDeferred.resolve();
                            }
                        }
                    };
                    var sAttachmentURL = Configuration.getBackendRootURL() + "/" +
                        Configuration.getSystemSetting("sap.ino.config.URL_PATH_XS_ATTACHMENT_TITLE_IMAGE_DOWNLOAD") + "/" + oIdeaData.TITLE_IMAGE_ID;
                    oRequest.open("GET", sAttachmentURL, true);
                    oRequest.responseType = "arraybuffer";
                    oRequest.send(null);
                    
                    var oResult = this._addImage(iImageId, oPlaceholder, sFileExtension, sSlideContent, sRelsSlideContent);
                    oResult.ZIP = oZip;
                    oResult.ImageDeferred = oDeferred;
                    return oResult;
                }
            }
            
            var sImageText; 
            var iBlank = oIdeaData.NAME.indexOf(" ");
            if(iBlank > -1) {
                sImageText = oIdeaData.NAME.substring(0, Math.min(iBlank, 8));
                var sSecondWord = oIdeaData.NAME.substring(iBlank + 1);
                iBlank = sSecondWord.indexOf(" ");
                if(iBlank > -1) {
                    sImageText = sImageText + "\n" + sSecondWord.substring(0, Math.min(iBlank, 8));
                } else {
                    sImageText = sImageText + "\n" + sSecondWord.substring(0, 8);
                }
            } else {
                sImageText = oIdeaData.NAME.substring(0,8);
            }
            sImageText =  this._getValidXMLString(sImageText);
                

            return {
                ZIP: oZip,
                SlideContent: sSlideContent.replace(RegularExpressions.IDEA_TITLE_IMAGE, sImageText.toUpperCase()),
                RelsSlideContent: sRelsSlideContent
            };
        },
        
        
        _getMaxSlideId : function(aRelationships){
            var iMaxSlideId = 1;
            
            jQuery.each(aRelationships, function(iIndex, sRelationship) {
                var sId = jQuery(sRelationship).attr('Id');
                try {
                    var iId = parseInt(sId.substring(3), 10);
                    iMaxSlideId = iMaxSlideId < iId ? iId : iMaxSlideId;
                } catch(e) {
                }
            });

            return iMaxSlideId;
        },
        
        /**
         * Export all data for current control bindings as file
         * 
         */
        convertToFormatPPTX : function(aExportData) {
            var oDeferred = jQuery.Deferred();
            var oTemplateDeferred = this._getTemplate();
            
            var that = this;
            
            oTemplateDeferred.done(function(oTemplate) {
                try {
                    var oZip = JSZip(oTemplate);
                    
                    var sSlideContentTemplate = oZip.file("ppt/slides/slide1.xml").asText();
                    var aSlideContentPlaceHolder = sSlideContentTemplate.match(/{{\w*}}/g);
        	        oZip.remove("ppt/slides/slide1.xml");

                    var sRelsSlideTemplate = oZip.file("ppt/slides/_rels/slide1.xml.rels").asText();
                    oZip.remove("ppt/slides/_rels/slide1.xml.rels");

                    var oContentTypesContent = jQuery.parseXML(oZip.file("[Content_Types].xml").asText());
                    var oContentTypesContentTypes = oContentTypesContent.getElementsByTagName("Types")[0];
                    var oContentTypesContentSlide = jQuery(oContentTypesContent).find("[PartName='/ppt/slides/slide1.xml']")[0];
                    oContentTypesContentTypes.removeChild(oContentTypesContentSlide);

                    var sPresentationXmlContent = oZip.file("ppt/presentation.xml").asText();

                    var oPresentationXmlRelsContent = jQuery.parseXML(oZip.file("ppt/_rels/presentation.xml.rels").asText());
                    var oPresentationXmlRelsContentRelationships = oPresentationXmlRelsContent.getElementsByTagName("Relationships")[0];
                    var oPresentationXmlRelSlide = jQuery(oPresentationXmlRelsContentRelationships).find("[Target='slides/slide1.xml']")[0];
                    oPresentationXmlRelsContentRelationships.removeChild(oPresentationXmlRelSlide);
                    var iSlideIndex = that._getMaxSlideId(oPresentationXmlRelsContentRelationships.childNodes) + 1;

                    var sCampaignText = that._getText("LIST_TIT_FILTER_CAMPAIGN_HEADER");
                    var sIdeaTitleText = that._getText("LIST_TIT_FILTER_IDEA_HEADER");
                    var sPhaseText  = that._getText("LIST_TIT_FILTER_PHASE_HEADER");
                    var sStatusText = that._getText("LIST_TIT_FILTER_STATUS_HEADER");
                    var sAuthorText = that._getText("LIST_TIT_FILTER_AUTHOR_HEADER");
                    var sCoachText  = that._getText("LIST_TIT_FILTER_COACH_HEADER");
                    var sStatusChangeReasonText = that._getText("IDEA_LIST_FLD_STATUS_CHANGE_REASON");
                    
                    var aImageDeferred = [];
                    
                    // var testA = {};
                    // jQuery.each(aSlideContentPlaceHolder, function(iIndex, sSlideContentPlaceHolder){
                    //     switch(sSlideContentPlaceHolder){
                    //         case "{{IDEA_NAME}}":
                    //             testA[sSlideContentPlaceHolder] = that._getValidXMLString;
                    //             break;
                    //         default:
                    //             break;
                    //     }
                    // });
                    
                    

                    
                    //as IE corrupts the XML when using the XMLSerializer we need to use the string concat fallback
                    var sNewPresentationSlides = "";
                    var iObjectIndex = 400;
                    jQuery.each(aExportData, function(iIndex, oIdeaData) {
                        var sSlideContent = sSlideContentTemplate;
                        var sRelsSlideContent = sRelsSlideTemplate;
                        
                        var sShortDescription = oIdeaData.SHORT_DESCRIPTION || "";
                        if(sShortDescription.length === 500) {
                            sShortDescription += "...";
                        }
                        sShortDescription = that._getValidXMLString(sShortDescription);
                        
                        var sIdeaLink = window.location.protocol + "//" +
                                            window.location.host +
                                            window.location.pathname +
                                            "#/idea/" + oIdeaData.ID;
                        var sCampaignColor = oIdeaData.CAMPAIGN_COLOR || "ffffff";
                        var sCampaignTextColor = ColorSupport.calculateMediaTextColor(sCampaignColor.substr(0, 2), sCampaignColor.substr(2, 2), sCampaignColor.substr(4, 2)).slice(1);

                        jQuery.each(aSlideContentPlaceHolder, function(iPlaceHolderIndex, sSlideContentPlaceHolder){
                            switch(sSlideContentPlaceHolder){
                                case "{{IDEA_NAME}}":
                                    sSlideContent = sSlideContent.replace(new RegExp(sSlideContentPlaceHolder, "g"), that._getValidXMLString(oIdeaData.NAME));
                                    break;
                                default:
                                    break;
                            }
                        });
                        

                        sSlideContent = sSlideContent.replace(RegularExpressions.CAMPAIGN_TEXT, sCampaignText);
                        sSlideContent = sSlideContent.replace(RegularExpressions.IDEA_TITLE, sIdeaTitleText);
                        sSlideContent = sSlideContent.replace(RegularExpressions.PHASE_TEXT, sPhaseText);
                        sSlideContent = sSlideContent.replace(RegularExpressions.STATUS_TEXT, sStatusText);
                        sSlideContent = sSlideContent.replace(RegularExpressions.COACH_TEXT, sCoachText);
                        sSlideContent = sSlideContent.replace(RegularExpressions.AUTHOR_TEXT, sAuthorText);
                        sSlideContent = sSlideContent.replace(RegularExpressions.IDEA_SHORT_DESCRIPTION, sShortDescription);
                        // sSlideContent = sSlideContent.replace(RegularExpressions.IDEA_NAME, that._getValidXMLString(oIdeaData.NAME));
                        sSlideContent = sSlideContent.replace(RegularExpressions.IDEA_PHASE, Formatter.PHASE_FORMATTER(oIdeaData.PHASE));
                        sSlideContent = sSlideContent.replace(RegularExpressions.IDEA_STATUS, Formatter.STATUS_FORMATTER(oIdeaData.STATUS));
                        sSlideContent = sSlideContent.replace(RegularExpressions.CAMPAIGN_NAME, that._getValidXMLString(oIdeaData.CAMPAIGN_NAME));
                        sSlideContent = sSlideContent.replace(RegularExpressions.COACH_NAME, oIdeaData.COACH_NAME || "");
                        sSlideContent = sSlideContent.replace(RegularExpressions.AUTHOR_NAME, oIdeaData.SUBMITTER_NAME);
                        sSlideContent = sSlideContent.replace(RegularExpressions.CAMPAIGN_COLOR, sCampaignColor.toUpperCase());
                        sSlideContent = sSlideContent.replace(RegularExpressions.CAMPAIGN_TEXT_COLOR, sCampaignTextColor.toUpperCase());
                        sSlideContent = sSlideContent.replace(RegularExpressions.STATUS_CHANGE_REASON_TEXT, sStatusChangeReasonText);
                        sSlideContent = sSlideContent.replace(RegularExpressions.STATUS_CHANGE_REASON, Formatter.VALUE_OPTION(oIdeaData.REASON_CODE));
                        
                        sRelsSlideContent = sRelsSlideContent.replace(RegularExpressions.IDEA_LINK, sIdeaLink);
                        
                        var oResult = that._addTitelImage(oIdeaData, oZip, iObjectIndex, sSlideContent, sRelsSlideContent);
                        oZip = oResult.ZIP;
                        sSlideContent = oResult.SlideContent;
                        sRelsSlideContent = oResult.RelsSlideContent;
                        if(oResult.ImageDeferred) {
                            aImageDeferred.push(oResult.ImageDeferred);
                            iObjectIndex++;
                        }
                        sSlideContent = that._addProcessIndicator(oIdeaData, sSlideContent);

                        oZip.file("ppt/slides/slide" + iSlideIndex + ".xml", sSlideContent);
                        oZip.file("ppt/slides/_rels/slide" + iSlideIndex + ".xml.rels", sRelsSlideContent);
                        
                        var oNewContentTypesContentSlide = oContentTypesContentSlide.cloneNode();
                        jQuery(oNewContentTypesContentSlide).attr("PartName", "/ppt/slides/slide" + iSlideIndex + ".xml");
                        oContentTypesContentTypes.appendChild(oNewContentTypesContentSlide);
                        
                        var iCurrentObjectIndex = iObjectIndex++;
                        sNewPresentationSlides = sNewPresentationSlides + "<p:sldId id=\"" + iObjectIndex++ + "\" r:id=\"rId" + iCurrentObjectIndex + "\"/>";
                        
                        var oNewRelationship = oPresentationXmlRelSlide.cloneNode();
                        jQuery(oNewRelationship).attr("Id", "rId" + iCurrentObjectIndex).attr("Target", "slides/slide" + iSlideIndex + ".xml");
                        oPresentationXmlRelsContentRelationships.appendChild(oNewRelationship);
                        
                        iSlideIndex++;
                    });
                    
                    oZip.remove("[Content_Types].xml");
                    var sContentTypesContent = that._addImageTypesToContentTypes(oContentTypesContent);
                    oZip.file("[Content_Types].xml", sContentTypesContent);
                    
                    oZip.remove("ppt/presentation.xml");
                    sPresentationXmlContent = sPresentationXmlContent.replace(new RegExp("<p:sldId [^>]*(r:)?id[^>]*(r:)?id[^>]*\/>", "g"), sNewPresentationSlides);
                    oZip.file("ppt/presentation.xml", sPresentationXmlContent);
                    
                    oZip.remove("ppt/_rels/presentation.xml.rels");
                    oZip.file("ppt/_rels/presentation.xml.rels",
                                    "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>" + _XMLSerializer.serializeToString(oPresentationXmlRelsContent.documentElement));
                    
                    jQuery.when.apply(jQuery, aImageDeferred).then(function() {
                        oDeferred.resolve(oZip.generate({type:"blob"}));
                    });
                } catch(e) {
                    oDeferred.reject(e.toString());
                }
            });
            return oDeferred.promise();
        }
    };
});
}; // end of sap/ino/commons/util/ExportPPT.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.util.ReportUtil') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.util.ReportUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/util/ReportUtil",[
    "sap/ino/commons/models/core/CodeModel",
    "sap/ino/commons/application/Configuration"
], function(CodeModel, Configuration) {
	"use strict";

	var ReportUtil = {};

	ReportUtil.ReportViewType = {
		Graphical: "GRAPHIC",
		Table: "TABLE"
	};

	ReportUtil.getViewConfiguration = function(oConfiguration) {
		return oConfiguration.Views[oConfiguration.SelectedView];
	};

	ReportUtil.getPropertyVisibility = function(oViewConfiguration, sProperty) {
		if (oViewConfiguration.Dimensions.indexOf(sProperty) > -1 ||
			(oViewConfiguration.SecondaryDimensions &&
				oViewConfiguration.SecondaryDimensions.indexOf(sProperty) > -1) ||
			oViewConfiguration.Measures.indexOf(sProperty) > -1 ||
			(oViewConfiguration.SecondaryMeasures &&
				oViewConfiguration.SecondaryMeasures.indexOf(sProperty) > -1)) {
			return true;
		}
		return false;
	};

	ReportUtil.createFilter = function(oConfiguration, bParameterFilter, bViewFilter) {
		bParameterFilter = bParameterFilter === undefined ? true : bParameterFilter;
		bViewFilter = bViewFilter === undefined ? true : bViewFilter;

		var oViewConfiguration = this.getViewConfiguration(oConfiguration);
		var aFilter = [];
		if (bParameterFilter && oConfiguration.Parameters) {
			var aParameter = oConfiguration.Parameters;
			jQuery.each(aParameter, function(iIndex, oParameter) {
				var aParameterFilter = [];
				for (var i = 0; i < oParameter.Selection.length; i++) {
					aParameterFilter.push(new sap.ui.model.Filter(oParameter.Key, "EQ", oParameter.Selection[i]));
				}
				if (aParameterFilter.length > 0) {
					aFilter.push(new sap.ui.model.Filter(aParameterFilter, false));
				}
			});
		}
		if (bViewFilter &&
			oViewConfiguration.Filter !== null &&
			oViewConfiguration.Filter !== undefined) {
			for (var sFilterProperty in oViewConfiguration.Filter) {
				var sFilterValue = oViewConfiguration.Filter[sFilterProperty];
				var oViewFilter = new sap.ui.model.Filter(sFilterProperty, "EQ", sFilterValue);
				aFilter.push(oViewFilter);
			}
		}
		return aFilter;
	};

	ReportUtil.checkMandatoryParameters = function(oConfiguration) {
		if (!oConfiguration.Parameters) {
			return true;
		}

		var bMandatoryParametersMaintained = true;
		jQuery.each(oConfiguration.Parameters, function(iIndex, oParameter) {
			if (oParameter.Mandatory === true &&
				(oParameter.Selection === undefined ||
					oParameter.Selection === null ||
					oParameter.Selection.length === 0)) {
				bMandatoryParametersMaintained = false;
				return;
			}
		});
		return bMandatoryParametersMaintained;
	};

	ReportUtil.getRequestedAttributes = function(oViewConfiguration, bGraphic) {
		var aRequestedAttributes = [];

		if (bGraphic &&
			oViewConfiguration.Graphic &&
			oViewConfiguration.Graphic === "map") {
			aRequestedAttributes.push(oViewConfiguration.Map.Longitude);
			aRequestedAttributes.push(oViewConfiguration.Map.Latitude);
			aRequestedAttributes.push(oViewConfiguration.Map.Granularity);
		}
		aRequestedAttributes = aRequestedAttributes.concat(oViewConfiguration.Dimensions);
		if (oViewConfiguration.SecondaryDimensions) {
			aRequestedAttributes = aRequestedAttributes.concat(oViewConfiguration.SecondaryDimensions);
		}
		aRequestedAttributes = aRequestedAttributes.concat(oViewConfiguration.Measures);
		if (oViewConfiguration.SecondaryMeasures) {
			aRequestedAttributes = aRequestedAttributes.concat(oViewConfiguration.SecondaryMeasures);
		}
		if (oViewConfiguration.Sorters && oViewConfiguration.Sorters.length >= 1) {
			jQuery.each(oViewConfiguration.Sorters, function(index, oSorter) {
				if (aRequestedAttributes.indexOf(oSorter.columnKey) === -1) {
					aRequestedAttributes.unshift(oSorter.columnKey);
				}
			});
		}
		return aRequestedAttributes;
	};

	ReportUtil.parseConfigToObject = function(oReport) {
		//needs a complete Report Object as input and returns a complete report Object
		if (oReport.CONFIG !== undefined && oReport.CONFIG !== null) {
			if (typeof oReport.CONFIG === "string") {
				//oReport.CONFIG = oReport.CONFIG.replace(/""/g,"\"").replace(/"{/g,"{").replace(/}"/g,"}");
				oReport.CONFIG = JSON.parse(oReport.CONFIG);
			}
		} else {
			//nothing else to do
			return oReport;
		}

		if (oReport.CAMPAIGN_ID) {
			//force the single value parameter selection
			//make sure the Parameters section is there
			if (oReport.CONFIG.Parameters && oReport.CONFIG.Parameters.Campaign) {
				oReport.CONFIG.Parameters.Campaign.Selection = [oReport.CAMPAIGN_ID];
				oReport.CONFIG.Parameters.Campaign.SelectionString = oReport.CAMPAIGN_NAME;
			}
		}
		var fnGetText = sap.ino.commons.models.core.CodeModel.getFormatter("sap.ino.xs.object.analytics.ReportTemplate.Root");

		if (!oReport.CONFIG.Title) {
			if (oReport.REPORT_TEMPLATE_CODE) {
				oReport.CONFIG.Title = fnGetText(oReport.REPORT_TEMPLATE_CODE);
			} else if (oReport.CODE) {
				oReport.CONFIG.Title = fnGetText(oReport.CODE);
			} else if (oReport.DEFAULT_TEXT) {
				oReport.CONFIG.Title = oReport.DEFAULT_TEXT;
			}
		}
		if (!oReport.CONFIG.Description) {
			if (oReport.REPORT_TEMPLATE_CODE) {
				oReport.CONFIG.Description = fnGetText(oReport.REPORT_TEMPLATE_CODE);
			} else if (oReport.CODE) {
				oReport.CONFIG.Description = fnGetText(oReport.CODE);
			} else if (oReport.DEFAULT_LONG_TEXT) {
				oReport.CONFIG.Description = oReport.DEFAULT_LONG_TEXT;
			}
		}

		if (oReport.CONFIG.Views) {
			ReportUtil.deleteSorterInConfig(oReport.CONFIG);
		}
		return oReport;
	};

	ReportUtil.deleteSorterInConfig = function(oConfig) {
		if (oConfig && oConfig.Views) {
			jQuery.each(oConfig.Views, function(index, view) {
				if (view.Sorter) {
					view.Sorters = [{
						columnKey: view.Sorter.Path,
						operation: view.Sorter.Descending ? "Descending" : "Ascending"
					}];
					delete view.Sorter;
				}
			});
		}
	};

	ReportUtil.parseConfigToString = function(oReport) {
		//needs a complete Report Object as input and returns a complete report Object
		if (oReport.CONFIG !== undefined && oReport.CONFIG !== null) {
			oReport.CAMPAIGN_ID = null;
			if (oReport.CONFIG.Parameters) {
				var aCampaignSelection = oReport.CONFIG.Parameters.Campaign.Selection;
				if (aCampaignSelection !== undefined &&
					aCampaignSelection !== null &&
					aCampaignSelection.length === 1) {
					oReport.CAMPAIGN_ID = parseInt(aCampaignSelection[0], 10);
				}
			}
			if (typeof oReport.CONFIG === "object") {
				oReport.CONFIG = JSON.stringify(oReport.CONFIG);
			}
		}
		return oReport;
	};

	ReportUtil.getAnnotationXML = function(oConfiguration) {
		var sOdataPath = oConfiguration.ODataPath || Configuration.getApplicationPath("sap.ino.config.URL_PATH_OD_ANALYTICS");

		var oViewConfiguration = oConfiguration.Views[oConfiguration.SelectedView];
		var sChartType;
		try {
			sChartType = oViewConfiguration.Chart.Type.split("/")[1];
			sChartType = sChartType.charAt(0).toUpperCase() + sChartType.slice(1);
		} catch (e) {
			sChartType = "Column";
		}

		var sXML = "<?xml version=\"1.0\" encoding=\"utf-8\"?>" +
			"<edmx:Edmx xmlns:edmx=\"http://docs.oasis-open.org/odata/ns/edmx\" Version=\"4.0\">" +
			"<edmx:Reference Uri=\"/" + sOdataPath + "/$metadata\">" +
			"<edmx:Include Alias=\"ANALYTICSODATA\" Namespace=\"sap.ino.rest\" />" +
			"</edmx:Reference>" +
			"<edmx:DataServices>" +
			"<Schema xmlns=\"http://docs.oasis-open.org/odata/ns/edm\" Namespace=\"sap.ino.rest\">" +
			"<Annotations Target=\"sap.ino.rest." + oConfiguration.DataSource + "Type\">" +
			"<Annotation Term=\"com.sap.vocabularies.UI.v1.Chart\">" +
			"<Record>" +
			"<PropertyValue Property=\"Title\" String=\"" + oViewConfiguration.DisplayName + "\" />" +
			"<PropertyValue Property=\"ChartType\" EnumMember=\"com.sap.vocabularies.UI.v1.ChartType/" + sChartType + "\" />" +
			"<PropertyValue Property=\"Dimensions\">" +
			"<Collection>";
		jQuery.each(oViewConfiguration.Dimensions, function(iIndex, sDimension) {
			sXML +=
				"<PropertyPath>" + sDimension + "</PropertyPath>";
		});
		if (oViewConfiguration.SecondaryDimensions) {
			jQuery.each(oViewConfiguration.SecondaryDimensions, function(iIndex, sDimension) {
				sXML +=
					"<PropertyPath>" + sDimension + "</PropertyPath>";
			});
		}
		sXML +=
			"</Collection>" +
			"</PropertyValue>" +
			"<PropertyValue Property=\"Measures\">" +
			"<Collection>";
		jQuery.each(oViewConfiguration.Measures, function(iIndex, sMeasure) {
			sXML +=
				"<PropertyPath>" + sMeasure + "</PropertyPath>";
		});
		if (oViewConfiguration.SecondaryMeasures) {
			jQuery.each(oViewConfiguration.SecondaryMeasures, function(iIndex, sMeasure) {
				sXML +=
					"<PropertyPath>" + sMeasure + "</PropertyPath>";
			});
		}
		sXML +=
			"</Collection>" +
			"</PropertyValue>" +
			"</Record>" +
			"</Annotation>" +
			"</Annotations>" +
			"</Schema>" +
			"</edmx:DataServices>" +
			"</edmx:Edmx>";
		return sXML;
	};

	return ReportUtil;
});
}; // end of sap/ino/commons/util/ReportUtil.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.util.SmartControl') ) {
jQuery.sap.declare('sap.ino.commons.util.SmartControl'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ListItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/util/SmartControl",[
    "sap/ui/base/ManagedObject",
    "sap/ino/commons/models/aof/MetaModel",
    "sap/ino/commons/models/core/CodeModel",
    "sap/ino/commons/util/UIObjectConfig",
    "sap/ui/core/ListItem",
    "sap/m/Label"
], function(ManagedObject, MetaModel, CodeModel, UIObjectConfig, ListItem, Label) {
    "use strict";

    /**
     * @class
     * Smart Control Support
     */
    var SmartControl = function() {
        throw "May not be instantiated directly";
    };

    function getAttributePath(sNodeName, sAttributeName) {
        if (!sNodeName || sNodeName === "Root") {
            return "/" + sAttributeName;
        } else {
            return "/" + sNodeName + "/0/" + sAttributeName;
        }                
    }
    
    function getBindingPath(sModelName, sNodeName, sAttributeName) {
        if (sModelName === "data" || !sNodeName || sNodeName === "Root") {
            return sModelName + ">" + sAttributeName;
        } else {
            return sModelName + ">" + sNodeName + "/0/" + sAttributeName;    
        }
    }
    
    function getAttributeMetadata(sObjectName, sNodeName, sAttributeName, sAnnotationPath) {
        if (sAnnotationPath) {
            return MetaModel.getProperty("/" + sObjectName + "/nodes/" + sNodeName + "/attributes/" + sAttributeName + "/" + sAnnotationPath.replace(/\./, "/"));
        } else {
            return MetaModel.getProperty("/" + sObjectName + "/nodes/" + sNodeName + "/attributes/" + sAttributeName);    
        }        
    }
    
    function getObjectMetaPath(sModelName, sNodeName, sAttributeName, sAnnotationPath) {
        return sModelName + ">/meta/nodes/" + sNodeName + "/attributes/" + sAttributeName + "/" + sAnnotationPath.replace(/\./, "/");
    }
    
    function getObjectPropertyPath(sModelName, sNodeName, sAttributeName, sAnnotationPath) {
        return sModelName + ">/property/nodes/" + sNodeName + "/attributes/" + sAttributeName + "/" + sAnnotationPath.replace(/\./, "/");
    }
    
    SmartControl.getCodeFormatter = function(sObjectName, sNodeName, sAttributeName) {
        var sCode = getAttributeMetadata(sObjectName, sNodeName, sAttributeName, "foreignKeyTo");
        return CodeModel.getFormatter(sCode);
    };

    SmartControl.getCodeLongTextFormatter = function(sObjectName, sNodeName, sAttributeName) {
        var sCode = getAttributeMetadata(sObjectName, sNodeName, sAttributeName, "foreignKeyTo");
        return CodeModel.getLongTextFormatter(sCode);
    };

    SmartControl.getValueOptionListFormatter = function(sObjectName, sNodeName, sAttributeName) {
        var sValueOptionList = getAttributeMetadata(sObjectName, sNodeName, sAttributeName, "customProperties.valueOptionList");
        var sCode = "sap.ino.xs.object.basis.ValueOptionList.Root_" + sValueOptionList;
        return CodeModel.getFormatter(sCode);
    };

    SmartControl.getValueOptionListLongTextFormatter = function(sObjectName, sNodeName, sAttributeName) {
        var sValueOptionList = getAttributeMetadata(sObjectName, sNodeName, sAttributeName, "customProperties.valueOptionList");
        var sCode = "sap.ino.xs.object.basis.ValueOptionList.Root_" + sValueOptionList;
        return CodeModel.getLongTextFormatter(sCode);
    };
    
    SmartControl.getOpenObjectFormatter = function(oController, sObjectName, sNodeName, sAttributeName) {
        var sForeignKeyTo = getAttributeMetadata(sObjectName, sNodeName, sAttributeName, "foreignKeyTo");
        var oUIObjectConfigDefinition = UIObjectConfig.getDefinition(sForeignKeyTo);
        return function(vKey) {
            if (vKey && 
                oUIObjectConfigDefinition.navigation && 
                oUIObjectConfigDefinition.navigation.path && 
                oUIObjectConfigDefinition.navigation.key && 
                oController.getOwnerComponent()) {
                var oParameter = {};
                oParameter[oUIObjectConfigDefinition.navigation.key] = vKey;
                return oController.getOwnerComponent().getNavigationLink(oUIObjectConfigDefinition.navigation.path, oParameter);
            } else {
                return "javascript:void(0);";
            }
        };
    };
    
    SmartControl.getQuickViewPressedHandler = function(oController, sModelName, sObjectName, sNodeName, sAttributeName) {
        var sForeignKeyTo = getAttributeMetadata(sObjectName, sNodeName, sAttributeName, "foreignKeyTo");
        var oUIObjectConfigDefinition = UIObjectConfig.getDefinition(sForeignKeyTo);
        var oQuickView;
        return function(oEvent) {
            if (!oUIObjectConfigDefinition.quickView) {
                return;
            }
            var oSource = oEvent.getSource();
            if (oSource) {
                var vForeignKey = oSource.getBindingContext(sModelName) && 
                                  oSource.getBindingContext(sModelName).getProperty(sAttributeName);
                if (vForeignKey !== undefined && !oQuickView) {
                    oQuickView = sap.ui.xmlview({
                        viewName : oUIObjectConfigDefinition.quickView
                    });
                    oController.getView().addDependent(oQuickView);
                }
                if (oQuickView && oQuickView.getController()) {
                    oQuickView.getController().open(oSource, vForeignKey);    
                }
            }
        };
    };

    SmartControl.bindToCode = function(oController, oControl, sModelName, sObjectName, sNodeName, sAttributeName) {
        var bRequired = getAttributeMetadata(sObjectName, sNodeName, sAttributeName, "required");
        var sCode = getAttributeMetadata(sObjectName, sNodeName, sAttributeName, "foreignKeyTo");
        var bNoEmptyCode = getAttributeMetadata(sObjectName, sNodeName, sAttributeName, "customProperties.noEmptyCode");
        _bindToCode(oController, oControl, sModelName, sObjectName, sNodeName, sAttributeName, sCode, !bRequired && !bNoEmptyCode);
    };

    SmartControl.bindToValueOptionList = function(oController, oControl, sModelName, sObjectName, sNodeName, sAttributeName) {
        var bRequired = getAttributeMetadata(sObjectName, sNodeName, sAttributeName, "required");
        var sValueOptionList = getAttributeMetadata(sObjectName, sNodeName, sAttributeName, "customProperties.valueOptionList");
        var bNoEmptyCode = getAttributeMetadata(sObjectName, sNodeName, sAttributeName, "customProperties.noEmptyCode");
        var sCode = "sap.ino.xs.object.basis.ValueOptionList.Root_" + sValueOptionList;
        _bindToCode(oController, oControl, sModelName, sObjectName, sNodeName, sAttributeName, sCode, !bRequired && !bNoEmptyCode);
    };
    
    function _bindToCode(oController, oControl, sModelName, sObjectName, sNodeName, sAttributeName, sCode, bIncludeEmptyCode) {
        if (oControl.getMetadata().getAllProperties().selectedKey) {
            if (!oControl.getBindingInfo("selectedKey")) {
                var oItemTemplate = new ListItem({
                    key : {
                        path : "code>CODE"
                    },
                    text : {
                        path : "code>CODE",
                        formatter : CodeModel.getFormatter(sCode)
                    },
                    tooltip : {
                        path : "code>CODE",
                        formatter : CodeModel.getLongTextFormatter(sCode)
                    }
                });
                oControl.bindProperty("selectedKey", {
                    path : getBindingPath(sModelName, sNodeName, sAttributeName)
                });
                oControl.bindAggregation("items", {
                    path : "code>/" + sCode,
                    template : oItemTemplate,
                    sorter: { path: 'CODE' },
                    parameters : bIncludeEmptyCode ? {
                        includeEmptyCode : true
                    } : undefined
                });
            }
        } else if (oControl.getMetadata().getAllProperties().text) {
            if (!oControl.getBindingInfo("text")) {
                oControl.bindProperty("text", {
                    path : getBindingPath(sModelName, sNodeName, sAttributeName),
                    formatter : CodeModel.getFormatter(sCode)
                });
            }
        }
    };

    SmartControl.bindToForeignKey = function(oController, oControl, sModelName, sObjectName, sNodeName, sAttributeName) {
        var oDataModel = oController.getModel("data") || (oController.getOwnerComponent() && oController.getOwnerComponent().getModel("data")) || oControl.getModel("data");
        var sForeignKeyTo = getAttributeMetadata(sObjectName, sNodeName, sAttributeName, "foreignKeyTo");
        var oUIObjectConfigDefinition = UIObjectConfig.getDefinition(sForeignKeyTo);
        if (oControl.getMetadata().getAllProperties().value) {
            if (!oControl.getBindingInfo("value")) {
                var sAttributePath = getAttributePath(sNodeName, sAttributeName);
                oControl.bindProperty("value", {
                    path : getBindingPath(sModelName, sNodeName, sAttributeName),
                    formatter : function(vValue) {
                        var sResult = "";
                        if (vValue) {
                            jQuery.ajax({
                                url : oDataModel.sServiceUrl + "/" + oUIObjectConfigDefinition.instancePath + "(" + vValue + ")" + "/" + oUIObjectConfigDefinition.selectionField + "/$value",
                                async: false,
                                success : function(sData) {
                                    sResult = sData;
                                }
                            });
                        }
                        return sResult;
                    }
                });
                oControl.setShowSuggestion(true);
                oControl.bindProperty("placeholder", "i18n>GENERIC_CONTROL_TYPE_TO_SELECT");
                oControl.setFilterFunction(function(sValue, oItem) {
                    return true;
                });
                oControl.attachSuggest(function(oEvent) {
                    var sValue = oEvent.getParameter("suggestValue");
                    var oTemplate = new ListItem({
                        text : "{data>" + oUIObjectConfigDefinition.selectionField + "}",
                        additionalText : "{data>" + oUIObjectConfigDefinition.secondarySelectionField + "}",
                        key : "{data>" + oUIObjectConfigDefinition.selectionKey + "}"
                    });
                    oEvent.getSource().bindAggregation("suggestionItems", {
                        path : "data>" + UIObjectConfig.getSearchPath(sForeignKeyTo, sValue),
                        template : oTemplate,
                        parameters : oUIObjectConfigDefinition.parameters
                    });
                });
                oControl.attachLiveChange(function(oEvent) {
                    oControl.getModel(sModelName).setProperty(sAttributePath, null);
                });
                oControl.attachSuggestionItemSelected(function(oEvent) {
                    var oSelectedItem = oEvent.getParameters().selectedItem;
                    if (!oSelectedItem) {
                        var aResult = jQuery.grep(oControl.getSuggestionItems(), function(oSuggestionItem) {
                            return oSuggestionItem.getText() === oControl.getValue();
                        });
                        if (aResult.length > 0) {
                            oSelectedItem = aResult[0];
                        }
                    }
                    if (oSelectedItem) {
                        var vKey = oSelectedItem && parseInt(oSelectedItem.getKey(), 10);
                        oControl.getModel(sModelName).setProperty(sAttributePath, vKey);
                        var sName = oSelectedItem.getText();
                        oControl.setValue(sName);
                    } else {
                        oControl.setValue("");
                    }
                    oControl.focus();
                });
                oControl.attachSubmit(function(oEvent) {
                    var oSelectedItem;
                    var aResult = jQuery.grep(oControl.getSuggestionItems(), function(oSuggestionItem) {
                        return oSuggestionItem.getText() === oEvent.getParameter("value");
                    });
                    if (aResult.length > 0) {
                        oSelectedItem = aResult[0];
                    }
                    if (oSelectedItem) {
                        var vKey = oSelectedItem && parseInt(oSelectedItem.getKey(), 10);
                        oControl.getModel(sModelName).setProperty(sAttributePath, vKey);
                    } else {
                        oControl.getModel(sModelName).setProperty(sAttributePath, null);
                        oControl.setValue("");
                    }
                    oControl.focus();
                });
                oControl.addEventDelegate({
                    onfocusout : function(oEvent) {
                        if (oControl.getModel(sModelName).getProperty(sAttributePath) === null) {
                            var oSelectedItem;
                            var aResult = jQuery.grep(oControl.getSuggestionItems(), function(oSuggestionItem) {
                                return oSuggestionItem.getText() === oControl.getValue();
                            });
                            if (aResult.length > 0) {
                                oSelectedItem = aResult[0];
                            }
                            if (oSelectedItem) {
                                var vKey = oSelectedItem && parseInt(oSelectedItem.getKey(), 10);
                                oControl.getModel(sModelName).setProperty(sAttributePath, vKey);
                            } else {
                                oControl.setValue("");
                            }
                        }
                    }
                });
            }
        } else if (oControl.getMetadata().getAllProperties().text) {
            if (!oControl.getBindingInfo("text")) {
                oControl.bindProperty("text", {
                    path : getBindingPath(sModelName, sNodeName, sAttributeName),
                    formatter : function(vValue) {
                        var sResult = "";
                        if (vValue) {
                            jQuery.ajax({
                                url : oDataModel.sServiceUrl + "/" + oUIObjectConfigDefinition.instancePath + "(" + vValue + ")" + "/" + oUIObjectConfigDefinition.selectionField + "/$value",
                                async: false,
                                success : function(sData) {
                                    sResult = sData;
                                }
                            });
                        }
                        return sResult;
                    }
                });
            }
            if (typeof oControl.attachPress === "function" && oUIObjectConfigDefinition.quickView) {
                oControl.attachPress(SmartControl.getQuickViewPressedHandler(oController, sModelName, sObjectName, sNodeName, sAttributeName));
            } else if (oControl.getMetadata().getAllProperties().href && !oControl.getBindingInfo("href")) {
                if (oUIObjectConfigDefinition.navigation && 
                    oUIObjectConfigDefinition.navigation.path && 
                    oUIObjectConfigDefinition.navigation.key) {
                    oControl.bindProperty("href", {
                        path : getBindingPath(sModelName, sNodeName, sAttributeName),
                        formatter : SmartControl.getOpenObjectFormatter(oController, sObjectName, sNodeName, sAttributeName) 
                    });
                }
            }
        }
    };
        
    SmartControl.bindAll = function(oController, oControl, sModelName, sObjectName, sNodeName) {

        function fnFindObjects(oObject, sModelName, sObjectName, sNodeName) {
            for (var n in oObject.mAggregations) {
                var a = oObject.mAggregations[n];
                if (jQuery.isArray(a)) {
                    for (var i = 0; i < a.length; i++) {
                        fnVisitObject(a[i], sModelName, sObjectName, sNodeName);
                    }
                } else if (a instanceof ManagedObject) {
                    fnVisitObject(a, sModelName, sObjectName, sNodeName);
                }
            }
        }
        
        function fnVisitObject(oControl, sModelName, sObjectName, sNodeName) {
            if (oControl.data("aofModel")) {
                sModelName = oControl.data("aofModel"); 
            }
            if (oControl.data("aofObject")) {
                sObjectName = oControl.data("aofObject"); 
            }
            if (oControl.data("aofNode")) {
                sNodeName = oControl.data("aofNode"); 
            }
            SmartControl.bind(oController, oControl, sModelName, sObjectName, sNodeName);
            fnFindObjects(oControl, sModelName, sObjectName, sNodeName);
        }

        fnVisitObject(oControl, sModelName, sObjectName, sNodeName);
    };

    SmartControl.bind = function(oController, oControl, sModelName, sObjectName, sNodeName) {
        if (!oControl.data("aofAttribute")) {
            return;
        }
        var i18nModel = oController.getModel("i18n") || (oController.getOwnerComponent() && oController.getOwnerComponent().getModel("i18n")) || oControl.getModel("i18n");
        var i18n;
        if (i18nModel) {
            i18n = i18nModel.getResourceBundle();
        }
        if (oControl.data("aofModel")) {
            sModelName = oControl.data("aofModel"); 
        }
        sModelName = sModelName || "data";
        if (oControl.data("aofObject")) {
            sObjectName = oControl.data("aofObject"); 
        }
        if (oControl.data("aofNode")) {
            sNodeName = oControl.data("aofNode"); 
        }
        sNodeName = sNodeName || "Root";
        var sAttributeName = oControl.data("aofAttribute");
        var bUseValue = oControl.data("aofUseValue");
        var bLabelColon = oControl.data("aofColon");
        if (oControl.getMetadata().getAllProperties().required && sModelName !== "data") { 
            oControl.bindProperty("required", {
                path : getObjectMetaPath(sModelName, sNodeName, sAttributeName, "required")
            });
        }
        if (i18n && typeof oControl.setTooltip === "function") {
            oControl.setTooltip(i18n.getText(sObjectName + "." + sNodeName + "." + sAttributeName));  
        }
        var sForeignKeyTo = getAttributeMetadata(sObjectName, sNodeName, sAttributeName, "foreignKeyTo");
        if (sForeignKeyTo && 
           (oControl.getMetadata().getAllProperties().value || oControl.getMetadata().getAllProperties().selectedKey ||  
           (oControl.getMetadata().getAllProperties().text && !(oControl instanceof Label && !bUseValue))))  {
            if (!!UIObjectConfig.getDefinition(sForeignKeyTo)) {
                SmartControl.bindToForeignKey(oController, oControl, sModelName, sObjectName, sNodeName, sAttributeName);
            } else {
                SmartControl.bindToCode(oController, oControl, sModelName, sObjectName, sNodeName, sAttributeName);
            }
        } else {
            var sValueOptionList = getAttributeMetadata(sObjectName, sNodeName, sAttributeName, "customProperties.valueOptionList");
            if (sValueOptionList &&
               (oControl.getMetadata().getAllProperties().selectedKey || 
               (oControl.getMetadata().getAllProperties().text &&  !(oControl instanceof Label && !bUseValue))))  {
                SmartControl.bindToValueOptionList(oController, oControl, sModelName, sObjectName, sNodeName, sAttributeName);
            } else {
                if (oControl.getMetadata().getAllProperties().selected && !oControl.getBindingInfo("selected")) {
                    oControl.bindProperty("selected", {
                        path : getBindingPath(sModelName, sNodeName, sAttributeName)
                    });
                } else if (oControl.getMetadata().getAllProperties().text && !oControl.getBindingInfo("text")) {
                    if (oControl instanceof Label && !bUseValue) {
                        oControl.bindProperty("text", {
                            path : "i18n>" + sObjectName + "." + sNodeName + "." + sAttributeName,
                            formatter : function(sText) {
                                return sText + (bLabelColon ? ": " : "");
                            }
                        });
                        oControl.addStyleClass("sapInoLabelSpace");
                    } else {
                        oControl.bindProperty("text", {
                            path : getBindingPath(sModelName, sNodeName, sAttributeName),
                        });
                    }
                } else if (oControl.getMetadata().getAllProperties().value && !oControl.getBindingInfo("value")) {
                    oControl.bindProperty("value", {
                        path : getBindingPath(sModelName, sNodeName, sAttributeName)
                    });
                }                
                if (sModelName !== "data") {
                    if (oControl.getMetadata().getAllProperties().maxLength && !oControl.getBindingInfo("maxLength")) {
                        oControl.bindProperty("maxLength", {
                            path : getObjectMetaPath(sModelName, sNodeName, sAttributeName, "maxLength")
                        });
                    }
                    if (oControl.getMetadata().getAllProperties().min && !oControl.getBindingInfo("min")) {
                        oControl.bindProperty("min", {
                            path : getObjectMetaPath(sModelName, sNodeName, sAttributeName, "minValue")
                        });
                    }
                    if (oControl.getMetadata().getAllProperties().max && !oControl.getBindingInfo("max")) {
                        oControl.bindProperty("max", {
                            path : getObjectMetaPath(sModelName, sNodeName, sAttributeName, "maxValue")
                        });
                    }
                }
            }
        }
        if (sModelName !== "data") {
            if (oControl.getMetadata().getAllProperties().enabled) {
                if (!oControl.getBindingInfo("enabled")) {
                    oControl.bindProperty("enabled", {
                        path : getObjectPropertyPath(sModelName, sNodeName, sAttributeName, "changeable")
                    });
                }
            } else if (oControl.getMetadata().getAllProperties().editable) {
                if (!oControl.getBindingInfo("editable")) {
                    oControl.bindProperty("editable", {
                        path : getObjectPropertyPath(sModelName, sNodeName, sAttributeName, "changeable")
                    });            
                }
            }
        }
    };

    return SmartControl;
});
}; // end of sap/ino/commons/util/SmartControl.js
if ( !jQuery.sap.isDeclared('sap.ino.controls.CommentRichTxtEditor') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.controls.CommentRichTxtEditor'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.richtexteditor.RichTextEditor'); // unlisted dependency retained
sap.ui.define("sap/ino/controls/CommentRichTxtEditor",[
    "jquery.sap.global",
    "sap/ui/richtexteditor/RichTextEditor",
    "sap/ino/commons/application/Configuration",
    "sap/ino/commons/models/object/Attachment"],
	function(jQuery, RichTextEditor, Configuration, Attachment) {
		"use strict";

		var CommentRichTxtEditor = RichTextEditor.extend("sap.ino.controls.CommentRichTxtEditor", {
			metadata: {
				properties: {
					saveText: {
						type: "string",
						group: "Data",
						defaultValue: ''
					},
					saveIcon: {
						type: "string",
						group: "Data",
						defaultValue: 'save'
					},
					saveTooltip: {
						type: "string",
						group: "Data",
						defaultValue: ''
					},
					failureMsg: {
						type: "string",
						group: "Data",
						defaultValue: ''
					}
				}
			},
			constructor: function(mSettings) {
				var that = this;
				var oSettings = jQuery.extend(true, {
						width: "100%",
						editable: true,
						editorType: sap.ui.richtexteditor.EditorType.TinyMCE4,
						showGroupInsert: true,
						showGroupLink: true,
						showGroupFont: true,
						showGroupClipboard: false,
						showGroupStructure: false,
						useLegacyTheme: false,
						beforeEditorInit: function(config) {
							config.mParameters.configuration.powerpaste_word_import = "clean";
							config.mParameters.configuration.powerpaste_html_import = "clean";
							config.mParameters.configuration.image_advtab = false;
							config.mParameters.configuration.paste_data_images = true;
							config.mParameters.configuration.automatic_uploads = true;
							config.mParameters.configuration.images_reuse_filename = false;
							config.mParameters.configuration.image_title = true;
							config.mParameters.configuration.file_picker_types = 'image';
                            config.mParameters.configuration.default_link_target = "_blank";
							config.mParameters.configuration.toolbar = "fontsizeselect | " + config.mParameters.configuration.toolbar.join(" | ").replace(
								"image", "image emoticons ").replace(
								"| alignleft aligncenter alignright alignjustify", "");
							config.mParameters.configuration.images_upload_handler = function(oFile, success, failure) {
								var oFileToUpload = oFile.blob();
								if (oFileToUpload) {
									Attachment.uploadFile(oFileToUpload).done(function(oResponse) {
										success("/" + Configuration.getSystemSetting("sap.ino.config.URL_PATH_XS_ATTACHMENT_DOWNLOAD") + "/" + oResponse.attachmentId);
									}).fail(function() {
										failure(that.getFailureMsg());
									});
								}
							};
							config.mParameters.configuration.file_picker_callback = function(cb, value, meta) {
								var input = document.createElement('input');
								input.setAttribute('type', 'file');
								input.setAttribute('accept', 'image/*');
								input.onchange = function() {
									var file = this.files[0];
									var reader = new FileReader();
									reader.onload = function() {
										var id = 'blobid' + (new Date()).getTime();
										var blobCache = window.tinymce.activeEditor.editorUpload.blobCache;
										var base64 = reader.result.split(',')[1];
										var blobInfo = blobCache.create(id, file, base64);
										blobCache.add(blobInfo);
										cb(blobInfo.blobUri(), {
											title: file.name
										});
									};
									reader.readAsDataURL(file);
								};
								input.click();
							};
						}
					},
					mSettings);
				RichTextEditor.apply(that, [oSettings]);
			},
			renderer: "sap.ui.richtexteditor.RichTextEditorRenderer"
		});

		CommentRichTxtEditor.prototype.init = function() {
			RichTextEditor.prototype.init.call(this);
			this.setButtonGroups([{
					name: "font-style",
					visible: true,
					row: 0,
					priority: 10,
					buttons: [
                        "bold", "italic", "underline", "strikethrough"
                    ]
                }, {
					name: "undo",
					visible: true,
					row: 0,
					priority: 40,
					buttons: [
                        "undo", "redo"
                    ]
                }, {
					name: "insert",
					visible: false,
					row: 0,
					priority: 50,
					buttons: [
                        "image"
                    ]
                }, {
					name: "link",
					visible: false,
					row: 0,
					priority: 60,
					buttons: [
                        "link", "unlink"
                    ]
                }
            ]);
			this.removePlugin("paste");
			this.removePlugin("lists");
			//this.removePlugin("emoticons");
			this.removePlugin("text-align");
			this.removePlugin("directionality");
			this.removePlugin("textpattern");
		};
		return CommentRichTxtEditor;
	});
}; // end of sap/ino/controls/CommentRichTxtEditor.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.attachment.AttachmentMixin') ) {
jQuery.sap.declare('sap.ino.vc.attachment.AttachmentMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.UploadCollectionParameter'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/attachment/AttachmentMixin",[
    "sap/ino/commons/application/Configuration",
    "sap/m/UploadCollectionParameter",
    "sap/ino/commons/models/object/Attachment",
    "sap/m/MessageToast"
], function (Configuration, UploadCollectionParameter, Attachment, MessageToast){
    "use strict";    
    /**
     * @class
     * Mixin that handles actions for Comment and Internal Note
     */
    var AttachmentMixin = function() {
        throw "Mixin may not be instantiated directly";
    };
    
    AttachmentMixin._attachmentMixinInit = function(oSetting) {
        this._attachmentMixinSetting = oSetting;
        var oAttachments = this.byId(this._attachmentMixinSetting.attachmentId);
        var attachMentsList = this.getView().byId(this._attachmentMixinSetting.attachmentId);
        if(!oAttachments.getUploadEnabled()) {
            oAttachments.addStyleClass("sapInoAttachmentUploadInvisible");
        }
        attachMentsList.addEventDelegate({
		    onAfterRendering: jQuery.proxy(function () {
                this.setAccessibility();
			}, this)
		});
    };
    
    
    // called once per upload (not per file)
    AttachmentMixin.attachmentMixinOnChange = function(oEvent) {
        var oUploadCollection = oEvent.getSource();
        var oCustomerHeaderToken = new UploadCollectionParameter({
            name : "x-csrf-token",
            value : Configuration.getXSRFToken()
        });
        oUploadCollection.addHeaderParameter(oCustomerHeaderToken);
    };
    
    AttachmentMixin.attachmentMixinonFileDeleted = function(oEvent) {
        var oItem = oEvent.getParameter("item");
        var oObject = this.getModel("object");
        oObject.removeAttachment(parseInt(oItem.getDocumentId(), 10));
        this._attachmentMixinSetting.updateObject(oObject);
    };
    
    // called for every file
    AttachmentMixin.attachmentMixinonBeforeUploadStarts = function(oEvent) {
        var oCustomerHeaderFilename = new UploadCollectionParameter({
            name : "unicode_filename",
            value : Attachment.stringToUnicode(oEvent.getParameter("fileName"))
        });
        oEvent.getParameters().addHeaderParameter(oCustomerHeaderFilename);      
    };
    
    AttachmentMixin.attachmentMixinonUploadComplete = function(oEvent) {
        var that = this;
        var oObject = this.getModel("object");
        var aFile = oEvent.getParameter("files");
        if (aFile.length > 0) {
            var bError = false;
            aFile.forEach(function(oFile) {
                var oResponse = Attachment.parseUploadResponse(oFile.responseRaw);
                oObject.getMessageParser().parse(oResponse);
                if (oResponse) {
                    if (oResponse.success) {
                        bError = that._attachmentMixinSetting.uploadSuccess(oObject, oResponse);
                    } else {
                        MessageToast.show(that.getText("OBJECT_MSG_ATTACHMENT_FAILED"));
                        bError = true;
                    }
                } else {
                    MessageToast.show(that.getText("OBJECT_MSG_ATTACHMENT_ERROR"));
                    bError = true;
                }
            });
            if (bError) {
                var oUploadCollection = this.getView().byId(this._attachmentMixinSetting.attachmentId);
                // Access to UI5 internal property to remove failed uploads
                oUploadCollection.aItems = [];
                // Force re-rendering to make invalid attachments disappear
                oUploadCollection.rerender();
            }
        }
    };
    
    AttachmentMixin.setAccessibility = function(){
        var view = this.getView();
        var element = view.byId(this._attachmentMixinSetting.attachmentId).$();
        var isNone= element.find('.sapMListNoData');
        var list = element.find('.sapMListModeNone ');
        
        if(isNone.length){
            list.hide();
            list.siblings().attr('tabindex', '-1');
        }
    }
    return AttachmentMixin;
});
}; // end of sap/ino/vc/attachment/AttachmentMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.comment.RichCommentAttachmentMixin') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */

jQuery.sap.declare('sap.ino.vc.comment.RichCommentAttachmentMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.unified.FileUploaderParameter'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.UploadCollection'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/comment/RichCommentAttachmentMixin",[
    "sap/ino/commons/application/Configuration",
    "sap/ui/unified/FileUploaderParameter",
    "sap/ino/commons/models/object/Attachment",
    "sap/m/MessageToast",
    "sap/ui/model/json/JSONModel",
    "sap/m/UploadCollection",
    "sap/ui/Device"
], function(Configuration, FileUploaderParameter, Attachment, MessageToast, JSONModel, UploadCollection, Device) {
	"use strict";
	/**
	 * @class
	 * Mixin that handles actions for Comment and Internal Note
	 */
	var RichCommentAttachmentMixin = function() {
		throw "Mixin may not be instantiated directly";
	};

	RichCommentAttachmentMixin.richAttachmentMixinInit = function() {
		this._attachmentCtlSetting = {
			listId: "commentAttachmentList",
			uploaderId: "commentAttachmentUploader"
		};
		if (!this.getBlockView().getModel("local")) {
			this.setModel(new JSONModel({
				ATTACHMENT_UPLOAD_URL: Attachment.getEndpointURL()
			}), "local");
		}
		var oAttachments = this.byId(this._attachmentCtlSetting.listId);
		var attachMentsList = this.getBlockView().byId(this._attachmentCtlSetting.listId);
		if (!oAttachments.getUploadEnabled()) {
			oAttachments.addStyleClass("sapInoAttachmentUploadInvisible");
		}
		attachMentsList.addEventDelegate({
			onAfterRendering: jQuery.proxy(function() {
				this.setRichAttachmentAccessibility();
			}, this)
		});
	};

	RichCommentAttachmentMixin.onRichCommentFileUploaderChange = function(oEvent) {
		var oFileUploader = oEvent.getSource();
		var aFile = oEvent.getParameter("files");
		oFileUploader.setBusy(true);
		Attachment.prepareFileUploader(oFileUploader, aFile);
	};

	RichCommentAttachmentMixin.onRichCommentFileUploaderComplete = function(oEvent) {
		var oResponse = Attachment.parseUploadResponse(oEvent.getParameter("responseRaw"));
		var oFileUploader = oEvent.getSource();
		if (oResponse) {
			var oObject = this.getObjectModel();
			oObject.getMessageParser().parse(oResponse);
			if (oResponse.success) {
				oObject.setTitleImage({
					"ATTACHMENT_ID": oResponse.attachmentId,
					"FILE_NAME": oResponse.fileName,
					"MEDIA_TYPE": oResponse.mediaType
				});
			} else {
				MessageToast.show(this.getText("MSG_COMMENT_ATTACHMENT_IMAGE_FAILED"));
			}
		} else {
			MessageToast.show(this.getText("MSG_COMMENT_ATTACHEMENT_IMAGE_ERROR"));
		}
		oFileUploader.setBusy(false);
		oFileUploader.clear();
	};

	// called once per upload (not per file)
	RichCommentAttachmentMixin.richAttachmentMixinOnChange = function(oEvent) {
		var oUploadCollection = oEvent.getSource();
		var oCustomerHeaderToken = new FileUploaderParameter({
			name: "x-csrf-token",
			value: Configuration.getXSRFToken()
		});
		oUploadCollection.removeAllAggregation("headerParameters", true);
		oUploadCollection.addHeaderParameter(oCustomerHeaderToken);
		this._onRichCommentChange(oEvent);
	};

	RichCommentAttachmentMixin._onRichCommentChange = function(oEvent) {
		if (!oEvent) {
			return;
		}
		var that = this;
		var sRequestValue, iCountFiles, i, sFileName, oItem, sStatus;
		if (Device.browser.msie && Device.browser.version <= 9) {
			// FileUploader does not support files parameter for IE9 for the time being
			var sNewValue = oEvent.getParameter("newValue");
			if (!sNewValue) {
				return;
			}
			sFileName = sNewValue.split(/\" "/)[0];
			//sometimes onChange is called if no data was selected
			if (sFileName.length === 0) {
				return;
			}
		} else {
			iCountFiles = oEvent.getParameter("files").length;
			// FileUploader fires the change event also if no file was selected by the user
			// If so, do nothing.
			if (iCountFiles === 0) {
				return;
			}
		}
		var attachmentList = that.byId(this._attachmentCtlSetting.listId),
			uploader = that.byId(this._attachmentCtlSetting.uploaderId);
		var aParametersAfter = attachmentList.getAggregation("parameters");
		// parameters
		if (aParametersAfter) {
			jQuery.each(aParametersAfter, function(iIndex, parameter) {
				var oParameter = new sap.ui.unified.FileUploaderParameter({
					name: parameter.getProperty("name"),
					value: parameter.getProperty("value")
				});
				uploader.addParameter(oParameter);
			});
		}

		sStatus = UploadCollection._uploadingStatus;
		if (Device.browser.msie && Device.browser.version <= 9) {
			oItem = new sap.m.UploadCollectionItem({
				fileName: sFileName
			});
			oItem._status = sStatus;
			oItem._internalFileIndexWithinFileUploader = 1;
			oItem._percentUploaded = 0;
			attachmentList.aItems.unshift(oItem);
		} else {
			attachmentList._requestIdValue = attachmentList._requestIdValue + 1;
			sRequestValue = attachmentList._requestIdValue.toString();
			var aHeaderParametersAfter = attachmentList.getAggregation("headerParameters");

			for (i = 0; i < iCountFiles; i++) {
				oItem = new sap.m.UploadCollectionItem({
					fileName: oEvent.getParameter("files")[i].name
				});
				oItem._status = sStatus;
				oItem._internalFileIndexWithinFileUploader = i + 1;
				oItem._requestIdName = sRequestValue;
				oItem._percentUploaded = 0;
				attachmentList.aItems.unshift(oItem);
			}
			//headerParameters
			if (aHeaderParametersAfter) {
				jQuery.each(aHeaderParametersAfter, function(iIndex, headerParameter) {
					uploader.addHeaderParameter(new sap.ui.unified.FileUploaderParameter({
						name: headerParameter.getProperty("name"),
						value: headerParameter.getProperty("value")
					}));
				});
			}
			uploader.addHeaderParameter(new sap.ui.unified.FileUploaderParameter({
				name: attachmentList._headerParamConst.requestIdName,
				value: sRequestValue
			}));
		}

		attachmentList.invalidate();
	};

	RichCommentAttachmentMixin.richAttachmentMixinonFileDeleted = function(oEvent) {
		var oItem = oEvent.getParameter("item");
		var oObject = this.getBlockView().getModel("comment");
		oObject.removeAttachment(parseInt(oItem.getDocumentId(), 10));
	};

	// called for every file
	RichCommentAttachmentMixin.richAttachmentMixinonBeforeUploadStarts = function(oEvent) {
		var oCustomerHeaderFilename = new FileUploaderParameter({
			name: "unicode_filename",
			value: Attachment.stringToUnicode(oEvent.getParameter("fileName"))
		});
		oEvent.getParameter("requestHeaders").push(oCustomerHeaderFilename);
		//oEvent.getParameters().addHeaderParameter(oCustomerHeaderFilename);
	};

	RichCommentAttachmentMixin.richAttachmentMixinonUploadProgress = function(oEvent) {
		if (!oEvent) {
			return;
		}
		var attachmentList = this.byId(this._attachmentCtlSetting.listId);
		var i, sPercentUploaded, iPercentUploaded, sRequestId, cItems, oProgressLabel, sItemId, $busyIndicator;
		sRequestId = attachmentList._getRequestId(oEvent);
		iPercentUploaded = Math.round(oEvent.getParameter("loaded") / oEvent.getParameter("total") * 100);
		if (iPercentUploaded === 100) {
			sPercentUploaded = attachmentList._oRb.getText("UPLOADCOLLECTION_UPLOAD_COMPLETED");
		} else {
			sPercentUploaded = attachmentList._oRb.getText("UPLOADCOLLECTION_UPLOADING", [iPercentUploaded]);
		}
		cItems = attachmentList.aItems.length;
		for (i = 0; i < cItems; i++) {
			if (attachmentList.aItems[i]._requestIdName === sRequestId &&
				attachmentList.aItems[i]._status === UploadCollection._uploadingStatus) {
				oProgressLabel = sap.ui.getCore().byId(attachmentList.aItems[i].getId() + "-ta_progress");
				//necessary for IE otherwise it comes to an error if onUploadProgress happens before the new item is added to the list
				if (!oProgressLabel) {
					continue;
				}
				oProgressLabel.setText(sPercentUploaded);
				attachmentList.aItems[i]._percentUploaded = iPercentUploaded;
				// add ARIA attribute for screen reader support
				sItemId = attachmentList.aItems[i].getId();
				$busyIndicator = jQuery.sap.byId(sItemId + "-ia_indicator");
				if (iPercentUploaded === 100) {
					$busyIndicator.attr("aria-label", sPercentUploaded);
				} else {
					$busyIndicator.attr("aria-valuenow", iPercentUploaded);
				}
				break;
			}
		}
	};

	RichCommentAttachmentMixin._onRichCommentUploadComplete = function(oEvent) {
		var that = this;
		var oObject = this.getBlockView().getModel("comment");
		var aFile = [{
			fileName: oEvent.getParameter("fileName"),
			responseRaw: oEvent.getParameter("responseRaw"),
			reponse: oEvent.getParameter("response"),
			status: oEvent.getParameter("status"),
			headers: oEvent.getParameter("headers")
		}];
		if (aFile.length > 0) {
			var bError = false;
			aFile.forEach(function(oFile) {
				var oResponse = Attachment.parseUploadResponse(oFile.responseRaw);
				oObject.getMessageParser().parse(oResponse);
				if (oResponse) {
					if (oResponse.success) {
						bError = that.uploadRichAttachmentSuccess(oObject, oResponse);
					} else {
						MessageToast.show(that.getText("OBJECT_MSG_ATTACHMENT_FAILED"));
						bError = true;
					}
				} else {
					MessageToast.show(that.getText("OBJECT_MSG_ATTACHMENT_ERROR"));
					bError = true;
				}
			});
			if (bError) {
				var oUploadCollection = this.byId(this._attachmentCtlSetting.listId);
				oUploadCollection.aItems = [];
				oUploadCollection.rerender();
			}
		}
	};

	RichCommentAttachmentMixin.richAttachmentMixinonUploadComplete = function(oEvent) {
		if (!oEvent) {
			return;
		}
		var oUploadCollection = this.byId(this._attachmentCtlSetting.listId);
		var i, sRequestId, sUploadedFile, cItems, bUploadSuccessful = checkRequestStatus();
		sRequestId = oUploadCollection._getRequestId(oEvent);
		sUploadedFile = oEvent.getParameter("fileName");

		// at the moment parameter fileName is not set in IE9
		if (!sUploadedFile) {
			var aUploadedFile = (oEvent.getSource().getProperty("value")).split(/\" "/);
			sUploadedFile = aUploadedFile[0];
		}
		cItems = oUploadCollection.aItems.length;
		for (i = 0; i < cItems; i++) {
			// sRequestId should be null only in case of IE9 because FileUploader does not support header parameters for it
			if (!sRequestId) {
				if (oUploadCollection.aItems[i]._status === UploadCollection._uploadingStatus && bUploadSuccessful) {
					oUploadCollection.aItems[i]._percentUploaded = 100;
					oUploadCollection.aItems[i]._status = UploadCollection._displayStatus;
					oUploadCollection._oItemToUpdate = null;
					break;
				} else if (oUploadCollection.aItems[i]._status === UploadCollection._uploadingStatus) {
					oUploadCollection.aItems.splice(i, 1);
					oUploadCollection._oItemToUpdate = null;
					break;
				}
			} else if (oUploadCollection.aItems[i]._requestIdName === sRequestId &&
				oUploadCollection.aItems[i]._status === UploadCollection._uploadingStatus && bUploadSuccessful) {
				oUploadCollection.aItems[i]._percentUploaded = 100;
				oUploadCollection.aItems[i]._status = UploadCollection._displayStatus;
				oUploadCollection._oItemToUpdate = null;
				break;
			} else if (oUploadCollection.aItems[i]._requestIdName === sRequestId &&
				oUploadCollection.aItems[i]._status === UploadCollection._uploadingStatus ||
				oUploadCollection.aItems[i]._status === UploadCollection._pendingUploadStatus) {
				oUploadCollection.aItems.splice(i, 1);
				oUploadCollection._oItemToUpdate = null;
				break;
			}
		}
		this._onRichCommentUploadComplete(oEvent);

		oUploadCollection.invalidate();

		function checkRequestStatus() {
			var sRequestStatus = oEvent.getParameter("status").toString() || "200"; // In case of IE version < 10, this function will not work.
			if (sRequestStatus[0] === "2" || sRequestStatus[0] === "3") {
				return true;
			} else {
				return false;
			}
		}
	};

	RichCommentAttachmentMixin.setRichAttachmentAccessibility = function() {
		var view = this.getBlockView();
		var element = view.byId(this._attachmentCtlSetting.listId).$();
		var isNone = element.find('.sapMListNoData');
		var list = element.find('.sapMListModeNone ');

		if (isNone.length) {
			list.hide();
			list.siblings().attr('tabindex', '-1');
		}
	};

	RichCommentAttachmentMixin.uploadRichAttachmentSuccess = function(oObject, oResponse) {
		oObject.addAttachment({
			"CREATED_BY_NAME": Configuration.getCurrentUser().NAME,
			"ATTACHMENT_ID": oResponse.attachmentId,
			"FILE_NAME": oResponse.fileName,
			"MEDIA_TYPE": oResponse.mediaType,
			"CREATED_AT": new Date()
		});
	};

	RichCommentAttachmentMixin.onRichCmtImgPressed = function(oEvent) {
		sap.m.URLHelper.redirect(oEvent.oSource.getProperty("src"), true);
	};

	RichCommentAttachmentMixin.onRichCmtIconPressed = function(oEvent) {
		var oItemList = oEvent.oSource.oParent.getItems();
		if (oItemList && oItemList.length >= 2) {
			sap.m.URLHelper.redirect(oItemList[2].getProperty("href"), true);
		}
	};

	RichCommentAttachmentMixin.addSomeMethodIntoModel = function(oModel) {
		oModel.addAttachment = function(oNewAttachment) {
			oNewAttachment.ROLE_TYPE_CODE = "ATTACHMENT";
			this.addChild(oNewAttachment, "Attachments");
		};

		oModel.removeAttachment = function(iId) {
			var aAttachment = jQuery.grep(this.getProperty("/Attachments") || [], function(oAttachment) {
				return oAttachment.ID === iId;
			});
			var oFirstAttachment = aAttachment && aAttachment[0];
			if (oFirstAttachment) {
				this.removeChild(oFirstAttachment);
			}
		};
	};

	return RichCommentAttachmentMixin;
});
}; // end of sap/ino/vc/comment/RichCommentAttachmentMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.comment.RichCommentCntrlMixin') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.vc.comment.RichCommentCntrlMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/comment/RichCommentCntrlMixin",[
    "sap/ino/controls/CommentRichTxtEditor",
    "sap/m/Text",
    "sap/ino/commons/application/Configuration"
], function(CommentRichTxtEditor, Text, Configuration) {
	"use strict";
	/*
	 * @class Mixin that handles actions for Comment and Internal Note
	 */
	var RichCommentCntrlMixin = function() {
		throw "Mixin may not be instantiated directly";
	};

	RichCommentCntrlMixin._DIC_NEW_TITLE_LIST_ = {
		"sap.ino.commons.models.object.IdeaComment": {
			"title": "COMMENT_OBJECT_NEW_COMMENT_TIT"
		}
	};
	RichCommentCntrlMixin._destroyRTECtrl = function(controlId) {
		var oRte = this.byId(controlId);
		if (oRte) {
			oRte.destroy();
		}
	};
	RichCommentCntrlMixin._initRTE = function(oSetting) {
		var oController = this;
		var oRichTextContainer = oController._getRTEContainer();
		var oRichTextControl;

		if (oController._commentMixinSettings.type === "comment") {
			if (oRichTextContainer && oRichTextContainer.getItems().length > 1) {
				oRichTextContainer.removeItem(oRichTextContainer.getItems()[1]);
			}
			this._destroyRTECtrl(this._commentControlId);
			this._commentControlId = "commentControl" + new Date().getTime();
			oRichTextControl = new CommentRichTxtEditor({
				id: oController.createId(this._commentControlId),
				editable: {
					parts: [{
							path: 'data>COMMENT_HAS_PRIVILEGE'
							},
						{
							path: 'data>PARTICIPANT_CAN_COMMENT'
							},
						{
							path: 'data>OPEN_STATUS_SETTING'
							}],
					formatter: function(iCommentHasPrivilege, iCanComment, iOpenStatusSetting) {
						return oController.formatter.commentEnabled(iCommentHasPrivilege, iCanComment, iOpenStatusSetting);
					}
				},
				height: "200px"
			});
		} else if (oController._commentMixinSettings.type === "comment_reply") {
			if (oRichTextContainer && oRichTextContainer.getItems().length > 0) {
				oRichTextContainer.removeItem(oRichTextContainer.getItems()[0]);
			}
			this._destroyRTECtrl(this._commentReplyControlId);
			this._commentReplyControlId = "commentReplyControl" + new Date().getTime();
			oRichTextControl = new CommentRichTxtEditor({
				id: oController.createId(this._commentReplyControlId),
				editable: {
					parts: [{
							path: 'data>COMMENT_HAS_PRIVILEGE'
							},
						{
							path: 'data>PARTICIPANT_CAN_COMMENT'
							},
						{
							path: 'data>OPEN_STATUS_SETTING'
							}],
					formatter: function(iCommentHasPrivilege, iCanComment, iOpenStatusSetting) {
						return oController.formatter.commentEnabled(iCommentHasPrivilege, iCanComment, iOpenStatusSetting);
					}
				},
				height: "200px"
			});

		} else {
			if (oRichTextContainer && oRichTextContainer.getItems().length > 0) {
				oRichTextContainer.removeItem(oRichTextContainer.getItems()[0]);
			}
			this._destroyRTECtrl(this._internalControlId);
			this._internalControlId = "internalControl" + new Date().getTime();
			oRichTextControl = new CommentRichTxtEditor({
				id: oController.createId(this._internalControlId),
				height: "200px"
			});
		}

		oRichTextControl.attachReady(function onRTEReady() {
			oController.commentMixinForceInitCommentModel();
			this.bindProperty("value", {
				model: "comment",
				path: "/COMMENT"
			});
			oController._changePosHandleForTinyMce();
		});
		// 		oController.commentMixinForceInitCommentModel();

		// 		oController._changePosHandleForTinyMce();
		if (!oController._TITLE_TXT && oController.getBlockView().data("modelObjectType") && oController._DIC_NEW_TITLE_LIST_[oController.getBlockView()
			.data(
				"modelObjectType")]) {
			oRichTextContainer.insertItem(new Text({
				text: oController.getText(oController._DIC_NEW_TITLE_LIST_[oController.getBlockView().data("modelObjectType")].title)
			}), 0);
			oController._TITLE_TXT = true;
		}
		oRichTextContainer.addItem(oRichTextControl);
		// 		sap.ui.getCore().applyChanges();
	};

	RichCommentCntrlMixin._getRTEContainer = function() {
		return this.byId(this._commentMixinSettings.commentContainerId);
	};

	RichCommentCntrlMixin._getImgIds = function(sContent) {
		if (!sContent) {
			return [];
		}
		var url = this._getAttachmentDownloadUrl();
		if (!url) {
			return [];
		}
		var re = new RegExp(url.substr(url.lastIndexOf("/") + 1) + "/(\\d+)", "ig");
		var result = [];
		var oMatch = re.exec(sContent);
		while (oMatch) {
			result.push({
				ATTACHMENT_ID: Number(oMatch[1])
			});
			oMatch = re.exec(sContent);
		}
		return result;
	};

	RichCommentCntrlMixin._getAttachmentDownloadUrl = function() {
		var url = Configuration.getSystemSetting("sap.ino.config.URL_PATH_XS_ATTACHMENT_DOWNLOAD");
		if (url) {
			return url.substr(url.lastIndexOf("/") + 1);
		}
		return "";
	};

	RichCommentCntrlMixin._changePosHandleForTinyMce = function() {
		var oController = this;
		if (window.tinyMCE && window.tinyMCE.dom && window.tinyMCE.dom.DOMUtils && window.tinyMCE.dom.DOMUtils.prototype.getPos) {
			window.tinyMCE.dom.DOMUtils.prototype.getPos = function(elm, rootElm) {
				return oController._getPosForTinyMce.call(window.tinyMCE.dom.DOMUtils.DOM, elm, rootElm);
			};
		}
	};

	RichCommentCntrlMixin._getPosForTinyMce = function(elm, rootElm) {
		var self = this,
			x = 0,
			y = 0,
			offsetParent, doc = self.doc,
			body = doc.body,
			pos, aTransform = "none";

		elm = self.get(elm);
		rootElm = rootElm || body;

		if (elm) {
			// Use getBoundingClientRect if it exists since it's faster than looping offset nodes
			// Fallback to offsetParent calculations if the body isn't static better since it stops at the body root
			if (rootElm === body && elm.getBoundingClientRect && $(body).css('position') === 'static') {
				pos = elm.getBoundingClientRect();
				rootElm = self.boxModel ? doc.documentElement : body;

				// Add scroll offsets from documentElement or body since IE with the wrong box model will use d.body and so do WebKit
				// Also remove the body/documentelement clientTop/clientLeft on IE 6, 7 since they offset the position
				x = pos.left + (doc.documentElement.scrollLeft || body.scrollLeft) - rootElm.clientLeft;
				y = pos.top + (doc.documentElement.scrollTop || body.scrollTop) - rootElm.clientTop;

				return {
					x: x,
					y: y
				};
			}

			offsetParent = elm;
			while (offsetParent && offsetParent !== rootElm && offsetParent.nodeType) {
				x += offsetParent.offsetLeft || 0;
				y += offsetParent.offsetTop || 0;
				if (offsetParent.translate && getComputedStyle(offsetParent).transform !== "none") {
					aTransform = getComputedStyle(offsetParent).transform.split("(")[1].split(")")[0].split(",");
					x += Number(aTransform[4]) || 0;
					y += Number(aTransform[5]) || 0;
				}
				offsetParent = offsetParent.offsetParent;
			}

			offsetParent = elm.parentNode;
			while (offsetParent && offsetParent !== rootElm && offsetParent.nodeType) {
				x -= offsetParent.scrollLeft || 0;
				y -= offsetParent.scrollTop || 0;
				offsetParent = offsetParent.parentNode;
			}
		}

		return {
			x: x,
			y: y
		};
	};
	return RichCommentCntrlMixin;
});
}; // end of sap/ino/vc/comment/RichCommentCntrlMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.commons.BaseController') ) {
jQuery.sap.declare('sap.ino.vc.commons.BaseController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.message.ControlMessageProcessor'); // unlisted dependency retained
jQuery.sap.require('sap.m.InputBase'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.resource.ResourceModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ListItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
jQuery.sap.require('sap.m.MultiInput'); // unlisted dependency retained
jQuery.sap.require('sap.m.Select'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
jQuery.sap.require('sap.m.ComboBox'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/commons/BaseController",[
    "sap/ino/commons/formatters/BaseFormatter",
    "sap/ui/core/mvc/Controller",
    "sap/ui/core/message/ControlMessageProcessor",
    "sap/m/InputBase",
    "sap/ui/model/json/JSONModel",
    "sap/ui/model/resource/ResourceModel",
    "sap/ui/core/UIComponent",
    "sap/ui/Device",
    "sap/ino/commons/application/Configuration",
    "sap/ui/core/ListItem",
    "sap/m/MessageToast",
    "sap/m/MessageBox",
    "sap/ui/core/MessageType",
    "sap/m/MultiInput",
    "sap/ino/commons/util/UIObjectConfig",
    "sap/m/Select",
    "sap/ino/commons/util/SmartControl",
    "sap/ui/core/ResizeHandler",
    "sap/m/ComboBox",
   "sap/ino/commons/models/aof/MetaModel"
], function(BaseFormatter,
	Controller,
	ControlMessageProcessor,
	InputBase,
	JSONModel,
	ResourceModel,
	UIComponent,
	Device,
	Configuration,
	ListItem,
	MessageToast,
	MessageBox,
	MessageType,
	MultiInput,
	UIObjectConfig,
	Select,
	SmartControl,
	ResizeHandler,
	ComboBox,
	MetaModel) {
	// 	"use strict";

	MetaModel.getBackendAllMetadata();
	return Controller.extend("sap.ino.vc.commons.BaseController", {

		formatter: BaseFormatter,

		/* all controls in this array are turned busy during loading data through a base controller */
		aBusyControls: [],

		onInit: function() {
			sap.ui.getCore().getMessageManager().registerObject(this.getView(), true);
			this._previousClientMessages = [];
			this._controlMessageProcessor = new ControlMessageProcessor();
			if (Controller.prototype.onInit) {
				Controller.prototype.onInit.apply(this, arguments);
			}

			// Initialization for "Facets" that are not in the inheritance chain
			if (this._onInit) {
				this._onInit();
			}

			if (!this.getModel("view")) {
				this.setModel(new JSONModel({
					Layouts: {
						SimpleFormLayout: {
							labelSpanL: 12,
							labelSpanM: 12,
							emptySpanL: 1,
							emptySpanM: 1,
							breakpointL: 1024,
							breakpointM: 600,
							layout: "ResponsiveGridLayout"
						}
					}
				}), "view");
			}

			this.setObjectExists(true);

			if (this.getOwnerComponent()) {
				this.setModel(this.getOwnerComponent().getModel("component"), "component");
			}

			// Smart Control support for XML views
			var oCustomData = this.getView().data();
			if (!oCustomData.aofSmartControl && this.getView().getContent()) {
				oCustomData = this.getView().getContent()[0].data();
			}
			if (oCustomData.aofSmartControl) {
				SmartControl.bindAll(this, this.getView());
			}
		},

		onAfterRendering: function() {
			var personalizeSettings = Configuration.getPersonalize();
			if (personalizeSettings && personalizeSettings.SCREEN_SIZE) {
				this.setFullScreen(personalizeSettings.SCREEN_SIZE);
			}
		},

		onExit: function() {
			// Initialization for "Facets" that are not in the inheritance chain
			if (this._onExit) {
				this._onExit();
			}

			var oViewModel = this.getModel("view");
			if (oViewModel) {
				oViewModel.destroy();
			}
			if (Controller.prototype.onExit) {
				Controller.prototype.onExit.apply(this, arguments);
			}
		},

		destroy: function() {
			Controller.prototype.destroy.apply(this.arguments);
		},

		/* the route the view currently displays */
		getCurrentRoute: function() {
			return this.getOwnerComponent().getCurrentRoute();
		},

		getBusyControls: function() {
			return this.aBusyControls;
		},

		getDensityClass: function() {
			if (jQuery("body").hasClass("sapUiSizeCozy")) {
				return "sapUiSizeCozy";
			} else {
				return "sapUiSizeCompact";
			}
		},

		createView: function(oViewData) {
			var oView;
			this.getOwnerComponent().runAsOwner(function() {
				oView = sap.ui.view(oViewData);
			});
			return oView;
		},

		getLocalElementId: function(oElement) {
			var sId = oElement.getId();
			var aIdParts = sId.split("--"); // -- is the separator which is used for element ids nested in views
			return aIdParts[aIdParts.length - 1];
		},

		createFragment: function(sFragmentName, sFragmentId) {
			// parameter sFragmentId is optional
			var oController = this;
			var oFragment;
			this.getOwnerComponent().runAsOwner(function() {
				if (!sFragmentId) {
					oFragment = sap.ui.xmlfragment(oController.getView().getId(), sFragmentName, oController);
				} else {
					oFragment = sap.ui.xmlfragment(sFragmentId, sFragmentName, oController);
				}
				oController.onFragmentCreated(sFragmentName, oFragment);
			});
			return oFragment;
		},

		getFragment: function(sFragmentName, sFragmentId) {
			if (!this._mFragmentCache) {
				this._mFragmentCache = {};
			}
			if (!this._mFragmentCache[sFragmentName]) {
				this._mFragmentCache[sFragmentName] = this.createFragment(sFragmentName, sFragmentId);
			}
			return this._mFragmentCache[sFragmentName];
		},

		onFragmentCreated: function(sFragmentName, oFragment) {
			// Smart Control support for XML fragments
			if (jQuery.type(oFragment) === "object" && oFragment.data("aofSmartControl")) {
				SmartControl.bindAll(this, oFragment);
			}
		},

		setViewData: function(oViewData, bMerge) {
			this.getModel("view").setData(oViewData, bMerge);
		},

		setViewProperty: function(sProperty, vValue) {
			return this.getModel("view").setProperty(sProperty, vValue);
		},

		getViewProperty: function(sProperty) {
			return this.getModel("view").getProperty(sProperty);
		},

		setObjectExists: function(bObjectExists) {
			this.setViewProperty("/objectExists", bObjectExists);
		},

		getObjectExists: function() {
			return this.getViewProperty("/objectExists");
		},

		onNavBack: function() {
			this.getOwnerComponent().getRouter().onNavBack();
		},

		onDeleteNavBack: function(sOnDeleteHash, bReplace) {
			this.getOwnerComponent().getRouter().onDeleteNavBack(sOnDeleteHash, bReplace);
		},

		navigateBack: function() {
			this.onNavBack();
		},

		navigateTo: function(sTarget, oData, bReplace, bNoBusy) {
			this.getOwnerComponent().navigateTo(sTarget, oData, bReplace, bNoBusy);
		},

		navigateToWall: function(sTarget, oData, bReplace, bNoBusy) {
			sTarget = (sTarget === "wall" && Device.system.phone) ? "wallremote" : sTarget;
			this.getOwnerComponent().navigateTo(sTarget, oData, bReplace, bNoBusy);
		},

		navigateToExternal: function(sTarget, oData) {
			this.getOwnerComponent().navigateToExternal(sTarget, oData);
		},

		navigateToByURL: function(sURL) {
			this.getOwnerComponent().navigateToByURL(sURL);
		},

		navigateToInNewWindow: function(sTarget, oData) {
			this.getOwnerComponent().navigateToInNewWindow(sTarget, oData);
		},

		navigateToByURLInNewWindow: function(sURL) {
			this.getOwnerComponent().navigateToByURLInNewWindow(sURL);
		},

		getRouter: function() {
			return UIComponent.getRouterFor(this);
		},

		getOwnerComponent: function() {
			if (this._oComponent) {
				return this._oComponent;
			}
			this._oComponent = Controller.prototype.getOwnerComponent.apply(this, arguments);
			if (this._oComponent) {
				return this._oComponent;
			}
			var oView = this.getView();
			while (oView.getParent()) {
				oView = oView.getParent();
				this._oComponent = oView.getController && oView.getController().getOwnerComponent();
				if (this._oComponent) {
					break;
				}
			}
			return this._oComponent;
		},

		setBusy: function(bBusy) {
			this.getView().setBusy(bBusy);
		},

		getBusy: function() {
			this.getView().getBusy();
		},

		_getTextModel: function() {
			if (!this._i18n) {
				this._i18n = this.getOwnerComponent() && this.getOwnerComponent().getModel("i18n");
			}
			return this._i18n;
		},

		getText: function(sText, aParameters) {
			if (this._getTextModel()) {
				return this._getTextModel().getResourceBundle().getText(sText, aParameters);
			}
		},

		hasOwnModel: function(sModelName) {
			return !!this.getView().oModels[sModelName];
		},

		getDefaultODataModel: function() {
			return this.getOwnerComponent().getModel("data");
		},

		getModel: function(sName) {
			return this.getView().getModel(sName);
		},

		setModel: function(oModel, sName) {
			return this.getView().setModel(oModel, sName);
		},

		_onBindingChange: function() {
			var oElementBinding = this.getView().getElementBinding();
			// No data for the binding
			if (oElementBinding && !oElementBinding.getBoundContext()) {
				this.getOwnerComponent().getRouter().getTargets().display("notFound");
			}
		},

		setViewFocus: function() {
			var that = this;
			setTimeout(function() {
				// do not update the focus, if we have it already sitting on a control
				if (!sap.ui.getCore().getCurrentFocusedControlId()) {
					var oControl;
					if (jQuery.type(that.initialFocus) === "string") {
						oControl = that.byId(that.initialFocus);
						if (oControl && oControl.$() && oControl.$().is(":visible") && jQuery.type(oControl.focus) === "function") {
							oControl.focus();
						}
					} else if (jQuery.type(that.initialFocus) === "array") {
						for (var ii = 0; ii < that.initialFocus.length; ii++) {
							oControl = that.byId(that.initialFocus[ii]);
							if (oControl && oControl.$() && oControl.$().is(":visible") && jQuery.type(oControl.focus) === "function") {
								oControl.focus();
								break;
							}
						}
					}
				}
			}, 100);
		},

		toggleFullScreen: function() {
			var oMShell = this.getOwnerComponent().getShell();
			oMShell.setAppWidthLimited(!oMShell.getAppWidthLimited());

			this.getModel("component").setProperty("/FULLSCREEN", !oMShell.getAppWidthLimited());

			var oIdeaLink = this.byId('ideaLink');
			if (oIdeaLink && oMShell.getAppWidthLimited()) {
				oIdeaLink.addStyleClass("sapInoIdeaListIdeaNameTitle");
			} else if (oIdeaLink && !oMShell.getAppWidthLimited() && oIdeaLink.hasStyleClass("sapInoIdeaListIdeaNameTitle")) {
				oIdeaLink.removeStyleClass("sapInoIdeaListIdeaNameTitle");
			}

		},

		setFullScreen: function(bState) {
			var oMShell = this.getOwnerComponent().getShell();
			var componentModel = this.getModel("component");
			oMShell.setAppWidthLimited(!bState);
			if (componentModel) {
				componentModel.setProperty("/FULLSCREEN", !oMShell.getAppWidthLimited());
			}
		},

		getFullScreen: function() {
			return !this.getOwnerComponent().getShell().getAppWidthLimited();
		},

		/* *************** MULTI INPUT HELPER *************** */
		_createSuggestHandler: function(mSettings) {
			if (Device.system.desktop) {
				return function(oEvent) {
					//check if we should suggest at all
					var oControl = oEvent.getSource();
					if (oControl.getMaxTokens() && oControl.getMaxTokens() <= oControl.getTokens().length) {
						oControl.removeAllSuggestionItems();
						return;
					}

					var sToken = oEvent.getParameter("suggestValue");
					var oListTemplate = new ListItem({
						key: "{data>" + mSettings.key + "}",
						text: "{data>" + mSettings.text + "}",
						additionalText: mSettings.additionalText && "{data>" + mSettings.additionalText + "}"
					});

					var sSuggestPath = mSettings.path.replace("$suggestValue", jQuery.sap.encodeURL(sToken));
					var sSelect = mSettings.key + "," + mSettings.text;
					if (mSettings.additionalText) {
						sSelect = sSelect + "," + mSettings.additionalText;
					}

					oEvent.getSource().bindAggregation("suggestionItems", {
						path: sSuggestPath,
						template: oListTemplate,
						filters: mSettings.filters,
						sorter: mSettings.sorter,
						parameters: {
							select: sSelect
						}
					});
				};
			} else {
				// special handling for mobile as binding triggers a focusout and therefore a change of of the multiinput
				return function(oEvent) {
					//check if we should suggest at all
					var oControl = oEvent.getSource();
					if (oControl.getMaxTokens() && oControl.getMaxTokens() <= oControl.getTokens().length) {
						oControl.removeAllSuggestionItems();
						return;
					}

					var sToken = oEvent.getParameter("suggestValue");

					var sSuggestPath = mSettings.path.replace("$suggestValue", jQuery.sap.encodeURL(sToken));
					sSuggestPath = sSuggestPath.replace("data>", "");
					sSuggestPath = sSuggestPath.replace("object>", "");

					var sSelect = mSettings.key + "," + mSettings.text;
					if (mSettings.additionalText) {
						sSelect = sSelect + "," + mSettings.additionalText;
					}

					//coding on UI5 internal: avoid flickering, but also works w/o setting this flag
					oControl._bBindingUpdated = true;
					oControl.getModel("data").read(sSuggestPath, {
						filters: mSettings.filters,
						sorter: mSettings.sorter,
						success: function(oData) {
							oControl.removeAllSuggestionItems();
							// we cannot set all items at once, therefore we use 
							// 0..n-1 addAggregation w/o list update
							// n addSuggestionItem which triggers a list refresh
							for (var ii = 0; ii < oData.results.length - 1; ii++) {
								oControl.addAggregation("suggestionItems", new ListItem({
									key: oData.results[ii][mSettings.key],
									text: oData.results[ii][mSettings.text],
									additionalText: mSettings.additionalText && oData.results[ii][mSettings.additionalText]
								}), true);
							}
							if (oData.results.length > 0) {
								oControl.addSuggestionItem(new ListItem({
									key: oData.results[oData.results.length - 1][mSettings.key],
									text: oData.results[oData.results.length - 1][mSettings.text],
									additionalText: mSettings.additionalText && oData.results[oData.results.length - 1][mSettings.additionalText]
								}));
							}
						}
					});
				};
			}
		},

		/* *************** Action execution ****************** */

		/**
		 * Executes an action on a given object model
		 * @public
		 * @param oObjectModel
		 * @param sActionName
		 * @param {object}  (oOptions)    object with additional options (keys "messages", "parameters", "staticparameters")
		 *      messages : optional object for messages {
		 *          confirm : text key or function for confirmation messages
		 *          success : text key or function for success messages
		 *          error: text key or function for error messages
		 *      }
		 *      parameters: optional additional parameters in an JS object to be handed over to backend
		 *      staticparameters: optional parameters to be given in case the action should not be called on an instance
		 * @returns Promise
		 *      In case a confirmation is requested success is indicated also when cancel is pressed.
		 *      The response object contains an attribute "confirmationCancelled" when cancellation
		 *      has been pressed
		 */
		executeObjectAction: function(oObjectModel, sActionName, oOptions) {
			var that = this;
			var oMessageCallbacks = oOptions && oOptions.messages || {};
			var oParameters = oOptions && oOptions.parameters || {};
			var oStaticParam = oOptions && oOptions.staticparameters || null;
			var oExecutionPromise;

			function getMessageText(vInput, sDefault, oServiceResult) {
				if (!vInput) {
					return that.getText(sDefault);
				}
				if (typeof vInput === "function") {
					return vInput(oServiceResult);
				} else {
					return that.getText(vInput);
				}
			}

			function handleConcurrencyConflict() {
				if (!that._oConcurrentEditDialog) {
					var oResourceModel = that._getTextModel();
					// initial concurrecy state 
					that._oConcurrencyModel = oObjectModel;
					that._sActionName = sActionName;
					that._oConcurrentEditDialog = that.createFragment("sap.ino.vc.commons.fragments.ConcurrentEditDialog");
					that._oConcurrentEditDialog.setModel(oResourceModel, 'i18n');
					that.getView().addDependent(that._oConcurrentEditDialog);

				}
				that._oConcurrentEditDialog.open();
			}

			var fnExecute = function() {
				that.getView().setBusy(true);
				var oActionRequest;
				if (oStaticParam) {
					// in case the action is called statically (without model instance)
					oActionRequest = oObjectModel[sActionName].apply(oObjectModel, [oStaticParam, oParameters]);
				} else {
					// for calling with model instance
					oActionRequest = oObjectModel[sActionName].apply(oObjectModel, [oParameters]);
				}

				oActionRequest.always(function() {
					that.getView().setBusy(false);
				});

				oActionRequest.done(function(oResponse) {
					var sMsg = getMessageText(oMessageCallbacks.success, "MSG_SAVE_SUCCESS", oResponse);
					if (sMsg) {
						MessageToast.show(sMsg, {
							autoClose: false
						});
					}
				});
				oActionRequest.fail(function(oResponse) {
					if (oResponse) {
						if (oResponse.concurrencyConflict) {
							handleConcurrencyConflict();
						} else {

							var sMsg = getMessageText(oMessageCallbacks.error, "MSG_SAVE_USER_ERROR", oResponse);
							if (sMsg) {
								MessageToast.show(sMsg, {
									autoClose: false
								});
							}
						}
					}

				});
				return oActionRequest;
			};

			if (oMessageCallbacks.confirm) {
				var oDeferred = new jQuery.Deferred();
				MessageBox.confirm(getMessageText(oMessageCallbacks.confirm), {
					onClose: function(sDialogAction) {
						if (sDialogAction !== MessageBox.Action.OK) {
							// the parameter true means: I have been cancelled
							oDeferred.resolve({
								confirmationCancelled: true
							});
							return;
						} else {
							var oActionRequest = fnExecute();
							oActionRequest.done(oDeferred.resolve);
							oActionRequest.fail(oDeferred.reject);
						}
					}
				});
				oExecutionPromise = oDeferred.promise();
			} else {
				oExecutionPromise = fnExecute();
			}
			return oExecutionPromise;
		},

		//************handle Conflict*************

		onIngoreConflict: function() {
			if (this._oConcurrentEditDialog) {
				var oOption = {};
				oOption.parameters = {};
				oOption.parameters.bIgnoreConcurrencyConflict = true;

				this.executeObjectAction(this._sActionName, oOption);
				this._oConcurrentEditDialog.close();
			}

			this._cleanConcurrencyState();
		},

		onMergeConflict: function() {
			if (this._oConcurrentEditDialog) {
				this._oConcurrencyModel.mergeConcurrentChanges();
				this._oConcurrentEditDialog.close();
			}

			this._cleanConcurrencyState();
		},
		showLatestVestion: function() {
			var sObjectName, sPath, sKey, sLatestVersionURL;

			sObjectName = this._oConcurrencyModel.getObjectName();
			var oUIObjectConfigDefinition = UIObjectConfig.getDefinition(sObjectName);
			sPath = oUIObjectConfigDefinition.navigation.path;
			sKey = oUIObjectConfigDefinition.navigation.key;

			var oParameter = {};
			oParameter[sKey] = this._oConcurrencyModel.getKey();
			sLatestVersionURL = this.getNavigationLink(sPath, oParameter);
			var windower = window.open(sLatestVersionURL, "_blank");
			windower.opener = null;
		},

		onCancelConflict: function() {
			if (this._oConcurrentEditDialog) {
				this._oConcurrentEditDialog.close();
			}

			this._cleanConcurrencyState();
		},

		_cleanConcurrencyState: function() {

			this._oConcurrentEditDialog.destroy();

			delete this._oConcurrencyModel;
			delete this._sActionName;
			delete this._oConcurrentEditDialog;
		},

		getNavigationLink: function(sRouteName, oParameter) {
			return this.getOwnerComponent().getNavigationLink(sRouteName, oParameter);
		},

		/* *************** HELP *************** */

		setHelp: function() {
			if (!arguments || !arguments.length) {
				return false;
			}
			var text = '';
			for (var i = 0; i < arguments.length; i++) {
				text += this.getText("HELP_EXP_" + arguments[i]);
			}
			var oComponent = this.getOwnerComponent();
			oComponent.setHelpContent(text);
		},

		scrollDockElement: function(sPageId, sElementId, fBiasDefault, fOffsetDefault) {
			var that = this;
			var iInitOffset = 0;
			var iInitBias = 0;

			function scrollDockElement($oScrollContainer, $oControl) {
				var iCurrentOffset = parseInt($oScrollContainer.parent().find(".sapUxAPObjectPageWrapperTransform").css("padding-top"), 10);
				if (iInitOffset === 0) {
					iInitOffset = iCurrentOffset;
				}
				iCurrentOffset = iCurrentOffset === 0 ? iInitOffset : iCurrentOffset;
				var iCurrentBias = parseInt($oScrollContainer.find(".sapUxAPObjectPageHeaderDetails").height(), 10);
				if (iInitBias === 0) {
					iInitBias = iCurrentBias;
				}
				iCurrentBias = iCurrentBias === 0 ? iInitBias : iCurrentBias;
				var fOffset = fOffsetDefault !== undefined ? fOffsetDefault : iCurrentOffset;
				var fBias = fBiasDefault !== undefined ? fBiasDefault : iCurrentBias;
				if ($oScrollContainer.scrollTop() >= fBias) {
					$oControl.css("position", "absolute");
					$oControl.css("top", ($oScrollContainer.scrollTop() + fOffset) + "px");
				} else {
					$oControl.css("position", "relative");
					$oControl.css("top", 0);
				}
			}

			this.byId(sPageId).addEventDelegate({
				onAfterRendering: function(oEvent) {
					var $oScrollContainer = jQuery(oEvent.srcControl.getDomRef()).find(".sapUxAPObjectPageWrapper");
					$oScrollContainer.scroll(function() {
						scrollDockElement(jQuery(this), jQuery(that.byId(sElementId).getDomRef()));
					});
				}
			});
			this.byId(sElementId).addEventDelegate({
				onAfterRendering: function(oEvent) {
					var $oScrollContainer = jQuery(that.byId(sPageId).getDomRef()).find(".sapUxAPObjectPageWrapper");
					scrollDockElement($oScrollContainer, jQuery(oEvent.srcControl.getDomRef()));
				}
			});
		},

		attachListControlResized: function(oListControl) {
			if (oListControl) {
				return ResizeHandler.register(oListControl, this.onListControlResize);
			}
		},

		detachListControlResized: function(sResizeRegId) {
			if (sResizeRegId) {
				ResizeHandler.deregister(sResizeRegId);
			}
		},

		onListControlResize: function(oEvent) {
			var that = oEvent.control;
			var iWidth = oEvent.size.width;
			var iOldWidth = oEvent.oldSize ? oEvent.oldSize.width : -1;
			var aThresholds = [400, 500, 600, 700,
                800, 900, 1000,
                1100, 1200, 1300, Infinity];
			var aStyleClasses = ["sapInoListWidthXXXXS", "sapInoListWidthXXXS", "sapInoListWidthXXS", "sapInoListWidthXS",
                "sapInoListWidthS", "sapInoListWidthM", "sapInoListWidthL",
                "sapInoListWidthXL", "sapInoListWidthXXL", "sapInoListWidthXXXL", "sapInoListWidthXXXXL"];

			// closest index of old width
			var iOldIdx = aThresholds.reduce(function(iPrev, iCurr, iIdx) {
				if (iOldWidth >= iCurr) {
					return iIdx;
				} else {
					return iPrev;
				}
			}, 0);
			// closest index of current width in relation to aThresholds values
			var iClosestIdx = aThresholds.reduce(function(iPrev, iCurr, iIdx) {
				if (iWidth >= iCurr) {
					return iIdx;
				} else {
					return iPrev;
				}
			}, 0);

			if (iOldIdx !== iClosestIdx || iOldWidth === -1 || iOldWidth === 0) {
				// remove old class and add new
				for (var i = 0; i < aStyleClasses.length; i += 1) {
					that.removeStyleClass(aStyleClasses[i]);
				}
				that.addStyleClass(aStyleClasses[iClosestIdx]);
			}
		},

		/**
		 * Sets a specific client message to a target control
		 * It needs to manually reset with resetClientMessages
		 *
		 * @param oMessage : sap.ui.core.message.Message
		 * @param oTargetControl optional target input control to update
		 */
		setClientMessage: function(oMessage, oTargetControl) {
			this.resetClientMessages();

			var sTarget = oTargetControl && oTargetControl.getId() + "/value";
			oMessage.setTarget(sTarget);
			oMessage.setMessage(this.getText(oMessage.getCode()));
			// TODO: Open UI5 bug so that we can use the setter for the processor
			oMessage.processor = this._controlMessageProcessor;
			var aMessages = [oMessage];
			sap.ui.getCore().getMessageManager().addMessages(aMessages);
			this._previousClientMessages = aMessages;
		},

		/**
		 * Reset the message set in setClientMessage
		 */
		resetClientMessages: function(sTargetId) {
			var oMsgMgr = sap.ui.getCore().getMessageManager();
			var aData = oMsgMgr.getMessageModel().getData();
			if (aData.length > 0) {
				// fails if previous msg are not part of model data
				var aIntersect = jQuery.grep(this._previousClientMessages, function(oMessageData) {
					return jQuery.grep(aData, function(oData) {
						return oData.id === oMessageData.id && (!sTargetId || (sTargetId && oData.target && oData.target.indexOf(sTargetId) > -1));
					}).length > 0;
				});
				if (aIntersect.length > 0) {
					oMsgMgr.removeMessages(this._previousClientMessages);
					this._previousClientMessages = [];
				}
			}
		},

		/**
		 * was a "manual" client message set?
		 */
		hasClientMessages: function() {
			return this._previousClientMessages && this._previousClientMessages.length > 0;
		},

		/**
		 * Checks whether client error messages are present in the current view
		 * @returns {boolean}
		 */
		hasAnyClientErrorMessages: function() {
			this.enforceInputTypeValidations();
			var oMessageModel = this.getOwnerComponent().getModel("message");
			var aMessages = oMessageModel.getData();

			if (this.hasClientMessages()) {
				return true;
			}

			return aMessages.reduce(function(bPrevious, oMessage) {
				var sProcessorName = oMessage.processor.getMetadata().getName();
				return bPrevious || (sProcessorName === "sap.ui.core.message.ControlMessageProcessor" && oMessage.type === MessageType.Error);
			}, false);
		},

		/**
		 * Returns all controls which are ready to input
		 * @public
		 * @returns {Array.<Control>}
		 */
		getInputReadyControls: function(oV) {
			var oView = oV;
			if (!oView) {
				oView = this.getView();
			}
			var aControls = oView.findAggregatedObjects(true, function(oControl) {
				return (!oControl.getVisible || oControl.getVisible()) &&
					(!oControl.getEnabled || oControl.getEnabled()) &&
					(!oControl.getEditable || oControl.getEditable()) &&
					(oControl instanceof InputBase ||
						oControl instanceof Select ||
						oControl.getMetadata().getName() === "sap.ino.controls.MobileTextEditor" ||
						oControl.getMetadata().getName() === "sap.ui.richtexteditor.RichTextEditor" ||
						oControl.getMetadata().getName() === "sap.ino.controls.RichTextEditor"
					);
			});
			return aControls;
		},

		resetInputTypeValidations: function(oView) {
			sap.ui.getCore().getMessageManager().removeMessages(this.getViewMessages(oView));
		},

		hasMessages: function(oView) {
			var aViewMessages = this.getViewMessages(oView);
			if (aViewMessages && aViewMessages.length > 0) {
				return true;
			}
			return false;
		},

		getViewMessages: function(oView) {
			var aInputControls = this.getInputReadyControls(oView);
			var aViewMessages = [];
			jQuery.each(aInputControls, function(iIndex, oControl) {
				if (oControl.fireValidationSuccess) {
					oControl.fireValidationSuccess({
						element: oControl
					}, false, true);
				}
				if (oControl.setValueState) {
					oControl.setValueState(sap.ui.core.ValueState.None);
				}
				// collect the messages caused by this view
				// and that have to be removed
				var oBinding;
				if (oControl.getValue) {
					oBinding = oControl.getBinding("value");
				} else if (oControl.getSelectedKey) {
					oBinding = oControl.getBinding("selectedKey");
				}
				var aControlMessages = oBinding && oBinding.getDataState() && oBinding.getDataState().getMessages();
				if (aControlMessages && aControlMessages.length > 0) {
					aViewMessages = aViewMessages.concat(aControlMessages);
				}
			});
			return aViewMessages;
		},

		/**
		 * enforces type validations of input controls which have
		 * not been touched by users aldready, e.g. mandatory fields
		 **/
		enforceInputTypeValidations: function() {
			var that = this;
			var aInputControls = this.getInputReadyControls();
			jQuery.each(aInputControls, function(iIndex, oControl) {
				if (oControl.getDateValue && oControl.isBound("dateValue")) {
					oControl.updateModelProperty("dateValue", oControl.getDateValue(), oControl.getDateValue());
				} else if (oControl.getSelectedKey && oControl.mProperties && oControl.mProperties.hasOwnProperty("selectedKey")) {
					oControl.updateModelProperty("selectedKey", oControl.getSelectedKey(), oControl.getSelectedKey());
				} else if (oControl._oEditor && oControl._oEditor.getContent) { //walk arround for incident 1670549550
					if (oControl._oEditor.getBody()) {
						oControl.updateModelProperty("value", oControl._oEditor.getContent(), oControl._oEditor.getContent());
					}
				} else if (oControl.getValue) {
					oControl.updateModelProperty("value", oControl.getValue(), oControl.getValue());

					if (oControl instanceof MultiInput) {
						if (oControl.getValue()) {
							// there must not be any value but only tokens
							oControl.fireValidationError({
								element: oControl,
								property: "value",
								message: that.getText("MSG_MULTI_INPUT_INVALID_VALUE")
							}, false, true);
						} else {
							oControl.fireValidationSuccess({
								element: oControl,
								property: "value"
							}, false, true);
						}
					}
				} else {
					console.assert(false, "no property found to enforceInputTypeValidations of sap.ino.vc.commons.BaseObjectController");
				}
			});
		},

		getModuelModel: function() {
			var oModuleBundle = new ResourceModel({
				// INM-418: add timestamp to retrieve this resource from backend instead of local cache every time when terms and conditions info updated.
				bundleUrl: Configuration.getResourceBundleURL("moduletexts") + '?t=' + Date.now()
			});
			return oModuleBundle;
		},

		onTermsConditionsClose: function() {
			var that = this;

			var oTermData = {
				"TERM_CODE": this.getModel('module').getProperty("sap.ino.config.TERM_CODE"),
				"TERM_CHANGED_AT": this.getModel('module').getProperty('sap.ino.config.TERM_CHANGED_AT')
			};

			var fnTermAcceptCallBack = Configuration.getUserModel().getProperty("/data/TERMACCEPTCALLBACK");

			var fnAcceptTermConditionSucess = function() {
				that.getTermsDialog().close();

				Configuration.getUserModel().setProperty("/data/TERM_ACCEPTED", 1);

				if (fnTermAcceptCallBack) {
					fnTermAcceptCallBack();
				}
			};

			var fnAcceptTermConditionFailed = function() {
				MessageToast.show(that.getText("USER_TERM_AND_CONDITIONS_FAILD"));
			};

			//"1" Active Term & Condtion,  "0" , Deactive Term & Conditioan
			var sTermConditionActive = Configuration.getSystemSetting("sap.ino.config.TERMS_AND_CONDITIONS_ACTIVE");
			var sTermCode = Configuration.getSystemSetting("sap.ino.config.TERMS_AND_CONDITIONS_TEXT");

			if (sTermConditionActive === '1' && sTermCode) {
				//this._setUerTermCondition(oTermData, fnAcceptTermCondition);
				this.setUserTermCondition(oTermData, fnAcceptTermConditionSucess, fnAcceptTermConditionFailed);
			} else {
				this.getTermsDialog().close();

				if (fnTermAcceptCallBack) {
					fnTermAcceptCallBack();
				}
			}

		},

		onTermConditionSelected: function(oEvent) {
			var bSelected = oEvent.getParameter("selected");

			Configuration.getUserModel().setProperty("/data/USER_ACCEPTED", bSelected ? 1 : 0);

		},

		getTermsDialog: function(oController) {

			if (!this._oTermsDialog) {
				this._oTermsDialog = sap.ui.xmlfragment("sap.ino.vc.shell.fragments.TermsDialog", oController);
				//set i18n config model
				this._oTermsDialog.setModel(this._oComponent.getModel("i18n"), 'i18n');
				this._oTermsDialog.setModel(Configuration.getSystemSettingsModel(), 'config');

				oController.getView().addDependent(this._oTermsDialog);
			}

			return this._oTermsDialog;
		},
		setUserTermCondition: function(oData, fnSuccessAccept, fnFailedAccept) {
			var sTermServiceURI;
			if (!fnSuccessAccept) {
				return;
			}
			if (!fnFailedAccept) {
				return;
			}

			sTermServiceURI = "/" + Configuration.getSystemSetting("sap.ino.config.URL_PATH_XS_TERM_ACCEPT");

			jQuery.ajax({
				url: Configuration.getBackendRootURL() + sTermServiceURI,
				headers: {
					"X-CSRF-Token": Configuration.getXSRFToken()
				},
				method: "POST",
				cache: false,
				data: JSON.stringify(oData),
				success: fnSuccessAccept,
				error: fnFailedAccept
			});
		},

		checkObjectExists: function(sObjectName, nId) {
			var that = this;
			that.setBusy(true);
			jQuery.ajax({
				url: Configuration.getBackendRootURL() + "/sap/ino/xs/rest/community/objectCheck.xsjs",
				headers: {
					"X-CSRF-Token": Configuration.getXSRFToken()
				},
				method: "POST",
				cache: false,
				data: JSON.stringify({
					"ObjectName": sObjectName,
					"ID": nId
				}),
				success: function(oResponse) {
					that.setBusy(false);
					if (!oResponse) {
						that.setViewProperty("/insufficientObjectExists", {
							EXISTS: false
						});
						return;
					}
					that.setViewProperty("/insufficientObjectExists", {
						EXISTS: true,
						ID: oResponse.ID,
						REF_ID: oResponse.REF_ID,
						REF_NAME: oResponse.REF_NAME,
						OBJECT_NAME: sObjectName
					});
				},
				error: function() {
					that.setBusy(false);
					that.setViewProperty("/insufficientObjectExists", {
						EXISTS: false
					});
				}
			});
		}
	});
});
}; // end of sap/ino/vc/commons/BaseController.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.commons.BaseHomepageController') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
 /* global _:true */
jQuery.sap.declare('sap.ino.vc.commons.BaseHomepageController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.ViewType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/commons/BaseHomepageController",[
    "./BaseController",
    "sap/ui/core/ResizeHandler",
    "sap/ui/core/mvc/ViewType",
    "sap/ui/model/json/JSONModel",
    "sap/ino/vc/commons/mixins/GlobalSearchMixin",
    "sap/ino/commons/application/Configuration"
], function(BaseController, ResizeHandler, ViewType, JSONMODEL, GlobalSearchMixin, Configuration) {

	/**
	 * Base Controller to use for a responsive homepage design with different layouts.
	 * Supports different subviews to be displayed.
	 *
	 */

	return BaseController.extend("sap.ino.vc.commons.BaseHomepageController", jQuery.extend({}, GlobalSearchMixin, {

		onInit: function() {
			BaseController.prototype.onInit.apply(this, arguments);
			this._sResizeRegId = ResizeHandler.register(this.getView(), this._onResize);
		},

		onExit: function() {
			if (this._sResizeRegId) {
				ResizeHandler.deregister(this._sResizeRegId);
			}
		},

		// this function is only called if the extending controller implements the top level page facet
		onRouteMatched: function(oEvent) {
		    var that = this;
			var oArgs = oEvent.getParameter("arguments");
			var iId = parseInt(oArgs.id, 10);
			this.openDisplayViewonRouteMatched(iId);
		},

		// this function is only called if the extending controller implements the top level page facet
		onBeforeHide: function() {
			if (this.getCurrentRoute() !== "wall") {
				this._bFullscreenReset = true;
				this.setFullScreen(this._bPreviouslyFullscreen);
			}
		},

		onAfterShow: function() {
			this.initFullScreen();
			var oCurrentView = this.getCurrentView();
			if (oCurrentView && oCurrentView.getController()) {
				var oCurrentController = oCurrentView.getController();

				if (typeof oCurrentController.onAfterShow === "function") {
					oCurrentController.onAfterShow();
				}
			}
		},

		getDisplayView: function() {
			// needs to be overwritten
			jQuery.sap.assert(false, "getDisplayView of sap.ino.vc.commons.BaseHomepageController must not be called");
		},

		_initDisplayView: function(oEvent) {
			this._onResize({
				control: this.getView(),
				size: {
					width: this.getView().$().width()
				}
			});
		},
		
		openDisplayView: function(iId) {
			var sDisplayView = this.getDisplayView(iId);
			this.setCurrentView(sDisplayView);
		},

		openDisplayViewonRouteMatched: function(iId) {
			var sDisplayView;
			var that = this;
			
			var fnInit = function() {
				if (typeof that.onBeforeDisplayViewShow === "function") {
					that.onBeforeDisplayViewShow();
				}
				var oView = that.getCurrentView();
				if (typeof oView.getController().show === "function") {
					oView.getController().show(that.getView());
				}
			};

			if (iId) {
			    var sPath = "/CampaignPrivilege(" + iId + ")";
			    this.getModel("data").read(sPath, {
					async: true,
					success: function(oData) {
						that.getModel("component").setProperty("/REGISTRABLE", oData.REGISTRATION_PRIVILEGE ? true : false);
						that.getModel("component").setProperty("/COMMUNITY", oData.COMMUNITY_PRIVILEGE ? true : false);
						sDisplayView = that.getDisplayView(iId);
				        that.setCurrentView(sDisplayView);
				        that.bindDefaultODataModel(iId, fnInit);
					},
					error: function() {
					    that.getModel("component").setProperty("/REGISTRABLE", false);
						that.getModel("component").setProperty("/COMMUNITY", true);
						sDisplayView = that.getDisplayView(iId);
				        that.setCurrentView(sDisplayView);
				        that.bindDefaultODataModel(iId, fnInit);
					}
				});	
			} else {
			  sDisplayView = this.getDisplayView(iId);
			  this.setCurrentView(sDisplayView); 
			  this.bindDefaultODataModel(iId, fnInit);
			}
		},

		initFullScreen: function() {
			// only read previous setting if we already restored it
			// routing from campaign homepage to campaign homepage would not restore, as view is not hidden
			if (this._bFullscreenReset === undefined || this._bFullscreenReset === true) {
				this._bPreviouslyFullscreen = this.getFullScreen();
			}
			this.setFullScreen(true);
			this._bFullscreenReset = false;
		},

		getCurrentView: function() {
			var aContent = this.getView().getContent();
			var oPage = (aContent && aContent.length > 0) ? aContent[0] : undefined;
			if (oPage) {
				if (oPage.getContent().length > 0) {
					return oPage.getContent()[0];
				}
			}
			return undefined;
		},

		getCurrentController: function() {
			var oView = this.getCurrentView();
			return oView ? oView.getController() : undefined;
		},

		setCurrentView: function(sViewName) {
			var aContent = this.getView().getContent();
			//var that = this;
			var oPage = (aContent && aContent.length > 0) ? aContent[0] : undefined;
			if (oPage) {
				var oCurrentView = this.getCurrentView();
				var oView = this._mViews ? this._mViews[sViewName] : undefined;
				if (oView) {
					oPage.removeContent(oCurrentView);
					oPage.addContent(oView);
				} else {
					if (!oCurrentView) {
						oView = this.createView({
							type: ViewType.XML,
							viewName: sViewName
						});
						oView.attachAfterRendering(this._initDisplayView, this);
						oPage.addContent(oView);
					} else if (oCurrentView && oCurrentView.getViewName() !== sViewName) {
						// oCurrentView.detachAfterRendering(this._initDisplayView, this);
						oView = this.createView({
							type: ViewType.XML,
							viewName: sViewName
						});
						oView.attachAfterRendering(this._initDisplayView, this);
						oPage.removeContent(oCurrentView);
						oPage.addContent(oView);
					}
					this._mViews = this._mViews ? this._mViews : {};
					this._mViews[sViewName] = oView;
				}
			}
		},

		switchView: function() {
			var bShowBackoffice = this.getModel("component").getProperty("/SHOW_BACKOFFICE");
			var iId = this.iCampaignId ? this.iCampaignId : null;
			bShowBackoffice = !bShowBackoffice;
			this.getModel("component").setProperty("/SHOW_BACKOFFICE", bShowBackoffice);
			var selectedCategory = this.getModel('search').getProperty('/selectedCategory');
            if(!bShowBackoffice){
             this._removeCategory('campaign-idealistbycompany');
             this._removeCategory('idealistbycompany');
            this.getModel('search').setProperty('/selectedCategory', selectedCategory);
            }else{
                this._addCategory({
            			key: 'idealistbycompany',
            			value: Configuration.getGroupConfiguration().DISPLAY_LABEL
            		});
                this.getModel('search').setProperty('/selectedCategory', selectedCategory);
            }
			this.openDisplayView(iId);

			var oCurrentView = this.getCurrentView();
			var oCurrentController = oCurrentView.getController();

			if (typeof oCurrentController.show === "function") {
				oCurrentController.show(this.getView());
			}

			oCurrentController.setViewFocus();
		},

		setViewFocus: function() {
			if (this.getCurrentController()) {
				this.getCurrentController().setViewFocus();
			}
		},

		updateLayout: function(sLayout) {
			var bUpdated = false;
			if (this.getCurrentController()) {
				var mLayout = this.getCurrentController().getLayout(sLayout);

				for (var sContainer in mLayout) {
					if (mLayout.hasOwnProperty(sContainer)) {
						var sControl = mLayout[sContainer];
						var oContainer = this.getCurrentView().byId(sContainer);
						if (oContainer) {
							var oControl = this.getCurrentView().byId(sControl);
							if (oControl) {
								oControl.removeStyleClass("sapInoInvisible");

								if (oContainer.indexOfItem(oControl) === -1) {
									oContainer.addItem(oControl);
								}
							} else {
								var aItems = oContainer.getItems();
								// we only support one item per container
								var oItem = aItems.length > 0 ? aItems[0] : undefined;
								if (oItem) {
									oItem.addStyleClass("sapInoInvisible");
								}
							}
							bUpdated = true;
						}
					}
				}
			}
			return bUpdated;
		},

		_onResize: function(oEvent) {
			var oView = oEvent.control;
			var that = oView.getController();
			var oCurrentController = that.getCurrentController();
			var sLayoutPrefix = (typeof that.getLayoutPrefix === "function" && that.getLayoutPrefix()) ? that.getLayoutPrefix() : undefined;
			var iWidth = oEvent.size.width;
			var sNewLayout;
			var iOldWidth = oEvent.oldsize ? oEvent.oldsize.width : -1;

			if (iWidth !== iOldWidth) {

				if (iWidth < 800) {
					sNewLayout = "XS";
				} else if (iWidth < 1100) {
					sNewLayout = "S";
				} else if (iWidth < 1350) {
					sNewLayout = "M";
				} else if (iWidth < 1700) {
					sNewLayout = "L";
				} else {
					sNewLayout = "XL";
				}

				if (oCurrentController && (!oCurrentController._sCurrentLayout || oCurrentController._sCurrentLayout !== sNewLayout)) {
					if (sLayoutPrefix) {
						oView.removeStyleClass(sLayoutPrefix + "XS");
						oView.removeStyleClass(sLayoutPrefix + "S");
						oView.removeStyleClass(sLayoutPrefix + "M");
						oView.removeStyleClass(sLayoutPrefix + "L");
						oView.removeStyleClass(sLayoutPrefix + "XL");

						oView.addStyleClass(sLayoutPrefix + sNewLayout);
					}

					oView.removeStyleClass("sapInoBaseHomepageXS");
					oView.removeStyleClass("sapInoBaseHomepageS");
					oView.removeStyleClass("sapInoBaseHomepageM");
					oView.removeStyleClass("sapInoBaseHomepageL");
					oView.removeStyleClass("sapInoBaseHomepageXL");

					oView.addStyleClass("sapInoBaseHomepage" + sNewLayout);

					if (that.updateLayout(sNewLayout)) {
						var sOldLayout = oCurrentController._sCurrentLayout;
						oCurrentController._sCurrentLayout = sNewLayout;
						// if "listener" is existing, call it
						if (typeof oCurrentController.onResizeLayoutChange === "function") {
							oCurrentController.onResizeLayoutChange(sOldLayout, sNewLayout);
						}

					}
				}
			}
		},

		/**
		 * @overrides BaseController.setObjectExists
		 */
        setObjectExists : function(bObjectExists) {
            // due to view nesting we have to set the flag into the view model of the current view
            var oController = this.getCurrentController();
            if (oController) {
                oController.setViewProperty("/objectExists", bObjectExists);
            }
        },

		/**
		 * @overrides BaseController.getObjectExists
		 */
        getObjectExists : function(bObjectExists) {
            var oController = this.getCurrentController();
            if (oController) {
                return oController.getViewProperty("/objectExists");
            } else {
                return undefined;
            }
        },
        
		/**
		 * Binds view to object instance of oData model
		 * Afterwards you can bind on the view with the named model "data"
		 * @param iId : Integer
		 * @param fnCallback : function
		 */
		bindDefaultODataModel: function(iId, fnCallback) {
			var that = this;

			var sEntitySet = (typeof this.getODataEntitySet === "function") ? this.getODataEntitySet() : undefined;
			if (sEntitySet && iId > 0) {
				this.getView().bindElement({
					path: "data>/" + sEntitySet + "(" + iId + ")",
					events: {
						dataRequested: function() {
							jQuery.each(that.getBusyControls(), function(iIdx, oControl) {
								if (jQuery.type(oControl.setBusy) === "function") {
									oControl.setBusy(true);
								}
							});
						},
						dataReceived: function(oEvent) {
							jQuery.each(that.getBusyControls(), function(iIdx, oControl) {
								if (jQuery.type(oControl.setBusy) === "function") {
									oControl.setBusy(false);
								}
							});

                            if (oEvent.getParameter("data") === undefined) {
                                // error happened when reading the object
                                that.setObjectExists(false);
                            } else {
                                that.setObjectExists(true);
                            }

							if (typeof fnCallback === "function") {
								fnCallback.apply(that);
							}
						},
						change: function() {
						    // "dataReceived" might be called too late for not found objects
						    // So we it whether an object exists by checking if the model has data
						    // with the given path
						    var bObjectExists = this.getModel().getProperty(this.getPath()) !== undefined;
						    that.setObjectExists(bObjectExists);
						}
					}
				});

				// if no request is needed, immediately trigger the callback
				if (typeof fnCallback === "function") {
					var oContext = this.getView().getBindingContext("data");
					if (oContext && oContext.getPath() === ("/" + sEntitySet + "(" + iId + ")")) {
						fnCallback.apply(that);
					}
				}

				return true;
			}

			if (typeof fnCallback === "function") {
				fnCallback.apply(that);
			}

			return false;
		}
	}));
});
}; // end of sap/ino/vc/commons/BaseHomepageController.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.commons.BootStrapError.controller') ) {
jQuery.sap.declare('sap.ino.vc.commons.BootStrapError.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.resource.ResourceModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/commons/BootStrapError.controller",[
   "sap/ino/vc/commons/BaseController",
   "sap/ui/model/resource/ResourceModel",
    "sap/ui/model/json/JSONModel",
   "sap/ino/commons/application/Configuration"
], function(Controller, ResourceModel, JSONModel, Configuration) {
	"use strict";

	return Controller.extend("sap.ino.vc.commons.BootStrapError", {
		onInit: function() {

			Controller.prototype.onInit.apply(this, arguments);

			var sBundleURL = Configuration.getResourceBundleURL("nguii18n");
			if (sBundleURL) {
			    var oBundle  = new ResourceModel({
				    bundleUrl: sBundleURL
			    });
			}

			var oData;
			if (Configuration.userErrorMessage) {
				oData = {
					message: Configuration.userErrorMessage 
				};
			} else {
			    var MaintenanceMessage = oBundle && oBundle.getResourceBundle().getText("GENERAL_APPLICATION_TIT_ERROR_SETUP_INCOMPLETE");
				oData = {
					message: MaintenanceMessage
				};
			}
			var oModel = new JSONModel(oData);
			this.getView().setModel(oModel, "error");
		},

		onLogout: function() {
			jQuery.ajax({
				url: Configuration.getBackendRootURL() + "/sap/hana/xs/formLogin/token.xsjs",
				headers: {
					"X-CSRF-Token": "Fetch"
				},
				success: function(res, status, xhr) {
					var sToken = xhr.getResponseHeader("X-CSRF-Token");
					jQuery.ajax({
						url: Configuration.getBackendRootURL() + "/sap/hana/xs/formLogin/logout.xscfunc",
						headers: {
							"X-CSRF-Token": sToken
						},
						type: "post",
						contentType: "application/xml",
						success: function() {
							window.location = Configuration.getBackendRootURL() +
								"/sap/hana/xs/formLogin/login.html?x-sap-origin-location=" + encodeURIComponent(window.location.pathname) + encodeURIComponent(
									window.location.hash);
						}
					});
				}
			});

		}
	});
});
}; // end of sap/ino/vc/commons/BootStrapError.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.commons.mixins.ClipboardMixin') ) {
jQuery.sap.declare('sap.ino.vc.commons.mixins.ClipboardMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/vc/commons/mixins/ClipboardMixin",[
    "sap/ino/commons/models/core/ClipboardModel",
    "sap/ino/commons/models/object/User",
    "sap/ino/commons/models/object/Idea"
    ], 
    function(ClipboardModel, User, Idea) {
    "use strict";

    /**
     * @class
     * Mixin that provides common functionality for Clipboard handling
     */
    var ClipboardMixin = function() {
        throw "Mixin may not be instantiated directly";
    };
    
    ClipboardMixin._getClipboardModel = function() {
        if (!this._oClipboardModel) {
            this._oClipboardModel = this.getModel("clipboard");
        }
        return this._oClipboardModel;
    };
    
    ClipboardMixin.formatIsIdeaInClipboard = function(iIdeaId) {
        var oClipboardModel = this._getClipboardModel();
        if (oClipboardModel) {
            return oClipboardModel.getProperty("/enabled") && oClipboardModel.isInClipboard(Idea, iIdeaId);
        } else {
            return false;
        }
    };
    
    ClipboardMixin.formatHasIdeasInClipboard = function() {
        var oClipboardModel = this._getClipboardModel();
        return oClipboardModel ? oClipboardModel.getProperty("/enabled") && !oClipboardModel.isClipboardEmpty(Idea) : false;
    };
    
    ClipboardMixin.formatHasOtherIdeasInClipboard = function(iIdeaId) {
        var oClipboardModel = this._getClipboardModel();
        var bHasMoreIdeas = oClipboardModel.getObjectKeys(Idea).filter(function (iTempIdeaId) {
            return iTempIdeaId !== iIdeaId;
        }).length > 0;
        return oClipboardModel ? oClipboardModel.getProperty("/enabled") && bHasMoreIdeas : false;
    };
    
    ClipboardMixin.formatIdeasInClipboardAndParam = function() {
        for (var i = 0; i < arguments.length; i += 1) {
            if (!arguments[i]) {
                return false;
            }
        }
        return this.formatHasIdeasInClipboard();
    };

    ClipboardMixin.formatIdeaPinTooltip = function(iIdeaId) {
        var oClipboardModel = this._getClipboardModel();
        if (oClipboardModel) {
            return oClipboardModel.isInClipboard(Idea, iIdeaId) ? this.getText("CLIPBOARD_BTN_TOOLTIP_IDEA_REMOVE") : this.getText("CLIPBOARD_BTN_TOOLTIP_IDEA_ADD");
        } else {
            return "";
        }
    };
    
    ClipboardMixin.formatIsUserInClipboard = function(iIdentityId) {
        var oClipboardModel = this._getClipboardModel();
        if (oClipboardModel) {
            return oClipboardModel.getProperty("/enabled") && oClipboardModel.isInClipboard(User, iIdentityId);
        } else {
            return false;
        }
    };
    
    ClipboardMixin.formatHasUsersInClipboard = function() {
        var oClipboardModel = this._getClipboardModel();
        return oClipboardModel ? oClipboardModel.getProperty("/enabled") && !oClipboardModel.isClipboardEmpty(User) : false;
    };
    
    ClipboardMixin.onIdeaPinPressed = function(oEvent) {
        var oClipboardModel = this._getClipboardModel();
        var oSource = oEvent.getSource();
        var sModel = oSource.data("model") || "data";
        var iIdeaId = oSource.getBindingContext(sModel).getProperty("ID");
        var sName = oSource.getBindingContext(sModel).getProperty("NAME");
        var bPinned = oSource.getPressed();
        if (oClipboardModel && iIdeaId) {
            var bAlreadyPinned = oClipboardModel.isInClipboard(Idea, iIdeaId);
            if (bPinned && !bAlreadyPinned) {
                oClipboardModel.add(Idea, iIdeaId, sName);
            } else if (!bPinned && bAlreadyPinned) {
                oClipboardModel.remove(Idea, iIdeaId);
            }
        }
    };
    
    ClipboardMixin.onUserPinPressed = function(oEvent) {
        var oClipboardModel = this._getClipboardModel();
        var iIdentityId = oEvent.getParameter("identityId");
        var sUserName = oEvent.getParameter("userName");
        var bPinned = oEvent.getParameter("pinned");
        if (oClipboardModel && iIdentityId) {
            var bAlreadyPinned = oClipboardModel.isInClipboard(User, iIdentityId);
            if (bPinned && !bAlreadyPinned) {
                oClipboardModel.add(User, iIdentityId, sUserName);
            } else if (!bPinned && bAlreadyPinned) {
                oClipboardModel.remove(User, iIdentityId);
            }
        }
    };

    return ClipboardMixin;
});
}; // end of sap/ino/vc/commons/mixins/ClipboardMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.commons.mixins.ExtensibilityMixin') ) {
jQuery.sap.declare('sap.ino.vc.commons.mixins.ExtensibilityMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.ValueState'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.Input'); // unlisted dependency retained
jQuery.sap.require('sap.m.CheckBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Select'); // unlisted dependency retained
jQuery.sap.require('sap.m.DatePicker'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ListItem'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/commons/mixins/ExtensibilityMixin",[
    "sap/ino/commons/models/aof/MetaModel",
    "sap/ino/commons/models/core/CodeModel",
    "sap/ino/commons/util/SmartControl",
    "sap/ino/commons/util/UIObjectConfig",
    "sap/ui/core/ValueState",
    "sap/ui/core/format/DateFormat",
    "sap/m/Label",
    "sap/m/Input",
    "sap/m/CheckBox",
    "sap/m/Select",
    "sap/m/DatePicker",
    "sap/ui/core/ListItem"
], function(MetaModel, CodeModel, SmartControl, UIObjectConfig, ValueState, DateFormat, Label, Input, CheckBox, Select, DatePicker, ListItem) {
    "use strict";

    /**
     * @class
     * Mixin that provides common functionality for extensibility handling
     */
    var ExtensibilityMixin = function() {
        throw "Mixin may not be instantiated directly";
    };

    var DateFormatter = DateFormat.getInstance({pattern: "YYYY-MM-dd"});
    
    // Array of ordered extension field names of type String, e.g ["_INT_02", "_TEXT_01"]
    ExtensibilityMixin.sortExtensionFields = [];
    // Array of ordered extension field names of type String, e.g ["_INT_02", "_TEXT_01"] 
    ExtensibilityMixin.filterExtensionFields = [];

    ExtensibilityMixin._extensibilityExtensionFieldSorter = function() {
        var that = this;
        var aExtensionSorter = [];
        var oCustomData = this.getView().data();
        if (!oCustomData["aofObject"] && this.getView().getContent().length > 0) {
            oCustomData = this.getView().getContent()[0].data();
        }
        if (oCustomData["aofObject"]) {
            var oMetaData = MetaModel.getApplicationObjectMetadata(oCustomData["aofObject"]);
            if (oMetaData.nodes.Extension) {
                jQuery.each(that.sortExtensionFields, function(iIndex, sExtensionField) {
                    if (sExtensionField === "_ID" || sExtensionField === "_OBJECT_TYPE_CODE") {
                        return;
                    }
                    if (oMetaData.nodes.Extension.attributes[sExtensionField]) {
                        var oAttribute = oMetaData.nodes.Extension.attributes[sExtensionField];
                        aExtensionSorter.push({
                            TEXT : oMetaData.name + ".Extension." + oAttribute.name,
                            ACTION : oAttribute.name,
                            DEFAULT_ORDER : "ASC"
                        });
                    }
                });                
            }
        }
        return aExtensionSorter;
    };

    ExtensibilityMixin._extensibilityExtensionFilterItems = function(oFilterItemsLayout) {
        var that = this;
        var oCustomData = this.getView().data();
        if (!oCustomData["aofObject"] && this.getView().getContent().length > 0) {
            oCustomData = this.getView().getContent()[0].data();
        }
        if (oCustomData["aofObject"]) {
            var oMetaData = MetaModel.getApplicationObjectMetadata(oCustomData["aofObject"]);
            if (oMetaData.nodes.Extension) {
                jQuery.each(that.filterExtensionFields, function(iIndex, sExtensionField) {
                    if (sExtensionField === "_ID" || sExtensionField === "_OBJECT_TYPE_CODE") {
                        return;
                    }
                    if (oMetaData.nodes.Extension.attributes[sExtensionField]) {
                        var oAttribute = oMetaData.nodes.Extension.attributes[sExtensionField];
                        var sIsVisibleExpression = "{= ${user>/privileges/sap.ino.ui::backoffice.access} && ${view>/List/MANAGE} === true }"; 
                        var oControl;
                        
                        switch (oAttribute.dataType) {
                            case "TIMESTAMP":
                                // Timestamp type is not supported for filtering
                                oControl = null;
                                break;
                            case "DATE":
                                oControl = new DatePicker({
                                    visible : sIsVisibleExpression,
                                    width : "100%",
                                    value : "{view>/List/EXTENSION/" + oAttribute.name + "}",
                                    change : function(oEvent) {
                                        if (oEvent.getParameter("valid")) {
                                            oEvent.getSource().setValueState(ValueState.None);
                                            var sValue = oEvent.getSource().getDateValue();
                                            sValue = DateFormatter.format(sValue);
                                            that.setViewProperty("/List/EXTENSION/" + oAttribute.name, sValue);
                                            that.navigateIntern(that.getQuery(), true, true);
                                        } else {
                                            oEvent.getSource().setValueState(ValueState.Error);
                                        }
                                    }
                                });
                                break;
                            case "TINYINT":
                                oControl = new CheckBox({
                                    visible : sIsVisibleExpression,
                                    width : "100%",
                                    selected : {
                                        path : "view>/List/EXTENSION/" + oAttribute.name,
                                        formatter : function(vValue) {
                                            return vValue === 1 || vValue === "1";
                                        }
                                    },
                                    select : function(oEvent) {
                                        var bSelected = oEvent.getParameter("selected");
                                        that.setViewProperty("/List/EXTENSION/" + oAttribute.name, bSelected ? 1 : null);
                                        that.navigateIntern(that.getQuery(), true, true);
                                    }
                                });
                                break;
                            default:
                                oControl = new Input({
                                    visible : sIsVisibleExpression,
                                    value : "{view>/List/EXTENSION/" + oAttribute.name + "}",
                                    change : function(oEvent) {
                                        that.navigateIntern(that.getQuery(), true, true);
                                    },
                                    width : "100%"
                                });
                                break;                                
                        }
                        
                        if (oAttribute.foreignKeyTo && !!UIObjectConfig.getDefinition(oAttribute.foreignKeyTo)) {
                            // Foreign Key to object is not supported for filtering
                            oControl = null;
                        }
                        
                        if ((oAttribute.customProperties && oAttribute.customProperties.valueOptionList) || 
                            (oAttribute.foreignKeyTo && !UIObjectConfig.getDefinition(oAttribute.foreignKeyTo))) {
                            var sCode = oAttribute.foreignKeyTo;
                            if (oAttribute.customProperties && oAttribute.customProperties.valueOptionList) {
                                sCode = "sap.ino.xs.object.basis.ValueOptionList.Root_" + oAttribute.customProperties.valueOptionList;
                            }
                            oControl = new Select({
                                visible : sIsVisibleExpression,
                                selectedKey : "{view>/List/EXTENSION/" + oAttribute.name + "}",
                                change : function(oEvent) {
                                    that.navigateIntern(that.getQuery(), true, true);
                                },
                                items : {
                                    path : "code>/" + sCode,
                                    template : new ListItem({
                                        key : {
                                            path : "code>CODE"
                                        },
                                        text : {
                                            path : "code>CODE",
                                            formatter : CodeModel.getFormatter(sCode)
                                        },
                                        tooltip : {
                                            path : "code>CODE",
                                            formatter : CodeModel.getLongTextFormatter(sCode)
                                        }
                                    }),
                                    sorter: { path: 'CODE' },
                                    parameters : {
                                        includeEmptyCode : true
                                    }
                                },
                                width : "100%"
                            }); 
                        }
                        
                        if (oControl) {
                            oControl.addStyleClass("sapUiSmallMarginBottom");
                            var oLabel = new Label({
                                text : "{i18n>" + oMetaData.name + ".Extension." + oAttribute.name + "}",
                                visible : sIsVisibleExpression
                            });
                            if (oControl.addAriaLabelledBy) {
                                oControl.addAriaLabelledBy(oLabel);
                            }
                            oFilterItemsLayout.addContent(oLabel);
                            oFilterItemsLayout.addContent(oControl);
                        }                        
                    }
                });
            }
        }
    };

    return ExtensibilityMixin;
});
}; // end of sap/ino/vc/commons/mixins/ExtensibilityMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.commons.mixins.FollowMixin') ) {
jQuery.sap.declare('sap.ino.vc.commons.mixins.FollowMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/commons/mixins/FollowMixin",[
    "sap/ino/commons/models/aof/PropertyModel",
    "sap/m/MessageToast",
    "sap/ino/commons/models/object/IdeaFollow",
    "sap/ino/commons/models/object/CampaignFollow",
    "sap/ino/commons/models/object/TagFollow",
    "sap/ui/model/json/JSONModel"
], function(PropertyModel, MessageToast, IdeaFollow, CampaignFollow, TagFollow, JSONModel) {
    "use strict";
    
    var FollowMixin = function() {
        throw "Mixin may not be instantiated directly";
    };
    
    FollowMixin.onFollow = function(Event){
        var self = this;
        var value = Event.getParameter('value');
        var type = Event.getParameter('type');
        var objectId = Event.getParameter('objectId');
        var followService;
        var showMsg = value ? 'FOLLOW_REMOVE_FOLLOW_SUCCESS' : 'FOLLOW_MSG_FOLLOW_SUCCESS'; 
        var followButton = Event.getSource();
//         if (!this.oIdeaFollowModel) {
// 		    this.oIdeaFollowModel = new JSONModel();
// 		}
		if(!value){
		    this.oIdeaFollowModel = new JSONModel();
		}
		
// 		if(this.oIdeaFollowModel) {
// 		    var oIdeaFollow = this.oIdeaFollowModel.getProperty("/" + type + "(" + objectId + ")");
// 		    value = oIdeaFollow && oIdeaFollow.ID ? oIdeaFollow.ID : value;
// 		}
        
        switch (type) {
            case 'IDEA':
                followService = IdeaFollow.follow(objectId, type, value);
                break;
            case 'CAMPAIGN':
                followService = CampaignFollow.follow(objectId, type, value);  
                break;
            case 'TAG':
                followService = TagFollow.follow(objectId, type, value);
                break;
            default: 
                return false;
        }
        
        if(followButton && followButton.setEnabled){
            followButton.setEnabled(false);   
        }
    
        followService.done(function(callback){
            MessageToast.show(self.getText(showMsg));
            if(self.oIdeaFollowModel) {
			    var oResult = {
    			    ID: callback.GENERATED_IDS ? callback.GENERATED_IDS[-1] : undefined
    			};
			   self.oIdeaFollowModel.setProperty("/" + type + "(" + objectId + ")", oResult); 
			}
            followButton.setEnabled(true);
            followButton.rerender();
            if(self.isGlobalSearch){
                 self.getSearchResult(self.getViewProperty("/SEARCH_QUERY"));
            }            
        });
        
        followService.fail(function(){
		    if (followButton.setEnabled) {
				followButton.setEnabled(true);
			}
		});
    };
    
    return FollowMixin;
});
}; // end of sap/ino/vc/commons/mixins/FollowMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.commons.mixins.IdentityCardSendMailMixin') ) {
jQuery.sap.declare('sap.ino.vc.commons.mixins.IdentityCardSendMailMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/commons/mixins/IdentityCardSendMailMixin",[
    "sap/ino/vc/commons/mixins/MailMixin",
    "sap/ino/commons/application/Configuration",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/m/MessageBox"
    ],
	function(MailMixin, Configuration, JSONModel, MessageToast, MessageBox) {
		"use strict";

		/**
		 * @class
		 * Mixin that provides common functionality for Identity Card Mail Action handling
		 */
		var IdentityCardSendMailMixin = function() {
			throw "Mixin may not be instantiated directly";
		};

		var _oUserModel = new JSONModel();
		var _oMailModel = new JSONModel();

		IdentityCardSendMailMixin.getEmailDialog = function() {
			if (!this._oEmailDialog) {
				this._oEmailDialog = this.createFragment("sap.ino.vc.iam.fragments.SendEmail", this.getView().createId());
				this.getView().addDependent(this._oEmailDialog);
				this._oEmailDialog.setModel(_oMailModel, "mail");
			}

			return this._oEmailDialog;
		};

		IdentityCardSendMailMixin.getMailSignatureBody = function(sBody, bWithEmailAddr) {
			var sAppTitle = Configuration.getSystemSetting('sap.ino.config.APPLICATION_TITLE');
			if (!sAppTitle || sAppTitle === "") {
				sAppTitle = "SAP Innovation Management";
			}
			var sUsername = this.getModel('user').getProperty("/data/NAME");
			var sSignature = this.getText("MAIL_SIGNATURE_TEMPLATE", [sAppTitle, sUsername]);
			sBody = sBody + "\n\n\n\n\n\n\n\n\n\n\n" + sSignature;

			if (bWithEmailAddr) {
				sBody = sBody + '\n' + this.getModel('user').getProperty("/data/EMAIL");
			}

			return sBody;
		};

		IdentityCardSendMailMixin.onMailPressed = function(oEvent) {
			var iIdentityId = oEvent.getParameter("identityId");
			var sUserName = oEvent.getParameter("userName");
			var oContent = MailMixin.createMailContent.apply(this);
			var that = this;

			_oUserModel.loadData(Configuration.getUserProfileByTextURL(iIdentityId), {
				"USER_ID": iIdentityId
			}, false, "GET");

			if (_oUserModel.getProperty("/CONTACT_DETAIL") && _oUserModel.getProperty("/CONTACT_DETAIL/EMAIL")) {
				sap.m.URLHelper.triggerEmail(_oUserModel.getProperty("/CONTACT_DETAIL/EMAIL"), oContent.subject, oContent.body);
			} else {
				var fnOpenEmailDialog = function(bWithEmailAddr) {
					oContent.body = that.getMailSignatureBody(oContent.body, bWithEmailAddr);

					_oMailModel.setData(oContent);
					_oMailModel.setProperty("/username", sUserName);
					_oMailModel.setProperty("/to_identity", iIdentityId);

					var oMailDialog = that.getEmailDialog();
					oMailDialog.open();
				};

				MessageBox.confirm(this.getText("MAIL_MSG_SEND_CONFIRMATION"), {
					title: this.getText("MAIL_CONFIRMATION_LABEL"),
					icon: MessageBox.Icon.NONE,
					actions: [sap.m.MessageBox.Action.YES, sap.m.MessageBox.Action.NO],
					onClose: function(bAction) {
						if (bAction === "YES") {
							fnOpenEmailDialog(true);
						} else {
							fnOpenEmailDialog(false);
						}
					}
				});
			}
		};

		IdentityCardSendMailMixin.onIdeaContactMail = function(aPeople) {
			var that = this;
			var aIdentityId = aPeople.map(function(oPeople) {
				return oPeople.IDENTITY_ID;
			});
			var sUserNames = aPeople.map(function(oPeople) {
				return oPeople.NAME;
			}).join(";");
			var oContent = MailMixin.createMailContent.apply(this);

			var fnOpenEmailDialog = function(bWithEmailAddr) {
				oContent.body = that.getMailSignatureBody(oContent.body, bWithEmailAddr);

				_oMailModel.setData(oContent);
				_oMailModel.setProperty("/username", sUserNames);
				_oMailModel.setProperty("/to_identity", aIdentityId);

				var oMailDialog = that.getEmailDialog();
				oMailDialog.open();
			};

			MessageBox.confirm(this.getText("MAIL_MSG_SEND_CONFIRMATION"), {
				title: this.getText("MAIL_CONFIRMATION_LABEL"),
				icon: MessageBox.Icon.NONE,
				actions: [sap.m.MessageBox.Action.YES, sap.m.MessageBox.Action.NO],
				onClose: function(bAction) {
					if (bAction === "YES") {
						fnOpenEmailDialog(true);
					} else {
						fnOpenEmailDialog(false);
					}
				}
			});
		};

		IdentityCardSendMailMixin.onEmailDialogSend = function() {
			var that = this;
			var oData = {
				TO_IDENTITY: _oMailModel.getProperty("/to_identity"),
				SUBJECT: _oMailModel.getProperty("/subject"),
				CONTENT: _oMailModel.getProperty("/body")
			};
			var sSendEmailURI = "/sap/ino/xs/rest/common/send_identity_email.xsjs";

			jQuery.ajax({
				url: Configuration.getBackendRootURL() + sSendEmailURI,
				headers: {
					"X-CSRF-Token": Configuration.getXSRFToken()
				},
				method: "POST",
				cache: false,
				data: JSON.stringify(oData),
				success: function() {
					MessageToast.show(that.getText("MAIL_MSG_SEND_SUCCESS"));
					that._oEmailDialog.close();
				},
				error: function() {
					MessageToast.show(that.getText("MAIL_MSG_SEND_ERROR"));
				}
			});
		};

		IdentityCardSendMailMixin.onEmailDialogCancel = function() {
			this._oEmailDialog.close();
		};

		return IdentityCardSendMailMixin;
	});
}; // end of sap/ino/vc/commons/mixins/IdentityCardSendMailMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.commons.mixins.RichTextInitMixin') ) {
// RichTextInitMixin
jQuery.sap.declare('sap.ino.vc.commons.mixins.RichTextInitMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/commons/mixins/RichTextInitMixin",[
    "sap/ino/commons/models/object/Attachment",
    "sap/ino/commons/application/Configuration",
    "sap/m/MessageToast"],
	function(Attachment, Configuration, MessageToast) {
		"use strict";
		/**
		 * @class
		 * Mixin that relate to similar ideas
		 */
		var RichTextInitMixin = function() {
			throw "Mixin may not be instantiated directly";
		};

		RichTextInitMixin.beforeIformEditorInit = function(c) {
			var that = this;
			c.mParameters.configuration.plugins = c.mParameters.configuration.plugins.replace("image,", "");
			c.mParameters.configuration.link_context_toolbar = true;
			c.mParameters.configuration.plugins = c.mParameters.configuration.plugins.replace("powerpaste", "powerpaste,imagetools");
			c.mParameters.configuration.paste_data_images = true;
			c.mParameters.configuration.automatic_uploads = true;
			c.mParameters.configuration.powerpaste_word_import = "clean";
			c.mParameters.configuration.powerpaste_html_import = "clean";
			c.mParameters.configuration.default_link_target = "_blank";
			c.mParameters.configuration.images_upload_handler = function(oFile, success, failure) {
				var oFileToUpload = oFile.blob();
				if (oFileToUpload) {
					Attachment.uploadFileIncludeFileLabel(oFileToUpload, "IDEA_FORM_DESC")
						.done(function(oResponse) {
							success(Configuration.getAttachmentDownloadURL(oResponse.attachmentId));
						}).fail(function() {
							failure();
							MessageToast.show(that.getText("IDEA_OBJECT_MSG_IDEA_FROM_IMAGE_UPLOAD_FAILED"));
						});
				}
			};
			c.mParameters.configuration.paste_postprocess = function() {
				window.tinymce.activeEditor.uploadImages();
			};
		};

		return RichTextInitMixin;
	});
}; // end of sap/ino/vc/commons/mixins/RichTextInitMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.commons.mixins.TagCardMixin') ) {
jQuery.sap.declare('sap.ino.vc.commons.mixins.TagCardMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/vc/commons/mixins/TagCardMixin",["sap/ino/vc/commons/mixins/FollowMixin"], function(FollowMixin) {
    "use strict";
    
    var TagCardMixin = function() {
        throw "Mixin may not be instantiated directly";
    };
    
    TagCardMixin.navigateToIdea = function(oEvent) {
        var oQuery = {"tags": [{
            "ID": oEvent.getParameter("tagId"),
            "NAME":  window.encodeURIComponent(oEvent.getParameter("tagName")),
            "GROUP_ID": oEvent.getParameter("tagGroupId")
        }]};
        oQuery.tags = JSON.stringify(oQuery.tags);
        this.navigateTo("idealist", {
            "query": oQuery
        }, false, true);
    };
    
    TagCardMixin.navigateToCampaign = function(oEvent) {
        var oQuery = {"tags": [{
            "ID": oEvent.getParameter("tagId"),
            "NAME":  window.encodeURIComponent(oEvent.getParameter("tagName")),
            "GROUP_ID": oEvent.getParameter("tagGroupId")
        }]};
        oQuery.tags = JSON.stringify(oQuery.tags);
        this.navigateTo("campaignlist", {
            query: oQuery
        }, false, true);
    };
    
    TagCardMixin.doFollow = function(oEvent) {
        FollowMixin.onFollow.call(this, oEvent);
        if (this._oPopover && this._oPopover.isOpen()) {
            this._oPopover.close();
        }
    };
    
    return TagCardMixin;
});
}; // end of sap/ino/vc/commons/mixins/TagCardMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.commons.mixins.UserGroupMixin') ) {
jQuery.sap.declare('sap.ino.vc.commons.mixins.UserGroupMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/commons/mixins/UserGroupMixin",[
    "sap/ino/commons/models/aof/PropertyModel",
    "sap/m/MessageToast",
    "sap/ino/commons/models/object/Group",
    "sap/ui/model/json/JSONModel",
    "sap/ui/model/Filter",
	"sap/ui/model/FilterOperator",
	"sap/ino/commons/application/Configuration",
	"sap/ino/commons/models/object/communityUser"
], function(PropertyModel, MessageToast, GroupServer, JSONModel, Filter, FilterOperator, Configuration, communityUser) {
	"use strict";

	var UserGroupMixin = function() {
		throw "Mixin may not be instantiated directly";
	};

	UserGroupMixin._memberRequestQueue = [];

	UserGroupMixin._bindUserGroupModel = function(View) {
		var bindView = View || this.getView();
		var sPath = Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/public_user_group.xsjs";
		var groupJSONModel = new JSONModel(sPath);
		bindView.setModel(groupJSONModel, "USER_GROUPS");
		return groupJSONModel;
	};

	UserGroupMixin.onSearchUserGroup = function(event) {
		var inputSource = event.getSource();
		var toolbarSource = inputSource && inputSource.getParent();
		var tableSource = toolbarSource && toolbarSource.getParent();
		var searchKey = event.getParameter('query');
		var searchFilter = new Filter([
	            new Filter('GROUP_NAME', FilterOperator.Contains, searchKey),
	            new Filter('DESCRIPTION', FilterOperator.Contains, searchKey)
	    ]);
		tableSource.getBinding('rows').filter(searchFilter, "searchGroup");
		this.reBindSelectedData(tableSource);
	};

	UserGroupMixin.selectedNoneGroup = function(event) {
		var selected = event.getParameters().selected;
		var tableBehavior = selected ? 'RowOnly' : 'Row';
		var source = event.getSource();
		var table = source && source.getParent();
		table.setSelectionBehavior(tableBehavior);
		table.setEditable(!selected);
	};

	UserGroupMixin.putGroupSelected = function(tableView, valid) {
		if (!tableView) {
			return false;
		}
		var table = tableView;
		var tableValid = valid || false;
		var tableData = table.getModel('USER_GROUPS').getData();
		var selectedNoneGorup = tableData.SELECTED_NONE || false;
		var noneGroupID = tableData.noneGroupID[0].GROUP_ID;
		var selectedIndex = table.getSelectedIndices();
		var userId = Configuration.getCurrentUser().USER_ID;
		var selectedGroup = {
			keys: [],
			parameters: []
		};

		if (!selectedNoneGorup) {
			for (var i = 0; i < selectedIndex.length; i++) {
				selectedGroup.keys.push(table.getContextByIndex(selectedIndex[i]).getObject().GROUP_ID);
			}
		} else {

			selectedGroup.keys.push(noneGroupID);
		}

		if (!selectedGroup.keys.length && tableValid) {
			MessageToast.show(this.getText('USER_GROUP_SELECT_ERROR'));
			return false;
		}

		return this.createUserModel(userId).assignGroups(selectedGroup);
	};

	UserGroupMixin.reBindSelectedData = function(tableView) {
		var table = tableView;
		var tableData = table.getModel('USER_GROUPS').getData();
		var rowLength = tableData.total;
		var noneGroup = tableData.noneGroupID && tableData.noneGroupID.length && tableData.noneGroupID[0];
		var allRows = table.getBinding('rows').getContexts(0, rowLength);
		var selectedGroup = this.getModel('identityData>/groups').getData();

		table.setSelectionBehavior('Row');
		table.setEditable(true);

		if (selectedGroup && selectedGroup.length && noneGroup && selectedGroup[0].GROUP_ID === noneGroup.GROUP_ID) {
			table.getExtension()[0].setSelected(true);
			table.setSelectionBehavior('RowOnly');
			table.setEditable(false);
			table.setSelectedIndex(-1);
		}
		if (selectedGroup && allRows) {
			for (var i = 0; i < selectedGroup.length; i++) {
				for (var x = 0; x < allRows.length; x++) {
					if (selectedGroup[i].GROUP_ID === allRows[x].getObject().GROUP_ID) {
						table.addSelectionInterval(x, x);
					}
				}
			}
		}
	};
	UserGroupMixin.createUserModel = function(userId) {
		var setting = {
			readSource: {
				model: this.getDefaultODataModel()
			}
		};
		return new communityUser(userId, setting);
	};

	UserGroupMixin.transGroupVisible = function(value) {
		return !!value;
	};

	UserGroupMixin.getMemberGroups = function() {
		var sPath = Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/group.xsjs";
		var userId = Configuration.getCurrentUser().USER_ID;
		return $.ajax({
			url: sPath,
			type: 'GET',
			data: {
				id: userId
			}
		});
	};

	UserGroupMixin.cantClose = function() {
		return false;
	};

	return UserGroupMixin;
});
}; // end of sap/ino/vc/commons/mixins/UserGroupMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.evaluation.RequestsClarificationList.controller') ) {
jQuery.sap.declare('sap.ino.vc.evaluation.RequestsClarificationList.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/evaluation/RequestsClarificationList.controller",[
    "sap/ino/vc/commons/BaseController",
    "sap/ino/commons/formatters/BaseFormatter",
    "sap/ino/vc/commons/TopLevelPageFacet",
    "sap/m/MessageToast"
], function(Controller, BaseFormatter, TopLevelPageFacet, MessageToast) {
	"use strict";

	return Controller.extend("sap.ino.vc.evaluation.RequestsClarificationList", jQuery.extend({}, TopLevelPageFacet, {
		formatter: BaseFormatter,

		onBeforeRendering: function() {
			this.setViewProperty("/USER_IMAGE_ID", this.getOwnerComponent().getCurrentUserImageId());
		},

		onClarificationSubmit: function(oEvent) {
			var oController = this;
			var oEvaluationRequest = oController.getModel("object");
			if (!oEvaluationRequest) {
				return;
			}
			var nId = oEvent.getSource().getCustomData()[0].getValue();
			var nToIdentity = oEvent.getSource().getCustomData()[1].getValue();
			var sContent = oEvent.getSource().getProperty("value");
			var oActionRequest = oEvaluationRequest.sendClarification({
				EVAL_REQ_ITEM_ID: nId,
				TO_IDENTITY: nToIdentity,
				CONTENT: sContent
			});
			if (oActionRequest) {
				oActionRequest.done(function() {
					MessageToast.show(oController.getText("EVAL_REQ_MSG_CLARIFICATION_SUCCESS"));
				});
				oActionRequest.fail(function(o) {
					if (o.MESSAGES && o.MESSAGES.length > 0) {
						MessageToast.show(oController.getText(o.MESSAGES[0].MESSAGE_TEXT));
					}
				});
			}
		},

		onOpenCreatorInFirstClarification: function(oEvent) {
			this._onOpenCreator(oEvent, "CREATED_BY_ID");
		},

		onOpenCreatorInClarification: function(oEvent) {
			this._onOpenCreator(oEvent, "CREATED_BY_ID");
		},

		_onOpenCreator: function(oEvent, sProperty) {
			var oSource = oEvent.getSource();
			var oDomRef = oEvent.getParameter("domRef");
			var oContext = oSource.getBindingContext("object");
			var iIdentityId = oContext.getProperty(sProperty);
			if (oDomRef) {
				var oReferenceControl = sap.ui.getCore().byId(oDomRef.id);
			}
			if (!this.oIdentityCardView) {
				this.oIdentityCardView = sap.ui.xmlview({
					viewName: "sap.ino.vc.iam.IdentityCard"
				});
				this.getView().addDependent(this.oIdentityCardView);
			}
			if (oReferenceControl) {
				this.oIdentityCardView.getController().open(oReferenceControl, iIdentityId);
			} else {
				this.oIdentityCardView.getController().open(oSource, iIdentityId);
			}
		}

	}));
});
}; // end of sap/ino/vc/evaluation/RequestsClarificationList.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.evaluation.RequestsForwardList.controller') ) {
jQuery.sap.declare('sap.ino.vc.evaluation.RequestsForwardList.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/vc/evaluation/RequestsForwardList.controller",[
    "sap/ino/vc/commons/BaseController",
    "sap/ino/commons/formatters/BaseFormatter",
    "sap/ino/vc/commons/TopLevelPageFacet"
], function(Controller, BaseFormatter, TopLevelPageFacet) {
	"use strict";

	return Controller.extend("sap.ino.vc.evaluation.RequestsForwardList", jQuery.extend({}, TopLevelPageFacet, {
		formatter: BaseFormatter,
		onOpenCreatorInToForward: function(oEvent) {
			this._onOpenCreator(oEvent, "TO_IDENTITY");
		},

		onOpenCreatorInForward: function(oEvent) {
			this._onOpenCreator(oEvent, "FROM_IDENTITY");
		},

		_onOpenCreator: function(oEvent, sProperty) {
			var oSource = oEvent.getSource();
			var oDomRef = oEvent.getParameter("domRef");
			var oContext = oSource.getBindingContext("object");
			var iIdentityId = oContext.getProperty(sProperty);
			if (oDomRef) {
				var oReferenceControl = sap.ui.getCore().byId(oDomRef.id);
			}
			if (!this.oIdentityCardView) {
				this.oIdentityCardView = sap.ui.xmlview({
					viewName: "sap.ino.vc.iam.IdentityCard"
				});
				this.getView().addDependent(this.oIdentityCardView);
			}
			if (oReferenceControl) {
				this.oIdentityCardView.getController().open(oReferenceControl, iIdentityId);
			} else {
				this.oIdentityCardView.getController().open(oSource, iIdentityId);
			}
		}

	}));
});
}; // end of sap/ino/vc/evaluation/RequestsForwardList.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.evaluation.mixins.MassActionMixin') ) {
jQuery.sap.declare('sap.ino.vc.evaluation.mixins.MassActionMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.message.Message'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/evaluation/mixins/MassActionMixin",[
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/ui/model/Sorter",
    "sap/ui/core/MessageType",
    "sap/ui/core/message/Message",
    "sap/m/MessageToast",
    "sap/ino/commons/application/Configuration",
    "sap/ino/commons/models/object/EvaluationRequestItem",
    "sap/ino/vc/commons/BaseController"
], function(Filter, FilterOperator, Sorter, MessageType, Message, MessageToast, Configuration, EvaluationRequestItem, BaseController) {
	"use strict";

	/**
	 * @class
	 * Mixin that provides an event for user voting
	 */
	var MassActionMixin = function() {
		throw "Mixin may not be instantiated directly";
	};
	
	MassActionMixin._addForwardExpertInputHandling = function(oControl, mSettings) {
		if (!oControl) {
			return;
		}
		var that = this;
		var fnSuggestHandler = that._createSuggestHandler(mSettings.suggestion);
		oControl.attachSuggest(fnSuggestHandler, that);
	};
	
	MassActionMixin._createForwardDialog = function() {
		if (!this._oRequestForwardDialog) {
			this._oRequestForwardDialog = this.createFragment("sap.ino.vc.evaluation.fragments.RequestForward", this.getView().getId());
			this.getView().addDependent(this._oRequestForwardDialog);
		}
		return this._oRequestForwardDialog;
	};
	
	MassActionMixin._createObjectModel = function() {
		var oTable = this.getList();
		var vObjectKey = oTable.getContextByIndex(oTable.getSelectedIndex()).getProperty("ID");
		return new EvaluationRequestItem(vObjectKey, {
			actions: ["update", "del", "executeStatusTransition", "sendClarification", "forward"],
			continuousUse: true,
			readSource: {
				model: this.getDefaultODataModel()
			}
		});
	};
	
	MassActionMixin._executeStatusTransition = function(sStatusAction) {
		var that = this;
		//if (!this._oModel) {
			this._oModel = this._createObjectModel();
		//}
		var oActionRequest = this._oModel.executeStatusTransition({
			STATUS_ACTION_CODE: sStatusAction
		});
		if (oActionRequest) {
			oActionRequest.done(function() {
				MessageToast.show(that.getText("OBJECT_MSG_STATUS_CHANGE_SUCCESS"));
			});
			oActionRequest.fail(function(o) {
				if (o.MESSAGES && o.MESSAGES.length > 0) {
					MessageToast.show(that.getText(o.MESSAGES[0].MESSAGE_TEXT));
				}
			});
		}
	};

	MassActionMixin.onAccept = function() {
		this._executeStatusTransition("sap.ino.config.EVAL_REQ_ACCEPT");
	};

	MassActionMixin.onReject = function() {
		this._executeStatusTransition("sap.ino.config.EVAL_REQ_REJECT");
	};
	
	MassActionMixin.onForward = function() {
		var oRequestForwardDialog = this._createForwardDialog();
		oRequestForwardDialog.open();
		if (!this._oModel) {
			this._oModel = this._createObjectModel();
		}
		this._addForwardExpertInputHandling(this.byId("inputForwardExpert"), {
			suggestion: {
				key: "ID",
				text: "NAME",
				additionalText: "USER_NAME",
				path: "data>/SearchIdentity(searchToken='$suggestValue')/Results",
				filters: [new Filter({
					path: "ID",
					operator: FilterOperator.NE,
					value1: Configuration.getCurrentUser().USER_ID
				})],
				sorter: new Sorter("NAME")
			},
			token: {
				key: "IDENTITY_ID",
				text: "NAME"
			}
		});
	};

	MassActionMixin.onForwardClose = function() {
		if (!this._oModel) {
			this._oModel = this._createObjectModel();
		}
		this._oModel.oData.Forwards = [];
		this._oRequestForwardDialog.close();
		this.byId("inputForwardExpert").removeAllTokens();
		this.byId("txtAreaForwardReasonDes").setValue("");
		// this._oRequestForwardDialog.destroy();
	};
	
	MassActionMixin.onSubmitForward = function() {
		var that = this;
		if (!this._oModel) {
			this._oModel = this._createObjectModel();
		}
		var oForwardExpert = that.byId("inputForwardExpert").getTokens();
		var sText = that.byId("inputForwardExpert").getValue();
		if (oForwardExpert.length > 0 && !sText) {
			that._createForwardDialog();
			var iForwardID = parseInt(oForwardExpert[0].mProperties.key, 10);
			var oForwardAction = that.executeObjectAction(this._oModel, "forward", {
				parameters: {
					EXPERT_ID: iForwardID,
					COMMENT_FORWARD: that.byId("txtAreaForwardReasonDes").getValue().trim()
				},
				messages: {
					success: "EVALUATIONREQUESTS_MSG_FORWARD_SUCCESS",
					error: "EVALUATIONREQUESTS_MSG_FORWARD_FAILURE"
				}
			});
			oForwardAction.done(function() {
				that._oRequestForwardDialog.close();
				that.byId("inputForwardExpert").removeAllTokens();
				that.byId("txtAreaForwardReasonDes").setValue("");
			});
			oForwardAction.always(function() {
				that._oRequestForwardDialog.setBusy(false);
			});
		} else {
			that.setClientMessage(
				new Message({
					code: "EVALUATIONREQUESTS_MSG_FORWARD_NO_EXPERT",
					type: MessageType.Error
				}),
				that.byId("inputForwardExpert"));
			that.byId("inputForwardExpert").setValue("");
		}
	};

	MassActionMixin.onCreateEvaluation = function() {
		var oTable = this.getList();
		var iIdeaId = oTable.getContextByIndex(oTable.getSelectedIndex()).getProperty("IDEA_ID");
		this.navigateTo("evaluation-create", {
			query: {
				ideaId: iIdeaId
			}
		});
	};

	MassActionMixin.onMassDelete = function(oEvent) {
		var oSource = oEvent.getSource();
		var oTable = this.getList();
		var aSelect = oTable.getSelectedIndices();
		var aEvalReqIds = [];
		if (aSelect.length) {
			for (var i = 0; i < aSelect.length; i++) {
				aEvalReqIds.push(oTable.getContextByIndex(aSelect[i]).getProperty("ID"));
			}
		}
		var that = this;

		var oDelRequest = BaseController.prototype.executeObjectAction.call(that, EvaluationRequestItem, "bulkDeleteItems", {
			staticparameters: {
				"EVAL_REQ_ITEM_ID": aEvalReqIds
			},
			messages: {
				confirm: "MSG_DEL_CONFIRM",
				success: "MSG_DEL_SUCCESS"
			}
		});
		oDelRequest.done(function(oResponse) {
			if (oResponse && oResponse.confirmationCancelled === true) {
				if (oSource && jQuery.type(oSource.focus) === "function") {
					oSource.focus();
				}
				return;
			}
			if (that.bindList && typeof(that.bindList) === "function") {
				that.bindList();
			}
		});
	};
	
	MassActionMixin.resetActionState = function(){
	    var that = this;
	    var aButtons = ["sapInoAcceptBtn", "sapInoRejectBtn", "sapInoFowardBtn", "sapInoCreateBtn", "sapInoMassDeleteBtn"];
        jQuery.each(aButtons, function (iIdx, sElementID) {
            var oBtn = that.byId(sElementID);
            if (oBtn) {
                oBtn.setEnabled(false);
            }
        });
	};

	return MassActionMixin;
});
}; // end of sap/ino/vc/evaluation/mixins/MassActionMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.expertfinder.ExpertFinder.controller') ) {
jQuery.sap.declare('sap.ino.vc.expertfinder.ExpertFinder.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ListItem'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/expertfinder/ExpertFinder.controller",[
    "sap/ino/vc/commons/BaseController",
    "sap/ino/commons/application/Configuration",
    "sap/ui/model/json/JSONModel",
    "sap/ino/vc/commons/TopLevelPageFacet",
    "sap/ui/Device",
    "sap/ui/core/ListItem",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/ino/vc/commons/mixins/ClipboardMixin",
    "sap/ino/vc/commons/mixins/IdentityQuickviewMixin"
], function(BaseController,
            Configuration,
            JSONModel,
            TopLevelPageFacet,
            Device,
            ListItem,
            Filter,
            FilterOperator,
            ClipboardMixin,
            IdentityQuickviewMixin) {
    "use strict";
    
    return BaseController.extend("sap.ino.vc.expertfinder.ExpertFinder", jQuery.extend({}, TopLevelPageFacet, ClipboardMixin, IdentityQuickviewMixin, {

        routes: ["expertfinder"],
        
        view: {
            INPUT: "",
            IDEACARD_SECTION_VISIBLE: 'TAG',  // used in ExpertDetails.fragment.xml
            Tags: []  
        },
        
        onRouteMatched: function(oEvent) {
            var oView = this.getView();
            this.view.Tags = [];
            oView.setModel(new JSONModel(this.view), "view");
            var oExpertModel = new JSONModel({});
          var bBOPrivilege = this.getModel("user").getProperty("/privileges")["sap.ino.ui::backoffice.access"];
            if(!bBOPrivilege){
              this.navigateTo("home"); 
              return;
              }            
            oView.setModel(oExpertModel, "proposedExperts");
            this.displayExpertDetail(false);
            this.setHelp("EXPERT_FINDER");
            // set object exists property
  
            var sActive = this.getModel("config").oData["sap.ino.config.EXPERT_FINDER_ACTIVE"];
            this.setObjectExists(bBOPrivilege && (sActive === "1"));
        },
        
        displayExpertDetail: function(bDisplayDetail) {
            var oExpertDetailContainer = this.getView().byId("expertDetailContainer");
            oExpertDetailContainer.toggleStyleClass("sapInoInvisible", !bDisplayDetail);
            var oExpertGraphContainer = this.getView().byId("expertGraphContainer");
            oExpertGraphContainer.toggleStyleClass("sapInoExpertGraphContainerDetail", bDisplayDetail);
            oExpertGraphContainer.toggleStyleClass("sapInoExpertGraphContainer", !bDisplayDetail);
        },
        
        onSuggestTag: function (oEvent) {
		    var oControl = oEvent.getSource();
            var that = this;
            var sValue = oEvent.getParameter("suggestValue");
            var oTemplate = new ListItem({
                key : "{data>ID}",
                text : "{data>NAME}"
            });
            var sSuggestPath = "/SearchIdeaTagsParams(searchToken='" + jQuery.sap.encodeURL(sValue) + "')/Results";
            var oFilter = this._getSuggestionItemsFilter(this.view.Tags);
            oControl.bindAggregation("suggestionItems", { 
                path: "data>" + sSuggestPath,
                filters: oFilter,
                template : oTemplate
            });
        },

        _getSuggestionItemsFilter: function(aExcludeTags) {
            var aFilter = [];
            jQuery.each(aExcludeTags, function(i, oTag) {
                var oFilter = new Filter({
                    path: "NAME",
                    operator: FilterOperator.NE,
                    value1: oTag.NAME
                    
                });
                aFilter.push(oFilter);
            });
            return (aFilter.length === 0) ? [] : [new Filter(aFilter, true)];
        },
        
        onAddTag: function(oEvent) {
            var oView = this.getView();
            var oViewModel = oView.getModel("view");

            // retrieve tag
            var oInput = this.byId("suggestTag");
            var oSelectedItem;

            var aResult = jQuery.grep(oInput.getSuggestionItems(), function(oSuggestionItem) {
                return oSuggestionItem.getText().toLowerCase() === oInput.getValue().toLowerCase();
            });
            if (aResult.length > 0) {
                oSelectedItem = aResult[0]; 
                this.view.INPUT = oSelectedItem.getText();
            }                
            var oNewTag = {
                TAG_ID: oSelectedItem && oSelectedItem.getKey(),
                NAME: oSelectedItem && oSelectedItem.getText()
            };
            
            if (oNewTag.NAME && oNewTag.NAME.length !== 0) {
                // update view model
                var aTags = oViewModel.getProperty("/Tags");
                var aDuplicateTags = jQuery.grep(aTags, function(oTag) {
                    return oTag.NAME.toLowerCase() === oNewTag.NAME.toLowerCase();  // Tags are case-insensitive
                });
                if (aDuplicateTags.length === 0) {
                    aTags.push(oNewTag);
                    oViewModel.setProperty("/Tags", []); // workaround for UI5 bug with duplicate token ids
                    oViewModel.setProperty("/Tags", aTags);
                    // update expert graph
                    var sUrl = this._getExpertUrl(this.view.Tags);
                    oView.getModel("proposedExperts").loadData(sUrl);
                    oView.getModel("proposedExperts").refresh();
                }
                oInput.setValue("");
                oInput.setValueState("None");
                oInput.focus();
            } else if (oInput.getValue().length !== 0) {
                oInput.setValueState("Error");
            }
        },

        onChangeTag: function(oEvent) {
            var oView = this.getView();
            var oViewModel = oView.getModel("view");
            if (oEvent.getParameter("type") === "removed") {
                var oToken = oEvent.getParameter("token");
                var oRemoveTag = {
                    TAG_ID: oToken && oToken.getKey(),
                    NAME: oToken && oToken.getText()
                };
                if (oRemoveTag.NAME) {
                    var aTags = jQuery.grep(oViewModel.getProperty("/Tags"), function(oTag) {
                        return oTag.NAME !== oRemoveTag.NAME;
                    });
                    oViewModel.setProperty("/Tags", []); // workaround for UI5 bug with duplicate token ids
                    oViewModel.setProperty("/Tags", aTags);
                    if (this.view.Tags.length > 0) {
                        var sUrl = this._getExpertUrl(this.view.Tags);
                        oView.getModel("proposedExperts").loadData(sUrl);
                    } else {
                        oView.getModel("proposedExperts").setData({});
                        this.bindExpert(null);
                        this.displayExpertDetail(false);
                    }
                }
            }
        },

        _getExpertUrl: function(aObjectTags) {
            var aStringTags = aObjectTags.map(function(oTag) {return oTag.NAME;});
            var sUrl = Configuration.getIdeaExpertsByTagsURL(aStringTags);
            return sUrl;
        },

        bindExpert : function(oExpert) {
            var oView = this.getView();
            var oPanel = this.getView().byId("expertDetails");
            var aSelectedExpertIndex = jQuery.map(oView.getModel("proposedExperts").getData(), function(o,i){if (o.ID === oExpert.PERSON_ID) {return i;}});
            if (aSelectedExpertIndex.length > 0) {
                oPanel.bindElement("proposedExperts>/" + aSelectedExpertIndex[0]);
            } else {
                oPanel.unbindElement("proposedExperts");
            }
        },

        onClickNode: function(oEvent) {
            if (oEvent.getParameters().group && oEvent.getParameters().group !== "0") { // group !== 0 is used to identify Person
                var oExpert = oEvent.getParameters();
                this.bindExpert(oExpert);
                this.displayExpertDetail(true);
            }
        },
        
        onOpenIdea: function (oEvent) {
            if (Device.system.phone) {
                this.getView().getParent().close();
            }
            var oContext = oEvent.getSource().getBindingContext("proposedExperts");
            var iIdeaId = oContext.getProperty("IDEA/ID");
            if (iIdeaId) {
                this.navigateTo("idea-display", {id: iIdeaId});
            }
        },
        
        onExpertExpand: function (oEvent) {
            var oControl = oEvent.getSource().getParent();
            oControl.toggleStyleClass("sapInoIdeaExpertItemSelected");
        },
        
        isExpertActionable: function() {
            return false;
        },
        
        isExpertAddedForDialog: function(){
            return false;  
        },

    }));
});
}; // end of sap/ino/vc/expertfinder/ExpertFinder.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.home.Homepage.controller') ) {
jQuery.sap.declare('sap.ino.vc.home.Homepage.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/vc/home/Homepage.controller",[
    "sap/ino/vc/commons/BaseHomepageController",
    "sap/ino/vc/commons/TopLevelPageFacet",
    "sap/ino/commons/application/Configuration"
    
], function (BaseController, TopLevelPageFacet, Configuration) {
    "use strict";

    return BaseController.extend("sap.ino.vc.home.Homepage", jQuery.extend({}, TopLevelPageFacet, {
    	routes : ["home"],
    	
    	// use the provided base controller function
        onRouteMatched : function (oEvent) {
            BaseController.prototype.onRouteMatched.apply(this, arguments);
        },
         
        onBeforeDisplayViewShow : function() {
            
        },
        
        getDisplayView : function() {
            var sDisplayView;
        	var bShowBackoffice = this.getModel("component").getProperty("/SHOW_BACKOFFICE");
        	
        	if(bShowBackoffice){
        	    sDisplayView = "sap.ino.vc.home.BackOfficeHome";
        	    this.setHelp("HOME_BACK");
        	}
        	else{
        	    sDisplayView = "sap.ino.vc.home.CommunityHome";
        	    this.setHelp("HOME_COMM","HOME_COMM_ADDITIONAL");
        	} 
        	
        	return sDisplayView;
        },
        
        getLayoutPrefix : function() {
            return "sapInoHomeHomepage";
        },
        
        getODataEntitySet: function () {
            return undefined ;
        },
        
        // use the provided base controller function
        onBeforeHide : function() {
            if(BaseController.prototype.onBeforeHide){
            BaseController.prototype.onBeforeHide.apply(this, arguments);}
        },
        
        onBackofficeSettings : function() {
            this.navigateToByURLInNewWindow(Configuration.getBackendRootURL() + "/" +
                Configuration.getSystemSetting("sap.ino.config.URL_PATH_UI_BACKOFFICE"));
        },
        
        openCampaignSettings : function(iCampaignId) {
            this.navigateToByURLInNewWindow(Configuration.getCampaignSettingsURL(iCampaignId));
        }
    }));
});
}; // end of sap/ino/vc/home/Homepage.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.home.Search.controller') ) {
jQuery.sap.declare('sap.ino.vc.home.Search.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/vc/home/Search.controller",[
   "sap/ino/vc/commons/BaseController"
], function (Controller) {
   "use strict";
   return Controller.extend("sap.ino.vc.home.Search", {
        onInit: function () {
            Controller.prototype.onInit.apply(this, arguments);
        }
   });
});
}; // end of sap/ino/vc/home/Search.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.iam.IdentityCard.controller') ) {
jQuery.sap.declare('sap.ino.vc.iam.IdentityCard.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/iam/IdentityCard.controller",[
    "sap/ino/vc/commons/BaseController",
    "sap/ino/vc/commons/mixins/MailMixin",
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/application/Configuration",
    "sap/m/MessageToast",
    "sap/ui/Device",
    "sap/ino/controls/QuickViewGroupDimension"
], function(BaseController, MailMixin, JSONModel, Configuration, MessageToast, Device, QuickViewGroupDimension) {
	"use strict";

	var oFormatter = {};
	jQuery.extend(oFormatter, BaseController.prototype.formatter);

	oFormatter.generateMailURL = function(sMailAddress) {
		var oContent = this.oView.getController().createMailContent();

		if (oContent) {
			//sap.m.URLHelper is a namescpace and can't be required in the define
			return sap.m.URLHelper.normalizeEmail(sMailAddress, oContent.subject, oContent.body);
		} else {
			return sap.m.URLHelper.normalizeEmail(sMailAddress);
		}
	};

	return BaseController.extend("sap.ino.vc.iam.IdentityCard", jQuery.extend({}, MailMixin, {
		formatter: oFormatter,
		open: function(oControl, iId) {
			var that = this;
			var oView = that.getView();
			var oIdentityCard;
			if (Device && Device.system && Device.system.phone) {
				oIdentityCard = oView.byId("identityCardPhone");
			} else {
				oIdentityCard = oView.byId("identityCard");
			}
			that._iUserId = iId;
			// prevent empty column in place of scrollbar in some cases
			/*if (oIdentityCard && oIdentityCard._oPopover && oIdentityCard.getWidth()) {
                oIdentityCard._oPopover.setContentWidth(oIdentityCard.getWidth());
            }*/
			that._oIdentityModel = new JSONModel();
			if (Configuration.getUserProfileByTextURL(iId)) {
				that._oIdentityModel.loadData(Configuration.getUserProfileByTextURL(iId), {
					"USER_ID": iId
				}, true, "GET");
				that._oIdentityModel.attachRequestCompleted(null, function() {
					var indentityData = that._oIdentityModel.getData();
					indentityData.ENABLE_GAMIFICATION = that.getView().getModel("config").getProperty("/ENABLE_GAMIFICATION") === 1 ? true : false;
					indentityData.ENABLE_LEADERBOARD = that.getView().getModel("config").getProperty("/ENABLE_LEADERBOARD") === 1 ? true : false;
					indentityData.CURRENT_USER_ID = Configuration.getCurrentUser().USER_ID;
					indentityData.QUERY_USER_ID = that._iUserId;
					that._oIdentityModel.setData(indentityData);
					oView.setModel(that._oIdentityModel, "identityData");
					if (indentityData.ENABLE_GAMIFICATION) {
						that.constructGamificationDimension(that._oIdentityModel, oView);
					}
					jQuery.sap.delayedCall(0, that, function() {
						if (Device.system.phone) {
							oIdentityCard.open();
						} else {
							oIdentityCard.openBy(oControl);
						}
					});
				});
			}
		},

		onClose: function() {
			// only called on phone
			if (Device.system.phone) {
				var oIdentityCardDialog = this.getView().byId("identityCardPhone");
				oIdentityCardDialog.close();
			}
		},
		onPressNavigateToLeaderBoard: function(oEvent) {
			var oController = this.getView().getController();
			oController.navigateTo("leaderboard");
		},
		constructGamificationDimension: function(oModel, oView) {
			var oCardView, oQuickViewDimensionCtrl, sImageUrl, sStartLevel, sEndLevel, iDiffPointsBTlvl, iPointsToNextLvl, currentPointsBWBadge;
			if (Device.system.phone) {
				oCardView = oView.getContent()[1];
				oQuickViewDimensionCtrl = oCardView.getContent()[0];
			} else {
				oCardView = oView.getContent()[0];
				oQuickViewDimensionCtrl = oCardView.getPages()[0];
			}
			var aDimensions = oModel.getData().GAMIFICATION_INFO;
			oQuickViewDimensionCtrl.removeAllDimensionGroups();
			if (!Array.isArray(aDimensions)) {
				return;
			}
			var bSameUser = true;
			if (oModel.getData().CURRENT_USER_ID !== oModel.getData().QUERY_USER_ID) {
				bSameUser = false;
			}
			for (var i = 0; i < aDimensions.length; i++) {
				sStartLevel = "";
				sEndLevel = "";
				iDiffPointsBTlvl = 0;
				iPointsToNextLvl = 0;
				sImageUrl = "";
				currentPointsBWBadge = 0;
				if (JSON.stringify(aDimensions[i].BADGE) !== "{}") {
					sStartLevel = aDimensions[i].BADGE.currentBadge.NAME;
					sEndLevel = !aDimensions[i].BADGE.nextBadge.NAME ? "" : aDimensions[i].BADGE.nextBadge.NAME;

					if (aDimensions[i].BADGE.nextBadge.NAME && aDimensions[i].BADGE.currentBadge.NAME) {
						iDiffPointsBTlvl = aDimensions[i].BADGE.nextBadge.BADGE_VALUE - aDimensions[i].BADGE.currentBadge.BADGE_VALUE;
					}
					if (aDimensions[i].BADGE.nextBadge.NAME && !aDimensions[i].BADGE.currentBadge.NAME) {
						iDiffPointsBTlvl = aDimensions[i].BADGE.nextBadge.BADGE_VALUE;
					}
					if (!aDimensions[i].BADGE.nextBadge.NAME && aDimensions[i].BADGE.currentBadge.NAME) {
						iDiffPointsBTlvl = aDimensions[i].BADGE.currentBadge.BADGE_VALUE;
					}

					iPointsToNextLvl = aDimensions[i].BADGE.nextBadge.NAME ? aDimensions[i].BADGE.nextBadge.BADGE_VALUE - parseInt(aDimensions[i].TOTAL,
						10) : 0;

					if (JSON.stringify(aDimensions[i].BADGE.currentBadge) !== "{}" && aDimensions[i].BADGE.currentBadge.Attachment.length > 0) {
						sImageUrl = Configuration.getAttachmentTitleImageDownloadURL(aDimensions[i].BADGE.currentBadge.Attachment[0].ATTACHMENT_ID);
					}
					if (JSON.stringify(aDimensions[i].BADGE.currentBadge) !== "{}") {
						var iDiffTotalBWBadge = parseInt(aDimensions[i].TOTAL, 10) - aDimensions[i].BADGE.currentBadge.BADGE_VALUE;
						currentPointsBWBadge = iDiffTotalBWBadge > 0 ? iDiffTotalBWBadge : parseInt(aDimensions[i].TOTAL, 10);
					} else {
						currentPointsBWBadge = parseInt(aDimensions[i].TOTAL, 10);
					}
				}
				if (sImageUrl) {
					oQuickViewDimensionCtrl.addDimensionGroup(new QuickViewGroupDimension({
						heading: aDimensions[i].NAME,
						headingIcon: sImageUrl,
						totalPoints: parseInt(aDimensions[i].TOTAL, 10),
						pointsToNextLevel: iPointsToNextLvl,
						startLevel: sStartLevel, //aDimensions[i].currentBadge.NAME,
						nextLevel: sEndLevel, //aDimensions[i].nextBadge.NAME,
						currentPointsBWBadge: currentPointsBWBadge,
						diffPointsToNextLevel: iDiffPointsBTlvl,
						dimensionUnit: aDimensions[i].UNIT,
						redeemPoints: aDimensions[i].TOTAL_FOR_REDEEM,
						redeemEnabled: !!aDimensions[i].REDEEM,
						showOnlyDimension: !bSameUser
					}));
				} else if (bSameUser) {
					oQuickViewDimensionCtrl.addDimensionGroup(new QuickViewGroupDimension({
						heading: aDimensions[i].NAME,
						headingIcon: sImageUrl,
						totalPoints: parseInt(aDimensions[i].TOTAL, 10),
						pointsToNextLevel: iPointsToNextLvl,
						startLevel: sStartLevel, //aDimensions[i].currentBadge.NAME,
						nextLevel: sEndLevel, //aDimensions[i].nextBadge.NAME,
						currentPointsBWBadge: currentPointsBWBadge,
						diffPointsToNextLevel: iDiffPointsBTlvl,
						dimensionUnit: aDimensions[i].UNIT,
						redeemPoints: aDimensions[i].TOTAL_FOR_REDEEM,
						redeemEnabled: !!aDimensions[i].REDEEM,
						showOnlyDimension: !bSameUser
					}));
				}
			}

		}
	}));
});
}; // end of sap/ino/vc/iam/IdentityCard.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.iam.mixins.FeedsSettingMixin') ) {
jQuery.sap.declare('sap.ino.vc.iam.mixins.FeedsSettingMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/iam/mixins/FeedsSettingMixin",[
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ino/commons/models/object/PersonalizeSetting"
], function(
	JSONModel,
	MessageToast,
	PersonalizeSetting) {
	"use strict";

	/**
	 * @class
	 * Mixin for a feeds setting
	 */
	var FeedsSettingMixin = function() {
		throw "Mixin may not be instantiated directly";
	};

	FeedsSettingMixin.feedsSave = function() {
		var self = this;
		var oModel = self.getView().getModel('FEED');
		var oData = oModel.getData();
		PersonalizeSetting.updateFeedsSettings({
			feeds: jQuery.extend(true, {}, oData.setting)
		}).done(function() {
			MessageToast.show(self.getText("FEEDS_SETTING_SAVE_SUCCESS"));
			if(oModel.getProperty("/setting/CAMPAIGN_SETTING_VALUE") || oModel.getProperty("/setting/IDEA_SETTING_VALUE") || oModel.getProperty("/setting/TAG_SETTING_VALUE")){
			    self.updateUserSettingEmail(true);
			}
			self.getView().setModel(new JSONModel(oData), 'FEED');
		});
	};

	FeedsSettingMixin.convertFeeds2ClientObject = function(oOriginData) {
		if (!oOriginData.hasOwnProperty("CAMPAIGN_SETTING_VALUE")) {
			oOriginData.CAMPAIGN_SETTING_VALUE = 1;
		}
		if (!oOriginData.hasOwnProperty("IDEA_SETTING_VALUE")) {
			oOriginData.IDEA_SETTING_VALUE = 1;
		}
		if (!oOriginData.hasOwnProperty("TAG_SETTING_VALUE")) {
			oOriginData.TAG_SETTING_VALUE = 1;
		}
		return oOriginData;
	};

	FeedsSettingMixin.newFeedsSave = function() {
		var self = this;
		var oModel = self.getView().getModel('NEWFEED');
		var oData = oModel.getData();
		PersonalizeSetting.updateNewFeedsSettings({
			newfeeds: _convert2ServerfeedObject(jQuery.extend(true, {}, oData.setting))
		}).done(function() {
			MessageToast.show(self.getText("FEEDS_SETTING_SAVE_SUCCESS"));
			if((oModel.getProperty("/setting/CAMPAIGN_SETTING_VALUE") || oModel.getProperty("/setting/IDEA_SETTING_VALUE") || oModel.getProperty("/setting/TAG_SETTING_VALUE")) && oModel.getProperty("/setting/FEEDS_KEY") !== 1){
			    self.updateUserSettingEmail(true);
			}
			self.getView().setModel(new JSONModel(oData), 'NEWFEED');
		});
	};

	FeedsSettingMixin.convertNewFeeds2ClientObject = function(oOriginData) {

		if (!oOriginData) {
			return oOriginData;
		}
		if (oOriginData.FEEDS_KEY) {
			if (oOriginData.FEEDS_KEY === 1) {
				oOriginData.FEEDS_KEY = 0;
			} else if (oOriginData.FEEDS_KEY === -1) {
				oOriginData.FEEDS_KEY = 1;
			}
		} else {
			oOriginData.FEEDS_KEY = 0;
		}

		if (!oOriginData.hasOwnProperty("CAMPAIGN_SETTING_VALUE")) {
			oOriginData.CAMPAIGN_SETTING_VALUE = 1;
		}
		if (!oOriginData.hasOwnProperty("IDEA_SETTING_VALUE")) {
			oOriginData.IDEA_SETTING_VALUE = 1;
		}
		if (!oOriginData.hasOwnProperty("TAG_SETTING_VALUE")) {
			oOriginData.TAG_SETTING_VALUE = 1;
		}
		return oOriginData;
	};
	
	FeedsSettingMixin.formatEnableMappingSettingFeedsKeyValue = function(value) {
		return value !== 1;
	};
	
	FeedsSettingMixin.formatFeedEnableSettingValue = function(value) {
		return value === 1;
	};
	
	function _convert2ServerfeedObject(oOriginData) {
		if (!oOriginData) {
			return oOriginData;
		}
		if (oOriginData.FEEDS_KEY || oOriginData.FEEDS_KEY === 0) {
			if (oOriginData.FEEDS_KEY === 0) {
				oOriginData.FEEDS_KEY = 1;
			} else if (oOriginData.FEEDS_KEY === 1) {
				oOriginData.FEEDS_KEY = -1;
			}
		}
		
		if (oOriginData.CAMPAIGN_SETTING_VALUE) {
			oOriginData.CAMPAIGN_SETTING_VALUE = 1;
		}else{
		    oOriginData.CAMPAIGN_SETTING_VALUE = 0;
		}
		
		if (oOriginData.IDEA_SETTING_VALUE) {
			oOriginData.IDEA_SETTING_VALUE = 1;
		}else{
		    oOriginData.IDEA_SETTING_VALUE = 0;
		}
		
		if (oOriginData.TAG_SETTING_VALUE) {
			oOriginData.TAG_SETTING_VALUE = 1;
		}else{
		    oOriginData.TAG_SETTING_VALUE = 0;
		}
		
		return oOriginData;
	}

	return FeedsSettingMixin;
});

}; // end of sap/ino/vc/iam/mixins/FeedsSettingMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.iam.mixins.NotificationSettingMixin') ) {
jQuery.sap.declare('sap.ino.vc.iam.mixins.NotificationSettingMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.m.GroupHeaderListItem'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/iam/mixins/NotificationSettingMixin",[
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ino/commons/models/object/PersonalizeSetting",
	'sap/m/GroupHeaderListItem'
], function(
	JSONModel,
	MessageToast,
	PersonalizeSetting,
	GroupHeaderListItem,
	UserCommonMixin) {
	"use strict";

	/**
	 * @class
	 * Mixin for a notification setting
	 */
	var NotificationSettingMixin = function() {
		throw "Mixin may not be instantiated directly";
	};

	NotificationSettingMixin.notificationSave = function() {
		var self = this;
		var oModel = self.getView().getModel('NOTIFICATION');
		var oData = oModel.getData();
		PersonalizeSetting.updateNotificationSettings({
			notification: _convert2ServerObject(jQuery.extend(true, {}, oData.setting))
		}).done(function() {
			MessageToast.show(self.getText("NOTIFICATION_SETTING_SAVE_SUCCESS"));
			if(oModel.getProperty("/setting/KEY/0/SETTING_VALUE") !== 3){
			    self.updateUserSettingEmail(true);
			}
			self.getView().setModel(new JSONModel(oData), 'NOTIFICATION');
		});
	};
	
	NotificationSettingMixin.NewNotificationSave = function() {
		var self = this;
		var oModel = self.getView().getModel('NEWNOTIFICATION');
		var oData = oModel.getData();
		PersonalizeSetting.updateNewNotificationSettings({
			notification: _convertNew2ServerObject(jQuery.extend(true, {}, oData.setting))
		}).done(function() {
			MessageToast.show(self.getText("NOTIFICATION_SETTING_SAVE_SUCCESS"));
			if(oModel.getProperty("/setting/NEWKEY/0/SETTING_VALUE") !== 3){
			    self.updateUserSettingEmail(true);
			}
			self.getView().setModel(new JSONModel(oData), 'NEWNOTIFICATION');
		});
	};

	NotificationSettingMixin.formatEnableMappingSettingValue = function(value) {
		return value !== 3;
	};
	
	NotificationSettingMixin.formatEnableSettingValue = function(value) {
		return value === 1;
	};

	NotificationSettingMixin.formatMappingSettingCode = function(sMappingCode) {
		return this.getText("NOTIFICATION_SETTING_" + sMappingCode);
	};
	
	NotificationSettingMixin.formatNewMappingSettingCode = function(sMappingCode) {
		return this.getText("NEWNOTIFICATION_SETTING_" + sMappingCode);
	};

	NotificationSettingMixin.getGroupHeader = function(oGroup) {
		var that = this;
		return new GroupHeaderListItem({
			title: that.getText("NOTIFICATION_SETTING_SUBCATEGORYCODE_" + oGroup.key),
			upperCase: false
		});
	};
	
	NotificationSettingMixin.getNewGroupHeader = function(oGroup) {
		var that = this;
		return new GroupHeaderListItem({
			title: that.getText("NEWNOTIFICATION_SETTING_ACTIONTYPECODE_" + oGroup.key),
			upperCase: false
		});
	};

	NotificationSettingMixin.convertNotification2ClientObject = function(oOriginData) {
		if (!oOriginData) {
			return oOriginData;
		}
		if (oOriginData.KEY && oOriginData.KEY[0]) {
			if (oOriginData.KEY[0].SETTING_VALUE === -1) {
				oOriginData.KEY[0].SETTING_VALUE = 3;
			} else if (oOriginData.KEY[0].SETTING_VALUE === 7) {
				oOriginData.KEY[0].SETTING_VALUE = 2;
			}
		} else {
			oOriginData.KEY = [{}];
			oOriginData.KEY[0].SETTING_VALUE = 0;
		}
		if (oOriginData.IDEA) {
			for (var ideaIndex = 0; ideaIndex < oOriginData.IDEA.length; ideaIndex++) {
				oOriginData.IDEA[ideaIndex].order = parseInt(oOriginData.IDEA[ideaIndex].CODE.substr(15), 10);
			}
			oOriginData.IDEA = oOriginData.IDEA.sort(function(previous, next) {
				return previous.order - next.order;
			});
		}
		if (oOriginData.CAMPAIGN) {
			for (var campaignIndex = 0; campaignIndex < oOriginData.CAMPAIGN.length; campaignIndex++) {
				oOriginData.CAMPAIGN[campaignIndex].order = parseInt(oOriginData.CAMPAIGN[campaignIndex].CODE.substr(15), 10);
			}
			oOriginData.CAMPAIGN = oOriginData.CAMPAIGN.sort(function(previous, next) {
				return previous.order - next.order;
			});
		}
		return oOriginData;
	};
	
	NotificationSettingMixin.convertNewNotification2ClientObject = function(oOriginData) {
		if (!oOriginData) {
			return oOriginData;
		}
		if (oOriginData.NEWKEY && oOriginData.NEWKEY[0]) {
			if (oOriginData.NEWKEY[0].SETTING_VALUE === -1) {
				oOriginData.NEWKEY[0].SETTING_VALUE = 3;
			} else if (oOriginData.NEWKEY[0].SETTING_VALUE === 7) {
				oOriginData.NEWKEY[0].SETTING_VALUE = 2;
			}
		} else {
			oOriginData.NEWKEY = [{}];
			oOriginData.NEWKEY[0].SETTING_VALUE = 0;
		}
		return oOriginData;
	};

	function _convert2ServerObject(oOriginData) {
		if (!oOriginData) {
			return oOriginData;
		}
		if (oOriginData.KEY && oOriginData.KEY[0]) {
			if (oOriginData.KEY[0].SETTING_VALUE === 3) {
				oOriginData.KEY[0].SETTING_VALUE = -1;
			} else if (oOriginData.KEY[0].SETTING_VALUE === 2) {
				oOriginData.KEY[0].SETTING_VALUE = 7;
			}
		}
		if (oOriginData.CAMPAIGN) {
			for (var i = 0; i <= oOriginData.CAMPAIGN.length - 1; i++) {
				if (oOriginData.CAMPAIGN[i].SETTING_VALUE) {
					oOriginData.CAMPAIGN[i].SETTING_VALUE = 1;
				}
			}
		}
		if (oOriginData.IDEA) {
			for (var j = 0; j <= oOriginData.IDEA.length - 1; j++) {
				if (oOriginData.IDEA[j].SETTING_VALUE) {
					oOriginData.IDEA[j].SETTING_VALUE = 1;
				}
			}
		}
		return oOriginData;
	}
	
	function _convertNew2ServerObject(oOriginData) {
		if (!oOriginData) {
			return oOriginData;
		}
		if (oOriginData.NEWKEY && oOriginData.NEWKEY[0]) {
			if (oOriginData.NEWKEY[0].SETTING_VALUE === 3) {
				oOriginData.NEWKEY[0].SETTING_VALUE = -1;
			} else if (oOriginData.NEWKEY[0].SETTING_VALUE === 2) {
				oOriginData.NEWKEY[0].SETTING_VALUE = 7;
			}
		}
		if (oOriginData.CAMPAIGN) {
			for (var i = 0; i <= oOriginData.CAMPAIGN.length - 1; i++) {
				if (oOriginData.CAMPAIGN[i].SETTING_VALUE) {
					oOriginData.CAMPAIGN[i].SETTING_VALUE = 1;
				}
			}
		}
		if (oOriginData.IDEA) {
			for (var j = 0; j <= oOriginData.IDEA.length - 1; j++) {
				if (oOriginData.IDEA[j].SETTING_VALUE) {
					oOriginData.IDEA[j].SETTING_VALUE = 1;
				}
			}
		}
		if (oOriginData.FOLLOW) {
			for (var n = 0; n <=  oOriginData.FOLLOW.length - 1; n++) {
				if (oOriginData.FOLLOW[n].SETTING_VALUE) {
					oOriginData.FOLLOW[n].SETTING_VALUE = 1;
				}
			}
		}
		if (oOriginData.STATUS) {
			for (var m = 0; m <= oOriginData.STATUS.length - 1; m++) {
				if (oOriginData.STATUS[m].SETTING_VALUE) {
					oOriginData.STATUS[m].SETTING_VALUE = 1;
				}
			}
		}
		
		
		return oOriginData;
	}

	return NotificationSettingMixin;
});
}; // end of sap/ino/vc/iam/mixins/NotificationSettingMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.iam.mixins.ProfileDataMixin') ) {
jQuery.sap.declare('sap.ino.vc.iam.mixins.ProfileDataMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/iam/mixins/ProfileDataMixin",["sap/ino/commons/application/Configuration",
    "sap/ino/commons/models/object/UserSettings",
    "sap/ino/commons/models/object/Attachment",
   "sap/m/MessageToast",
   "sap/ino/commons/models/core/ModelSynchronizer",
    "sap/ino/commons/models/object/PersonalizeSetting"
], function(Configuration,
	UserSettings,
	Attachment,
	MessageToast,
	ModelSynchronizer,
	PersonalizeSetting) {
	"use strict";
	var ProfileDataMixin = function() {
		throw "Mixin may not be instantiated directly";
	};

	ProfileDataMixin.getProfileDataSetting = function() {
		var iUserId = Configuration.getCurrentUser().USER_ID;
		var oUserSettings = new UserSettings(iUserId, {
			continuousUse: true,
			actions: ["updateUserLocale"],
			readSource: {
				model: this.getDefaultODataModel()
			}
		});
		this.setObjectModel(oUserSettings);
		this.bindDefaultODataModel(iUserId);
		if (this._oUserDataModel) {
			ModelSynchronizer.addAOInstanceDependency(oUserSettings, this._oUserDataModel, function(oAOInstance, oDependentModel) {
				if (oAOInstance && oAOInstance.getProperty("/Settings") && oDependentModel) {
					oDependentModel.setProperty("/IMAGE_ID", oAOInstance.getProperty("/Settings").TITLE_IMAGE_ID);
				}
			});
		}
	};

	ProfileDataMixin.formattermailLanguageText = function(sDefaultText, sCode) {
// 		var sText = this.getText(sCode);
// 		if (sText === sCode || sText === "") {
// 			return sDefaultText;
// 		}
// 		return sText;
        return sDefaultText;
	};

	ProfileDataMixin.setUserDataModel = function(oUserDataModel) {
		this._oUserDataModel = oUserDataModel;
	};

	ProfileDataMixin.getODataEntitySet = function() {
		return "Identity";
	};

	ProfileDataMixin.onFileUploaderChange = function(oEvent) {
		var oFileUploader = oEvent.getSource();
		var aFile = oEvent.getParameter("files");
		oFileUploader.setBusy(true);
		Attachment.prepareFileUploader(oFileUploader, aFile);
	};

	ProfileDataMixin.onFileUploaderComplete = function(oEvent) {
		var oResponse = Attachment.parseUploadResponse(oEvent.getParameter("responseRaw"));
		var oFileUploader = oEvent.getSource();

		if (oResponse) {
			var oObject = this.getObjectModel();
			if (oResponse.success) {
				oObject.setUserImage({
					"ATTACHMENT_ID": oResponse.attachmentId,
					"FILE_NAME": oResponse.fileName,
					"MEDIA_TYPE": oResponse.mediaType
				});
			} else {
				MessageToast.show(this.getText("SETTINGS_MSG_USER_IMAGE_FAILED"));
			}
		} else {
			MessageToast.show(this.getText("SETTINGS_MSG_USER_IMAGE_ERROR"));
		}

		oFileUploader.setBusy(false);
		oFileUploader.clear();
	};

	ProfileDataMixin.onImageSettingClear = function(oEvent) {
		var oObject = this.getObjectModel();
		oObject.clearUserImage();
		var oFileUploader = this.byId("imageSettingUploader");
		oFileUploader.setValue(null);
	};
	
	ProfileDataMixin.onImageSettingCrop = function() {
		var oImageCropping = this.byId("imageSettingCropping");
		this._cropImage(oImageCropping);
	};
	
	ProfileDataMixin.formatConsentTermsCondiftions = function(value){
	    return Configuration.getSystemSetting("sap.ino.config.TERMS_AND_CONDITIONS_ACTIVE") === '1';
	};

	ProfileDataMixin._cropImage = function(oImageCroppingCtrl) {
		var that = this;
		var oDeferred = jQuery.Deferred();
		var oFile = oImageCroppingCtrl.crop();
		if (oFile) {
			jQuery.sap.require("sap.ino.commons.models.object.Attachment");
			var Attachment = sap.ino.commons.models.object.Attachment;
			var oObject = that.getObjectModel();
			var sAttachmentId = oObject.getProperty('/Settings/TITLE_IMAGE_ID');
			Attachment.uploadFile(oFile, null, sAttachmentId, true).done(function(oResponse) {
				oObject.setUserImage({
					"ATTACHMENT_ID": oResponse.attachmentId || sAttachmentId,
					"FILE_NAME": oResponse.fileName,
					"MEDIA_TYPE": oResponse.mediaType
				});
				oDeferred.resolve({
					messages: [{
						"TYPE": "I",
						"MESSAGE": "SETTINGS_MSG_USER_IMAGE_CROP",
						"MESSAGE_TEXT": that.getText("SETTINGS_MSG_USER_IMAGE_CROP"),
						"REF_FIELD": ""
                        }]
				});
			}).fail(function() {
				MessageToast.show(that.getText("SETTINGS_MSG_USER_IMAGE_CROP_FAILED"));
				oDeferred.reject();
			});
		} else {
			oDeferred.resolve();
		}
		return oDeferred.promise();
	};

	ProfileDataMixin.onSettingsOk = function() {
		var that = this;
		var oNotificationMail = that.byId("settingMAIL");
		var _saveSettings = function() {
			//sap.ui.ino.controls.BusyIndicator.show(0);
			var oObjectModel = that.getObjectModel();
			var oLocale = that.byId("settingLOCALE");
			var oHCB = that.byId("settingHCB");
			var sHCBvalue = oHCB.getSelected() ? UserSettings.Theme.HCB : "";

			that._sHCBPropOLD = oObjectModel._oBeforeData.Settings.THEME; //oObjectModel.getProperty("/Settings/THEME");
			that._sHCBPropOLD = (that._sHCBPropOLD === null) ? "" : that._sHCBPropOLD;
			that._sLocalePropOLD = oObjectModel._oBeforeData.Settings.LOCALE;
			that._sLocalePropOLD = (that._sLocalePropOLD === null) ? "" : that._sLocalePropOLD;
			that._sConsentTermsConditionPropOLD = oObjectModel._oBeforeData.Settings.CONSENT_TERMS_CONDITIONS;
			that._sConsentTermsConditionPropOLD = (that._sConsentTermsConditionPropOLD === null) ? "" : that._sConsentTermsConditionPropOLD;
            var newModel = [{
				SECTION: "locale",
				KEY: "locale",
				VALUE: oLocale.getSelectedKey()
            }, {
				SECTION: "notification",
				KEY: "mail",
				VALUE: oNotificationMail && oNotificationMail.getSelected() ? UserSettings.Mail.Inactive : UserSettings.Mail.Active
            }, {
				SECTION: "ui",
				KEY: "theme",
				VALUE: sHCBvalue
            }];
            if(Configuration.getSystemSetting("sap.ino.config.TERMS_AND_CONDITIONS_ACTIVE") === '1'){
			    var oConsentTermsCondition = that.byId("settingTermsConditions");
                newModel.push({
    				SECTION: "system",
    				KEY: "consent_terms_condition",
    				VALUE: oConsentTermsCondition && oConsentTermsCondition.getSelected() ? 0 : 1
                });
            }
			var oRequest = oObjectModel.updateUserSettings(newModel);

			oObjectModel.modify(); // update image
			oRequest.done(function() {
				Configuration.refreshBackendConfiguration();
				if(that.isEnableNewNotification){
					that.getNewNotificationSetting();
					that.getNewFeedsSetting();
				}else{
					that.getNotificationSetting();
					that.getFeedsSetting();
				}

				that.getOwnerComponent().getModel("user").setProperty("/data/IDENTITY_IMAGE_ID", oObjectModel.getProperty(
					"/IDENTITY_IMAGE_ID"));
				MessageToast.show(that.getText("FEEDS_SETTING_SAVE_SUCCESS"));
			});
			oRequest.always(function() {
				var sHCBPropNEW = oObjectModel.getProperty("/Settings/THEME");
				sHCBPropNEW = (sHCBPropNEW === null) ? "" : sHCBPropNEW;

				var sLocalePropNEW = oObjectModel.getProperty("/Settings/LOCALE");
				sLocalePropNEW = (sLocalePropNEW === null) ? "" : sLocalePropNEW;
                if(Configuration.getSystemSetting("sap.ino.config.TERMS_AND_CONDITIONS_ACTIVE") === '1'  
                    && oObjectModel.getProperty("/Settings/CONSENT_TERMS_CONDITIONS") !== that._sConsentTermsConditionPropOLD){
                    location.reload();
                    return;
                }
				var bRestart = (sLocalePropNEW !== that._sLocalePropOLD) || (sHCBPropNEW !== that._sHCBPropOLD);
				if (bRestart) {
					that._openRestartDialog();
				}
			});
		};
		var _saveNotification = function() {
			var oDeferred = jQuery.Deferred();
			var oNotificationData = {
				KEY: [{
					CODE: null,
					MAPPING_SETTING_CODE: "KEY",
					OBJECT_TYPE_CODE: "NOTIFICATION_KEY",
					SETTING_VALUE: -1,
					SUBCATEGORY_CODE: null
				}]
			};
			if (oNotificationMail && !oNotificationMail.getSelected()) {
				oNotificationData = {
					KEY: [{
						CODE: null,
						MAPPING_SETTING_CODE: "KEY",
						OBJECT_TYPE_CODE: "NOTIFICATION_KEY",
						SETTING_VALUE: 0,
						SUBCATEGORY_CODE: null
						}]
				};
			}
			PersonalizeSetting.updateNotificationSettings({
				notification: oNotificationData
			}).done(function() {
				oDeferred.resolve();
			}).fail(function() {
				oDeferred.reject();
			});
			return oDeferred.promise();
		};
		var _saveNewNotification = function() {
			var oDeferred = jQuery.Deferred();
			var oNewNotificationData = {
				NEWKEY: [{
					ACTION_CODE: "NEWKEY",
					ACTION_TYPE_CODE: "NEWKEY",
					SETTING_VALUE: -1
				}]
			};
			if (oNotificationMail && !oNotificationMail.getSelected()) {
				oNewNotificationData = {
					NEWKEY: [{
						ACTION_CODE: "NEWKEY",
						ACTION_TYPE_CODE: "NEWKEY",
						SETTING_VALUE: 0
					}]
				};
			}
			PersonalizeSetting.updateNewNotificationSettings({
				notification: oNewNotificationData
			}).done(function() {
				oDeferred.resolve();
			}).fail(function() {
				oDeferred.reject();
			});
			return oDeferred.promise();
		};
		var _saveFeedSetting = function() {
			var oDeferred = jQuery.Deferred();
			var oFeedData = {
				"feeds": {
					"CAMPAIGN_SETTING_VALUE": false,
					"IDEA_SETTING_VALUE": false,
					"TAG_SETTING_VALUE": false
				}
			};
			if (oNotificationMail && !oNotificationMail.getSelected()) {
				oFeedData = {
					"feeds": {
						"CAMPAIGN_SETTING_VALUE": true,
						"IDEA_SETTING_VALUE": true,
						"TAG_SETTING_VALUE": true
					}
				};
			}
			PersonalizeSetting.updateFeedsSettings(oFeedData).done(function() {
				oDeferred.resolve();
			}).fail(function() {
				oDeferred.reject();
			});
			return oDeferred.promise();
		};
		var _saveNewFeedSetting = function() {
			var oDeferred = jQuery.Deferred();
			var oNewFeedData = {
				"newfeeds": {
					"FEEDS_KEY": -1,
					"CAMPAIGN_SETTING_VALUE": 0,
					"IDEA_SETTING_VALUE": 0,
					"TAG_SETTING_VALUE": 0
				}
			};
			if (oNotificationMail && !oNotificationMail.getSelected()) {
				oNewFeedData = {
					"newfeeds": {
						"FEEDS_KEY": 1,
						"CAMPAIGN_SETTING_VALUE": 1,
						"IDEA_SETTING_VALUE": 1,
						"TAG_SETTING_VALUE": 1
					}
				};
			}
			PersonalizeSetting.updateNewFeedsSettings(oNewFeedData).done(function() {
				oDeferred.resolve();
			}).fail(function() {
				oDeferred.reject();
			});
			return oDeferred.promise();
		};
		var oImageCropping = this.byId("imageSettingCropping");
		if(that.isEnableNewNotification){
			jQuery.when(this._cropImage(oImageCropping), _saveNewNotification(), _saveNewFeedSetting()).done(_saveSettings);
		}else{
			jQuery.when(this._cropImage(oImageCropping), _saveNotification(), _saveFeedSetting()).done(_saveSettings);
		}
	};

	return ProfileDataMixin;

});

}; // end of sap/ino/vc/iam/mixins/ProfileDataMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.iam.mixins.UserCommonMixin') ) {
jQuery.sap.declare('sap.ino.vc.iam.mixins.UserCommonMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/iam/mixins/UserCommonMixin",[
    "sap/ino/commons/application/Configuration",
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/models/object/UserSettings",
    "sap/ino/commons/models/object/PersonalizeSetting"
], function(
    Configuration,
	JSONModel,
	UserSettings,
	PersonalizeSetting) {
	"use strict";

	/**
	 * @class
	 * Mixin for a notification setting
	 */
	var UserCommonMixin = function() {
		throw "Mixin may not be instantiated directly";
	};

	UserCommonMixin.updateUserSettingEmail = function(bEmailActive) {
		var oObjectModel = this.getObjectModel();
		oObjectModel.updateUserSettings([{
			SECTION: "notification",
			KEY: "mail",
			VALUE: !bEmailActive ? UserSettings.Mail.Inactive : UserSettings.Mail.Active
        }]).done(function(){
			Configuration.refreshBackendConfiguration();
        });
	};

	UserCommonMixin.getNotificationSetting = function() {
		var self = this;
		PersonalizeSetting.getNotificationSettings().done(function(data) {
			var settingData = {
				setting: self.convertNotification2ClientObject(jQuery.extend(true, {}, data.RESULT))
			};
			self.getView().setModel(new JSONModel(settingData), 'NOTIFICATION');
		});
	};
	
	UserCommonMixin.getNewNotificationSetting = function() {
		var self = this;
		PersonalizeSetting.getNewNotificationSettings().done(function(data) {
			var settingData = {
				setting: self.convertNewNotification2ClientObject(jQuery.extend(true, {}, data.RESULT))
			};
			self.getView().setModel(new JSONModel(settingData), 'NEWNOTIFICATION');
		});
	};

	UserCommonMixin.getFeedsSetting = function() {
		var self = this;
		PersonalizeSetting.getFeedsSettings().done(function(data) {
			var settingData = {
				setting: self.convertFeeds2ClientObject(jQuery.extend(true, {}, data.RESULT))
			};
			self.getView().setModel(new JSONModel(settingData), 'FEED');
		});
	};
	
	UserCommonMixin.getNewFeedsSetting = function() {
		var self = this;
		PersonalizeSetting.getNewFeedsSettings().done(function(data) {
			var settingData = {
				setting: self.convertNewFeeds2ClientObject(jQuery.extend(true, {}, data.RESULT))
			};
			self.getView().setModel(new JSONModel(settingData), 'NEWFEED');
		});
	};

	return UserCommonMixin;
});
}; // end of sap/ino/vc/iam/mixins/UserCommonMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.mixins.DeleteActionMixin') ) {
jQuery.sap.declare('sap.ino.vc.idea.mixins.DeleteActionMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/mixins/DeleteActionMixin",[
    "sap/ino/vc/commons/BaseController",
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/models/object/Idea",
    "sap/ino/commons/models/object/RewardList",
    "sap/ino/commons/models/object/EvaluationRequestItem",
    "sap/ino/commons/models/aof/PropertyModel",
    "sap/ino/commons/application/Configuration",
    "sap/m/MessageToast"
], function(BaseController, JSONModel, Idea, RewardList, EvaluationRequestItem, PropertyModel, Configuration, MessageToast) {
	"use strict";

	/**
	 * Mixin that handles idea deletion in lists
	 * @mixin
	 */
	var DeleteActionMixin = function() {
		throw "Mixin may not be instantiated directly";
	};

	DeleteActionMixin.onDeleteIdea = function(oEvent) {
		var oSource = oEvent.getSource();
		var iIdeaId = oSource.getBindingContext("data").getProperty("ID");
		var oSettings = {
			nodes: [],
			actions: ["del"]
		};
		var that = this;
		var ppmConfig = Configuration.getSystemSettingsModel().getProperty("/sap.ino.config.PPM_INTEGRATION_ACTIVE");

		var fnDelete = function(oPropertyEvent) {
			var oPropModel = oPropertyEvent.getSource();
			var bDeleteAllowed = oPropModel.getProperty("/actions/del/enabled");
			var bHasReward = oPropModel.getProperty("/actions/del/customProperties/hasReward");
			var bIsMergedWithVote = oPropModel.getProperty("/actions/del/customProperties/isMergeedWithVote");
			var bIsMerged = oPropModel.getProperty("/actions/del/customProperties/isMerged");
			if (bHasReward) {
			    //has reward ==> can't delete
				MessageToast.show(that.getText("MSG_IDEA_HAVE_REWARD_CANNOT_DELETE"));
			} else if(!bDeleteAllowed){
			     if(bIsMerged){
			         MessageToast.show(that.getText("MSG_IDEA_MERGED_CANNOT_DELETE"));
			     }
			     else {
			    MessageToast.show(that.getText("OBJECT_MSG_DELETE_FAILED"));
			     }
			    
			} else  {
			    //EVALUATION 
			    var bHasEvaluation = oSource.getBindingContext("data").getProperty("EVALUATION_COUNT");
			    var isManager = oPropModel.getProperty("/actions/del/customProperties/isManager");
			    if( !bHasEvaluation || (bHasEvaluation && isManager) ){
			            //havn't evaluation / hava evaluation and the user is manager/coach ==>add ppm check, then delete
			            var msgConfirm = ppmConfig === "1" ? "MSG_IDEA_CAMP_MANAGER_DEL_CONFIRM_HAVE_PPM" : "MSG_DEL_CONFIRM";
			            var oDelRequest = BaseController.prototype.executeObjectAction.call(that, Idea, "del", {
							staticparameters: iIdeaId,
							messages: {
								confirm: msgConfirm,
								success: "MSG_DEL_SUCCESS"
							}
						});
						oDelRequest.done(function(oResponse) {
							if (oResponse && oResponse.confirmationCancelled === true) {
								if (oSource && jQuery.type(oSource.focus) === "function") {
									oSource.focus();
								}
								return;
							}
							if (that.bindList && typeof(that.bindList) === "function") {
								that.bindList();
							} else if (that._bindIdeas && typeof(that._bindIdeas) === "function" && that._sIdeaViewKey) {
								that._bindIdeas(that._sIdeaViewKey);
							}
						});
						oDelRequest.fail(function(oResponse) {
							if (oResponse.MESSAGES && oResponse.MESSAGES.length > 0) {
								MessageToast.show(oResponse.MESSAGES[0].MESSAGE_TEXT);
							}
						});
			            
			        }else{
			            //has evaluation and he user is submitter==> can't delete idea
			            MessageToast.show(this.getText("MSG_IDEA_DEL_FAILED_SUBMITTER_HAVE_EVALUATION"));
			        }
			    /***
				var oModel = that.getDefaultODataModel ? that.getDefaultODataModel() : that.getModel("data");
				oModel.read("/IdeaFull("+iIdeaId+")/EvaluationRequestsNumber/$count", {
					success: function(oResult) {
					    var mgrPrivilege = oPropModel.getProperty("/actions/del/customProperties/isManager"),
						oEvalReqCount = Number(oResult);
					    if(!mgrPrivilege && oEvalReqCount >= 1){
			            	MessageToast.show(that.getText("MSG_IDEA_EXISTS_EVALUATION_REQUEST"));
					        return;
					    }
						var msgConfirm = oEvalReqCount >= 1 ? "MSG_IDEA_CAMP_MANAGER_DEL_CONFIRM" : "MSG_DEL_CONFIRM";
						var oDelRequest = BaseController.prototype.executeObjectAction.call(that, Idea, "del", {
							staticparameters: iIdeaId,
							messages: {
								confirm: msgConfirm,
								success: "MSG_DEL_SUCCESS"
							}
						});
						oDelRequest.done(function(oResponse) {
							if (oResponse && oResponse.confirmationCancelled === true) {
								if (oSource && jQuery.type(oSource.focus) === "function") {
									oSource.focus();
								}
								return;
							}
							if (that.bindList && typeof(that.bindList) === "function") {
								// context: idea list (campaign / all)
								that.bindList();
							} else if (that._bindIdeas && typeof(that._bindIdeas) === "function" && that._sIdeaViewKey) {
								// context: campaign and normal homepage
								that._bindIdeas(that._sIdeaViewKey);
							}
						});
						oDelRequest.fail(function(oResponse) {
							if (oResponse.MESSAGES && oResponse.MESSAGES.length > 0) {
								MessageToast.show(oResponse.MESSAGES[0].MESSAGE_TEXT);
							}
						});
					}
				});
				***/

			}
		};

		var oProp = new PropertyModel("sap.ino.xs.object.idea.Idea", iIdeaId, oSettings, false, fnDelete);
	};

	DeleteActionMixin.onMassDeleteReward = function(oEvent) {
		var oSource = oEvent.getSource();
		var oTable = this.getTable();
		var aRewardId = [];
		var aRewardListId = [];
		var aSelect = oTable.getSelectedIndices();
		if (aSelect.length) {
			for (var i = 0; i < aSelect.length; i++) {
				aRewardId.push(oTable.getContextByIndex(aSelect[i]).getProperty("ID"));
				if (aRewardListId.indexOf(oTable.getContextByIndex(aSelect[i]).getProperty("REWARD_LIST_ID")) === -1) {
					aRewardListId.push(oTable.getContextByIndex(aSelect[i]).getProperty("REWARD_LIST_ID"));
				}
			}
		}
		var that = this;

		var oDelRequest = BaseController.prototype.executeObjectAction.call(that, RewardList, "bulkDeleteRewards", {
			staticparameters: {
				"REWARD_ID": aRewardId,
				"REWARD_LIST_ID": aRewardListId
			},
			messages: {
				confirm: "MSG_DEL_CONFIRM",
				success: "MSG_DEL_SUCCESS"
			}
		});
		oDelRequest.done(function(oResponse) {
			if (oResponse && oResponse.confirmationCancelled === true) {
				if (oSource && jQuery.type(oSource.focus) === "function") {
					oSource.focus();
				}
				return;
			}
			if (that.bindList && typeof(that.bindList) === "function") {
				// context: idea list (campaign / all)
				that.bindList();
			}
		});
	};

	DeleteActionMixin.onMassDeleteEvalReq = function(oEvent) {
		var oSource = oEvent.getSource();
		var oTable = this.getTable();
		var aSelect = oTable.getSelectedIndices();
		var aEvalReqIds = [];
		if (aSelect.length) {
			for (var i = 0; i < aSelect.length; i++) {
				aEvalReqIds.push(oTable.getContextByIndex(aSelect[i]).getProperty("ID"));
			}
		}
		var that = this;

		var oDelRequest = BaseController.prototype.executeObjectAction.call(that, EvaluationRequestItem, "bulkDeleteItems", {
			staticparameters: {
				"EVAL_REQ_ITEM_ID": aEvalReqIds
			},
			messages: {
				confirm: "MSG_DEL_CONFIRM",
				success: "MSG_DEL_SUCCESS"
			}
		});
		oDelRequest.done(function(oResponse) {
			if (oResponse && oResponse.confirmationCancelled === true) {
				if (oSource && jQuery.type(oSource.focus) === "function") {
					oSource.focus();
				}
				return;
			}
			if (that.bindList && typeof(that.bindList) === "function") {
				// context: idea list (campaign / all)
				that.bindList();
			}
		});
	};

	return DeleteActionMixin;
});
}; // end of sap/ino/vc/idea/mixins/DeleteActionMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.mixins.DuplicateActionMixin') ) {
jQuery.sap.declare('sap.ino.vc.idea.mixins.DuplicateActionMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.m.CheckBox'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/mixins/DuplicateActionMixin",[
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/ino/commons/models/object/Idea",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ino/commons/models/aof/PropertyModel",
    "sap/m/CheckBox"
], function(Filter,
            FilterOperator,
            Idea,
            JSONModel,
            MessageToast,
            PropertyModel,
            CheckBox) {
    "use strict";
    
    /**
     * @class
     * Mixin that handles mass actions in "manage ideas" list view
     */
    var DuplicateActionMixin = function() {
        throw "Mixin may not be instantiated directly";
    };
    
    DuplicateActionMixin._getMarkDuplicateFromClipboardDialog = function() {
        if (!this._oAddMarkDuplicateFromClipboardDialog) {
			this._oAddMarkDuplicateFromClipboardDialog = this.createFragment("sap.ino.vc.idea.fragments.AddDuplicateIdeaFromClipboard");
			this.getView().addDependent(this._oAddMarkDuplicateFromClipboardDialog);
			this._sResizeDuplicateDialog = this.attachListControlResized(this.byId("AddDuplicateIdeaList"));
		}
		return this._oAddMarkDuplicateFromClipboardDialog;
    };
    
    DuplicateActionMixin.onAfterClose = function() {
        var oDialog = this._getMarkDuplicateFromClipboardDialog();
        this.detachListControlResized(this._sResizeDuplicateDialog);
        this.getView().removeDependent(oDialog);
        oDialog.destroy();
        this._oAddMarkDuplicateFromClipboardDialog = undefined;
        this.getModel("duplicate").destroy();
    };
    
    DuplicateActionMixin.getDuplicateItemTemplate = function () {
        // prepare FlatListItem template by adding checkbox
        if (!this._oIdeaDupClipboardListItemTemplate) {
            this._oIdeaDupClipboardListItemTemplate = this.createFragment("sap.ino.vc.idea.fragments.FlatListItem", this.getView().getId() + "--duplicate");
            // as this is a template, we need to get the idea via Fragment's byId
            var oActionBox = sap.ui.core.Fragment.byId(this.getView().getId() + "--duplicate", "flatListIdeaActions");
            var oCheckBox = new CheckBox({
                selected: {
                    parts: [{path: "data>ID"}, {path: "duplicate>/selectedDupIdeas"}], formatter: this.isClipboardIdeaSelected
                }, 
                select: this.onAddFromClipboardIdeaSelected.bind(this)});
            oActionBox.addItem(oCheckBox);
        }
        return this._oIdeaDupClipboardListItemTemplate; 
        //return this.getFragment("sap.ino.vc.idea.fragments.AddDuplicateIdeaFromClipboardListItem");
    };
    
    //Open Dialog
    DuplicateActionMixin.onMarkDuplicateFromClipboard = function() {
        // Dialog must be created first, as _bindFromClipboard will try to access the list by Id
        var oDialog = this._getMarkDuplicateFromClipboardDialog();
        // create model
        var oDupModel = new JSONModel();
        // initially, no ideas are selected
        oDupModel.setProperty("/selectedDupIdeas", []);
        this.getView().setModel(oDupModel, "duplicate");
	    this._bindFromClipboard();
	    oDialog.open();
    };
    
    //Cancel
    DuplicateActionMixin.onAddFromClipboardDialogCancel = function(oEvent) {
        this._getMarkDuplicateFromClipboardDialog().close();
	};
	
	//OK
	DuplicateActionMixin.onAddFromClipboardDialogOK = function(oEvent) {
	    var aSelectedIdeas = this.getModel("duplicate").getProperty("/selectedDupIdeas");
	    if (aSelectedIdeas && aSelectedIdeas.length > 0) {
	        var that = this;
    		var oView = this.getView();
            oView.setBusy(true);
            var iIdeaId = that.getObjectModel().getProperty("/ID");
            var aMarkAsDuplicatePromises = aSelectedIdeas.map(function(oIdea) {
                return Idea.markAsDuplicate(oIdea.id, [iIdeaId]);
    		});
    		jQuery.when.apply(jQuery, aMarkAsDuplicatePromises).always(function() {
                oView.setBusy(false);
                that._getMarkDuplicateFromClipboardDialog().close();
            }).done(function(){
    		    that.rebindRelatedItemsList();
            }).fail(function(){
                MessageToast.show(that.getText("IDEA_RELATED_TIT_MARK_AS_DUPLICATE_FAILED"));
            });
	    }
	};
	
	//Select All
	DuplicateActionMixin.onAddFromClipboardDialogSelectAll = function(oEvent) {
		var aSelectedIdeas = [];
		var oList = this.byId("AddDuplicateIdeaList");
		var aListItem = oList.getAggregation("items") || [];
		jQuery.each(aListItem, function(i, oListItem) {
			aSelectedIdeas.push({id: oListItem.getBindingContext("data").getProperty("ID")});
		});
		this.getModel("duplicate").setProperty("/selectedDupIdeas", aSelectedIdeas); // refresh bindings
	};
    
    //Bind Ideas
    DuplicateActionMixin._bindFromClipboard = function() {
		var oList = this.byId("AddDuplicateIdeaList");
		var aClipboardIdeaIds = this._getClipboardModel().getObjectKeys(Idea);
		var iIdeaId = this.getObjectModel().getProperty("/ID");
		// remove current idea from list
		aClipboardIdeaIds = aClipboardIdeaIds.filter(function (iId) { return iId !== iIdeaId; });
		var that = this;
		if (aClipboardIdeaIds.length > 0) {
	        var aMarkAsDuplicatePromises = aClipboardIdeaIds.map(function(iClipboardIdeaId){
	            var oPropertyModel = new PropertyModel(
                    "sap.ino.xs.object.idea.Idea",
                    iClipboardIdeaId,
                    {actions : [{"markAsDuplicate": [iIdeaId]}, {"unmarkAsDuplicate": [iIdeaId]}]},
                    false);
                return oPropertyModel.getDataInitializedPromise();
	        });
	        var aUpdateableIdeaIds = [];
	        jQuery.when.apply(jQuery, aMarkAsDuplicatePromises).done(function() {
	            jQuery.each(arguments, function(iIndex, oData){
	                if (oData && oData.actions && oData.actions.markAsDuplicate.enabled) {
	                    aUpdateableIdeaIds.push(aClipboardIdeaIds[iIndex]);
	                }
	            });
	            aClipboardIdeaIds = jQuery.grep(aClipboardIdeaIds, function(iClipboardIdeaId) {
            		return aUpdateableIdeaIds.indexOf(iClipboardIdeaId) > -1;
            	});
				var oFilter = that._getClipboardItemsFilter(aClipboardIdeaIds);
				if (oFilter.length > 0) {
					oList.bindAggregation("items", {
        				path: "data>/IdeaMedium",
        				template: that.getDuplicateItemTemplate(),
        				filters: oFilter
    			    });
				} else {
				 	oList.unbindAggregation("items");
				}
	        });
		} else {
			oList.unbindAggregation("items");
		}
	};
	
	//Filter Ideas exclude dupicated and leading idea
	DuplicateActionMixin._getClipboardItemsFilter = function(aClipboardItems) {
		var aFilter = [];
		jQuery.each(aClipboardItems, function(i, iIdeaId) {
			aFilter.push(new Filter({
				path: "ID",
				operator: FilterOperator.EQ,
				value1: iIdeaId
		    }));
		});
		
		return (aFilter.length === 0) ? [] : [new Filter(aFilter, false)];
	};
    
    DuplicateActionMixin.isClipboardIdeaSelected = function(iIdeaid) {
        var aSelectedIdeas = this.getModel("duplicate").getProperty("/selectedDupIdeas");
        if(!aSelectedIdeas){
            return false;
        }
        var aMatchedIdeas = jQuery.grep(aSelectedIdeas, function(oIdea) {
			return oIdea.id === iIdeaid;
		});
		
	    return aMatchedIdeas.length > 0;
    };
    
    DuplicateActionMixin.onAddFromClipboardIdeaSelected = function(oEvent) {
		var oSource = oEvent.getSource();
		var bSelected = oEvent.getParameter("selected");
		var iIdeaId = oSource.getBindingContext("data").getProperty("ID");
		var aSelectedIdeas = this.getModel("duplicate").getProperty("/selectedDupIdeas").slice(0);
		var aMatchedIdeas = jQuery.grep(aSelectedIdeas, function(oIdea) {
			return oIdea.id === iIdeaId;
		});
		if (bSelected && aMatchedIdeas.length === 0) {
			aSelectedIdeas.push({id: iIdeaId});
		} else if (!bSelected && aMatchedIdeas.length !== 0) {
			// remove expert from array
			aSelectedIdeas = jQuery.grep(aSelectedIdeas, function(oIdea) {
				return oIdea.id !== iIdeaId;
			});
		}
		this.getModel("duplicate").setProperty("/selectedDupIdeas", aSelectedIdeas);
	};
	
	/**
     * Event handler: Opens Assignment Action sheet with assignment options and prepare the internal private model
     * 
     * @param {Event} oEvent the event
     **/
    DuplicateActionMixin.onDuplicate = function(oEvent) {
        var that = this;
        var oSource = oEvent.getSource();
        var iDuplicateIdeaId = oEvent.getSource() && 
                               oEvent.getSource().getBindingContext("data") && 
                               oEvent.getSource().getBindingContext("data").getProperty("ID");
        var iIdeaId = this.getObjectModel().getProperty("/ID");
        var oPropertyModel = new PropertyModel(
            "sap.ino.xs.object.idea.Idea",
            iDuplicateIdeaId,
            {actions : [{"markAsDuplicate": [iIdeaId]}, {"unmarkAsDuplicate": [iIdeaId]}]},
            false);
        oPropertyModel.getDataInitializedPromise().done(function(oData){
            if (oData && oData.actions && oData.actions.markAsDuplicate && oData.actions.unmarkAsDuplicate) {
                that.setModel(new JSONModel(oData), "duplicate");
                that.getModel("duplicate").setProperty("/duplicateIdeaId", iDuplicateIdeaId);
                that._openDuplicateActionSheet(oSource);
            }
        });
    };
    
    DuplicateActionMixin._openDuplicateActionSheet = function (oSource) {
        if (!this._oDuplicateActionSheet) {
            this._oDuplicateActionSheet = this.createFragment("sap.ino.vc.idea.fragments.DuplicateActionSheet", this.getView().getId());
            this.getView().addDependent(this._oDuplicateActionSheet);
        }
		jQuery.sap.delayedCall(0, this, function () {
			this._oDuplicateActionSheet.openBy(oSource);
		});
    };
    
    DuplicateActionMixin.onUnmarkAsDuplicate = function () {
        this.onMark(Idea.unmarkAsDuplicate, this.getText("IDEA_RELATED_TIT_UNMARK_AS_DUPLICATE_FAILED"));
    };
    
    DuplicateActionMixin.onMarkAsDuplicate = function () {
        this.onMark(Idea.markAsDuplicate, this.getText("IDEA_RELATED_TIT_MARK_AS_DUPLICATE_FAILED"));
    };
    
    DuplicateActionMixin.onMark = function (fnMark, sToastMessage) {
        var iIdeaId = this.getObjectModel().getProperty("/ID");
        var iDuplicateIdeaId = this.getModel("duplicate") && this.getModel("duplicate").getProperty("/duplicateIdeaId");
        var that = this;
        if(iDuplicateIdeaId) {
            fnMark(iDuplicateIdeaId, [iIdeaId]).done(function(){
    		    that.rebindRelatedItemsList();
            }).fail(function(){
                MessageToast.show(sToastMessage);
            });
        }
    };
    
    DuplicateActionMixin.rebindRelatedItemsList = function() {
        var oList = this.byId("idealist-related");
        oList.bindItems(oList.getBindingInfo("items"));
    };
    
    return DuplicateActionMixin;
});
}; // end of sap/ino/vc/idea/mixins/DuplicateActionMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.mixins.IdeaReadMixin') ) {
jQuery.sap.declare('sap.ino.vc.idea.mixins.IdeaReadMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/mixins/IdeaReadMixin",[
    "sap/ino/commons/models/object/IdeaRead",
    "sap/m/MessageToast",
    "sap/ino/commons/models/core/CodeModel",
    "sap/ui/model/json/JSONModel"
], function(IdeaRead, MessageToast, CodeModel, JSONModel) {
	"use strict";


	var ideaReadMixin = function() {
		throw "Mixin may not be instantiated directly";
	};

    ideaReadMixin.checkIdeaRead = function(id){
        return !!id;
    };
    
    ideaReadMixin.isRead = function(isRead){
        return !isRead;
    };
    
    ideaReadMixin.onMarkRead = function(event){
        var source = event.getSource();
        var custData = source.getCustomData() && source.getCustomData();
        var readId = custData[0] && custData[0].getValue();
        var ideaId = custData[1] && custData[1].getValue();
        //var layoutData = source.getLayoutData();
        IdeaRead.markRead(readId, {IDEA_ID: ideaId}).done(function(data){
            if(data){
                source.setEnabled(false);
                source.setProperty('enabled', false);
                //source.setLayoutData(layoutData.setPriority('Disappear'));
            }
        });
    };
    
	return ideaReadMixin;
});
}; // end of sap/ino/vc/idea/mixins/IdeaReadMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.mixins.VolunteerMixin') ) {
jQuery.sap.declare('sap.ino.vc.idea.mixins.VolunteerMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/mixins/VolunteerMixin",[
    "sap/ino/commons/models/object/IdeaVolunteer",
    "sap/m/MessageToast",
    "sap/ui/model/json/JSONModel"
], function(IdeaVolunteer, MessageToast, JSONModel) {
    "use strict";

	/**
	 * @class
	 * Mixin that provides an event for user voting
	 */
	var VolunteerMixin = function() {
		throw "Mixin may not be instantiated directly";
	};
	
	VolunteerMixin.toggleVolunteer = function(oEvent) {
	    var iKey = oEvent.getParameter("Key");
	    var bValue = oEvent.getParameter("Value");
	    var iIdeaId = oEvent.getParameter("IdeaId");
	    var self = this;
	    var oVolunteerControl = oEvent.getSource();
// 	    if (!this.oIdeaVolunteerModel) {
// 		    this.oIdeaVolunteerModel = new JSONModel();
// 		}
		if(!iKey){
		    this.oIdeaVolunteerModel = new JSONModel();
		}
		
// 		if(this.oIdeaVolunteerModel) {
// 		    var oIdeaVolunteer = this.oIdeaVolunteerModel.getProperty("/" + iIdeaId);
// 		    //iKey = oIdeaVolunteer ? oIdeaVolunteer.ID : iKey;
// 		    iKey = iKey ? iKey : oIdeaVolunteer.ID;
// 		}
	    
	    var showMsg = bValue ? "VOLUNTEERS_LEAVE_SUCCESS" : "VOLUNTEERS_ADD_SUCCESS";
	    
	    var oResponse = IdeaVolunteer.toggleVolunteer(iKey, iIdeaId);
	    
	    if (oVolunteerControl.setEnabled) {
			oVolunteerControl.setEnabled(false);
		}
    		
	    oResponse.done(function(oEvent) {
	        var oVolunteerList = sap.ui.getCore().byId("volunteerView--volunteerlist");
	        if (oVolunteerList) {
	            var oBindingInfo = oVolunteerList.getBindingInfo("items");
	            oVolunteerList.bindItems(oBindingInfo);
	        }
	        MessageToast.show(self.getText(showMsg));
	        
			if(self.oIdeaVolunteerModel) {
			    var oResult = {
    			    ID: oEvent.GENERATED_IDS ? oEvent.GENERATED_IDS[-1] : null
    			};
			   self.oIdeaVolunteerModel.setProperty("/" + iIdeaId, oResult); 
			}
	        if (oVolunteerControl.setEnabled) {
    			oVolunteerControl.setEnabled(true);
    		}
    		if(self.isGlobalSearch){
                 self.getSearchResult(self.getViewProperty("/SEARCH_QUERY"));
            }  
	    });
	    
	    oResponse.fail(function(){
		    if (oVolunteerControl.setEnabled) {
				oVolunteerControl.setEnabled(true);
			}
		});
	};
	
	return VolunteerMixin;
});
}; // end of sap/ino/vc/idea/mixins/VolunteerMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.mixins.VoteMixin') ) {
jQuery.sap.declare('sap.ino.vc.idea.mixins.VoteMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/mixins/VoteMixin",[
    "sap/ino/commons/models/object/Vote",
    "sap/ino/commons/models/object/IdeaFollow",
    "sap/m/MessageToast",
    "sap/ino/commons/models/core/CodeModel",
    "sap/ui/model/json/JSONModel"
], function(Vote, IdeaFollow, MessageToast, CodeModel, JSONModel) {
	"use strict";

	/**
	 * @class
	 * Mixin that provides an event for user voting
	 */
	var oVotedByGroupType = {
		COM: "Company",
		COST: "Cost Center",
		ORG: "Organization",
		OFF: "Office"
	};
	var oVoteType = {
		TYPE_STAR: "STAR",
		TYPE_LIKE: "LIKE",
		TYPE_LIKE_DISLIKE: "LIKE_DISLIKE"
	};
	var VoteMixin = function() {
		throw "Mixin may not be instantiated directly";
	};

	VoteMixin.onUserVote = function(oEvent) {
		var oDialog = this.getVoteMixinDialog();
		var ideaId = oEvent.getParameter('objectId');
		var sPropertyUrl = this.getPropertyUrl(ideaId);
		var sVoteCommentType = this.getModel('data').getProperty(sPropertyUrl + '/VOTE_COMMENT_TYPE');
		var sVoteReasonCode = this.getModel('data').getProperty(sPropertyUrl + '/VOTE_REASON_CODE');
		var bPublicVote = this.getModel('data').getProperty(sPropertyUrl + '/PUBLIC_VOTE');
		var aCodes;
		this.dialogParameters = oEvent.getParameters();
		this.dialogSource = oEvent.getSource();
		this.resetClientMessages();
		var oMessageManager = new sap.ui.getCore().getMessageManager();
		oMessageManager.removeAllMessages();
        var iVoteId = oEvent.getParameter('voteId');
        
        if(!iVoteId){
          this.oIdeaVoteModel = new JSONModel();  
        }
// 		if (!this.oIdeaVoteModel) {
// 			this.oIdeaVoteModel = new JSONModel();
// 		}

		if (!sVoteCommentType || sVoteCommentType === null || sVoteCommentType === '') {
			return this.onSubmit();
		}

		if (!this.dialogSource.getProperty('value')) {
			return this.onSubmit();
		}

		if (sVoteCommentType === 'LIST' && sVoteReasonCode) {
			var sCodeTable = "sap.ino.xs.object.basis.ValueOptionList.ValueOptions";
			aCodes = CodeModel.getCodes(sCodeTable, function(oCode) {
				return oCode.LIST_CODE === sVoteReasonCode && oCode.ACTIVE === 1;
			});
		}

		var oVote = {
			VOTE_COMMENT_TYPE: sVoteCommentType,
			VOTE_REASON_CODE: sVoteReasonCode,
			VOTE_COMMENT_LIST: aCodes,
			PUBLIC_VOTE: bPublicVote,
			VOTE_COMMENT: "",
			VOTE_REASON: aCodes && aCodes[0].CODE || ""
		};

		this.oVoteModel = new JSONModel();
		this.oVoteModel.setData(oVote);

		oDialog.setModel(this.oVoteModel, "vote");

		oDialog.open();
	};

	VoteMixin.getPropertyUrl = function(ideaId) {
		var propertyKey = ['IdeaMediumCommunity', 'MyIdeaMediumCommunity', 'IdeaMediumBackofficeSearch', 'IdeaFull'];
		return this.CheckProperty(propertyKey, ideaId);
	};

	VoteMixin.CheckProperty = function(aList, ideaId) {
		var aKeyList = aList,
			sProperty;
		if (!aKeyList || !ideaId) {
			return false;
		}
		for (var i = 0; i < aKeyList.length; i++) {
			sProperty = this.getEntityKey(aKeyList[i], ideaId);
			if (sProperty) {
				return '/' + sProperty;
			}
		}
	};

	VoteMixin.getEntityKey = function(sEntitySetName, vKey) {
		var oCalcViewRegex = new RegExp("^" + sEntitySetName + "\\(.*" + vKey + "\\)$");
		var oCalcViewRegex2 = new RegExp("^" + sEntitySetName + "\\(.*(')(" + vKey + ")\\1\\)$");
		var oCalcViewRegex3 = new RegExp("^" + sEntitySetName + "\\(.*=" + vKey + "\\)$");
		var oCalcViewRegex4 = new RegExp("^" + sEntitySetName + "\\(.*(=')(" + vKey + ")\\1\\)$");
		var oData = this.getModel('data').getProperty("/");
		var sEntityKey;
		var aEntityKey = [];
		jQuery.each(oData, function(sKey) {
			if (oCalcViewRegex.test(sKey) || oCalcViewRegex2.test(sKey)) {
				aEntityKey.push(sKey);
			}
		});
		if (aEntityKey.length > 1) {
			aEntityKey.forEach(function(sKey) {
				if (oCalcViewRegex3.test(sKey) || oCalcViewRegex4.test(sKey)) {
					sEntityKey = sKey;
				}
			});
		} else {
			sEntityKey = aEntityKey && aEntityKey[0];
		}
		return sEntityKey;
	};

	VoteMixin.onSubmit = function(oEvent) {
		var self = this;
		var oVote;
		var oVoteControl = this.dialogSource;
		var voteReason = this._oVoteMixinDialog.getModel('vote') ? this._oVoteMixinDialog.getModel('vote').getProperty('/VOTE_REASON') : '';
		var voteComment = this._oVoteMixinDialog.getModel('vote') ? this._oVoteMixinDialog.getModel('vote').getProperty('/VOTE_COMMENT') : '';
		var iIdeaId = this.dialogParameters.objectId;
		//var oIdeaVote = this.oIdeaVoteModel.getProperty("/" + iIdeaId);
		var iScore = this.dialogParameters.value;
		//var iVoteId = oIdeaVote ? oIdeaVote.ID : this.dialogParameters.voteId;
		var iVoteId = this.dialogParameters.voteId;
		var sRoute = this.routes && this.routes.length ? this.routes[0] : undefined;
		if (!this.hasAnyClientErrorMessages()) {
			oVote = Vote.vote(iIdeaId, iScore, iVoteId, voteReason, voteComment);

			if (oVoteControl.setEnabled) {
				oVoteControl.setEnabled(false);
			}
		}
		var sPropertyUrl = this.getPropertyUrl(this.dialogParameters.objectId);
		var sVotedByGroup = this.getModel('data').getProperty(sPropertyUrl + '/VOTED_BY_GROUP');
		//Begin---Auto Follow when user votes	   
		var iFollowId = this.getModel('data').getProperty(sPropertyUrl + '/FOLLOW');
		var iAutoFollow = this.getModel('data').getProperty(sPropertyUrl + '/AUTO_FOLLOW');
		var sVoteTypeCode = this.getModel('data').getProperty(sPropertyUrl + '/VOTE_TYPE_TYPE_CODE');
		var bFollowAble = true;
		//End--- Auto Follow when user votes	    
		var sVoteMode = oVote.mode;
		if (oVote) {
			if (sVoteMode === "DEL_VOTE") {
				oVote.vote.done(function() {
					var sListId = "voteView--voteList";
					var oVoteList = sap.ui.getCore().byId(sListId);
					if (oVoteList) {
						var oBindingInfo = oVoteList.getBindingInfo("items");
						oVoteList.bindItems(oBindingInfo);
					}
					if (!sVotedByGroup) {
						MessageToast.show(self.getText("VOTE_MSG_REMOVE_VOTE_SUCCESS"));
					} else {
						MessageToast.show(self.getText("VOTE_MSG_REMOVE_VOTE_BY_GROUP_SUCCESS", [oVotedByGroupType[sVotedByGroup]]));
						// refresh group vote list
						var oGroupList = sap.ui.getCore().byId("voteView--groupVoteList");
						if (oGroupList) {
							var oBindingInfoGroup = oGroupList.getBindingInfo("items");
							oGroupList.bindItems(oBindingInfoGroup);
						}
					}
					var oVoteResult = {
						ID: null,
						SCORE: 0
					};
					if (self.oIdeaVoteModel) {
						self.oIdeaVoteModel.setProperty("/" + iIdeaId, oVoteResult);
					}

					if (oVoteControl.setEnabled) {
						oVoteControl.setEnabled(true);
					}
					//When it's the global search, the idea object when vote, 
					//this vote count will affect on the label immediately
				// 	if (sRoute && sRoute.indexOf("search") > -1) {
				// 		self.globalSearchAllVoteCount(sVoteMode, oVoteResult);
				// 	}
    		  if(self.isGlobalSearch){
                 self.getSearchResult(self.getViewProperty("/SEARCH_QUERY"));
                }  				
				});
			} else if (sVoteMode === "MODIFY_VOTE") {
				oVote.vote.done(function(oEvent) {
					var sListId = "voteView--voteList";
					var oVoteList = sap.ui.getCore().byId(sListId);
					if (oVoteList) {
						var oBindingInfo = oVoteList.getBindingInfo("items");
						oVoteList.bindItems(oBindingInfo);
					}
					if (!sVotedByGroup) {
						MessageToast.show(self.getText("VOTE_MSG_VOTE_SUCCESS"));
					} else {
						MessageToast.show(self.getText("VOTE_MSG_VOTE_BY_GROUP_SUCCESS", [oVotedByGroupType[sVotedByGroup]]));
						// refresh group vote list
						var oGroupList = sap.ui.getCore().byId("voteView--groupVoteList");
						if (oGroupList) {
							var oBindingInfoGroup = oGroupList.getBindingInfo("items");
							oGroupList.bindItems(oBindingInfoGroup);
						}
					}

					var oVoteResult = {
						ID: oEvent.GENERATED_IDS[-1] || iVoteId,
						SCORE: iScore
					};
					if (self.oIdeaVoteModel) {
						self.oIdeaVoteModel.setProperty("/" + iIdeaId, oVoteResult);
					}
					if (oVoteControl.setEnabled) {
						oVoteControl.setEnabled(true);
					}
					//Auto Follow Function when Vote
					if (sVoteTypeCode === "STAR") {
						var iMaxStarNo = self.getModel('data').getProperty(sPropertyUrl + '/MAX_STAR_NO');
						bFollowAble = iScore && iMaxStarNo && iScore >= (iMaxStarNo - 1) ? true : false;
					} else if (sVoteTypeCode === "LIKE_DISLIKE") {
						bFollowAble = iScore > 0 ? true : false;
					}
					if (!iFollowId && iAutoFollow && bFollowAble) {
						self.onVotedFollow();
					}
					//When it's the global search, the idea object when vote, 
					//this vote count will affect on the label immediately
				// 	if (sRoute && sRoute.indexOf("search") > -1) {
				// 		self.globalSearchAllVoteCount(sVoteMode, oVoteResult);
				// 	}
				if(self.isGlobalSearch){
                 self.getSearchResult(self.getViewProperty("/SEARCH_QUERY"));
                }  	
				});
			}
			oVote.vote.fail(function(data) {
				if (oVoteControl.setEnabled) {
					oVoteControl.setEnabled(true);
				}
				MessageToast.show(data.MESSAGES.length === 1 ? data.MESSAGES[0].MESSAGE_TEXT : self.getText("VOTE_MSG_VOTING_NOT_POSSIBLE"));
			});

			this.getVoteMixinDialog().setModel("", "vote");
			return this.getVoteMixinDialog().close();
		}
	};
	VoteMixin.onVotedFollow = function() {
		var that = this;
		var iIdeaId = this.dialogParameters.objectId;
		var oFollow = IdeaFollow.follow(iIdeaId, "IDEA", 0);
		oFollow.done();
		// 		if (!this.oIdeaFollowModel) {
		// 			this.oIdeaFollowModel = new JSONModel();
		// 		}
		// 		oFollow.done(function(callback) {
		// 			if (that.oIdeaFollowModel) {
		// 				var oResult = {
		// 					ID: callback.GENERATED_IDS ? callback.GENERATED_IDS[-1] : undefined
		// 				};
		// 				that.oIdeaFollowModel.setProperty("/IDEA" + "(" + iIdeaId + ")", oResult);
		// 			}
		// 		});
	};
	VoteMixin.globalSearchAllVoteCount = function(voteMode, voteResult) {
		var oDataModel = this.getModel("data");
		var oEventSource = this.dialogParameters;
		var aSearchIdeas = oDataModel.oData.Ideas.data;
		var iCurrentIdea = oEventSource.objectId;
		var oIdeaOperating, iIndex;
		jQuery.each(aSearchIdeas, function(index, objectIdea) {
			if (objectIdea.ID === iCurrentIdea) {
				oIdeaOperating = objectIdea;
				iIndex = index;
				return false;
			}
		});
		if (oIdeaOperating) {
			//For different Vote types, to update the model directly which will show current user's action result   
			switch (oIdeaOperating.VOTE_TYPE_TYPE_CODE) {
				case oVoteType.TYPE_LIKE:
					if (voteMode === "MODIFY_VOTE") {
						oIdeaOperating.VOTE_COUNT += 1;
					} else {
						oIdeaOperating.VOTE_COUNT -= 1;
					}
					oIdeaOperating.USER_SCORE = oEventSource.value;
					oIdeaOperating.SCORE = oIdeaOperating.VOTE_COUNT;
					oIdeaOperating.VOTE_ID = voteResult.ID;
					break;
				case oVoteType.TYPE_LIKE_DISLIKE:
					if (voteMode === "MODIFY_VOTE") {
						oIdeaOperating.NEG_VOTES = oEventSource.value === -1 ? oIdeaOperating.NEG_VOTES + 1 : oIdeaOperating.NEG_VOTES;
						oIdeaOperating.POS_VOTES = oEventSource.value === 1 ? oIdeaOperating.POS_VOTES + 1 : oIdeaOperating.POS_VOTES;
						oIdeaOperating.POS_VOTES = oEventSource.value === -1 && oEventSource.oldValue === 1 ? oIdeaOperating.POS_VOTES - 1 : oIdeaOperating
							.POS_VOTES;
						oIdeaOperating.NEG_VOTES = oEventSource.value === 1 && oEventSource.oldValue === -1 ? oIdeaOperating.NEG_VOTES - 1 : oIdeaOperating
							.NEG_VOTES;
					} else {
						oIdeaOperating.POS_VOTES = oEventSource.oldValue === 1 ? oIdeaOperating.POS_VOTES - 1 : oIdeaOperating.POS_VOTES;
						oIdeaOperating.NEG_VOTES = oEventSource.oldValue === -1 ? oIdeaOperating.NEG_VOTES - 1 : oIdeaOperating.NEG_VOTES;
					}
					oIdeaOperating.USER_SCORE = oEventSource.value;
					oIdeaOperating.VOTE_ID = voteResult.ID;
					break;
				case oVoteType.TYPE_STAR:
				    var fScore = oIdeaOperating.SCORE * oIdeaOperating.VOTE_COUNT;
				    var foldUserScore = oIdeaOperating.USER_SCORE;
					if (voteMode === "MODIFY_VOTE") {
						oIdeaOperating.VOTE_COUNT = oIdeaOperating.USER_SCORE ? oIdeaOperating.VOTE_COUNT : oIdeaOperating.VOTE_COUNT + 1;
					} else {
						oIdeaOperating.VOTE_COUNT = oIdeaOperating.VOTE_COUNT - 1;
					}
					oIdeaOperating.USER_SCORE = oEventSource.value;
					oIdeaOperating.SCORE = oIdeaOperating.VOTE_COUNT ? ( fScore + oIdeaOperating.USER_SCORE - foldUserScore) / oIdeaOperating.VOTE_COUNT : 0;
					oIdeaOperating.VOTE_ID = voteResult.ID;
					break;
				default:
					break;
			}
			oDataModel.setProperty("/Ideas/data/" + iIndex, oIdeaOperating);
		}
	};
	VoteMixin.onCloseDialog = function(oEvent) {
		this.dialogSource.setValue(this.dialogParameters.oldValue);
		this.getVoteMixinDialog().setModel("", "vote");
		return this.getVoteMixinDialog().close();
	};

	VoteMixin.getVoteMixinDialog = function() {
		if (!this._oVoteMixinDialog) {
			this._oVoteMixinDialog = this.createFragment('sap.ino.vc.idea.fragments.VoteMixin');
			this.getView().addDependent(this._oVoteMixinDialog);
		}
		return this._oVoteMixinDialog;
	};

	VoteMixin.transitionTitle = function(voteText) {
		var text, voteType;
		var parameters = this.dialogParameters;
		if (voteText) {
			text = CodeModel.getText("sap.ino.xs.object.basis.ValueOptionList.Root", voteText);
		} else {
			text = this.getText('IDEA_VOTE_DEFAULT_TITLE');
		}

		switch (parameters.type) {
			case 'LIKE':
				voteType = 'IDEA_VOTE_LIKE';
				break;
			case 'LIKE_DISLIKE':
				voteType = parameters.value === 1 ? 'IDEA_VOTE_LIKE' : 'IDEA_VOTE_DISLIKE';
				break;
			case 'STAR':
				voteType = 'IDEA_VOTE_STAR';
				break;
			default:
				voteType = 'IDEA_VOTE_LIKE';
				break;
		}

		return this.getText(voteType, [text]);
	};

	VoteMixin.onIdeaCommentPress = function(oEvent) {
		var iIdeaId;

		if (oEvent.getParameter("ideaId")) {
			iIdeaId = oEvent.getParameter("ideaId");
		} else {
			try {
				if (oEvent.getSource().getProperty("objectId")) {
					iIdeaId = oEvent.getSource().getProperty("objectId");
				}
			} catch (e) {
				iIdeaId = oEvent.getSource().getBindingContext("data").getProperty("ID");
			}
		}
		if (iIdeaId) {
			this.navigateTo("idea-display", {
				id: iIdeaId,
				query: {
					section: "sectionComments"
				}
			});
		}
	};

	return VoteMixin;
});
}; // end of sap/ino/vc/idea/mixins/VoteMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.reward.mixins.MassActionMixin') ) {
jQuery.sap.declare('sap.ino.vc.reward.mixins.MassActionMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/reward/mixins/MassActionMixin",[
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/models/aof/PropertyModel",
    "sap/ino/commons/models/object/RewardList",
    "sap/ino/vc/commons/BaseController"
], function(JSONModel, PropertyModel, RewardList, BaseController) {
	"use strict";

	var MassActionMixin = function() {
		throw "Mixin may not be instantiated directly";
	};

	MassActionMixin.onMassDelete = function(oEvent) {
		var oSource = oEvent.getSource();
		var oTable = this.getList();
		var aRewardId = [];
		var aRewardListId = [];
		var aSelect = oTable.getSelectedIndices();
		if (aSelect.length) {
			for (var i = 0; i < aSelect.length; i++) {
				aRewardId.push(oTable.getContextByIndex(aSelect[i]).getProperty("ID"));
				if (aRewardListId.indexOf(oTable.getContextByIndex(aSelect[i]).getProperty("REWARD_LIST_ID")) === -1) {
					aRewardListId.push(oTable.getContextByIndex(aSelect[i]).getProperty("REWARD_LIST_ID"));
				}
			}
		}
		var that = this;

		var oDelRequest = BaseController.prototype.executeObjectAction.call(that, RewardList, "bulkDeleteRewards", {
			staticparameters: {
				"REWARD_ID": aRewardId,
				"REWARD_LIST_ID": aRewardListId
			},
			messages: {
				confirm: "MSG_DEL_CONFIRM",
				success: "MSG_DEL_SUCCESS"
			}
		});
		oDelRequest.done(function(oResponse) {
			if (oResponse && oResponse.confirmationCancelled === true) {
				if (oSource && jQuery.type(oSource.focus) === "function") {
					oSource.focus();
				}
				return;
			}
			if (that.bindList && typeof(that.bindList) === "function") {
				// context: idea list (campaign / all)
				that.bindList();
			}
		});
	};

	MassActionMixin.resetActionState = function() {
		var that = this;
		var aButtons = ["sapInoMassExportBtn", "sapInoMassDeleteBtn"];
		jQuery.each(aButtons, function(iIdx, sElementID) {
			var oBtn = that.byId(sElementID);
			if (oBtn) {
				oBtn.setEnabled(false);
			}
		});
	};

	return MassActionMixin;
});
}; // end of sap/ino/vc/reward/mixins/MassActionMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.application.BaseComponent') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.application.BaseComponent'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.resource.ResourceModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.v2.ODataModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/application/BaseComponent",[
    "sap/ui/core/UIComponent",
    "sap/ui/model/json/JSONModel",
    "sap/ui/Device",
    "sap/ui/core/MessageType",
    "sap/ino/commons/application/Configuration",
    "sap/ino/commons/application/WebAnalytics",
    "sap/ui/model/resource/ResourceModel",
    "sap/ino/commons/models/core/CodeModel",
    "sap/ino/commons/models/core/ClipboardModel",
    "sap/ino/commons/models/core/ModelSynchronizer",
    "sap/ui/model/odata/v2/ODataModel",
    "sap/ui/core/IconPool",
    "sap/ino/commons/models/misc/Notifications",
    "sap/m/MessageBox"
], function(UIComponent, JSONModel, Device, MessageType, Configuration, WebAnalytics,
	ResourceModel, CodeModel, ClipboardModel, ModelSynchronizer, ODataModel, IconPool, Notifications, MessageBox) {
	"use strict";

	// gets replaced by ui build
	var sVersionTimestamp = "2024-09-24 08:05:15";
	// inm bread crumbs route list
	var breadCrumbsTexts = [{
			"TEXT": "BREAD_HOME_TITLE_TEXT",
			"name": "home",
			"target": "home",
			"available": "all",
			"path": "home"
             }, {

			"name": "home-explicit",
			"target": "home"
             }, {
			"variant": true,
			"TEXT": "PAGE_TIT_IDEAS",
			"MANAGETEXT": "PAGE_TIT_IDEAS",
			"name": "idealist",
			"target": "idealist",
			"available": "idea-display",
			"path": "home/idealist"

             }, {
			"variant": true,
			"name": "idealistvariant",
			"target": "idealist",
			"available": "idea-display",
			"path": "home/idealistvariant"
             }, {
			"variant": true,
			"TEXT": "PAGE_TIT_WALLS",
			"name": "walllist",
			"target": "walllist",
			"available": "wall",
			"path": "home/walllist"
             }, {
			"variant": true,
			"name": "walllistvariant",
			"target": "walllist",
			"path": "home/walllist"
			 }, {
			"oData": "Wall",
			"pattern": "id",
			"title": "BREAD_WALL_TITLE_TEXT",
			"name": "wall",
			"available": "wall",
			"target": "wall",
			"path": "home/walllist/wall"

             }, {
			"oData": "Wall",
			"pattern": "id",
			"name": "wallremote",
			"target": "wallremote",
			"path": "home/walllist/wallremote",
			"available": "wall"
             }, {
			"oData": "Wall",
			"pattern": "id",
			"name": "wallremoteitem-headline",
			"target": "wallremoteitem-headline",
			"path": "home/walllist/wallremote/wallremoteitem-headline"
             }, {
			"oData": "Wall",
			"pattern": "id",
			"name": "wallremoteitem-sticker",
			"target": "wallremoteitem-sticker",
			"path": "home/walllist/wallremote/wallremoteitem-sticker"
             }, {
			"oData": "Wall",
			"pattern": "id",
			"name": "wallremoteitem-link",
			"target": "wallremoteitem-link",
			"path": "home/walllist/wallremote/wallremoteitem-link"
             }, {
			"oData": "Wall",
			"pattern": "id",
			"name": "wallremoteitem-image",
			"target": "wallremoteitem-image",
			"path": "home/walllist/wallremote/wallremoteitem-image"
             }, {
			"oData": "Wall",
			"pattern": "id",
			"name": "wallremoteitem-text",
			"target": "wallremoteitem-text",
			"path": "home/walllist/wallremote/wallremoteitem-text"
             }, {
			"oData": "Wall",
			"pattern": "id",
			"name": "wallremoteitem-sprite",
			"target": "wallremoteitem-sprite",
			"path": "home/walllist/wallremote/wallremoteitem-sprite"
             }, {
			"oData": "Wall",
			"pattern": "id",
			"name": "wallremoteitem-person",
			"target": "wallremoteitem-person",
			"path": "home/walllist/wallremote/wallremoteitem-person"
             }, {
			"oData": "Wall",
			"pattern": "id",
			"name": "wallremoteitem-video",
			"target": "wallremoteitem-video",
			"path": "home/walllist/wallremote/wallremoteitem-video"
             }, {
			"oData": "Wall",
			"pattern": "id",
			"name": "wallremoteitem-attachment",
			"target": "wallremoteitem-attachment",
			"path": "home/walllist/wallremote/wallremoteitem-attachment"
             }, {
			"oData": "Wall",
			"pattern": "id",
			"name": "wallremoteitem-group",
			"target": "wallremoteitem-group",
			"path": "home/walllist/wallremote/wallremoteitem-group"
             }, {
			"oData": "Wall",
			"pattern": "id",
			"name": "wallremoteitem-line",
			"target": "wallremoteitem-line",
			"path": "home/walllist/wallremote/wallremoteitem-line"
             }, {
			"oData": "Wall",
			"pattern": "id",
			"name": "wallremoteitem-arrow",
			"target": "wallremoteitem-arrow",
			"path": "home/walllist/wallremote/wallremoteitem-arrow"
             }, {
			"variant": true,
			"TEXT": "PAGE_TIT_CAMPAIGNS",
			"name": "campaignlist",
			"target": "campaignlist",
			"available": "campaign",
			"path": "home/campaignlist"
             }, {
			"variant": true,
			"name": "campaignlistvariant",
			"target": "campaignlist",
			"available": "campaign",
			"path": "home/campaignlistvariant"
             }, {
			"TEXT": "PAGE_TIT_PEOPLE",
			"name": "peoplelist",
			"target": "peoplelist",
			"path": "home/peoplelist"
             }, {
			"name": "peoplelistvariant",
			"target": "peoplelist",
			"path": "home/peoplelistvariant"
             }, {
			"TEXT": "PAGE_TIT_EXPERTFINDER",
			"name": "expertfinder",
			"target": "expertfinder",
			"path": "home/expertfinder"
             }, {
			"oData": "IdeaSmall",
			"pattern": "id",
			"title": "BREAD_IDEA_TITLE_TEXT",
			"name": "idea-display",
			"target": "idea-display",
			"available": "evaluation-display/evaluation-create/evaluationrequest-create/evaluationrequest-display/evaluationrequest-edit/idea-display",
			"path": "home/campaignlist/campaign/campaign-idealist/idea-display"
             }, {
			"TEXT": "PAGE_TIT_IDEA_EDIT",
			"oData": "IdeaSmall",
			"name": "idea-edit",
			"target": "idea-modify",
			"path": "home/idealist/idea-display/idea-edit"
             }, {
			"TEXT": "PAGE_TIT_IDEA_CREATE",
			"name": "idea-create",
			"target": "idea-modify",
			"path": "home/idea-create"
              }, {
			"oData": "CampaignFull",
			"pattern": "id",
			"title": "BREAD_CAMPAIGN_TITLE_TEXT",
			"name": "campaign",
			"target": "campaign",
			"available": "campaign-idealist/campaign-idealistvariant/campaign-bloglist/campaign-comment/campaign-feeds/campaign-managerlist/blog-create/idea-display/blog-display/idea-create/campaign-bloglistvariant",
			"path": "home/campaignlist/campaign"
             }, {
			"TEXT": "PAGE_TIT_CAMPAIGN_COMMENT",
			"name": "campaign-comment",
			"target": "campaign-comment",
			"path": "home/campaignlist/campaign/campaign-comment"
             }, {
			"TEXT": "PAGE_TIT_CAMPAIGN_FEEDS",
			"name": "campaign-feeds",
			"target": "campaign-feeds",
			"path": "home/campaignlist/campaign/campaign-feeds"
             }, {
			"variant": true,
			"TEXT": "PAGE_TIT_CAMPAIGN_IDEAS",
			"name": "campaign-idealist",
			"target": "campaign-idealist",
			"available": "idea-display",
			"path": "home/campaignlist/campaign/campaign-idealist"
             }, {
			"variant": true,
			"name": "campaign-idealistvariant",
			"target": "campaign-idealist",
			"available": "idea-display",
			"path": "home/campaignlist/campaign/campaign-idealistvariant"
             }, {
			"TEXT": "PAGE_TIT_CAMPAIGN_MANAGERS",
			"variant": true,
			"name": "campaign-managerlist",
			"target": "campaign-managerlist",
			"path": "home/campaignlist/campaign/campaign-managerlist"
             }, {
			"TEXT": "PAGE_TIT_SEARCHCATEGORY",
			"name": "search",
			"target": "search",
			"path": "home/search"
             }, {

			"name": "searchcategory",
			"target": "searchcategory"
             }, {

			"name": "message",
			"target": "message"
             }, {

			"name": "vote",
			"target": "vote"
             }, {

			"name": "identitycard",
			"target": "identitycard"
             }, {

			"name": "processindicator",
			"target": "processindicator"
             }, {

			"name": "ideacard",
			"target": "ideacard"
             }, {

			"name": "campaigncard",
			"target": "campaigncard"
             }, {

			"name": "votedisplay",
			"target": "votedisplay",
			"path": "home/votedisplay"
             }, {
			"variant": true,
			"TEXT": "PAGE_TIT_REPORTS",
			"name": "reportlist",
			"target": "reportlist",
			"path": "home/reportlist"
             }, {
			"variant": true,
			"name": "reportlistvariant",
			"target": "reportlist",
			"path": "home/reportlistvariant"
             }, {
			"oData": "ReportTemplates",
			"title": "BREAD_REPORT_TITLE_TEXT",
			"pattern": "code",
			"TEXT": "PAGE_TIT_REPORTS",
			"name": "report",
			"target": "report",
			"path": "home/reportlist/report"
             }, {
			//"oData":"IdeaEvaluation",
			//"pattern": "id",
			"TEXT": "PAGE_TIT_EVALUATION",
			"name": "evaluation-display",
			"target": "evaluation-display",
			"available": "evaluation-edit",
			"path": "home/evaluation-display"
             }, {
			"TEXT": "PAGE_TIT_EVALUATION_EDIT",
			"name": "evaluation-edit",
			"target": "evaluation-modify",
			"path": "home/evaluation-display/evaluation-edit"
             },
		{

			"name": "welcomepage",
			"target": "welcomepage"
             }, {
			"TEXT": "PAGE_TIT_EVALUATION_CREATE",
			"name": "evaluation-create",
			"target": "evaluation-modify"
             }, {
			"TEXT": "PAGE_TIT_FEEDS",
			"name": "feedlist",
			"target": "feedlist",
			"path": "home/feedlist"
             }, {
			"variant": true,
			"TEXT": "PAGE_TIT_TAGS",
			"name": "taglist",
			"target": "taglist",
			"path": "home/taglist"
             }, {
			"TEXT": "PAGE_TIT_TAGS",
			"name": "taglistvariant",
			"target": "taglist",
			"path": "home/taglistvariant"
             }, {
			"variant": true,
			"name": "followlist",
			"target": "followlist",
			"path": "home/followlist"
			 }, {
			"variant": true,
			"name": "followlistvariant",
			"target": "followlist",
			"path": "home/followlistvariant"
			 }, {
			"variant": true,
			"TEXT": "REGISTER_APPR_LIST_TIT",
			"name": "registerapprovallist",
			"target": "registerapprovallist",
			"path": "home/registerapprovallist"
			 }, {
			"variant": true,
			"TEXT": "REGISTER_APPR_LIST_TIT",
			"name": "registerapprovallistvariant",
			"target": "registerapprovallist",
			"path": "home/registerapprovallistvariant"
			 }, {
			"variant": true,
			"TEXT": "REGISTER_APPR_LIST_TIT",
			"name": "campaign-registerapprovallistvariant",
			"target": "campaign-registerapprovallist",
			"path": "campaign/campaign-registerapprovallistvariant"
			 },
		{
			"TEXT": "PAGE_TIT_BLOGS",
			"name": "bloglist",
			"target": "bloglist",
			"available": "blog-display",
			"path": "home/bloglist"
             }, {
			"variant": true,
			"name": "bloglistvariant",
			"target": "bloglist",
			"available": "blog-display",
			"path": "home/bloglistvariant"
             }, {
			"variant": true,
			"TEXT": "PAGE_TIT_CAMPAIGN_BLOGS",
			"name": "campaign-bloglist",
			"target": "campaign-bloglist",
			"available": "blog-display",
			"path": "home/campaignlist/campaign/campaign-bloglist"
             }, {
			"variant": true,
			"name": "campaign-bloglistvariant",
			"target": "campaign-bloglist",
			"available": "blog-display",
			"path": "home/campaignlist/campaign/campaign-bloglistvariant"
             }, {
			"TEXT": "PAGE_TIT_BLOG_EDIT",
			"name": "blog-edit",
			"target": "blog-modify",
			"path": "home/bloglist/blog-display/blog-edit"
             }, {
			"TEXT": "PAGE_TIT_BLOG_CREATE",
			"name": "blog-create",
			"target": "blog-modify",
			"path": "home/blog-create"
              }, {
			"oData": "CampaignBlogsSmall",
			"title": "BREAD_BLOG_TITLE_TEXT",
			"pattern": "id",
			"name": "blog-display",
			"available": "blog-display/blog-edit",
			"target": "blog-display",
			"path": "home/bloglist/blog-display"
              }, {
			"TEXT": "PAGE_TIT_EVALUATIONREQUEST_CREATE",
			"name": "evaluationrequest-create",
			"target": "evaluationrequestmodify",
			"path": "home/evaluationrequest-create"
             }, {
			"TEXT": "PAGE_TIT_EVALUATIONREQUEST_EDIT",
			"name": "evaluationrequest-edit",
			"target": "evaluationrequestmodify",
			"path": "home/evalreqlist/evaluationrequest-display/evaluationrequest-edit"
             }, {
			// "oData":"EvaluationRequestFull",
			//"pattern": "id",
			"TEXT": "PAGE_TIT_EVALUATIONREQUEST_DISPLAY",
			"name": "evaluationrequest-display",
			"target": "evaluationrequestdisplay",
			"available": "evaluationrequest-edit/evaluationrequest-item",
			"path": "home/evalreqlist/evaluationrequest-display"
             }, {
			//"oData":"EvaluationRequestFullItem",
			//	"pattern": "id",
			"TEXT": "PAGE_TIT_EVALUATIONREQUEST_ITEM",
			"name": "evaluationrequest-item",
			"target": "evaluationrequestitem",
			"path": "home/evalreqlist/evaluationrequest-display/evaluationrequest-item"
             }, {
			"variant": true,
			"TEXT": "PAGE_TIT_REWARDS",
			"name": "rewardlist",
			"target": "rewardlist",
			"path": "home/rewardlist"
             }, {
			"variant": true,
			"name": "rewardlistvariant",
			"target": "rewardlist",
			"path": "home/rewardlistvariant"
             }, {
			"variant": true,
			"TEXT": "PAGE_TIT_EVALUATION_REQUESTS",
			"name": "evalreqlist",
			"target": "evalreqlist",
			"path": "home/evalreqlist"
             }, {
			"variant": true,
			"name": "evalreqlistvariant",
			"target": "evalreqlist",
			"path": "home/evalreqlistvariant"
             }, {
			"TEXT": "PAGE_TIT_MY_SETTING",
			"name": "mySetting",
			"target": "mySetting",
			"path": "home/mySetting"
             }, {
			"TEXT": "PAGE_TIT_LEADERBOARD",
			"name": "leaderboard",
			"target": "leaderboard",
			"path": "home/leaderboard"
             }
             ];
	/**
	 * Constructor for a new Component.
	 *
	 * Holding the general setup. Setting up models etc.
	 *
	 * @class BaseComponent holding the general setup of the application.
	 * @extends sap.ui.core.UIComponent
	 * @version 1.3.0
	 *
	 * @constructor
	 * @public
	 * @name sap.ino.commons.application.BaseComponent
	 */
	return UIComponent.extend("sap.ino.commons.application.BaseComponent", {
		init: function() {
			UIComponent.prototype.init.apply(this, arguments);
			this.initLanguage();
			this.initModels();
			this.initRouting();
			this.initURLWhitelist();
			this.initSessionTimeoutHandler();
			this.initTabHandler();
			this.start();
		},

		initLanguage: function() {
			var oUser = this._getCurrentUser();
			if (oUser) {
				sap.ui.getCore().getConfiguration().setLanguage(oUser.LOCALE);
			}
		},

		initModels: function() {
			var oMessageManager = sap.ui.getCore().getMessageManager();

			// device
			var oDeviceModel = new JSONModel(Device);
			oDeviceModel.setDefaultBindingMode("OneWay");
			this.setModel(oDeviceModel, "device");

			// navigation
			var oNavigationModel = new JSONModel();
			this.setModel(oNavigationModel, "navigation");

			// Texts
			this._i18n = this.getModel("i18n");
			if (!this._i18n) {
				this._i18n = new ResourceModel({
					bundleUrl: Configuration.getResourceBundleURL("nguii18n")
				});
				this.setModel(this._i18n, "i18n");
			}
			oMessageManager.unregisterMessageProcessor(this._i18n);

			// System Settings Configuration
			this.setModel(Configuration.getSystemSettingsModel(), "config");
			oMessageManager.unregisterMessageProcessor(Configuration.getSystemSettingsModel());

			// User Configuration
			this.setModel(Configuration.getUserModel(), "user");
			oMessageManager.unregisterMessageProcessor(Configuration.getUserModel());

			// Search
			this.setModel(Configuration.getSearchModel(), "search");
			oMessageManager.unregisterMessageProcessor(Configuration.getSearchModel());

			// Message handling
			var oMessageModel = oMessageManager.getMessageModel();
			this.setModel(oMessageModel, "message");

			// OData
			var sODataPath = Configuration.getFullApplicationPath("sap.ino.config.URL_PATH_OD_APPLICATION");
			if (Configuration.hasCurrentUserPrivilege("sap.ino.ui::backoffice.access")) {
				sODataPath = Configuration.getFullApplicationPath("sap.ino.config.URL_PATH_OD_BACKOFFICE");
			}

			var oDefaultModel = new ODataModel(sODataPath, false);
			// backend does not support HEAD request
			oDefaultModel.bDisableHeadRequestForToken = true;
			// this is set to "None" to avoid expensive inline count calculations
			oDefaultModel.setDefaultCountMode(sap.ui.model.odata.CountMode.None);
			this.setModel(oDefaultModel, "data");
			ModelSynchronizer.setODataModel(oDefaultModel);
			// Messages from OData are not relevant for us as we do have application object models
			// As many bindings on the OData Model exist message processing consumes a lot of time for each
			// odata call
			oMessageManager.unregisterMessageProcessor(oDefaultModel);

			// TODO: also enable this when debug mode is switched on for customer debugging
			if (window.less && window.less.env === "development") {
				oDefaultModel.setUseBatch(false);
			}

			this.setModel(CodeModel, "code");

			var bPollingActivated = Device.system.desktop;
			var oNotificationModel = new Notifications(bPollingActivated);
			this.setModel(oNotificationModel, "notifications");
			oNotificationModel.updateNotificationCount();

			// TODO: Refactor this so that these texts are contained in i18n
			// Text Modules
			var oModuleBundle = this.getModel("module");
			if (!oModuleBundle) {
				oModuleBundle = new ResourceModel({
					// INM-418: add timestamp to retrieve this resource from backend instead of local cache every time when terms and conditions info updated.
					bundleUrl: Configuration.getResourceBundleURL("moduletexts") + '?t=' + Date.now()
				});
				this.setModel(oModuleBundle, "module");
			}

			// general models
			var oHelpModel = new JSONModel({});
			oHelpModel.setDefaultBindingMode("OneWay");
			this.setModel(oHelpModel, "help");

			var oSearchModel = new JSONModel({});
			oSearchModel.setDefaultBindingMode("OneWay");
			this.setModel(oSearchModel, "search");

			var oComponentModel = new JSONModel({
				"FULLSCREEN": !this.getShell().getAppWidthLimited(),
				"SHOW_BACKOFFICE": this.getModel("user").getProperty("/privileges/sap.ino.ui::backoffice.access"), // auto enable backoffice view,
				"SHOW_BACKOFFICE_BLOG": this.getModel("user").getProperty("/privileges/sap.ino.ui::campaign_manager") // auto enable backoffice blog
			});
			oComponentModel.setDefaultBindingMode("OneWay");
			this.setModel(oComponentModel, "component");

			// ClipBoard
			var oClipboardModel = ClipboardModel.sharedInstance();
			oClipboardModel.setODataModel(oDefaultModel);
			// clipboard is enabled only for desktop & if backoffice privileges exist
			oClipboardModel.setEnabled(!this.getModel("device").getProperty("/system/phone") &&
				this.getModel("user").getProperty("/privileges/sap.ino.ui::backoffice.access")
			);
			this.setModel(oClipboardModel, "clipboard");

			// History
			var oHistoryModel = new JSONModel({
				HashList: [],
				CurrentHash: null,
				Count: 0
			});
			var oDetailHistoryModel = new JSONModel({
				HashList: []
			});

			this.setModel(oDetailHistoryModel, "historyDetail");
			this.setModel(oHistoryModel, "history");

			//BreadCrumbs
			var oBreadCrumbsModel = new JSONModel({
				CurrentRoute: "",
				CurrentAvailable: "all",
				CurrentHash: "none"
			});
			this.setModel(oBreadCrumbsModel, "breadCrumbs");
		},

		// TODO Routing / Navigating should be part of the App controller (holding the UI5 App) not of the Component
		initRouting: function() {
			var that = this;
			var oRouter = this.getRouter();
			var fnRoutingCallback = function(fnNavigate, sRoute, sCurrent) {
				var sRouteName = sRoute;
				var fnNav = function() {
					var oRoute = that.getRouter().getRoute(sRouteName);
					var sPattern = oRoute ? oRoute.getPattern() : "";
					if (sPattern) {
						sPattern = sPattern.split(":")[0];
					}

					if (sCurrent !== sPattern) {
						that.getRootController().onBeforeNavigate(sRouteName);
					}

					setTimeout(function() {
						// we need to give the busy indicator "time" to get shown
						fnNavigate();
						// TODO: onAfterNavigate is never called in case of navigating to identical target
						jQuery.sap.delayedCall(100, that.getRootController(), 'onAfterNavigate');
					}, 0);
				};
				that._navigateIfAllowed(fnNav);
			};
			var fnCloseCallback = function() {
				return that.getRootController().isCloseAllowed();
			};
			var fnTitleChangeCallback = function() {
				var oHistoryInstance = sap.ui.core.routing.History.getInstance();
				var aHistory = oHistoryInstance.aHistory;
				var aCurrentTitle = aHistory[oHistoryInstance.iHistoryPosition].split("/");
				var sCurrentTitle = "";
				if (aCurrentTitle.length > 2 && aCurrentTitle[2].split("?")[0]) { //eg: campaign/10000/comment
					sCurrentTitle = aCurrentTitle[0] + "_" + aCurrentTitle[2].replace(/-/g, "_").split("?")[0];
				} else { //eg: campaigns/10000
					sCurrentTitle = aCurrentTitle[0].replace(/-/g, "_").split("?")[0];
				}
				if (sCurrentTitle.indexOf("tags") === 0) {
					sCurrentTitle = "tags";
				}
				var sCurrentHash = aHistory[oHistoryInstance.iHistoryPosition];
				var sCurrentDirection = oHistoryInstance._sCurrentDirection;
				var oHistoryModel = that.getRootView().getModel("history");
				var oBreadCrumbsModel = that.getRootView().getModel("breadCrumbs");
				var sLastHash = oBreadCrumbsModel.getProperty("/CurrentHash");
				oBreadCrumbsModel.setProperty("/CurrentHash", sCurrentHash);
				var aHashList = oHistoryModel.getProperty("/HashList");
				var oLastHash = oHistoryModel.getProperty("/CurrentHash");
				var oCurrentHash = {
					title: sCurrentTitle,
					hash: sCurrentHash
				};
				if (oLastHash && oLastHash.title === oCurrentHash.title && (oCurrentHash.hash.indexOf("?section") > 0 || oLastHash.hash.indexOf(
					"?section") > 0)) {
					//idle for idea detail section navigation
					return;
				} else if ((sCurrentDirection === "NewEntry" || sCurrentDirection === "Unknown" || sCurrentDirection === "Forwards") && oLastHash !==
					null && oLastHash.hash !== oCurrentHash.hash && oLastHash.title !== oCurrentHash.title /*new hash*/ && aHistory.indexOf(oLastHash.hash) >=
					0 /*in case history has no record*/ ) {
					//add the last visited hash as the latest navigation item
					aHashList.unshift(oLastHash);
				} else if (sCurrentDirection === "Backwards" && oLastHash.hash !== oCurrentHash.hash &&
					oLastHash.title !== oCurrentHash.title) { //remove navigation item when clicking shell backbutton or browser button
					aHashList.shift();
				}
				oHistoryModel.setProperty("/CurrentHash", oCurrentHash);
				oHistoryModel.setProperty("/HashList", aHashList);
				oHistoryModel.setProperty("/Count", aHashList.length);

				//For company centric view
				var bCommunityGroupView = that.getCurrentView().getController().getViewProperty("/List/IS_IDEA_FILTER_COMMUNITY_GROUP_VIEW");
				if (bCommunityGroupView) {
					if (sCurrentTitle === "ideas_commented" || sCurrentTitle === "ideas_voted") {
						sCurrentTitle = sCurrentTitle === "ideas_commented" ? "ideas_my_commented" : "ideas_my_voted";
					}
				}
				var oResbundle = that._i18n.getResourceBundle();
				var sPageTitPrefix = oResbundle.getText("PAGE_TIT_" + (!sCurrentTitle ? "HOME" : sCurrentTitle.toUpperCase()));
				if (sCurrentTitle === "ideas_mygroup" || sCurrentTitle === "ideas_mygroupcommented" || sCurrentTitle === "ideas_mygroupvoted") {
					var sDisplayLabel = Configuration.getGroupConfiguration().DISPLAY_LABEL;
					sPageTitPrefix = oResbundle.getText("PAGE_TIT_" + sCurrentTitle.toUpperCase(), [sDisplayLabel]);
				}
				if (sCurrentTitle === "reports_customReports") {
					sPageTitPrefix = Configuration.getCustomReportsTile();
				}

				document.title = sPageTitPrefix + " - " + that._i18n.getResourceBundle().getText("PAGE_TIT_SUFFIX");

				//add inm bread crumbs
				var bOpenBreadCrumbs = Configuration.getSystemSetting("sap.ino.config.OPEN_FOR_INM_BREADCRUMBS") === "0" ? false : true;
				var oBreadCrumbs = that.getRootView().byId("inmBreadCrumbs");
				oBreadCrumbs.setVisible(bOpenBreadCrumbs);

				if (bOpenBreadCrumbs && (oCurrentHash.hash !== sLastHash)) {
					var sCurrentRoute = that.getCurrentRoute();
					if (sCurrentHash === 'my-setting') {
						sCurrentRoute = "mySetting";
					}

					var oCurrentRouteObject = that.getBreadObjectByName(sCurrentRoute);
					var innerShell = that.getRootView().byId("innerShell");
					innerShell.addStyleClass("sapInoInnoMgmtMShellBreadCrumbs");
					var sBreadCrumbsLength = oBreadCrumbs.getLinks().length;
					//var oLastBreadObject = that.getBreadObject(oLastHash?oLastHash.title:"");
					oBreadCrumbs.addStyleClass("inmBreadCrumbs");
					if (sCurrentRoute === oBreadCrumbsModel.getProperty("/CurrentRoute")) {
						oBreadCrumbs.removeLink(sBreadCrumbsLength - 1);
						that.maintainBreadCrumbs(oBreadCrumbs, oCurrentRouteObject, oBreadCrumbsModel, sCurrentHash, sCurrentTitle);

					} else if (sCurrentDirection !== "Backwards") {
						that.maintainBreadCrumbs(oBreadCrumbs, oCurrentRouteObject, oBreadCrumbsModel, sCurrentHash, sCurrentTitle);
					} else if (sBreadCrumbsLength === 1) {
						that.maintainBreadCrumbs(oBreadCrumbs, oCurrentRouteObject, oBreadCrumbsModel, sCurrentHash, sCurrentTitle);
					} else {
						oBreadCrumbs.removeLink(sBreadCrumbsLength - 1);
						//	var sNumber = oBreadCrumbs.getLinks().length > 1 ? oBreadCrumbs.getLinks().length - 2 : oBreadCrumbs.getLinks().length - 1;
						var oCurentLink = oBreadCrumbs.getLinks()[oBreadCrumbs.getLinks().length - 1];
						oCurentLink.setEnabled(false);
						if (oBreadCrumbsModel.getProperty("/CurrentRoute") !== sCurrentRoute) {
							that.maintainBreadCrumbs(oBreadCrumbs, oCurrentRouteObject, oBreadCrumbsModel, sCurrentHash, sCurrentTitle);
						}
					}
				}

			};

			var _routeMatchedHandle = function(e) {
				that.getRootView().fireEvent('routeMatchedEvent', e.getParameters());
			};

			oRouter.setRoutingCallback(fnRoutingCallback);
			oRouter.setCloseCallback(fnCloseCallback);
			// 			oRouter.setTitleChangeCallback(fnTitleChangeCallback);
			oRouter.attachRoutePatternMatched(null, fnTitleChangeCallback);
			oRouter.attachBypassed(null, fnRoutingCallback);
			oRouter.attachRouteMatched(null, _routeMatchedHandle);
		},

		initURLWhitelist: function() {
			var aWhitelist = Configuration.getURLWhitelist();
			if (aWhitelist && aWhitelist.length > 0) {
				// Add own host to whitelist so that attachments on the same host can be used and linked in rich
				// text editor. window.location.protocol contains protocol with colon, but is expected without
				jQuery.sap.addUrlWhitelist(window.location.protocol.split(':')[0], window.location.hostname, window.location.port, null);
				jQuery.each(aWhitelist, function(iIndex, oWhitelistEntry) {
					jQuery.sap.addUrlWhitelist(oWhitelistEntry.PROTOCOL, oWhitelistEntry.HOST, oWhitelistEntry.PORT, oWhitelistEntry.PATH);
				});
			} else {
				// Add own host to whitelist so that attachments on the same host can be used and linked in rich
				jQuery.sap.addUrlWhitelist(window.location.protocol.split(':')[0], window.location.hostname, window.location.port, null);
			}
		},

		initSessionTimeoutHandler: function() {
			var COMPLETED_READY_STATE = 4;
			var originalXHROpen = XMLHttpRequest.prototype.open;

			var fnTimeoutHandler = function(oEvent) {
				if (oEvent.type === "error") {
					jQuery.ajax({
						url: Configuration.getBackendRootURL() + "/sap/hana/xs/formLogin/checkSession.xsjs",
						success: function(res, status, xhr) {
							if (res.login === false) {
								window.location.reload(false);
							}
						}
					});
				}
				var oRegex = new RegExp(Configuration.getBackendRootURL(), "igm");
				//Handel SAPUI5 CDN
				if (this.readyState === COMPLETED_READY_STATE && (!this.responseURL || (this.responseURL && Configuration.isAbsoluteURL(this.responseURL) &&
					oRegex.test(this.responseURL)))) {
					var originLocation = this.getResponseHeader("x-sap-origin-location");
					var loginHeader = this.getResponseHeader('x-sap-login-page');
					if (loginHeader && originLocation) {
						window.location.reload(false);
					}
				}
			};

			XMLHttpRequest.prototype.open = function() {
				this.addEventListener('readystatechange', fnTimeoutHandler, false);
				this.addEventListener('error', fnTimeoutHandler, false);
				originalXHROpen.apply(this, arguments);
			};
		},

		/*Dealing with the accessibility issue: When foucs on the first element of the whole dom tree and press TAB+SHIFT,
    preventing navigate to the address bar and navigating to the first element in the List instead.*/
		initTabHandler: function() {
			$(document).ready(
				function() {
					document.onkeydown = function() {
						var oEvent = window.event;
						if (document.activeElement.id === "sap-ino-main--openMenu") {
							if (oEvent.which === jQuery.sap.KeyCodes.TAB && oEvent.shiftKey) {
								$("div[id$='list-after']").focus();
							}
						}
					};
				}
			);
		},

		start: function() {
			WebAnalytics.start(Configuration);
			this.getRouter().initialize();
		},

		getVersionTimestamp: function() {
			/* make sure @UI_VERSION_TIME... is not replaced by UI build */
			return jQuery.sap.startsWith(sVersionTimestamp, "@UI_VERSION_TIME") ? "development" : sVersionTimestamp;
		},

		getVersion: function() {
			var oMeatadata = this.getMetadata();
			//avoiding to get verserion from cust component
			while (oMeatadata && oMeatadata.getName() !== "sap.ino.apps.ino.Component") {
				oMeatadata = oMeatadata.getParent();
			}
			return !oMeatadata ? undefined : oMeatadata.getVersion();
		},

		getCurrentUserId: function() {
			return this._getCurrentUser().USER_ID;
		},

		getCurrentUserImageId: function() {
			return this._getCurrentUser().IDENTITY_IMAGE_ID;
		},

		getCurrentUserName: function() {
			return this._getCurrentUser().NAME;
		},

		getCurrentTechnicalUserName: function() {
			return this._getCurrentUser().USER_NAME;
		},

		getCurrentView: function() {
			return this.getRootController().getCurrentPage();
		},

		setCurrentRoute: function(sName) {
			this.getModel("navigation").setProperty("/Route", sName);
		},

		getCurrentRoute: function() {
			return this.getModel("navigation").getProperty("/Route");
		},

		navigateTo: function(sTarget, oData, bNoHistory, bNoBusy) {
			this.getRouter().navTo(sTarget, oData, bNoHistory, bNoBusy);
		},

		navigateToExternal: function(sTarget, oData) {
			var that = this;
			var navigate = function() {
				var sURL = that.getRouter().getURL(sTarget, oData);
				var windower = window.open(sURL, "InnovationManagement");
				windower.opener = null;
			};
			this._navigateIfAllowed(navigate);
		},

		navigateToByURL: function(sURL) {
			var navigate = function() {
				window.location.href = sURL;
			};
			this._navigateIfAllowed(navigate);
		},

		navigateToInNewWindow: function(sTarget, oData) {
			var sURL = this.getRouter().getURL(sTarget, oData);
			var windower = window.open(sURL, "_blank");
			windower.opener = null;
		},

		navigateToByURLInNewWindow: function(sURL) {
			var windower = window.open(sURL, "_blank");
			windower.opener = null;
		},

		getNavigationLink: function(sRouteName, oParameters) {
			return "#/" + this.getRouter().getURL(sRouteName, oParameters);
		},

		getRootView: function() {
			return this.getAggregation("rootControl");
		},

		getRootController: function() {
			return this.getRootView().getController();
		},

		getShell: function() {
			// return this.getRootView() ? this.getRootView().getContent()[0] : undefined;
			return this.getRootView() ? this.getRootView().byId("innerShell") : undefined;
		},

		logout: function() {
			var that = this;
			jQuery.ajax({
				url: Configuration.getBackendRootURL() + "/sap/hana/xs/formLogin/token.xsjs",
				headers: {
					"X-CSRF-Token": "Fetch"
				},
				success: function(res, status, xhr) {
					var sToken = xhr.getResponseHeader("X-CSRF-Token");
					jQuery.ajax({
						url: Configuration.getBackendRootURL() + "/sap/hana/xs/formLogin/logout.xscfunc",
						headers: {
							"X-CSRF-Token": sToken
						},
						type: "post",
						contentType: "application/xml",
						success: function(res, status, xhr) {
							window.location = Configuration.getBackendRootURL() + "/sap/hana/xs/formLogin/login.html?x-sap-origin-location=" +
								encodeURIComponent(window.location.pathname) + encodeURIComponent(window.location.hash);
						},
						error: function(oResponse) {
							that.showMessage(MessageType.Error, that._i18n.getResourceBundle().getText("LOGOUT_ERROR_MSG"));
						}
					});
				}
			});
		},

		setHelpContent: function(sHTML) {
			var oHelpModel = this.getModel("help");
			oHelpModel.setProperty("/CONTENT", sHTML);
		},

		_getCurrentUser: function() {
			if (!this._oCurrentUser) {
				this._oCurrentUser = Configuration.getCurrentUser();
			}
			return this._oCurrentUser;
		},

		_navigateIfAllowed: function(fnNavigate) {

			var that = this;

			var fnNavigateIfAllowed = function() {

				var bAllowed = that.getRootController().isNavigationAllowed();
				//reset TermAcceptCallback
				Configuration.getUserModel().setProperty("/data/TERMACCEPTCALLBACK", null);
				if (!bAllowed) {
					var oRootController = that.getRootController();
					oRootController.showDataLossPopup(fnNavigate);
				} else {
					fnNavigate();
				}
			};

			var iTermAcceptStatus = Configuration.getUserModel().getProperty("/data/TERM_ACCEPTED");
			var sTermCode = Configuration.getSystemSetting("sap.ino.config.TERMS_AND_CONDITIONS_TEXT");

			//"1" Active Term & Condtion,  "0" , Deactive Term & Conditioan
			var sTermConditionActive = Configuration.getSystemSetting("sap.ino.config.TERMS_AND_CONDITIONS_ACTIVE");

			var oTermDialog = this.getRootController().getTermsDialog(this.getRootController());

			//reset TermAcceptCallback
			Configuration.getUserModel().setProperty("/data/TERMACCEPTCALLBACK", null);

			if (iTermAcceptStatus === 0 && sTermCode && sTermConditionActive === "1" && !oTermDialog.isOpen()) {

				Configuration.getUserModel().setProperty("/data/USER_ACCEPTED", 0);
				Configuration.getUserModel().setProperty("/data/TERMACCEPTCALLBACK", fnNavigateIfAllowed);
				Configuration.getUserModel().setProperty("/data/TERMACTION", true);

				oTermDialog.setStretch(true);
				oTermDialog.open();
			} else {
				if (!oTermDialog.isOpen()) {
					fnNavigateIfAllowed();
				}
			}

		},

		attachNavigate: function(fnCallback, oHandler) {
			if (this.getRootView()) {
				this.getRootController().byId("app").attachNavigate(fnCallback, oHandler);
				return true;
			}
			return false;
		},

		detachNavigate: function(fnCallback, oHandler) {
			if (this.getRootView()) {
				this.getRootController().byId("app").detachNavigate(fnCallback, oHandler);
				return true;
			}
			return false;
		},

		attachAfterNavigate: function(fnCallback, oHandler) {
			if (this.getRootView()) {
				this.getRootController().byId("app").attachAfterNavigate(fnCallback, oHandler);
				return true;
			}
			return false;
		},

		detachAfterNavigate: function(fnCallback, oHandler) {
			if (this.getRootView()) {
				this.getRootController().byId("app").detachAfterNavigate(fnCallback, oHandler);
				return true;
			}
			return false;
		},
		//        inm Bread Crumbs function
		maintainBreadCrumbs: function(oBreadCrumbs, oCurrentRouteObject, oBreadModel, sCurrentHash, sCurrentTitle) {
			var bGoonBread;
			var bLastBread;
			var oParameter;
			var aPath = sCurrentHash.split("/").length > 1 ? sCurrentHash.split("/")[1] : "";
			var sVariant = oCurrentRouteObject.variant ? sCurrentTitle.split("_").pop() : "";
			if (oBreadModel.getProperty("/CurrentAvailable") === "all") {
				bGoonBread = false;

			} else if (oBreadModel.getProperty("/CurrentAvailable") !== "none") {
				var aAvailablePath = oBreadModel.getProperty("/CurrentAvailable").split("/");
				aAvailablePath.forEach(function(sName, iPathIndex) {
					if (!bGoonBread) {
						bGoonBread = sName === oCurrentRouteObject.name ? true : false;
						return;
					}
				});
			} else {
				bGoonBread = false;
			}
			if (bGoonBread) {

				bLastBread = true;
				oParameter = null;
				this.addBreadCrumbs(oBreadCrumbs, oCurrentRouteObject, aPath, oBreadModel, bLastBread, oParameter, sVariant, oCurrentRouteObject);
			} else {
				// Determine trail parts
				oBreadCrumbs.destroyLinks();

				var aParts = oCurrentRouteObject.path.split("/");
				var slength = aParts.length;

				aParts.forEach(jQuery.proxy(function(sName, iPathIndex) {
					var oCrumbs = this.getBreadObjectByName(sName);
					if (oCrumbs.pattern) {
						oParameter = {};
						oParameter[oCrumbs.pattern] = aPath;
					}
					bLastBread = slength === iPathIndex + 1;
					this.addBreadCrumbs(oBreadCrumbs, oCrumbs, aPath, oBreadModel, bLastBread, oParameter, sVariant, oCurrentRouteObject);

				}, this));
			}
		},

		addBreadCrumbs: function(oBreadCrumbs, oCrumbs, aPath, oBreadModel, bLastBread, oParameter, sVariant, oCurrentRouteObject) {
			var sPrefix = Configuration.getBackendRootURL() + "/sap/ino/" + window.location.search;
			var sOdataPath = Configuration.getFullApplicationPath("sap.ino.config.URL_PATH_OD_APPLICATION");
			if (Configuration.hasCurrentUserPrivilege("sap.ino.ui::backoffice.access")) {
				sOdataPath = Configuration.getFullApplicationPath("sap.ino.config.URL_PATH_OD_BACKOFFICE");
			}
			sOdataPath += "/";

			if ((oCrumbs.name === "campaign" || oCrumbs.name === "campaign-idealist") && oCurrentRouteObject.name === "idea-display") {
				var oCampaignData = jQuery.ajax({
					url: sOdataPath + "IdeaSmall(" + aPath + ")",
					type: "GET",
					dataType: "json",
					async: false

				});
				oCampaignData.done(function(oResponse) {
					aPath = oResponse.d.CAMPAIGN_ID;
					oParameter.id = aPath;
				});
			}

			var sName, sTitle, sVariantText, sDefault, sTempCampaignId;
			var sObjectTitle = "";
			var oDataPath;
			//for custom reports odata
			if (oCrumbs.name === 'report') {
				var bMyReport = aPath.indexOf("MyReports") >= 0 ? true : false;
				if (bMyReport) {
					oDataPath = aPath;
				} else {
					var sReportPath = aPath.split("'")[1];
					oDataPath = oCrumbs.oData + "(CODE='" + sReportPath + "')";
				}

			} else {
				oDataPath = oCrumbs.oData + "(" + aPath + ")";
			}
			var that = this;
			if (oCrumbs.pattern) {
				var oObjectData = jQuery.ajax({
					url: sOdataPath + oDataPath,
					type: "GET",
					dataType: "json",
					async: false

				});
				oObjectData.done(function(oResponse) {
					sName = oResponse.d.SHORT_NAME ? oResponse.d.SHORT_NAME : oResponse.d.NAME;
					sTitle = oResponse.d.TITLE ? oResponse.d.TITLE : sName;
					sDefault = oResponse.d.DEFAULT_TEXT ? oResponse.d.DEFAULT_TEXT : sTitle;
					// custom report odata
					if (oCrumbs.name === 'report' && !bMyReport) {
						sDefault = that.getModel("code").getText("sap.ino.xs.object.analytics.ReportTemplate.Root", oResponse.d.CODE);
					}
					if (bMyReport) {
						var oConfigJson = JSON.parse(oResponse.d.CONFIG);
						sDefault = oConfigJson.Title;
						bMyReport = false;
					}
					if (oCrumbs.name === 'idea-display' && oCurrentRouteObject.name === "idea-display" && oCurrentRouteObject.path.indexOf('campaign-idealist/idea-display') > -1) {
						sTempCampaignId = oResponse.d.CAMPAIGN_ID;
					}

				});
				if (oCrumbs.title) {
					sObjectTitle = this._i18n.getResourceBundle().getText(oCrumbs.title) + " ";
				}
			}

			if (oCrumbs.variant && this.getCurrentRoute() === oCrumbs.name) {
				var sListVariant = this.getCurrentView().getController().getViewProperty(
					"/List/VARIANT");
				var currentSelectLink = this.getCurrentView().getController().list ? this.getCurrentView().getController().list.CURRENTSELECTLINK :
					"";
				this.getCurrentView().getController().getModel("list").setProperty("/CURRENTSELECTLINK", undefined);
				var aArray = this.getCurrentView().getController().list ? this.getCurrentView().getController().list.Variants : "";
				if (aArray !== "" && currentSelectLink && currentSelectLink.TYPE_CODE === "QUICK_LINK_CUSTOM_IDEA") {
					sVariantText = currentSelectLink.LINK_TEXT;
				} else if (aArray !== "" && this.getObjectListVariantText(aArray, sListVariant)) {
					sVariantText = this.getObjectListVariantText(aArray, sListVariant);
				}
			} else if (oCrumbs.TEXT) {
				sVariantText = this._i18n.getResourceBundle().getText(oCrumbs.TEXT);
			} else {
				sVariantText = "";
			}
			//Fix campaign list->idea display click leadinng idea(different campaign: merge idea function)
			if (oCrumbs.name === 'idea-display' && oCurrentRouteObject.name === "idea-display" && oCurrentRouteObject.path.indexOf('campaign-idealist/idea-display') > -1) {
				var aLinks = oBreadCrumbs.getLinks();
				var oLastLink = aLinks[aLinks.length - 1];
				var sNewCampaignName;
				//this._i18n.getResourceBundle().getText("BREAD_CAMPAIGN_TITLE_TEXT")
				if (sTempCampaignId && oLastLink && oLastLink.getProperty("href").indexOf('campaign/') > -1 && oLastLink.getProperty("href").indexOf('campaign/' + sTempCampaignId) === -1) {
					var oCampaignDataOnceAgain = jQuery.ajax({
						url: sOdataPath + 'CampaignSmall(' + sTempCampaignId + ')',
						type: "GET",
						dataType: "json",
						async: false
					});
					oCampaignDataOnceAgain.done(function(oResponse) {
						sNewCampaignName = oResponse.d.SHORT_NAME ? oResponse.d.SHORT_NAME : oResponse.d.NAME;
					});

					oLastLink.setProperty("href", sPrefix + this.getNavigationLink('campaign', {
						id: sTempCampaignId
					}));
					oLastLink.setProperty("text", this._i18n.getResourceBundle().getText("BREAD_CAMPAIGN_TITLE_TEXT") + sNewCampaignName);
				}
			}

			oBreadCrumbs.addLink(new sap.m.Link({
				text: oCrumbs.pattern ? sObjectTitle + sDefault : sVariantText,
				target: "_top",
				enabled: bLastBread ? false : true,
				href: bLastBread ? window.location.href + window.location.search : sPrefix + this.getNavigationLink(oCrumbs.name, oParameter)
			}));
			if (bLastBread && oBreadCrumbs.getLinks().length > 1) {
				var sNumber = oBreadCrumbs.getLinks().length > 1 ? oBreadCrumbs.getLinks().length - 2 : oBreadCrumbs.getLinks().length - 1;
				oBreadCrumbs.getLinks()[sNumber].setEnabled(true);
				this.setHistoricalTitle(oCrumbs.pattern ? sObjectTitle + sDefault : sVariantText);
			}
			oBreadModel.setProperty("/CurrentAvailable", oCrumbs.available ? oCrumbs.available : "none");
			oBreadModel.setProperty("/CurrentRoute", oCrumbs.name);
		},
		setBreadCrumbsText: function(oBreadCrumbs, sText) {

			oBreadCrumbs.setCurrentLocationText(sText);

		},

		getBreadObjectByName: function(sText) {
			var breadCrumbsObject;
			jQuery.each(breadCrumbsTexts, function(i, val) {
				if (val.name === sText) {
					breadCrumbsObject = val;
				}

			});
			return breadCrumbsObject;
		},

		getObjectListVariantText: function(aArray, sText) {
			var aValues = aArray.Values;
			var sCode;
			jQuery.each(aValues, function(i, val) {
				if (val.ACTION === sText && val.TEXT) {
					sCode = val.TEXT;
				}
			});
			//For company centric view
			if (sText && sText.indexOf('mygroup') > -1 && sCode) {
				return this._i18n.getResourceBundle().getText(sCode, [Configuration.getGroupConfiguration().DISPLAY_LABEL]);
			}
			if (sCode) {
				return this._i18n.getResourceBundle().getText(sCode);
			}
			return "";
		},
		setHistoricalTitle: function(sVariantText) {
			var sCurrentHash = this.getModel("history").getProperty("/CurrentHash") ? this.getModel("history").getProperty("/CurrentHash").hash :
				'';
			var oHashObject = {
				detailTitle: sVariantText,
				hash: sCurrentHash
			};
			var aHashList = this.getModel("historyDetail").getProperty("/HashList");
			aHashList.unshift(oHashObject);
			this.getModel("historyDetail").setProperty("/HashList", aHashList);

		}
	});
});
}; // end of sap/ino/commons/application/BaseComponent.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.formatters.ObjectFormatter') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.formatters.ObjectFormatter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.Date'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.NumberFormat'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/formatters/ObjectFormatter",[
    "sap/ino/commons/formatters/BaseFormatter",
    "sap/ino/commons/models/core/CodeModel",
    "sap/ino/commons/application/Configuration",
    "sap/ino/controls/IdeaStatusType",
    "sap/ino/controls/VoteType",
    "sap/ui/base/Object",
    "sap/ui/model/type/Date",
    "sap/ui/core/IconPool",
    "sap/ui/core/format/NumberFormat",
    "sap/ui/core/format/DateFormat"
], function(BaseFormatter,
	CodeModel,
	Configuration,
	IdeaStatusType,
	VoteType,
	Object,
	DateType,
	IconPool,
	NumberFormat,
	DateFormat) {
	"use strict";

	var oFloatNumberFormat = NumberFormat.getFloatInstance({
		maxFractionDigits: 1

	});
	/*
	 * Attachment object
	 */
	var oObjectFormatter = Object.extend("sap.ino.commons.formatters.ObjectFormatter", {});

	jQuery.extend(oObjectFormatter, BaseFormatter);

	oObjectFormatter.alternativeBy = function(vBy, vIdentity, vAlternativeIdentity, vDate, vAlternativeDate) {
		if (vIdentity) {
			vDate = BaseFormatter.toRelativeDate(vDate);
			if (!vDate && vAlternativeDate) {
				vDate = BaseFormatter.toRelativeDate(vAlternativeDate);
			}
			return BaseFormatter.parameterizedText(vBy, vIdentity, vDate);
		} else if (vAlternativeIdentity) {
			vAlternativeDate = BaseFormatter.toRelativeDate(vAlternativeDate);
			return BaseFormatter.parameterizedText(vBy, vAlternativeIdentity, vAlternativeDate);
		} else return "";
	};

	oObjectFormatter.ideaDisplaySubtitle = function(sIdeaNumberTit, sIdeaNumber, sRespNameTit, sRespName, vBy, vIdentity,
		vAlternativeIdentity, vDate, vAlternativeDate, bWithoutImg) {
		if (bWithoutImg) {
			if (sRespName) {
				return sIdeaNumberTit + ": " + sIdeaNumber　 + ", " + sRespNameTit + ": " + sRespName;
			}
			return sIdeaNumberTit + ": " + sIdeaNumber;
		}
		return oObjectFormatter.alternativeBy(vBy, vIdentity, vAlternativeIdentity, vDate, vAlternativeDate);
	};

	oObjectFormatter.aContributorsTostring = function(aContributors) {
		if (!aContributors || aContributors.length <= 0) {
			return "";
		}
		var result = aContributors[0].NAME;
		for (var index = 1; index <= aContributors.length - 1; index++) {
			result += ", " + aContributors[index].NAME;
		}
		return result;
	};

	oObjectFormatter.alternativeDate = function(vDate, vAlternativeDate) {
		vDate = BaseFormatter.toRelativeDate(vDate);
		if (!vDate && vAlternativeDate) {
			vDate = BaseFormatter.toRelativeDate(vAlternativeDate);
		}
		return vDate || "";
	};

	oObjectFormatter.daysLeft = function(sDate) {
		if (sDate) {
			var oDate = new Date(sDate);
			var oNowDate = new Date();
			var oDateInfinite = new Date("9999-12-30T00:00:00.000Z");
			var iDaysDiff = oNowDate.getTime() - oDate.getTime();
			var sLabel;
			if (iDaysDiff <= 0) {
				if (sDate >= oDateInfinite) {
					sLabel = this.getText("CAMPAIGN_LIST_FLD_DEADLINE_NO_END_DATE");
				} else {
					sLabel = this.getText("CAMPAIGN_FLD_DATE_DEADLINE", [BaseFormatter.toDateTime(oDate)]);
				}
			} else {
				sLabel = this.getText("CAMPAIGN_FLD_DATE_DEADLINE_PASSED", [BaseFormatter.toDateTime(oDate)]);
			}
			return sLabel;
		}

		return undefined;
	};

	oObjectFormatter.campaignStartsInDays = function(sDate) {
		if (sDate) {
			var oDate = new Date(sDate);
			var oNowDate = new Date();
			var iDaysDiff = oDate.getTime() - oNowDate.getTime();
			var sLabel;
			if (iDaysDiff < 0) {
				sLabel = this.getText("CAMPAIGN_FLD_DATE_STARTED", [BaseFormatter.toDate(oDate)]);
			} else {
				sLabel = this.getText("CAMPAIGN_FLD_DATE_WILL_START", [BaseFormatter.toDate(oDate)]);
			}
			return sLabel;
		}

		return undefined;
	};

	oObjectFormatter.submissionDaysLeft = function(sDate) {
		if (sDate) {
			var oDate = new Date(sDate);
			var oNowDate = new Date();
			var oDateInfinite = new Date("9999-12-30T00:00:00.000Z");
			var iDaysDiff = oNowDate.getTime() - oDate.getTime();
			var sLabel;
			if (iDaysDiff <= 0) {
				if (oDate >= oDateInfinite) {
					sLabel = this.getText("CAMPAIGN_LIST_FLD_SUBMISSION_DEADLINE_NO_END_DATE");
				} else {
					sLabel = this.getText("CAMPAIGN_FLD_SUBMISSION_DEADLINE", [BaseFormatter.toDateTime(oDate)]);
				}
			} else {
				sLabel = this.getText("CAMPAIGN_FLD_SUBMISSION_DEADLINE_PASSED", [BaseFormatter.toDateTime(oDate)]);
			}
			return sLabel;
		}

		return undefined;
	};

	oObjectFormatter.submissionStartsInDays = function(sDate) {
		if (sDate) {
			var oDate = new Date(sDate);
			var oNowDate = new Date();
			var iDaysDiff = oDate.getTime() - oNowDate.getTime();
			var sLabel;
			if (iDaysDiff < 0) {
				sLabel = this.getText("CAMPAIGN_FLD_SUBMISSION_STARTED", [BaseFormatter.toDate(oDate)]);
			} else {
				sLabel = this.getText("CAMPAIGN_FLD_SUBMISSION_WILL_START", [BaseFormatter.toDate(oDate)]);
			}
			return sLabel;
		}

		return undefined;
	};

	oObjectFormatter.registrationDaysLeft = function(sDate) {
		if (sDate) {
			var oDate = new Date(sDate);
			var oNowDate = new Date();
			var oDateInfinite = new Date("9999-12-30T00:00:00.000Z");
			var iDaysDiff = oNowDate.getTime() - oDate.getTime();
			var sLabel;
			if (iDaysDiff < 0) {
				if (oDate >= oDateInfinite) {
					sLabel = this.getText("CAMPAIGN_LIST_FLD_REGISTRATION_DEADLINE_NO_END_DATE");
				} else {
					sLabel = this.getText("CAMPAIGN_FLD_REGISTRATION_DEADLINE", [BaseFormatter.toDateTime(oDate)]);
				}
			} else {
				sLabel = this.getText("CAMPAIGN_FLD_REGISTRATION_DEADLINE_PASSED", [BaseFormatter.toDateTime(oDate)]);
			}
			return sLabel;
		}

		return undefined;
	};

	oObjectFormatter.registrationStartsInDays = function(sDate) {
		if (sDate) {
			var oDate = new Date(sDate);
			var oNowDate = new Date();
			var iDaysDiff = oDate.getTime() - oNowDate.getTime();
			var sLabel;
			if (iDaysDiff < 0) {
				sLabel = this.getText("CAMPAIGN_FLD_REGISTRATION_STARTED", [BaseFormatter.toDate(oDate)]);
			} else {
				sLabel = this.getText("CAMPAIGN_FLD_REGISTRATION_WILL_START", [BaseFormatter.toDate(oDate)]);
			}
			return sLabel;
		}

		return undefined;
	};

	oObjectFormatter.formatInfinityWithTimeFormat = function(dDate) {
		if (!dDate) {
			return "";
		} else if (typeof(dDate) === "number" || typeof(dDate) === "string") {
			dDate = new Date(dDate);
		}
		dDate = new Date(dDate.getTime() + dDate.getTimezoneOffset() * 60 * 1000);
		return sap.ui.core.format.DateFormat.getDateTimeInstance({
			"pattern": "yyyy-MM-dd HH:mm:ss UTC"
		}).format(dDate, false);
	};

	/*
	 * Idea object
	 */
	oObjectFormatter.ideaImageUrl = function(iTitleImageId, sMediaType) {
		if (sMediaType && sMediaType.indexOf("image/") === 0) {
			return Configuration.getAttachmentTitleImageDownloadURL(iTitleImageId);
		}
		return null;
	};

	oObjectFormatter.ideaTitleImageUrl = function(iTitleImageId, sUrl, oChangedAt) {
		if (iTitleImageId && sUrl) {
			if (oChangedAt instanceof Date) {
				return '/' + sUrl + '/' + iTitleImageId + '?type=large&t=' + oChangedAt.getTime();
			} else {
				return '/' + sUrl + '/' + iTitleImageId + '?type=large';
			}
		}
		return null;
	};

	oObjectFormatter.ideaProcessStopped = function(sStatus) {
		if (sStatus) {
			return sStatus === IdeaStatusType.Discontinued || sStatus === IdeaStatusType.Merged;
		}
		return false;
	};

	oObjectFormatter.isIdeaProcessStoped = function(sStatus, sType) {
		if (sType) {
			return sType === "DISCONTINUED";
		} else if (sStatus) {
			return sStatus === IdeaStatusType.Discontinued || sStatus === IdeaStatusType.Merged;
		}
		return false;
	};

	oObjectFormatter.baseCampaignHomePageButtons = function(oPrivilege, oCampaignPrivilege) {
		return oPrivilege && oCampaignPrivilege;

	};

	oObjectFormatter.ideaStatus = CodeModel.getFormatter("sap.ino.xs.object.status.Status.Root");

	oObjectFormatter.ideaStatusAction = CodeModel.getFormatter("sap.ino.xs.object.status.Action.Root");

	oObjectFormatter.ideaPhase = CodeModel.getFormatter("sap.ino.xs.object.campaign.Phase.Root");

	/**
	 * Evaluation object
	 */
	oObjectFormatter.criterionCode = CodeModel.getFormatter("sap.ino.xs.object.evaluation.Model.Criterion");

	oObjectFormatter.changeStatusActionCode = CodeModel.getFormatter("sap.ino.xs.object.status.Action.Root");

	oObjectFormatter.criterionCodeLongText = CodeModel.getLongTextFormatter("sap.ino.xs.object.evaluation.Model.Criterion");
	
	oObjectFormatter.criterionCodeLongTextVisible = function(sText){
	    return !!sText && sText.length > 0;
	};

	oObjectFormatter.modelCode = CodeModel.getFormatter("sap.ino.xs.object.evaluation.Model.Root");

	oObjectFormatter.modelCodeLongText = CodeModel.getLongTextFormatter("sap.ino.xs.object.evaluation.Model.Root");

	oObjectFormatter.valueOption = CodeModel.getFormatter("sap.ino.xs.object.basis.ValueOptionList.ValueOptions");

	oObjectFormatter.uomCode = CodeModel.getFormatter("sap.ino.xs.object.basis.Unit.Root");

	oObjectFormatter.ideaNavigationLink = function(iId, sSection) {
		if (!isNaN(parseInt(iId, 10))) {
			var oParams = {
				id: iId
			};
			if (sSection) {
				oParams.query = {
					section: sSection
				};
			}
			return BaseFormatter.navigationLink.apply(this, ["idea-display", oParams]);
		}
		return undefined;
	};

	oObjectFormatter.campaignNavigationLink = function(iId) {
		if (!isNaN(parseInt(iId, 10))) {
			return BaseFormatter.navigationLink.apply(this, ["campaign", {
				id: iId
			}]);
		}
		return undefined;
	};

	oObjectFormatter.rewardEmployeeName = function(employeeName, sId) {
		if (sId > 0) {
			return employeeName;
		} else if (sId === 0) {
			employeeName = this.getText("IDEA_OBJECT_TIT_IDEA_Anonymity");
			return employeeName;
		}
	};

	oObjectFormatter.rewardEmployeeNameLinkEnabled = function(sId) {
		if (sId > 0) {
			return true;
		} else {
			return false;
		}
	};

	oObjectFormatter.wallNavigationLink = function(iId) {
		if (!isNaN(parseInt(iId, 10))) {
			return BaseFormatter.navigationLink.apply(this, ["wall", {
				id: iId
			}]);
		}
		return undefined;
	};

	oObjectFormatter.evaluationNavigationLink = function(iId) {
		if (!isNaN(parseInt(iId, 10))) {
			return BaseFormatter.navigationLink.apply(this, ["evaluation-display", {
				id: iId
			}]);
		}
		return undefined;
	};

	oObjectFormatter.roleCode = CodeModel.getFormatter("sap.ino.xs.object.iam.RoleCode.Root");

	oObjectFormatter.multipleRoleCodes = function(sRoleCodes) {
		var sResult = "";
		if (sRoleCodes) {
			sResult = sRoleCodes.split(",").map(oObjectFormatter.roleCode).join(", ");
		}
		return sResult;
	};

	//TODO: check external calls
	oObjectFormatter.ideaAccessibilityLabel = function(sIdeaName, sPhase, iCurrentStep, iSteps, sStatus, sVotingType, iCommentCount,
		iViewCount, iIdeaScore, iMaxStarNo, iIdeaScoreLike, iIdeaScoreDislike) {
		if (sStatus === IdeaStatusType.Draft) {
			return this.getText("IDEA_LIST_ALT_ACCESSIBILITY_LABEL_DRAFT", [sIdeaName]);
		}

		iViewCount = iViewCount || 0;
		iIdeaScore = iIdeaScore || 0;
		iMaxStarNo = iMaxStarNo || 0;
		iIdeaScoreLike = iIdeaScoreLike || 0;
		iIdeaScoreDislike = iIdeaScoreDislike || 0;
		iCurrentStep = iCurrentStep || 0;
		iSteps = iSteps || 0;

		var sVote = this.getText("IDEA_LIST_ALT_ACCESSIBILITY_LABEL_VOTING_EXT_LIKE_NO");
		if (sVotingType === VoteType.TYPE_STAR) {
			sVote = this.getText("IDEA_LIST_ALT_ACCESSIBILITY_LABEL_VOTING_EXT_STAR", [iIdeaScore, iMaxStarNo]);
		} else if (sVotingType === VoteType.TYPE_LIKE) {
			sVote = this.getText("IDEA_LIST_ALT_ACCESSIBILITY_LABEL_VOTING_EXT_LIKE", [iIdeaScore]);
		} else if (sVotingType === VoteType.TYPE_LIKE_DISLIKE) {
			sVote = this.getText("IDEA_LIST_ALT_ACCESSIBILITY_LABEL_VOTING_EXT_LIKE_DISLIKE", [iIdeaScoreLike, iIdeaScoreDislike]);
		}

		var sViewCount = Configuration.isUsageReportingActive() ? this.getText("IDEA_LIST_ALT_ACCESSIBILITY_LABEL_VIEW_COUNT", [iViewCount]) :
			"";

		return this.getText("IDEA_LIST_ALT_ACCESSIBILITY_LABEL", [sIdeaName, oObjectFormatter.ideaPhase(sPhase), iCurrentStep + 1, iSteps,
			oObjectFormatter.ideaStatus(sStatus), sVote, iCommentCount, sViewCount]);
	};

	oObjectFormatter.ideaAccessibilityLabelBackOfficeHome = function(sIdeaName, sCampaingName, sSumitterName, sCoachName, sPhase,
		iCurrentStep, iSteps, sStatus, sVotingType, iExpScore, iCommentCount, iEvaluationCount, sSummitedAt, sChangedAt, sFollowUpDate,
		iIdeaScore, iMaxStarNo, iIdeaScoreLike, iIdeaScoreDislike) {
		if (sStatus === IdeaStatusType.Draft) {
			return this.getText("IDEA_LIST_ALT_ACCESSIBILITY_LABEL_DRAFT", [sIdeaName]);
		}

		iCurrentStep = iCurrentStep + 1 || 1;
		iSteps = iSteps || 0;
		iExpScore = iExpScore || 0;
		iCommentCount = iCommentCount || 0;
		iEvaluationCount = iEvaluationCount || 0;
		var sVote = this.getText("IDEA_LIST_ALT_ACCESSIBILITY_LABEL_VOTING_EXT_LIKE_NO");
		if (sVotingType === VoteType.TYPE_STAR) {
			sVote = this.getText("IDEA_LIST_ALT_ACCESSIBILITY_LABEL_VOTING_EXT_STAR", [iIdeaScore, iMaxStarNo]);
		} else if (sVotingType === VoteType.TYPE_LIKE) {
			sVote = this.getText("IDEA_LIST_ALT_ACCESSIBILITY_LABEL_VOTING_EXT_LIKE", [iIdeaScore]);
		} else if (sVotingType === VoteType.TYPE_LIKE_DISLIKE) {
			sVote = this.getText("IDEA_LIST_ALT_ACCESSIBILITY_LABEL_VOTING_EXT_LIKE_DISLIKE", [iIdeaScoreLike, iIdeaScoreDislike]);
		}

		sCoachName = sCoachName ? this.getText("IDEA_LIST_ALT_ACCESSIBILITY_LABEL_COACH", [sCoachName]) : "";
		sFollowUpDate = sFollowUpDate ? this.getText("IDEA_LIST_ALT_ACCESSIBILITY_LABEL_DUE_DATE", [BaseFormatter.toDate(sFollowUpDate)]) : "";

		return this.getText("IDEA_LIST_ALT_ACCESSIBILITY_LABEL_BACKOFFICEHOME", [sIdeaName, sCampaingName, sSumitterName, sCoachName,
			oObjectFormatter.ideaPhase(sPhase), iCurrentStep, iSteps, oObjectFormatter.ideaStatus(sStatus), sVote, iExpScore, iCommentCount,
			iEvaluationCount, BaseFormatter.toDate(sSummitedAt), BaseFormatter.toDate(sChangedAt), sFollowUpDate]);
	};

	oObjectFormatter.ideaAccessibilityLabelListItem = function(sIdeaName, sPhase, iCurrentStep, iSteps, sStatus, sVotingType, iCommentCount,
		iViewCount, iIdeaScore, iMaxStarNo, iIdeaScoreLike, iIdeaScoreDislike) {
		if (sStatus === IdeaStatusType.Draft) {
			return this.getText("IDEA_LIST_ITEM_ALT_ACCESSIBILITY_LABEL_DRAFT", [sIdeaName]);
		}

		iViewCount = iViewCount || 0;
		iIdeaScore = iIdeaScore || 0;
		iMaxStarNo = iMaxStarNo || 0;
		iIdeaScoreLike = iIdeaScoreLike || 0;
		iIdeaScoreDislike = iIdeaScoreDislike || 0;
		iCurrentStep = iCurrentStep || 0;
		iSteps = iSteps || 0;

		var sVote = this.getText("IDEA_LIST_ALT_ACCESSIBILITY_LABEL_VOTING_EXT_LIKE_NO");
		if (sVotingType === VoteType.TYPE_STAR) {
			sVote = this.getText("IDEA_LIST_ALT_ACCESSIBILITY_LABEL_VOTING_EXT_STAR", [iIdeaScore, iMaxStarNo]);
		} else if (sVotingType === VoteType.TYPE_LIKE) {
			sVote = this.getText("IDEA_LIST_ALT_ACCESSIBILITY_LABEL_VOTING_EXT_LIKE", [iIdeaScore]);
		} else if (sVotingType === VoteType.TYPE_LIKE_DISLIKE) {
			sVote = this.getText("IDEA_LIST_ALT_ACCESSIBILITY_LABEL_VOTING_EXT_LIKE_DISLIKE", [iIdeaScoreLike, iIdeaScoreDislike]);
		}

		var sViewCount = Configuration.isUsageReportingActive() ? this.getText("IDEA_LIST_ALT_ACCESSIBILITY_LABEL_VIEW_COUNT", [iViewCount]) :
			"";

		return this.getText("IDEA_LIST_ITEM_ALT_ACCESSIBILITY_LABEL", [sIdeaName, oObjectFormatter.ideaPhase(sPhase), iCurrentStep + 1, iSteps,
			oObjectFormatter.ideaStatus(sStatus), sVote, iCommentCount, sViewCount]);
	};

	oObjectFormatter.campaignAccessibilityLabel = function(sName, sValidTo, iTotalIdeas, iTotalParticipants, iViewCount, iOpen, iSubmittable,
		isOpen) {
		var sValidity = oObjectFormatter.daysLeft.apply(this, [sValidTo]);
		var bOpen = (iOpen + iSubmittable === 2);

		iTotalIdeas = iTotalIdeas || 0;
		iTotalParticipants = iTotalParticipants || 0;
		iViewCount = iViewCount || 0;

		var sViewCount = Configuration.isUsageReportingActive() ? this.getText("CAMPAIGN_LIST_ALT_ACCESSIBILITY_LABEL_VIEW_COUNT", [iViewCount]) :
			"";

		if (!isOpen) {
			return this.getText("CAMPAIGN_LIST_ALT_ACCESSIBILITY_LABEL" + (bOpen ? "_NEW_SUBMITTABLE" : ""), [sName, sValidity, iTotalIdeas,
				iTotalParticipants, sViewCount]);
		} else {
			return this.getText("CAMPAIGN_LIST_ITEM_ALT_ACCESSIBILITY_LABEL_REGISTER", [sName]);
		}

	};

	oObjectFormatter.campaignAccessibilityLabelBackOfficeHome = function(sName, sValidTo, iUnassignedIdeas, iTotalIdeas, iTotalParticipants,
		iViewCount, iOpen, iSubmittable, isOpen) {
		var sValidity = oObjectFormatter.daysLeft.apply(this, [sValidTo]);
		var bOpen = (iOpen + iSubmittable === 2);
		iUnassignedIdeas = iUnassignedIdeas || 0;
		iTotalIdeas = iTotalIdeas || 0;
		iTotalParticipants = iTotalParticipants || 0;
		iViewCount = iViewCount || 0;

		var sViewCount = Configuration.isUsageReportingActive() ? this.getText("CAMPAIGN_LIST_ALT_ACCESSIBILITY_LABEL_VIEW_COUNT", [iViewCount]) :
			"";

		if (isOpen) {
			return this.getText("CAMPAIGN_LIST_ITEM_ALT_ACCESSIBILITY_LABEL_REGISTER", [sName]);
		}

		return this.getText("CAMPAIGN_LIST_ALT_ACCESSIBILITY_BACKOFFICEHOME", [sName, sValidity, iUnassignedIdeas, iTotalIdeas,
			iTotalParticipants, sViewCount]);

	};

	oObjectFormatter.campaignAccessibilityLabelListItem = function(sName, sValidTo, iTotalIdeas, iTotalParticipants, iViewCount, iOpen,
		iSubmittable) {
		var sValidity = oObjectFormatter.daysLeft.apply(this, [sValidTo]);
		var bOpen = (iOpen + iSubmittable === 2);

		iTotalIdeas = iTotalIdeas || 0;
		iTotalParticipants = iTotalParticipants || 0;
		iViewCount = iViewCount || 0;

		var sViewCount = Configuration.isUsageReportingActive() ? this.getText("CAMPAIGN_LIST_ALT_ACCESSIBILITY_LABEL_VIEW_COUNT", [iViewCount]) :
			"";

		return this.getText("CAMPAIGN_LIST_ITEM_ALT_ACCESSIBILITY_LABEL", [sName, sValidity, iTotalIdeas, iTotalParticipants, sViewCount]);
	};

	oObjectFormatter.comAccessibilityLabelListItem = function() {
		if (!arguments || !arguments.length) {
			return false;
		}
		return Array.prototype.join.call(arguments, ' ');
	};

	oObjectFormatter.blogAccessibilityLabelListItem = function(sBlogName, sCampaingName, iAttachmentCount, iCommentCount) {
		return this.getText("BLOG_LIST_ITEM_ALT_ACCESSIBILITY_LABEL", [sBlogName, sCampaingName, iAttachmentCount, iCommentCount]);
	};

	oObjectFormatter.registerAccessibilityApprovalListItem = function(sName, sValidTo, sSubmitIdeaTo, sRequester, sOrginazation, sSubmit) {
		var sValidity = oObjectFormatter.daysLeft.apply(this, [sValidTo]);
		var sSubmitIdeaEnd = oObjectFormatter.submissionDaysLeft.apply(this, [sSubmitIdeaTo]);
		// var sSubmitTime = DateFormatter.formatDueDate.apply(this,[ssubmit]);

		return this.getText("REGISTER_APPROVAL_LIST_ITEM_ALT_ACCESSIBILITY_LABEL", [sName, sValidity, sSubmitIdeaEnd, sRequester, sOrginazation,
			sSubmit]);
	};

	oObjectFormatter.blogNavigationLink = function(iId, sSection) {
		if (!isNaN(parseInt(iId, 10))) {
			var oParams = {
				id: iId
			};
			if (sSection) {
				oParams.query = {
					section: sSection
				};
			}
			return BaseFormatter.navigationLink.apply(this, ["blog-display", oParams]);
		}
		return undefined;
	};

	oObjectFormatter.controlTooltip = function(sControlText, sText) {
		var oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ino.controls");
		return !sText ? oRB.getText(sControlText) : oRB.getText(sControlText, sText);
	};
	
	oObjectFormatter.formatMsg = function(sText) {
	    if(arguments){
		    return jQuery.sap.formatMessage(sText, Array.prototype.splice.call(arguments,1));
	    }
	};

	oObjectFormatter.viewCount = function(nCount) {
		if (nCount) {
			var oNumberFormat = NumberFormat.getIntegerInstance({
				style: "short"
			});

			return oNumberFormat.format(nCount);
		}

		return "1";
	};

	oObjectFormatter.toInt = function(sNumber) {
		var iNumber = parseInt(sNumber, 10);
		if (isNaN(iNumber)) {
			iNumber = 0;
		}
		return iNumber;
	};

	oObjectFormatter.toFloat = function(sNumber) {
		var iNumber = parseFloat(sNumber);
		if (isNaN(iNumber)) {
			iNumber = 0;
		}
		return iNumber;
	};

	oObjectFormatter.votingActive = function(sStatus, iVoteActive,iCanVote,iOpenStatusSetting,iVotePrivilege) {

	     var bStatusVote = ( iOpenStatusSetting > 0 && iVotePrivilege > 0 ) || !iOpenStatusSetting;
		return iVoteActive > 0 && IdeaStatusType.Draft !== sStatus && IdeaStatusType.Discontinued !== sStatus && IdeaStatusType.Merged !==
			sStatus && bStatusVote && iCanVote > 0;
	};

	oObjectFormatter.commentTooltip = function(iCommentHasPrivilege,iCanComment,iOpenStatusSetting) {
		var bStatusComment = iOpenStatusSetting > 0 && iCommentHasPrivilege > 0 || !iOpenStatusSetting;
		if (iCanComment > 0 && bStatusComment) {
			return this.getText("CTRL_IDEACARD_BUT_COMMENT_BUTTON");
		}
		
		return this.getText("VOTE_MSG_COMMENT_NO_PRIVILEGE");
	};

	oObjectFormatter.voteTooltip = function(sStatus, iVotePrivilege, iVoteActive, sPhase, sVoteType, iVoteCount, sScore, iUserScore,
		bDisplayOnly,iCanVote,iOpenStatusSetting) {
		var bProcessRunning = sStatus !== IdeaStatusType.Draft && sStatus !== IdeaStatusType.Discontinued && sStatus !== IdeaStatusType.Merged;
		if (!bProcessRunning) {
			return this.getText("VOTE_MSG_VOTING_NOT_POSSIBLE");
		}
		var bStatusVote = ( iOpenStatusSetting > 0 && iVotePrivilege > 0 ) || !iOpenStatusSetting;
		if (!bStatusVote || !iCanVote) {
			return this.getText("VOTE_MSG_VOTING_NO_PRIVILEGE");
		}
		var bVoteActive = iVoteActive > 0;
		if (!bVoteActive) {
			return this.getText("VOTE_MSG_VOTING_INACTIVE", [CodeModel.getText("sap.ino.xs.object.campaign.Phase.Root", sPhase)]);
		}
		switch (sVoteType) {
			case VoteType.TYPE_STAR:
				var fScore = oFloatNumberFormat.format(this.formatter.toFloat(sScore));
				if (iUserScore) {
					return this.getText("VOTE_FLD_STAR_RATING_TOOLTIP_USER_VOTED", [iUserScore, iVoteCount, fScore]);
				} else if (!bDisplayOnly) {
					return this.getText("VOTE_FLD_STAR_RATING_TOOLTIP");
				}
				break;
			case VoteType.TYPE_LIKE:
				if (iUserScore) {
					return this.getText("VOTE_FLD_LIKE_TOOLTIP_USER_VOTED", [iUserScore, iVoteCount, fScore]);
				} else if (!bDisplayOnly) {
					return this.getText("VOTE_FLD_LIKE_TOOLTIP");
				}
				break;
			case VoteType.TYPE_LIKE_DISLIKE:
				if (iUserScore) {
					if (iUserScore === 1) {
						return this.getText("VOTE_FLD_LIKE_DISLIKE_LIKE_TOOLTIP_USER_VOTED", [iUserScore, iVoteCount, fScore]);
					}
					if (iUserScore === -1) {
						return this.getText("VOTE_FLD_LIKE_DISLIKE_DISLIKE_TOOLTIP_USER_VOTED", [iUserScore, iVoteCount, fScore]);
					}
				} else if (!bDisplayOnly) {
					return this.getText("VOTE_FLD_LIKE_DISLIKE_TOOLTIP");
				}
				break;
		}

		return this.getText("IDEA_LIST_ALT_IDEA_VOTE_TOOLTIP_VOTE");
	};

	oObjectFormatter.isDraft = function(sStatus) {
		return sStatus === IdeaStatusType.Draft;
	};

	oObjectFormatter.isFinal = function(sStatus) {
		var sStatusType;
		jQuery.each(Configuration.getBackendConfiguration().ideaStatus, function(iIndex, oStatus) {
			if (oStatus.CODE === sStatus) {
				sStatusType = oStatus.STATUS_TYPE;
				return;
			}
		});
		return sStatus === IdeaStatusType.Completed ||
			sStatus === IdeaStatusType.Discontinued ||
			sStatus === IdeaStatusType.Merged ||
			sStatusType === IdeaStatusType.TypeCompleted ||
			sStatusType === IdeaStatusType.TypeDiscontinued;
	};

	oObjectFormatter.isMerged = function(sStatus) {
		return sStatus === IdeaStatusType.Merged;
	};

	oObjectFormatter.linkLabel = function(sLabel, sURL) {
		return sLabel || sURL;
	};

	oObjectFormatter.imageIcon = function(imageId) {
		return !imageId ? "sap-icon://person-placeholder" : "";
	};

	/**
	 * Formatter to bind to the object key to find out whether objects are new
	 * @returns {boolean}
	 */
	oObjectFormatter.isNewObject = function() {
		var oObject = this.getObjectModel();
		return oObject && oObject.isNew();
	};

	/**
	 * Formatter to bind to the object to find out whether objects are existing already
	 * @returns {boolean}
	 */
	oObjectFormatter.isExistingObject = function() {
		var oObject = this.getObjectModel();
		return oObject && !oObject.isNew();
	};

	oObjectFormatter.getLikeIconUrl = function() {
		return IconPool.getIconURI("heart", "InoIcons");
	};

	oObjectFormatter.widthCampaignBanner = function(oSystem) {
		if (oSystem.phone) {
			return "300px";
		} else {
			return "350px";
		}
	};

	oObjectFormatter.heightCampaignBanner = function(oSystem) {
		if (oSystem.phone) {
			return "160px";
		} else {
			return "213px";
		}
	};

	oObjectFormatter.blogStatus = function(sStatus) {
		return sStatus === "sap.ino.config.DRAFT" ? this.getText("BLOG_LIST_MIT_DRAFT_STATUS") : "";
	};

	oObjectFormatter.isBlogStatusDraft = function(sStatus) {
		return sStatus === "sap.ino.config.DRAFT";
	};

	oObjectFormatter.urlVisible = function(url) {
		return jQuery.sap.validateUrl(url);
	};

	oObjectFormatter.ideaShortDescription = function(sDescription) {
		function parseHTML(s) {
			if (jQuery.parseHTML) {
				var a = jQuery.parseHTML(s);
				if (a) {
					var start = 0,
						end = a.length;
					while (start < end && a[start].nodeType !== 1) {
						start++;
					}
					while (start < end && a[end - 1].nodeType !== 1) {
						end--;
					}
					if (start > 0 || end < a.length) {
						a = a.slice(start, end);
					}
					return jQuery(a);
				}
			}
			return jQuery(s);
		}
		if (sDescription) {
			sDescription = "<span>" + sDescription + "</span>";
			var aParsed = parseHTML(sDescription);
			var sText = aParsed && aParsed[0] && aParsed[0].innerText;
			return sText;
		}
		return sDescription;
	};
	oObjectFormatter.enableRejectOKButton = function(sReason){
	    if(sReason.length > 0){
	        return true;
	    }
	    return false;
	};

	return oObjectFormatter;
});
}; // end of sap/ino/commons/formatters/ObjectFormatter.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.FollowUp') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.object.FollowUp'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/models/object/FollowUp",[
    "sap/ino/commons/models/aof/ApplicationObject",
    "sap/ino/commons/models/aof/ApplicationObjectChange",
    "sap/ino/commons/models/object/Idea",
    "sap/ino/commons/models/core/ReadSource"
], function(ApplicationObject,
            ApplicationObjectChange,
            Idea,
            ReadSource) {
    "use strict";

    var FollowUp = ApplicationObject.extend("sap.ino.commons.models.object.FollowUp", {
        objectName : "sap.ino.xs.object.followup.FollowUp",
        readSource : ReadSource.getDefaultAOFSource(),
        actionImpacts : {
            "del": [{"objectName": "sap.ino.commons.models.object.Idea",
	                 "objectKey": "OBJECT_ID",
	                 "impactedAttributes": ["FOLLOW_UP_ID", "FOLLOW_UP_DATE"]}],
	        "create": [{"objectName": "sap.ino.commons.models.object.Idea",
	                 "objectKey": "OBJECT_ID",
	                 "impactedAttributes": ["FOLLOW_UP_ID", "FOLLOW_UP_DATE"]}],
	        "update": [{"objectName": "sap.ino.commons.models.object.Idea",
	                 "objectKey": "OBJECT_ID",
	                 "impactedAttributes": ["FOLLOW_UP_ID", "FOLLOW_UP_DATE"]}],
	        "massModify": [{"objectName": "sap.ino.commons.models.object.Idea",
	                 "objectKey": "ideaIds",
	                 "impactedAttributes": ["FOLLOW_UP_ID", "FOLLOW_UP_DATE"]}]
        },
        determinations : {
            onCreate : function() {
                return {
                    OBJECT_TYPE_CODE : "IDEA" // In future: Remove hardcoding on idea, if follow-up is used for different objects
                };
            }
        },
        
        relativeDates : [
            {"key": "NONE"},
            {"key": "TODAY"},
            {"key": "TOMORROW"},
            {"key": "THIS_WEEK"},
            {"key": "NEXT_WEEK"},
            {"key": "IN_A_WEEK"},
            {"key": "IN_TWO_WEEKS"},
            {"key": "THIS_MONTH"},
            {"key": "NEXT_MONTH"},
            {"key": "IN_A_MONTH"},
            {"key": "IN_TWO_MONTHS"}
        ]
        
    });

    return FollowUp;
});
}; // end of sap/ino/commons/models/object/FollowUp.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.models.object.Report') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.models.object.Report'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/commons/models/object/Report",[
      "sap/ino/commons/models/aof/ApplicationObject",
      "sap/ino/commons/models/core/ReadSource",
      "sap/ino/commons/util/ReportUtil"
     ], function(ApplicationObject, ReadSource, ReportUtil) {
	"use strict";

	var Report = ApplicationObject.extend("sap.ino.commons.models.object.Report", {
		objectName: "sap.ino.xs.object.analytics.Report",
		readSource: ReadSource.getDefaultODataSource("MyReports", {
			async: false
		}),
		invalidation: {
			entitySets: ["MyReports"]
		},
		determinations: {
			onCreate: determineCreate,
			onRead: determineRead,
			onNormalizeData: determineNormalizedData,
			onUpdateHandles: updateHandles
		},
		setConfiguration: setConfiguration,
		getConfiguration: getConfiguration,
		setCampaignContext: setCampaignContext,
		setDataFromTemplate: setDataFromTemplate,
		setReportOrderSequence: setReportOrderSequence
	});

	function setConfiguration(oConfiguration) {
		if (typeof(oConfiguration) === "string") {
			oConfiguration = JSON.parse(oConfiguration);
		}
		this.setProperty("/CONFIG", oConfiguration);
	}

	function getConfiguration() {
		return this.getProperty("/CONFIG");
	}

	function setReportOrderSequence(iOrderSequence) {
		this.setProperty("/ORDER_SEQUENCE", iOrderSequence);
	}

	function setDataFromTemplate(sReportTemplateCode, sDataModel) {
		var oReadModel = sDataModel;
		var oReport = this;
		var oDeferred = new jQuery.Deferred();

		var fnReadComplete = function(oData) {
			oData = ReportUtil.parseConfigToObject(oData);
			oReport.setConfiguration(oData.CONFIG);
			oDeferred.resolve(oData);
		};

		oReadModel.read("/ReportTemplates(CODE='" + sReportTemplateCode + "')", {
			context: null,
			urlParameters: null,
			success: fnReadComplete
		});
		
		return oDeferred.promise();
	}

	function setCampaignContext(iCampaignId, sCampaignName) {
		this.setProperty("/CAMPAIGN_ID", iCampaignId);
		this.setProperty("/CAMPAIGN_NAME", sCampaignName);

		if (iCampaignId !== undefined && iCampaignId !== null) {
			//force the single value parameter selection
			var oConfiguration = this.getProperty("/CONFIG");
			if (oConfiguration.Parameters && oConfiguration.Parameters.Campaign) {
				oConfiguration.Parameters.Campaign.Selection = [iCampaignId];
				oConfiguration.Parameters.Campaign.SelectionString = sCampaignName;
				this.setProperty("/CONFIG", oConfiguration);
			}
		}
	}

	function determineCreate() {
		return {
			"ID": -1,
			"CAMPAIGN_ID": null,
			"CONFIG": null,
			"ORDER_SEQUENCE": null
		};
	}

	function determineRead(oDefaultData) {
		oDefaultData = ReportUtil.parseConfigToObject(oDefaultData);
		return oDefaultData;
	}

	function determineNormalizedData(oDefaultData) {
		oDefaultData = ReportUtil.parseConfigToString(oDefaultData);
		return oDefaultData;
	}

	//as the determineNormalizedData function does not influence the current object, but only the data
	//sent to the database the CONFIG is not stored as a string.
	//Therefore the updateHandles function tries to update the handles of the CONFIG object
	function updateHandles(oObject, mGeneratedKeys) {
		if (oObject.ID) {
			// check if there is an entry in the generated keys for the ID
			if (mGeneratedKeys[oObject.ID]) {
				oObject.ID = mGeneratedKeys[oObject.ID];
			}
		}
		return oObject;
	}

	return Report;
});
}; // end of sap/ino/commons/models/object/Report.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.util.Export') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.util.Export'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.ODataModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.v2.ODataModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.PropertyBinding'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.CompositeBinding'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.Date'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.DateTime'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.Time'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.List'); // unlisted dependency retained
jQuery.sap.require('sap.m.Table'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Table'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Icon'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.BusyIndicator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.m.HBox'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/util/Export",[
    "sap/ui/core/format/DateFormat",
    "sap/ui/model/odata/ODataModel",
    "sap/ui/model/odata/v2/ODataModel",
    "sap/ui/model/PropertyBinding",
    "sap/ui/model/CompositeBinding",
    "sap/ui/model/type/Date",
    "sap/ui/model/type/DateTime",
    "sap/ui/model/type/Time",
    "sap/m/MessageBox",
    "sap/m/MessageToast",
    "sap/m/Link",
    "sap/m/Text",
    "sap/m/Label",
    "sap/m/List",
    "sap/m/Table",
    "sap/ui/table/Table",
    "sap/ui/core/Icon",
    "sap/ui/core/BusyIndicator",
    "sap/ino/commons/application/Configuration",
    "sap/ino/commons/util/ExportPPT",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/m/HBox"
], function(DateFormat, ODataModel, ODataModelV2, PropertyBinding, CompositeBinding, DateType, DateTimeType, TimeType, MessageBox,
	MessageToast, Link, Text, Label, List, Table, UITable, Icon, BusyIndicator, Configuration, ExportPPT, Filter, FilterOperator, HBox) {
	"use strict";

	var FORMAT_CSV = "csv";
	var FORMAT_XLS = "xls";
	var FORMAT_TXT = "txt";
	var FORMAT_XML = "xml";
	var FORMAT_PPTX = "pptx";

	var CHARSET_UTF8 = "utf-8";

	var MIME_TYPE_CSV = "text/csv";
	var MIME_TYPE_XLS = "application/vnd.ms-excel";
	var MIME_TYPE_PPTX = "application/vnd.openxmlformats-officedocument.presentationml.presentation";

	var RECORD_CONFIRM_THRESHOLD = 9999;
	var RECORD_MAX_THRESHOLD_CSV = 2500;
	var RECORD_MAX_THRESHOLD_XLS = 1000;
	var RECORD_MAX_THRESHOLD_PPTX = 50;

	var DEFAULT_PREFIX = "Export";
	var CSV_SEP = ";";

	function hasCustomKey(oControl, sKey) {
		var aData = oControl.getAggregation("customData");
		if (aData) {
			for (var i = 0; i < aData.length; i++) {
				if (aData[i].getKey() === sKey) {
					return true;
				}
			}
		}
		return false;
	}

	function isExportable(oControl) {
		return !hasCustomKey(oControl, "exportIgnore");
	}

	function isExportColumn(oColumn) {
		return hasCustomKey(oColumn, "is_export");
	}

	return {

		_oBrowser: sap.ui.Device.browser,

		_getBinding: function(oControl) {
			if (oControl instanceof List) {
				return oControl.getBinding("items");
			} else if (oControl instanceof Table || oControl instanceof UITable) {
				return oControl.getBinding("rows");
			}
			return null;
		},

		_getModel: function(oControl) {
			if (oControl instanceof List) {
				return oControl.getModel("data");
			} else if (oControl instanceof Table) {
				return oControl.getModel("data");
			} else if (oControl instanceof UITable) {
				return oControl.getModel() || oControl.getModel("data");
			}
			return null;
		},

		_getSelect: function(oControl) {
			var oBinding = this._getBinding(oControl);
			if (oControl instanceof List) {
				return undefined;
			} else if (oControl instanceof Table) {
				return undefined;
			} else if (oControl instanceof UITable) {
				if (!oBinding.aAnalyticalInfo) { //for non-smarttable
					return oControl.getSelectedIndices();
				}
				return oBinding.aAnalyticalInfo && oBinding.aAnalyticalInfo.filter(function(oAnalyticalInfo) {
					return oAnalyticalInfo.visible;
				}).map(function(oAnalyticalInfo) {
					return oAnalyticalInfo.name;
				});
			}
			return undefined;
		},

		_getControls: function(oControl) {
			var mControl = {};

			function addControl(sLabel, oControl, sId) {
				if (oControl && (oControl instanceof Link || oControl instanceof Text || oControl instanceof HBox)) {
					if (sLabel) {
						sLabel = sLabel.trim();
						if (sLabel.indexOf(":", sLabel.length - 1) !== -1) {
							sLabel = sLabel.substring(0, sLabel.length - 1);
						}
						sId = sId || sLabel;
						if (!mControl[sId]) {
							mControl[sId] = {
								"label": sLabel,
								"ctrl": oControl
							};
							return true;
						}
					}
				}
				return false;
			}

			if (oControl instanceof List) {
				if (oControl.getItems().length > 0) {
					var oFirstItem = oControl.getItems()[0];
					var aContentItem = oFirstItem.findAggregatedObjects(true);
					var sLabel = "",
						sId = "";
					jQuery.each(aContentItem, function(iIndex, oContentItem) {
						if (!isExportable(oContentItem)) {
							return;
						}
						if (oContentItem instanceof Label && oContentItem.getText()) {
							sLabel = oContentItem.getText();
							sId = oContentItem.sId;
							if (oContentItem.getLabelFor()) {
								var oContentItemRef = sap.ui.getCore().byId(oContentItem.getLabelFor());
								addControl(sLabel, oContentItemRef, sId);
							}
						}
						if (!sLabel && oContentItem.getTooltip()) {
							sLabel = oContentItem.getTooltip();
						}
						if (oContentItem.data("exportLabel")) {
							sLabel = oContentItem.data("exportLabel");
						}
						if (addControl(sLabel, oContentItem)) {
							sLabel = "";
						}
						sId = "";
					});
				}
			} else if (oControl instanceof Table || oControl instanceof UITable) {
				var aColumn = oControl.getColumns();
				jQuery.each(aColumn, function(index, oColumn) {
					if (isExportable(oColumn) && (oColumn.getVisible() || isExportColumn(oColumn) || oControl.data("bExportAllColumns"))) {
						var sLabel = "",
							sId;
						var oLabel = oColumn.getLabel();
						if (oLabel) {
							sLabel = oLabel.getText();
							sId = oLabel.sId;
						}
						var oContentItem = oColumn.getTemplate();
						if (addControl(sLabel, oContentItem, sId)) {
							sLabel = "";
							sId = "";
						}
					}
				});
			}
			return mControl;
		},

		_readContent: function(oSourceControl, sFormat, iLimit) {
			var that = this;

			var oExportData = {
				headers: [],
				rows: []
			};

			var mControl = this._getControls(oSourceControl);
			jQuery.each(mControl, function(sId, oControl) {
				oExportData.headers.push(oControl.label);
			});
			if (oExportData.headers.length === 0) {
				MessageToast.show(that._getText("GENERAL_EXPORT_TIT_EXPORT_NO_DATA"));
				return jQuery.Deferred().reject();
			}

			var oURLParameters = {
				"$inlinecount": "allpages",
				"$format": "json"
			};
			if (oSourceControl && oSourceControl.getModel() && oSourceControl.getModel().getHeaders() && oSourceControl.getModel().getHeaders().Accept &&
				oSourceControl.getModel().getHeaders().Accept.indexOf("xml") > -1) {
				oURLParameters["$format"] = "xml";
			}
			var oSelectFilter;
			if (iLimit > 0) {
				oURLParameters.$top = iLimit;
			}
			var aSelect = this._getSelect(oSourceControl);
			if (aSelect) {
				//define a function to check if it is a number array
				var isNumArray = function(array) {
					var bIsNum = true;

					jQuery.each(array, function(iIndex, oIndex) {
						if (isNaN(oIndex)) {
							bIsNum = false;
							return false;
						}
					});

					return bIsNum;
				};
				if (isNumArray(aSelect)) {
					//If the array is a number type, it is a Rewards List, get the REWARD_LIST_ID of the select rows
					var aFilter = [];
					var aRewardListId = [];
					var bGamification = oSourceControl.getId().indexOf('gamificationReportTable') > -1 ? true : false;
					var bGamificationDetail = oSourceControl.getId().indexOf('gamificationReportTableDetail') > -1 ? true : false;
					jQuery.each(aSelect, function(iIndex, iSelect) {
						var iId = oSourceControl.getContextByIndex(iSelect).getProperty("REWARD_LIST_ID");
						if (!bGamification) {
							if (aRewardListId.indexOf(iId) === -1) {
								aRewardListId.push(iId);
								aFilter.push(new Filter("REWARD_LIST_ID", FilterOperator.EQ, parseInt(iId, 10)));
							}
						} else {
							///For gamification Parts
							if (bGamificationDetail) {
								var iActivityId = oSourceControl.getContextByIndex(iSelect).getProperty("ACTIVITY_ID");
								aFilter.push(new Filter("ACTIVITY_ID", FilterOperator.EQ, iActivityId));
							} else {
								var iDimensionId = oSourceControl.getContextByIndex(iSelect).getProperty("DIMENSION_ID");
								var iIdentityId = oSourceControl.getContextByIndex(iSelect).getProperty("IDENTITY_ID");
								aFilter.push(new Filter([new Filter("DIMENSION_ID", FilterOperator.EQ, iDimensionId),
						                          new Filter("IDENTITY_ID", FilterOperator.EQ, iIdentityId)], true));
							}
						}
					});
					oSelectFilter = new Filter(aFilter, false);
				} else {
					oURLParameters.$select = aSelect.join(",");
				}
			}

			var oBinding = this._getBinding(oSourceControl);
			if (oBinding && oBinding.aSorter) {
				for (var indexSorter = 0; indexSorter < oBinding.aSorter.length; indexSorter++) {
					if (aSelect.indexOf(oBinding.aSorter[indexSorter].sPath) < 0) {
						if (oURLParameters.$select && oURLParameters.$select.length > 0) {
							oURLParameters.$select += "," + oBinding.aSorter[indexSorter].sPath;
						} else {
							oURLParameters.$select = oBinding.aSorter[indexSorter].sPath;
						}
						//aSelect.push(oBinding.aSorter[indexSorter].sPath);
					}
				}
			}

			var sPath = oBinding.getPath();
			var oDeferred = jQuery.Deferred();
			this._getModel(oSourceControl).read(sPath, {
				filters: oBinding.aFilters.concat(oBinding.aApplicationFilters, oBinding.aFilter || [], oBinding.aApplicationFilter || [],
					oSelectFilter || []),
				sorters: oBinding.aSorters.concat(oBinding.aSorter || []),
				urlParameters: oURLParameters,
				success: function(oData) {
					var aResult = oData.results;
					if (sFormat === FORMAT_PPTX) {
						oDeferred.resolve(aResult);
					} else {
						for (var i = 0; i < aResult.length; i++) {
							var oRow = {
								cells: []
							};
							/* to keep the download count data consistent between exporting files and database*/
							if (aResult[i].hasOwnProperty("DOWNLOAD_COUNT")) {
								aResult[i].DOWNLOAD_COUNT += 1;
							}
							jQuery.each(mControl, function(sHeader, oControl) {
								var oCell = {
									header: oControl.label
								};
								var oEntry = aResult[i];
								var oCtr = oControl.ctrl;
								var sType = "String";
								var sContent = "";
								var oContentRaw, oResult, sHref;

								if (oCtr instanceof HBox && oCtr.getItems().length > 0) {
									var aItems = oCtr.getItems();
									var oContentObject = {content:"",contentRaw:""};
									for (var j = 0; j < aItems.length; j++) {
									oContentObject = that.getHBoxContent(aItems[j],sType,oEntry,oContentObject);
									}
									sContent = oContentObject.content;
									oContentRaw = oContentObject.contentRaw;									

								} else {
									var oBindingInfo = oCtr.getBindingInfo("href");
									if (oBindingInfo) {
										sType = "Href";
										var oBindingInfoHref = oCtr.getBindingInfo("href");
										oBindingInfo = null;
									}
									if (!oBindingInfo) {
										oBindingInfo = oCtr.getBindingInfo("text");
									}
									if (!oBindingInfo) {
										oBindingInfo = oCtr.getBindingInfo("value");
									}
									if (!oBindingInfo) {
										oBindingInfo = oCtr.getBindingInfo("checked");
										if (oBindingInfo) {
											sType = "Boolean";
										}
									}
									if (!oBindingInfo) {
										oBindingInfo = oCtr.getBindingInfo("tooltip");
									}

									if (oBindingInfo) {
										if (oBindingInfo.binding) {
											oResult = that._getDataForBinding(oCtr, oEntry, oBindingInfo.binding);
											if (oResult.type) {
												sType = oResult.type;
											}
											sContent = oResult.content;
											oContentRaw = oResult.contentRaw;
										} else if (oBindingInfo.parts) {
											oResult = that._getDataForParts(oCtr, oEntry, oBindingInfo);
											if (oResult.type) {
												sType = oResult.type;
											}
											sContent = oResult.content;
											oContentRaw = oResult.contentRaw;
										}
									}
									if (oBindingInfoHref) {
										if (oBindingInfoHref.binding) {
											oResult = that._getDataForBinding(oCtr, oEntry, oBindingInfoHref.binding);
										} else if (oBindingInfoHref.parts) {
											oResult = that._getDataForParts(oCtr, oEntry, oBindingInfoHref);
										}
										sType = "Href";
										sHref = Configuration.getFullApplicationPath("sap.ino.config.URL_PATH_UI_FRONTOFFICE") + "/" + oResult.content;
									}
								}

								if (sContent === null || sContent === undefined) {
									sContent = "";
								}
								if (typeof sContent === "boolean") {
									sType = "Boolean";
								} else if (typeof sContent === "number") {
									if (parseInt(sContent, 10) === sContent) {
										sType = "Integer";
									} else {
										sType = "Number";
									}
								} else if(jQuery.type(sContent) === "date"){
								    sType = "String";
								    sContent = sContent.toLocaleString();
								}
								
								if (sContent && typeof sContent === "string") {
									sContent = sContent.replace(/(\r\n|\n|\r)/gm, " ");
									sContent = sContent.replace('"', '\"');
								}
								oCell.content = sContent;
								oCell.contentRaw = oContentRaw;
								if (sHref) {
									oCell.href = sHref;
								}
								oCell.type = sType;
								oRow.cells.push(oCell);
							});
							oExportData.rows.push(oRow);
						}
						oDeferred.resolve(oExportData);
					}
				},
				error: function() {
					oDeferred.resolve(oExportData);
				}
			});
			return oDeferred.promise();
		},
		getHBoxContent: function(oCtr, sType, oEntry,oTextValue) {
		    var that = this;
			var oResult;
			var oBindingInfo;
			if (!oBindingInfo) {
				oBindingInfo = oCtr.getBindingInfo("text");
			}
			if (!oBindingInfo) {
				oBindingInfo = oCtr.getBindingInfo("value");
			}
			if (!oBindingInfo) {
				oBindingInfo = oCtr.getBindingInfo("tooltip");
			}

			if (oBindingInfo) {
				if (oBindingInfo.binding) {
					oResult = that._getDataForBinding(oCtr, oEntry, oBindingInfo.binding);
					oTextValue.content = oResult.content ? oTextValue.content + oResult.content : oTextValue.content;
					oTextValue.contentRaw = oResult.contentRaw ? oTextValue.contentRaw + oResult.contentRaw : oTextValue.contentRaw;
				} else if (oBindingInfo.parts) {
					oResult = that._getDataForParts(oCtr, oEntry, oBindingInfo);
					oTextValue.content = oResult.content ? oTextValue.content + oResult.content : oTextValue.content;
					oTextValue.contentRaw = oResult.contentRaw ? oTextValue.contentRaw + oResult.contentRaw : oTextValue.contentRaw;
				}
			}

			return oTextValue;
		},
		_getDataForBinding: function(oControl, oData, oBinding) {
			var that = this;

			var sType, oResult;
			var aValue = [];

			if (oBinding instanceof CompositeBinding) {
				jQuery.each(oBinding.aBindings, function(iIndex, oSubBinding) {
					oResult = that._getDataForPropertyBinding(oControl, oData, oSubBinding);
					if (oResult.type) {
						sType = oResult.type;
					}
					aValue.push(oResult.value);
				});
			} else if (oBinding instanceof PropertyBinding) {
				oResult = that._getDataForPropertyBinding(oControl, oData, oBinding);
				if (oResult.type) {
					sType = oResult.type;
				}
				aValue.push(oResult.value);
			}

			if (oBinding.getType() instanceof DateType) {
				sType = "Date";
			} else if (oBinding.getType() instanceof TimeType) {
				sType = "Time";
			} else if (oBinding.getType() instanceof DateTimeType) {
				sType = "DateTime";
			}

			var sContent = "";
			var oContentRaw;

			if (!oControl.data("exportRaw")) {
				if (oBinding instanceof CompositeBinding) {
					if (oBinding && oBinding.getFormatter()) {
						sContent = oBinding.getFormatter().apply(oBinding, aValue);
					} else if (oBinding && oBinding.getType()) {
						sContent = oBinding.getType().formatValue(aValue, oBinding.sInternalType || "any");
					} else if (aValue.length > 1) {
						sContent = aValue.join(" ");
					} else if (aValue.length > 0) {
						sContent = aValue[0];
					}
				} else if (aValue.length > 0) {
					sContent = aValue[0];
				}
			}

			if (aValue.length > 0) {
				oContentRaw = aValue[0];
			}

			return {
				type: sType,
				content: sContent,
				contentRaw: oContentRaw
			};
		},

		_getDataForPropertyBinding: function(oControl, oData, oBinding) {
			var sType;
			var vValue = this._getDataForPath(oControl, oData, oBinding);

			if (oBinding.getType() instanceof DateType) {
				sType = "Date";
			} else if (oBinding.getType() instanceof TimeType) {
				sType = "Time";
			} else if (oBinding.getType() instanceof DateTimeType) {
				sType = "DateTime";
			}

			if (vValue instanceof Date) {
				sType = "Date";
			}

			return {
				type: sType,
				value: vValue
			};
		},

		_getDataForPath: function(oControl, oData, oBinding) {
			var vValue;

			if (oBinding.getModel()) {
				if (oBinding.getModel() === this.i18n) {
					vValue = this._getText(oBinding.getPath());
				} else {
					vValue = oData[oBinding.getPath()];
				}
			}

			if (!oControl.data("exportRaw")) {
				if (oBinding.getType()) {
					vValue = oBinding.getType().formatValue(vValue, oBinding.sInternalType || "any");
				}
				if (oBinding.getFormatter()) {
					vValue = oBinding.getFormatter().apply(oBinding, [vValue]);
				}
			}

			return vValue;
		},

		_getDataForParts: function(oControl, oData, oBinding) {
			var that = this;

			var sType;
			var aValue = [];

			if (oBinding.type) {
				if (oBinding.type instanceof DateType) {
					sType = "Date";
				} else if (oBinding.type instanceof TimeType) {
					sType = "Time";
				} else if (oBinding.type instanceof DateTimeType) {
					sType = "DateTime";
				}
			}
			jQuery.each(oBinding.parts, function(index, oBindingPart) {
				aValue.push(that._getDataForPart(oControl, oData, oBindingPart));
			});

			var sContent = "";
			var oContentRaw;

			if (!oControl.data("exportRaw")) {
				if (oBinding.formatter) {
					sContent = oBinding.formatter.apply(this, aValue);
				} else if (aValue.length > 1) {
					sContent = aValue.join(" ");
				} else if (aValue.length > 0) {
					sContent = aValue[0];
				}
			}

			if (aValue.length > 0) {
				oContentRaw = aValue[0];
			}

			return {
				type: sType,
				content: sContent,
				contentRaw: oContentRaw
			};
		},

		_getDataForPart: function(oControl, oData, oBinding) {
			var vValue = oData[oBinding.path];

			if (!oControl.data("exportRaw")) {
				if (oBinding.type) {
					vValue = oBinding.type.formatValue(vValue, "any");
				}
				if (oBinding.formatter) {
					vValue = oBinding.formatter.apply(oBinding, [vValue]);
				}
			}

			return vValue;
		},

		_convertToFormat: function(oExportData, sFormat, sFilename, sAuthor, sPrefix) {
			if (sFormat === FORMAT_PPTX) {
				ExportPPT.i18n = this.i18n;
				return ExportPPT.convertToFormatPPTX(oExportData);
			} else {
				var oDeferred = jQuery.Deferred();
				if (sFormat == FORMAT_CSV) {
					oDeferred.resolve(this._convertToFormatCSV(oExportData, sFilename, sAuthor, sPrefix));
				} else if (sFormat == FORMAT_XLS) {
					oDeferred.resolve(this._convertToFormatXLS(oExportData, sFilename, sAuthor, sPrefix));
				} else {
					oDeferred.resolve("");
				}
				return oDeferred.promise();
			}
		},

		_convertToFormatCSV: function(oExportData, sFilename, sAuthor, sPrefix) {
			var csv = ["\uFEFF"];

			for (var i = 0; i < oExportData.headers.length; i++) {
				var sHeader = oExportData.headers[i];
				csv.push('"' + sHeader + '"');
				csv.push(",");
			}

			csv.push("\n");

			for (i = 0; i < oExportData.rows.length; i++) {
				var oRow = oExportData.rows[i];
				for (var j = 0; j < oRow.cells.length; j++) {
					var oCell = oRow.cells[j];
					if (oCell.type === "Date" && oCell.contentRaw) {
						csv.push('"' + oCell.contentRaw.toLocaleDateString() + '"');
					} else {
						csv.push('"' + oCell.content + '"');
					}
					csv.push(",");
				}
				csv.push("\n");
			}

			return csv.join("");
		},

		_convertToFormatXLS: function(oExportData, sFilename, sAuthor, sPrefix) {
			var xls = "<?xml version=\"1.0\"?>" +
				"<Workbook xmlns=\"urn:schemas-microsoft-com:office:spreadsheet\" " +
				"xmlns:o=\"urn:schemas-microsoft-com:office:office\" " +
				"xmlns:x=\"urn:schemas-microsoft-com:office:excel\" " +
				"xmlns:ss=\"urn:schemas-microsoft-com:office:spreadsheet\" " +
				"xmlns:html=\"http://www.w3.org/TR/REC-html40\">" +
				"<DocumentProperties xmlns=\"urn:schemas-microsoft-com:office:office\">" +
				"<LastAuthor>" +
				jQuery.sap.encodeXML(sAuthor ? sAuthor : "Microsoft Office User") +
				"</LastAuthor>" +
				"<Created>" +
				new Date().toISOString() +
				"</Created>" +
				"<Version>14.0</Version>" +
				"</DocumentProperties>" +
				"<OfficeDocumentSettings xmlns=\"urn:schemas-microsoft-com:office:office\">" +
				"<AllowPNG/>" +
				"</OfficeDocumentSettings>" +
				"<ExcelWorkbook xmlns=\"urn:schemas-microsoft-com:office:excel\">" +
				"<WindowHeight>10300</WindowHeight>" +
				"<WindowWidth>25720</WindowWidth>" +
				"<WindowTopX>900</WindowTopX>" +
				"<WindowTopY>100</WindowTopY>" +
				"<ProtectStructure>False</ProtectStructure>" +
				"<ProtectWindows>False</ProtectWindows>" +
				"</ExcelWorkbook>" +
				"<Styles>" +
				"<Style ss:ID=\"Default\" ss:Name=\"Normal\">" +
				"<Alignment ss:Vertical=\"Bottom\"/>" +
				"<Borders/>" +
				"<Font ss:FontName=\"Calibri\" ss:Size=\"12\" ss:Color=\"#000000\"/>" +
				"<Interior/>" +
				"<NumberFormat/>" +
				"<Protection/>" +
				"</Style>" +
				"<Style ss:ID=\"s62\">" +
				"<Font ss:FontName=\"Calibri\" ss:Size=\"12\" ss:Color=\"#000000\" ss:Bold=\"1\"/>" +
				"</Style>" +
				"<Style ss:ID=\"s63\">" +
				"<NumberFormat ss:Format=\"Short Date\"/>" +
				"</Style>" +
				"<Style ss:ID=\"s64\">" +
				"<NumberFormat ss:Format=\"Fixed\"/>" +
				"</Style>" +
				"<Style ss:ID=\"s65\">" +
				"<NumberFormat ss:Format=\"0\"/>" +
				"</Style>" +
				"<Style ss:ID=\"s66\" ss:Name=\"Hyperlink\">" +
				"<Font ss:Color=\"#0563C1\" ss:Underline=\"Single\"/>" +
				"</Style>" +
				"</Styles>";

			xls += "<Worksheet ss:Name=\"" +
				jQuery.sap.encodeXML(sPrefix ? sPrefix : DEFAULT_PREFIX) + "\">" +
				"<Names>" +
				"<NamedRange ss:Name=\"_FilterDatabase\" ss:RefersTo=\"=Export!R1C1:R1C" + oExportData.headers.length + "\" ss:Hidden=\"1\"/>" +
				"</Names>" +
				"<Table ss:ExpandedColumnCount=\"" + oExportData.headers.length + "\" ss:ExpandedRowCount=\"" + (oExportData.rows.length + 1) + "\" " +
				"x:FullColumns=\"1\" x:FullRows=\"1\" ss:DefaultColumnWidth=\"150\" ss:DefaultRowHeight=\"15\">";

			xls += "<Row ss:AutoFitHeight=\"0\">";
			for (var i = 0; i < oExportData.headers.length; i++) {
				var sHeader = oExportData.headers[i];
				xls += "<Cell ss:StyleID=\"s62\"><Data ss:Type=\"String\">" + jQuery.sap.encodeXML(sHeader) +
					"</Data><NamedCell ss:Name=\"_FilterDatabase\"/></Cell>";
			}
			xls += "</Row>";

			for (i = 0; i < oExportData.rows.length; i++) {
				var oRow = oExportData.rows[i];
				xls += "<Row ss:AutoFitHeight=\"0\">";
				for (var j = 0; j < oRow.cells.length; j++) {
					var oCell = oRow.cells[j];
					var sType = "String";
					var sContent = oCell.content;
					var sStyle = "";
					if (oCell.type == "Date" && oCell.contentRaw) {
						sType = "DateTime";
						var oDate = new Date(oCell.contentRaw);
						sContent = oDate.toISOString();
						if (sContent[sContent.length - 1] == "Z") {
							sContent = sContent.substring(0, sContent.length - 1);
						}
						sStyle = " ss:StyleID=\"s63\"";
					} else if (oCell.type == "Number") {
						sType = "Number";
						sStyle = " ss:StyleID=\"s64\"";
					} else if (oCell.type == "Integer") {
						sType = "Number";
						sStyle = " ss:StyleID=\"s65\"";
					} else if (oCell.type == "Boolean") {
						sType = "Boolean";
						sContent = sContent ? 1 : 0;
					} else if (oCell.type == "Href") {
						sStyle = " ss:StyleID=\"s66\" ss:HRef=\"" + oCell.href + "\"";
					}
					if (sType === "String") {
						if (sContent.indexOf("=") === 0) {
							sContent = sContent.replace(/=/, " =");
						}
						sContent = jQuery.sap.encodeXML(sContent);
					}
					xls += "<Cell" + sStyle + "><Data ss:Type=\"" + sType + "\">" + sContent + "</Data></Cell>";
				}
				xls += "</Row>";
			}

			xls += "</Table>" +
				"<WorksheetOptions xmlns=\"urn:schemas-microsoft-com:office:excel\">" +
				"<PageSetup>" +
				"<Header x:Margin=\"0.3\"/>" +
				"<Footer x:Margin=\"0.3\"/>" +
				"<PageMargins x:Bottom=\"0.75\" x:Left=\"0.7\" x:Right=\"0.7\" x:Top=\"0.75\"/>" +
				"</PageSetup>" +
				"<Unsynced/>" +
				"<PageLayoutZoom>0</PageLayoutZoom>" +
				"<Selected/>" +
				"<FreezePanes/>" +
				"<FrozenNoSplit/>" +
				"<SplitHorizontal>1</SplitHorizontal>" +
				"<TopRowBottomPane>1</TopRowBottomPane>" +
				"<ActivePane>2</ActivePane>" +
				"<Panes>" +
				"<Pane><Number>3</Number></Pane>" +
				"<Pane><Number>2</Number><ActiveRow>1</ActiveRow></Pane>" +
				"</Panes>" +
				"<ProtectObjects>False</ProtectObjects>" +
				"<ProtectScenarios>False</ProtectScenarios>" +
				"</WorksheetOptions>" +
				"<AutoFilter xmlns=\"urn:schemas-microsoft-com:office:excel\" x:Range=\"R1C1:R1C" + oExportData.headers.length + "\"/>" +
				"</Worksheet>";
			xls += "</Workbook>";

			return xls;
		},

		_downloadContent: function(sExportData, sFilename, sMimeType, sCharset) {
			var downloadLink = jQuery("<a/>", {
				download: sFilename,
				style: {
					display: "none"
				}
			});
			jQuery("body").append(downloadLink);
			var sUrl;
			if (this._oBrowser.name === this._oBrowser.BROWSER.SAFARI) {
				if (sMimeType === MIME_TYPE_PPTX) {
					sUrl = window.URL.createObjectURL(sExportData);
				} else {
					sUrl = "data:" + sMimeType + ";" + sCharset + "," + encodeURIComponent(sExportData);
				}
				var oWindow = window.open(sUrl, "_blank");
				setTimeout(function() {
					oWindow.close();
				}, 250);
			} else if (this._oBrowser.name === this._oBrowser.BROWSER.INTERNET_EXPLORER) {
				jQuery(downloadLink).click(function() {
					window.navigator.msSaveOrOpenBlob(sExportData, sFilename);
				});
				downloadLink[0].click();
			} else {
				if (sMimeType === MIME_TYPE_PPTX) {
					sUrl = window.URL.createObjectURL(sExportData);
				} else {
					sUrl = "data:" + sMimeType;
					if (sCharset) {
						sUrl += ";charset=" + sCharset;
					}
					sUrl += "," + encodeURIComponent(sExportData);
				}

				jQuery(downloadLink).attr("href", sUrl);
				downloadLink[0].click();
			}
		},

		_saveContent: function(sExportData, sFilename, sMimeType, sCharset) {
			if (sMimeType === MIME_TYPE_CSV) {
				sFilename += "." + FORMAT_TXT;
			} else if (sMimeType === MIME_TYPE_XLS) {
				if (this._oBrowser.version < 11) {
					sFilename += "." + FORMAT_XML;
				}
			}

			var ifr = document.createElement("iframe");
			ifr.id = "if1";
			ifr.location = "about.blank";
			ifr.style.display = "none";
			document.getElementsByTagName("body")[0].appendChild(ifr);

			var innerDocument = document.getElementById("if1").contentWindow.document;
			innerDocument.open(sMimeType, "replace");
			if (sCharset) {
				innerDocument.charset = sCharset;
			}
			innerDocument.write(sExportData);
			innerDocument.close();
			if (sCharset) {
				document.charset = sCharset;
			}
			innerDocument.execCommand("SaveAs", false, sFilename);
			document.getElementsByTagName("body")[0].removeChild(ifr);
		},

		_showConfirmationPopup: function(fnOK, fnCancel, iCount) {
			MessageBox.confirm(this._getText("GENERAL_EXPORT_INS_EXPORT_CONFIRMATION", [iCount]), {
				title: this._getText("GENERAL_EXPORT_TIT_EXPORT_CONFIRMATION"),
				icon: MessageBox.Icon.NONE,
				onClose: function(bResult) {
					if (bResult == "OK") {
						fnOK();
					} else {
						fnCancel();
					}
				}
			});
		},

		_showConfirmationPopupMax: function(fnOK, fnCancel, iCount, iMax) {
			MessageBox.confirm(this._getText("GENERAL_EXPORT_INS_EXPORT_CONFIRMATION_MAX", [iCount, iMax]), {
				title: this._getText("GENERAL_EXPORT_TIT_EXPORT_CONFIRMATION"),
				icon: MessageBox.Icon.NONE,
				onClose: function(bResult) {
					if (bResult == "OK") {
						fnOK();
					} else {
						fnCancel();
					}
				}
			});
		},

		_showIEInstructionPopup: function(fnOK, fnCancel, sFormat) {
			if (sFormat === FORMAT_XLS && this._oBrowser.version >= 11) {
				fnOK();
				return;
			}
			var oStorage = jQuery.sap.storage(jQuery.sap.storage.Type.local);
			var vStorageKey = "sap.ino.commons.util.Export-IEInstructionPopupNotShowAgain-" + sFormat.toUpperCase();
			if (!oStorage.get(vStorageKey)) {
				MessageBox.confirm(this._getText("GENERAL_EXPORT_INS_EXPORT_IE_INSTRUCTION_DESCR_" + sFormat.toUpperCase()), {
					title: this._getText("GENERAL_EXPORT_INS_EXPORT_IE_INSTRUCTION_TITLE"),
					icon: MessageBox.Icon.NONE,
					onClose: function(bResult) {
						if (bResult == "OK") {
							oStorage.put(vStorageKey, true);
							fnOK();
						} else {
							fnCancel();
						}
					}
				});
			} else {
				fnOK();
			}
		},

		_getText: function() {
			if (this.i18n) {
				return this.i18n.getResourceBundle().getText.apply(this.i18n.getResourceBundle(), arguments);
			}
			return "";
		},

		exportEnabled: function(oControl) {
			if (this._getModel(oControl) instanceof ODataModel ||
				this._getModel(oControl) instanceof ODataModelV2) {
				return true;
			}
			return false;
		},

		/**
		 * Export all data for current control bindings as file
		 *
		 * @param oControl
		 *            list/table control containing the binding definitions and formatters
		 * @param sFormat
		 *            format of the exported file (CSV or XLS)
		 * @param sFilename
		 *            filename of the exported file
		 * @param fnComplete
		 *            called when the export was completed
		 * @param sAuthor
		 *            author of the exported file
		 * @param sPrefix
		 *            prefix for names, e.g. worksheet
		 * @param iLimit
		 *            number of records, if not defined or <= 0 all records are returned
		 * @returns boolean flag, if export was started
		 */
		exportContent: function(oControl, sFormat, sFilename, fnComplete, sAuthor, sPrefix, iLimit) {
			if (!this.exportEnabled(oControl)) {
				return false;
			}
			if (sFormat != FORMAT_CSV && sFormat != FORMAT_XLS && sFormat != FORMAT_PPTX) {
				return false;
			}
			var that = this;

			function fnProcess(iLimit) {
				sFilename = sFilename || DEFAULT_PREFIX + "." + sFormat;
				var sMimeType, sCharset = "";
				switch (sFormat) {
					case FORMAT_CSV:
						sMimeType = MIME_TYPE_CSV;
						sCharset = CHARSET_UTF8;
						break;
					case FORMAT_XLS:
						sMimeType = MIME_TYPE_XLS;
						break;
					case FORMAT_PPTX:
						sMimeType = MIME_TYPE_PPTX;
						break;
					default:
						break;
				}
				that._readContent(oControl, sFormat, iLimit).done(function(oExportData) {
					var oConvertPromise = that._convertToFormat(oExportData, sFormat, sFilename, sAuthor, sPrefix);
					oConvertPromise.done(function(oFileContent) {
						if (that._oBrowser.name !== that._oBrowser.BROWSER.INTERNET_EXPLORER || sMimeType === MIME_TYPE_PPTX) {
							that._downloadContent(oFileContent, sFilename, sMimeType, sCharset);
							fnComplete();
						} else {
							that._showIEInstructionPopup(function() {
								that._saveContent(oFileContent, sFilename, sMimeType, sCharset);
								fnComplete();
							}, function() {
								fnComplete();
							}, sFormat);
						}
					});
					oConvertPromise.fail(function() {
						fnComplete();
					});
				}).fail(function() {
					fnComplete();
				});
			}

			var oBinding = this._getBinding(oControl);

			if (sFormat === FORMAT_PPTX && oBinding.sPath.indexOf("/Idea") !== 0) {
				//PPTX Export is available for Ideas only!
				return false;
			}

			var iMax = 0;
			switch (sFormat) {
				case FORMAT_CSV:
					iMax = RECORD_MAX_THRESHOLD_CSV;
					break;
				case FORMAT_XLS:
					iMax = RECORD_MAX_THRESHOLD_XLS;
					break;
				case FORMAT_PPTX:
					iMax = RECORD_MAX_THRESHOLD_PPTX;
					break;
				default:
					break;
			}
			var iCount;
			if (oBinding.bLengthFinal || oBinding.iTotalSize) {
				iCount = oBinding.iLength || oBinding.iTotalSize || iMax;
			} else {
				// this happens when no inline count is requested and only parts
				// have actually been loaded -> we request everything
				iCount = iMax;
			}

			if (iLimit > 0) {
				iCount = iLimit < iCount ? iLimit : iCount;
			}

			if (iCount > iMax) {
				this._showConfirmationPopupMax(function() {
					fnProcess(iMax);
				}, fnComplete, iCount, iMax);
			} else if (iCount >= RECORD_CONFIRM_THRESHOLD) {
				this._showConfirmationPopup(function() {
					fnProcess(iLimit);
				}, fnComplete, iCount, sFormat);
			} else {
				fnProcess(iLimit);
			}
			return true;
		},

		/**
		 * Export all data for current control bindings as file
		 *
		 * @param oControl
		 *            list/table control containing the binding definitions and formatters
		 * @param sFormat
		 *            format of the exported file (CSV or XLS)
		 * @param sPrefix
		 *            prefix e.g. for creating filename including current date and time
		 * @param oExportButton
		 *            export button that is disabled and set to busy during export
		 * @param sAuthor
		 *            author of the exported file
		 * @param iLimit
		 *            number of records, if not defined or <= 0 all records are returned
		 * @param fnCompleted
		 *            called when the export is completed
		 */
		exportAdvanced: function(oControl, sFormat, sPrefix, oExportButton, sAuthor, iLimit, fnCompleted) {
			var that = this;
			BusyIndicator.show(0);
			if (oExportButton) {
				oExportButton.setEnabled(false);
			}
			sPrefix = sPrefix ? this._getText(sPrefix) : DEFAULT_PREFIX;
			sPrefix = sPrefix.replace(new RegExp("[^a-zA-Z0-9 .-]"), "_");
			var sFilename = sPrefix;
			var oDateFormat = DateFormat.getDateTimeInstance({
				pattern: "dd-MM-yyyy_HH-mm"
			});
			sFilename += "_" + oDateFormat.format(new Date());
			sFilename += "." + sFormat;
			setTimeout(function() {
				if (!that.exportContent(oControl, sFormat, sFilename, function() {
					if (oExportButton) {
						oExportButton.setEnabled(true);
					}
					BusyIndicator.hide();
					if (fnCompleted) {
						fnCompleted();
					}
				}, sAuthor, sPrefix, iLimit)) {
					if (oExportButton) {
						oExportButton.setEnabled(true);
					}
					BusyIndicator.hide();
					if (fnCompleted) {
						fnCompleted();
					}
				}
			}, 0);
		},

		/**
		 * Export all data for current control bindings as file
		 *
		 * @param oControl
		 *            list/table control containing the binding definitions and formatters
		 * @param sPrefix
		 *            prefix e.g. for creating filename including current date and time
		 * @param oExportButton
		 *            export button that is disabled and set to busy during export
		 * @param sAuthor
		 *            author of the exported file
		 * @param fnCompleted
		 *            called when the export is completed
		 */
		exportChartAdvanced: function(oControl, sPrefix, oExportButton, fnCompleted) {
			var that = this;
			BusyIndicator.show(0);
			if (oExportButton) {
				oExportButton.setEnabled(false);
			}
			var oDateFormat = DateFormat.getDateTimeInstance({
				pattern: "dd-MM-yyyy_HH-mm"
			});
			var sFilename = sPrefix;
			sFilename += "_" + oDateFormat.format(new Date());
			sFilename += ".svg";
			setTimeout(function() {
				var sContent = oControl.exportToSVGString();
				if (that._oBrowser.name != that._oBrowser.BROWSER.INTERNET_EXPLORER) {
					that._downloadContent(sContent, sFilename, "image/svg+xml", "");
				} else {
					that._saveContent(sContent, sFilename, "image/svg+xml", "");
				}
				if (oExportButton) {
					oExportButton.setEnabled(true);
				}
				BusyIndicator.hide();
				if (fnCompleted) {
					fnCompleted();
				}
			}, 0);
		},

		exportAdvancedIdea: function(sFormat, oParam, oExportButton, fnTxt) {
			this._generateContent(sFormat, oParam, oExportButton, this._autoDownloadContent, fnTxt);
		},

		_generateContent: function(sFormat, oParam, oExportButton, fnCompleted, fnTxt) {
			var that = this;
			BusyIndicator.show(0);
			if (oExportButton) {
				oExportButton.setEnabled(false);
			}
			jQuery.ajax({
				url: Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/export_idea.xsjs",
				data: oParam
			}).always(function() {
				if (oExportButton) {
					oExportButton.setEnabled(true);
				}
				BusyIndicator.hide();
			}).done(function(res) {
				MessageToast.show(fnTxt(res.messageKey));
				//res.url = "http://ld8580.wdf.sap.corp:8008/sap/ino/xs/rest/common/attachment_download.xsjs/134115";
				fnCompleted.call(that, res.downloadUrl);
			}).fail(function(res) {
				MessageToast.show(fnTxt(res.responseJSON.messageKey));
			});
		},
		_autoDownloadContent: function(sUrl) {
			if (!sUrl) {
				return;
			}
			if (!/^http(s)?/.test(sUrl)) {
				sUrl = window.location.protocol + "//" + sUrl;
			}
			var downloadLink = jQuery("<a/>", {
				style: {
					display: "none"
				}
			});
			jQuery("body").append(downloadLink);
			if (this._oBrowser.name === this._oBrowser.BROWSER.SAFARI) {
				var oWindow = window.open(sUrl, "_blank");
				setTimeout(function() {
					oWindow.close();
				}, 250);
			} else {
				jQuery(downloadLink).attr("href", sUrl);
				downloadLink[0].click();
			}
		}
	};
});
}; // end of sap/ino/commons/util/Export.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.app.App.controller') ) {
jQuery.sap.declare('sap.ino.vc.app.App.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/app/App.controller",[
    "sap/ino/vc/commons/BaseController",
    "sap/m/MessageBox",
    "sap/ui/core/MessageType",
    "sap/ui/Device",
    "sap/ino/commons/application/Configuration"
], function(BaseController, MessageBox, MessageType, Device, Configuration) {
	"use strict";

	/**
	 * Constructor for the UI basis of the application.
	 *
	 * Holding the general setup. Setting up models etc.
	 *
	 * @class Holding the UI5 App responsible for navigation etc..
	 * @extends sap.ino.vc.commons.BaseController
	 * @version 1.3.0
	 *
	 * @constructor
	 * @public
	 * @name sap.ino.vc.app.App
	 */
	return BaseController.extend("sap.ino.vc.app.App", {

		_iBusyDelay: 1000,
		_mVisitedRoutes: {},

		onInit: function() {
			BaseController.prototype.onInit.apply(this, arguments);
			//attach close event to record user action for system message
			var oSystemMessage = this.byId("systemMessage");
			oSystemMessage.attachClose(function() {
				oSystemMessage.data("msgClosed", true);
				this.getParent().getController()._oComponent.getRootController().byId("innerShell").removeStyleClass("sapInoInnoMgmtMShellMsg");
			});
			if (Configuration.systemMessage()) {
				oSystemMessage.setText(Configuration.systemMessage());
			} else {
				//if the system message is not maintained, consider the message is closed
				oSystemMessage.data("msgClosed", true);
				oSystemMessage.setVisible(false);
			}
			//set module model 
			// 			var oModuleModel = this.getModuelModel();
			// 			this.getView().setModel(oModuleModel,"module");
		},

		getPages: function() {
			var oInnerShell = this.byId("innerShell");
			var oInnerApp = oInnerShell.getApp();
			return oInnerApp.getPages();
		},

		getCurrentPage: function() {
			var oInnerShell = this.byId("innerShell");
			var oInnerApp = oInnerShell.getApp();
			return oInnerApp.getCurrentPage();
		},

		onBypassed: function(oEvent) {
			this.showMessage(MessageType.ERROR, this.getModel("i18n").getResourceBundle().getText("NAVIGATION_EXP_UNKNOWN_TARGET"));
		},

		showMessage: function(eSeverity, sMessage, sTitle, onClose) {
			var oSeverity = this._getSeverity(eSeverity, sTitle);

			MessageBox.show(sMessage, {
				icon: oSeverity.icon,
				title: oSeverity.title,
				actions: [MessageBox.Action.OK],
				onClose: onClose ? onClose : undefined,
				styleClass: this.getDensityClass()
			});
		},

		showConfirmation: function(eSeverity, sMessage, sTitle, onClose) {
			var oSeverity = this._getSeverity(eSeverity, sTitle);

			MessageBox.confirm(sMessage, {
				icon: oSeverity.icon,
				title: oSeverity.title,
				actions: [MessageBox.Action.OK, MessageBox.Action.CANCEL],
				onClose: onClose ? onClose : undefined,
				styleClass: this.getDensityClass()
			});
		},

		showDataLossPopup: function(fnNavigate) {
			var that = this;
			var confirmNavigation = function(oAction) {
				if (oAction === MessageBox.Action.OK) {
					that.resetPendingChanges();
					fnNavigate();
				}
				// TODO the url patter was already updated
				/*
                else {
                    var oRouter = that.getOwnerComponent().getRouter();
                    oRouter.silentReverse();
                }
                */
				else {
				    //For cancel Operation
					var oView = that.getCurrentPage();
					if (oView) {
						var oController = oView.getController();
						if (oController.cancelOperationAction) {
							oController.cancelOperationAction();
						}
					}

				}
			};
			this.showConfirmation(MessageType.QUESTION, this.getText("COMMON_INS_DATALOSS"), this.getText("COMMON_TIT_DATALOSS"),
				confirmNavigation);
		},

		isNavigationAllowed: function() {
			var oView = this.getCurrentPage();
			if (oView) {
				var oController = oView.getController();
				if (oController.hasPendingChanges && oController.hasPendingChanges()) {
					return false;
				}
			}
			return true;
		},

		isCloseAllowed: function() {
			// To be called when a Browser Window/Tab is closed
			// The logic of this method is like this (this is defined by browser vendors)
			// If we return a value a popup when leaving the application is displayed.
			// The string we return is added to a default browser popup which cannot be
			// influenced by the application
			if (!this.isNavigationAllowed()) {
				return this.getText("COMMON_INS_DATALOSS");
			}
		},

		resetPendingChanges: function() {
			var oView = this.getCurrentPage();
			if (oView) {
				var oController = oView.getController();
				if (oController.resetPendingChanges) {
					oController.resetPendingChanges();
				}
			}
		},

		onBypassedNavigate: function() {
			var oBusyControl = this._oBusyElement || this.getView();

			oBusyControl.setBusy(false);
			oBusyControl.setBusyIndicatorDelay(this._iBusyDelay);
		},

		onAfterNavigate: function() {
			var oBusyControl = this._oBusyElement || this.getView();
			var that = this;
			// the transition takes some time, so delay the busy indicator removal
			setTimeout(function() {
				oBusyControl.setBusy(false);
				oBusyControl.setBusyIndicatorDelay(that._iBusyDelay);
			}, 500);
		},

		onBeforeNavigate: function(sRoute) {
			if (!this._oBusyElement) {
				if (this.getView().getDomRef()) {
					var $MainShell = jQuery(".sapInoInnoMgmtShell");
					if ($MainShell && $MainShell.length > 0) {
						// get the surrounding shell if we run as standalone application
						this._oBusyElement = sap.ui.getCore().getElementById($MainShell.attr("id") + "-container");
					}

					this._oBusyElement = this._oBusyElement || this.getView();
				}
				// else we are not yet rendered => try next time again
			}

			var oBusyControl = this._oBusyElement || this.getView();

			// set the indicator delay to 0 for the first navigation to each route
			// additional resources might need to be loaded (libs)
			// better would be the target, but we don't get this information
			if (!this._mVisitedRoutes[sRoute] && sRoute) {
				oBusyControl.setBusyIndicatorDelay(0);
				this._mVisitedRoutes[sRoute] = true;
			}
			oBusyControl.setBusy(true);

			var oCurrentPage = this.getCurrentPage();
			if (oCurrentPage && oCurrentPage.getController().onBeforeNavigateFrom) {
				oCurrentPage.getController().onBeforeNavigateFrom();
			}
		},

		onNavigate: function(oEvent) {
			var oFrom = oEvent.getParameter("from");
			var oFromController = oFrom.getController();
			if (oFromController.onNavigateFrom) {
				oFromController.onNavigateFrom(oEvent);
			}
			var oTo = oEvent.getParameter("to");
			var oToController = oTo.getController();
			if (oToController.onNavigateTo) {
				oToController.onNavigateTo(oEvent);
			}
		},

		_getSeverity: function(eSeverity, sTitle) {
			var oSeverity = {
				title: "",
				icon: undefined
			};
			switch (eSeverity) {
				case MessageType.ERROR:
					oSeverity.title = sTitle ? sTitle : this.getText("MESSAGE_TIT_ERROR");
					oSeverity.icon = MessageBox.Icon.ERROR;
					break;
				case MessageType.INFORMATION:
					oSeverity.title = sTitle ? sTitle : this.getText("MESSAGE_TIT_INFORMATION");
					oSeverity.icon = MessageBox.Icon.INFORMATION;
					break;
				case MessageType.SUCCESS:
					oSeverity.title = sTitle ? sTitle : this.getText("MESSAGE_TIT_SUCCESS");
					oSeverity.icon = MessageBox.Icon.SUCCESS;
					break;
				case MessageType.QUESTION:
					oSeverity.title = sTitle ? sTitle : this.getText("MESSAGE_TIT_QUESTION");
					oSeverity.icon = MessageBox.Icon.QUESTION;
					break;
				case MessageType.WARNING:
					oSeverity.title = sTitle ? sTitle : this.getText("MESSAGE_TIT_WARNING");
					oSeverity.icon = MessageBox.Icon.WARNING;
					break;
				default:
					oSeverity.title = sTitle ? sTitle : this.getText("MESSAGE_TIT_NONE");
					oSeverity.icon = MessageBox.Icon.NONE;
					break;
			}
			return oSeverity;
		},

		openHelpScreen: function(sTextId) {
			var oComponent = this.getOwnerComponent();
			if (!this._oHelp) {
				this._oHelp = new sap.ui.core.mvc.XMLView({
					viewName: "sap.ino.vc.app.Help"
				});
				this._oHelp.setModel(oComponent.getModel("i18n"), "i18n");
				this._oHelp.setModel(oComponent.getModel("device"), "device");
			}
			this._oHelp.setModel(oComponent.getModel("help"), "help");
			this._oHelp.getController().show(sTextId ? this.getModel("i18n").getResourceBundle().getText(sTextId) : undefined);
		}
	});
});
}; // end of sap/ino/vc/app/App.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.app.Help.controller') ) {
jQuery.sap.declare('sap.ino.vc.app.Help.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.ResponsivePopover'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.HTML'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/app/Help.controller",[
    "sap/ino/vc/commons/BaseController",
    "sap/m/Text",
    "sap/m/ResponsivePopover",
    "sap/ui/core/HTML"
], function (Controller, Text, ResponsivePopover, HTML) {
    "use strict";
    return Controller.extend("sap.ino.vc.app.Help", {
        onInit: function () {
            Controller.prototype.onInit.apply(this, arguments);

            this._oDialog = this.byId("helpDialog");
            this._oDraggableDialog = this.byId("helpDraggableDialog");
            
            this._oDialog.setInitialFocus(this.getView().sId + "--helpClose");
            this._oDraggableDialog.setInitialFocus(this.getView().sId + "--helpDraggableClose");
            
            // dialog is not modal
            this._oDraggableDialog.oPopup.setModal(false);
            this._oDraggableDialog.oPopup.setShadow(false);
            // do not cycle dialog
            this._oDraggableDialog.onfocusin = function() {};
        },
        
        show : function(sHTML) {
            var that = this;
            jQuery("#content").addClass("sapInoBlur");
            this._$BeforeFocus = jQuery(":focus");
            this._oDialog.open();
            
            this._sContent = sHTML || that.getModel("help").getProperty("/CONTENT");

            setTimeout(function() {
                // HTML Control has problems w/ updating the binding therefore we set it directly
                var $Containers = that._oDialog.$().find(".sapInoHelpContentContainer");
                jQuery.each($Containers, function(iIdx, $Container) {
                    var oContainer = sap.ui.getCore().getElementById($Container.id);
                    oContainer.removeAllContent();
                    oContainer.addContent(new HTML({ content : "<p>" + that._sContent + "</p>"}));
                    oContainer.rerender();
                });
            }, 0);
        },
        
        onClose : function() {
            jQuery("#content").removeClass("sapInoBlur");
        	this._oDialog.close();            
        },
        
        onAfterClose : function() {
            jQuery("#content").removeClass("sapInoBlur");
            if (!this._bNoFocusAfterClose && this._$BeforeFocus) {
                this._$BeforeFocus.focus();
            }
            
            this._bNoFocusAfterClose = false;
        },
        
        onDraggableAfterClose : function() {
            if (this._$BeforeFocus) {
                this._$BeforeFocus.focus();
            }
        },
        
        onDraggableDialogOpen : function() {
            var that = this;
            
            jQuery("#content").removeClass("sapInoBlur");
            this._bNoFocusAfterClose = true;
            this._oDialog.close();         
        	this._oDraggableDialog.open();
        	
            setTimeout(function() {
                // HTML Control has problems w/ updating the binding therefore we set it directly
                var $Containers = that._oDraggableDialog.$().find(".sapInoHelpContentContainer");
                jQuery.each($Containers, function(iIdx, $Container) {
                    var oContainer = sap.ui.getCore().getElementById($Container.id);
                    oContainer.removeAllContent();
                    oContainer.addContent(new HTML({ content : "<p>" + that._sContent + "</p>"}));
                    oContainer.rerender();
                });
            }, 0);
        },
        
        onDraggableClose : function() {
            this._oDraggableDialog.close();            
        }
   });
});
}; // end of sap/ino/vc/app/Help.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.blog.mixins.DeleteActionMixin') ) {
jQuery.sap.declare('sap.ino.vc.blog.mixins.DeleteActionMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/blog/mixins/DeleteActionMixin",[
    "sap/ino/vc/commons/BaseController",
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/models/object/Blog",
    "sap/ino/commons/models/aof/PropertyModel",
    "sap/m/MessageToast"
], function(BaseController, JSONModel, Blog, PropertyModel, MessageToast) {
    "use strict";

    /**
     * Mixin that handles blog deletion in lists
     * @mixin
     */
    var DeleteActionMixin = function() {
        throw "Mixin may not be instantiated directly";
    };
    
    DeleteActionMixin.onDeleteBlog = function (oEvent) {
        var oSource = oEvent.getSource();
        var iBlogId = oSource.getBindingContext("data").getProperty("ID");
        var oSettings = { nodes: [], actions : ["del"] };
        var that = this;

        var fnDelete = function (oPropertyEvent) {
            var oPropModel = oPropertyEvent.getSource();
            var bDeleteAllowed = oPropModel.getProperty("/actions/del/enabled");
            if (!bDeleteAllowed) {
                MessageToast.show(that.getText("OBJECT_MSG_DELETE_FAILED"));
            } else {
                var oDelRequest = BaseController.prototype.executeObjectAction.call(that, Blog, "del", { 
                staticparameters: iBlogId,
                messages : {
                    confirm : "MSG_DEL_CONFIRM",
                    success : "MSG_DEL_SUCCESS"
                }});
                oDelRequest.done(function(oResponse){
                    if(oResponse && oResponse.confirmationCancelled === true){
                        if (oSource && jQuery.type(oSource.focus) === "function") {
                            oSource.focus();
                        }
                        return;
                    }
                    if (that.bindList && typeof(that.bindList) === "function") {
                        // context: idea list (campaign / all)
                        that.bindList();
                    } else if (that._bindBlogs && typeof(that._bindBlogs) === "function" && that._sBlogViewKey) {
                        // context: campaign and normal homepage
                        that._bindBlogs(that._sBlogViewKey);
                    }
                });
            }
        };
        
        var oProp = new PropertyModel("sap.ino.xs.object.blog.Blog", iBlogId, oSettings, false, fnDelete);
    };

   
    return DeleteActionMixin;
});
}; // end of sap/ino/vc/blog/mixins/DeleteActionMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.blog.mixins.PublishActionMixin') ) {
jQuery.sap.declare('sap.ino.vc.blog.mixins.PublishActionMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/blog/mixins/PublishActionMixin",[
    "sap/ino/vc/commons/BaseController",
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/models/object/Blog",
    "sap/ino/commons/models/aof/PropertyModel",
    "sap/m/MessageToast"
], function(BaseController, JSONModel, Blog, PropertyModel, MessageToast) {
    "use strict";

    /**
     * Mixin that handles blog deletion in lists
     * @mixin
     */
    var PublishActionMixin = function() {
        throw "Mixin may not be instantiated directly";
    };
    
    PublishActionMixin.onPublishBlog = function (oEvent) {
        var oSource = oEvent.getSource();
        var iBlogId = oSource.getBindingContext("data").getProperty("ID");
        var oSettings = { nodes: [], actions : ["publishSubmit"] };
        var that = this;

        var fnPublish = function (oPropertyEvent) {
            var oPropModel = oPropertyEvent.getSource();
            var bPublishAllowed = oPropModel.getProperty("/actions/publish/enabled");
            if (!bPublishAllowed) {
                MessageToast.show(that.getText("OBJECT_MSG_PUBLISH_FAILED"));
            } else {
                var oPublishRequest = BaseController.prototype.executeObjectAction.call(that, Blog, "publish", { 
                staticparameters: iBlogId,
                messages : {
                    confirm : "MSG_PUBLISH_CONFIRM",
                    success : "MSG_PUBLISH_SUCCESS"
                }});
                oPublishRequest.done(function(oResponse){
                    if(oResponse && oResponse.confirmationCancelled === true){
                        if (oSource && jQuery.type(oSource.focus) === "function") {
                            oSource.focus();
                        }
                        return;
                    }
                    if (that.bindList && typeof(that.bindList) === "function") {
                        // context: idea list (campaign / all)
                        that.bindList();
                    } else if (that._bindBlogs && typeof(that._bindBlogs) === "function" && that._sBlogViewKey) {
                        // context: campaign and normal homepage
                        that._bindBlogs(that._sBlogViewKey);
                    }
                });
            }
        };
        
        var oProp = new PropertyModel("sap.ino.xs.object.blog.Blog", iBlogId, oSettings, false, fnPublish);
    };

   
    return PublishActionMixin;
});
}; // end of sap/ino/vc/blog/mixins/PublishActionMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.blog.mixins.UnPublishActionMixin') ) {
jQuery.sap.declare('sap.ino.vc.blog.mixins.UnPublishActionMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/blog/mixins/UnPublishActionMixin",[
    "sap/ino/vc/commons/BaseController",
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/models/object/Blog",
    "sap/ino/commons/models/aof/PropertyModel",
    "sap/m/MessageToast"
], function(BaseController, JSONModel, Blog, PropertyModel, MessageToast) {
    "use strict";

    /**
     * Mixin that handles blog deletion in lists
     * @mixin
     */
    var UnPublishActionMixin = function() {
        throw "Mixin may not be instantiated directly";
    };
    
    UnPublishActionMixin.onUnPublishBlog = function (oEvent) {
        var oSource = oEvent.getSource();
        var iBlogId = oSource.getBindingContext("data").getProperty("ID");
        var oSettings = { nodes: [], actions : ["unpublish"] };
        var that = this;

        var fnUnPublish = function (oPropertyEvent) {
            var oPropModel = oPropertyEvent.getSource();
            var bUnPublishAllowed = oPropModel.getProperty("/actions/unpublish/enabled");
            if (!bUnPublishAllowed) {
                MessageToast.show(that.getText("OBJECT_MSG_UnPublish_FAILED"));
            } else {
                var oUnPublishRequest = BaseController.prototype.executeObjectAction.call(that, Blog, "unpublish", { 
                staticparameters: iBlogId,
                messages : {
                    confirm : "MSG_UNPUBLISH_CONFIRM",
                    success : "MSG_UNPUBLISH_SUCCESS"
                }});
                oUnPublishRequest.done(function(oResponse){
                    if(oResponse && oResponse.confirmationCancelled === true){
                        if (oSource && jQuery.type(oSource.focus) === "function") {
                            oSource.focus();
                        }
                        return;
                    }
                    if (that.bindList && typeof(that.bindList) === "function") {
                        // context: idea list (campaign / all)
                        that.bindList();
                    } else if (that._bindBlogs && typeof(that._bindBlogs) === "function" && that._sBlogViewKey) {
                        // context: campaign and normal homepage
                        that._bindBlogs(that._sBlogViewKey);
                    }
                });
            }
        };
        
        var oProp = new PropertyModel("sap.ino.xs.object.blog.Blog", iBlogId, oSettings, false, fnUnPublish);
    };

   
    return UnPublishActionMixin;
});
}; // end of sap/ino/vc/blog/mixins/UnPublishActionMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.campaign.Homepage.controller') ) {
jQuery.sap.declare('sap.ino.vc.campaign.Homepage.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/campaign/Homepage.controller",[
    "sap/ino/vc/commons/BaseHomepageController",
    "sap/ino/vc/commons/TopLevelPageFacet",
    "sap/ino/commons/application/Configuration",
    "sap/ino/commons/application/WebAnalytics",
    "sap/ino/commons/models/aof/PropertyModel",
    "sap/ui/model/json/JSONModel",
    "sap/ino/vc/campaign/mixins/CampaignInstanceRolesMixin"
], function(BaseController, TopLevelPageFacet, Configuration, WebAnalytics, PropertyModel, JSONModel, CampaignInstanceRolesMixin) {
	"use strict";

	return BaseController.extend("sap.ino.vc.campaign.Homepage", jQuery.extend({}, CampaignInstanceRolesMixin, TopLevelPageFacet, {
		routes: ["campaign"],

		// use the provided base controller function
		onRouteMatched: function(oEvent) {
			var oArgs = oEvent.getParameter("arguments");
			this.iCampaignId = parseInt(oArgs.id, 0);

			if (this.iCampaignId > 0) {
				WebAnalytics.logCampaignView(this.iCampaignId);
			   var sURL = Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/update_object_view_count.xsjs";
		       var oBody = {OBJECT_TYPE:"CAMPAIGN",OBJECT_ID:this.iCampaignId,USER_NAME:Configuration.getCurrentUser().USER_NAME};
		       var oAjaxPromise = jQuery.ajax({
            			url: sURL,
            			headers: {
            				"X-CSRF-Token": Configuration.getXSRFToken()
            			},
            			data:  JSON.stringify(oBody),
            			dataType:"json",
            			type: "POST",
            			contentType: "application/json; charset=UTF-8",
            			async: true
            		});				
            		oAjaxPromise.done();
				
			}

			BaseController.prototype.onRouteMatched.apply(this, arguments);
			this.setHelp("CAMPAIGN_DISPLAY", "CAMPAIGN_DISPLAY_ADDITIONAL");
			
		},

		onBeforeDisplayViewShow: function() {
			var oView = this.getView();
			if (oView.getBindingContext("data")) {
				var iImageId = oView.getBindingContext("data").getProperty("CAMPAIGN_BACKGROUND_IMAGE_ID");
				var iSmallImageId = oView.getBindingContext("data").getProperty("CAMPAIGN_SMALL_BACKGROUND_IMAGE_ID");

				this.updateBackgroundColor(oView.getBindingContext("data").getProperty("COLOR_CODE"));
				this.setBackgroundImages(iImageId, iSmallImageId);
			}
		},

		getDisplayView: function(iId) {
			var sDisplayView;
			var bShowBackoffice = this.getModel("component").getProperty("/SHOW_BACKOFFICE");
			var bHasBackofficePrivilege = Configuration.hasCurrentUserPrivilege("sap.ino.ui::backoffice.access");
			var bRegistrationPrivilege = this.getModel("component").getProperty("/REGISTRABLE");
			var bCommunityPrivilege = this.getModel("component").getProperty("/COMMUNITY");

			if (!bHasBackofficePrivilege) {
				// Only determine campaign individual backoffice privileges when the static privilege is there
				// otherwise this is done for *all* users and will cause 403 HTTP responses
				bShowBackoffice = false;
				// set a dummy model so that bindings still work
				this.setModel(new JSONModel({}), "property");
			} else {
				//add for individual campaign privilege check, if iID is undefined, this function is triggered by toggle button
				if (iId) {
					var oCampaignProperty = new PropertyModel("sap.ino.xs.object.campaign.Campaign", iId, {
						nodes: ["Root"]
					}, true);
					this.setModel(oCampaignProperty, "property");
					var bCampaignPrivilege = oCampaignProperty.getProperty("/nodes/Root/customProperties/backofficeCampaignPrivilege");
					bShowBackoffice = bShowBackoffice && bCampaignPrivilege;
				}
			}
			this.getCampaignInstanceRolesData(iId);
			if (bShowBackoffice) {
				sDisplayView = "sap.ino.vc.campaign.BackOfficeHome";
			} else if (bCommunityPrivilege) {
				sDisplayView = "sap.ino.vc.campaign.CommunityHome";
			} else if (bRegistrationPrivilege) {
				sDisplayView = "sap.ino.vc.campaign.RegistrationHome";
			} else {
				sDisplayView = "sap.ino.vc.campaign.CommunityHome";
			}

			return sDisplayView;
		},

		hasBackgroundImage: function() {
			return true;
		},

		getLayoutPrefix: function() {
			return "sapInoCampaignHomepage";
		},

		getODataEntitySet: function() {
			return "CampaignFull";
		},

		// use the provided base controller function
		onBeforeHide: function() {
			BaseController.prototype.onBeforeHide.apply(this, arguments);
		},

		openCampaignSettings: function(iCampaignId) {
			this.navigateToByURLInNewWindow(Configuration.getCampaignSettingsURL(iCampaignId));
		}
	}));
});
}; // end of sap/ino/vc/campaign/Homepage.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.campaign.mixins.MilestoneMixin') ) {
jQuery.sap.declare('sap.ino.vc.campaign.mixins.MilestoneMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/campaign/mixins/MilestoneMixin",[
    "sap/ino/vc/commons/BaseController",
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/models/aof/PropertyModel",
    "sap/ino/commons/application/Configuration",
    "sap/ino/controls/Milestone",
    "sap/ui/core/ResizeHandler"
], function(BaseController, JSONModel, PropertyModel, Configuration, Milestone, ResizeHandler) {
	"use strict";

	var milestoneMixin = function() {
		throw "Mixin may not be instantiated directly";
	};

	milestoneMixin.bindResize = function() {
		var self = this;
		this._sResizeRegId = ResizeHandler.register(this.getView(), function() {
			return self._onResize(self);
		});
	};

	milestoneMixin._onResize = function() {
		this.buildMilestone();
	};

	milestoneMixin.bindMilestone = function(iCampaignId) {
		var self = this;
		var sPath = Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/campaign_task_milestone.xsjs";
		var aParameter = [];
		if (iCampaignId) {
			aParameter.push("CAMPAIGN_ID=" + iCampaignId);
		}

		if (aParameter.length > 0) {
			sPath = sPath + "?" + aParameter.join("&");
		}

        this.destroyMilestone();

		var milestoneModel = new JSONModel(sPath);
		this.getView().setModel(milestoneModel, "milestoneTask");
		milestoneModel.attachRequestCompleted(null, function() {
			var oData = milestoneModel.getData();
			self.renderData(oData);
			self.buildMilestone();
		}, milestoneModel);
	};

	milestoneMixin.renderData = function(data) {
		if (!data) {
			return false;
		}
		if (!data.Tasks || !data.Tasks.results || !data.Tasks.results.length) {
			return false;
		}
		var self = this;
		var tasks = data.Tasks.results;
		var attachmentLabel = self.getText("MILESTONE_ATTACHMENT_DOWNLOAD");
		for (var i = 0; i < tasks.length; i++) {
			tasks[i].Milestones = tasks[i].Milestones.results;
			tasks[i].END_DATE = new Date(tasks[i].END_DATE);
			tasks[i].START_DATE = new Date(tasks[i].START_DATE);
			if (!tasks[i].Milestones || !tasks[i].Milestones.length) {
				continue;
			}
			for (var x = 0; x < tasks[i].Milestones.length; x++) {
			    tasks[i].Milestones[x].MILESTONE_DATE = new Date(tasks[i].Milestones[x].MILESTONE_DATE);
				tasks[i].Milestones[x].Attachment = tasks[i].Milestones[x].Attachment.results;
				if (!tasks[i].Milestones[x].Attachment || !tasks[i].Milestones[x].Attachment.length) {
					continue;
				}
				for (var j = 0; j < tasks[i].Milestones[x].Attachment.length; j++) {
					tasks[i].Milestones[x].Attachment[j].LABEL = attachmentLabel;
					tasks[i].Milestones[x].Attachment[j].ATTACHMENT_URL = Configuration.getAttachmentDownloadURL(tasks[i].Milestones[x].Attachment[j].ATTACHMENT_ID);
				}
			}
		}
		this.tasks = tasks;
	};

	milestoneMixin.buildMilestone = function() {
		
		if (!this.tasks || !this.tasks.length) {
			return false;
		}
		var aTasks = this.tasks;
		
		for(var i = 0; i < aTasks.length; i++){
		 
		 var iStartUtcTime = aTasks[i].START_DATE.getTime() + aTasks[i].START_DATE.getTimezoneOffset() * 60 * 1000;
		 aTasks[i].START_DATE = new Date(iStartUtcTime);
		 var iEndUtcTime = aTasks[i].END_DATE.getTime() + aTasks[i].END_DATE.getTimezoneOffset() * 60 * 1000;
		 aTasks[i].END_DATE = new Date(iEndUtcTime);
		}
		var view = this.getView();
		var milestoneElement = view.byId('milestoneContainer');
		milestoneElement.destroyItems();
		
		milestoneElement.addItem(new sap.ino.controls.Milestone({
			tasks: this.tasks,
			visible: true
		}));
		if(!this._sResizeRegId){
		this.bindResize();		    
		}

	};
	
	milestoneMixin.destroyMilestone = function(){
	    var view = this.getView();
    	var milestoneElement = view.byId('milestoneContainer');
    	milestoneElement.destroyItems();
    	this.tasks = [];
	};
	
	return milestoneMixin;
});
}; // end of sap/ino/vc/campaign/mixins/MilestoneMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.commons.BaseBlockController') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.vc.commons.BaseBlockController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.uxap.BlockBase'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/commons/BaseBlockController",[
    "./BaseController",
    "sap/uxap/BlockBase"
], function(BaseController, BlockBase) {

    /*
     * we overwrite method createView of the BlockBase object to propagate the component
     * down to the sub-views of ObjectPageLayout. 
     * This code fixes the bug with the getOwnerComponent() on the subviews
     */
    // BlockBase.prototype.createView = function(oViewData) {
    //     var oView;
    //     sap.ui.getCore().getComponent(this._sOwnerId).runAsOwner(function () {
    //         oView = sap.ui.view(oViewData);
    //     });
    //     return oView;
    // };

    /**
     * Base Block Controller is to use for the views under ObjectPageLayout
     * which shall be lazy-loaded. 
     */
    return BaseController.extend("sap.ino.vc.commons.BaseBlockController", {
        /* returns a view with redefined method data().
        for views within OPL blocks, data() shall read custom data from its parent,
        e.g. from <uxap:CommentBlock>
        */
        getBlockView: function() {
            var oView = BaseController.prototype.getView.apply(this, arguments);
            if (oView.getParent() && oView.getParent().getMetadata().getParent() && 
                oView.getParent().getMetadata().getParent().getName() === "sap.uxap.BlockBase") {
                oView.data = function() {
                    var oParent = oView.getParent();
                    return oParent.data.apply(oParent, arguments);
                };
            }
            return oView;
        }
    });
});

}; // end of sap/ino/vc/commons/BaseBlockController.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.commons.BaseObjectController') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.vc.commons.BaseObjectController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/commons/BaseObjectController",[
    "./BaseBlockController",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ino/commons/formatters/ObjectFormatter",
    "./mixins/IdentityQuickviewMixin",
    "./mixins/ClipboardMixin",
    "./mixins/IdentityCardSendMailMixin",
    "sap/ui/core/MessageType"
], function(BaseController,
	JSONModel,
	MessageToast,
	ObjectFormatter,
	IdentityQuickviewMixin,
	ClipboardMixin,
	IdentityCardSendMailMixin,
	MessageType) {

	/**
	 * Base Controller to use when dealing with single object instances
	 * To use it instantiate the application object instance and set it with setObjectModel
	 *
	 */

	return BaseController.extend("sap.ino.vc.commons.BaseObjectController", jQuery.extend({},
		IdentityQuickviewMixin, ClipboardMixin, IdentityCardSendMailMixin, {

			formatter: ObjectFormatter,

			onInit: function() {
				BaseController.prototype.onInit.apply(this, arguments);
			},

			onExit: function() {
				if (BaseController.prototype.onExit) {
					BaseController.prototype.onExit.apply(this, arguments);
				}
				this.releaseObjectModel();
			},

			/**
			 * Sets an object to as current object model, it will be set on view level
			 * and bind it in the view
			 *
			 * Afterwards you can use it on the view using the name "object"
			 *
			 * @param oModel
			 * @param bSuppressBGImage indicating that BG Image is not affected.
			 */
			setObjectModel: function(oModel) {
				if (oModel !== this.getView().getModel("object") && this.hasOwnModel("object")) {
					this.releaseObjectModel();
				} else {
					// When using the same model instance
					// we set it to null. So we ensure that all the
					// binding states are reset to initial (instead of dirty)
					// from prior type validations
					this.getView().setModel(null, "object");
				}

				this.getView().setModel(oModel, "object");
				this.getView().bindElement({
					path: "object>/"
				});
			},

			releaseObjectModel: function() {
				var oOldObjectModel = this.getView().getModel("object");
				if (oOldObjectModel) {
					oOldObjectModel.releaseFromSyncMode();
					oOldObjectModel.destroy();
				}
			},

			/**
			 * @abstract
			 * @returns new application object model
			 */
			createObjectModel: function(vObjectKey, sRoute, oRouteArgs) {},

			/**
			 * @returns current object
			 */
			getObjectModel: function() {
				var oObjectModel = this.getView().getModel("object");
				if (oObjectModel && oObjectModel.isDeleted()) {
					this.setObjectExists(false);
					this.setObjectModel(undefined);
					return undefined;
				}
				return oObjectModel;
			},

			/**
			 * Method to check if there are pending changes to write to the backend
			 *
			 * @returns true/false if the belonging object model has pending changes
			 */
			hasPendingChanges: function() {
				return false;
			},

			/**
			 * Method to reset the changes if there are pending changes
			 *
			 */
			resetPendingChanges: function() {
				var oModel = this.getObjectModel();
				if (oModel && oModel.hasPendingChanges()) {
					oModel.revertChanges();
				}
			},

			/**
			 * Method to check if a given Model matches to the object model of this controller and therefore could be used also
			 * @param oModel Model to check
			 * @returns true/false if the belonging object model matches
			 */
			doModelsMatch: function(oModel) {
				if (!oModel) {
					return false;
				}
				var oOwnModel = this.getObjectModel();
				if (!oOwnModel) {
					return false;
				}

				if (oModel.getObjectName() === oOwnModel.getObjectName() && oModel.getKey() === oOwnModel.getKey()) {
					return true;
				}

				return false;
			},

			/**
			 * @abstract
			 * @returns name of OData entity
			 */
			getODataEntitySet: function() {
				// can be redefined if OData Model is needed;
				return null;
			},

			/**
			 * Binds view to object instance of oData model
			 * Afterwards you can bind on the view with the named model "data"
			 * @param iId : Integer
			 */
			bindDefaultODataModel: function(iId, fnCallback) {
				var that = this;

				var sEntitySet = this.getODataEntitySet();
				if (sEntitySet && iId > 0) {
					this.getView().bindElement({
						path: "data>/" + sEntitySet + "(" + iId + ")",
						events: {
							dataRequested: function() {
								jQuery.each(that.getBusyControls(), function(iIdx, oControl) {
									if (jQuery.type(oControl.setBusy) === "function") {
										oControl.setBusy(true);
									}
								});
							},
							dataReceived: function(oEvent) {
								jQuery.each(that.getBusyControls(), function(iIdx, oControl) {
									if (jQuery.type(oControl.setBusy) === "function") {
										oControl.setBusy(false);
									}
								});

								if (oEvent.getParameter("data") === undefined) {
									// error happened when reading the object
									that.setObjectExists(false);
								} else {
									that.setObjectExists(true);
								}

								if (typeof fnCallback === "function") {
									fnCallback.apply(that);
								}
							},
							change: function() {
								// "dataReceived" might be called too late for not found objects
								// So we it whether an object exists by checking if the model has data
								// with the given path
								var bObjectExists = this.getModel().getProperty(this.getPath()) !== undefined;
								that.setObjectExists(bObjectExists);
							}
						}
					});

					// if no request is needed, immediately trigger the callback
					if (typeof fnCallback === "function") {
						var oContext = this.getView().getBindingContext("data");
						if (oContext && oContext.getPath() === ("/" + sEntitySet + "(" + iId + ")")) {
							fnCallback.apply(that);
						}
					}
				}
			},

			getDefaultODataModelEntity: function(iId) {
				return this.getModel("data").getProperty("/" + this.getODataEntitySet() + "(" + iId + ")");
			},

			onRouteMatched: function(oEvent) {
				var that = this;
				var sRoute = oEvent.getParameter("name");
				var oRouteArgs = oEvent.getParameter("arguments");
				var iObjectKey;
				try {
					iObjectKey = parseInt(oRouteArgs.id, 10);
				} catch (oError) {
					return;
				}

				var oObject = this.getObjectModel();
				if (!oObject || oObject.getKey() !== iObjectKey) {
					oObject = this.createObjectModel(iObjectKey, sRoute, oRouteArgs);
					this.setObjectModel(oObject);
					oObject.getDataInitializedPromise().fail(function() {
						that.setObjectExists(false);
						if (that.preCheck) {
							that.checkObjectExists(oObject.getObjectName(), oObject.getKey() || oObject.getInitKey());
						}
					});
					oObject.getDataInitializedPromise().done(function() {
						that.setObjectExists(true);
					});
				}

				this.bindDefaultODataModel(iObjectKey);
				var oQuery = oRouteArgs["?query"];
				var sSection = (oQuery && oQuery.section) || "sectionDetails";
				this.showSection(sSection);
			},

			onTabSelect: function(oEvent) {
				var oSection = oEvent.getParameter("section");
				this.navigateTo(this.getCurrentRoute(), {
					id: this.getObjectModel().getKey(),
					query: {
						section: this.getLocalElementId(oSection)
					}
				}, true /*no history*/ );
			},

			showSection: function(sLocalSectionId, sObjectPageLayoutId) {
				var that = this;
				var oLayout = this.byId(sObjectPageLayoutId ? sObjectPageLayoutId : "objectpage");
				if (!oLayout) {
					return;
				}

				var oSection = this.byId(sLocalSectionId);
				if (!oSection) {
					return;
				}

				var sSectionId = oSection.getId();

				oLayout.addEventDelegate({
					onAfterRendering: jQuery.proxy(function() {
						//need to wait for the scrollEnablement to be active
						jQuery.sap.delayedCall(500, oLayout, oLayout.scrollToSection, [sSectionId]);
					}, that)
				});

				var fnScrollToSection = function() {
					oLayout.scrollToSection(sSectionId);
					var oBar = oLayout.getAggregation("_anchorBar");
					// wait for anchorbar to be ready for scroll
					jQuery.sap.delayedCall(500, this, function() {
						oBar.scrollToSection(sSectionId);
					});
					that.setViewProperty("/objectPageSection", sLocalSectionId);
				};

				var oLayoutReady = jQuery.Deferred();
				oLayoutReady.done(fnScrollToSection);

				// Checking _bDomReady is unfortunately the only chance to find out
				// whether scroll to section will already work
				// The object page layout waits internally at least 350 ms after
				// you can really use it.
				if (oLayout._bDomReady === true) {
					oLayoutReady.resolve();
				} else {
					var fnCheckReady = function() {
						if (oLayout._bDomReady === true) {
							oLayoutReady.resolve();
						} else {
							jQuery.sap.delayedCall(500, this, fnCheckReady);
						}
					};
					jQuery.sap.delayedCall(500, this, fnCheckReady);
				}
			},

			onShowMessages: function(oEvent) {
				this.byId("messagePopover").openBy(oEvent.getSource());
			},

			/**
			 * Executes an action on the current object
			 * @public
			 * @param sActionName
			 * @param {object}  (oOptions)    object with additional options (keys "messages", "objectModelExt", "parameters")
			 *      messages : optional object for messages {
			 *          confirm : text key or function for confirmation messages
			 *          success : text key or function for success messages
			 *          error: text key or function for error messages
			 *      }
			 *      objectModelExt: optional object model when different from getObjectObject
			 *      parameters: optional additional parameters in an JS object to be handed over to backend
			 * @returns Promise
			 *      In case a confirmation is requested success is indicated also when cancel is pressed.
			 *      The response object contains an attribute "confirmationCancelled" when cancellation
			 *      has been pressed
			 */
			executeObjectAction: function(sActionName, oOptions) {
				var oObjectModel = (oOptions && oOptions.objectModelExt) || this.getObjectModel();

				if (oObjectModel instanceof sap.ino.commons.models.object.Idea && oObjectModel.getProperty("/STATUS_CODE") ===
					"sap.ino.config.DRAFT" && ((sActionName === "modify" && oObjectModel.getProperty("/NAME")) || sActionName === "del")) {
					this.enforceInputTypeValidations();
					this.resetInputTypeValidations(this.getView());
				} else if (this.hasAnyClientErrorMessages()) {
					var oDeferred = new jQuery.Deferred();
					if (oObjectModel instanceof sap.ino.commons.models.object.Idea) {
						var aErrorMessages = this.getErrorClientMessages(this.getOwnerComponent().getModel("message").getData());
						var sErrorText = this.getText("MSG_SAVE_USER_ERROR");
						if (aErrorMessages.length > 0) {
							sErrorText = aErrorMessages[0].message;
						}
						MessageToast.show(sErrorText);
					} else {
						MessageToast.show(this.getText("MSG_SAVE_USER_ERROR"));
					}
					oDeferred.reject();
					return oDeferred.promise();
				}
				return BaseController.prototype.executeObjectAction.call(this, oObjectModel, sActionName, oOptions);
			},
			executeObjectActionPrototypeDirectly: function(sActionName, oOptions) {
				var oObjectModel = (oOptions && oOptions.objectModelExt) || this.getObjectModel();
				return BaseController.prototype.executeObjectAction.call(this, oObjectModel, sActionName, oOptions);
			},			
			getErrorClientMessages: function(aMessages) {

				if (this._previousClientMessages && this._previousClientMessages.length > 0) {
					return this._previousClientMessages;
				}
				var aErrorMesages = aMessages.filter(function(oMessage) {
					return oMessage.processor.getMetadata().getName() === "sap.ui.core.message.ControlMessageProcessor" && oMessage.type ===
						MessageType.Error;
				});
				return aErrorMesages;
			}

		}));
});
}; // end of sap/ino/vc/commons/BaseObjectController.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.commons.BaseObjectModifyController') ) {
jQuery.sap.declare('sap.ino.vc.commons.BaseObjectModifyController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ListItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.Token'); // unlisted dependency retained
jQuery.sap.require('sap.m.Tokenizer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/commons/BaseObjectModifyController",[
    "./BaseObjectController",
    "sap/ui/Device",
    "sap/ui/core/ListItem",
    "sap/m/Token",
    "sap/m/Tokenizer",
    "sap/ui/core/MessageType"
], function(BaseController,
	Device,
	ListItem,
	Token,
	Tokenizer,
	MessageType) {
	"use strict";

	/**
	 * Base Controller to use when editing single object instances
	 * To use it instantiate the application object instance and set it with setObjectModel
	 */
	return BaseController.extend("sap.ino.vc.commons.BaseObjectModifyController", {

		onInit: function() {
			BaseController.prototype.onInit.apply(this, arguments);
		},

		onRouteMatched: function(oEvent) {
			var that = this;
			var sRoute = oEvent.getParameter("name");
			var oRouteArgs = oEvent.getParameter("arguments");

			var oView = this.getView();

			this.setObjectExists(true);
			oView.setBusy(true);

			this.resetInputTypeValidations();

			var iObjectKey;
			// implicit logic: when id argument is missing this means object creation
			if (oRouteArgs.id) {
				try {
					iObjectKey = parseInt(oRouteArgs.id, 10);
				} catch (oError) {
					jQuery.sap.log.error("Failed parsing key argument", oError, "sap.ino.vc.commons.BaseObjectModify.controller");
					return;
				}
			}

			var oObject = this.getObjectModel();
			if (!oObject || !iObjectKey || oObject.getKey() !== iObjectKey) {
				oObject = this.createObjectModel(iObjectKey, sRoute, oRouteArgs);
			}

			// Always set model for clean binding data states of prior usages 
			this.setObjectModel(oObject);
			oObject.getDataInitializedPromise().always(function() {
				oView.setBusy(false);
			});

			oObject.getDataInitializedPromise().fail(function() {
				that.setObjectExists(false);
                if(that.preCheck){
                    that.checkObjectExists(oObject.getObjectName(), oObject.getKey() || oObject.getInitKey());
                }
			});
		},

		/**
		 * Cancels object editing and navigates back
		 */
		onCancel: function() {
			// ask the user if the pending changes should be thrown away => during navigation
			//this.resetPendingChanges();
			this.navigateBack();
		},

		/**
		 * Deletes current object and navigates home
		 */
		onDelete: function(oEvent) {
			var oController = this;
			var oDelBtn = oEvent.getSource();
			var oDelRequest = this.executeObjectAction("del", {
				messages: {
					confirm: "MSG_DEL_CONFIRM",
					success: "MSG_DEL_SUCCESS"
				}
			});
			oDelRequest.done(function(oResponse) {
				if (oResponse && oResponse.confirmationCancelled === true) {
					if (oDelBtn && jQuery.type(oDelBtn.focus) === "function") {
						oDelBtn.focus();
					}
					return;
				}
				oController.navigateTo("home");
			});
		},

		/**
		 * Method to check if there are pending changes to write to the backend
		 *
		 * @returns true/false if the belonging object model has pending changes
		 */
		hasPendingChanges: function() {
			var oModel = this.getObjectModel();
			if (oModel) {
				return oModel.hasPendingChanges();
			}
			return false;
		},

		/**
		 * Adds token handling to a MultiInput control so that the application object
		 * is updated correctly and item suggestions work. Focus is direct children
		 * of the Root node. Suggestions work on basis of the OData model
		 * @param oControl
		 * @param mSettings {
		 *      childNodeName : string
		 *      childNodeNameSingular : string
		 *      suggestion : {
		 *          key: Key attribute for the suggestion items
		 *          text: Attribute to use as text for suggestion items
		 *          additionalText: Attribute to use as additional text for suggestion items
		 *          path: path in the OData model to use for suggestions, the placeholder $suggestValue
		 *                will be replaced by the token
		 *      },
		 *      token : {
		 *          key: Key attribute to add as token
		 *          text: Attribute to use as text for tokens,
		 *          editable: whether the delected icon show
		 *      }
		 */
		addMultiInputHandling: function(oControl, mSettings) {
			if (!oControl) {
				return;
			}
            var that = this;
			var oTokenTemplate = new Token({
				key: "{object>" + mSettings.token.key + "}",
				text: "{object>" + mSettings.token.text + "}",
				editable: that._getEditable(mSettings.token)
			});
			oControl.bindAggregation("tokens", {
				path: "object>" + mSettings.childNodeName,
				template: oTokenTemplate
			});
			var fnSuggestHandler = that._createSuggestHandler(mSettings.suggestion);
			oControl.attachSuggest(fnSuggestHandler, that);

			var fnTokenChangedHandler = that._createTokenChangedHandler(mSettings);
			oControl.attachTokenChange(fnTokenChangedHandler, that);
		},

		_getEditable: function(oToken) {
			if (!oToken.hasOwnProperty("editable")) {
				return true;
			}
			var sType = typeof oToken.editable;
			if (sType === "string" || (sType === "object" && oToken.editable.hasOwnProperty("path"))) {
				return oToken.editable;
			}
			return !!oToken.editable;
		},

		_createTokenChangedHandler: function(mSettings) {
			return function(oEvent) {
				var sType = oEvent.getParameter("type");
				// This is the only type where we can distinguish adding tokens with a binding or not
				if (sType === Tokenizer.TokenChangeType.Removed ||
					sType === Tokenizer.TokenChangeType.RemovedAll ||
					(sType === Tokenizer.TokenChangeType.Added && !oEvent.getParameter("token").bApplicationCreated)) {
					return;
				}

				var aAddedToken = oEvent.getParameter("addedTokens") || [oEvent.getParameter("token")] || [];
				var aRemovedToken = oEvent.getParameter("removedTokens") || [];

				var oObject = this.getObjectModel();
				aAddedToken.forEach(function(oToken) {
					var oNewChild = {};
					var vKey = oToken.getKey();
					try {
						vKey = parseInt(oToken.getKey(), 10);
					} catch (e) {
						// Never mind, then there is no int
					}
					oNewChild[mSettings.token.key] = vKey;
					oNewChild[mSettings.token.text] = oToken.getText();

					var sAccessorName = "add" + mSettings.childNodeNameSingular;
					var oMessage;
					if (oObject[sAccessorName]) {
						oMessage = oObject[sAccessorName].apply(oObject, [oNewChild]);
					} else {
						oMessage = oObject.addChild(oNewChild, mSettings.childNodeName);
					}

					if (oMessage && oMessage.type === MessageType.Error) {
						oToken.destroy();
					}
				});

				aRemovedToken.forEach(function(oToken) {
					// sometimes in mobile UI5 sends nested arrays for that event
					// in which we are  not interested
					if (!oToken.getBindingContext) {
						return;
					}

					var oBindingContext = oToken.getBindingContext("object");
					if (!oBindingContext) {
						// Nothing to do in the model
						return;
					}

					var oChild = oBindingContext.getObject();
					oObject.removeChild(oChild);
				});
			};
		}
	});
});
}; // end of sap/ino/vc/commons/BaseObjectModifyController.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.evaluation.CriterionValueHelp.controller') ) {
jQuery.sap.declare('sap.ino.vc.evaluation.CriterionValueHelp.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/vc/evaluation/CriterionValueHelp.controller",[
    "sap/ino/vc/commons/BaseController",
    "sap/ino/commons/formatters/ObjectFormatter"], function (
        Controller,
        ObjectFormatter) {
    "use strict";

    ObjectFormatter.criterionCodeWrapper = function(sCriterionCode, sAggregatingCriterionCode){
        if (sCriterionCode) {
            return ObjectFormatter.criterionCode(sCriterionCode);
        } else if (sAggregatingCriterionCode) {
            return ObjectFormatter.criterionCode(sAggregatingCriterionCode);
        }
        return undefined;
    };
    
    ObjectFormatter.criterionCodeLongTextWrapper = function(sCriterionCode, sAggregatingCriterionCode){
        if (sCriterionCode) {
            return ObjectFormatter.criterionCodeLongText(sCriterionCode);
        } else if (sAggregatingCriterionCode) {
            return ObjectFormatter.criterionCodeLongText(sAggregatingCriterionCode);
        }
        return undefined;
    };

    return Controller.extend("sap.ino.vc.evaluation.CriterionValueHelp", {
        
        formatter: ObjectFormatter,
        
        onInit: function () {
            Controller.prototype.onInit.apply(this, arguments);
        },

        open: function (oControl, sPath) {
            var oView = this.getView();
            var oCriterionValueHelp = oView.byId("criterionValueHelp");
            oView.bindElement({
                path: "object>" + sPath,
                events: {
                    change: function () {
                        oCriterionValueHelp.openBy(oControl);
                    }
                }
            });
        }

    });

});
}; // end of sap/ino/vc/evaluation/CriterionValueHelp.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.evaluation.EvaluationFormatter') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.vc.evaluation.EvaluationFormatter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.format.NumberFormat'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/evaluation/EvaluationFormatter",[
    "sap/ino/commons/models/core/CodeModel",
    "sap/ui/core/format/NumberFormat",
    "sap/ui/base/Object",
    "sap/ino/commons/formatters/ObjectFormatter",
    "sap/ino/commons/models/aof/PropertyModel",
    "sap/ino/commons/models/aof/PropertyModelCache"
], function(CodeModel,
	NumberFormat,
	Object,
	ObjectFormatter,
	PropertyModel,
	PropertyModelCache) {
	"use strict";

	var oFloatNumberFormat = NumberFormat.getFloatInstance({
		maxFractionDigits: 2
	});

	var oEvaluationFormatter = Object.extend("sap.ino.vc.evaluation.EvaluationFormatter", {});
	jQuery.extend(oEvaluationFormatter, ObjectFormatter);

	var fnEvaluationCreateFormatter = PropertyModel.getStaticActionEnabledStaticFormatter(
		"sap.ino.xs.object.evaluation.Evaluation", "create", function(iIdeaId) {
			return {
				IDEA_ID: iIdeaId
			};
		});

	var fnEvaluationCreateDynamicFormatter = PropertyModel.getStaticActionEnabledDynamicFormatter(
		"sap.ino.xs.object.evaluation.Evaluation", "create", function(iIdeaId) {
			return {
				IDEA_ID: iIdeaId
			};
		});

	var fnEvaluationRequestCreateFormatter = PropertyModel.getStaticActionEnabledDynamicFormatter(
		"sap.ino.xs.object.evaluation.EvaluationRequest", "create", function(iIdeaId) {
			return {
				IDEA_ID: iIdeaId
			};
		});
	/**
	 * Get formatted value
	 *
	 * @param sDataType
	 *            Data type
	 * @param fNumValue
	 *            Numeric/Integer Value
	 * @param bBoolValue
	 *            Boolean Value
	 * @param sTextValue
	 *            Text Value
	 * @param sVoLCode
	 *            Value Option List Code
	 * @param sUoMCode
	 *            Unit of Measure Code
	 * @returns {String} Formatted value
	 */
	oEvaluationFormatter.getFormattedValue = function(sDataType, fNumValue, bBoolValue, sTextValue, sVoLCode, sUoMCode, aValueOptionList,
		oController) {
		var vValue = oEvaluationFormatter.getValue(sDataType, fNumValue, bBoolValue, sTextValue);
		var sFormattedValue = "";
		if (sVoLCode) {
			var sCodeTable = "sap.ino.xs.object.basis.ValueOptionList.Root_" + sVoLCode;
			var vRawValue = oEvaluationFormatter.getRawValue(sDataType, fNumValue, bBoolValue, sTextValue);
			sFormattedValue = CodeModel.getText(sCodeTable, vRawValue);
		} else {
			switch (sDataType) {
				case "INTEGER":
					sFormattedValue = Math.round(vValue).toString();
					break;
				case "NUMERIC":
					sFormattedValue = oFloatNumberFormat.format(oEvaluationFormatter.toFloat(vValue));
					break;
				case "BOOLEAN":
					sFormattedValue = oEvaluationFormatter.booleanValueToString(vValue, oController ? oController : this);
					break;
				case "TEXT":
					sFormattedValue = vValue;
					break;
				default:
					sFormattedValue = vValue.toString();
					break;
			}
		}
		if (!sFormattedValue) {
			sFormattedValue = "";
		}
		if (sUoMCode) {
			sFormattedValue = sFormattedValue + " " + CodeModel.getText("sap.ino.xs.object.basis.Unit.Root", sUoMCode);
		}
		return sFormattedValue;
	};

	oEvaluationFormatter.getFormattedValueEvaluations = function(sDataType, fNumValue, bBoolValue, sTextValue, sVoLCode, sUoMCode, aValueOptionList,
		oController) {
		var vValue = oEvaluationFormatter.getValueEvaluations(sDataType, fNumValue, bBoolValue, sTextValue);
		var sFormattedValue = "";
		if (sVoLCode) {
			var sCodeTable = "sap.ino.xs.object.basis.ValueOptionList.Root_" + sVoLCode;
			var vRawValue = oEvaluationFormatter.getRawValue(sDataType, fNumValue, bBoolValue, sTextValue);
			sFormattedValue = CodeModel.getText(sCodeTable, vRawValue);
		} else {
			switch (sDataType) {
				case "INTEGER":
					sFormattedValue = Math.round(vValue).toString();
					break;
				case "NUMERIC":
					sFormattedValue = oFloatNumberFormat.format(oEvaluationFormatter.toFloat(vValue));
					break;
				case "BOOLEAN":
					sFormattedValue = oEvaluationFormatter.booleanValueToString(vValue, oController ? oController : this);
					break;
				case "TEXT":
					sFormattedValue = vValue;
					break;
				default:
					sFormattedValue = vValue.toString();
					break;
			}
		}
		if (!sFormattedValue) {
			sFormattedValue = "";
		}
		if (sUoMCode) {
			sFormattedValue = sFormattedValue + " " + CodeModel.getText("sap.ino.xs.object.basis.Unit.Root", sUoMCode);
		}
		return sFormattedValue;
	};


	/**
	 * Get visibility of formatted value
	 *
	 * @param sDataType
	 *            Data type
	 * @param fNumValue
	 *            Numeric/Integer Value
	 * @param bBoolValue
	 *            Boolean Value
	 * @param sTextValue
	 *            Text Value
	 * @param sVoLCode
	 *            Value Option List Code
	 * @param sUoMCode
	 *            Unit of Measure Code
	 * @returns {String} Formatted value
	 */
	oEvaluationFormatter.isFormattedValueVisible = function(sDataType, fNumValue, bBoolValue, sTextValue, sVoLCode, sUoMCode,
		aValueOptionList, oController) {
		if (!oController) {
			oController = this;
		}
		var sFormattedValue = oEvaluationFormatter.getFormattedValue(sDataType, fNumValue, bBoolValue, sTextValue, sVoLCode, sUoMCode,
			aValueOptionList, oController);
		return sFormattedValue ? sFormattedValue.trim().length > 0 : false;
	};

	/**
	 * Get Value according to specified data type
	 *
	 * @param sDataType
	 *            Data type
	 * @param fNumValue
	 *            Numeric/Integer Value
	 * @param bBoolValue
	 *            Boolean Value
	 * @param sTextValue
	 *            Text Value
	 * @returns Value according to specified data type
	 */
	oEvaluationFormatter.getValue = function(sDataType, fNumValue, bBoolValue, sTextValue) {
		var vValue = null;
		switch (sDataType) {
			case "INTEGER":
				vValue = Math.round(fNumValue);
				break;
			case "NUMERIC":
				vValue = typeof fNumValue === "string" ? oFloatNumberFormat.parse(fNumValue) : fNumValue;
				break;
			case "BOOLEAN":
				vValue = bBoolValue === 1;
				break;
			case "TEXT":
				vValue = sTextValue;
				break;
			default:
				break;
		}
		switch (sDataType) {
			case "INTEGER":
			case "NUMERIC":
				if (isNaN(vValue) || vValue === undefined || vValue === null) {
					vValue = 0;
				}
				break;
			case "BOOLEAN":
				if (vValue === undefined || vValue === null) {
					vValue = false;
				}
				break;
			case "TEXT":
				if (vValue === undefined || vValue === null) {
					vValue = "";
				}
				break;
			default:
				if (vValue === undefined || vValue === null) {
					vValue = "";
				}
				break;
		}
		return vValue;
	};
	
	oEvaluationFormatter.getValueEvaluations = function(sDataType, fNumValue, bBoolValue, sTextValue) {
		var vValue = null;
		switch (sDataType) {
			case "INTEGER":
				vValue = Math.round(fNumValue);
				break;
			case "NUMERIC":
			    fNumValue = parseFloat(fNumValue);
				vValue = typeof fNumValue === "string" ? oFloatNumberFormat.parse(fNumValue) : fNumValue;
				break;
			case "BOOLEAN":
				vValue = bBoolValue === 1;
				break;
			case "TEXT":
				vValue = sTextValue;
				break;
			default:
				break;
		}
		switch (sDataType) {
			case "INTEGER":
			case "NUMERIC":
				if (isNaN(vValue) || vValue === undefined || vValue === null) {
					vValue = 0;
				}
				break;
			case "BOOLEAN":
				if (vValue === undefined || vValue === null) {
					vValue = false;
				}
				break;
			case "TEXT":
				if (vValue === undefined || vValue === null) {
					vValue = "";
				}
				break;
			default:
				if (vValue === undefined || vValue === null) {
					vValue = "";
				}
				break;
		}
		return vValue;
	};	

	/**
	 * Get Raw Value according to specified data type
	 *
	 * @param sDataType
	 *            Data type
	 * @param fNumValue
	 *            Numeric/Integer Value
	 * @param bBoolValue
	 *            Boolean Value
	 * @param sTextValue
	 *            Text Value
	 * @returns Value according to specified data type
	 */
	oEvaluationFormatter.getRawValue = function(sDataType, fNumValue, bBoolValue, sTextValue) {
		var vValue = null;
		switch (sDataType) {
			case "INTEGER":
				vValue = fNumValue;
				if (jQuery.type(fNumValue)) {
					vValue = parseInt(fNumValue, 10);
				}
				break;
			case "NUMERIC":
				vValue = fNumValue;
				if (jQuery.type(fNumValue) === 'string') {
                	var oRawFloatNumberFormat = NumberFormat.getFloatInstance({});				    
					vValue = oRawFloatNumberFormat.parse(fNumValue);
				} else {
				    vValue = parseFloat(fNumValue, 10);
				}
				break;
			case "BOOLEAN":
				vValue = bBoolValue;
				break;
			case "TEXT":
				vValue = sTextValue;
				break;
			default:
				break;
		}
		if (sDataType !== "TEXT" && (isNaN(vValue) || vValue === undefined || vValue === null)) {
			switch (sDataType) {
				case "INTEGER":
				case "NUMERIC":
				case "BOOLEAN":
					vValue = 0;
					break;
				default:
					vValue = "";
					break;
			}
		}
		return vValue;
	};

    oEvaluationFormatter.getWeight = function(sWeight){
        var vWeight = null;
        if(sWeight === undefined || sWeight === null){
            vWeight = "";
        }else {
            vWeight = "\(" + sWeight + "\%" + "\)";
        }
        return vWeight;
    };
    
    oEvaluationFormatter.getWeightMultiply = function(sWeight){
        var vWeight = null;
        if(sWeight === undefined || sWeight === null){
            vWeight = "";
        }else {
            vWeight = "\*" + sWeight + "\%";
        }
        return vWeight;
    };

	oEvaluationFormatter.booleanValueToString = function(iValue, oController) {
		if (iValue === undefined || iValue === null) {
			return oController.getText("EVALUATION_FLD_UNKNOWN");
		} else if (iValue === 1 || iValue === true) {
			return oController.getText("EVALUATION_FLD_YES");
		} else if (iValue === 0 || iValue === false) {
			return oController.getText("EVALUATION_FLD_NO");
		} else {
			return oController.getText("EVALUATION_FLD_UNKNOWN");
		}
	};

	oEvaluationFormatter.hasSubcriteria = function(aChildren) {
		if (aChildren && aChildren.length > 0) {
			return true;
		}
		return false;
	};

	oEvaluationFormatter.isComboBoxControl = function(sVOLCode) {
		if (sVOLCode) {
			return true;
		}
		return false;
	};

	function matchesTypeVoL(sDatatypeCode, sVOLCode, sType) {
		if (sDatatypeCode === sType && oEvaluationFormatter.isComboBoxControl(sVOLCode)) {
			return true;
		}
		return false;
	}

	oEvaluationFormatter.isTextVoL = function(sDatatypeCode, sVOLCode) {
		return matchesTypeVoL(sDatatypeCode, sVOLCode, "TEXT");
	};

	oEvaluationFormatter.isIntegerVoL = function(sDatatypeCode, sVOLCode) {
		return matchesTypeVoL(sDatatypeCode, sVOLCode, "INTEGER");
	};

	oEvaluationFormatter.isNumericVoL = function(sDatatypeCode, sVOLCode) {
		return matchesTypeVoL(sDatatypeCode, sVOLCode, "NUMERIC");
	};

	oEvaluationFormatter.isBooleanVoL = function(sDatatypeCode, sVOLCode) {
		return matchesTypeVoL(sDatatypeCode, sVOLCode, "BOOLEAN");
	};

	oEvaluationFormatter.isTextControl = function(sDatatypeCode, sVOLCode) {
		if (oEvaluationFormatter.isComboBoxControl(sVOLCode)) {
			return false;
		}
		return sDatatypeCode === "TEXT";
	};

	oEvaluationFormatter.isBooleanControl = function(sDatatypeCode, sVOLCode) {
		if (oEvaluationFormatter.isComboBoxControl(sVOLCode)) {
			return false;
		}
		return sDatatypeCode === "BOOLEAN";
	};

	oEvaluationFormatter.isInputControl = function(sDatatypeCode, sVOLCode) {
		if (oEvaluationFormatter.isComboBoxControl(sVOLCode)) {
			return false;
		}
		return sDatatypeCode === "NUMERIC" || sDatatypeCode === "INTEGER";
	};

	oEvaluationFormatter.isProgressIndicatorControl = function(sNumValueMin, sNumValueMax, sVOLCode, sDatatypeCode) {
		if (oEvaluationFormatter.isComboBoxControl(sVOLCode)) {
			return false;
		}
		if (sDatatypeCode !== "INTEGER" && sDatatypeCode !== "NUMERIC") {
			return false;
		}
		if (sNumValueMin === undefined || sNumValueMin === null ||
			sNumValueMax === undefined || sNumValueMax === null) {
			return false;
		}
		if (sNumValueMin === sNumValueMax) {
			return false;
		}
		return true;
	};

	oEvaluationFormatter.isProgressIndicator = function(sNumValueMin, sNumValueMax, sVOLCode, sDatatypeCode) {
		if (oEvaluationFormatter.isProgressIndicatorControl(sNumValueMin, sNumValueMax, sVOLCode, sDatatypeCode)) {
			return "true";
		}
		return "false";
	};

	oEvaluationFormatter.formatSliderStep = function(sNumValueMin, sNumValueMax, sNumValueStepSize, sDatatypeCode) {
		if (jQuery.isNumeric(sNumValueMin) && jQuery.isNumeric(sNumValueMax) && jQuery.isNumeric(sNumValueStepSize)) {
			var fNumValueMax = parseFloat(sNumValueMax);
			var fNumValueMin = parseFloat(sNumValueMin);
			var fNumValueStepSize = parseFloat(sNumValueStepSize);
			var fDiff = fNumValueMax - fNumValueMin;

			/** if (fNumValueStepSize === 0) {
                var fDiff = fNumValueMax - fNumValueMin;
                if (fDiff < 1 && fDiff > 0) {
                    return fDiff;
                } else {
                    return 1;
                }
            }
            return fNumValueStepSize;
        } **/
			if (sDatatypeCode === "INTEGER") {
				if (fNumValueStepSize === 0) {
					if (fDiff < 1 && fDiff > 0) {
						return fDiff;
					} else {
						return 1;
					}
				}
				return fNumValueStepSize;
			}
			if (sDatatypeCode === "NUMERIC") {
				if (fNumValueStepSize === 0) {
					if (fDiff < 1 && fDiff > 0) {
						return fDiff;
					} else {
						return 0.01;
					}
				}
				return fNumValueStepSize;
			}
		}
		return 1;
	};

	oEvaluationFormatter.showInputControl = function(sDatatypeCode, sNumValueMin, sNumValueMax, sVOLCode, aChildren) {
		if (oEvaluationFormatter.isComboBoxControl(sVOLCode)) {
			return false;
		}
		if (aChildren && aChildren.length > 0) {
			return false;
		}
		if ((sDatatypeCode === "INTEGER" || sDatatypeCode === "NUMERIC") && !oEvaluationFormatter.isProgressIndicatorControl(sNumValueMin,
			sNumValueMax, sVOLCode, sDatatypeCode)) {
			return true;
		}
		return false;
	};

	oEvaluationFormatter.showAggregatingProgressIndicatorControl = function(sNumValueMin, sNumValueMax, aChildren, sVOLCode, sDatatypeCode) {
		if (oEvaluationFormatter.isComboBoxControl(sVOLCode)) {
			return false;
		}
		if (aChildren && aChildren.length > 0) {
			return false;
		}
		return oEvaluationFormatter.isProgressIndicatorControl(sNumValueMin, sNumValueMax, sVOLCode, sDatatypeCode) && (sDatatypeCode ===
			"INTEGER" || sDatatypeCode === "NUMERIC");
	};

	oEvaluationFormatter.showAggregatingCheckBoxControl = function(sDatatypeCode, aChildren, sVOLCode) {
		if (oEvaluationFormatter.isComboBoxControl(sVOLCode)) {
			return false;
		}
		if (aChildren && aChildren.length > 0) {
			return false;
		}
		return oEvaluationFormatter.isBooleanControl(sDatatypeCode, sVOLCode);
	};

	oEvaluationFormatter.showValue = function(sDatatypeCode, sNumValueMin, sNumValueMax, sVOLCode) {
		if (sDatatypeCode === "INTEGER") {
			return oEvaluationFormatter.isProgressIndicatorControl(sNumValueMin, sNumValueMax, sVOLCode, sDatatypeCode);
		}
		return false;
	};

	oEvaluationFormatter.showTextValue = function(sDatatypeCode, sVOLCode, sNumValueMin, sNumValueMax) {
		return (oEvaluationFormatter.isTextControl(sDatatypeCode, sVOLCode) ||
			oEvaluationFormatter.isBooleanControl(sDatatypeCode) ||
			oEvaluationFormatter.showInputControl(sDatatypeCode, sNumValueMin, sNumValueMax, sVOLCode));
	};

	oEvaluationFormatter.showAggregatingValue = function(sDatatypeCode, sNumValueMin, sNumValueMax, sVOLCode, aChildren) {
		if (oEvaluationFormatter.isComboBoxControl(sVOLCode)) {
			return false;
		}
		if (aChildren && aChildren.length > 0) {
			return false;
		}
		if (oEvaluationFormatter.showInputControl(sDatatypeCode, sNumValueMin, sNumValueMax, sVOLCode, aChildren)) {
			return false;
		}
		return oEvaluationFormatter.showAggregatingValueDisplay(sDatatypeCode, sNumValueMin, sNumValueMax);
	};

	oEvaluationFormatter.showAggregatingBooleanValue = function(sDatatypeCode, aChildren) {
		return sDatatypeCode !== "TEXT" && (aChildren && aChildren.length > 0);
	};

	oEvaluationFormatter.showAggregatingValueDisplay = function(sDatatypeCode, sNumValueMin, sNumValueMax) {
		return (sDatatypeCode === "INTEGER" &&
			!oEvaluationFormatter.showInputControl(sDatatypeCode, sNumValueMin, sNumValueMax));
	};

	oEvaluationFormatter.showComment = function(sDatatypeCode, sComment) {
		if (sComment) {
			return true;
		}
		return !oEvaluationFormatter.isTextControl(sDatatypeCode);
	};
	
	oEvaluationFormatter.showWarningMsg = function(sMsg) {
		if (sMsg) {
			return true;
		}
		return false;
	};

	oEvaluationFormatter.showCommentDisplay = function(sDatatypeCode, sComment) {
		if (sComment && !oEvaluationFormatter.isTextControl(sDatatypeCode)) {
			return true;
		}
		return false;
	};
	
	oEvaluationFormatter.showEvaluationCommentDisplay = function(sComment) {
		if (sComment) {
			return true;
		}
		return false;
	};

	oEvaluationFormatter.progressIndicatorValue = function(sDataType, fNumValue, bBoolValue, sTextValue, sVoLCode, sUoMCode, sMinValue,
		sMaxValue) {
		var oValue = oEvaluationFormatter.getFormattedValue(sDataType, fNumValue, bBoolValue, sTextValue, sVoLCode, sUoMCode, undefined, this);
		var iValue = parseInt(oValue, 10);
		var iMinValue = parseInt(sMinValue, 10);
		var iMaxValue = parseInt(sMaxValue, 10);
		if (jQuery.type(iValue) === "number" && jQuery.type(iMinValue) === "number" && jQuery.type(iMaxValue) === "number") {
			return Math.round(100 * (iValue - iMinValue) / (iMaxValue - iMinValue));
		}
		return 0;
	};

	oEvaluationFormatter.hasMyEvaluations = function(aMyEvaluations) {
		var bHas = false;
		var iIdeaId = this.getView() && this.getView().getModel && this.getView().getModel("object") && this.getView().getModel("object").getProperty(
			"/ID");
		if (iIdeaId !== undefined) {
			if (aMyEvaluations) {
				jQuery.each(aMyEvaluations, function(iIndex, oEntity) {
					if (iIndex && iIndex.indexOf("IdeaMyEvaluation") === 0 && oEntity && oEntity.IDEA_ID === iIdeaId) {
						bHas = true;
					}
				});
			}
		} else {
			bHas = true;
		}

		return bHas;
	};

	oEvaluationFormatter.statusActionCode = function(sActionCode) {
		return CodeModel.getText("sap.ino.xs.object.status.Action.Root", sActionCode);
	};

	oEvaluationFormatter.submitButtonVisible = function(sStatusCode, bEnabled, iEvaluationId) {
		if (bEnabled) {
			return true;
		}
		if (sStatusCode === 'sap.ino.config.EVAL_DRAFT' && iEvaluationId < 0) {
			return true;
		}
		return false;
	};

	oEvaluationFormatter.createEvaluationEnabled = function(iIdeaId) {
		if (iIdeaId) {
			return fnEvaluationCreateFormatter(iIdeaId);
		}
		return false;
	};

	oEvaluationFormatter.createEvaluationDynamicFormatter = function(iIdeaId) {
		if (iIdeaId) {
			return fnEvaluationCreateDynamicFormatter(iIdeaId);
		}
		return false;
	};

	oEvaluationFormatter.selfEvaluationButtonLabel = function(iIdeaId) {
		var oController = this.getView().getController();
		if (iIdeaId) {
			if (fnEvaluationCreateDynamicFormatter(iIdeaId) &&
				PropertyModel.getCacheModel().getProperty(
					"/sap.ino.xs.object.evaluation.Evaluation/actions/create/customProperties/SELF_EVALUATION_ACTIVE")) {
				return oController.getText("IDEA_OBJECT_BTN_CREATE_SELF_EVALUATION");
			}
		}
		return oController.getText("IDEA_OBJECT_BTN_CREATE_EVALUATION");
	};

	oEvaluationFormatter.createEvaluationRequestEnabled = function(iIdeaId) {
		if (iIdeaId) {
			return fnEvaluationRequestCreateFormatter(iIdeaId);
		}
		return false;
	};

	return oEvaluationFormatter;
});
}; // end of sap/ino/vc/evaluation/EvaluationFormatter.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.evaluation.RequestsDisplay.controller') ) {
jQuery.sap.declare('sap.ino.vc.evaluation.RequestsDisplay.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/evaluation/RequestsDisplay.controller",[
    "sap/ino/vc/commons/BaseObjectController",
    "sap/ino/commons/models/object/EvaluationRequest",
    "sap/m/MessageToast",
    "sap/ui/model/json/JSONModel",
    "sap/ino/vc/commons/TopLevelPageFacet",
    "sap/ino/vc/evaluation/EvaluationFormatter"
], function(BaseController, EvaluationRequest, MessageToast, JSONModel, TopLevelPageFacet, EvaluationFormatter) {
	"use strict";

	return BaseController.extend("sap.ino.vc.evaluation.RequestsDisplay", jQuery.extend({}, TopLevelPageFacet, {

		formatter: EvaluationFormatter,
		routes: ["evaluationrequest-display"],

		onInit: function() {
			BaseController.prototype.onInit.apply(this, arguments);
		},

		onRouteMatched: function(oEvent) {
			var oController = this;
			BaseController.prototype.onRouteMatched.apply(oController, arguments);
			oController.setHelp("EVALUATIONREQUESTS_DISPLAY");
			oController.setViewProperty("/USER_IMAGE_ID", oController.getOwnerComponent().getCurrentUserImageId());

			var oRouteArgs = oEvent.getParameter("arguments");
			var oQuery = oRouteArgs["?query"];
			var sSection = (oQuery && oQuery.section) || "sectionExperts";
			this.showSection(sSection);
		},

		createObjectModel: function(vObjectKey) {
			return new EvaluationRequest(vObjectKey, {
				nodes: ["Root"],
				actions: ["update", "del", "executeStatusTransition", "submit"],
				continuousUse: true,
				readSource: {
					model: this.getDefaultODataModel()
				}
			});
		},

		getODataEntitySet: function() {
			return "EvaluationRequest";
		},
		
		onTabSelect: function(oEvent) {
			var oSection = oEvent.getParameter("section");
			this.navigateTo(this.getCurrentRoute(), {
				id: this.getObjectModel().getKey(),
				query: {
					section: this.getLocalElementId(oSection)
				}
			});
		},
		onRequestItemPress: function(oEvent) {
			var nId = oEvent.getSource().getBindingContext("object").getProperty("EVALUATION_ID");
			if (nId) {
				this.navigateTo("evaluation-display", {
					id: nId
				});
			}
		},

		onEdit: function() {
			this.navigateTo("evaluationrequest-edit", {
				id: this.getObjectModel().getKey()
			}, true);
		},

		onIdeaPressed: function() {
			var iId = this.getObjectModel().getProperty("/IDEA_ID");
			this.navigateTo("idea-display", {
				id: iId
			}, true);
		},
		onOpenCreator: function(oEvent) {
			var oSource = oEvent.getSource();
			var iIdentityId = oSource.getCustomData()[0].getProperty("value");
			if (!this.oIdentityCardView) {
				this.oIdentityCardView = sap.ui.xmlview({
					viewName: "sap.ino.vc.iam.IdentityCard"
				});
				this.getView().addDependent(this.oIdentityCardView);
			}
			this.oIdentityCardView.getController().open(oSource, iIdentityId);
		},
		
        onBeforeHide:function(){
            this.setObjectModel(null);
        }
	}));
});
}; // end of sap/ino/vc/evaluation/RequestsDisplay.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.evaluation.RequestsItem.controller') ) {
jQuery.sap.declare('sap.ino.vc.evaluation.RequestsItem.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.m.Token'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.message.Message'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/evaluation/RequestsItem.controller",[
    "sap/ino/vc/commons/BaseObjectModifyController",
    "sap/ino/commons/models/object/EvaluationRequestItem",
    "sap/ino/commons/models/object/EvaluationRequestComment",
    "sap/m/MessageToast",
    "sap/ui/model/json/JSONModel",
    "sap/ino/vc/commons/TopLevelPageFacet",
    "sap/ino/commons/models/aof/PropertyModel",
    "sap/ui/model/Filter",
    "sap/m/Token",
    "sap/ui/model/FilterOperator",
    "sap/ui/model/Sorter",
    "sap/ui/core/MessageType",
    "sap/ui/core/message/Message",
    "sap/m/MessageBox",
    "sap/ino/commons/application/Configuration",
    "sap/ino/vc/evaluation/EvaluationFormatter"
], function(BaseController, EvaluationRequestItem, EvaluationRequestComment, MessageToast, JSONModel, TopLevelPageFacet, PropertyModel,
	Filter, Token, FilterOperator,
	Sorter, MessageType, Message,MessageBox,Configuration, EvaluationFormatter) {
	"use strict";

	return BaseController.extend("sap.ino.vc.evaluation.RequestsItem", jQuery.extend({}, TopLevelPageFacet, {

		routes: ["evaluationrequest-item"],

		onInit: function() {
			BaseController.prototype.onInit.apply(this, arguments);
		},

		onRouteMatched: function() {
			BaseController.prototype.onRouteMatched.apply(this, arguments);
			var oController = this;
			oController.setHelp("EVALUATIONREQUESTS_ITEM");
			var oRequestItem = this.getObjectModel();
			oRequestItem.getDataInitializedPromise().done(function(oData) {
				if (oRequestItem.oData.Clarifications.length > 0) {
					oController.setViewProperty("/CLARIFICATION_DISPLAY", false);
				}
				oController.bindDefaultODataModel.call(oController, oData.ID);
				oRequestItem.setProperty("/InitRefObjectId", oData.EVAL_REQ_ID);
				oController._commentMixinInitCommentModel();
			});

			oController.setViewProperty("/USER_IMAGE_ID", oController.getOwnerComponent().getCurrentUserImageId());
		},

		createObjectModel: function(vObjectKey) {
			return new EvaluationRequestItem(vObjectKey, {
				actions: ["update", "del", "executeStatusTransition", "sendClarification", "forward"],
				continuousUse: true,
				readSource: {
					model: this.getDefaultODataModel()
				}
			});
		},

		_commentMixinInitCommentModel: function() {
			this.byId("commentViewList").getController().commentMixinInit({
				commentInputId: "commentInputField",
				commentListId: "commentList",
				successMessageKey: "MSG_CREATE_SUCCESS_COMMENT",
				editDialogViewName: "sap.ino.vc.comment.EditCommentDialog"
			});
		},

		getODataEntitySet: function() {
			return "EvaluationRequestItem";
		},

		onOpenCreator: function(oEvent) {
			var oSource = oEvent.getSource();
			var iIdentityId = oSource.getBindingContext("object").getProperty("FROM_IDENTITY_ID");
			if (!this.oIdentityCardView) {
				this.oIdentityCardView = sap.ui.xmlview({
					viewName: "sap.ino.vc.iam.IdentityCard"
				});
				this.getView().addDependent(this.oIdentityCardView);
			}
			this.oIdentityCardView.getController().open(oSource, iIdentityId);
		},

		onRequestItemPress: function() {
			this.navigateTo("evaluationrequest-item", {
				id: this.getObjectModel().getKey()
			});
		},

		onIdeaPressed: function() {
			var iId = this.getObjectModel().getProperty("/IDEA_ID");
			this.navigateTo("idea-display", {
				id: iId
			}, true);
		},

		onAccept: function() {
			this.onExecuteStatusTransition("sap.ino.config.EVAL_REQ_ACCEPT");
		},

		onReject: function() {
			this.onExecuteStatusTransition("sap.ino.config.EVAL_REQ_REJECT");
		},
		onForward: function() {
			var oRequestForwardDialog = this.createRequestForwardDialog();
			var that = this;
			oRequestForwardDialog.open();
			that.addForwardExpertInputHandling(this.byId("inputForwardExpert"), {
				suggestion: {
					key: "ID",
					text: "NAME",
					additionalText: "USER_NAME",
					path: "data>/SearchIdentity(searchToken='$suggestValue')/Results",
					filters: [new Filter({
						path: "ID",
						operator: FilterOperator.NE,
						value1: Configuration.getCurrentUser().USER_ID
					})],
					sorter: new Sorter("NAME")
				},
				token: {
					key: "IDENTITY_ID",
					text: "NAME"
				}
			});
		},

		addForwardExpertInputHandling: function(oControl, mSettings) {
			if (!oControl) {
				return;
			}
			var that = this;
			var fnSuggestHandler = that._createSuggestHandler(mSettings.suggestion);
			oControl.attachSuggest(fnSuggestHandler, that);
		},

		onForwardClose: function() {
			this._oRequestForwardDialog.close();
			this.byId("inputForwardExpert").removeAllTokens();
			this.byId("txtAreaForwardReasonDes").setValue("");
		},
		onSubmitForward: function() {
			var that = this;
			var oForwardExpert = that.byId("inputForwardExpert").getTokens();
			var sText = that.byId("inputForwardExpert").getValue();
			if (oForwardExpert.length > 0 && !sText) {
				that.resetClientMessages();
				var iForwardID = parseInt(oForwardExpert[0].mProperties.key, 10);
				var oForwardAction = that.executeObjectAction("forward", {
					parameters: {
						EXPERT_ID: iForwardID,
						COMMENT_FORWARD: that.byId("txtAreaForwardReasonDes").getValue().trim()
					},
					messages: {
						success: "EVALUATIONREQUESTS_MSG_FORWARD_SUCCESS",
						error: "EVALUATIONREQUESTS_MSG_FORWARD_FAILURE"
					}
				});
				oForwardAction.fail(function(oResponseMsg){
			    if(oResponseMsg.MESSAGES.length > 0)	    
				{MessageBox.error(oResponseMsg.MESSAGES[0].MESSAGE_TEXT, {
					actions: [MessageBox.Action.OK],
					onClose: function(sDialogAction) {
					}
				}); }   
				});				
				oForwardAction.done(function() {
					that._oRequestForwardDialog.close();
					that.byId("inputForwardExpert").removeAllTokens();
					that.byId("txtAreaForwardReasonDes").setValue("");
					that.navigateTo("idea-display", {
						id: that.getObjectModel().oData.IDEA_ID
					}, true);
				});
				oForwardAction.always(function() {
					that._oRequestForwardDialog.setBusy(false);
				});
			} else {
				that.setClientMessage(
					new Message({
						code: "EVALUATIONREQUESTS_MSG_FORWARD_NO_EXPERT",
						type: MessageType.Error
					}),
					that.byId("inputForwardExpert"));
			}

		},

		onSubmitClarification: function() {
			var that = this;
			var sTextContent = that.byId("txtAreaClarificationReasonDes").getValue().trim();
			if (sTextContent) {
				that.resetClientMessages();
				var oSendClarificationReq = that.executeObjectAction("sendClarification", {
					parameters: {
						TO_IDENTITY: that.getObjectModel().getProperty("/OWNER_ID"),
						CONTENT: sTextContent
					},
					messages: {
						success: "EVALUATIONREQUESTS_MSG_CLARIFICATION_SUCCESS",
						error: "EVALUATIONREQUESTS_MSG_CLARIFICATION_FAILURE"
					}
				});
				oSendClarificationReq.done(function() {
					that.byId("txtAreaClarificationReasonDes").setValue("");
					that._oRequestClarificationDialog.close();
					that.setViewProperty("/CLARIFICATION_DISPLAY", false);
				});

				oSendClarificationReq.always(function() {
					that._oRequestClarificationDialog.setBusy(false);
				});
			} else {
				that.setClientMessage(
					new Message({
						code: "EVALUATIONREQUESTS_MSG_CLARIFICATION_NO_RESON",
						type: MessageType.Error
					}),
					this.byId("txtAreaClarificationReasonDes"));
				that.byId("txtAreaClarificationReasonDes").setValue("");
			}
		},

		onCreateClarification: function() {
			var oCreateClarificationDialog = this.createClarificationDialog();
			oCreateClarificationDialog.open();
		},

		onClarificationClose: function() {
			this.byId("txtAreaClarificationReasonDes").setValue("");
			this._oRequestClarificationDialog.close();
		},

		onCreateEvaluation: function() {
			this.navigateTo("evaluation-create", {
				query: {
					ideaId: this.getObjectModel().getProperty("/IDEA_ID"),
					EvalReqItemId: this.getObjectModel().getKey()
				}
			});
		},

		onExecuteStatusTransition: function(sStatusAction) {
			var oContorller = this;
			var oModel = oContorller.getObjectModel();
			var oActionRequest = oModel.executeStatusTransition({
				STATUS_ACTION_CODE: sStatusAction
			});
			if (oActionRequest) {
				oActionRequest.done(function() {
					MessageToast.show(oContorller.getText("OBJECT_MSG_STATUS_CHANGE_SUCCESS"));
				});
				oActionRequest.fail(function(o) {
					if (o.MESSAGES && o.MESSAGES.length > 0) {
						MessageToast.show(oContorller.getText(o.MESSAGES[0].MESSAGE_TEXT));
					}
				});
			}
		},
		createRequestForwardDialog: function() {
			if (!this._oRequestForwardDialog) {
				this._oRequestForwardDialog = this.createFragment("sap.ino.vc.evaluation.fragments.RequestForward", this.getView().getId());
				this.getView().addDependent(this._oRequestForwardDialog);
			}
			return this._oRequestForwardDialog;
		},

		createClarificationDialog: function() {
			if (!this._oRequestClarificationDialog) {
				this._oRequestClarificationDialog = this.createFragment("sap.ino.vc.evaluation.fragments.RequestCreateClarification", this.getView()
					.getId());
				this.getView().addDependent(this._oRequestClarificationDialog);
			}
			return this._oRequestClarificationDialog;
		},
		onEvaluationRequestOwnerPressed: function(oEvent) {
			oEvent.preventDefault();
			var oSource = oEvent.getSource();
			if (oSource) {
				var iIdentityId = oSource.getBindingContext("object") &&
					oSource.getBindingContext("object").getProperty("OWNER_ID");
				if (iIdentityId !== undefined && !this.oIdentityCardView) {
					this.oIdentityCardView = sap.ui.xmlview({
						viewName: "sap.ino.vc.iam.IdentityCard"
					});
					this.getView().addDependent(this.oIdentityCardView);
				}
				if (this.oIdentityCardView && this.oIdentityCardView.getController()) {
					this.oIdentityCardView.getController().open(oSource, iIdentityId);
				}
			}
		},
		createEvaluationFormatter: function(ideaId, statusCode) {
			if (statusCode === 'sap.ino.config.EVAL_REQ_EXPIRED' || statusCode === 'sap.ino.config.EVAL_REQ_REJECTED' || statusCode ===
				'sap.ino.config.EVAL_REQ_COMPLETED') {
				return false;
			}
			return EvaluationFormatter.createEvaluationDynamicFormatter(ideaId);
		}
	}));
});
}; // end of sap/ino/vc/evaluation/RequestsItem.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.iam.mySetting.controller') ) {
jQuery.sap.declare('sap.ino.vc.iam.mySetting.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.NumberFormat'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
jQuery.sap.require('sap.ui.export.library'); // unlisted dependency retained
jQuery.sap.require('sap.ui.export.Spreadsheet'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/iam/mySetting.controller",[
    "sap/ino/vc/commons/BaseObjectController",
    "sap/ino/vc/commons/mixins/MailMixin",
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/application/Configuration",
    "sap/ui/Device",
    "sap/ino/commons/models/object/PersonalizeSetting",
    "sap/m/MessageBox",
    "sap/m/MessageToast",
    "sap/ino/commons/models/object/Attachment",
    "sap/ino/commons/models/core/CodeModel",
    "sap/ino/vc/commons/mixins/UserGroupMixin",
    "sap/ino/commons/formatters/BaseFormatter",
    "sap/ui/core/format/NumberFormat",
    "sap/ino/vc/iam/mixins/NotificationSettingMixin",
    "sap/ino/vc/iam/mixins/FeedsSettingMixin",
    "sap/ino/vc/iam/mixins/ProfileDataMixin",
    "sap/ino/vc/iam/mixins/UserCommonMixin",
    "sap/ino/controls/QuickViewGroupDimension",
    "sap/ui/core/format/DateFormat",
	'sap/ui/export/library',
	'sap/ui/export/Spreadsheet'
], function(BaseController, MailMixin, JSONModel, Configuration, Device, PersonalizeSetting, MessageBox, MessageToast, Attachment,
	CodeModel,
	UserGroupMixin, BaseFormatter, NumberFormat, NotificationSettingMixin, FeedsSettingMixin, ProfileDataTestMixin, UserCommonMixin,
	QuickViewGroupDimension,DateFormat, exportLibrary, Spreadsheet) {
	"use strict";

	return BaseController.extend("sap.ino.vc.iam.mySetting", jQuery.extend({}, UserGroupMixin, NotificationSettingMixin, ProfileDataTestMixin,
		FeedsSettingMixin, UserCommonMixin, {
			formatter: jQuery.extend({
				helpMenuButton: function(oSystem) {
					return oSystem.phone;
				},

				fullScreenToggle: function(oSystem) {
					// fullscreen toggling is deprecated for HTTP connections => HTTPS must be used
					return !oSystem.desktop && window.location.protocol === "https:";
				},

				displayTermsConditions: function() {
					return Configuration.isComponentActive("sap.ino.config.DISPLAY_TERMS_CONDITIONS");
				},

				termsConditions: function(sCode) {
					if (sCode === null || sCode === undefined) {
						return undefined;
					}
					var oModel = this.getView().getModel("module");
					return oModel.getProperty(sCode);
				},

				version: function() {
					return this._i18n.getResourceBundle().getText("ABOUT_VERSION_FLD", [this._oComponent.getVersion(), this._oComponent.getVersionTimestamp()]);
				},

				text: function(sText) {
					return this._i18n.getResourceBundle().getText(sText);
				},

				icon: function(sIconURL) {
					if (jQuery.isNumeric(sIconURL)) {
						sIconURL = Configuration.getAttachmentTitleImageDownloadURL(sIconURL);
					} else if (sIconURL) {
						sIconURL = "/" + sIconURL;
					} else {
						sIconURL = "sap-icon://error";
					}
					return sIconURL;
				},

				visibleWithSearch: function(bSearchVisible, bPhone, bLimitedSpace) {
					return (bPhone !== undefined && !bPhone) || !bSearchVisible || (bLimitedSpace !== undefined && !bLimitedSpace);
				},

				visibleAppTitle: function(bPhone, bTitle) {
					if (bTitle.length === 0 || bTitle.match(/^\s+$/g)) {
						var emptyTitle = true;
					}
					return (bPhone !== undefined && !bPhone) && (emptyTitle === undefined || !emptyTitle);
				},

				generateMailURL: function(sMailAddress) {
					return sap.m.URLHelper.normalizeEmail(sMailAddress);
				},

				notificationTooltip: function(nCount) {
					if (nCount) {
						var oNumberFormat = NumberFormat.getIntegerInstance({
							style: "short"
						});

						var iNum = oNumberFormat.format(nCount);
						if (iNum === 0) {
							return this._i18n.getResourceBundle().getText("SHELL_EXP_NOTIFICATION_EMPTY");
						} else if (iNum === 1) {
							return this._i18n.getResourceBundle().getText("SHELL_EXP_NOTIFICATION_SINGLE");
						} else {
							return this._i18n.getResourceBundle().getText("SHELL_EXP_NOTIFICATION_COUNT", [oNumberFormat.format(nCount)]);
						}
					}

					return this._i18n.getResourceBundle().getText("SHELL_EXP_NOTIFICATION_EMPTY");
				},

				notificationText: function(sText) {
					// the notification item does a rudimentary check for embedded bindings that can fail for texts using brackets => remove the brackets
					return sText.split("{").join("").split("}").join("");
				},

				clipboardObjectName: function(sCode) {
					return sCode ? this._i18n.getResourceBundle().getText("CLIPBOARD_OBJECT_NAME_" + sCode) : "";
				},

				navigationItemSelected: function(sRoute, sNavigationTarget) {
					if (!sRoute || !sNavigationTarget) {
						return false;
					}
					if (sRoute === sNavigationTarget ||
						sRoute === sNavigationTarget + "variant" ||
						sRoute + "list" === sNavigationTarget) {
						return true;
					}
					//prevent double selections
					var aNavigationTargets = jQuery.grep(this.menu.Navigation, function(target) {
						return sRoute === target.TO ||
							sRoute === target.TO + "variant" ||
							sRoute + "list" === target.TO;
					});
					if (aNavigationTargets.length === 0 && sRoute.indexOf("-") > -1) {
						var aRoute = sRoute.split("-");
						if (aRoute[1] === sNavigationTarget ||
							aRoute[1] === sNavigationTarget + "variant") {
							return true;
						}
						var aSubNavigationTargets = jQuery.grep(this.menu.Navigation, function(target) {
							return aRoute[1] === target.TO ||
								aRoute[1] === target.TO + "variant";
						});
						if (aSubNavigationTargets.length === 0 &&
							sRoute.split("-")[0] + 'list' === sNavigationTarget) {
							return true;
						}
					}
					return false;
				},

				navigationItemVisible: function(bBackOfficeAccess, bFrontOfficeEnabled, bMobileEnabled, bPhone, sNavigationTarget) {
					var bVisible = (!bPhone || (bPhone && bMobileEnabled)) && (bFrontOfficeEnabled || (!bFrontOfficeEnabled && bBackOfficeAccess));
					if (sNavigationTarget === "evalreqlist") {
						return bVisible && Configuration.getSystemSetting("sap.ino.config.EVAL_REQ_ACTIVE") === "1";
					}
					if (sNavigationTarget === "rewardlist") {
						return bVisible && (this.getModel("user").getProperty("/privileges/sap.ino.ui::campaign_manager") || this.getModel("user").getProperty(
								"/privileges/sap.ino.xs.rest.admin.application::execute")) && Configuration.getSystemSetting("sap.ino.config.REWARD_ACTIVE") ===
							"1";
					}
					if (sNavigationTarget !== "expertfinder") {
						return bVisible;
					} else {
						return bVisible && (this.getView().getModel("config").oData["sap.ino.config.EXPERT_FINDER_ACTIVE"] === "1");
					}
				},

				historyEnable: function(iCount) {
					return Number(iCount) >= 1;
				},

				historyTooltip: function(aHistory, iCount) {
					if (aHistory.length) {
						return this.getText("PAGE_TIT_" + (!aHistory[0].title ? "HOME" : aHistory[0].title.toUpperCase()));
					} else {
						return "";
					}
				},

				historyMenu: function(sText) {
					return this.getText("PAGE_TIT_" + (!sText ? "HOME" : sText.toUpperCase()));
				},

				formatChangeLogValue: function(sStr, sInt, sDate) {
					if (sDate) {
						return BaseFormatter.toDate(sDate);
					} else if (sInt) {
						return sInt;
					} else if (sStr) {
						return sStr;
					} else {
						return "";
					}
				},

				formatIdentityCode: function(sCode) {
					return CodeModel.getFormatter("sap.ino.xs.object.iam.IdentityLogSetting.Root")(sCode);
				}

			}, BaseController.prototype.formatter),

			requestQueue: [],

			onInit: function() {
				BaseController.prototype.onInit.apply(this, arguments);

				this.setViewProperty("/EDIT", true);
				this.setViewProperty("/ATTACHMENT_UPLOAD_URL", Attachment.getEndpointURL());

				this.aBusyControls = [this.byId("userSettings")];

				var oSystemSetting = Configuration.getSystemSettingsModel();
				this.isEnableNewNotification = oSystemSetting.getProperty("/sap.ino.config.ENABLE_NEW_NOTIFICATION") === "0" ? false : true;
				this.setViewProperty("/ENABLE_NEW_NOTIFICATION", this.isEnableNewNotification);
				this.enableFeedEmail = oSystemSetting.getProperty("/sap.ino.config.SWITCH_OFF_FEED_EMAIL") === "0" ? true : false;
				this.setViewProperty("/ENABLE_FEED_EMAIL", this.enableFeedEmail);
			},

			onBeforeRendering: function() {
				this.getProfileData();
				this.getPersonalizeSetting();

				if (this.isEnableNewNotification) {
					this.getNewNotificationSetting();
					// 	this.getNewFeedsSetting();
				} else {
					this.getNotificationSetting();
					// 	this.getFeedsSetting();
				}
				this.getNewFeedsSetting();
				this.bindIdentityLog();
				this.getMemberGroup();
				this.bindUserGroup();
				this.getProfileDataSetting();
			},

			onAfterRendering: function() {

			},

			getPersonalizeSetting: function() {
				var self = this;
				var defaultData = PersonalizeSetting.defaultPesonalize;
				PersonalizeSetting.getSettings().done(function(data) {
					var settingData = $.extend(defaultData, data.RESULT || {});
					self.getView().setModel(new JSONModel(settingData), 'PERSONALIZE');
					Configuration.setPersonalize(settingData);
				});
			},

			personalizeSave: function() {
				var self = this;
				var personalizeModel = self.getView().getModel('PERSONALIZE');
				var personalizeData = personalizeModel.getData();
				PersonalizeSetting.updateSettings({
					personalize: personalizeData
				}).done(function() {
					MessageToast.show(self.getText("PERSONALIZE_CHANGE_SUCCESS"));
					self.getView().setModel(new JSONModel(personalizeData), 'PERSONALIZE');
				});
			},
			onSettingTabSelect: function(oEvent) {
				var oSource = oEvent.getSource();
				var oSelectedKey = oSource.getSelectedKey();
				if (oSelectedKey.indexOf('mySettingIdentityCardPage') > -1) {
					this.getProfileData();
				}

			},
			
			getProfileData: function() {
				var self = this;
				var iId = Configuration.getCurrentUser().USER_ID;
				self._oIdentityModel = new JSONModel();
				if (Configuration.getUserProfileByTextURL(iId)) {
					self._oIdentityModel.loadData(Configuration.getUserProfileByTextURL(iId), {
						"USER_ID": iId
					}, true, "GET");
					self._oIdentityModel.attachRequestCompleted(null, function() {
						var indentityData = self._oIdentityModel.getData();
						var identityLogList = self.byId("identityLogList");
                         indentityData.open_group = Configuration.getSystemSetting('sap.ino.config.OPEN_GROUP_FOR_COMMUNITY_USER') * 1;						
				    	indentityData.ENABLE_GAMIFICATION = self.getView().getModel("config").getProperty("/ENABLE_GAMIFICATION") === 1 ? true : false;
						self._oIdentityModel.setData(indentityData);
						self.getView().setModel(self._oIdentityModel, "identityData");
						if (indentityData.ENABLE_GAMIFICATION) {
							self.constructGamificationDimension(self._oIdentityModel, self.byId('mySettingIdentityCardPage'));
						}
						if (identityLogList) {
							identityLogList.bindItems({
								path: "data>/" + this.getIdentityEntityName() + "(" + iId + ")/IdentityLog",
								sorter: new sap.ui.model.Sorter("CHANGED_AT", true),
								template: this.getFragment("sap.ino.vc.iam.fragments.IdentityLogTemplate")
							});
						}
					}, self);
				}
			},
            
            exportProfileData: function() {
                var EdmType = exportLibrary.EdmType;
                var aCols = [];
                var oRowBinding, oSettings, oSheet,fileName;
				var self = this;
				var iId = Configuration.getCurrentUser().USER_ID;
				
				self._oIdentityModel = new JSONModel();
				if (Configuration.getUserProfileByTextURL(iId)) {
					self._oIdentityModel.loadData(Configuration.getUserProfileByTextURL(iId), {
						"USER_ID": iId
					}, true, "GET");
					self._oIdentityModel.attachRequestCompleted(null, function() {
						var indentityData = self._oIdentityModel.getData();
            			aCols=[
            			    {
                				label: self.getText("USER_DETAILS_FIRST_NAME"),
                				property: 'Firstname',
                				type: EdmType.String
            			    },
            			    {
                				label: self.getText("SORT_MIT_LAST_NAME"),
                				property: 'Lastname',
                				type: EdmType.String
            			    },
            			    {
                				label: self.getText("IDEA_LIST_REWARD_LIST_GAMIFICATION_FLD_FULL_NAME"),
                				property: 'Fullname',
                				type: EdmType.String
            			    },
            			    {
                				label: self.getText("IDEA_LIST_REWARD_LIST_GAMIFICATION_FLD_USER_NAME"),
                				property: 'Username',
                				type: EdmType.String
            			    },
            			    {
                				label: self.getText("SORT_MIT_VALID_TO"),
                				property: 'Validationto',
                				type: EdmType.String
            			    },
                			{
                				label: self.getText("USER_DETAILS_PHONE"),
                				property: 'Phone',
                				type: EdmType.String
            			    },
            			    {
                				label: self.getText("USER_DETAILS_EMAIL"),
                				property: 'Email',
                				type: EdmType.String
                			},
                			{
                				label: self.getText("USER_DETAILS_MOBILE"),
                				property: 'Mobile',
                				type: EdmType.String
                			},
                			{
                				label: self.getText("USER_DETAILS_COST_CENTER"),
                				property: 'Costcenter',
                				type: EdmType.String
                			},
                			{
                				label: self.getText("USER_DETAILS_COMPANY"),
                				property: 'Company',
                				type: EdmType.String
                			},
                			{
                				label: self.getText("USER_DETAILS_OFFICE"),
                				property: 'Office',
                				type: EdmType.String
                			},
                			{
                				label: self.getText("USER_DETAILS_ORGANIZATION"),
                				property: 'Organization',
                				type: EdmType.String
                			},
                			{
                				label: self.getText("USER_DETAILS_COUNTRY"),
                				property: 'Country',
                				type: EdmType.String
                			},
                			{
                				label: self.getText("USER_DETAILS_ZIP_CODE"),
                				property: 'Zipcode',
                				type: EdmType.String
                			},
                			{
                				label: self.getText("USER_DETAILS_CITY"),
                				property: 'City',
                				type: EdmType.String
                			},
                			{
                				label: self.getText("USER_DETAILS_STREET"),
                				property: 'Street',
                				type: EdmType.String
                			}];
            			
            			oRowBinding = [{
                            Lastname:indentityData.LAST_NAME,
                            Firstname:indentityData.FIRST_NAME,
                            Username:indentityData.USER_NAME,
                            Fullname:indentityData.NAME,
                            Costcenter:indentityData.CORP_INFO.COST_CENTER,
                            Mobile:indentityData.CONTACT_DETAIL.MOBILE,
                            Email:indentityData.CONTACT_DETAIL.EMAIL,
                            Validationto:indentityData.VALIDATION_TO,
                            Phone:indentityData.CONTACT_DETAIL.PHONE,
                            Office:indentityData.CORP_INFO.OFFICE,
                            Company:indentityData.CORP_INFO.COMPANY,
                            Organization:indentityData.ORGANIZATION,
                            Street:indentityData.ADDR_INFO.STREET,
                            City:indentityData.ADDR_INFO.CITY,
                            Country:indentityData.ADDR_INFO.COUNTRY,
                            Zipcode:indentityData.ADDR_INFO.ZIP_CODE
                        }];
                        var oDateFormat = DateFormat.getDateTimeInstance({
                            pattern: "dd-MM-yyyy_HH-mm"
                          });
                        fileName = self.getText('USER_DETAILS_MY_PERSONAL_DATA')+oDateFormat.format(new Date())+".xlsx";
                        oSettings = {
            				workbook: {
            					columns: aCols
            				},
            				dataSource: oRowBinding,
            				fileName: fileName
            			};
                        oSheet = new Spreadsheet(oSettings);
            			oSheet.build().finally(function () {
            				oSheet.destroy();
            			});
					}, self);
					
				} 


			},
            
			bindIdentityLog: function() {
				var iId = Configuration.getCurrentUser().USER_ID;
				if (this.byId("changeHistoryLog")) {
					this.byId("changeHistoryLog").bindItems({
						path: "data>/" + this.getIdentityEntityName() + "(" + iId + ")/IdentityLog/Results"
					});
				}
			},

			getMemberGroup: function() {
				var self = this;
				var openGroup = Configuration.getSystemSetting('sap.ino.config.OPEN_GROUP_FOR_COMMUNITY_USER') * 1;
				self.setModel(new JSONModel(openGroup), 'identityData>/open_group');
				if (openGroup) {
					if (!this.requestQueue.length) {
						this.requestQueue.push(this.getMemberGroups());
						this.requestQueue[0].done(function(data) {
							self.setModel(new JSONModel(data), 'identityData>/groups');
						});
					}
				}

				this.getMemberGroups().done(function(data) {
					self.setModel(new JSONModel(data), 'identityData>/groups');
				});
			},

			bindUserGroup: function() {
				var self = this;
				var view = this.getView();
				var groupTable = view.byId('mySettingUserGroup--userGroupTable');
				var groupRequire = this._bindUserGroupModel();
				groupTable.getBinding('rows').filter([]);
				groupRequire.attachRequestCompleted(function() {
					self.reBindSelectedData(groupTable);
				});
			},

			saveUserGroup: function() {
				var self = this;
				var view = this.getView();
				var groupTable = view.byId('mySettingUserGroup--userGroupTable');
				this.putGroupSelected(groupTable).done(function() {
				    var oTable = self.getView().byId('mySettingUserGroup--userGroupTable');
		            var tableData = oTable.getModel('USER_GROUPS').getData();
		            var selectedNoneGorup = tableData.SELECTED_NONE || false;	
		            if(oTable.getSelectedIndices().length === 0 && !selectedNoneGorup){
		                MessageToast.show(self.getText('USER_GROUP_UNSELECT_SUCCESS'));
		            } else {
					MessageToast.show(self.getText('USER_GROUP_SELECT_SUCCESS'));
		            }
				});
			},

			getIdentityEntityName: function() {
				return "Identity";
			},
			constructGamificationDimension: function(oModel, oIdentityCardPage) {
				var oQuickViewDimensionCtrl, sImageUrl, sStartLevel, sEndLevel, iDiffPointsBTlvl, iPointsToNextLvl, currentPointsBWBadge;
				if (!oIdentityCardPage) {
					return;
				}
				oQuickViewDimensionCtrl = oIdentityCardPage.getContent()[0];
				var aDimensions = oModel.getData().GAMIFICATION_INFO;
				oQuickViewDimensionCtrl.removeAllDimensionGroups();
				if (!Array.isArray(aDimensions)) {
					return;
				}
				for (var i = 0; i < aDimensions.length; i++) {
					sStartLevel = "";
					sEndLevel = "";
					iDiffPointsBTlvl = 0;
					iPointsToNextLvl = 0;
					sImageUrl = "";
					currentPointsBWBadge = 0;
					if (JSON.stringify(aDimensions[i].BADGE) !== "{}") {
						sStartLevel = aDimensions[i].BADGE.currentBadge.NAME;
						sEndLevel = !aDimensions[i].BADGE.nextBadge.NAME ? "" : aDimensions[i].BADGE.nextBadge.NAME;

						if (aDimensions[i].BADGE.nextBadge.NAME && aDimensions[i].BADGE.currentBadge.NAME) {
							iDiffPointsBTlvl = aDimensions[i].BADGE.nextBadge.BADGE_VALUE - aDimensions[i].BADGE.currentBadge.BADGE_VALUE;
						}
						if (aDimensions[i].BADGE.nextBadge.NAME && !aDimensions[i].BADGE.currentBadge.NAME) {
							iDiffPointsBTlvl = aDimensions[i].BADGE.nextBadge.BADGE_VALUE;
						}
						if (!aDimensions[i].BADGE.nextBadge.NAME && aDimensions[i].BADGE.currentBadge.NAME) {
							iDiffPointsBTlvl = aDimensions[i].BADGE.currentBadge.BADGE_VALUE;
						}

						iPointsToNextLvl = aDimensions[i].BADGE.nextBadge.NAME ? aDimensions[i].BADGE.nextBadge.BADGE_VALUE - parseInt(aDimensions[i].TOTAL,
							10) : 0;

						if (JSON.stringify(aDimensions[i].BADGE.currentBadge) !== "{}" && aDimensions[i].BADGE.currentBadge.Attachment.length > 0) {
							sImageUrl = Configuration.getAttachmentTitleImageDownloadURL(aDimensions[i].BADGE.currentBadge.Attachment[0].ATTACHMENT_ID);
						}
						if (JSON.stringify(aDimensions[i].BADGE.currentBadge) !== "{}") {
							var iDiffTotalBWBadge = parseInt(aDimensions[i].TOTAL, 10) - aDimensions[i].BADGE.currentBadge.BADGE_VALUE;
							currentPointsBWBadge = iDiffTotalBWBadge > 0 ? iDiffTotalBWBadge : parseInt(aDimensions[i].TOTAL, 10);
						} else {
							currentPointsBWBadge = parseInt(aDimensions[i].TOTAL, 10);
						}
					}

					oQuickViewDimensionCtrl.addDimensionGroup(new QuickViewGroupDimension({
						heading: aDimensions[i].NAME,
						headingIcon: sImageUrl,
						totalPoints: parseInt(aDimensions[i].TOTAL, 10),
						pointsToNextLevel: iPointsToNextLvl,
						startLevel: sStartLevel, //aDimensions[i].currentBadge.NAME,
						nextLevel: sEndLevel, //aDimensions[i].nextBadge.NAME,
						currentPointsBWBadge: currentPointsBWBadge,
						diffPointsToNextLevel: iDiffPointsBTlvl,
						dimensionUnit: aDimensions[i].UNIT,
						redeemPoints: aDimensions[i].TOTAL_FOR_REDEEM,
						redeemEnabled: !!aDimensions[i].REDEEM
					}));
				}

			}
		}));
});
}; // end of sap/ino/vc/iam/mySetting.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.DecisionQuickView.controller') ) {
jQuery.sap.declare('sap.ino.vc.idea.DecisionQuickView.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/vc/idea/DecisionQuickView.controller",[
    "sap/ino/vc/commons/BaseObjectController"
], function (BaseController) {
    "use strict";

   return BaseController.extend("sap.ino.vc.idea.DecisionQuickView", jQuery.extend({}, {
        
        open: function (oControl, iId) {
            var that = this;
            var oView = this.getView();
            var oDecisionCard = oView.byId("decisionCard");
            
            oView.bindElement({
                path: "data>/IdeaDecision(" + iId + ")",
                events: {
                    change: function (oEvent) {
                        jQuery.sap.delayedCall(0, that, function () {
                            oDecisionCard.openBy(oControl);
                        });
                    }
                }
            });
        }
    }));

});
}; // end of sap/ino/vc/idea/DecisionQuickView.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.Integration.controller') ) {
jQuery.sap.declare('sap.ino.vc.idea.Integration.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.m.DialogType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ValueState'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/Integration.controller",[
    "sap/ino/commons/models/aof/ApplicationObjectChange",
    "sap/ino/vc/commons/BaseObjectController",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/m/Dialog",
    "sap/m/DialogType",
    "sap/ui/core/ValueState",
    "sap/m/Button",
	"sap/m/ButtonType",
	"sap/m/Text",
    "sap/ino/commons/models/object/IdeaObjectIntegration",
    "sap/m/MessageBox",
    "sap/m/FlexBox",
    "sap/m/Link",
    "sap/ino/commons/application/Configuration"
], function(ApplicationObjectChange, BaseController, JSONModel, MessageToast, Dialog, DialogType, ValueState, Button, ButtonType, Text, IdeaObjectIntegration, MessageBox, FlexBox, Link, Configuration) {
	"use strict";

	return BaseController.extend("sap.ino.vc.idea.Integration", {

		onInit: function() {
			BaseController.prototype.onInit.apply(this, arguments);
			var oIntegrationModel = new JSONModel();
			this._initHandleIdeaObjectIntegrationAOChange();
			this.getView().setModel(oIntegrationModel, "integration");
            this._oRouter = this.getOwnerComponent().getRouter();			
			this._oRouter.attachRouteMatched(this._getIntegrationObjectList, this);
		},
		visibleLink: function(oFieldCode) {
			if (oFieldCode && oFieldCode.indexOf('URL') > -1) {
				return true;
			} else {
				return false;
			}
		},
		visibleText: function(oFieldCode) {
			if (oFieldCode && oFieldCode.indexOf('URL') > -1) {
				return false;
			} else {
				return true;
			}
		},
		visibleField: function(oFieldCode) {
			if (oFieldCode) {
				return true;
			} else {
				return false;
			}
		},
		onAfterRendering: function() {
			var oIntegrationModel = this.getModel("integration");
			var that = this;
			var oIdea = this.getObjectModel();
			var sRouterContext = this.getOwnerComponent().getRouter().getContext();
			
			if (oIdea && oIdea.getProperty("/ID") && sRouterContext.indexOf("sectionIntegration") > -1 ) {
				this.getView().setBusy(true);
				IdeaObjectIntegration.getIdeaIntegrationList({
					IDEA_ID: oIdea.getProperty("/ID"),
					CAMPAIGN_ID: oIdea.getProperty("/CAMPAIGN_ID")
				}).done(function(results) {
					oIntegrationModel.setData(results.RESULT);
					that.getView().setBusy(false);
				});
			}
		},
		_getIntegrationObjectList: function(){
			var oIntegrationModel = this.getModel("integration");
			var that = this;			
			var sRouterContext = this.getOwnerComponent().getRouter().getContext();			
			if(this.getCurrentRoute() === "idea-display" && sRouterContext.indexOf("sectionIntegration") > -1 ){
			var oIdea = this.getObjectModel();			    
			if (oIdea && oIdea.getProperty("/ID")) {
				this.getView().setBusy(true);
				IdeaObjectIntegration.getIdeaIntegrationList({
					IDEA_ID: oIdea.getProperty("/ID"),
					CAMPAIGN_ID: oIdea.getProperty("/CAMPAIGN_ID")
				}).done(function(results) {
					oIntegrationModel.setData(results.RESULT);
					that.getView().setBusy(false);
				});
			}	
			}
		},
		visibleRefresh: function(bVisible) {
			return bVisible;
		},
		enableRemove: function(bEnable) {
			return true;
		},
		formatDate: function(value, oFieldCode) {
			if (oFieldCode && (oFieldCode.indexOf('CREATED_AT') > -1 || oFieldCode.indexOf('LAST_REFRESHED_AT') > -1 || oFieldCode.indexOf('DATE') > -1)) {
				var oUtcDate = new Date(value);
				var iMins = oUtcDate.getTimezoneOffset();
				var oActualTime = oUtcDate.getTime() + ( - iMins * 60 * 1000);
				var oDate = new Date(oActualTime);
				if (!oDate.getTime()) {
					//Once Date invalid
					return value;
				} else {
					var oDateFormat = sap.ui.core.format.DateFormat.getDateInstance({
						pattern: "MMM d, yyyy HH:mm:ss"
					});
					return oDateFormat.format(oDate);
				}
			} else {
				return value;
			}
		},
		enableLink: function(oLinkValue) {
		    if(!oLinkValue){
		        return false;
		    }
			oLinkValue = oLinkValue.trim();
			if (!oLinkValue || oLinkValue === "") {
				return false;
			}
			if (oLinkValue && oLinkValue.indexOf("http://") !== 0 && oLinkValue.indexOf("https://") !== 0 && oLinkValue.indexOf("mailto:") !== 0) {
				oLinkValue = "http://" + oLinkValue;
			}

			return jQuery.sap.validateUrl(oLinkValue);

		},
		onPressRefresh: function(oEvent) {
			var oSource = oEvent.getSource();
			oSource.setBusy(true);
			var that = this;
			var oBinding = oSource.getBinding("enabled");
			var sPath = oBinding.getContext().sPath;
			var oIntegrationModel = this.getModel("integration");
			var oIdea = this.getObjectModel();
			var oRefreshReq = {
				IDEA_ID: oIdea.getProperty("/ID"),
				CAMPAIGN_ID: oIdea.getProperty("/CAMPAIGN_ID"),
				API_TECH_NAME: oIntegrationModel.getProperty(sPath + "/API_TECHNICAL_NAME"),
				INTEGRATION_OBJECT_UUID: oIntegrationModel.getProperty(sPath + "/INTEGRATION_OBJECT_UUID")
			};
			var oPrimiseRequest = IdeaObjectIntegration.queryObject(oRefreshReq);
			oPrimiseRequest.done(function(res) {
			    oSource.setBusy(false);
			    var requestText = 	res.RESULT.status.toString().includes('20') ? 'Your request to refresh the integration object has been sent successfully.' : 'Your request to refresh the integration object has been failed.';
			    var sShowText = requestText + 'The request ID is ' + (res.RESULT.generatedId ? res.RESULT.generatedId[-1] : '') + ' and message status is: ' + (res.RESULT.status ? res.RESULT.status : '') + '.';   
			    var oTextControl = new Text({text: sShowText});
			    var oLinkControl = new Link({
                    href : Configuration.getBackendRootURL() + '/sap/ino/config#integrationMonitorList',
                    text: 'For more detail, please navigate to Innovation Office->Monitor->Integration',
                    target: '_blank'
                });
				if (!this.oSuccessMessageDialog) {
				this.oSuccessMessageDialog = new Dialog({
					type: DialogType.Message,
					title: res.RESULT.status.toString().includes('20') ? ValueState.Success : ValueState.Error,
					state: res.RESULT.status.toString().includes('20') ? ValueState.Success : ValueState.Error,
					content:new FlexBox({
            					items: [oTextControl,oLinkControl],
            					alignItems: "Start",
            					justifyContent: "Start",
            					alignContent: "Start"
            		}),
					beginButton: new Button({
						type: ButtonType.Emphasized,
						text: "OK",
						press: function () {
							this.oSuccessMessageDialog.close();
						}.bind(this)
					})
				});
			}

			this.oSuccessMessageDialog.open();

			});
			oPrimiseRequest.fail(function(oMessage) {
			    oSource.setBusy(false);
				if (oMessage.MESSAGES.length > 0) {
					MessageToast.show(oMessage.MESSAGES[0].MESSAGE_TEXT);
				} else {
					MessageToast.show(that.getText("IDEA_OBJECT_INTEGRATION_REFRESH_FAIL"));
				}
			});
		},
		onPressRemove: function(oEvent) {
			var oSource = oEvent.getSource();
			var that = this;
			var oBinding = oSource.getBinding("enabled");
			var sPath = oBinding.getContext().sPath;
			var oIntegrationModel = this.getModel("integration");
			var sObjectUUID = oIntegrationModel.getProperty(sPath + "/INTEGRATION_OBJECT_UUID");
			MessageBox.confirm(that.getText("IDEA_OBJECT_INTEGRATION_MSG_CONFIRM_REMOVE"), {
				title: that.getText("IDEA_OBJECT_INTEGRATION_REMOVE_POP_TITLE"),
				icon: MessageBox.Icon.WARNING,
				actions: [MessageBox.Action.OK, MessageBox.Action.CANCEL],
				onClose: function(sDialogAction) {
					if (sDialogAction === MessageBox.Action.OK) {
						IdeaObjectIntegration.removeObject({
							INTEGRATION_OBJECT_UUID: sObjectUUID
						}).done(function() {
							MessageToast.show(that.getText("IDEA_OBJECT_INTEGRATION_REMOVE_SUCCESS"));
						}).fail(function() {
							MessageToast.show(that.getText("IDEA_OBJECT_INTEGRATION_REMOVE_FAIL"));
						});
					}
				}
			});
		},
		_initHandleIdeaObjectIntegrationAOChange: function() {
			var that = this;

			var fnAOChangeListener = function(oEvent) {
				var sAction = oEvent && oEvent.getParameter("actionName");
				var oChangeRequest = oEvent.getParameter("changeRequest");
				if (oEvent.getParameter("object").getMetadata().getName() === "sap.ino.commons.models.object.IdeaObjectIntegration") {

					if (sAction && ["createObject", "queryObject", "removeObject","linkExistedObject"].indexOf(sAction) > -1) {
						//that.rebindList(that.getView().byId("integrationObjectsList"));
						var oIdea = that.getObjectModel();
						var oIntegrationModel = that.getModel("integration");
						IdeaObjectIntegration.getIdeaIntegrationList({
							IDEA_ID: oIdea.getProperty("/ID"),
							CAMPAIGN_ID: oIdea.getProperty("/CAMPAIGN_ID")
						}).done(function(results) {
							oIntegrationModel.setData(results.RESULT);
						});
					}
				}
			};
			ApplicationObjectChange.attachChange(ApplicationObjectChange.Action.Action, fnAOChangeListener);
		},

		rebindList: function(oList) {
			if (oList) {
				var oBindingInfo = oList.getBindingInfo("items");
				oList.bindItems(oBindingInfo);
			}
		}

	});
});
}; // end of sap/ino/vc/idea/Integration.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.Modify.controller') ) {
jQuery.sap.declare('sap.ino.vc.idea.Modify.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.Token'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ListItem'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.HTML'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.message.Message'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.CheckBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Input'); // unlisted dependency retained
jQuery.sap.require('sap.m.ComboBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.String'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.Date'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/Modify.controller",[
    "sap/ino/vc/commons/BaseObjectModifyController",
    "sap/ino/commons/models/object/Idea",
    "sap/ino/commons/models/object/Attachment",
    "sap/ino/commons/application/WebAnalytics",
    "sap/m/Token",
    "sap/m/MessageToast",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/ui/model/Sorter",
    "sap/ui/core/ListItem",
    "sap/ui/core/HTML",
    "sap/ino/commons/application/Configuration",
    "sap/ino/controls/MobileTextEditor",
    "sap/ino/vc/commons/TopLevelPageFacet",
    "sap/ui/model/json/JSONModel",
    "sap/ui/core/MessageType",
    "sap/ui/core/message/Message",
    "sap/ui/core/ResizeHandler",
    "sap/ui/Device",
    "sap/m/MessageBox",
    "sap/m/Label",
    "sap/m/CheckBox",
    "sap/m/Input",
    "sap/m/ComboBox",
    "sap/ino/commons/models/core/CodeModel",
    "sap/ui/model/type/String",
    "sap/ino/commons/models/types/IntegerType",
    "sap/ino/commons/models/types/FloatType",
    "sap/ui/model/odata/type/Date",
    "sap/ino/commons/models/types/IntegerNullableType",
    "sap/ino/commons/models/types/FloatNullableType",
    "sap/ino/commons/models/types/IntNullableBooleanType",
    "sap/ino/vc/commons/mixins/SimilarIdeasMixin",
    "sap/ino/vc/commons/mixins/RichTextInitMixin"
], function(
	BaseController,
	Idea,
	Attachment,
	WebAnalytics,
	Token,
	MessageToast,
	Filter,
	FilterOperator,
	Sorter,
	ListItem,
	HTML,
	Configuration,
	MobileTextEditor,
	TopLevelPageFacet,
	JSONModel,
	MessageType,
	Message,
	ResizeHandler,
	Device,
	MessageBox,
	Label,
	CheckBox,
	Input,
	ComboBox,
	CodeModel,
	StringType,
	IntegerType,
	FloatType,
	DateType,
	IntegerNullableType,
	FloatNullableType,
	IntNullableBooleanType,
	SimilarIdeasMixin,
	RichTextInitMixin) {
	"use strict";
	var mDataType = {
		BOOLEAN: "BOOL_VALUE",
		TEXT: "TEXT_VALUE",
		INTEGER: "NUM_VALUE",
		NUMERIC: "NUM_VALUE",
		RICHTEXT: "RICH_TEXT_VALUE",
		DATE: "DATE_VALUE"
	};
	
	return BaseController.extend("sap.ino.vc.idea.Modify", jQuery.extend({}, TopLevelPageFacet, SimilarIdeasMixin, RichTextInitMixin, {
		routes: ["idea-edit", "idea-create"],
		preCheck: true,
		onInit: function() {
			BaseController.prototype.onInit.apply(this, arguments);
			this._dViewShown = jQuery.Deferred();
			this.setViewProperty("/EDIT", true);
			this.setViewProperty("/ATTACHMENT_UPLOAD_URL", Attachment.getEndpointURL());
			this.addMultiInputHandling(this.byId("Contributors"), {
				childNodeName: "Contributors",
				childNodeNameSingular: "Contributor",
				suggestion: {
					key: "ID",
					text: "NAME",
					additionalText: "USER_NAME",
					path: "data>/SearchIdentity(searchToken='$suggestValue')/Results",
					filters: [new Filter({
						path: "TYPE_CODE",
						operator: FilterOperator.EQ,
						value1: "USER"
					})],
					sorter: new Sorter("NAME")
				},
				token: {
					key: "IDENTITY_ID",
					text: "NAME",
					editable: "{=!${object>/CONTRIBUTION_READ_ONLY}}"
				}
			});

			this.addMultiInputHandling(this.byId("Tags"), {
				childNodeName: "Tags",
				childNodeNameSingular: "Tag",
				suggestion: {
					key: "NAME",
					text: "NAME",
					path: "data>/SearchTagsParams(searchToken='$suggestValue')/Results",
					filter: [],
					sorter: []
				},
				token: {
					key: "NAME",
					text: "NAME"
				}
			});
		},

		onRouteMatched: function(oEvent) {
			//CSN :1680062499　dropdownlist value is not been reset
			var oCampaignComboBox = this.byId("campaignComboBox");
			oCampaignComboBox.setValue(undefined);
			var oMode = oEvent.getParameters().name;
			var that = this;
			//this.destroyRTE();
			BaseController.prototype.onRouteMatched.apply(this, arguments);
			// idea object model has to be set before executing promises
			var oIdea = this.getObjectModel();
			oIdea.getDataInitializedPromise().done(function(oData) {
				that.bindCampaignList(oData, oIdea.isNew());
				that.bindAnonymousList(oData, oIdea.isNew());
				oIdea.setProperty("/OLD_RESP_NAME", oIdea.getProperty("/RESP_VALUE_NAME"));
				that._oldCampaignId = oIdea.getProperty("/CAMPAIGN_ID");
				that._oldCampaignForm = oIdea.getProperty("/CAMPAIGN_FORM_CODE");
				//Set Idea form Fields Value when Edit Mode
				var oFormFields = that.byId("ideaFormAddFields");
				if (oMode === "idea-edit") {
					//Set the Responsibility List Row
					that.setRespListProperty.call(that, oIdea, oIdea.oData.RESP_NAME);
					if (oFormFields.getItems()[0]) {
						//remove all the fields
						oFormFields.removeAllItems();
					}
					if (oIdea.oData.CAMPAIGN_ID) {
						that.getModel("data").read("/CampaignSmall(" + oIdea.oData.CAMPAIGN_ID + ")/FormFields", {
							urlParameters: {
								"$orderby": "SEQUENCE_NO"
							},
							success: function(oResult) {
								var aFields = oResult.results;
								//that.addFormFields.call(that, aFields, oFormFields, oIdea);
								var aFormFieldsValue = oIdea.oData.FieldsValue;
								if (aFields && aFormFieldsValue && aFormFieldsValue.length > 0 && aFields.length > 0 && aFields[0].FORM_CODE ===
									aFormFieldsValue[0].FORM_CODE) {
								// 	var iLength = aFields.length - aFormFieldsValue.length;
								// 	var aNewAddFields = [];
								// 	aNewAddFields = aFields.splice(aFormFieldsValue.length, iLength);
									var aNewAddFields = that.cacluateNewFieldsAdded(aFields,aFormFieldsValue);
									oIdea.setProperty("/NEW_ADDED_FIELDS", aNewAddFields);
								}
								that.addFormFields.call(that, oIdea.oData.FieldsValue, oFormFields, oIdea);
							},
							error: function(oMessage) {
								MessageToast.show(oMessage.message);
							}
						});

					}
					that.syncAuthorToContributionShare();
				} else {
					that.setRespListProperty.call(that, oIdea, oIdea.oData.RESP_VALUE_CODE);
					if (oFormFields.getItems()[0]) {
						//remove all the fields
						oFormFields.removeAllItems();
					}
					//From the campaign page to create Idea, go to read the Campaign's form fields	
					if (oIdea.oData.CAMPAIGN_ID) {
						that.getModel("data").read("/CampaignSmall(" + oIdea.oData.CAMPAIGN_ID + ")/FormFields", {
							urlParameters: {
								"$orderby": "SEQUENCE_NO"
							},
							success: function(oResult) {
								var aFields = oResult.results;
								that.addFormFields.call(that, aFields, oFormFields, oIdea);
							},
							error: function(oMessage) {
								MessageToast.show(oMessage.message);
							}
						});

					}
				}

			});

			jQuery.when(oIdea.getPropertyModelInitializedPromise(), this._dViewShown).done(function(oProperties) {
				that.initRTE(oProperties);
				that.initIdeaDetails();
				//When delete an idea then press create idea button the page will display 'object not existed'
				if (that.getObjectModel().isNew() && !that.getObjectExists()) {
					that.setObjectExists(true);
				}
				if (!that.getObjectModel().getPropertyModel().getProperty("/actions/modify/enabled") && !that.getObjectModel().getPropertyModel().getProperty(
					"/actions/del/enabled")) {
					that.setObjectExists(false);
				}
			});

			var systeamSetting = Configuration.getSystemSetting("sap.ino.config.DISABLE_IDEA_IMAGE");
			var systeamSettingPhaseBar = Configuration.getSystemSetting("sap.ino.config.DISABLE_IDEA_IMAGE_HIDE_PHASE_BAR");
			this.setViewProperty('/ENABLE_IDEA_IMAGE', !(systeamSetting * 1) && !(systeamSettingPhaseBar * 1));

			this.setHelp("IDEA_MODIFY");
			this.showSection("sectionDetails");
			this.byId("RespList").onAfterRendering = function() {
				sap.m.Input.prototype.onAfterRendering.apply(this);
				that.byId("NAME").focus();
			};
		},
        cacluateNewFieldsAdded: function(campaignFields,fieldsValue){
            var aNewFields = [];
            var fnFilterValue = function(fields, code){
                return fields.filter(function(oValue){
                    return oValue.CODE === code;
                });
            };
           for(var i = 0 ; i < campaignFields.length; i++){
                var aFilter = fnFilterValue(fieldsValue,campaignFields[i].CODE);
                if(aFilter.length === 0 && campaignFields[i].IS_ACTIVE){
                    aNewFields.push(campaignFields[i]);
                }
           }
           return aNewFields;
           
        },
		/*
		 * Deletes current object and navigates idea list
		 */
		onDelete: function(oEvent) {
			var oController = this;
			var oDelBtn = oEvent.getSource();
			var oObjectModel = oController.getObjectModel();
			var ppmConfig = Configuration.getSystemSettingsModel().getProperty("/sap.ino.config.PPM_INTEGRATION_ACTIVE");
			var intObjectExisted = oObjectModel.getProperty("/INTEGRATION_OBJECT_EXIST");
			var bHasReward = oObjectModel.getPropertyModel().getProperty("/actions/del/customProperties/hasReward");
			var bDeleteAllowed = oObjectModel.getPropertyModel().getProperty("/actions/del/enabled");
			var bIsMergedWithVote = oObjectModel.getPropertyModel().getProperty("/actions/del/customProperties/isMergeedWithVote");
			if (bHasReward) {
				//has reward ==> can't delete
				MessageToast.show(this.getText("MSG_IDEA_HAVE_REWARD_CANNOT_DELETE"));
			} else if (!bDeleteAllowed) {
				MessageToast.show(this.getText("OBJECT_MSG_DELETE_FAILED"));
			} else if (bIsMergedWithVote) {
				MessageToast.show(this.getText("MSG_IDEA_MERGED_WITH_VOTE_CANNOT_DELETE"));
			} else {
				//EVALUATION 
				var bHasEvaluation = oObjectModel.getProperty("/EVALUATION_COUNT");
				var isManager = oObjectModel.getPropertyModel().getProperty("/actions/del/customProperties/isManager");
				if (!bHasEvaluation || (bHasEvaluation && isManager)) {
					//havn't evaluation / hava evaluation and the user is manager/coach ==>add ppm check, then delete
					//var msgConfirm = ppmConfig === "1" ? "MSG_IDEA_CAMP_MANAGER_DEL_CONFIRM_HAVE_PPM" : "MSG_DEL_CONFIRM";
					var msgConfirm = "MSG_DEL_CONFIRM";
					if (ppmConfig === "1" || intObjectExisted) { //PPM Check and integration object check
						msgConfirm = "MSG_IDEA_CAMP_MANAGER_DEL_CONFIRM_HAVE_PPM_INTEGRATION";
					}

					var oDelRequest = oController.executeObjectAction("del", {
						messages: {
							confirm: msgConfirm,
							success: "MSG_DEL_SUCCESS"
						}
					});
					oDelRequest.done(function(oResponse) {
						if (oResponse && oResponse.confirmationCancelled === true) {
							if (oDelBtn && jQuery.type(oDelBtn.focus) === "function") {
								oDelBtn.focus();
							}
							return;
						}
						oController.navigateTo("idealist");
					});
					// 	oDelRequest.fail(function(oResponse) {
					// 		if (oResponse.MESSAGES && oResponse.MESSAGES.length > 0) {
					// 			MessageToast.show(oResponse.MESSAGES[0].MESSAGE_TEXT);
					// 		}
					// 	}); 

				} else {
					//has evaluation and he user is submitter==> can't delete idea
					MessageToast.show(this.getText("MSG_IDEA_DEL_FAILED_SUBMITTER_HAVE_EVALUATION"));
				}
			}
			/***
			oModel.read("/IdeaFull(" + oObjectModel.getProperty("/ID") + ")/EvaluationRequestsNumber/$count", {
				success: function(oResult) {
					var mgrPrivilege = oObjectModel.getPropertyModel().getProperty("/actions/del/customProperties/isManager"),
						oEvalReqCount = Number(oResult);
					if (!mgrPrivilege && oEvalReqCount >= 1) {
						MessageToast.show(oController.getText("MSG_IDEA_EXISTS_EVALUATION_REQUEST"));
						return;
					}
					var msgConfirm = oEvalReqCount >= 1 ? "MSG_IDEA_CAMP_MANAGER_DEL_CONFIRM" : "MSG_DEL_CONFIRM";
					var oDelRequest = oController.executeObjectAction("del", {
						messages: {
							confirm: msgConfirm,
							success: "MSG_DEL_SUCCESS"
						}
					});
					oDelRequest.done(function(oResponse) {
						if (oResponse && oResponse.confirmationCancelled === true) {
							if (oDelBtn && jQuery.type(oDelBtn.focus) === "function") {
								oDelBtn.focus();
							}
							return;
						}
						oController.navigateTo("idealist");
					});
					oDelRequest.fail(function(oResponse) {
						if (oResponse.MESSAGES && oResponse.MESSAGES.length > 0) {
							MessageToast.show(oResponse.MESSAGES[0].MESSAGE_TEXT);
						}
					});
				}
			});
			***/
		},

		onCampaignSelectionChange: function() {
			var that = this;
			var oIdea = this.getObjectModel();
			var oFormFields = this.byId("ideaFormAddFields");
			this.resetClientMessages();
			if (oFormFields.getItems()[0]) {
				//remove all the fields
				oFormFields.removeAllItems();
				if (oIdea._isNew) {
					oIdea.oData.FieldsValue = [];
				}
			}
			//Clear the Responsiblity List Value field
			oIdea.setProperty("/RESP_VALUE_CODE", "");
			oIdea.setProperty("/RESP_VALUE_NAME", "");
			oIdea.setProperty("/RESP_VALUE_DESCRIPTION", "");
			var oComboBox = this.byId("campaignComboBox");
			var sCampaignId = oComboBox.getSelectedKey();

			if (sCampaignId > 0 && oComboBox) {
				var sCampaignTitle = oComboBox.getItemByKey(sCampaignId).getProperty("text");
				oComboBox.setValue(sCampaignTitle);
			}
			if (!oIdea._isNew) {
				//When Edit mode, if the idea form is not the same with the Campagin
				//then Pop-up message box to decide use which form  
				//If Formfields Not changed, then no need to reload the new fields from the campaign 
				this.onFormChanged.call(this, oIdea, sCampaignId, oFormFields, oComboBox);
				//that.syncAuthorToContributionShare();
			} else {
				//When create Idea, read campaign odata directly
				if (sCampaignId) {
					this.getModel("data").read("/CampaignSmall(" + sCampaignId + ")/FormFields", {
						urlParameters: {
							"$orderby": "SEQUENCE_NO"
						},
						success: function(oData) {
							var mFields = oData.results;
							that.addFormFields.call(that, mFields, oFormFields, oIdea);
							//that.syncAuthorToContributionShare();
						},
						error: function(oMessage) {
							MessageToast.show(oMessage.message);
						}
					});
				}
			}
			var oIdeaData = this.getModel("data");
			oIdeaData.attachRequestCompleted(oIdeaData, that.syncAuthorToContributionShareBinding, that);
			this.bindSimilarIdeas();
			this.bindAnonymousList(oIdeaData, oIdea.isNew(), sCampaignId);
			//var sPrefix = Configuration.getBackendRootURL() + "/sap/ino/";
			//var newIdeaCreationUrl = sPrefix + this.getNavigationLink(this.getCurrentRoute()) + "?campaign=" + sCampaignId;
			//window.history.pushState(null, null, newIdeaCreationUrl);
		},

		addFormFields: function(aFields, oFormFields, oIdea, oDialogAction) {
			var that = this;
			if (that.aCheckBoxes) {
				that.aCheckBoxes = [];
			}
			if (that.aComboBoxes) {
				that.aComboBoxes = [];
			}
			var fnGetDataType = function(oField) {
				var oType;

				switch (oField.DATATYPE_CODE) {
					case "BOOLEAN":
						oType = !oField.VALUE_OPTION_LIST_CODE ? new IntNullableBooleanType(null) : new sap.ino.commons.models.types.IntegerType();
						break;
					case "INTEGER":
						if (oField.MANDATORY) {
							oType = new IntegerType(null, {
								minimum: (oField.NUM_VALUE_MIN || undefined),
								maximum: (oField.NUM_VALUE_MAX || undefined)
							});
						} else {
							oType = new IntegerNullableType(null, {
								minimum: (oField.NUM_VALUE_MIN || undefined),
								maximum: (oField.NUM_VALUE_MAX || undefined)
							});
						}

						break;
					case "NUMERIC":
						if (oField.MANDATORY) {
							oType = new FloatType({
								groupingEnabled: false
							}, {
								minimum: (oField.NUM_VALUE_MIN || undefined),
								maximum: (oField.NUM_VALUE_MAX || undefined)
							});
						} else {
							oType = new FloatNullableType({
								groupingEnabled: false
							}, {
								minimum: (oField.NUM_VALUE_MIN || undefined),
								maximum: (oField.NUM_VALUE_MAX || undefined)
							});
						}
						break;
					case "TEXT":
						oType = new StringType(null, {
							minLength: (oField.MANDATORY ? 1 : undefined)
						});
						break;
					case "RICHTEXT":
						oType = new StringType(null, {
							minLength: (oField.MANDATORY ? 1 : undefined)
						});
						break;
					case "DATE":
						oType = new DateType(null, {
							nullable: (oField.MANDATORY ? false : true)
						});
						break;
					default:
						break;
				}

				return oType;
			};
			//fix bug for next monday
			var onSelectionChangeLaborDatum = function(oEvent) {
				var sValue = oEvent.getParameters().value;
				var oSource = oEvent.getSource();
				var oItem = oSource.getItemByText(sValue);
				if (oItem === null) {
					var oMessage = new Message({
						code: "IDEA_FORM_MSG_DROPDOWN_LIST",
						type: MessageType.Error
					});
					this.oIdeaFormMessage = oMessage;
					that.setClientMessage(oMessage, this);
				} else {
					that.resetClientMessages();
				}
			};
			var onSelectionChangeWrongData = function(oEvent) {
				var oSource = oEvent.getSource();
				var sValue = oSource.getValue();
				var oItem = oSource.getItemByText(sValue);
				if (sValue && !oItem) {
					that.setClientMessage(
						new Message({
							code: "IDEA_FORM_MSG_DROPDOWN_LIST",
							type: MessageType.Error
						}),
						this);
				} else {
					that.resetClientMessages();
				}
			};
			var fnChkboxSelect = function(oEvent) {
				if (!this.getSelected()) {
					this.setValueState('Error');
					that.setClientMessage(
						new Message({
							code: "IDEA_OBJECT_MSG_CHECK_BOX_UNTICK",
							type: MessageType.Error
						}), this);

				} else {
					that.resetClientMessages(oEvent.getParameter('id'));
					this.setValueState('None');
				}
			};
			var bEnableEdit = oIdea.getPropertyModel().getProperty("/nodes/Root/attributes/CAMPAIGN_ID/changeable");
			var aNewAddedFields = oIdea.getProperty("/NEW_ADDED_FIELDS");
			if (aNewAddedFields && aNewAddedFields.length > 0) {
				aFields = aFields.concat(aNewAddedFields);
			//Sort by Sequence Number
    		  aFields.sort(function(o1, o2) {
    			if (o1.SEQUENCE_NO < o2.SEQUENCE_NO) {
    				return -1;
    			} else {
    				return 1;
    			}
    		});	
    		oIdea.setProperty("/FieldsValue/",aFields);				
			}
			
			jQuery.each(aFields, function(iId, oField) {
			    if(!oField.IS_ACTIVE){
			        return true;
			    }
			    
				if (oIdea._isNew || oDialogAction === MessageBox.Action.OK || !oField.ID) {
					//bind Idea Model
					var oFieldValue = jQuery.extend({
						ID: oIdea.getNextHandle(),
						FIELD_CODE: oField.CODE
					}, oField);
					oIdea.setProperty("/FieldsValue/" + iId, oFieldValue);
				}
				
				if(oField.IS_DISPLAY_ONLY){
				var oRichTextHtml = new HTML({
					sanitizeContent: true,
					preferDOM: false,
					content: {
						model: "object",
						path: "/FieldsValue/" + iId + "/DISPLAY_TEXT",
						formatter: that.formatter.wrapHTML
					}
				});
				 oFormFields.addItem(oRichTextHtml);
				 return true;   
				}
				var sUnitCodelbl;
				if (oField.UOM_CODE) {
					sUnitCodelbl = oField.DEFAULT_TEXT + "(" + CodeModel.getText("sap.ino.xs.object.basis.Unit.Root", oField.UOM_CODE) + ")";
				} else {
					sUnitCodelbl = oField.DEFAULT_TEXT;
				}
				var bMandatory = false;
				if (oField.MANDATORY === 1) {
					bMandatory = true;
				}
				var sDataType;
				sDataType = mDataType[oField.DATATYPE_CODE];
				if (oField.VALUE_OPTION_LIST_CODE) {
					//Valuelist used, then got the value List
					var oLabel = new Label({
						text: sUnitCodelbl,
						tooltip: oField.DEFAULT_LONG_TEXT,
						required: bMandatory
					});
					if (oField.IS_HIDDEN_SETTING && oField.IS_HIDDEN_SETTING === 1) {
						oLabel.setTooltip(that.getText("IDEA_EDIT_FORM_HIDDEN_TOOLTIP"));
					} else if (oField.IS_HIDDEN_SETTING === undefined && oField.IS_HIDDEN === 1) {
						oLabel.setTooltip(that.getText("IDEA_EDIT_FORM_HIDDEN_TOOLTIP"));
					}
					oLabel.addStyleClass("sapInoIdeaFormLabelStyle");
					oFormFields.addItem(oLabel);
					var sCodeTable = "sap.ino.xs.object.basis.ValueOptionList.Root_" + oField.VALUE_OPTION_LIST_CODE;
					//if (oIdea._isNew || oDialogAction === MessageBox.Action.OK) {
					if (oFieldValue) {
						oFieldValue.valueOptionList = CodeModel.getCodes(sCodeTable, function(oCode) {
							return oCode.ACTIVE === 1;
						});
					} else {
						oField.valueOptionList = CodeModel.getCodes(sCodeTable, function(oCode) {
							return oCode.ACTIVE === 1;
						});
					}
					//}

					var sValueSelected = "object>/FieldsValue/" + iId + "/" + sDataType;
					var oSelectedKey = {
						path: sValueSelected,
						type: fnGetDataType(oField)
					};
					var oComboBox = new ComboBox({
						enabled: bEnableEdit,
						tooltip: oField.DEFAULT_LONG_TEXT,
						selectedKey: oSelectedKey,
						width: "100%",
						//selectionChange: onSelectionChangeLaborDatum
						change: oField.MANDATORY ? onSelectionChangeLaborDatum : onSelectionChangeWrongData
					});
					oComboBox.addItem();
					var sKey = "{object>" + sDataType + "}";
					var oItemTemplate = new ListItem({
						key: sKey,
						text: "{object>DEFAULT_TEXT}"
					});
					var sBindingPath = "object>/FieldsValue/" + iId + "/valueOptionList";
					oComboBox.bindItems({
						path: sBindingPath,
						template: oItemTemplate,
						sorter: new Sorter("SEQUENCE_NO")
					});
					if (!that.aComboBoxes) {
						that.aComboBoxes = [];
					}
					that.aComboBoxes.push(oComboBox);
					oFormFields.addItem(oComboBox);
				} else {
					if (oField.DATATYPE_CODE === "BOOLEAN") {
						if (!that.aCheckBoxes) {
							that.aCheckBoxes = [];
						}
						var oCheckBox = new CheckBox({
							text: oField.DEFAULT_TEXT,
							enabled: bEnableEdit,
							tooltip: oField.DEFAULT_LONG_TEXT,
							selected: "{object>/FieldsValue/" + iId + "/BOOL_VALUE}",
							select: bMandatory ? fnChkboxSelect : function() {}
						});
						if (oField.IS_HIDDEN_SETTING && oField.IS_HIDDEN_SETTING === 1) {
							oCheckBox.setTooltip(that.getText("IDEA_EDIT_FORM_HIDDEN_TOOLTIP"));
						} else if (oField.IS_HIDDEN_SETTING === undefined && oField.IS_HIDDEN === 1) {
							oCheckBox.setTooltip(that.getText("IDEA_EDIT_FORM_HIDDEN_TOOLTIP"));
						}
						var oChkLabel = oCheckBox._getLabel();
						if (bMandatory) { //Add * to the check box
							oChkLabel.addStyleClass("sapMLabelRequired");
							that.aCheckBoxes.push(oCheckBox);
						}
						oChkLabel.addStyleClass("sapInoIdeaFormLabelStyle");
						oFormFields.addItem(oCheckBox);

					} else {
						var oFieldControl;
						var txtLabel = new Label({
							text: sUnitCodelbl,
							tooltip: oField.DEFAULT_LONG_TEXT,
							required: bMandatory
						});
						if (oField.IS_HIDDEN_SETTING && oField.IS_HIDDEN_SETTING === 1) {
							txtLabel.setTooltip(that.getText("IDEA_EDIT_FORM_HIDDEN_TOOLTIP"));
						} else if (oField.IS_HIDDEN_SETTING === undefined && oField.IS_HIDDEN === 1) {
							txtLabel.setTooltip(that.getText("IDEA_EDIT_FORM_HIDDEN_TOOLTIP"));
						}
						txtLabel.addStyleClass("sapInoIdeaFormLabelStyle");
						oFormFields.addItem(txtLabel);
						var oValue = {
							path: "object>/FieldsValue/" + iId + "/" + sDataType,
							type: fnGetDataType(oField)
							//type:new sap.ui.model.type.Integer(null) ???nullable new type to identify
						};
						if (oField.DATATYPE_CODE === "RICHTEXT") {
							// Otherwise there the RTE is not rendered properly when the application is launched uncached
							oFieldControl = sap.ui.xmlfragment({
								id: that.getView().getId(),
								fragmentName: "sap.ino.vc.idea.fragments.IdeaRichTxt"
							}, that);
							oFieldControl.attachReady(function() {
								this.bindProperty("value", {
									path: oValue.path,
									type: fnGetDataType(oField)
								});
							});
						} else if (oField.DATATYPE_CODE === "DATE") {
							oFieldControl = new sap.m.DatePicker({
								enabled: bEnableEdit,
								tooltip: oField.DEFAULT_LONG_TEXT,
								value: {
									path: oValue.path,
									type: fnGetDataType(oField)
								},
								width: "100%"
							});
						} else {
							oFieldControl = new Input({
								enabled: bEnableEdit,
								tooltip: oField.DEFAULT_LONG_TEXT,
								value: oValue,
								width: "100%"
							});

						}
						if (oFieldControl.addAriaLabelledBy) {
							oFieldControl.addAriaLabelledBy(txtLabel);
						}
						oFieldControl.addStyleClass("sapUiSmallMarginBottom");
						oFormFields.addItem(oFieldControl);
					}

				}
			});
		},

		setRespListProperty: function(oIdea, sCode) {
			var oRespListInput = this.byId("RespList");
			if (sCode) {
				oRespListInput.setVisible(true);
			} else {
				oRespListInput.setVisible(false);
			}
			if (oIdea.oData.RESP_CODE) {
				this.getModel("data").read("/ResponsibilityValueSearchParams(searchToken='',respCode='" + oIdea.oData.RESP_CODE + "')/Results", {
					urlParameters: {
						"$orderby": "NAME"
					},
					success: function(oData) {
						oIdea.setProperty("/Resp_Value", oData.results);
					}
				});
			}

		},
		onSuggestionList: function(oEvent) {
			var that = this;
			var oIdea = this.getObjectModel();
			var mEvent = jQuery.extend({}, oEvent, true);
			var sTerm = jQuery.sap.encodeURL(mEvent.getParameter("suggestValue"));
			this.resetClientMessages();
			this.getModel("data").read("/ResponsibilityValueSearchParams(searchToken='" + sTerm + "',respCode='" + oIdea.oData.RESP_CODE +
				"')/Results", {
					urlParameters: {
						"$orderby": "NAME"
					},
					success: function(oData) {
						oIdea.setProperty("/Resp_Value", oData.results);
						that.byId("RespList").setFilterSuggests(false);
					}
				});
		},
		onSuggestionSelected: function(oEvent) {
			/*			this.resetClientMessages();
			var oIdea = this.getObjectModel();
			var sBindingPath = oEvent.getParameter("selectedItem").oBindingContexts.object.sPath;
            this.onRespValueChangedMessageBox.call(this,oIdea,sBindingPath);*/
		},
		onHandleValueHelp: function(oEvent) {
			var that = this;
			var oReslistDialog = that.createRespListDialog();
			oReslistDialog.open();
			oReslistDialog.setBusy(true);
			var oTreeTable = that.byId('respValueTreeTable');
			var oIdea = this.getObjectModel();
			this.getModel("data").read("/ResponsibilityValueSearchParams(searchToken='',respCode='" + oIdea.oData.RESP_CODE + "')/Results", {
				urlParameters: {
					"$orderby": "SEQUENCE_NO"
				},
				success: function(oData) {
					oReslistDialog.setBusy(false);
					oIdea.setProperty("/Resp_Value", oData.results);
					var aHierarchy_RespValue = that.convertToHierarchy(oData.results, "ID", "PARENT_VALUE_ID");
					oIdea.setProperty("/Resp_Value_Tree", aHierarchy_RespValue);
					that.setViewProperty("/ENABLE_OK_BTN", false);

					that.resetClientMessages();
					that.byId('RespList')._closeSuggestionPopup();

					oTreeTable.attachBrowserEvent("dblclick", function() {
						//Double click for the Popup RL list selection   
						if (oTreeTable.isIndexSelected(that._treeTableIndex)) {
							oTreeTable.removeSelectionInterval(that._treeTableIndex, that._treeTableIndex);
						} else {
							oTreeTable.addSelectionInterval(that._treeTableIndex, that._treeTableIndex);
						}
						if (that._treeTableIndex > -1) {
							var sBindingPath = oTreeTable.getContextByIndex(that._treeTableIndex).getPath();
							that.onRespValueChangedMessageBox.call(that, oIdea, sBindingPath);

							if (that._oRespListDialog) {
								that._oRespListDialog.close();
								that._oRespListDialog.destroy();
								that._oRespListDialog = undefined;
							}
						}
						that._treeTableIndex = -1;
					});
				},
				error: function(oMessage) {
					oIdea.setProperty("/Resp_Value_Tree", []);
					oReslistDialog.setBusy(false);
					MessageToast.show(oMessage.message);
				}
			});
		},
		convertToHierarchy: function(aObjects, sKeyName, sParentKeyName) {
			var aNodeObjects = this.createStructure(aObjects, sParentKeyName);
			var oTreeNode = aNodeObjects.root;
			this.arrToHierarchy(oTreeNode, aNodeObjects, sKeyName);
			return oTreeNode;
		},
		createStructure: function(aNodes, sParentKeyName) {
			var aObjects = {
				root: []
			};
			for (var i = 0; i < aNodes.length; i++) {
				var sProName = "Sub_" + aNodes[i][sParentKeyName];
				if (!aNodes[i].children || !jQuery.isArray(aNodes[i].children)) {
					aNodes[i].children = []; // create empty array for children later
				}
				if (isNaN(parseInt(aNodes[i][sParentKeyName], 10))) {
					aObjects.root.push(aNodes[i]);
				} else {
					if (!aObjects.hasOwnProperty(sProName)) {
						aObjects[sProName] = [];
					}
					aObjects[sProName].push(aNodes[i]);
				}
			}
			return aObjects;
		},
		arrToHierarchy: function(oTreeNode, aNodeObjects, sKeyName) {
			if (!oTreeNode || oTreeNode.length === 0) {
				return;
			}
			for (var i = 0; i < oTreeNode.length; i++) {
				var sProName = "Sub_" + oTreeNode[i][sKeyName];
				if (aNodeObjects.hasOwnProperty(sProName)) {
					oTreeNode[i].children = aNodeObjects[sProName];
					this.arrToHierarchy(oTreeNode[i].children, aNodeObjects, sKeyName);
				}
			}
		},
		onRespValueDialogClose: function() {
			if (this._oRespListDialog) {
				this._oRespListDialog.close();
				this._oRespListDialog.destroy();
				this._oRespListDialog = undefined;
			}
		},
		onRespRowSelectionChange: function(oEvent) {
			var that = this;
			var oRespValueTree = that.byId("respValueTreeTable");
			var iIndex = oRespValueTree.getSelectedIndex();
			if (iIndex > -1) {
				this.setViewProperty("/ENABLE_OK_BTN", true);
				this._treeTableIndex = iIndex;
			} else {
				this.setViewProperty("/ENABLE_OK_BTN", false);
			}

		},
		createRespListDialog: function() {
			if (!this._oRespListDialog) {
				this._oRespListDialog = this.createFragment("sap.ino.vc.idea.fragments.ResponsibilityListValue", this.getView().getId());
				this.getView().addDependent(this._oRespListDialog);
			}
			return this._oRespListDialog;

		},
		onSearchRespValue: function(oEvent) {
			var sValue = jQuery.sap.encodeURL(oEvent.getParameter("value"));
			var oIdea = this.getObjectModel();
			this.getModel("data").read("/ResponsibilityValueSearchParams(searchToken='" + sValue + "',respCode='" + oIdea.oData.RESP_CODE +
				"')/Results", {
					urlParameters: {
						"$orderby": "NAME"
					},
					success: function(oData) {
						oIdea.setProperty("/Resp_Value", oData.results);
					}
				});

		},
		onSelectedItem: function(oEvent) {
			var that = this;
			var oIdea = this.getObjectModel();
			var oRespValueTree = that.byId("respValueTreeTable");
			var iIndex = oRespValueTree.getSelectedIndex();
			if (iIndex > -1) {
				var sBindingPath = oRespValueTree.getContextByIndex(iIndex).getPath();
				that.onRespValueChangedMessageBox.call(that, oIdea, sBindingPath);
			}
			if (this._oRespListDialog) {
				this._oRespListDialog.close();
				this._oRespListDialog.destroy();
				this._oRespListDialog = undefined;
			}
		},
		setIdeaModelRespValueProperty: function(oIdea, sBindingPath) {
			oIdea.setProperty("/RESP_VALUE_CODE", oIdea.getProperty(sBindingPath).CODE);
			oIdea.setProperty("/RESP_VALUE_NAME", oIdea.getProperty(sBindingPath).NAME);
			oIdea.setProperty("/RESP_VALUE_BINDING_CODE", oIdea.getProperty(sBindingPath).CODE);
			oIdea.setProperty("/OLD_RESP_NAME", oIdea.getProperty("/RESP_VALUE_NAME"));
		},
		onRespValueChangedMessageBox: function(oIdea, sBindingPath) {
			var that = this;
			if (!oIdea._isNew) { //Modify
				var oCurrentUser = Configuration.getCurrentUser();
				var aSubmitters = oIdea.oData.SubmitterContributors;
				var oSumbitter = aSubmitters.filter(function(submitter) {
					return submitter.IDENTITY_ID === oCurrentUser.USER_ID;
				});
				var sCode = oIdea.getProperty("/RESP_VALUE_CODE");
				var sSelectCode = oIdea.getProperty(sBindingPath).CODE;
				if (!oSumbitter.length && sCode !== sSelectCode) //Login user is not a submiiter,popup the message
				{
					MessageBox.show(this.getText("IDEA_OBJECT_MSG_RESP_LIST_VALUE_CHG", oIdea.getProperty("/RESP_NAME")), {
						title: this.getText("IDEA_OBJECT_RESP_LIST_POP_TITLE", oIdea.getProperty("/RESP_NAME")),
						icon: MessageBox.Icon.WARNING,
						actions: [MessageBox.Action.YES, MessageBox.Action.NO],
						onClose: function(sDialogAction) {
							if (sDialogAction === MessageBox.Action.YES) {
								that.setIdeaModelRespValueProperty(oIdea, sBindingPath);
							} else {
								oIdea.setProperty("/RESP_VALUE_NAME", oIdea.getProperty("/OLD_RESP_NAME"));
							}
						}
					});
				} else //No Need to popup message
				{
					that.setIdeaModelRespValueProperty(oIdea, sBindingPath);
				}
			} else { //Create
				that.setIdeaModelRespValueProperty(oIdea, sBindingPath);
			}
		},
		onRespListValueChange: function() {
			var oRespListInput = this.byId("RespList");
			var oIdea = this.getObjectModel();
			var sValue = oRespListInput.getValue().trim();
			var aRespListValues = oIdea.getProperty("/Resp_Value");
			var sBindingPath;
			var that = this;
			jQuery.each(aRespListValues, function(index, oRespListValue) {
				if (sValue === oRespListValue.NAME.trim()) {
					sBindingPath = "/Resp_Value/" + index;
					return false;
				}
			});
			if (sBindingPath) {
				that.onRespValueChangedMessageBox.call(that, oIdea, sBindingPath);
			} else { //Mean find no any values
				oIdea.setProperty("/RESP_VALUE_BINDING_CODE", "");
				that.resetClientMessages();
				that.setClientMessage(
					new Message({
						code: "IDEA_OBJECT_MSG_RESP_LIST_VALUE_WRONG_INPUT",
						type: MessageType.Error
					}),
					that.byId("RespList"));
			}
		},
		onFormChanged: function(oIdea, sCampaignId, oFormFields, oCampaignComboBox) {
			var aFields;
			var that = this;
			var soldFormCode = that._oldCampaignForm;
			var bChangeable = oIdea.getPropertyModel().getProperty("/nodes/Root/attributes/NAME/changeable");
			this.getModel("data").read("/CampaignSmall(" + sCampaignId + ")/FormFields", {
				urlParameters: {
					"$orderby": "SEQUENCE_NO"
				},
				success: function(oData) {
					aFields = oData.results;
					if (bChangeable) {
						if (!aFields.length && soldFormCode) {
							//New Campaign FormCode is null
							MessageBox.confirm(that.getText("IDEA_OBJECT_MSG_CONFIRM_CAMPAIGN_CHG"), {
								title: that.getText("IDEA_OBJECT_EDIT_POP_TITLE"),
								icon: MessageBox.Icon.WARNING,
								actions: [MessageBox.Action.OK, MessageBox.Action.CANCEL],
								onClose: function(sDialogAction) {
									if (sDialogAction === MessageBox.Action.OK) {
										oIdea.oData.FieldsValue = aFields;
										oIdea.setProperty("/NEW_ADDED_FIELDS", []);
										that.addFormFields.call(that, aFields, oFormFields, oIdea, sDialogAction);
										that._oldCampaignId = oCampaignComboBox.getSelectedKey();
										that._oldCampaignForm = null;
									} else {
										that.addFormFields.call(that, oIdea.oData.FieldsValue, oFormFields, oIdea);
										oCampaignComboBox.setSelectedKey(that._oldCampaignId);
									}
								}
							});
						} else if (aFields.length && soldFormCode !== aFields[0].FORM_CODE) {
							MessageBox.show(that.getText("IDEA_OBJECT_MSG_EDIT_CAMPAIGN_CHG"), {
								title: that.getText("IDEA_OBJECT_EDIT_POP_TITLE"),
								icon: MessageBox.Icon.WARNING,
								actions: [MessageBox.Action.OK, MessageBox.Action.CANCEL],
								onClose: function(sDialogAction) {
									if (sDialogAction === MessageBox.Action.OK) {
										oIdea.oData.FieldsValue = aFields;
										oIdea.setProperty("/NEW_ADDED_FIELDS", []);
										that.addFormFields.call(that, aFields, oFormFields, oIdea, sDialogAction);
										that._oldCampaignId = oCampaignComboBox.getSelectedKey();
										that._oldCampaignForm = aFields[0].FORM_CODE;
									} else {
										that.addFormFields.call(that, oIdea.oData.FieldsValue, oFormFields, oIdea);
										oCampaignComboBox.setSelectedKey(that._oldCampaignId);
									}
								}
							});
						} else {
							that.addFormFields.call(that, oIdea.oData.FieldsValue, oFormFields, oIdea);
						}
					} else {
						that.addFormFields.call(that, oIdea.oData.FieldsValue, oFormFields, oIdea);
					}
				},
				error: function(oMessage) {
					MessageToast.show(oMessage.message);
				}
			});
		},

		onContributorsTokenChanged: function(oControlEvent) {
			if (this._checkContributionReadOnly() || !this._checkContributionEnable() || !oControlEvent || oControlEvent.getParameters().type !==
				"tokensChanged") {
				return;
			}
			var oIdea = this.getObjectModel();
			var removedTokens = oControlEvent.getParameters().removedTokens;
			var oCurrentUser = Configuration.getCurrentUser();
			var addedTokens = oControlEvent.getParameters().addedTokens;
			var aContributionShare = oIdea.getProperty("/ContributionShare");
			var nCreateId = oIdea.isNew() ? oCurrentUser.USER_ID : oIdea.getProperty("/CREATED_BY_ID");
			var sCreateName = oIdea.isNew() ? oCurrentUser.NAME : oIdea.getProperty("/CREATED_BY_NAME");
			if (!!removedTokens && removedTokens.length > 0) {
				var nKey = parseInt(removedTokens[0].getKey(), 10);
				if (nCreateId === nKey) {
					return;
				}
				for (var index = aContributionShare.length - 1; index >= 0; --index) {
					if (aContributionShare[index].AUTHOR_ID === nKey) {
						aContributionShare.splice(index, 1);
					}
				}
				if (!!aContributionShare && aContributionShare.length === 1 && aContributionShare[0].AUTHOR_ID === nCreateId) {
					aContributionShare = [];
				}
				oIdea.setProperty("/ContributionShare", aContributionShare);
			} else if (!!addedTokens && addedTokens.length > 0) {
				var nCoAuthorID = parseInt(addedTokens[0].getKey(), 10);
				if (!aContributionShare || aContributionShare.length === 0) {
					oIdea.addChild({
						AUTHOR_ID: nCreateId,
						AUTHOR_NAME: sCreateName
					}, "ContributionShare");
				}
				if (nCreateId === nCoAuthorID) {
					return;
				}
				oIdea.addChild({
					AUTHOR_ID: nCoAuthorID,
					AUTHOR_NAME: addedTokens[0].getText()
				}, "ContributionShare");
			}
		},

		setRespValueChangeMsg: function() {
			var oRespListInput = this.byId("RespList");
			var oIdea = this.getObjectModel();
			var sBindingCode = oIdea.getProperty("/RESP_VALUE_BINDING_CODE");
			var aRespListValues = oIdea.getProperty("/Resp_Value");
			var that = this;
			if (!aRespListValues && !sBindingCode) { //No action for the list when click the save as draft then subbmit
				sBindingCode = oIdea.getProperty("/RESP_VALUE_CODE");
			}
			if (!sBindingCode) //Marked this Resp Value by manual type
			{
				var sValue = oRespListInput.getValue().trim();
				jQuery.each(aRespListValues, function(index, oRespListValue) {
					if (sValue === oRespListValue.NAME.trim()) {
						sBindingCode = oRespListValue.CODE;
						return false;
					}
				});
				if (!sBindingCode) { //Find no matched values
					that.setClientMessage(
						new Message({
							code: "IDEA_OBJECT_MSG_RESP_LIST_VALUE_WRONG_INPUT",
							type: MessageType.Error
						}),
						that.byId("RespList"));
				}
			}
		},
		createObjectModel: function(vObjectKey, sRoute, oRouteArgs) {
			var oSettings = {
				nodes: ["Root", "Extension"],
				actions: ["modify", "modifyAndSubmit", "del"],
				continuousUse: true,
				concurrencyEnabled: true,
				readSource: {
					model: this.getDefaultODataModel(),
					includeNodes: [{
							name: "ReassignCampaigns",
							parentNode: "Root",
							primaryKey: "KEY"
                    },
						{
							name: "RespExperts",
							parentNode: "Root",
							primaryKey: "ID"
							}]
				}
			};

			var oIdea;
			// object creation
			if (!vObjectKey) {
				var mQuery = oRouteArgs["?query"] || {};
				var oDefaults;
				try {
					oDefaults = {
						CAMPAIGN_ID: mQuery.campaign ? parseInt(mQuery.campaign, 10) : 0,
						NAME: mQuery.title,
						RESP_VALUE_CODE: mQuery.RespList,
						RESP_VALUE_NAME: mQuery.RespList && CodeModel.getText(
							"sap.ino.xs.object.subresponsibility.ResponsibilityStage.RespValues", mQuery.RespList),
						DESCRIPTION: mQuery.description,
						Tags: mQuery.tags && mQuery.tags.split(","),
						Walls: mQuery.wall ? [{
							WALL_ID: parseInt(mQuery.wall, 10)
                        }] : undefined
					};
				} catch (oError) {
					jQuery.sap.log.error("Failed parsing creation arguments", oError, "sap.ino.vc.idea.Modify.controller");
				}
				oIdea = new Idea(oDefaults, oSettings);
			} else {
				WebAnalytics.logIdeaView(vObjectKey);
				oIdea = new Idea(vObjectKey, oSettings);
			}
			return oIdea;
		},

		initIdeaDetails: function() {
			this._sTitleText = undefined;
			this._sDescriptionText = undefined;
			this._aTags = undefined;
			this._oSimilarModel = undefined;
			this.expandSimilarIdeasOnInit();
		},

		onAnonymousSelectionChange: function(oEvent) {
			var oComboBox = this.byId("anonymousComboBox");
			var object = this.getObjectModel();
			var key = oComboBox.getSelectedKey();
			object.setProperty("/AnonymousFor/0/", {
				"ANONYMOUS_FOR": key
			});
		},

		bindAnonymousList: function(oData, bIdeaIsNew, sCamId) {
			var oComboBox = this.byId("anonymousComboBox");
			var oLabel = this.byId("anonymousOptionLabel");
			var sCampaignId = oData.CAMPAIGN_ID;
			if (sCamId) {
				sCampaignId = sCamId;
			}

			if (oComboBox) {
				var curUserId = this.getModel("user").getProperty("/data").USER_ID;
				var oItemTemplate, sBindingPath;
				var that = this;

				if (oData.AnonymousFor && oData.AnonymousFor.length > 0) {
					oComboBox.setSelectedKey(oData.AnonymousFor[0].ANONYMOUS_FOR);
				} else {
					oComboBox.setSelectedKey("");
				}
				oItemTemplate = new ListItem({
					key: "{data>ANONYMOUS_FOR}",
					text: {
						path: "data>ANONYMOUS_FOR",
						formatter: function(sCode) {
							switch (sCode) {
								case "NONE":
									return that.getText("IDEA_NOT_ANONYMOUS");
								case "ALL":
									return that.getText("IDEA_ANONYMOUS_FOR_ALL");
								case "PARTLY":
									return that.getText("IDEA_NOT_ANONYMOUS_CAMPAIGN_MANAGER");
								case "COACH":
									return that.getText("IDEA_NOT_ANONYMOUS_COACH");
								case "EXPERT":
									return that.getText("IDEA_NOT_ANONYMOUS_EXPERT");
								case "PARTICIPANT":
									return that.getText("IDEA_NOT_ANONYMOUS_PARTICIPANT");
								case "COACH_AND_EXPERT":
									return that.getText("IDEA_NOT_ANONYMOUS_COACH_AND_EXPERT");
								case "COACH_POOL":
									return that.getText("IDEA_NOT_ANONYMOUS_COACH_POOL");
								case "EXPERT_POOL":
									return that.getText("IDEA_NOT_ANONYMOUS_EXPERT_POOL");
								case "COACH_POOL_AND_EXPERT_POOL":
									return that.getText("IDEA_NOT_ANONYMOUS_COACH_POOL_AND_EXPERT_POOL");
							}

						}
					}
				});
				sBindingPath = "data>/IdeaAnonymous";

				if (sCampaignId) {
					oComboBox.bindItems({
						path: sBindingPath,
						template: oItemTemplate,
						filters: [new Filter({
							path: "CAMPAIGN_ID",
							operator: FilterOperator.EQ,
							value1: Number(sCampaignId)
						})]
					});
				} else {
					oComboBox.bindItems({
						path: sBindingPath,
						template: oItemTemplate
					});
				}
				var object = this.getObjectModel();
				var oBinding = oComboBox.getBinding("items");
				if (oBinding) {
					oBinding.attachDataReceived(function(oAnonymousText) {
						if (oAnonymousText.getParameters().data.results.length <= 1) {
							if (oAnonymousText.getParameters().data.results.length > 0) {
								oComboBox.setSelectedKey(oAnonymousText.getParameters().data.results[0].ANONYMOUS_FOR);
								var key = oComboBox.getSelectedKey();
								object.setProperty("/AnonymousFor/0/", {
									"ANONYMOUS_FOR": key
								});
							} else {
								oLabel.setVisible(false);
								oComboBox.setVisible(false);
							}
							oComboBox.setEditable(false);
						} else {
							oComboBox.setEditable(true);
						}
						if (oData.CREATED_BY_ID === curUserId || bIdeaIsNew) {
							oComboBox.setEditable(true);
						} else {
							oComboBox.setEditable(false);
						}
					}, this);
				}
			}
		},

		bindCampaignList: function(oData, bIdeaIsNew) {
			var oComboBox = this.byId("campaignComboBox");
			var oItemTemplate, sBindingPath;
			var that = this;

			// When idea is saved and campaign is assigned
			// the possible campaigns to reassign are dependent on the idea 
			// and not only on the user thus we need to get the data from the object
			// model
			if (oData.CAMPAIGN_ID && !bIdeaIsNew) {
				oItemTemplate = new ListItem({
					key: "{object>ID}",
					text: "{object>SHORT_NAME}"
				});
				sBindingPath = "object>/ReassignCampaigns";
			} else {
				oItemTemplate = new ListItem({
					key: "{data>ID}",
					text: "{data>SHORT_NAME}"
				});
				sBindingPath = "data>/CampaignSmallIdeaAssign";
			}

			oComboBox.bindItems({
				path: sBindingPath,
				template: oItemTemplate,
				sorter: new Sorter("SHORT_NAME"),
				length: 500
			});

			var oBinding = oComboBox.getBinding("items");
			if (oBinding) {
				oBinding.attachDataReceived(function() {
					that.checkCampaignAllowtoAssign(oData.CAMPAIGN_ID);
				}, this);
			}
		},

		initRTE: function(oProperties) {
			var that = this;
			if (!Device.system.desktop) {
				return;
			}
			this.destroyRTE();
			var bEditable = (oProperties && oProperties.nodes.Root.attributes) ? oProperties.nodes.Root.attributes.DESCRIPTION.changeable :
				true;

			// If it is not editable an HTML element is used as RTE otherwise updates
			// descriptions  also in read-only mode which leads to wrong data-loss handling
			// and the situation that ideas with non-editable descriptions cannot be saved any more

			var oRichTextContainer = this.byId("rteContainer");
			var oRichTextControl;
			that._TextControlID = "richtextControl_" + new Date().getTime();

			if (bEditable) {
				// Otherwise there the RTE is not rendered properly when the application is launched uncached
				jQuery.sap.require("sap.ino.controls.RichTextEditor");
				oRichTextControl = new sap.ino.controls.RichTextEditor({
					id: this.createId(that._TextControlID),
					width: "100%",
					editable: true,
					editorType: "TinyMCE4",
					height: "300px",
					showGroupInsert: true,
					showGroupLink: true,
					showGroupFont: true,
					beforeEditorInit: function(c) {
						c.mParameters.configuration.plugins = c.mParameters.configuration.plugins.replace("image,", "");
						c.mParameters.configuration.link_context_toolbar = true;
						c.mParameters.configuration.plugins = c.mParameters.configuration.plugins.replace("powerpaste", "powerpaste,imagetools");
						c.mParameters.configuration.paste_data_images = true;
						c.mParameters.configuration.automatic_uploads = true;
						c.mParameters.configuration.powerpaste_word_import = "clean";
						c.mParameters.configuration.powerpaste_html_import = "clean";
						c.mParameters.configuration.default_link_target = "_blank";
						c.mParameters.configuration.images_upload_handler = function(oFile, success, failure) {
							var oFileToUpload = oFile.blob();
							// oFileToUpload.name = "image-" + (new Date()).getTime() + Math.floor(Math.random() * 1000) + "." + oFileToUpload.type.substr(oFileToUpload.type.lastIndexOf("/") + 1);
							if (oFileToUpload) {
								Attachment.uploadFile(oFileToUpload).done(function(oResponse) {
									var oIdea = that.getObjectModel();
									success(Configuration.getAttachmentDownloadURL(oResponse.attachmentId));
									oIdea.setProperty("/DESCRIPTION", jQuery.sap._sanitizeHTML(window.tinymce.activeEditor.getContent()));
								}).fail(function() {
									failure();
									MessageToast.show(that.getText("IDEA_OBJECT_MSG_TITLE_IMAGE_CROP_FAILED"));
								});
							}
						};
						c.mParameters.configuration.paste_postprocess = function(editor, fragment) {
							window.tinymce.activeEditor.uploadImages();
						};
					}
				});

				oRichTextControl.attachReady(function onRTEReady() {
					this.bindProperty("value", {
						model: "object",
						path: "DESCRIPTION"
					});
					that._onResize();
					if (!this._sResizeRegId) {
						this._sResizeRegId = ResizeHandler.register(that.getView(), that._onResize);
					}
				});
				oRichTextControl.onAfterRendering = function() {
					sap.ino.controls.RichTextEditor.prototype.onAfterRendering.apply(this);
					that.byId("NAME").focus();
					jQuery("#" + that.byId('objectpage').getId() + "-opwrapper").animate({
						scrollTop: 0
					}, 100);

				};
			} else {
				oRichTextControl = new HTML({
					id: this.createId(that._TextControlID),
					sanitizeContent: true,
					preferDOM: false,
					content: {
						model: "object",
						path: "DESCRIPTION",
						formatter: this.formatter.wrapHTML
					}
				});
			}

			setTimeout(function() {
				oRichTextContainer.destroyItems();
				oRichTextContainer.addItem(oRichTextControl);
			}, 500);
		},

		destroyRTE: function() {
			// Desktop: we use the RTE and need to calculate the best height
			if (this._sResizeRegId) {
				ResizeHandler.deregister(this._sResizeRegId);
			}

			// destroy RTE  when screen is not displayed any more as it will go mad
			// when bindings change and it is not displayed (yet)
			var oRTE = this.getRTE();
			if (oRTE) {
				oRTE.destroy();
			}
		},

		getRTE: function() {
			return this.byId(this._TextControlID);
		},

		// resizes the height of the richtext editor and the similar ideas
		_onResize: function(oEvent) {
			var oView;
			var iHeight;
			var iOldHeight;
			if (oEvent) {
				oView = oEvent.control;
				iHeight = oEvent.size.height;
				iOldHeight = oEvent.oldSize.height;
			} else {
				oView = this.getView();
				iHeight = oView.$().height();
				iOldHeight = 0;
			}

			var oRTE = oView.getController().getRTE();
			if (!oRTE || oRTE.getMetadata().getName() !== "sap.ino.controls.RichTextEditor") {
				return;
			}

			if (Math.abs(iHeight - iOldHeight) > 0) {
				var $Container = oView.$().find(".sapInoIdeaModify");
				// this requires px values
				var iMin = parseInt($Container.css("min-height"), 10) || 400;
				var iMax = parseInt($Container.css("max-height"), 10) || 1000;

				// the surounding container give only little possibilities to get the correct height
				// so we substract from the whole view the heights of the toolbar, header, other fields, ...
				iHeight = iHeight - 600;
				iHeight = iHeight < iMin ? iMin : iHeight;
				iHeight = iHeight > iMax ? iMax : iHeight;
				oRTE.setHeight(iHeight + "px");

				// we need to "wait" till the RTE has resized to its real height
				// this reals height differs from the given height
				setTimeout(function() {
					var $RealRTE = oView.$().find(".mce-tinymce.mce-container");
					var sRealRTEHeight = $RealRTE.css("height");
					// we assume 1.) the same value for top and bottom and 2.) a px value
					var iRTEBorder = parseFloat($RealRTE.css("border-width"), 10);
					if (iRTEBorder) {
						sRealRTEHeight = (parseFloat(sRealRTEHeight, 10) + (2 * iRTEBorder)) + "px";
					}
					var oSimilarIdeas = oView.getController().byId("similarIdeas");
					oSimilarIdeas.setHeight(sRealRTEHeight);
				}, 0);
			}
		},

		onCampaignPressed: function(oEvent) {
			var iId = this.getObjectModel().getProperty("/CAMPAIGN_ID");
			this.navigateTo("campaign", {
				id: iId
			}, true);
		},

		onTagChanged: function(oEvent) {
			var oMultiInput = oEvent.getSource();
			var sValue = oEvent.getParameter("value");
			if (!sValue) {
				return;
			}
			if (!oEvent.getSource().getAggregation("tokenizer")) {
				return;
			}
			var aTokens = oEvent.getSource().getAggregation("tokenizer").getAggregation("tokens");
			var aTag = sValue.split(",");
			aTag.forEach(function(sTag) {
				sTag = sTag.trim();
				if (sTag === "") {
					return;
				}

				var oToken = new Token({
					text: sTag
				});
				// This is an application internal flag to handle
				// model update correctly
				var bTokenExisted;
				aTokens.forEach(function(oToken) {
					if (oToken.getProperty("text") === sTag) {
						bTokenExisted = true;
						return;
					}
				});
				if (!bTokenExisted) {
					oToken.bApplicationCreated = true;
					oMultiInput.addToken(oToken);
				}
			});
			oMultiInput.setValue("");
		},

		onTagTokenChanged: function(oEvent) {
			var oMultiInput = oEvent.getSource();

			if (!oEvent.getSource().getAggregation("tokenizer")) {
				return;
			}

			oMultiInput.setValue("");
		},

		getLinkDialog: function() {
			if (!this._oLinkDialog) {
				this._oLinkDialog = this.createFragment("sap.ino.vc.idea.fragments.Link", this.getView().getId());
				this.getView().addDependent(this._oLinkDialog);
				this._oLinkDialog.setInitialFocus(this.createId("URLInput"));
			}
			return this._oLinkDialog;
		},

		onAddLinkDialogCancel: function(oEvent) {
			this.resetClientMessages();
			this._oLinkDialog.close();
		},

		onAddLink: function(oEvent) {
			var oDialog = this.getLinkDialog();
			oDialog.setModel(new JSONModel({
				URL: "",
				LABEL: ""
			}), "link");
			oDialog.bindElement({
				path: "link>/"
			});

			this.resetClientMessages();
			oDialog.open();
		},

		onAddLinkDialogOK: function(oEvent) {
			var oDialog = this.getLinkDialog();
			var oModel = oDialog.getModel("link");

			var iId = oModel.getProperty("/ID");
			var sURL = oModel.getProperty("/URL");
			var sLabel = oModel.getProperty("/LABEL");

			this.resetClientMessages();
			var oMessage = this.getObjectModel().modifyLink(iId, sURL, sLabel);
			if (oMessage) {
				this.setClientMessage(oMessage, this.byId("URLInput"));
			} else {
				oDialog.close();
			}
		},

		onEditLink: function(oEvent) {
			var oDialog = this.getLinkDialog();
			var oBindingContext = oEvent.getSource().getBindingContext("object");

			var iId = this.getObjectModel().getProperty(oBindingContext.sPath + "/ID");
			var sURL = this.getObjectModel().getProperty(oBindingContext.sPath + "/URL");
			var sLabel = this.getObjectModel().getProperty(oBindingContext.sPath + "/LABEL");

			this.resetClientMessages();
			oDialog.setModel(new JSONModel({
				ID: iId,
				URL: sURL,
				LABEL: sLabel
			}), "link");
			oDialog.bindElement({
				path: "link>/"
			});
			oDialog.open();
		},

		onDeleteLink: function(oEvent) {
			var oObject = this.getObjectModel();
			var oChild = oEvent.getSource().getBindingContext("object").getObject();
			oObject.removeChild(oChild);
		},

		crop: function() {
			var that = this;
			var oDeferred = jQuery.Deferred();
			var oTitleImageCropping = this.byId("imageCropping");
			var oFile = oTitleImageCropping.crop();
			// in case the upload image has the same width/height with the cropping image		
			if (oFile) {
				var iAttachmentId = this.getObjectModel().getData().TITLE_IMAGE_ID;
				Attachment.uploadFile(oFile, null, iAttachmentId, true).done(function(oResponse) {
					if (oResponse.attachmentId) {
						var oObject = that.getObjectModel();
						oObject.setTitleImage({
							"ATTACHMENT_ID": oResponse.attachmentId,
							"FILE_NAME": oResponse.fileName,
							"MEDIA_TYPE": oResponse.mediaType
						});
					}
					oDeferred.resolve({
						messages: [{
							"TYPE": "I",
							"MESSAGE": "IDEA_OBJECT_MSG_TITLE_IMAGE_CROP",
							"MESSAGE_TEXT": that.getText("IDEA_OBJECT_MSG_TITLE_IMAGE_CROP"),
							"REF_FIELD": ""
                        }]
					});
				}).fail(function() {
					MessageToast.show(that.getText("IDEA_OBJECT_MSG_TITLE_IMAGE_CROP_FAILED"));
					oDeferred.reject();
				});
			} else {
				oDeferred.resolve();
			}
			return oDeferred.promise();
		},

		checkContributionShare: function() {
			if (!this._checkContributionEnable()) {
				return true;
			}
			var aContributionShare = this.getObjectModel().getProperty("/ContributionShare");
			if (!aContributionShare || aContributionShare.length === 0) {
				return true;
			}
			var sum = 0;
			jQuery.each(aContributionShare, function(index, data) {
				sum += data.PERCENTAGE;
			});
			return sum === 100;
		},

		addAuthorToContributionShare: function() {
			if (!this._checkContributionEnable()) {
				return;
			}
			var oIdea = this.getObjectModel();
			var oCurrentUser = Configuration.getCurrentUser();
			var aContributionShare = oIdea.getProperty("/ContributionShare");
			var nCreateId = oIdea.isNew() ? oCurrentUser.USER_ID : oIdea.getProperty("/CREATED_BY_ID");
			var sCreateName = oIdea.isNew() ? oCurrentUser.NAME : oIdea.getProperty("/CREATED_BY_NAME");
			if (!aContributionShare || aContributionShare.length === 0) {
				oIdea.addChild({
					AUTHOR_ID: nCreateId,
					AUTHOR_NAME: sCreateName,
					PERCENTAGE: 100.00
				}, "ContributionShare");
			}
		},

		formatterContributionShare: function() {
			var oIdea = this.getObjectModel();
			var aContributionShare = oIdea.getProperty("/ContributionShare");

			jQuery.each(aContributionShare, function(index, oData) {
				if (oData.PERCENTAGE > 0) {
					oIdea.setProperty("/ContributionShare/" + index + "/PERCENTAGE", parseInt(oData.PERCENTAGE, 10));
				} else {
					oIdea.setProperty("/ContributionShare/" + index + "/PERCENTAGE", 0);
				}
			});
		},

		checkCampaignAllowtoAssign: function(iCampaignId) {
			var sCampaignId = String(iCampaignId);
			var oCampaignComboBox = this.byId("campaignComboBox");
			var oController = this;

			if (iCampaignId && !oCampaignComboBox.getItemByKey(sCampaignId)) {
				oController.setClientMessage(
					new Message({
						code: "IDEA_OBJECT_MSG_CAMPAIGN_NOT_ALLOWED",
						type: MessageType.Error
					}),
					oController.byId("campaignComboBox"));
				oCampaignComboBox.setSelectedItemId();
			}
		},

		syncAuthorToContributionShareBinding: function() {
			if (!!arguments && arguments.length > 0 && !!arguments[0].getParameters() && arguments[0].getParameters().hasOwnProperty("url") &&
				/xsodata\/CampaignSmall\(\d+\)$/i.test(arguments[0].getParameters().url)) {
				this.syncAuthorToContributionShare();
				var oIdeaData = this.getModel("data");
				oIdeaData.detachRequestCompleted(this.syncAuthorToContributionShareBinding, this);
			}
		},

		syncAuthorToContributionShare: function() {
			var oIdea = this.getObjectModel();
			var oCurrentUser = Configuration.getCurrentUser();
			var aContributionShare = oIdea.getProperty("/ContributionShare");
			var aAuthors = oIdea.getProperty("/Contributors");
			if (this._checkContributionEnable()) {
				jQuery.each(aAuthors, function(index, oAuthor) {
					if (jQuery.grep(aContributionShare, function(data) {
						return data.AUTHOR_ID === oAuthor.IDENTITY_ID;
					}).length === 0) {
						oIdea.addChild({
							AUTHOR_ID: oAuthor.IDENTITY_ID,
							AUTHOR_NAME: oAuthor.NAME
						}, "ContributionShare");
					}
				});
				aContributionShare = oIdea.getProperty("/ContributionShare");
				var nCreateId = oIdea.isNew() ? oCurrentUser.USER_ID : oIdea.getProperty("/CREATED_BY_ID");
				var sCreateName = oIdea.isNew() ? oCurrentUser.NAME : oIdea.getProperty("/CREATED_BY_NAME");
				for (var index = aContributionShare.length - 1; index >= 0; --index) {
					if (aContributionShare[index].AUTHOR_ID !== nCreateId && jQuery.grep(aAuthors, function(data) {
						return data.IDENTITY_ID === aContributionShare[index].AUTHOR_ID;
					}).length === 0) {
						if (aContributionShare[index].ID < 0) {
							aContributionShare.splice(index, 1);
						}
					}
				}
				aContributionShare = oIdea.getProperty("/ContributionShare");
				if (jQuery.grep(aContributionShare, function(data) {
					return nCreateId === data.AUTHOR_ID;
				}).length === 0) {
					oIdea.addChild({
						AUTHOR_ID: nCreateId,
						AUTHOR_NAME: sCreateName,
						PERCENTAGE: aContributionShare.length > 1 ? 0.00 : 100.00
					}, "ContributionShare");
				}
			}
		},
        clearIdeaFormDisplayOnlyFields: function(){
            var oIdea = this.getObjectModel();
            var aFields = oIdea.getProperty("/FieldsValue");
            var aExcludeDisplayOnlyFields = [];
            jQuery.each(aFields,function(index,oField){
                if(!oField.IS_DISPLAY_ONLY){
                  aExcludeDisplayOnlyFields.push(oField);  
                }
            });
            if(aExcludeDisplayOnlyFields.length > 0){
               oIdea.setProperty("/FieldsValue",aExcludeDisplayOnlyFields); 
            }
        },
		onSave: function() {
			var oController = this;
			oController.resetClientMessages();
			oController.addAuthorToContributionShare();
			oController.formatterContributionShare();
			//oController.clearIdeaFormDisplayOnlyFields();
			if (!oController.checkContributionShare()) {
				MessageToast.show(oController.getText("MSG_REWARD_CONTRIBUTION_SHARE_SUM_ERROR"));
				return;
			}
			var iDefaultCoach;
			var fnSave = function() {
				oController.crop().done(function(oCropResult) {
					oController._CheckContentAttachments(oController.getObjectModel());
					if (oController.byId("RespList").getVisible() && oController.getObjectModel().getProperty("/SUBMITTED_AT")) {
						if (!oController.getObjectModel().getProperty("/RESP_VALUE_NAME")) {
							oController.setClientMessage(
								new Message({
									code: "IDEA_OBJECT_MSG_RESP_LIST_VALUE_EMPTY_SAVE",
									type: MessageType.Error
								}),
								oController.byId("RespList"));
						} else {
							oController.setRespValueChangeMsg.call(oController);
						}
					}
					if (oController.getObjectModel().getProperty("/SUBMITTED_AT")) {
						//when submitted,then modify and save  need to check the invaild value for Idea form
						jQuery.each(oController.aComboBoxes, function(iIndex, oControl) {
							if (oControl instanceof sap.m.ComboBox && !oControl.getItemByText(oControl.getValue())) {
								oControl.fireChange();
							}
						});
						jQuery.each(oController.aCheckBoxes, function(iIndex, oControl) {
							oControl.fireSelect();
						});
					}
					var bIsNewIdea = oController.getObjectModel().isNew();
					var oModifyRequest, oIdeaModel;
					oIdeaModel = oController.getObjectModel();
					if (!oIdeaModel.getUserChanges().RESP_VALUE_CODE) {
						iDefaultCoach = null;
					}
					if (iDefaultCoach) {
						oModifyRequest = oController.executeObjectAction("modifyAndAutoAssignCoach", {
							parameters: {
								DEFAULT_COACH: iDefaultCoach
							}
						});
					} else {
						oModifyRequest = oController.executeObjectAction("modify");
					}
					oModifyRequest.done(function(oResponse) {
						var oIdea = oController.getObjectModel();
						if (!oController.getObjectModel().oData.CAMPAIGN_ID) {
							oIdea.setProperty("/RESP_LIST_VISIBLE", false);
						}
						oController._refreshWallList();
				// 		if (bIsNewIdea) {
							// navigate the first time after creation
							oController.navigateTo("idea-display", {
								id: oIdea.getKey()
							}, true);
				// 		} else {
				// 			jQuery.when(oIdea.getPropertyModelInitializedPromise(), oController._dViewShown).done(function(oProperties) {
				// 				oController.initRTE(oProperties);
				// 				// var oFormFields = oController.byId("ideaFormAddFields");
				// 				// oFormFields.removeAllItems();
				// 				// oController.addFormFields.call(oController, oIdea.oData.FieldsValue, oController.byId("ideaFormAddFields"), oIdea);								
				// 			});
				// 		}
						if (oCropResult) {
							oIdea.getMessageParser().parse(oCropResult);
						}
					});
				});
			};
			var fnDelVote = function() {
				if (oController.getObjectModel().delVotesSimulate()) {
					MessageBox.confirm(oController.getText("OBJECT_MSG_VOTES_DELETE_CONFIRMATION"), {
						onClose: function(sDialogAction) {
							if (sDialogAction === MessageBox.Action.OK) {
								fnSave();
							}
						}
					});
				} else {
					fnSave();
				}
			};
			var oIdea = oController.getObjectModel();
			var aCoaches = oIdea.getProperty("/Coach");
			iDefaultCoach = oController.defaultAutoAssignCoach(oController, oIdea);
			if (oIdea.getProperty("/SUBMITTED_AT") && aCoaches && aCoaches.length > 0 && iDefaultCoach && oIdea.getUserChanges().RESP_VALUE_CODE) {
				MessageBox.confirm(oController.getText("IDEA_OBJECT_MSG_CONFIRM_COACH_CHG"), {
					icon: MessageBox.Icon.WARNING,
					actions: [MessageBox.Action.YES, MessageBox.Action.NO],
					onClose: function(sDialogAction) {
						if (sDialogAction === MessageBox.Action.NO) {
							iDefaultCoach = null;
						}
						fnDelVote();
					}
				});
			} else {
				if (!oIdea.getProperty("/SUBMITTED_AT")) {
					iDefaultCoach = null;
				}
				fnDelVote();
			}
		},
		defaultAutoAssignCoach: function(oController, oIdea) {
			var aRespValues = oIdea.getProperty("/Resp_Value");
			var sRespValueCode = oIdea.getProperty("/RESP_VALUE_CODE");
			var bAutoAssign = oIdea.getProperty("/AUTO_ASSIGN_RL_COACH");
			var iDefaultCoach;
			if (!aRespValues && oIdea.getProperty("/STATUS") === "sap.ino.config.DRAFT") {
				iDefaultCoach = oIdea.getProperty("/DEFAULT_COACH");
			} else {
				if (bAutoAssign && sRespValueCode && aRespValues) {
					jQuery.each(aRespValues, function(index, oRespValue) {
						if (oRespValue.CODE === sRespValueCode) {
							iDefaultCoach = oRespValue.DEFAULT_COACH;
							return false;
						}
					});
				}
			}
			return iDefaultCoach;

		},
		matchTemplate: function() {
			var oIdea = this.getObjectModel();
			var sDescription = oIdea.getProperty("/DESCRIPTION");
			var sIdeaDescriptionTemplate = oIdea.getProperty("/IDEA_DESCRIPTION_TEMPLATE") || "";
			var sIdeaDescriptionTemplateHTML = "<p>" + sIdeaDescriptionTemplate + "</p>";
			return sIdeaDescriptionTemplate !== "" && (sDescription === sIdeaDescriptionTemplate || sDescription ===
				sIdeaDescriptionTemplateHTML);
		},

		onSubmit: function() {
			var oController = this;
			oController.resetClientMessages();
			oController.addAuthorToContributionShare();
			oController.formatterContributionShare();
			//oController.clearIdeaFormDisplayOnlyFields();
			jQuery.each(oController.aComboBoxes, function(iIndex, oControl) {
				if (oControl instanceof sap.m.ComboBox && !oControl.getItemByText(oControl.getValue())) {
					oControl.fireChange();
				}
			});
			jQuery.each(oController.aCheckBoxes, function(iIndex, oControl) {
				oControl.fireSelect();
			});
			if (!oController.checkContributionShare()) {
				MessageToast.show(oController.getText("MSG_REWARD_CONTRIBUTION_SHARE_SUM_ERROR"));
				return;
			}
			var oIdea = oController.getObjectModel();

			var iDefaultCoach = oController.defaultAutoAssignCoach(oController, oIdea);
			this.crop().done(function(oCropResult) {
				oController._CheckContentAttachments(oIdea);
				if (!oController.getObjectModel().getProperty("/CAMPAIGN_ID")) {
					oController.setClientMessage(
						new Message({
							code: "IDEA_OBJECT_MSG_CAMPAIGN_EMPTY_SUBMIT",
							type: MessageType.Error
						}),
						oController.byId("campaignComboBox"));
				}
				if (oController.byId("RespList").getVisible()) {
					if (!oController.getObjectModel().getProperty("/RESP_VALUE_NAME")) {
						oController.setClientMessage(
							new Message({
								code: "IDEA_OBJECT_MSG_RESP_LIST_VALUE_EMPTY_SUBMIT",
								type: MessageType.Error
							}),
							oController.byId("RespList"));
					} else {
						oController.setRespValueChangeMsg.call(oController);
					}
				}

				if (oController.matchTemplate()) {
					oController.setClientMessage(
						new Message({
							code: "IDEA_OBJECT_MSG_TEMPLATE_NOT_CHANGE",
							type: MessageType.Error
						}),
						oController.getRTE());
				}

				var oSubmitRequest = oController.executeObjectAction("modifyAndSubmit", {
					messages: {
						confirm: "IDEA_OBJECT_MSG_SUBMIT_CONFIRM",
						success: function() {
							return oController.getText("IDEA_OBJECT_MSG_SUBMIT_OK", oIdea.getProperty("/NAME"));
						}
					},
					parameters: {
						CAMPAIGN_ID: oIdea.getProperty("/CAMPAIGN_ID")
					}
				});
				oSubmitRequest.done(function(oResponse) {
					if (oResponse && oResponse.confirmationCancelled === true) {
						oController.byId("ideaSubmitBtn").focus();
						return;
					}
					if (iDefaultCoach) {
					    
						var oModifyRequest = oController.executeObjectActionPrototypeDirectly("autoAssignCoach", {
							parameters: {
								DEFAULT_COACH: iDefaultCoach
							}
						});
						oModifyRequest.always(function() {
							oController.navigateTo("idea-display", {
								id: oIdea.getKey()
							}, true);
							if (oCropResult) {
								oIdea.getMessageParser().parse(oCropResult);
							}						    
						});
					} else {
						oController.navigateTo("idea-display", {
							id: oIdea.getKey()
						}, true);
						if (oCropResult) {
							oIdea.getMessageParser().parse(oCropResult);
						}
					}
				});
			});
		},
		onFileUploaderChange: function(oEvent) {
			var oFileUploader = oEvent.getSource();
			var aFile = oEvent.getParameter("files");
			oFileUploader.setBusy(true);
			Attachment.prepareFileUploader(oFileUploader, aFile);
		},

		onFileUploaderComplete: function(oEvent) {
			var oResponse = Attachment.parseUploadResponse(oEvent.getParameter("responseRaw"));
			var oFileUploader = oEvent.getSource();
			if (oResponse) {
				var oObject = this.getObjectModel();
				oObject.getMessageParser().parse(oResponse);
				if (oResponse.success) {
					oObject.setTitleImage({
						"ATTACHMENT_ID": oResponse.attachmentId,
						"FILE_NAME": oResponse.fileName,
						"MEDIA_TYPE": oResponse.mediaType
					});
				} else {
					MessageToast.show(this.getText("IDEA_OBJECT_MSG_TITLE_IMAGE_FAILED"));
				}
			} else {
				MessageToast.show(this.getText("IDEA_OBJECT_MSG_TITLE_IMAGE_ERROR"));
			}
			oFileUploader.setBusy(false);
			oFileUploader.clear();
		},

		onFileTypeMissMatch: function(oEvent) {
			MessageToast.show(this.getText("IDEA_OBJECT_MSG_TITLE_IMAGE_TYPE_MISS_MATCH"));
		},

		onTitleImageClear: function(oEvent) {
			var oObject = this.getObjectModel();
			oObject.clearTitleImage();
		},

		onTitleImageCrop: function(oEvent) {
			this.crop();
		},

		_refreshWallList: function() {
			this.getView().byId("wallsection").invalidate();
		},

		onTitleChange: function(oEvent) {
			this.bindSimilarIdeas();
		},

		getIdeaDisplayLink: function(iIdeaId) {
			return this.getNavigationLink("idea-display", {
				id: iIdeaId
			});
		},
		formatSimilarIdeaName: function(name, statusCode) {
			if (statusCode === "sap.ino.config.DRAFT") {
				return "[" + this.getText("IDEA_OBJECT_FIELD_SIMILAR_IDEAS_DRAFT") + "]" + name;
			} else {
				return name;
			}
		},
		getEditorContentLive: function() {
			var oRTE = this.getRTE();
			if (!oRTE) {
				return "";
			}

			// Read-only HTML control
			if (oRTE.getContent) {
				return oRTE.getContent();
			}

			try {
				// Real richtext editor
				if (oRTE && oRTE.getNativeApi() && (oRTE.getNativeApi().getDoc() || oRTE.getNativeApi().bodyElement)) {
					return oRTE && oRTE.getNativeApi() && oRTE.getNativeApi().getContent(); //tinymce.min.js:formatted:15909 Uncaught TypeError: Cannot read property 'body' of null(…)
				} else {
					return "";
				}
			} catch (e) {
				jQuery.sap.log.error("Editor content could not be retrieved: " + e.toString(), "", "sap.ino.vc.idea.Modify.controller.js");
			}
		},

		onAfterShow: function() {
			this._dViewShown.resolve();
		},

		onBeforeHide: function() {
			jQuery.sap.clearIntervalCall(this._sRefreshSimilarIdeasTimer);
			this._sRefreshSimilarIdeasTimer = null;
		},

		onAfterHide: function() {
			// create a new deferred for next display
			this._dViewShown = jQuery.Deferred();
			// RTE needs to be removed when the screen is not visible any more
			// as it model based bindings fail when it is not displayed
			this.destroyRTE();
		},

		expandSimilarIdeasOnInit: function() {
			if (!Device.system.desktop) {
				return;
			}
			var oControl = this.byId("similarIdeas");
			var oIdea = this.getObjectModel();
			var sStatusCode = oIdea && oIdea.getProperty("/STATUS_CODE");
			// Only first phase is interesting for similar ideas in edit mode
			var iProcessStep = oIdea && oIdea.getProperty("/STEP");
			var similarPersonalize = Configuration.getPersonalize().SIMILAR_IDEA;
			if (oIdea.isNew()) {
				this.getView().setModel(new JSONModel({}), "similarIdeas");
				this._setInterval4SimilarIdeas();
				if (similarPersonalize) {
					this.onShowSimilarIdeas();
				}
			} else if (oControl && ((sStatusCode === 'sap.ino.config.NEW_IN_PHASE' && iProcessStep === 0) || sStatusCode ===
				'sap.ino.config.DRAFT')) {
				this.bindSimilarIdeas();
				this._setInterval4SimilarIdeas();
				if (similarPersonalize) {
					this.onShowSimilarIdeas();
				}
			} else {
				this.onToggleSimilarIdeas(undefined, true);
			}

		},

		getAvaliableWidth: function() {
			return this.getView().$().find(".sapInfoIdeaName").width();
		},

		onShowSimilarIdeas: function() {
			var oSimilarIdeas = this.getView().byId("similarIdeas");
			var bHasSpecailStyle = oSimilarIdeas.hasStyleClass('sapInoIdeaSimilarIdeasExpanded');
			if (!bHasSpecailStyle) {
				oSimilarIdeas.addStyleClass("sapInoIdeaSimilarIdeasExpanded");
			}
		},

		bindSimilarIdeas: function() {
			var oController = this;
			var oIdea = this.getObjectModel();
			//if (!this._oSimilarModel) {
			this._oSimilarModel = new JSONModel();
			//}
			var iIdeaId = oIdea.getProperty("/ID");
			var mParameters = {
				name: oIdea.getProperty("/NAME"),
				description: this.getEditorContentLive(),
				campId: oIdea.getProperty("/CAMPAIGN_ID"),
				filterDraft: true,
				limit: 12
			};
			if (oIdea && oIdea.getProperty("/Tags") && oIdea.getProperty("/Tags").length > 0) {
				var aTags = [];
				oIdea.getProperty("/Tags").forEach(function(oTag) {
					aTags.push(oTag.NAME);
				});
				mParameters.tags = JSON.stringify(aTags);
			}

			if (Configuration.getRelatedIdeasByTextURL(iIdeaId)) {
				this._oSimilarModel.loadData(Configuration.getRelatedIdeasByTextURL(iIdeaId), mParameters, true, "POST");
				this._oSimilarModel.attachRequestCompleted(null, function() {
					var oIdeasData = oController.groupByCampaignId(oController._oSimilarModel.getData(), oIdea.oData.CAMPAIGN_ID, oIdea.oData.CAMPAIGN_NAME);
					oController._oSimilarModel.setData({
						"similarIdeasData": oIdeasData
					}, false);
					this.getView().setModel(this._oSimilarModel, "similarIdeas");
				}, this);
			}
		},

		isDescriptionChanged: function(sNewDescriptionText) {
			if (sNewDescriptionText === null || sNewDescriptionText === undefined) {
				return false;
			}
			return (this._sDescriptionText === undefined && sNewDescriptionText.length > 0) || (this._sDescriptionText !== undefined && this._sDescriptionText !==
				sNewDescriptionText);
		},

		isTitleChanged: function(sNewTitleText) {
			if (sNewTitleText === null || sNewTitleText === undefined) {
				return false;
			}
			return (this._sTitleText === undefined && sNewTitleText.length > 0) || (this._sTitleText !== undefined && this._sTitleText !==
				sNewTitleText);
		},

		isTagsChanged: function(aNewTags) {
			return $(this._aTags).not(aNewTags).length !== 0 || $(aNewTags).not(this._aTags).length !== 0;
		},

		refreshSimilarIdeas: function() {
			var sNewTitleText = this.getObjectModel().getProperty("/NAME");
			var sNewDescriptionText = this.getEditorContentLive();
			var aNewTags = this.getObjectModel().getProperty("/Tags");
			if (this.isDescriptionChanged(sNewDescriptionText) || this.isTitleChanged(sNewTitleText) || this.isTagsChanged(aNewTags)) {
				this.bindSimilarIdeas();
				this._sTitleText = sNewTitleText;
				this._sDescriptionText = sNewDescriptionText;
				this._aTags = aNewTags;
			}
		},

		onToggleSimilarIdeas: function(oEvent, bForceDisable) {
			var oSimilarIdeas = this.getView().byId("similarIdeas");
			if (bForceDisable || oSimilarIdeas.hasStyleClass('sapInoIdeaSimilarIdeasExpanded')) {
				oSimilarIdeas.removeStyleClass("sapInoIdeaSimilarIdeasExpanded");
				if (this._sRefreshSimilarIdeasTimer) {
					jQuery.sap.clearIntervalCall(this._sRefreshSimilarIdeasTimer);
					this._sRefreshSimilarIdeasTimer = null;
				}
			} else {
				oSimilarIdeas.addStyleClass("sapInoIdeaSimilarIdeasExpanded");
				this.bindSimilarIdeas();
				this._setInterval4SimilarIdeas();
			}
		},

		onRespListHint: function(oEvent) {
			var oDialog = this._getRespListHintDialog();
			var oIdea = this.getObjectModel();
			var sCode = oIdea.getProperty("/RESP_VALUE_CODE");
			oDialog.bindElement({
				path: "data>/RespValues('" + sCode + "')/"
			});
			oDialog.open();
		},

		onRespListHintDialogClose: function() {
			var oDialog = this._getRespListHintDialog();
			oDialog.close();
		},

		_getRespListHintDialog: function() {
			var oDialog = this._oRespListHintDialog;
			if (!oDialog) {
				oDialog = this.createFragment("sap.ino.vc.idea.fragments.ResponsibilityDetail", this.getView().getId());
				this.getView().addDependent(oDialog);
				this._oRespListHintDialog = oDialog;
				this._oRespListHintDialog.setInitialFocus(this.createId("TagToken"));
			}
			return oDialog;
		},

		_setInterval4SimilarIdeas: function() {
			if (!this._sRefreshSimilarIdeasTimer) {
				this._sRefreshSimilarIdeasTimer = jQuery.sap.intervalCall(5000, this, this.refreshSimilarIdeas);
			}
		},

		contributionShareFormatter: function(oContributionShare, bRewardActive) {
			if (!bRewardActive || !oContributionShare || oContributionShare.length <= 1) {
				return false;
			}
			return true;
		},
		_checkContributionReadOnly: function() {
			return this.getObjectModel().getProperty("/CONTRIBUTION_READ_ONLY");
		},

		_checkContributionEnable: function() {
			return this.getObjectModel().getProperty("/REWARD_ACTIVE");
		},

		_CheckContentAttachments: function(oModel) {
			var content = oModel.getProperty("/DESCRIPTION"),
				aContentAttachments = [],
				aNewContentAttachments = [],
				aOriginContentAttachments = oModel.getProperty("/ContentAttachments");
			if (!content) {
				return;
			}
			var reg = new RegExp("<img.*attachment_download\.xsjs/(\\d+)\"", "g"),
				result;
			do {
				result = reg.exec(content);
				if (result && result.length === 2) {
					aContentAttachments.push(result[1]);
				}
			}
			while (result !== null);
			var tag = false,
				oTempAttachment = void 0;
			for (var i = 0; i <= aContentAttachments.length - 1; i++) {
				tag = false;
				oTempAttachment = undefined;
				for (var j = 0; j <= aOriginContentAttachments.length - 1; j++) {
					if (Number(aContentAttachments[i]) === aOriginContentAttachments[j].ATTACHMENT_ID) {
						tag = true;
						oTempAttachment = aOriginContentAttachments[j];
						break;
					}
				}
				if (tag) {
					aNewContentAttachments.push(oTempAttachment);
				} else {
					aNewContentAttachments.push({
						ID: oModel.getNextHandle(),
						ATTACHMENT_ID: Number(aContentAttachments[i])
					});
				}
			}
			oModel.setProperty("/ContentAttachments", aNewContentAttachments);
		},
		resetPendingChanges: function() {
			BaseController.prototype.resetPendingChanges.apply(this, arguments);
// 			var oCampaignComboBox = this.byId("campaignComboBox");
// 			if (oCampaignComboBox) {
// 				oCampaignComboBox.setValue(undefined);
// 				oCampaignComboBox.setSelection(undefined);
// 			}

// 			var oFormFields = this.byId("ideaFormAddFields");
// 			if (oFormFields) {
// 				oFormFields.removeAllItems();
// 			}
		}

	}));
});
}; // end of sap/ino/vc/idea/Modify.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.RewardFormatter') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.vc.idea.RewardFormatter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/RewardFormatter",[
    "sap/ino/commons/formatters/BaseFormatter",
    "sap/ino/commons/models/core/CodeModel",
    "sap/ui/base/Object",
    "sap/ino/commons/formatters/ObjectFormatter",
    "sap/ino/commons/models/aof/PropertyModel",
    "sap/ino/commons/models/aof/PropertyModelCache"
], function(
    BaseFormatter,
    CodeModel,
	Object,
	ObjectFormatter,
	PropertyModel,
	PropertyModelCache) {
	"use strict";

	var oRewardFormatter = Object.extend("sap.ino.vc.idea.RewardFormatter", {});
	jQuery.extend(oRewardFormatter, ObjectFormatter);

	var fnRewardCreateFormatter = PropertyModel.getStaticActionEnabledDynamicFormatter(
		"sap.ino.xs.object.reward.RewardList", "create", function(iIdeaId) {
			return {
				IDEA_ID: iIdeaId
			};
		});

	oRewardFormatter.createRewardEnabled = function(iIdeaId,SUBMITTER_ID) {
	    if(SUBMITTER_ID === 0){
	        return false;
	    }
		if (iIdeaId) {
			return fnRewardCreateFormatter(iIdeaId);
		}
		return false;
	};
	oRewardFormatter.rewardAmountUnit = function(iAmount, sUnit) {
		sUnit = sUnit === null ? "" : " " + sUnit;
		return iAmount + sUnit;
	};

	oRewardFormatter.addPercentage = function(iNumber) {
		iNumber = Math.round(Number(iNumber));
		return String(iNumber) + "%";
	};
	oRewardFormatter.addPercentageDetail = function(iNumber) {
	   if(iNumber === undefined || !iNumber) 
	   {
	      return '';
	   }
	   else
		{iNumber = Math.round(Number(iNumber));
		return String(iNumber) + "%";
		}
	};

	oRewardFormatter.maxFractionFormatter = function(nNumber, nDigits) {
		var number = parseFloat(nNumber);
		if (isNaN(number)) {
			return nNumber;
		}
		var precious = parseInt(nDigits, 10);
		if (isNaN(precious)) {
			precious = 2;
		}
		var nPrecious = Math.pow(10, precious);
		return Math.round(number * nPrecious) / nPrecious;
	};
	
	oRewardFormatter.ideaNavigationLink = function (iId, sSection) {
        if (!isNaN(parseInt(iId, 10))) {
            var oParams = {id: iId};
            if (sSection) {
                oParams.query = {
                    section: sSection
                };
            }
            return BaseFormatter.navigationLink.apply(this, ["idea-display", oParams]);
        }
        return "";
    };

	return oRewardFormatter;
});
}; // end of sap/ino/vc/idea/RewardFormatter.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.Votes.controller') ) {
jQuery.sap.declare('sap.ino.vc.idea.Votes.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/Votes.controller",[
    "sap/ino/vc/commons/BaseObjectController",
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/models/object/User"
    ], function(BaseController, JSONModel, IFrame, CustomData, User) {

	"use strict";

	var oFormatter = {
		voteComment: function(sVoteReason, sVoteComment) {
			if (sVoteReason) {
				return BaseController.prototype.formatter.valueOption(sVoteReason);
			} else {
				return sVoteComment;
			}
		},

		voterName: function(sPublicVote, sName, sAnonymity) {
			if (sPublicVote) {
				return sName;
			} else {
				return sAnonymity;
			}
		},
		
		groupVoteTitle: function(sVotedGroup, sGroupVoteTitle) {
		    var sVotedGroupName;
		    switch(sVotedGroup) {
		        case "ORG":
		            sVotedGroupName = "Organization";
		            break;
		        case "COM":
		            sVotedGroupName = "Company";
		            break;
		        case "COST":
		            sVotedGroupName = "Cost Center";
		            break;
	            case "OFF":
	                sVotedGroupName = "Office";
	                break;
                default:
                    sVotedGroupName = "";
		    }
		    return sGroupVoteTitle.replace(/{\d+}/g, sVotedGroupName);
		}

	};

	jQuery.extend(oFormatter, BaseController.prototype.formatter);

	return BaseController.extend("sap.ino.vc.idea.Votes", {
		formatter: oFormatter,
		onAfterRendering: function() {
			var self = this;
			var groupList = self.byId('groupVoteList');
			if (groupList) {
				var groupItems = groupList.getItems();
				if (groupItems.length > 0) {
					for (var i = 0; i < groupItems.length; i++) {
						var oContent = groupItems[i].getContent()[0];
						if (oContent.getExpanded()) {
						  oContent.setExpanded(false);
						}
					}

				}
			}
		},
		OnUserPressed: function(oEvent) {
			var oSource = oEvent.getSource();
			var oContext = oSource.getBindingContext("data");
			var iIdentityId = oContext.getProperty("USER_ID");
        if (oSource && iIdentityId) {
            if (!this._oIdentityCardView || !this._oIdentityCardView.getController()) {
                this._oIdentityCardView = sap.ui.xmlview({
                    viewName: "sap.ino.vc.iam.IdentityCard"
                });
                oSource.addDependent(this._oIdentityCardView);
            }
            this._oIdentityCardView.getController().open(oSource, iIdentityId);
        }			

		},
		
		onExpand: function(oEvent) {
		    var oSourceCtrl = oEvent.getSource();
			var oChangeEvent = oSourceCtrl.getBindingContext("data");
			var oCtrl;
			if (oEvent.getParameter("expand") && oChangeEvent) {
			    // set class
				oSourceCtrl.toggleStyleClass("sapInoActivityExpanded");
				var oData = oChangeEvent.getObject();
			    oCtrl = this.getFragment("sap.ino.vc.idea.fragments.VoteGeneralList").clone();
		    	oCtrl.addStyleClass("sapMListBGSolid");
		    	oCtrl.bindItems({
					path: "data>/IdeaFull("+ oData.IDEA_ID +")/Votes",
					template: this.getFragment("sap.ino.vc.idea.fragments.VoteGeneralListItem"),
					filters: new sap.ui.model.Filter("GROUP_VOTE_NAME", sap.ui.model.FilterOperator.EQ, oData.GROUP_VOTE_NAME)
				});
			} else {
				oSourceCtrl.toggleStyleClass("sapInoActivityExpanded");
				// destroy all components on close
				oSourceCtrl.removeAllContent();
			}
			oSourceCtrl.addContent(oCtrl);
		}
	});
});
}; // end of sap/ino/vc/idea/Votes.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.mixins.BaseActionMixin') ) {
jQuery.sap.declare('sap.ino.vc.idea.mixins.BaseActionMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/vc/idea/mixins/BaseActionMixin",["sap/ino/commons/models/aof/PropertyModel",
               "sap/ino/commons/formatters/ObjectFormatter",
               "sap/ino/controls/OrientationType",
               "sap/ino/commons/models/object/Idea"
               ], 
    function(PropertyModel, ObjectFormatter, OrientationType, Idea) {
    "use strict";

    /**
     * @class
     * This mixin provides common functionality for several ActionMixins on ideas / idea lists. Further it provides mass action handling
     * on select-enabled lists. It is only used as a base "class" (via jQuery.extend) for other action mixins.
     */
    var BaseActionMixin = function() {
        throw "Mixin may not be instantiated directly";
    };
    
    /**
     * returns whether the code in this mixin is called within an idea or within a list of ideas
     * 
     * @returns {boolean} true if context is single idea, false if context is idea lists or campaign home page
     */ 
    BaseActionMixin.isActionContextSingleIdeaDisplay = function() {
        return !!(this.getObjectModel && 
            this.getObjectModel() &&
            this.getObjectModel().getMetadata && 
            this.getObjectModel().getMetadata().getName() === "sap.ino.commons.models.object.Idea");
    };
    
    /**
     * stores the current focussed before opening an action dialog (for accessibility)
     */ 
    BaseActionMixin.saveCurrentFocusBeforeActionDialogOpen = function() {
        this._sActionCurrentFocusId = sap.ui.getCore().getCurrentFocusedControlId();
    };
    
    /**
     * restores the current focussed after an action dialog has been closed
     */ 
    BaseActionMixin.restoreFocusAfterActionDialogClose = function() {
        if (this._sActionCurrentFocusId) {
            var oControl = sap.ui.getCore().getElementById(this._sActionCurrentFocusId);
            if (oControl && oControl.focus) {
                oControl.focus();
            }
            this._sActionCurrentFocusId = undefined;
        }
    };
    
    /**
     * cleans up selection states of ManagedIdeaList items and client message context, if applicable
     * 
     * @param   {boolean}   bIsMassAction   <code>true</code> if the action that was executed was a mass action
     */ 
    BaseActionMixin.resetActionState = function(bIsMassAction) {
        // context is single idea - reset client messages
        if (this.isActionContextSingleIdeaDisplay() && typeof(this.resetClientMessages) === "function") {
            this.resetClientMessages();
        }
        // in any case, the mass actions have to be refreshed / reset.
        if (bIsMassAction) {
            this._refreshMassActionState();
        } else {
            this._resetMassActionState();
        }
    };

    /**
     * @deprecated - move back again
     * convenience event handler for cleaning up after an action dialog has been closed
     */ 
    BaseActionMixin.onAfterActionDialogClose = function(oEvent) {
        // the respective closed dialog is always the source of the event
        var oDialog = oEvent.getSource();
        this.resetActionState(oDialog.data("context") === "mass");
    };

    // ---------------- MASS ACTION HANDLING ------------------------------------------
    
    /**
     * helper function: returns a consolidated aggregation of information of all selected ideas
     * 
     * This is used for deciding whether a specific action is executable or not.
     * 
     * @returns {object}        the aggregated information or <code>null</code> if selection is empty
     */
    BaseActionMixin._computeActionAggregations = function () {
        return jQuery
            .map(this._oSelectionMap, function (oValue) { return oValue; }) // transform to array
            .reduce(function (oLastVal, oIdea) { 
                var isFinalStatus = ObjectFormatter.isFinal(oIdea.STATUS);
                if (oLastVal) {
                    // just Idea IDs
                    oLastVal.ideas.push(oIdea.ID);
                    oLastVal.authors.push(oIdea.SUBMITTER_ID);
                    // we need the union
                    if (oLastVal.campaigns.indexOf(oIdea.CAMPAIGN_ID) === -1) {
                        oLastVal.campaigns.push(oIdea.CAMPAIGN_ID);
                    }
                    if (oLastVal.phases.indexOf(oIdea.PHASE) === -1) {
                        oLastVal.phases.push(oIdea.PHASE);
                    }
                    if (oLastVal.status.indexOf(oIdea.STATUS) === -1) {
                        oLastVal.status.push(oIdea.STATUS);
                    }
                    if(oLastVal.respValueCode.indexOf(oIdea.RESP_VALUE_CODE) === -1)
                    {
                       oLastVal.respValueCode.push(oIdea.RESP_VALUE_CODE);
                    }
                    oLastVal.addExpert.push(oIdea.property.actions.addExpert.enabled); 
                    oLastVal.assignTag.push(oIdea.property.actions.assignTag.enabled);
                    oLastVal.assignCoach.push(oIdea.property.actions.assignCoach.enabled);
                    oLastVal.assignToMe.push(oIdea.property.actions.assignToMe.enabled);
                    oLastVal.unassignCoach.push(oIdea.property.actions.unassignCoach.enabled);
                    oLastVal.executeStatusTransition.push(oIdea.property.actions.executeStatusTransition.enabled);
                    oLastVal.followUp.push(!isFinalStatus);
                    oLastVal.reassignCampaign.push(oIdea.property.actions.reassignCampaign.enabled);
                    // we need intersection
                    var aStatusActionCodes = oIdea.property.actions.executeStatusTransition.customProperties.statusTransitions.map(function (oTrans) { return oTrans.STATUS_ACTION_CODE; });
                    oLastVal.transitions = oLastVal.transitions.filter(function (sCode) { return aStatusActionCodes.indexOf(sCode) !== -1; });
                    
                    oLastVal.changeAuthor = oLastVal.changeAuthor && oLastVal.authors[oLastVal.authors.length - 1] === oLastVal.authors[0];
                    
                    oLastVal.merge.push(oIdea.property.actions.mergeIdeas.enabled);
                    return oLastVal;
                } else {
                    return { 
                        ideas: [oIdea.ID],
                        campaigns: [oIdea.CAMPAIGN_ID],
                        phases: [oIdea.PHASE],
                        status: [oIdea.STATUS],
                        respValueCode:[oIdea.RESP_VALUE_CODE],
                        addExpert: [oIdea.property.actions.addExpert.enabled],
                        assignTag: [oIdea.property.actions.assignTag.enabled],
                        assignCoach: [oIdea.property.actions.assignCoach.enabled], 
                        assignToMe: [oIdea.property.actions.assignToMe.enabled],
                        unassignCoach: [oIdea.property.actions.unassignCoach.enabled],
                        reassignCampaign:[oIdea.property.actions.reassignCampaign.enabled],
                        executeStatusTransition: [oIdea.property.actions.executeStatusTransition.enabled],
                        followUp: [!isFinalStatus],
                        transitions: oIdea.property.actions.executeStatusTransition.customProperties.statusTransitions.map(function (oTrans) { return oTrans.STATUS_ACTION_CODE; }),
                        authors: [oIdea.SUBMITTER_ID],
                        changeAuthor: oIdea.SUBMITTER_ID !== 0,
                        merge: [oIdea.property.actions.mergeIdeas.enabled]
                    };
                }
            }, null);
    };
    
    /**
     * unselect all selected items and cleans up internal selection map
     * 
     * This is called directly after all executed actions
     */ 
    BaseActionMixin._resetMassActionState = function () {
        // empty selections on selected items
        var that = this;
        if (this._oSelectionMap) {
            jQuery.each(this._oSelectionMap, function (vIndex, oIdea) {
                if (oIdea.oSource && oIdea.oSource.setSelected) {
                    oIdea.oSource.setSelected(false);
                }
            });
        }
        // empty internal map of selected ideas
        this._oSelectionMap = {};
        this._oDeselectionMap = {};
        this.setViewProperty("/List/SELECT_ALL", false);
        // reset mass action buttons
        var aButtons = ["sapInoMassAddExpertBtn", "sapInoMassAssignBtn", "sapInoMassStatusBtn", "sapInoMassFollowUpBtn", "sapInoMassDeleteRewardBtn", "sapInoMassDeleteEvalReqBtn",
            "sapInoMassAcceptBtn", "sapInoMassRejectBtn", "sapInoMassFowardBtn", "sapInoMassCreateEvalBtn", "sapInoMassExportBtn", "sapInoMassChangeAuthorBtn", "sapInoMassMergeBtn"];
        jQuery.each(aButtons, function (iIdx, sElementID) {
            var oBtn = that.byId(sElementID);
            if (oBtn) {
                oBtn.setEnabled(false);
            }
            if (sElementID === "sapInoMassExportBtn" && that.getViewProperty("/List/EXPORT_ALL")){
                oBtn.setEnabled(true);
            }
        });
    };
    
    /**
     * sets selected ideas to busy and calls _resetMassActionState afterwards.
     * 
     * This is called as cleanup after mass actions
     */ 
    BaseActionMixin._refreshMassActionState = function () {
        jQuery.each(this._oSelectionMap, function(vIndex, oItem) {
            if (oItem.oSource) {
                // DANGER ZONE - 
                //oItem.oSource.getParent().getParent().getParent().setBusy(true);
            }
        });
        if (this._resetMassActionState) {
            this._resetMassActionState();
        }
    };
    
    BaseActionMixin._deriveMassActionButtonEnabledStatus = function () {
        var oAggregatedVals = this._computeActionAggregations();
        
        var _checkActionIsEnabled = function(bValue) {
            return !!bValue;
        };
        
        // Add Expert is only visible when at least one action can be executed on all selected ideas
        var oBtnAddExpert = this.byId("sapInoMassAddExpertBtn");
        if (oBtnAddExpert) {
            oBtnAddExpert.setEnabled(
                !!oAggregatedVals && (
                    oAggregatedVals.addExpert.every(_checkActionIsEnabled) && oAggregatedVals.campaigns.length === 1
                ));
        }
        
        // Assignment is only visible when at least one action can be executed on all selected ideas
        var oBtnAssign = this.byId("sapInoMassAssignBtn");
        if (oBtnAssign) {
            oBtnAssign.setEnabled(
                !!oAggregatedVals && (
                    oAggregatedVals.assignToMe.every(_checkActionIsEnabled) || 
                    oAggregatedVals.unassignCoach.every(_checkActionIsEnabled) || 
                    oAggregatedVals.assignTag.every(_checkActionIsEnabled) ||
                    (oAggregatedVals.assignCoach.every(_checkActionIsEnabled) && oAggregatedVals.campaigns.length === 1) || 
                    (oAggregatedVals.addExpert.every(_checkActionIsEnabled) && oAggregatedVals.campaigns.length === 1) ||
                    (oAggregatedVals.reassignCampaign.every(_checkActionIsEnabled) && oAggregatedVals.campaigns.length === 1)
                ));
        }
        
        // Status change is only visible when all selected ideas are in the same campaign and have the same status and phase
        var oBtnStatus = this.byId("sapInoMassStatusBtn");
        if (oBtnStatus) {
            oBtnStatus.setEnabled(
                !!oAggregatedVals &&
                oAggregatedVals.campaigns.length === 1 &&
                oAggregatedVals.phases.length === 1 &&
                oAggregatedVals.status.length === 1 &&
                oAggregatedVals.executeStatusTransition.every(_checkActionIsEnabled)
                );
        }
        
        // Follow Up is only visible when at least one idea is selected
        var oBtnFollowUp = this.byId("sapInoMassFollowUpBtn");
        if (oBtnFollowUp) {
            oBtnFollowUp.setEnabled(
                !!oAggregatedVals && 
                oAggregatedVals.ideas.length > 0&&
                oAggregatedVals.followUp.every(_checkActionIsEnabled));
        }
        
        // Export only visible when at least one idea is selected
        var oBtnExport = this.byId("sapInoMassExportBtn");
        if (oBtnExport) {
            oBtnExport.setEnabled(!!oAggregatedVals && oAggregatedVals.ideas.length > 0);
            if(!this.getModel("component").getProperty("/SHOW_BACKOFFICE")){
                oBtnExport.setEnabled(true);
            }
        }
        
        // change author enable when selected idea' author should be same
        var oBtnChangeAuthor = this.byId("sapInoMassChangeAuthorBtn");
        if (oBtnChangeAuthor) {
            oBtnChangeAuthor.setEnabled(!!oAggregatedVals && oAggregatedVals.changeAuthor);
        }
        
        // Merge idea visible when every idea can be merged
        var oBtnMerge = this.byId("sapInoMassMergeBtn");
        if (oBtnMerge) {
            var aClipboardIdeas = this._oClipboardModel ? this._oClipboardModel.getObjectKeys(Idea) : [];
            var iTotalLength = 0;
            if (oAggregatedVals) {
                iTotalLength = oAggregatedVals.ideas.length + aClipboardIdeas.length;
                oBtnMerge.setEnabled(!!oAggregatedVals && 
                    iTotalLength > 1 && iTotalLength <= 10 &&
                    oAggregatedVals.merge.every(_checkActionIsEnabled));
            } else {
                oBtnMerge.setEnabled(aClipboardIdeas.length > 1 && aClipboardIdeas.length <= 10);
            }
        }
    };
    
    /**
     * event handler that's fired on each selection on a ManagedIdeaListItem's checkbox
     * 
     * @param   {Event} oEvent  the event object
     */ 
    BaseActionMixin.onManagedListSelectionChange = function(oEvent) {
        var that = this;
        var bSelected = oEvent.getParameter("selected");
        var oSource = oEvent.getSource();
        var oData = oSource.getBindingContext("data").getObject();
        function addToSelectionMap(oPropertyEvent) {
            var oPropData = oPropertyEvent.getSource().getData();
            oData.property = oPropData;
            that._oSelectionMap[oData.ID] = oData;
            that._oSelectionMap[oData.ID].oSource = oSource;
            that._deriveMassActionButtonEnabledStatus.call(that);
        }
        
        if (bSelected) {
            var oSettings = { actions : ["addExpert", "assignTag", "assignCoach", "assignToMe", "unassignCoach", "executeStatusTransition","reassignCampaign","mergeIdeas"] };
            // async!
            var oProp = new PropertyModel("sap.ino.xs.object.idea.Idea", oData.ID, oSettings, false, addToSelectionMap);
            if (this.getViewProperty("/List/SELECT_ALL")) {
                delete this._oDeselectionMap[oData.ID];
            }
        } else {
            delete this._oSelectionMap[oData.ID];
            if (this.getViewProperty("/List/SELECT_ALL")) {
                this._oDeselectionMap[oData.ID] = oData.ID;
            }
            this._deriveMassActionButtonEnabledStatus();
        }
        
        oSource.setTooltip(bSelected ? this.getText('IDEA_LIST_CHECKBOX_DESELECT_TOOLTIP') : this.getText('IDEA_LIST_CHECKBOX_SELECT_TOOLTIP'));
    };
    
    BaseActionMixin.onFlatListSelectionChange = function(oEvent) {
        var bSelected = oEvent.getParameter("selected");
        var oSource = oEvent.getSource();
        var oData = oSource.getBindingContext("data").getObject();
        
        if (bSelected) {
            this._oSelectionMap[oData.ID] = oData;
            this._oSelectionMap[oData.ID].oSource = oSource;
            if (this.getViewProperty("/List/SELECT_ALL")) {
                delete this._oDeselectionMap[oData.ID];
            }
        } else {
            delete this._oSelectionMap[oData.ID];
            if (this.getViewProperty("/List/SELECT_ALL")) {
                this._oDeselectionMap[oData.ID] = oData.ID;
            }
        }
        
        // export button
        var oBtnExport = this.byId("sapInoMassExportBtn");
        if (oBtnExport) {
            oBtnExport.setEnabled(!jQuery.isEmptyObject(this._oSelectionMap));
        }
        
        oSource.setTooltip(bSelected ? this.getText('IDEA_LIST_CHECKBOX_DESELECT_TOOLTIP') : this.getText('IDEA_LIST_CHECKBOX_SELECT_TOOLTIP'));
    };
    
    /**
     * event handler for select all action
     * 
     * @param   {aItems?}       the array object of idea items
     *          {bSelected?}    is selected or not
     * 
     * note: if you pass the {aItems} parameter, you should pass the {bSelected} parameter together.
     */
    BaseActionMixin.onMassIdeaSelect = function(aItems, bSelected, bGrowing) {
        var aIdeaItem = this.getList().getItems();
        if (Object.prototype.toString.call(aItems) === "[object Array]") {
            aIdeaItem = aItems;
            this.setViewProperty("/List/SELECT_ALL", bSelected);
        } else {
            this.setViewProperty("/List/SELECT_ALL", !this.getViewProperty("/List/SELECT_ALL"));
        }

        var that = this;
        var oBtnExport = this.byId("sapInoMassExportBtn");
        if (this.getViewProperty("/List/SELECT_ALL")) {
            // change the text to deselect-all
            oBtnExport.setEnabled(true);
        
            jQuery.each(aIdeaItem, function(iIdx, oItem) {
                // get the layout object
                var aAggs = oItem.findAggregatedObjects(false, function(oObj) {
                    return (oObj instanceof sap.ui.layout.VerticalLayout);
                });
                // get the flexbox outer
                var oBox = aAggs[0].getContent()[0];
                // get the content flexbox inner
                var oBoxInner = oBox.getItems()[oBox.getItems().length - 1];
                // get the check box
                var oCheckbox = oBoxInner.getItems()[oBoxInner.getItems().length - 1].getItems()[0];
                
                var oData = oItem.getBindingContext("data").getObject();
                // if (that.getViewProperty("/List/SELECT_ALL")) {
                    if (that.getViewProperty("/List/MANAGE")) {
                        oData.property = that._createPropertyData(oItem);
                    }
                    that._oSelectionMap[oData.ID] = oData;
                    that._oSelectionMap[oData.ID].oSource = oCheckbox;
                // } else {
                //     delete that._oSelectionMap[oData.ID];
                // }
            });
            
        } else if(!bGrowing){
            that._oSelectionMap = {};
            // oBtnExport.setEnabled(false);
        }
        
        if (this.getViewProperty("/List/MANAGE")) {
            this._deriveMassActionButtonEnabledStatus();    
        }

    };
    
    BaseActionMixin._createPropertyData = function(oIdea) {
        var oPropertyData = {
            actions: {
                addExpert: {},
                assignCoach: {},
                assignTag: {},
                assignToMe: {},
                executeStatusTransition: {
                    customProperties: {
                        statusTransitions: []
                    }
                },
                reassignCampaign: {},
                unassignCoach: {},
                mergeIdeas: {}
            }
        };
        //var sStatus = oIdea.getBindingContext("data").getProperty("STATUS");
        var sStatus;
        if (oIdea.getBindingContext) {
            sStatus = oIdea.getBindingContext("data").getProperty("STATUS");
        } else {
            sStatus = oIdea.STATUS;
        } 
        oPropertyData.actions.addExpert.enabled = !ObjectFormatter.isFinal(sStatus);
        oPropertyData.actions.assignCoach.enabled = !ObjectFormatter.isFinal(sStatus);
        oPropertyData.actions.assignTag.enabled = !ObjectFormatter.isFinal(sStatus);
        oPropertyData.actions.assignToMe.enabled = !ObjectFormatter.isFinal(sStatus);
        //oPropertyData.actions.reassignCampaign.enabled = !ObjectFormatter.isFinal(sStatus);
        oPropertyData.actions.unassignCoach.enabled = !ObjectFormatter.isFinal(sStatus);
        oPropertyData.actions.executeStatusTransition.enabled = !ObjectFormatter.isFinal(sStatus);
        oPropertyData.actions.mergeIdeas.enabled = !ObjectFormatter.isMerged(sStatus) && !ObjectFormatter.isFinal(sStatus);
        
        return oPropertyData;
    };
    
    BaseActionMixin.formatMergeBtnEnable = function(aClipboardItems) {
        aClipboardItems = aClipboardItems || [];
        var aIdeaItems = aClipboardItems.filter(function(oClipboardItem) {
            return oClipboardItem.name === "sap.ino.commons.models.object.Idea";
        });
        var iTotalLength = 0;
        if (aIdeaItems.length > 0) {
            iTotalLength = aIdeaItems[0].entry.length + Object.keys(this._oSelectionMap || {}).length;
        } else {
            iTotalLength = Object.keys(this._oSelectionMap || {}).length;
        }
        return iTotalLength > 1 && iTotalLength <= 10;
    };
    
    BaseActionMixin.formatIdeaCheckBoxTooltip = function(bSelectAll) {
        return bSelectAll ? this.getText('IDEA_LIST_CHECKBOX_DESELECT_TOOLTIP') : this.getText('IDEA_LIST_CHECKBOX_SELECT_TOOLTIP');
    };

    return BaseActionMixin;
});
}; // end of sap/ino/vc/idea/mixins/BaseActionMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.mixins.ChangeAuthorActionMixin') ) {
jQuery.sap.declare('sap.ino.vc.idea.mixins.ChangeAuthorActionMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/mixins/ChangeAuthorActionMixin",[
    "sap/ino/vc/idea/mixins/BaseActionMixin",
    "sap/ino/vc/commons/BaseObjectController",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/m/MessageBox",
    "sap/ino/commons/application/Configuration",
    "sap/ino/commons/models/object/Idea"
], function(BaseActionMixin,
	BaseObjectController,
	JSONModel,
	MessageToast,
	Filter,
	FilterOperator,
	MessageBox,
	Configuration) {
	"use strict";

	var ChangeAuthorActionMixin = jQuery.extend({}, BaseActionMixin);

	var fnChangeAuthor = function(oReqBody) {
		if (this._oChangeAuthorConfirmDialog && this._oChangeAuthorConfirmDialog.isOpen()) {
			this._oChangeAuthorConfirmDialog.close();
		}
		var that = this;
		BaseObjectController.prototype.executeObjectAction.call(this, "changeAuthorStatic", {
			messages: {
				success: function() {
					if (typeof that.getObjectModel === "function") {
						that.setBusy(true);
						that.getObjectModel().sync();
						that.getObjectModel().getDataInitializedPromise().always(function() {
							that.setBusy(false);
						});
					} else if (typeof that.bindList === "function") {
						that.bindList();
					}
					MessageToast.show(that.getText("OBJECT_MSG_AUTHOR_CHANGE_SUCCESS"), {
						autoClose: false
					});
				},
				error: function(oResp) {
					if (oResp.MESSAGES && oResp.MESSAGES.length > 0) {
						MessageToast.show(that.getText(oResp.MESSAGES[0].MESSAGE_TEXT,oResp.MESSAGES[0].PARAMETERS), {
							autoClose: false
						});
					}
				}
			},
			staticparameters: oReqBody,
			objectModelExt: jQuery.sap.getObject("sap.ino.commons.models.object.Idea", 0)
		});
	};

	var fnGetTargetIdeasIDs = function() {
		if (typeof this.getObjectModel === "function") {
			return [this.getObjectModel().getProperty("/ID")];
		} else {
			return Object.keys(this._oSelectionMap);
		}
	};

	var fnGetTargetIdeasAuthor = function() {
		var oIdea;
		if (typeof this.getObjectModel === "function") {
			oIdea = this.getObjectModel().getData();
			return {
				"ID": oIdea.CREATED_BY_ID,
				"NAME": oIdea.CREATED_BY_NAME
			};
		} else {
			oIdea = this._oSelectionMap[Object.keys(this._oSelectionMap)[0]];
			return {
				"ID": oIdea.SUBMITTER_ID,
				"NAME": oIdea.SUBMITTER_NAME
			};
		}
	};

	var fnGetTargetCampaignIDs = function() {
		if (typeof this.getObjectModel === "function") {
			return [this.getObjectModel().getProperty("/CAMPAIGN_ID")];
		} else {
			var aCampaingIDs = [];
			Object.keys(this._oSelectionMap).forEach(function(sKey) {
				if (aCampaingIDs.indexOf(this._oSelectionMap[sKey].CAMPAIGN_ID) > -1) {
					return;
				}
				aCampaingIDs.push(this._oSelectionMap[sKey].CAMPAIGN_ID);
			}.bind(this));
			return aCampaingIDs;
		}
	};

	ChangeAuthorActionMixin.onChangeAuthorSearch = function(oEvent) {
		this.bindAuthors(oEvent.getSource(), oEvent.getParameter("value"));
	};

	ChangeAuthorActionMixin.onChangeAuthor = function() {
		var oDialog = this.getChangeAuthorDialog();
		this.bindAuthors(oDialog);
		oDialog.open();
	};

	ChangeAuthorActionMixin.onMassChangeAuthor = function(oEvent) {
		if (this.getViewProperty("/List/SELECT_ALL")) {
			var oBindingParams = this.getBindingParameter();
			var bIsManaged = this._check4ManagingList();
			var sFilterParams = this.getList().getBinding('items').sFilterParams;
			var aTags = this.getViewProperty("/List/TAGS");
			var tagGroup = {};
			var tagGroupKey = [];
			aTags.forEach(function(item, index) {
				if (!tagGroup[item.ROOTGROUPID]) {
					tagGroup[item.ROOTGROUPID] = [];
					tagGroup[item.ROOTGROUPID].push(item.ID);
					tagGroupKey.push(item.ROOTGROUPID);
				} else {
					tagGroup[item.ROOTGROUPID].push(item.ID);
				}
			});

			var oParameter = {
				searchToken: oBindingParams.SearchTerm || "",
				tagsToken: tagGroup[tagGroupKey[0]] ? tagGroup[tagGroupKey[0]].join(",") : "",
				tagsToken1: tagGroup[tagGroupKey[1]] ? tagGroup[tagGroupKey[1]].join(",") : "",
				tagsToken2: tagGroup[tagGroupKey[2]] ? tagGroup[tagGroupKey[2]].join(",") : "",
				tagsToken3: tagGroup[tagGroupKey[3]] ? tagGroup[tagGroupKey[3]].join(",") : "",
				tagsToken4: tagGroup[tagGroupKey[4]] ? tagGroup[tagGroupKey[4]].join(",") : "",
				filterName: oBindingParams.VariantFilter || "",
				filterBackoffice: bIsManaged ? "1" : "0",
				filterString: sFilterParams || ""
			};
			if (this.setQueryObjectIdeaformFilters) {
				this.setQueryObjectIdeaformFilters(oParameter);
			}
			if (this.getCampaignFormQuery) {
				oParameter.ideaFormId = this.getCampaignFormQuery() || "";
			}
			if(this.getSearchType){
			    oParameter.searchType = this.getSearchType();
			}
			if (this.setQueryObjectCompanyViewFilters) {
				this.setQueryObjectCompanyViewFilters(oParameter);
			}
			// call back end service
			var that = this;
			var oSource = oEvent.getSource();
			// disable button
			oSource.setEnabled(false);
			jQuery.ajax({
				url: Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/select_all_ideas.xsjs",
				data: oParameter,
				success: function(res) {
					// enable button
					oSource.setEnabled(true);
					if (res.Ideas.length === 0) {
						MessageBox.show(that.getText("NO_IDEAS_AND_RELOAD_PAGE"), {
							icon: MessageBox.Icon.INFORMATION,
							actions: [sap.m.MessageBox.Action.OK],
							onClose: function() {
								that.bindList();
							}
						});
						return;
					}
					// clear selection map
					that._oSelectionMap = {};
					jQuery.each(res.Ideas, function(iIdx, oData) {
						if (!that._oDeselectionMap[oData.ID]) {
							// create data structure as property model
							oData.property = that._createPropertyData(oData);
							that._oSelectionMap[oData.ID] = oData;
						}
					});
					// call change author action
					that._massChangeAuthor();
				},
				error: function(res) {
					MessageToast.show(that.getText(res.responseJSON.messageKey));
				}
			});
		} else {
			// call change author action
			this._massChangeAuthor();
		}
	};

	ChangeAuthorActionMixin._massChangeAuthor = function() {
		var oDialog = this.getMassChangeAuthorDialog();
		this.bindAuthors(oDialog);
		oDialog.open();
	};

	ChangeAuthorActionMixin.onChangeAuthorConfirm = function() {
		var oConfirmData = this._oChangeAuthorConfirmDialog.getModel("confirm").getData();
		var oOldAuthor = fnGetTargetIdeasAuthor.call(this);
		var aIdeaIDs = fnGetTargetIdeasIDs.call(this);
		var oReqBody = {
			"ORIGIN_AUTHOR_ID": oOldAuthor.ID,
			"AUTHOR_ID": oConfirmData.newAuthorID,
			"Reward": oConfirmData.changeReward || false,
			"Selfevaluation": oConfirmData.changeEval || false,
			"keys": aIdeaIDs
		};
		fnChangeAuthor.call(this, oReqBody);
	};

	ChangeAuthorActionMixin.onChangeRewardAndEvluYes = function() {
		var oConfirmData = this._oChangeAuthorConfirmDialog.getModel("confirm").getData();
		var oOldAuthor = fnGetTargetIdeasAuthor.call(this);
		var aIdeaIDs = fnGetTargetIdeasIDs.call(this);
		var oReqBody = {
			"ORIGIN_AUTHOR_ID": oOldAuthor.ID,
			"AUTHOR_ID": oConfirmData.newAuthorID,
			"Reward": oConfirmData.REWARDCOUNT > 0,
			"Selfevaluation": oConfirmData.SELFEVALUATIONCOUNT > 0,
			"keys": aIdeaIDs
		};
		fnChangeAuthor.call(this, oReqBody);
	};

	ChangeAuthorActionMixin.onChangeRewardAndEvaluNO = function() {
		var oConfirmData = this._oChangeAuthorConfirmDialog.getModel("confirm").getData();
		var oOldAuthor = fnGetTargetIdeasAuthor.call(this);
		var aIdeaIDs = fnGetTargetIdeasIDs.call(this);
		var oReqBody = {
			"ORIGIN_AUTHOR_ID": oOldAuthor.ID,
			"AUTHOR_ID": oConfirmData.newAuthorID,
			"Reward": false,
			"Selfevaluation": false,
			"keys": aIdeaIDs
		};
		fnChangeAuthor.call(this, oReqBody);
	};

	ChangeAuthorActionMixin.getChangeAuthorDialog = function() {
		if (!this._oChangeAuthorDialog) {
			var _enhanceDialog = function(oSelectDialog) {
				oSelectDialog._oList.setMode("SingleSelectLeft");
				// remove default handler for single row selection change
				oSelectDialog._oList.mEventRegistry.selectionChange = [];
				//oSelectDialog._oDialog.setBeginButton(oSelectDialog._getOkButton());
				oSelectDialog._oDialog.setEndButton(oSelectDialog._getCancelButton());
			};
			this._oChangeAuthorDialog = this.createFragment("sap.ino.vc.idea.fragments.ChangeAuthor");
			this._oChangeAuthorDialog.attachConfirm(this.onChangeAuthorDialogOK, this);
			this.getView().addDependent(this._oChangeAuthorDialog);
			_enhanceDialog(this._oChangeAuthorDialog);
		}
		return this._oChangeAuthorDialog;
	};

	ChangeAuthorActionMixin.getMassChangeAuthorDialog = function() {
		if (!this._oChangeAuthorDialog) {
			var _enhanceDialog = function(oSelectDialog) {
				oSelectDialog._oList.setMode("SingleSelectLeft");
				// remove default handler for single row selection change
				oSelectDialog._oList.mEventRegistry.selectionChange = [];
				//oSelectDialog._oDialog.setBeginButton(oSelectDialog._getOkButton());
				oSelectDialog._oDialog.setEndButton(oSelectDialog._getCancelButton());
			};
			this._oChangeAuthorDialog = this.createFragment("sap.ino.vc.idea.fragments.ChangeAuthor");
			this._oChangeAuthorDialog.attachConfirm(this.onMassChangeAuthorDialogOK, this);
			this._oChangeAuthorDialog.data("context", "mass");
			this.getView().addDependent(this._oChangeAuthorDialog);
			_enhanceDialog(this._oChangeAuthorDialog);
		}
		return this._oChangeAuthorDialog;
	};

	ChangeAuthorActionMixin.getChangeAuthorConfirmDialog = function() {
		if (!this._oChangeAuthorConfirmDialog) {
			this._oChangeAuthorConfirmDialog = this.createFragment("sap.ino.vc.idea.fragments.ChangeAuthorConfirm");
			this.getView().addDependent(this._oChangeAuthorConfirmDialog);
		}
		return this._oChangeAuthorConfirmDialog;
	};

	ChangeAuthorActionMixin.onChangeAuthorDialogOK = function(oEvent) {
		// check rewards and self evalution
		var sIdeaID = this.getObjectModel().getProperty("/ID");
		var oSelectItem = oEvent.getParameter("selectedItem");
		if (!oSelectItem) {
			return;
		}
		var oChangedSAuthor = oSelectItem.getBindingContext("data").getObject();
		var that = this;
		this.getView().setBusy(true);
		this.getModel("data").read('/IdeaFull(' + sIdeaID + ')/RewardSelfevaluationCount', {
			async: true,
			success: function(oData) {
				oData.SELFEVALUATIONCOUNT = parseInt(oData.SELFEVALUATIONCOUNT, 10);
				oData.REWARDCOUNT = parseInt(oData.REWARDCOUNT, 10);
				if (oData.SELFEVALUATIONCOUNT > 0 || oData.REWARDCOUNT > 0) {
					that.getView().setBusy(false);
					var oChangeAuthorConfirmDialog = that.getChangeAuthorConfirmDialog();
					oChangeAuthorConfirmDialog.setModel(new JSONModel({
						REWARDCOUNT: oData.REWARDCOUNT,
						SELFEVALUATIONCOUNT: oData.SELFEVALUATIONCOUNT,
						oldAuthor: that.getObjectModel().getProperty("/CREATED_BY_NAME"),
						newAuthor: oChangedSAuthor.NAME,
						newAuthorID: oChangedSAuthor.ID
					}), "confirm");
					oChangeAuthorConfirmDialog.open();
				} else {
					var oIdea = that.getObjectModel();
					var oReqBody = {
						"ORIGIN_AUTHOR_ID": oIdea.getProperty("/CREATED_BY_ID"),
						"AUTHOR_ID": oChangedSAuthor.ID,
						"Reward": false,
						"Selfevaluation": false,
						"keys": [oIdea.getProperty("/ID")]
					};
					fnChangeAuthor.call(that, oReqBody);
				}
			}
		});
	};

	ChangeAuthorActionMixin.onMassChangeAuthorDialogOK = function(oEvent) {
		// check rewards and self evalution
		var oSelectItem = oEvent.getParameter("selectedItem");
		if (!oSelectItem) {
			return;
		}
		var oChangedSAuthor = oSelectItem.getBindingContext("data").getObject();
		var oOldAuthor = fnGetTargetIdeasAuthor.call(this);
		var that = this;
		var aFilters = Object.keys(this._oSelectionMap).map(function(sIdeaID) {
			return new Filter({
				path: "ID",
				operator: FilterOperator.EQ,
				value1: sIdeaID
			});
		});
		var _processCountData = function(oData) {
			var iRewardCnt = 0,
				iSelfeEvalCnt = 0;
			oData.some(function(data) {
				if (data.REWARDCOUNT > 0) {
					iRewardCnt = 1;
				}
				if (data.SELFEVALUATIONCOUNT > 0) {
					iSelfeEvalCnt = 1;
				}
				if (iRewardCnt === 1 && iSelfeEvalCnt === 1) {
					return true;
				} else {
					return false;
				}
			});
			return {
				"REWARDCOUNT": iRewardCnt,
				"SELFEVALUATIONCOUNT": iSelfeEvalCnt
			};
		};
		this.getView().setBusy(true);
		this.getModel("data").read('/IdeaRewardSelfevaluationCount', {
			async: true,
			filters: aFilters,
			success: function(oData) {
				var oProcessData = _processCountData(oData.results);
				// oData.SELFEVALUATIONCOUNT = parseInt(oData.SELFEVALUATIONCOUNT, 10);
				// oData.REWARDCOUNT = parseInt(oData.REWARDCOUNT, 10);
				if (oProcessData.SELFEVALUATIONCOUNT > 0 || oProcessData.REWARDCOUNT > 0) {
					that.getView().setBusy(false);
					var oChangeAuthorConfirmDialog = that.getChangeAuthorConfirmDialog();
					oChangeAuthorConfirmDialog.data("context", "mass");
					oChangeAuthorConfirmDialog.setModel(new JSONModel({
						REWARDCOUNT: oProcessData.REWARDCOUNT,
						SELFEVALUATIONCOUNT: oProcessData.SELFEVALUATIONCOUNT,
						oldAuthor: oOldAuthor.NAME,
						newAuthor: oChangedSAuthor.NAME,
						newAuthorID: oChangedSAuthor.ID
					}), "confirm");
					oChangeAuthorConfirmDialog.open();
				} else {
					var oReqBody = {
						"ORIGIN_AUTHOR_ID": oOldAuthor.ID,
						"AUTHOR_ID": oChangedSAuthor.ID,
						"Reward": false,
						"Selfevaluation": false,
						"keys": Object.keys(that._oSelectionMap)
					};
					fnChangeAuthor.call(that, oReqBody);
				}
			}
		});
	};

	ChangeAuthorActionMixin.bindAuthors = function(oDialog, sSearchTerm) {
		var sCampaignIDs = fnGetTargetCampaignIDs.call(this).join(",");
		sSearchTerm = sSearchTerm ? jQuery.sap.encodeURL(sSearchTerm) : "*";
		if (!/.*[\u4e00-\u9fa5]+.*$/.test(sSearchTerm) && sSearchTerm.length < 3) {
			oDialog.removeAllItems();
			return;
		}
		var oOptions = {
			path: "data>/SearchCampaignParticipantsParams(searchToken='" + sSearchTerm + "',campaignIdsToken='" + sCampaignIDs + "')/Results",
			template: oDialog.getBindingInfo("items").template
		};
		var sOldAuthorID;
		if (oDialog.data("context") === "mass") {
			sOldAuthorID = fnGetTargetIdeasAuthor.call(this).ID;
		} else {
			sOldAuthorID = this.getObjectModel().getProperty("/CREATED_BY_ID");
		}
		oOptions.filters = [new Filter({
			path: "ID",
			operator: FilterOperator.NE,
			value1: sOldAuthorID
		})];
		oDialog.bindAggregation("items", oOptions);
	};

	ChangeAuthorActionMixin.handleAuthorSelect = function(oEvent) {
		var oChangeAuthorModel = this.getChangeAuthorDialog().getModel("changedAuthor");
		var oSelItem = oEvent.getParameter("selectedItem");
		oChangeAuthorModel.setProperty("/ID", oSelItem.getKey());
		oChangeAuthorModel.setProperty("/NAME", oSelItem.getText());
	};

	return ChangeAuthorActionMixin;
});
}; // end of sap/ino/vc/idea/mixins/ChangeAuthorActionMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.mixins.ChangeDecisionMixin') ) {
jQuery.sap.declare('sap.ino.vc.idea.mixins.ChangeDecisionMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.message.Message'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ListItem'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/mixins/ChangeDecisionMixin",[
    "sap/ino/commons/models/object/Idea",
    "sap/m/MessageToast",
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/models/core/CodeModel",
    "sap/ino/commons/formatters/ObjectFormatter",
    "sap/ui/core/message/Message",
    "sap/ui/core/MessageType",
    "sap/ino/controls/IFrame",
    "sap/ino/commons/application/Configuration",
    "sap/ui/core/ListItem"
], function(Idea, MessageToast, JSONModel, CodeModel, ObjectFormatter, Message, MessageType, IFrame, Configuration, ListItem) {
	"use strict";

	/**
	 * @class
	 * Mixin that provides an event for user voting
	 */
	var ChangeDecisionMixin = function() {
		throw "Mixin may not be instantiated directly";
	};

	// 	ChangeDecisionMixin.reasonCodeExist = function(sReasonListCode) {
	// 		return (sReasonListCode && sReasonListCode !== '' ? true : false);
	// 	};

	// 	ChangeDecisionMixin.formatter = ObjectFormatter;

	ChangeDecisionMixin.onOpenChangeDecision = function(oEvent) {
		var oDialog = this._getChangeDecisionDialog();
		var oIdea = this.getObjectModel();
		this.resetClientMessages();
		var aDecisions = oIdea.getProperty("/Decisions");
		var oSource = oEvent.getSource();
		var sID = oSource.getCustomData()[0].getValue();
		// 		var aSelectedDecsision = aDecisions.filter(function(oDecision) {
		// 			return oDecision.ID === sID;
		// 		});
		var oSelectedDecision, iIndex;
		for (var i = 0; i < aDecisions.length; i++) {
			if (sID === aDecisions[i].ID) {
				oSelectedDecision = aDecisions[i];
				iIndex = i;
			}
		}
		if (oSelectedDecision) {
			var oExtendDecision = jQuery.extend({}, oSelectedDecision);
			var oDecisionModel = new JSONModel(oExtendDecision);
			oDialog.setModel(oDecisionModel, "decision");
			if (oSelectedDecision.DECISION_REASON_LIST_CODE) {
				var sCodeTable = "sap.ino.xs.object.basis.ValueOptionList.ValueOptions";
				var aReasonList = CodeModel.getCodes(sCodeTable, function(oCode) {
					return oCode.LIST_CODE === oSelectedDecision.DECISION_REASON_LIST_CODE && oCode.ACTIVE === 1;
				});
			}
		}
		oDecisionModel.setProperty("/reasonList", aReasonList);
		oDecisionModel.setProperty("/INDEX", iIndex);
		oDecisionModel.setProperty("/SEND_RESPONSE", 1);
		oDecisionModel.setProperty("/IS_DECISION_RELEVANT", true);
		oDialog.open();
	};
	ChangeDecisionMixin._getChangeDecisionDialog = function() {
		var oDialog = this._oChangeDecisionDialog;
		if (!oDialog) {
			oDialog = this.createFragment("sap.ino.vc.idea.fragments.ChangeDecision", this.getView().getId());
			this.getView().addDependent(oDialog);
			this._oChangeDecisionDialog = oDialog;
		}
		return oDialog;
	};

	ChangeDecisionMixin.onChangeDecisionDialogCancel = function() {
		var oDialog = this._getChangeDecisionDialog();

		oDialog.close();
		this.resetClientMessages();
		var oDecisionModel = oDialog.getModel("decision");
		oDecisionModel.setData(null);
		this._oChangeDecisionDialog.destroy();
		this._oChangeDecisionDialog = undefined;
	};
	ChangeDecisionMixin.onChangeDecisionSuggestionUserSelected = function(oEvent) {
		var oDialog = this._getChangeDecisionDialog();
		var oDecisionModel = oDialog.getModel("decision");
		this.resetClientMessages();
		var oItem = oEvent.getParameters().selectedItem;
		if (oItem) {
			var iId = parseInt(oItem.getProperty("key"), 10);
			oDecisionModel.setProperty("/DECIDER_ID", iId);
		} else {
			var oUser = Configuration.getCurrentUser();
			oDecisionModel.setProperty("/DECIDER_ID", oUser.USER_ID);
		}
	};
	ChangeDecisionMixin.onChangeDecisionSuggestUser = function(oEvent) {
		var sValue = oEvent.getParameter("suggestValue");
		var oTemplate = new ListItem({
			text: "{data>NAME}",
			additionalText: "{data>USER_NAME}",
			key: "{data>ID}"
		});
		oEvent.getSource().bindAggregation("suggestionItems", {
			path: "data>/SearchIdentity(searchToken='" + jQuery.sap.encodeURL(sValue) + "')/Results",
			template: oTemplate,
			parameters: {
				select: "searchToken,ID,NAME,USER_NAME"
			}
		});
	};
	ChangeDecisionMixin.onChangeDecisionDialogOK = function() {
		var oDialog = this._getChangeDecisionDialog();
		var oDecisionModel = oDialog.getModel("decision");
		var oIdea = this.getObjectModel();
		var oActionRequest;
		var that = this;
		if (oDecisionModel.getProperty("/SEND_RESPONSE") === 0) {
			oDecisionModel.setProperty("/RESPONSE", "");
		}
		oDialog.setBusy(true);
		if (!that.hasAnyClientErrorMessages()) {
			oActionRequest = Idea.changeDecision(oIdea.getProperty("/ID"), oDecisionModel.getData());
		}

		if (oActionRequest) {
			oActionRequest.fail(function(o) {
				if (o.MESSAGES && o.MESSAGES.length > 0) {
					MessageToast.show(that.getText(o.MESSAGES[0].MESSAGE_TEXT));
				}
				oDialog.setBusy(false);
				//MessageToast.show(that.getText("OBJECT_MSG_STATUS_CHANGE_FAILED"));
			});
			oActionRequest.done(function() {
				var oDatamodel = that.getModel("data");
				oDatamodel.read("/IdeaDecision(" + oDecisionModel.getProperty("/ID") + ")", {
					success: function(result) {
						oDialog.setBusy(false);
						oDialog.close();
						MessageToast.show(that.getText("OBJECT_MSG_DECISION_CHANGE_SUCCESS"));
						delete result.__metadata;
						oIdea.setProperty("/Decisions/" + oDecisionModel.getProperty("/INDEX"), result);
						oIdea.setProperty("/Decisions/" + oDecisionModel.getProperty("/INDEX") + "/DECISION_DATE", oDecisionModel.getProperty(
							"/DECISION_DATE"));
						that._oChangeDecisionDialog.destroy();
						that._oChangeDecisionDialog = undefined;
					}
				});
			});
// 			oActionRequest.always(function() {
// 				oDialog.setBusy(false);
// 			});
		} else {
			oDialog.setBusy(false);
		}
	};
	ChangeDecisionMixin.onAddLinkChangeDecisionDialogCancel = function() {
		this.resetClientMessages();
		this._oLinkDialog.close();
		this._oLinkDialog.destroy();
		this._oLinkDialog = undefined;
	};

	ChangeDecisionMixin.onAddLinkChangeDecision = function() {
		var oDialog = this.getLinkChangeDecisionDialog();
		oDialog.setModel(new JSONModel({
			URL: "",
			LABEL: ""
		}), "link");
		oDialog.bindElement({
			path: "link>/"
		});

		this.resetClientMessages();
		oDialog.open();
	};

	ChangeDecisionMixin.onAddLinkChangeDecisionDialogOK = function() {
		var oDialog = this.getLinkChangeDecisionDialog();
		var oModel = oDialog.getModel("link");

		var sURL = oModel.getProperty("/URL");
		var sLabel = oModel.getProperty("/LABEL");

		this.resetClientMessages();
		var oMessage = this.addLinkChangeDecision(sURL, sLabel);
		if (oMessage) {
			this.setClientMessage(oMessage, this.byId("URLChangeDecisionInput"));
		} else {
			this._oLinkDialog.close();
			this._oLinkDialog.destroy();
			this._oLinkDialog = undefined;
		}
	};

	ChangeDecisionMixin.addLinkChangeDecision = function(sURL, sLabel) {
		/* jshint validthis: true */
		var oMessage;
		var oDecisionModel = this._getChangeDecisionDialog().getModel("decision");

		sURL = sURL.trim();

		if (!sURL || sURL === "") {
			oMessage = new Message({
				code: "IDEA_OBJECT_MSG_LINK_URL_NOT_ALLOWED",
				type: MessageType.Error
			});
			return oMessage;
		}

		if (sURL && sURL.indexOf("http://") !== 0 && sURL.indexOf("https://") !== 0 && sURL.indexOf("mailto:") !== 0) {
			sURL = "http://" + sURL;
		}

		if (!sURL || sURL === "" || !jQuery.sap.validateUrl(sURL)) {
			oMessage = new Message({
				code: "IDEA_OBJECT_MSG_LINK_URL_NOT_ALLOWED",
				type: MessageType.Error
			});
			return oMessage;
		}

		if (!sLabel || sLabel === "") {
			sLabel = null;
		}

		oDecisionModel.setProperty("/LINK_LABEL", sLabel);
		oDecisionModel.setProperty("/LINK_URL", sURL);
		this.getLinkButtonChangeDecision().setVisible(false);
	};

	ChangeDecisionMixin.getLinkChangeDecisionDialog = function() {
		if (!this._oLinkDialog) {
			this._oLinkDialog = this.createFragment("sap.ino.vc.idea.fragments.ChangeDecisionLink", this.getView().getId());
			this.getView().addDependent(this._oLinkDialog);
			this._oLinkDialog.setInitialFocus(this.createId("URLChangeDecisionInput"));
		}
		return this._oLinkDialog;
	};

	ChangeDecisionMixin.onEditLinkChangeDecision = function() {
		var oDialog = this.getLinkChangeDecisionDialog();
		var oDecisionModel = this._getChangeDecisionDialog().getModel("decision");

		var sURL = oDecisionModel.getProperty("/LINK_URL");
		var sLabel = oDecisionModel.getProperty("/LINK_LABEL");
		oDialog.setModel(new JSONModel({
			URL: sURL,
			LABEL: sLabel
		}), "link");
		oDialog.bindElement({
			path: "link>/"
		});
		oDialog.open();
	};

	ChangeDecisionMixin.onDeleteLinkChangeDecision = function() {
		var oDecisionModel = this._getChangeDecisionDialog().getModel("decision");

		oDecisionModel.setProperty("/LINK_LABEL", "");
		oDecisionModel.setProperty("/LINK_URL", "");
		this.getLinkButtonChangeDecision().setVisible(true);
	};

	ChangeDecisionMixin.getLinkButtonChangeDecision = function() {
		return this.byId("addLinkChangeDecision");
	};

	ChangeDecisionMixin.initLinkButtonChangeDecision = function() {
		this.byId("addLinkChangeDecision").setVisible(true);
	};
	ChangeDecisionMixin.onShowChangeDecisionMailPreview = function(oEvent) {
		var oDialog = this._getChangeDecisionDialog();
		var oDecisionModel = oDialog.getModel("decision");
		var sText = oDecisionModel.getProperty("/RESPONSE");
		var sUserLang = navigator.language || navigator.userLanguage;
		var oParams = {
			CONTENT: jQuery.sap.encodeHTML(sText || ""),
			IDEA: oDecisionModel.getProperty("/IDEA_ID"),
			ACTOR: oDecisionModel.getProperty("/DECIDER_ID"),
			LOCALE: sUserLang.split("-")[0],
			ACTION: oDecisionModel.getProperty("/STATUS_ACTION_CODE"),
			PHASE: oDecisionModel.getProperty("/PHASE_CODE"),
			STATUS: oDecisionModel.getProperty("/STATUS_CODE"),
			TEXT_CODE: oDecisionModel.getProperty("/TEXT_MODULE_CODE"),
			REASON: jQuery.sap.encodeHTML(oDecisionModel.getProperty("/REASON") || ""),
			REASON_CODE: oDecisionModel.getProperty("/REASON_CODE"),
			LINK_LABEL: oDecisionModel.getProperty("/LINK_LABEL"),
			LINK_URL: oDecisionModel.getProperty("/LINK_URL")
		};
		var oModel = new JSONModel(Configuration.getMailPreviewURL(oParams));
		if (!this._oChangeDecisionMailPreviewDialog) {
			this._oChangeDecisionMailPreviewDialog = this.createFragment("sap.ino.vc.idea.fragments.ChangeDecisionMailPreviewDialog");
			this.getView().addDependent(this._oChangeDecisionMailPreviewDialog);
		}
		oModel.attachRequestCompleted(this.onMailTextLoad, this);
	};

	ChangeDecisionMixin.onMailTextLoad = function(oEvent) {
		var oHTML = new IFrame({
			content: oEvent.getSource().getData().TEXT
		});
		this._oChangeDecisionMailPreviewDialog.addContent(oHTML);
		this._oChangeDecisionMailPreviewDialog.open();
	};

	ChangeDecisionMixin.onChangeDecisionMailViewClose = function() {
		if (this._oChangeDecisionMailPreviewDialog) {
			this._oChangeDecisionMailPreviewDialog.close();
			this._oChangeDecisionMailPreviewDialog.removeAllContent();
		}
	};

	ChangeDecisionMixin.onChangeDecisionMakerChange = function(oEvent) {
		var oSource = oEvent.getSource();
		var sValue = oSource.getValue();
		var that = this,
			iId;
		var oStatusModel = typeof this.getChangeStatusDialog === "function" ? this.getChangeStatusDialog().getModel("status") : undefined;
		var oDecisionModel = this._getChangeDecisionDialog().getModel("decision");
		var aSuggestItems = oSource.getAggregation("suggestionItems");
		if (aSuggestItems) {
			for (var i = 0; i < aSuggestItems.length; i++) {
				if (sValue === aSuggestItems[i].getText()) {
					iId = parseInt(aSuggestItems[i].getProperty("key"), 10);
				} else if (sValue === aSuggestItems[i].getAdditionalText()) {
					iId = parseInt(aSuggestItems[i].getProperty("key"), 10);
				}
				if (iId) {
					if (oStatusModel) {
						oStatusModel.setProperty("/DECIDER_ID", iId);
					}
					if (oDecisionModel) {
						oDecisionModel.setProperty("/DECIDER_ID", iId);
					}
					break;
				}
			}
		}

		if (!iId) {
			that.resetClientMessages();
			that.setClientMessage(
				new Message({
					code: "IDEA_OBJECT_MSG_DECISION_MAKER_VALUE_WRONG_INPUT",
					type: MessageType.Error
				}),
				oSource);
		} else {
			that.resetClientMessages();
		}

	};
	return ChangeDecisionMixin;
});
}; // end of sap/ino/vc/idea/mixins/ChangeDecisionMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.mixins.ChangeStatusActionMixin') ) {
jQuery.sap.declare('sap.ino.vc.idea.mixins.ChangeStatusActionMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.message.Message'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ListItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/mixins/ChangeStatusActionMixin",[
    "sap/ino/vc/idea/mixins/BaseActionMixin",
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/models/object/Idea",
    "sap/ino/commons/models/aof/PropertyModel",
    "sap/ino/commons/models/types/IntBooleanType",
    "sap/ui/core/message/Message",
    "sap/ui/core/MessageType",
    "sap/m/MessageToast",
    "sap/ino/controls/IFrame",
    "sap/ino/commons/application/Configuration",
    "sap/ui/core/ListItem",
    "sap/ino/commons/formatters/ObjectFormatter",
    "sap/m/MessageBox"
], function(BaseActionMixin, JSONModel, Idea, PropertyModel, IntBooleanType, Message, MessageType, MessageToast, IFrame, Configuration,
	ListItem, ObjectFormatter, MessageBox) {
	"use strict";

	/**
	 * Mixin that handles changing Idea status in Idea Display and Idea List
	 * @mixin
	 */
	var ChangeStatusActionMixin = jQuery.extend({}, BaseActionMixin);

	ChangeStatusActionMixin.ChangeStatusMixinData = {
		// for mass actions
		aIdeaIds: [],
		iIdeaId: null,
		oPropertyModel: undefined
	};

	ChangeStatusActionMixin.reasonCodeExist = function(sReasonListCode) {
		return (sReasonListCode && sReasonListCode !== '' ? true : false);
	};

	ChangeStatusActionMixin.formatter = ObjectFormatter;

	ChangeStatusActionMixin.onChangeStatus = function(oEvent) {
		// action is triggered from idea detail
		var oDialog = this.getChangeStatusDialog();
		oDialog.data("context", "single");
		var oIdea = this.getObjectModel();
		this.ChangeStatusMixinData.iIdeaId = oIdea.getProperty("/ID");
		this.ChangeStatusMixinData.bIdeaPhaseNeedReward = oIdea.getProperty("/IDEA_PHASE_NEED_REWARD");
		this.ChangeStatusMixinData.bHasIncompletedEvalReq = oIdea.getProperty("/IDEA_HAS_INCOMPLETED_EVAL_REQ");
		this.ChangeStatusMixinData.bRewardDismissed = oIdea.getProperty("/REWARD_DISMISSED");
		this.ChangeStatusMixinData.oPropertyModel = oIdea.getPropertyModel();
		var sInitStatusAction = this.ChangeStatusMixinData.oPropertyModel.getProperty(
			"/actions/executeStatusTransition/customProperties/statusTransitions/0/STATUS_ACTION_CODE");
		this.bindStatusModel(sInitStatusAction);
		this.initLinkButton();
		oDialog.open();
	};

	ChangeStatusActionMixin.onChangeStatusInList = function(oEvent) {

		this.saveCurrentFocusBeforeActionDialogOpen();

		// action is triggered from idea list
		var oSource = oEvent.getSource();
		var oDialog = this.getChangeStatusDialog();
		oDialog.data("context", "single");
		this.ChangeStatusMixinData.iIdeaId = oSource.getBindingContext("data").getProperty("ID");
		this.ChangeStatusMixinData.iCampaignId = oSource.getBindingContext("data").getProperty("CAMPAIGN_ID");
		this.ChangeStatusMixinData.sPhase = oSource.getBindingContext("data").getProperty("PHASE");
		this.ChangeStatusMixinData.bIdeaPhaseNeedReward = oSource.getBindingContext("data").getProperty("IDEA_PHASE_NEED_REWARD");
		this.ChangeStatusMixinData.bHasIncompletedEvalReq = oSource.getBindingContext("data").getProperty("IDEA_HAS_INCOMPLETED_EVAL_REQ");
		this.ChangeStatusMixinData.bRewardDismissed = oSource.getBindingContext("data").getProperty("REWARD_DISMISSED");
		var oSettings = {
			actions: ["executeStatusTransition"]
		};
		this.ChangeStatusMixinData.oPropertyModel = new PropertyModel("sap.ino.xs.object.idea.Idea", this.ChangeStatusMixinData.iIdeaId,
			oSettings, false, function() {
				var sInitStatusAction = this.ChangeStatusMixinData.oPropertyModel.getProperty(
					"/actions/executeStatusTransition/customProperties/statusTransitions/0/STATUS_ACTION_CODE");
				this.bindStatusModel(sInitStatusAction);
				oDialog.open();
			}.bind(this, arguments));
	};

	/**
	 * mass action on change status
	 *
	 */
	ChangeStatusActionMixin.onMassChangeStatus = function(oEvent) {
		// if it's a select all mass action
		if (this.getViewProperty("/List/SELECT_ALL")) {
			var oBindingParams = this.getBindingParameter();
			var bIsManaged = this._check4ManagingList();
			var sFilterParams = this.getList().getBinding('items').sFilterParams;
			var aTags = this.getViewProperty("/List/TAGS");
			var tagGroup = {};
			var tagGroupKey = [];
			aTags.forEach(function(item, index) {
				if (!tagGroup[item.ROOTGROUPID]) {
					tagGroup[item.ROOTGROUPID] = [];
					tagGroup[item.ROOTGROUPID].push(item.ID);
					tagGroupKey.push(item.ROOTGROUPID);
				} else {
					tagGroup[item.ROOTGROUPID].push(item.ID);
				}
			});

			var oParameter = {
				searchToken: oBindingParams.SearchTerm || "",
				tagsToken: tagGroup[tagGroupKey[0]] ? tagGroup[tagGroupKey[0]].join(",") : "",
				tagsToken1: tagGroup[tagGroupKey[1]] ? tagGroup[tagGroupKey[1]].join(",") : "",
				tagsToken2: tagGroup[tagGroupKey[2]] ? tagGroup[tagGroupKey[2]].join(",") : "",
				tagsToken3: tagGroup[tagGroupKey[3]] ? tagGroup[tagGroupKey[3]].join(",") : "",
				tagsToken4: tagGroup[tagGroupKey[4]] ? tagGroup[tagGroupKey[4]].join(",") : "",
				filterName: oBindingParams.VariantFilter || "",
				filterBackoffice: bIsManaged ? "1" : "0",
				filterString: sFilterParams || ""
			};
			if (this.setQueryObjectIdeaformFilters) {
				this.setQueryObjectIdeaformFilters(oParameter);
			}
			if (this.getCampaignFormQuery) {
				oParameter.ideaFormId = this.getCampaignFormQuery() || "";
			}
			if(this.getSearchType){
			    oParameter.searchType = this.getSearchType();
			}
			if (this.setQueryObjectCompanyViewFilters) {
				this.setQueryObjectCompanyViewFilters(oParameter);
			}
			// call back end service
			var that = this;
			var oObjEvt = jQuery.extend({}, oEvent);
			var oSource = oEvent.getSource();
			// disable button
			oSource.setEnabled(false);
			jQuery.ajax({
				url: Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/select_all_ideas.xsjs",
				data: oParameter,
				success: function(res) {
					// enable button
					oSource.setEnabled(true);
					if (res.Ideas.length === 0) {
						MessageBox.show(that.getText("NO_IDEAS_AND_RELOAD_PAGE"), {
							icon: MessageBox.Icon.INFORMATION,
							actions: [sap.m.MessageBox.Action.OK],
							onClose: function() {
								that.bindList();
							}
						});
						return;
					}
					// clear selection map
					that._oSelectionMap = {};
					jQuery.each(res.Ideas, function(iIdx, oData) {
						if (!that._oDeselectionMap[oData.ID]) {
							// create data structure as property model
							oData.property = that._createPropertyData(oData);
							that._oSelectionMap[oData.ID] = oData;
						}
					});
					// call general assign action
					that._onMassChangeStatus(oObjEvt);
				},
				error: function(res) {
					MessageToast.show(that.getText(res.responseJSON.messageKey));
				}
			});
		} else {
			// general assign action
			this._onMassChangeStatus(oEvent);
		}
	};

	/*
	 * event when change status is executed as mass action
	 *
	 * Prerequisite is that all selected ideas belong to the same campaign and are in the same phase and status.
	 *
	 * @param {Event}   oEvent      Event parameter
	 */
	ChangeStatusActionMixin._onMassChangeStatus = function(oEvent) {
		var oDialog = this.getChangeStatusDialog();
		oDialog.data("context", "mass");
		this.ChangeStatusMixinData.aIdeaIds = jQuery.map(this._oSelectionMap, function(oIdea) {
			return oIdea.ID;
		});
		// as all ideas have same status, we only take the first idea for displaying the dialog
		this.ChangeStatusMixinData.iIdeaId = this.ChangeStatusMixinData.aIdeaIds[0];
		var oSettings = {
			actions: ["executeStatusTransition"]
		};
		this.ChangeStatusMixinData.oPropertyModel = new PropertyModel("sap.ino.xs.object.idea.Idea", this.ChangeStatusMixinData.iIdeaId,
			oSettings, false, function() {
				var sInitStatusAction = this.ChangeStatusMixinData.oPropertyModel.getProperty(
					"/actions/executeStatusTransition/customProperties/statusTransitions/0/STATUS_ACTION_CODE");
				this.bindStatusModel(sInitStatusAction);
				oDialog.open();
			}.bind(this, arguments));
	};

	ChangeStatusActionMixin.bindStatusModel = function(sStatusAction) {
		var oStatusModel = Idea.executeStatusTransitionModel(this.ChangeStatusMixinData.oPropertyModel, sStatusAction);
		var oDialog = this.getChangeStatusDialog();
		oDialog.setModel(this.ChangeStatusMixinData.oPropertyModel, "property");
		oDialog.setModel(oStatusModel, "status");
		return oStatusModel;
	};

	/*
        check if reward objects already exist, plus reward feature is disabled in next phase
    */
	ChangeStatusActionMixin.isIdeaPhaseNeedReward = function() {
		var oDialog = this.getChangeStatusDialog();
		var oStatusModel = oDialog.getModel("status");
		if (this.ChangeStatusMixinData.bIdeaPhaseNeedReward && oStatusModel.getProperty("/REWARD_ACTIVE") && !this.ChangeStatusMixinData.bRewardDismissed) {
			return true;
		}
		return false;
	};

	/*
        check if incomplete evaluation request item objects already exist
    */
	ChangeStatusActionMixin.isIdeaHasEvalReq = function() {
		if (this.ChangeStatusMixinData.bHasIncompletedEvalReq && Configuration.getSystemSetting("sap.ino.config.EVAL_REQ_ACTIVE")) {
			return true;
		}
		return false;
	};

	ChangeStatusActionMixin.getChangeStatusDialog = function() {
		if (!this._oChangeStatusDialog) {
			this._oChangeStatusDialog = this.createFragment("sap.ino.vc.idea.fragments.ChangeStatus");
			this.getView().addDependent(this._oChangeStatusDialog);
		}
		return this._oChangeStatusDialog;
	};

	ChangeStatusActionMixin.onChangeStatusSuggestUser = function(oEvent) {
		var sValue = oEvent.getParameter("suggestValue");
		var oTemplate = new ListItem({
			text: "{data>NAME}",
			additionalText: "{data>USER_NAME}",
			key: "{data>ID}"
		});
		oEvent.getSource().bindAggregation("suggestionItems", {
			path: "data>/SearchIdentity(searchToken='" + jQuery.sap.encodeURL(sValue) + "')/Results",
			template: oTemplate,
			parameters: {
				select: "searchToken,ID,NAME,USER_NAME"
			}
		});
	};

	ChangeStatusActionMixin.onStatusActionChanged = function(oEvent) {
		var sStatusAction = oEvent.getSource().getSelectedKey();
		this.resetClientMessages();
		this.clearClientMessages();
		this.initLinkButton();
		this.bindStatusModel(sStatusAction);
	};

	ChangeStatusActionMixin.onChangeStatusDialogOK = function(oEvent) {
		var oDialog = this.getChangeStatusDialog();
		var oStatusModel = oDialog.getModel("status");
		var statusData = oStatusModel.getData('data');
		var that = this;
		var oActionRequest;

		// 		if(!statusData.REASON_CODE && statusData.reasonList && statusData.reasonList[0]){
		// 		    oStatusModel.setProperty('/REASON_CODE', statusData.reasonList[0].CODE);
		// 		}

		function fnOK() {
			oDialog.setBusy(true);
			if (oDialog.data("context") === "mass") {
				if (!that.hasAnyClientErrorMessages()) {
					oActionRequest = Idea.massExecuteStatusTransition(jQuery.extend({}, oStatusModel.getData(), {
						keys: that.ChangeStatusMixinData.aIdeaIds
					}));
				}
			} else {
				if (that.isActionContextSingleIdeaDisplay()) {
					// action is triggered from idea detail
					var oIdea = that.getObjectModel();
					if (!that.hasAnyClientErrorMessages()) {
						oActionRequest = oIdea.executeStatusTransition(oStatusModel.getData(), true);
					}
				} else {
					// action is triggered from idea list
					if (!that.hasAnyClientErrorMessages()) {
						oActionRequest = Idea.executeStatusTransition(that.ChangeStatusMixinData.iIdeaId, oStatusModel.getData());
					}
				}
			}
			if (oActionRequest) {
				oActionRequest.fail(function(o) {
					if (o.MESSAGES && o.MESSAGES.length > 0) {
						MessageToast.show(that.getText(o.MESSAGES[0].MESSAGE_TEXT));
					}
					//MessageToast.show(that.getText("OBJECT_MSG_STATUS_CHANGE_FAILED"));
				});
				oActionRequest.done(function() {
					that.restoreFocusAfterActionDialogClose();
					if (typeof that.bindList === "function") {
						that.bindList();
					}

					oDialog.close();
					MessageToast.show(that.getText("OBJECT_MSG_STATUS_CHANGE_SUCCESS"));
					that._oChangeStatusDialog.destroy();
					that._oChangeStatusDialog = undefined;
				});
				oActionRequest.always(function() {
					oDialog.setBusy(false);
				});
			} else {
				oDialog.setBusy(false);
			}
		}

		var bIsIdeaPhaseNeedReward = this.isIdeaPhaseNeedReward();
		var bIsIdeaHasEvalReq = this.isIdeaHasEvalReq();
		var sConfirmText;
		if (bIsIdeaPhaseNeedReward && bIsIdeaHasEvalReq) {
			sConfirmText = this.getText("OBJECT_MSG_STATUS_CHANGE_DOUBLE_CONFIRMATION");
		} else if (bIsIdeaPhaseNeedReward) {
			sConfirmText = this.getText("OBJECT_MSG_STATUS_CHANGE_CONFIRMATION");
		} else if (bIsIdeaHasEvalReq) {
			sConfirmText = this.getText("OBJECT_MSG_STATUS_CHANGE_EVAL_CONFIRMATION");
		}

		if ((bIsIdeaPhaseNeedReward || bIsIdeaHasEvalReq) &&
			statusData.STATUS_ACTION_CODE === "sap.ino.config.START_NEXT_PHASE") {
			MessageBox.confirm(sConfirmText, {
				title: this.getText("IDEA_OBJECT_TIT_STATUS_CHANGE_CONFIRMATION"),
				icon: MessageBox.Icon.NONE,
				onClose: function(bResult) {
					if (bResult === "OK") {
						fnOK();
					} else {
						that.onChangeStatusDialogCancel();
					}
				}
			});
		} else {
			fnOK();
		}
	};

	ChangeStatusActionMixin.onChangeStatusDialogCancel = function(oEvent) {
		var oDialog = this.getChangeStatusDialog();
		if (this.resetInputTypeValidations) {
			this.resetInputTypeValidations(oDialog);
		}

		this.restoreFocusAfterActionDialogClose();

		this._oChangeStatusDialog.close();
		this._oChangeStatusDialog.destroy();
		this._oChangeStatusDialog = undefined;

	};

	ChangeStatusActionMixin.onAfterChangeStatusDialogClose = function(oEvent) {
		// the respective closed dialog is always the source of the event
		// 		var oDialog = oEvent.getSource();
		// 		this.resetActionState(oDialog.data("context") === "mass");
	};

	ChangeStatusActionMixin.onShowMailPreview = function(oEvent) {
		var oDialog = this.getChangeStatusDialog();
		var oStatusModel = oDialog.getModel("status");
		//	var reasonList = oStatusModel.getProperty("/reasonList");
		//	var reasonCode = oStatusModel.getProperty("/REASON_CODE");
		// if(!reasonCode && reasonList && reasonList[0]){
		//  oStatusModel.setProperty('/REASON_CODE', reasonList[0].CODE);
		//	}
		var oTextMouduleParams = {
			CAMPAIGN_ID: this.ChangeStatusMixinData.iCampaignId,
			PHASE: this.ChangeStatusMixinData.sPhase,
			STATUS_ACTION_CODE: oStatusModel.getProperty("/STATUS_ACTION_CODE"),
			NEXT_STATUS_CODE: oStatusModel.getProperty("/NEXT_STATUS_CODE")
		};
		var oObjectModel = this.getObjectModel && this.getObjectModel();
		if(oObjectModel){
		    oTextMouduleParams.CAMPAIGN_ID = oObjectModel.getProperty("/CAMPAIGN_ID");
		    oTextMouduleParams.PHASE = oObjectModel.getProperty("/PHASE");
		    oTextMouduleParams.STATUS_CODE = oObjectModel.getProperty("/STATUS_CODE");
		}
		var oTextMoudule = new JSONModel(Configuration.getTextMoudleURL(oTextMouduleParams));
		oTextMoudule.attachRequestCompleted(null ,function(){
			var sText = oStatusModel.getProperty("/RESPONSE");
			var sUserLang = this.getModel("user").getData().data.LOCALE;
			var oParams = {
				CONTENT: jQuery.sap.encodeHTML(sText || ""),
				IDEA: this.ChangeStatusMixinData.iIdeaId,
				DECIDER: oStatusModel.getProperty("/DECIDER_ID"),
				ACTOR:Configuration.getCurrentUser().USER_ID,
				LOCALE: sUserLang,
				ACTION: oStatusModel.getProperty("/STATUS_ACTION_CODE"),
				PHASE: oStatusModel.getProperty("/NEXT_PHASE_CODE"),
				STATUS: oStatusModel.getProperty("/NEXT_STATUS_CODE"),
				TEXT_CODE: !oTextMoudule.getData()[0] ? "null" : oTextMoudule.getData()[0].TEXT_MODULE_CODE,
				REASON: jQuery.sap.encodeHTML(oStatusModel.getProperty("/REASON") || ""),
				REASON_CODE: oStatusModel.getProperty("/REASON_CODE"),
				LINK_LABEL: oStatusModel.getProperty("/LINK_LABEL"),
				LINK_URL: oStatusModel.getProperty("/LINK_URL")
			};
			var oModel = new JSONModel(Configuration.getMailPreviewURL(oParams));
			if (!this._oMailPreviewDialog) {
				this._oMailPreviewDialog = this.createFragment("sap.ino.vc.idea.fragments.MailPreviewDialog");
				this.getView().addDependent(this._oMailPreviewDialog);
			}
			oModel.attachRequestCompleted(this.onMailTextLoaded, this);
		},this);
	};

	ChangeStatusActionMixin.onMailTextLoaded = function(oEvent) {
		var oHTML = new IFrame({
			content: oEvent.getSource().getData().TEXT
		});
		this._oMailPreviewDialog.addContent(oHTML);
		this._oMailPreviewDialog.open();
	};

	ChangeStatusActionMixin.onMailViewClose = function() {
		if (this._oMailPreviewDialog) {
			this._oMailPreviewDialog.close();
			this._oMailPreviewDialog.removeAllContent();
		}
	};

	ChangeStatusActionMixin.onChangeStatusSuggestionUserSelected = function(oEvent) {
		var oDialog = this.getChangeStatusDialog();
		var oStatusModel = oDialog.getModel("status");
	    this.resetClientMessages();
		var oItem = oEvent.getParameters().selectedItem;
		if (oItem) {
			var iId = parseInt(oItem.getProperty("key"), 10);
			oStatusModel.setProperty("/DECIDER_ID", iId);
		} else {
			var oUser = Configuration.getCurrentUser();
			oStatusModel.setProperty("/DECIDER_ID", oUser.USER_ID);
		}
	};

	ChangeStatusActionMixin.onAddLinkDialogCancel = function() {
		this.resetClientMessages();
		this._oLinkDialog.close();
		this._oLinkDialog.destroy();
		this._oLinkDialog = undefined;
	};

	ChangeStatusActionMixin.onAddLink = function() {
		var oDialog = this.getLinkDialog();
		oDialog.setModel(new JSONModel({
			URL: "",
			LABEL: ""
		}), "link");
		oDialog.bindElement({
			path: "link>/"
		});

		this.resetClientMessages();
		oDialog.open();
	};

	ChangeStatusActionMixin.onAddLinkDialogOK = function() {
		var oDialog = this.getLinkDialog();
		var oModel = oDialog.getModel("link");

		var sURL = oModel.getProperty("/URL");
		var sLabel = oModel.getProperty("/LABEL");

		this.resetClientMessages();
		var oMessage = this.addLink(sURL, sLabel);
		if (oMessage) {
			this.setClientMessage(oMessage, this.byId("URLInput"));
		} else {
			this._oLinkDialog.close();
			this._oLinkDialog.destroy();
			this._oLinkDialog = undefined;
		}
	};

	ChangeStatusActionMixin.addLink = function(sURL, sLabel) {
		/* jshint validthis: true */
		var oMessage;
		var oStatusModel = this.getChangeStatusDialog().getModel("status");

		sURL = sURL.trim();

		if (!sURL || sURL === "") {
			oMessage = new Message({
				code: "IDEA_OBJECT_MSG_LINK_URL_NOT_ALLOWED",
				type: MessageType.Error
			});
			return oMessage;
		}

		if (sURL && sURL.indexOf("http://") !== 0 && sURL.indexOf("https://") !== 0 && sURL.indexOf("mailto:") !== 0) {
			sURL = "http://" + sURL;
		}

		if (!sURL || sURL === "" || !jQuery.sap.validateUrl(sURL)) {
			oMessage = new Message({
				code: "IDEA_OBJECT_MSG_LINK_URL_NOT_ALLOWED",
				type: MessageType.Error
			});
			return oMessage;
		}

		if (!sLabel || sLabel === "") {
			sLabel = null;
		}

		oStatusModel.setProperty("/LINK_LABEL", sLabel);
		oStatusModel.setProperty("/LINK_URL", sURL);
		this.getLinkButton().setVisible(false);
	};

	ChangeStatusActionMixin.getLinkDialog = function() {
		if (!this._oLinkDialog) {
			this._oLinkDialog = this.createFragment("sap.ino.vc.idea.fragments.Link", this.getView().getId());
			this.getView().addDependent(this._oLinkDialog);
			this._oLinkDialog.setInitialFocus(this.createId("URLInput"));
		}
		return this._oLinkDialog;
	};

	ChangeStatusActionMixin.onEditLink = function() {
		var oDialog = this.getLinkDialog();
		var oStatusModel = this.getChangeStatusDialog().getModel("status");

		var sURL = oStatusModel.getProperty("/LINK_URL");
		var sLabel = oStatusModel.getProperty("/LINK_LABEL");
		oDialog.setModel(new JSONModel({
			URL: sURL,
			LABEL: sLabel
		}), "link");
		oDialog.bindElement({
			path: "link>/"
		});
		oDialog.open();
	};

	ChangeStatusActionMixin.onDeleteLink = function() {
		var oStatusModel = this.getChangeStatusDialog().getModel("status");

		oStatusModel.setProperty("/LINK_LABEL", "");
		oStatusModel.setProperty("/LINK_URL", "");
		this.getLinkButton().setVisible(true);
	};

	ChangeStatusActionMixin.getLinkButton = function() {
		return this.byId("addLink");
	};

	ChangeStatusActionMixin.initLinkButton = function() {
		this.byId("addLink").setVisible(true);
	};

	ChangeStatusActionMixin.clearClientMessages = function() {
		// clear validation on response
		var oMessageManager = new sap.ui.getCore().getMessageManager();
		//oMessageManager.removeAllMessages();
		var aMessages = oMessageManager.getMessageModel().getData();
		var aTextAreaMessages = [];
		jQuery.each(aMessages, function(index, oMessage) {
			if (oMessage.target.indexOf("responseRequireTextArea") > -1 || oMessage.target.indexOf("responseRequireTextAreaDecision") > -1) {
				aTextAreaMessages.push(oMessage);
			}
		});
		oMessageManager.removeMessages(aTextAreaMessages);
	};
	ChangeStatusActionMixin.onChangeStatusMakerChange = function(oEvent) {
		var oSource = oEvent.getSource();
		var sValue = oSource.getValue();
		var that = this,
			iId;
		var oStatusModel = this.getChangeStatusDialog().getModel("status");
		var oDecisionModel = typeof this._getChangeDecisionDialog === "function" ? this._getChangeDecisionDialog().getModel("decision") : undefined;
		var aSuggestItems = oSource.getAggregation("suggestionItems");
		if(aSuggestItems){
    		for (var i = 0; i < aSuggestItems.length; i++) {
    			if (sValue === aSuggestItems[i].getText()) {
    				iId = parseInt(aSuggestItems[i].getProperty("key"), 10);
    			} else if (sValue === aSuggestItems[i].getAdditionalText()) {
    				iId = parseInt(aSuggestItems[i].getProperty("key"), 10);
    			}
    			if (iId) {
    				if (oStatusModel) {
    					oStatusModel.setProperty("/DECIDER_ID", iId);
    				}
    				if (oDecisionModel) {
    					oDecisionModel.setProperty("/DECIDER_ID", iId);
    				}
    				break;	
    			}
    		}
		}

		if (!iId) {
			that.resetClientMessages();
			that.setClientMessage(
				new Message({
					code: "IDEA_OBJECT_MSG_DECISION_MAKER_VALUE_WRONG_INPUT",
					type: MessageType.Error
				}),
				oSource);
		} else {
			that.resetClientMessages();
		}

	};

	return ChangeStatusActionMixin;
});
}; // end of sap/ino/vc/idea/mixins/ChangeStatusActionMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.mixins.CreateRewardActionMixin') ) {
jQuery.sap.declare('sap.ino.vc.idea.mixins.CreateRewardActionMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/mixins/CreateRewardActionMixin",[
    "sap/ino/vc/idea/mixins/BaseActionMixin",
    "sap/ino/vc/commons/BaseController",
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/models/object/Idea",
    "sap/ino/commons/models/object/RewardList",
    "sap/ino/commons/models/aof/PropertyModel",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/ui/model/Sorter",
    "sap/m/MessageToast"
], function(BaseActionMixin, BaseController, JSONModel, Idea, RewardList, PropertyModel, Filter, FilterOperator, Sorter, MessageToast) {
	"use strict";

	/**
	 * Create Reward Action -
	 */
	var CreateRewardActionMixin = jQuery.extend({}, BaseActionMixin);
	CreateRewardActionMixin.onCreateReward = function(oEvent) {
		var aCustomeData = oEvent.getSource().getCustomData();
		if (!aCustomeData || aCustomeData.length === 0) {
			return;
		}
		var oParameters = this._parseCustomDatas(oEvent);
		var oDialog = this._createRewardDialog();
		this._getChildController(oDialog).setDialog(oDialog);
		var oSettings = {
			actions: ["create", "del", "executeStatusTransition"],
			nodes: ["Root"],
			invalidation: {
				entitySets: ["IdeaFull"]
			},
			continuousUse: true,
			concurrencyEnabled: true,
			readSource: {
				model: this.getDefaultODataModel()
			}
		};
		var oRewardList = new RewardList(oParameters.oKey, oSettings);
		this._getChildController(oDialog).getView().setBusy(true);
		if (!oParameters.oKey.hasOwnProperty("IDEA_ID")) {
			var that = this;
			oRewardList.getDataInitializedPromise().done(function() {
				that._getChildController(oDialog).getView().setBusy(false);
			});
		} else {
			this._handleIdeaInfo(oDialog, oRewardList, oParameters.oKey.IDEA_ID);
		}
		this._setDefaultValue(oRewardList, oParameters);
		oDialog.setModel(oRewardList, "object");
		oDialog.open();
	};
	
	//Dismiss Idea Reward
	CreateRewardActionMixin.onDismissReward = function(oEvent) {
		var aCustomeData = oEvent.getSource().getCustomData();
		if (!aCustomeData || aCustomeData.length === 0) {
			return;
		}
		var oParameters = this._parseCustomDatas(oEvent);

		if(oParameters.oKey.IDEA_ID){
		    var oController = this;
			var oRequest = Idea.dismissReward(oParameters.oKey.IDEA_ID);
			oRequest.done(function(){
			    var oBindingInfo = oController.getList().getBindingInfo("items");
			    oController.getList().bindItems(oBindingInfo);
			});
		}
	};

	CreateRewardActionMixin._createRewardDialog = function() {
		var oRewardDialog = this.createFragment("sap.ino.vc.idea.fragments.CreateRewardDialog", this.getView().getId());
		this.getView().addDependent(oRewardDialog);
		return oRewardDialog;
	};

	CreateRewardActionMixin._parseCustomDatas = function(oEvent) {
		var oParameters = {
			oKey: null,
			IdeaPhaseCode: null,
			IdeaName: null,
			UnitCode: null,
			UnitText: null
		};
		var oCustomDatas = oEvent.getSource().getCustomData();
		jQuery.each(oCustomDatas, function(index, data) {
			var sKey = data.getKey();
			var sValue = data.getValue();
			if (sKey === "IdeaId") {
				oParameters.oKey = {
					IDEA_ID: data.getValue(),
					OBJECT_TYPE_CODE: "IDEA",
					OBJECT_ID: data.getValue()
				};
			} else if (sKey === "RewardListId") {
				oParameters.oKey = sValue;
			} else if (oParameters.hasOwnProperty(sKey)) {
				oParameters[sKey] = sValue;
			}
		});
		return oParameters;
	};

	CreateRewardActionMixin._setDefaultValue = function(oRewardList, oParameters) {
		if (typeof oParameters.oKey !== "object") {
			return;
		}
		oRewardList.setProperty("/IDEA_NAME", oParameters.IdeaName);
		oRewardList.setProperty("/IDEA_PHASE_CODE", oParameters.IdeaPhaseCode);
		oRewardList.setProperty("/REWARD_UNIT_CODE", oParameters.UnitCode);
		oRewardList.setProperty("/REWARD_UNIT_TEXT", oParameters.UnitText);
	};

	CreateRewardActionMixin._getChildController = function(oDialog) {
		return oDialog.getContent()[0].getController();
	};

	CreateRewardActionMixin._handleIdeaInfo = function(oDialog, oRewardList, nIdeaId) {
		var that = this;
		oRewardList.getReadSourceModel().read("/IdeaFull(" + nIdeaId + ")/ContributionShare", {
			success: function(oRewards) {
				var aRewards = [];
				jQuery.each(oRewards.results || [], function(index, data) {
					aRewards.push({
						ID: oRewardList.getNextHandle(),
						AUTHOR_ID: data.AUTHOR_ID,
						REWARD_AMOUNT: data.REWARD_AMOUNT,
						REWARD_SHARE: data.REWARD_SHARE,
						CONTRIBUTION_SHARE: data.PERCENTAGE,
						IDEA_ID: data.IDEA_ID,
						EMPLOYEE_NAME: data.AUTHOR_NAME
					});
				});
				that._setIdeaDetails(oRewardList, nIdeaId, aRewards);
				that._getChildController(oDialog).getView().setBusy(false);
			},
			error:function(){
				that._getChildController(oDialog).getView().setBusy(false);
			}
		});
	};

	CreateRewardActionMixin._setIdeaDetails = function(oRewardList, nIdeaId, oRewards) {
		oRewardList.setProperty("/IDEA_ID", nIdeaId);
		oRewardList.setProperty("/Rewards", oRewards);
		oRewardList.setProperty("/REWARD_AMOUNT_TOTAL", 0);
	};

	return CreateRewardActionMixin;
});
}; // end of sap/ino/vc/idea/mixins/CreateRewardActionMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.mixins.FollowUpFormatter') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.vc.idea.mixins.FollowUpFormatter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/vc/idea/mixins/FollowUpFormatter",[
    "sap/ino/commons/formatters/ObjectFormatter"
], function (ObjectFormatter) {
    "use strict";

    var oFollowUpFormatter = function() {};
    
    /**
     * Formats the textual representation of relative date
     * in the combo box with the follow up
     */
    oFollowUpFormatter.followUpRelativeDateText = function(sKey) {
        if (sKey) {
            return ObjectFormatter.text.apply(this, ["IDEA_OBJECT_FLD_FOLLOW_UP_ROW_" + sKey]);
        }
    };
    
    /**
     * Returns the today's date formatted for minDate of DatePicker
     */
    oFollowUpFormatter.minDate = function() {
        var oCurrentDate = new Date();
        return new Date(oCurrentDate.getFullYear(), oCurrentDate.getMonth(), oCurrentDate.getDate());
    };
    
    oFollowUpFormatter.followUpDateHeader = function(oDate) {
        if (oDate) {
            return ObjectFormatter.toDate(oDate);
        }
        return ObjectFormatter.text.apply(this, ["IDEA_OBJECT_TIT_NO_FOLLOW_UP_DATE"]);
    };
    
    oFollowUpFormatter.followUpDateHeaderColor = function(oDate) {
        if (!oDate) {
            return "false";
        }
        var oCurrentDate = new Date();
        var oNow = new Date(oCurrentDate.getFullYear(), oCurrentDate.getMonth(), oCurrentDate.getDate());
        if (oNow > oDate) {
            return "true";
        }
        return "false";
    };
    
    oFollowUpFormatter.followUpOkButtonEnabled = function() {
        var oFollowUpDialog = this.getView() && this.getView()._oFollowUpDialog || this._oFollowUpMixinFollowUpDialog;
        if (oFollowUpDialog && this.hasMessages) {
            return !this.hasMessages(oFollowUpDialog);
        }
        
        return true;
    };

    return oFollowUpFormatter;
});
}; // end of sap/ino/vc/idea/mixins/FollowUpFormatter.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.mixins.FollowUpMixin') ) {
jQuery.sap.declare('sap.ino.vc.idea.mixins.FollowUpMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Locale'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/mixins/FollowUpMixin",[
    "sap/ino/vc/idea/mixins/BaseActionMixin",
    "sap/ino/vc/commons/BaseController",
    "sap/ui/core/format/DateFormat",
    "sap/ino/commons/models/object/FollowUp",
    "sap/ino/vc/idea/mixins/FollowUpFormatter",
    "sap/ino/commons/formatters/BaseFormatter",
    "sap/ino/commons/models/types/FollowUpRelativeDateType",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ino/commons/application/Configuration",
    "sap/m/MessageBox",
    "sap/ui/core/Locale"
], function(BaseActionMixin,
            BaseController,
            DateFormat,
            FollowUp,
            FollowUpFormatter,
            BaseFormatter,
            FollowUpRelativeDateType,
            JSONModel,
            MessageToast,
            Configuration,
            MessageBox,
            Locale) {
    "use strict";
    
    var _oFollowUpMixinDateFormatter;
    var fnGetFollowUpMixinDateFormatter = function(that) {
        if (!_oFollowUpMixinDateFormatter) {
            if (that.getOwnerComponent) {
                _oFollowUpMixinDateFormatter = DateFormat.getDateInstance({pattern: "YYYY-MM-dd"}, new Locale(that.getOwnerComponent().getModel("user").getProperty("/data/LOCALE")));
            }
            else {
                // currently no locale available
                return DateFormat.getDateInstance({pattern: "YYYY-MM-dd"});
            }
        }
        
        return _oFollowUpMixinDateFormatter;
    };

    /**
     * Mixin that handles follow up date for the idea
     * 
     * @mixin
     */
    var FollowUpMixin = jQuery.extend({}, BaseActionMixin);
    
    FollowUpMixin.followUpRelativeDateType = new FollowUpRelativeDateType();
    
    FollowUpMixin.followUpMixinFormatter = FollowUpFormatter;
    
    FollowUpMixin.getFollowUpMixinFollowUpDialog = function() {
        if (!this._oFollowUpMixinFollowUpDialog) {
            this._oFollowUpMixinFollowUpDialog = this.createFragment("sap.ino.vc.idea.fragments.FollowUp", this.getView().getId());
            this.getView().addDependent(this._oFollowUpMixinFollowUpDialog);
            this._oFollowUpMixinFollowUpDialog.setInitialFocus(this.createId("relativeDate"));
        }
        return this._oFollowUpMixinFollowUpDialog;
    };
        
    FollowUpMixin.onFollowUpMixinFollowUp = function(oEvent) {
        var oIdea, iIdeaID, iFollowUpID, dFollowUpDate;
        
        if (this.isActionContextSingleIdeaDisplay()) {
            this.resetClientMessages();
            
            oIdea = this.getObjectModel();
            iIdeaID = oIdea.getProperty("/ID");
            iFollowUpID = oIdea.getProperty("/FOLLOW_UP_ID");
            dFollowUpDate = oIdea.getProperty("/FOLLOW_UP_DATE");
        } else {
            oIdea = oEvent.getSource().getBindingContext("data");
            iIdeaID = oIdea.getProperty("ID");
            iFollowUpID = oIdea.getProperty("FOLLOW_UP_ID");
            dFollowUpDate = oIdea.getProperty("FOLLOW_UP_DATE");
        }
        var oDialog = this.getFollowUpMixinFollowUpDialog();
        oDialog.data("context", "single");
        oDialog.setModel(new JSONModel({
            "ID": iIdeaID,
            "FOLLOW_UP_ID": iFollowUpID,
            "FOLLOW_UP_DATE": dFollowUpDate,
            "FOLLOW_UP_RELATIVE_DATES": FollowUp.relativeDates
        }), "followUp");
        
        oDialog.open();
    };
    
    FollowUpMixin.onMassFollowUp = function(oEvent) {
        // if it's a select all mass action
	    if (this.getViewProperty("/List/SELECT_ALL")) {
	        var oBindingParams = this.getBindingParameter();
    		var bIsManaged = this._check4ManagingList();
    		var sFilterParams = this.getList().getBinding('items').sFilterParams;
    		var aTags = this.getViewProperty("/List/TAGS");
		    var tagGroup = {};
            var tagGroupKey = [];
            aTags.forEach(function(item,index){
                        if(!tagGroup[item.ROOTGROUPID]){
                            tagGroup[item.ROOTGROUPID] = [];
                            tagGroup[item.ROOTGROUPID].push(item.ID);
                            tagGroupKey.push(item.ROOTGROUPID);
                        } else {
                            tagGroup[item.ROOTGROUPID].push(item.ID);
                        }   
                    });
    		
    		
    		var oParameter = {
    			searchToken: oBindingParams.SearchTerm || "",
    			tagsToken:  tagGroup[tagGroupKey[0]] ? tagGroup[tagGroupKey[0]].join(",") : "",
    			tagsToken1: tagGroup[tagGroupKey[1]] ? tagGroup[tagGroupKey[1]].join(",") : "",
    			tagsToken2: tagGroup[tagGroupKey[2]] ? tagGroup[tagGroupKey[2]].join(",") : "",
    			tagsToken3: tagGroup[tagGroupKey[3]] ? tagGroup[tagGroupKey[3]].join(",") : "",
    			tagsToken4: tagGroup[tagGroupKey[4]] ? tagGroup[tagGroupKey[4]].join(",") : "",
    			filterName: oBindingParams.VariantFilter || "",
    			filterBackoffice: bIsManaged ? "1" : "0",
    			filterString: sFilterParams || ""
    		};
    		if(this.setQueryObjectIdeaformFilters){
    		    this.setQueryObjectIdeaformFilters(oParameter);
    		}
    		if(this.getCampaignFormQuery){
    		    oParameter.ideaFormId = this.getCampaignFormQuery() || "";
    		}
    		if(this.getSearchType){
			    oParameter.searchType = this.getSearchType();
			}
			if (this.setQueryObjectCompanyViewFilters) {
				this.setQueryObjectCompanyViewFilters(oParameter);
			}
    		
    		// call back end service
    		var that = this;
    		var oSource = oEvent.getSource();
    		// disable button
    		oSource.setEnabled(false);
    		jQuery.ajax({
    			url: Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/select_all_ideas.xsjs",
    			data: oParameter,
    			success: function(res) {
    			    // enable button
    			    oSource.setEnabled(true);
    			    if (res.Ideas.length === 0) {
    			        MessageBox.show(that.getText("NO_IDEAS_AND_RELOAD_PAGE"), {
    			            icon: MessageBox.Icon.INFORMATION,
    			            actions: [sap.m.MessageBox.Action.OK],
    			            onClose: function() {
    			                that.bindList();
    			            }
    			        });
    			        return;
    			    }
    			    // clear selection map
    			    that._oSelectionMap = {};
    			    jQuery.each(res.Ideas, function(iIdx, oData) {
    			        if (!that._oDeselectionMap[oData.ID]) {
        			        // create data structure as property model
        			        oData.property = that._createPropertyData(oData);
        			        if (oData.FOLLOW_UP_DATE) {
        			            oData.FOLLOW_UP_DATE = new Date(oData.FOLLOW_UP_DATE);
        			        }
        			        that._oSelectionMap[oData.ID] = oData;
    			        }
    			    });
    			    // call general assign action
	                that.onFollowUpMixinMassFollowUp();
    			},
    			error: function(res) {
    			    MessageToast.show(that.getText(res.responseJSON.messageKey));
    			}
    		});
	    } else {
	        // general assign action
	        this.onFollowUpMixinMassFollowUp();
	    }
    };
    
    FollowUpMixin.onFollowUpMixinMassFollowUp = function () {
        var aIdeaIDs = jQuery.map(this._oSelectionMap, function (oIdea) {
            return oIdea.ID;
        });
        var dFirstFollowUpDate = jQuery.map(this._oSelectionMap, function (oIdea) {
            return oIdea.FOLLOW_UP_DATE;
        }).reduce(
            // IE-compatible version of Array.prototype.find
            function (vPrevValue, vCurrValue) {
            if (vPrevValue) {
                return vPrevValue;
            } else {
                return vCurrValue;
            } 
        }, null);
        var oDialog = this.getFollowUpMixinFollowUpDialog();
        oDialog.data("context", "mass");
        oDialog.setModel(new JSONModel({
            "IDS": aIdeaIDs,
            "ID": null,
            "FOLLOW_UP_ID": -1,
            "FOLLOW_UP_DATE": dFirstFollowUpDate,
            "FOLLOW_UP_RELATIVE_DATES": FollowUp.relativeDates
        }), "followUp");
        oDialog.open();
    };
    
    FollowUpMixin.onFollowUpMixinFollowUpDialogOK = function(oEvent) {
        var that = this;
        var oDialog = this.getFollowUpMixinFollowUpDialog();
        oDialog.setBusy(true);
        var oFollowUp = oDialog.getModel("followUp");
        var sDate = oFollowUp.getProperty("/FOLLOW_UP_DATE") && fnGetFollowUpMixinDateFormatter(this).format(oFollowUp.getProperty("/FOLLOW_UP_DATE"));
        if (oDialog.data("context") === "mass") {
            // mass action handling
            var oOptions = {
                parameters: {
                    ideaIds: oFollowUp.getProperty("/IDS"),
                    date: sDate
                },
                messages: {
                    success: function() {
                        oDialog.close();
                        return that.getText("OBJECT_MSG_FOLLOW_UP_SAVE_SUCCESS");
                    },
                    error: function() {
                        return that.getText("OBJECT_MSG_FOLLOW_UP_SAVE_FAILED");
                    }
                }
            };
            var oMassRequest = BaseController.prototype.executeObjectAction.call(this, FollowUp, "massModify", oOptions);
            oMassRequest.always(function() {
                oDialog.setBusy(false);
            });
        } else {
            //var oIdea = this.getObjectModel();
            if (sDate) {
                var oModifyRequest = FollowUp.modify(oFollowUp.getProperty("/FOLLOW_UP_ID") || -1, {
                    DATE: sDate,
                    OBJECT_ID: oFollowUp.getProperty("/ID"),
                    OBJECT_TYPE_CODE: "IDEA"
                });
                oModifyRequest.done(function(){
                    oDialog.close();
                    MessageToast.show(that.getText("OBJECT_MSG_FOLLOW_UP_SAVE_SUCCESS"));
                });
                oModifyRequest.fail(function(){
                    MessageToast.show(that.getText("OBJECT_MSG_FOLLOW_UP_SAVE_FAILED"));
                });
                oModifyRequest.always(function() {
                    oDialog.setBusy(false);
                });
            } else {
                if (oFollowUp.getProperty("/FOLLOW_UP_ID")) {
                    var oDeleteRequest = FollowUp.del(oFollowUp.getProperty("/FOLLOW_UP_ID"), {OBJECT_ID: oFollowUp.getProperty("/ID")});
                    oDeleteRequest.done(function(){
                        oDialog.setModel(undefined, "followUp");
                        oDialog.close();
                        MessageToast.show(that.getText("OBJECT_MSG_FOLLOW_UP_DEL_SUCCESS"));
                    });
                    oDeleteRequest.fail(function(){
                        MessageToast.show(that.getText("OBJECT_MSG_FOLLOW_UP_DEL_FAILED"));
                    });
                    oDeleteRequest.always(function() {
                        oDialog.setBusy(false);
                    });
                } else {
                    oDialog.setBusy(false);
                }
            }
        }
    };
        
    FollowUpMixin.onFollowUpMixinFollowUpDialogDelete = function(oEvent) {
        var that = this;
        var oDialog = this.getFollowUpMixinFollowUpDialog();
        oDialog.setBusy(true);
        var oFollowUp = oDialog.getModel("followUp");
        var sFollowUpId = oFollowUp && oFollowUp.getProperty("/FOLLOW_UP_ID");
        if (oDialog.data("context") === "mass") {
            // mass action handling
            var oOptions = {
                parameters: {
                    ideaIds: oFollowUp.getProperty("/IDS"),
                    date: null
                },
                messages: {
                    success: function() {
                        oDialog.close();
                        return that.getText("OBJECT_MSG_FOLLOW_UP_SAVE_SUCCESS");
                    },
                    error: function() {
                        return that.getText("OBJECT_MSG_FOLLOW_UP_SAVE_FAILED");
                    }
                }
            };
            var oMassRequest = BaseController.prototype.executeObjectAction.call(this, FollowUp, "massModify", oOptions);
            oMassRequest.always(function() {
                oDialog.setBusy(false);
            });
        } else {
            if (sFollowUpId) {
                var oDeleteRequest = FollowUp.del(sFollowUpId, {OBJECT_ID: oFollowUp.getProperty("/ID")});
                oDeleteRequest.done(function(){
                    oDialog.close();
                    MessageToast.show(that.getText("OBJECT_MSG_FOLLOW_UP_DEL_SUCCESS"));
                });
                oDeleteRequest.fail(function(){
                    MessageToast.show(that.getText("OBJECT_MSG_FOLLOW_UP_DEL_FAILED"));
                });
                oDeleteRequest.always(function() {
                    oDialog.setBusy(false);
                });
            } else {
                oDialog.setBusy(false);
                oDialog.close();
            }
        }
    };

    FollowUpMixin.onFollowUpMixinFollowUpDialogCancel = function() {
        var oDialog = this.getFollowUpMixinFollowUpDialog();
        if (this.isActionContextSingleIdeaDisplay()) {
            this.resetInputTypeValidations(oDialog);
        }
        oDialog.close();
    };

    /**
     * event after dialog close; cleans up the error messages, mass action status and the dialog
     */ 
    FollowUpMixin.onFollowUpMixinFollowUpAfterClose = function(oEvent) {
        var oDialog = oEvent.getSource();
        //this.resetActionState(oDialog.data("context") === "mass");
        oDialog.destroy();
        this._oFollowUpMixinFollowUpDialog = undefined;
    };

    return FollowUpMixin;
});


}; // end of sap/ino/vc/idea/mixins/FollowUpMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.mixins.MarkAsReadActionMixin') ) {
jQuery.sap.declare('sap.ino.vc.idea.mixins.MarkAsReadActionMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ListItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.Token'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.message.Message'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.BusyIndicator'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/mixins/MarkAsReadActionMixin",[
    "sap/ino/vc/idea/mixins/BaseActionMixin",
    "sap/ino/vc/commons/BaseController",
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/models/object/Idea",
    "sap/ino/commons/models/aof/PropertyModel",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/ui/model/Sorter",
    "sap/m/MessageToast",
    "sap/ui/Device",
    "sap/ui/core/ListItem",
    "sap/m/Token",
    "sap/ino/commons/models/object/User",
    "sap/ui/core/MessageType",
    "sap/ui/core/message/Message",
    "sap/m/MessageBox",
    "sap/ino/commons/application/Configuration",
    "sap/ino/commons/models/object/IdeaLatest",
    "sap/ui/core/BusyIndicator"
], function(BaseActionMixin, BaseController, JSONModel, Idea, PropertyModel, Filter, FilterOperator, Sorter, MessageToast, Device, ListItem,
	Token, User, MessageType, Message, MessageBox, Configuration, IdeaLatest, BusyIndicator) {
	"use strict";
	var MarkAsReadActionMixin = jQuery.extend({}, BaseActionMixin);
	var mLatestUpdate = {
		NEW_IDEAS: "SHOW_CREATED_VIEWER",
		NEW_UPDATES: "SHOW_UPDATED_VIEWER",
		NEW_STATUSES: "SHOW_STATUSCHANGE_VIEWER",
		NEW_COMMENTS: "SHOW_COMMENT_VIEWER"
	};
	MarkAsReadActionMixin.onMassMarkAsRead = function(oEvent) {
		var oSource = oEvent.getSource();
		if (this.getModel("markAsRead")) {
			this.getModel("markAsRead").destroy();
		}
		var aLatestUpdate = this.getViewProperty("/List/LATEST_UPDATE");
		var aItems = this.getList().getItems();
		var oEnableProperty = {
			markAllRead: true,
			//"NEW_IDEAS": true,
			"NEW_UPDATES": true,
			"NEW_STATUSES": true,
			"NEW_COMMENTS": true
		};
		if (aLatestUpdate && aLatestUpdate.length > 0) {
			jQuery.each(mLatestUpdate, function(key, value) {
				oEnableProperty[key] = aLatestUpdate.indexOf(value) > -1 ? true : false;
			});
			oEnableProperty.markAllRead = false;
		}
		if (aItems.length === 0) {
			oEnableProperty = {
				markAllRead: false,
				//"NEW_IDEAS": false,
				"NEW_UPDATES": false,
				"NEW_STATUSES": false,
				"NEW_COMMENTS": false
			};
		}
		var oModel = new JSONModel(oEnableProperty);
		this.setModel(oModel, "markAsRead");

		this._openMarkAsReadActionSheet(oSource);
	};

	MarkAsReadActionMixin._openMarkAsReadActionSheet = function(oSource) {
		if (!this._oMarkReadActionSheet) {
			this._oMarkReadActionSheet = this.createFragment("sap.ino.vc.idea.fragments.MarkAsReadActionSheet", this.getView().getId());
			this.getView().addDependent(this._oMarkReadActionSheet);
		}
		jQuery.sap.delayedCall(0, this, function() {
			this._oMarkReadActionSheet.openBy(oSource);
		});
	};

	MarkAsReadActionMixin.onMarkAllRead = function(oEvent) {
		this.onMarkAsReadCommon(oEvent, 'all');
	};
	MarkAsReadActionMixin.onMarkCreatedRead = function(oEvent) {
		this.onMarkAsReadCommon(oEvent, 'created');
	};
	MarkAsReadActionMixin.onMarkStatusRead = function(oEvent) {
		this.onMarkAsReadCommon(oEvent, 'status');
	};
	MarkAsReadActionMixin.onMarkUpdatedRead = function(oEvent) {
		this.onMarkAsReadCommon(oEvent, 'updated');
	};
	MarkAsReadActionMixin.onMarkCommentRead = function(oEvent) {
		this.onMarkAsReadCommon(oEvent, 'comment');
	};

	MarkAsReadActionMixin.onMarkAsReadCommon = function(oEvent, sType) {
		//According to different type to call different service, after that then rebind list.
		var aTypeCode = [];
		switch (sType) {
// 			case 'created':
// 				aTypeCode.push("CreatedViewer");
// 				break;
			case 'status':
				aTypeCode.push("StatusChangeViewer");
				break;
			case 'updated':
				aTypeCode.push("UpdatedViewer");
				break;
			case 'comment':
				aTypeCode.push("CommentViewer");
				break;
			case 'all':
				aTypeCode = ["CreatedViewer", "UpdatedViewer", "StatusChangeViewer", "CommentViewer"];
				break;
		}
		//var oDataPra = {"TYPE_CODE": aTypeCode};
		var oParameters = this._getFilterParameters();
		oParameters.TYPE_CODE = aTypeCode;
		var oRequest = IdeaLatest.deleteViewerByObjectIdAndTypeCode(oParameters);
		var that = this;
		BusyIndicator.show(0);
		oRequest.done(function(oRes) {
			MessageToast.show(that.getText("IDEA_OBJECT_MSG_MARK_AS_READ_SUCCESS"));
			BusyIndicator.hide();
			that.getIdeaFilterCount(that.getQuery());				
			that.bindList();
		}).fail(function(oRes) {
			MessageToast.show(that.getText("IDEA_OBJECT_MSG_MARK_AS_READ_FAIL"));

		});

	};
	MarkAsReadActionMixin._getFilterParameters = function() {
		var oBindingParams = this.getBindingParameter();
		var bIsManaged = this._check4ManagingList();
		var sFilterParams = this.getList().getBinding('items').sFilterParams;

		var sIdeaformFilters = this.getIdeaformFilters().replace(/\'/g, "").replace(/\"/g, "").split(",");
		var aCompanyViewFilters = this.getCompanyViewFilters().replace(/\'/g, "").replace(/\"/g, "").split(",");
		var aTags = this.getViewProperty("/List/TAGS");
		var tagGroup = {};
		var tagGroupKey = [];
		aTags.forEach(function(item, index) {
			if (!tagGroup[item.ROOTGROUPID]) {
				tagGroup[item.ROOTGROUPID] = [];
				tagGroup[item.ROOTGROUPID].push(item.ID);
				tagGroupKey.push(item.ROOTGROUPID);
			} else {
				tagGroup[item.ROOTGROUPID].push(item.ID);
			}
		});

		var oParameter = {
			searchToken: oBindingParams.SearchTerm || "",
			tagsToken: tagGroup[tagGroupKey[0]] ? tagGroup[tagGroupKey[0]].join(",") : "",
			tagsToken1: tagGroup[tagGroupKey[1]] ? tagGroup[tagGroupKey[1]].join(",") : "",
			tagsToken2: tagGroup[tagGroupKey[2]] ? tagGroup[tagGroupKey[2]].join(",") : "",
			tagsToken3: tagGroup[tagGroupKey[3]] ? tagGroup[tagGroupKey[3]].join(",") : "",
			tagsToken4: tagGroup[tagGroupKey[4]] ? tagGroup[tagGroupKey[4]].join(",") : "",
			filterName: oBindingParams.VariantFilter || "",
			filterBackoffice: bIsManaged ? "1" : "0",
			c1: sIdeaformFilters[1].slice(3) || "",
			o1: sIdeaformFilters[2].slice(3) || -1,
			v1: unescape(sIdeaformFilters[3].slice(3)) || "",
			c2: sIdeaformFilters[4].slice(3) || "",
			o2: sIdeaformFilters[5].slice(3) || -1,
			v2: unescape(sIdeaformFilters[6].slice(3)) || "",
			c3: sIdeaformFilters[7].slice(3) || "",
			o3: sIdeaformFilters[8].slice(3) || -1,
			v3: unescape(sIdeaformFilters[9].slice(3)) || "",
			cvy: aCompanyViewFilters[3].slice(4) || 0,
			cvr: aCompanyViewFilters[2].slice(4) || 0,
			cvt: decodeURIComponent(aCompanyViewFilters[1].slice(4)) || "",
			filterString: sFilterParams || ""
		};
		oParameter.ideasId = "";
		if(!bIsManaged){
		    var oGroupVariant = this.getGroupViewParameters(oBindingParams);
		    oParameter.cvy = oGroupVariant.groupType;
		    oParameter.cvr = oGroupVariant.groupRole;
		    oParameter.cvt = oGroupVariant.groupToken;
		} else {
		    oParameter.searchType = this.getSearchType();
		}
		

		var sFilterContent = oParameter.filterString ? (/\$filter=(.*)/gm.exec(sFilterParams)[1]) : "";

		oParameter.filterString = "$filter=(" + sFilterContent + ")";

		return oParameter;
	};
	MarkAsReadActionMixin.onIdeaReadPress = function(oEvent) {
		var oItem = oEvent.getSource();
		var oContext = oItem.getBindingContext("data");
		var oParameters = {},
			aTypeCode = [];
		aTypeCode = ["CreatedViewer", "UpdatedViewer", "StatusChangeViewer", "CommentViewer"];
		oParameters.TYPE_CODE = aTypeCode;
		oParameters.IDEA_ID = oContext.getProperty("ID");
		var oRequest = IdeaLatest.deleteViewerByObjectIdAndTypeCode(oParameters);
		var that = this;
		oRequest.done(function(oRes) {
			MessageToast.show(that.getText("IDEA_OBJECT_MSG_MARK_AS_READ_SUCCESS"));
			that.getIdeaFilterCount(that.getQuery());				
			that.bindList();
		}).fail(function(oRes) {
			MessageToast.show(that.getText("IDEA_OBJECT_MSG_MARK_AS_READ_FAIL"));
		});
	};
	return MarkAsReadActionMixin;
});
}; // end of sap/ino/vc/idea/mixins/MarkAsReadActionMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.mixins.MergeActionMixin') ) {
jQuery.sap.declare('sap.ino.vc.idea.mixins.MergeActionMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.m.CheckBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/mixins/MergeActionMixin",[
    "sap/ino/vc/idea/mixins/BaseActionMixin",
    "sap/ino/vc/commons/BaseController",
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/models/core/ClipboardModel",
    "sap/ino/commons/models/core/ModelSynchronizer",
    "sap/ino/commons/models/aof/PropertyModel",
    'sap/ino/commons/models/object/Idea',
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/ui/model/Sorter",
    "sap/m/CheckBox",
    "sap/m/MessageToast",
    "sap/ino/commons/application/Configuration",
    "sap/m/MessageBox",
    "sap/ino/commons/models/object/MergeConfig",
    "sap/ino/controls/IdeaStatusType"
], function(BaseActionMixin,
            BaseController,
            JSONModel,
            ClipboardModel,
            ModelSynchronizer,
            PropertyModel,
            Idea, 
            Filter, 
            FilterOperator,
            Sorter,
            CheckBox,
            MessageToast,
            Configuration,
            MessageBox,
            MergeConfig,
            IdeaStatusType) {
    "use strict";
    
    var MergeActionMixin = jQuery.extend({}, BaseActionMixin);

    /**
    * Event handler triggered by pressing merge either in idea display or list
    *
    * @param    {Event}     oEvent      press event by respective buttons
    */
    MergeActionMixin.onIdeaMerge = function(oEvent) {
        // @Todo: check initially whether merging of the source idea is allowed at all - if no, break with error
        var oDialog, iIdeaId, sName, aFilters, oClipboard, oMergeModel;
        var oSource = oEvent.getSource();
        
        // get current idea ID and Name
        if (this.isActionContextSingleIdeaDisplay()) {
            iIdeaId = this.getObjectModel().getProperty("/ID");
            sName = this.getObjectModel().getProperty("/NAME");
        } else {
            iIdeaId = oSource.getBindingContext("data").getProperty("ID");
            sName = oSource.getBindingContext("data").getProperty("NAME");
        }
        
        // internal model for merge feature
        oMergeModel = new JSONModel({
            // current page in NavController
            pageview: "merge01",
            // source idea info (idea on which merge is initially executed)
            sourceId : iIdeaId,
            sourceName: sName,
            // leading idea
            leadingIdeaId: iIdeaId,
            // all ideas initially loaded for selection
            allIdeas: [],
            // selected ideas in first step
            selectedIdeas: [],
            // enriched model with merged property model information
            selectedIdeaObjects: []
        });

        // get idea IDs from clipboard and create filter array
        oClipboard = this._getClipboardModel();
        if (oClipboard) {
            // get clipboard ideas except currently selected idea
            var aCBIdeas = oClipboard.getObjectKeys(Idea).filter(function (iTempIdeaId) {
                    // filter source Idea
                    return iTempIdeaId !== iIdeaId;
                });
            aFilters = aCBIdeas.map(function (iTempIdeaId) {
                    // return Filter
                    return new Filter("ID", FilterOperator.EQ, iTempIdeaId);
                });
            oMergeModel.setProperty("/selectedIdeas", aCBIdeas);
            // Note: must be a clone, otherwise array object is the same!
            oMergeModel.setProperty("/allIdeas", aCBIdeas.slice(0));
        }
        var all_ideaID = aCBIdeas;
        all_ideaID.push(iIdeaId);
        var mergeRequestBody = {
            idea_id :all_ideaID.join(",")
        };
        var that = this;
        var finalResult;
        var checkRequest = jQuery.ajax({
    			url: Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/check_merge_anonymous_idea.xsjs",
    			data: mergeRequestBody,
    				success: function(res) {
    				    finalResult = res;
    				},
    			type: "GET",
			    contentType: "application/json; charset=UTF-8",
			    async: false
    		});
    	// if one of ideas is anonymous ,the merge operation will be rejected
    	 if (finalResult === 0) {
            MessageToast.show(that.getText("IDEA_MERGE_MSG_ANONYMOUS_IDEA_CANNOT_BE_MERGED"));
            return;
        }
        // there must be ideas in clipboard in order to being able to merge
        if (aFilters.length === 0) {
            MessageToast.show(that.getText("MSG_IDEA_MERGE_NO_IDEA_IN_CLIPBOARD"));
            return;
        }
        
        // check whether a merge operation is allowed on the selected idea
       
        var aProp = new PropertyModel("sap.ino.xs.object.idea.Idea", iIdeaId, {actions : ["mergeIdeas"]}, false, function(oPropEvent) {
            var oData = oPropEvent.getSource().getData();
            
            if (oData && oData.actions && oData.actions.mergeIdeas) {
                var oMergeIdeas = oData.actions.mergeIdeas;
                if (oMergeIdeas.enabled) { 
                    // internal model - i18n and data are inherited due to dependency
                    that.setModel(oMergeModel, "merge");
    
                    // Create the Dialog
                    oDialog = that._getIdeaMergeDialog();
                    that._prepareListItemForIdeaMerge(aFilters);
            
                    oDialog.open();
                } else {
                    MessageToast.show(oMergeIdeas.messages && oMergeIdeas.messages.length > 0 && oMergeIdeas.messages[0].MESSAGE_TEXT || this.getText("IDEA_MERGE_MSG_IDEA_CANNOT_BE_MERGED"));
                }
            }
        });
    };

    /**
     * returns the MergeDialog
     * 
     * @private
     * @return {sap.m.Dialog}   The merge dialog
     */
    MergeActionMixin._getIdeaMergeDialog = function() {
        if (!this._oMergeDialog) {
            this._oMergeDialog = this.createFragment("sap.ino.vc.idea.fragments.IdeaMergeDialog", this.getView().getId());
            this.getView().addDependent(this._oMergeDialog);
            this._sResizeMergeDialog = this.attachListControlResized(this.byId("ideaSelection"));
        }
        return this._oMergeDialog;
    };
    
    /**
     * creates the idea template and binds it to the dialog selection list
     * 
     * @private
     * @param   {Filter[]}  aFilters    filters corresponding to selectable ideas for OData filtering
     */ 
    MergeActionMixin._prepareListItemForIdeaMerge = function(aFilters){
        var oActionBox , oCheckBox , oSelectionList;
        
        // prepare FlatListItemForMerge template by adding checkbox
        if (!this._oIdeaMergeListItemTemplate) {
            this._oIdeaMergeListItemTemplate = this.getFragment("sap.ino.vc.idea.fragments.FlatListItemForMerge");
            // as this is a template, we need to get the idea via Fragment's byId
            oActionBox = sap.ui.core.Fragment.byId(this.getView().getId(), "flatListIdeaActions");
            // remove the first checkbox
            oActionBox.removeItem(oActionBox.getItems()[0]);
            oCheckBox = new CheckBox({
                selected: {
                    parts: [{path: "data>ID"}, {path: "merge>/selectedIdeas"}], formatter: this.formatIsInSelectedIdeas
                }, 
                select: this.onIdeaMergeIdeaSelect});
            oActionBox.addItem(oCheckBox);
        }
        
        // bind to idea data from IdeaMedium with filters
        oSelectionList = this.byId("ideaSelection");
        oSelectionList.bindItems({
            path: "data>/IdeaMedium",
            filters: aFilters,
            sorter: new Sorter("NAME"),
            template: this._oIdeaMergeListItemTemplate
        });
    };
    
    /**
     * event handler for selection of ideas in step 1
     * 
     * @param   {Event}     oEvent  event triggered by checkbox in each list item
     */
    MergeActionMixin.onIdeaMergeIdeaSelect = function(oEvent) {
        var oSource, bSelected, iIdeaId, aSelectedIdeas;
        
        // register (selection) and update model respectively
        oSource = oEvent.getSource();
        bSelected = oEvent.getParameter("selected");
        iIdeaId = oSource.getBindingContext("data").getProperty("ID");
        // must be a copy or the formatter will not be re-evaluated
        aSelectedIdeas = this.getModel("merge").getProperty("/selectedIdeas").slice(0);
        
        if (bSelected) {
            if (aSelectedIdeas.indexOf(iIdeaId) === -1) {
                aSelectedIdeas.push(iIdeaId);
            }
        } else {
            if (aSelectedIdeas.indexOf(iIdeaId) > -1) {
                aSelectedIdeas.splice(aSelectedIdeas.indexOf(iIdeaId), 1);
            }
        }
        this.getModel("merge").setProperty("/selectedIdeas", aSelectedIdeas);
    };
    
    /**
     * event handler for button "select all"
     * 
     * @aparam  {Event} oEvent      press event
     */ 
    MergeActionMixin.onSelectAllMergeIdeas = function(oEvent) {
        // note: MUST be a clone (slice), otherwise array will be decoupled
        var aAllIdeasClone = this.getModel("merge").getProperty("/allIdeas").slice(0);
        this.getModel("merge").setProperty("/selectedIdeas", aAllIdeasClone);
    };
    
    /**
     * event handler for select box when a new leading idea is selected
     * 
     * @param   {Event} oEvent      the event
     */ 
    MergeActionMixin.onChangeLeadingMergeIdea = function(oEvent) {
        var oLeadingItem = oEvent.getParameter("selectedItem");
        var iLeadingIdeaId = oLeadingItem.getKey();
        var oMergeModel = this.getModel("merge");
        // re-create objects to ensure clean slate
        var aIdeaObjects = oMergeModel.getProperty("/selectedIdeaObjects").map(function (oItem) { return {ID: oItem.ID, NAME: oItem.NAME}; });
        oMergeModel.setProperty("/leadingIdeaId", iLeadingIdeaId);
        // update with new simulation results
        this._simulateMergeTransition(iLeadingIdeaId, aIdeaObjects);
    };
    
    /**
     * cleans up the dialog and the model
     * @private
     */
    MergeActionMixin._disposeIdeaMergeDialog = function() {
        var oDialog = this._getIdeaMergeDialog();
        this.detachListControlResized(this._sResizeMergeDialog);
        oDialog.close();
        oDialog.destroy();
        this._oMergeDialog = null;
    };

    /**
     * event handler for aborting merge by cancel button
     * 
     * @param   {Event} oEvent      the event
     */ 
    MergeActionMixin.onIdeaMergeCancel = function(oEvent) {
        this._disposeIdeaMergeDialog();
    };
    
    /**
     * event handler for button triggering navigation to step 2
     * 
     * @param   {Event} oEvent      the event
     */ 
    MergeActionMixin.onIdeaMergeNextStep = function(oEvent) {
        var oMergeModel = this.getModel("merge");
        var aSelectedIdeas = oMergeModel.getProperty("/selectedIdeas");
        var oSelectionList = this.byId("ideaSelection");
        var iIdeaId = oMergeModel.getProperty("/sourceId");
        var iLeadingIdeaId = oMergeModel.getProperty("/leadingIdeaId");
        var aIdeaObjects = [];
        
        // create idea objects with ID/NAME for binding
        jQuery.each(oSelectionList.getItems(), function (iIdx, oItem) {
            var iItemId = oItem.getBindingContext("data").getProperty("ID");
            var sItemName = oItem.getBindingContext("data").getProperty("NAME");
            if (aSelectedIdeas.indexOf(iItemId) > -1) {
                aIdeaObjects.push({ID: iItemId, NAME: sItemName});
            }
        });
        // add source idea as well
        aIdeaObjects.push({ID: iIdeaId, NAME: oMergeModel.getProperty("/sourceName")});

        this._simulateMergeTransition(iLeadingIdeaId, aIdeaObjects);
    };
    
    /**
     * triggers the simulation by asynchronously requesting the backend property model
     * 
     * @private
     * @param   {int}       iLeadingIdeaId  the ID of the idea currently marked as leading
     * @param   {object[]}  aIdeaObjects    list of ideas to simulate merging with
     */ 
    MergeActionMixin._simulateMergeTransition = function(iLeadingIdeaId, aIdeaObjects) {
        var that = this;
        var oMergeModel = this.getModel("merge");
        
        // Helper function - returns first matching item
        var fnFindFirst = function(aItems, sKey, vValue) {
            for (var i = 0; i < aItems.length; i += 1 ) {
                var oItem = aItems[i];
                if (oItem[sKey] === vValue) {
                    return oItem;
                }
            }
            return null;
        };
        
        // callback receives data and enriches merge model
        var fnCallback = function(oPropEvent) {
            var oNavCont;
            var oData = oPropEvent.getSource().getData();
            
            if (oData && oData.actions && oData.actions.mergeIdeas) {
                var oTemp = oData.actions.mergeIdeas;
                // assemble outcomes into idea object data
                jQuery.each(oTemp.customProperties.outcome, function (iIdx, oItem) {
                    var oIdeaItem = fnFindFirst(aIdeaObjects, "ID", oItem.ID) || {};
                    oIdeaItem.outcome = oItem;
                });
                // merge messages into idea object data
                if(oTemp.messages && oTemp.messages.length !== 0 ){
                    jQuery.each(oTemp.messages, function (iIdx, oItem) {
                        var oIdeaItem = fnFindFirst(aIdeaObjects, "ID", oItem.REF_ID) || {};
                        oIdeaItem.messages = oItem;
                    });
                }
            }
            // set resulting model
            oMergeModel.setProperty("/selectedIdeaObjects", aIdeaObjects);
            oMergeModel.setProperty("/pageview", "merge02");
            // trigger navigation to step 2
            oNavCont = that.byId("ideaMergeNavCon");
            oNavCont.to(that.byId("merge02"));
        };
        
        // execute property model / transition simulation
        var oPropModel =  new PropertyModel("sap.ino.xs.object.idea.Idea", iLeadingIdeaId, {
            actions : [{
                "mergeIdeas" : aIdeaObjects.map(function (oItem) { return oItem.ID; }).filter(function (iId) { return iId !== iLeadingIdeaId; })
            }]
        }, false, fnCallback);
    };
    
    /**
     * event handler for navigating back to step 1
     * 
     * @param   {Event}     oEvent      the event
     */
    MergeActionMixin.onIdeaMergePrevStep = function(oEvent) {
        var oNavCont = this.byId("ideaMergeNavCon");
        this.getModel("merge").setProperty("/pageview", "merge01");
        oNavCont.backToPage(this.byId("merge01"));
    };
    
    /**
     * event handler for triggering the actual merge action
     * 
     * @param   {Event}     oEvent      the event
     */ 
    MergeActionMixin.onMergeIdeasExecute = function(oEvent) {
        var iLeadingIdea = this.getModel("merge").getProperty("/leadingIdeaId");
        var aMergeIdeaObjects = this.getModel("merge").getProperty("/selectedIdeaObjects");
        var aMergeIdeaIds = aMergeIdeaObjects.filter(function (oItem) {
            // filter leading idea and not-mergable ideas
            return oItem.ID !== iLeadingIdea && oItem.outcome && oItem.outcome.OUTCOME !== "IDEA_MERGE_NOT_MERGABLE";
        }).map(function (oItem) { return oItem.ID; });
        var oActionRequest;
        this.isActionContextSingleIdeaDisplay();
        oActionRequest = Idea.mergeIdeas(iLeadingIdea, aMergeIdeaIds);
        var that = this;
        oActionRequest.done(function(){
            // notify ModelSynchronizer about updated ideas
            aMergeIdeaIds.map(function(iIdeaId) {
                ModelSynchronizer.update(null, "mergeIdeas", Idea, iIdeaId);
            });
            // close dialog and clean up
            that._disposeIdeaMergeDialog();
            MessageToast.show(that.getText("MSG_IDEA_MERGE_SUCCESS"));
        });
        //show message when the ideamerge operation is not sucessfull
        oActionRequest.fail(function(oResponse) {
            var aMessages = oResponse.MESSAGES;
            
            jQuery.each(aMessages, function(iIdx, oMessage) {
                var sText;
                if (oMessage.MESSAGE_TEXT) {
                    sText = oMessage.MESSAGE_TEXT;
                } else {
                    sText = that.getText(oMessage.MESSAGE, oMessage.REF_ID);
                }
                MessageToast.show(sText);
            });
        });
    };
    
    /**
     * formatter: opportunistic enabled check for idea lists - checks status and clipboard status.
     * This formatter should only be used for idea lists, as it doesn't query the backend. However,
     * in certain situations, the result could be wrong!
     * 
     * @param   {string}    sStatus     an idea's current status
     * @returns {boolean}               true if merge action is most probably enabled
     */
    MergeActionMixin.formatIdeaMergeActionEnabled = function(sStatus) {
        return !this.formatter.isFinal(sStatus) && this._getClipboardModel().getProperty("/enabled");
    };
    
    /**
     * formatter: returns either a translation of the outcome or a given message text delivered by the server
     * 
     * @param   {string}    sOutcome    the outcome of a merge simulation
     * @param   {object}    oMessage    a message object from the server
     * @param   {string}                a message representing the simulation's outcome
     */ 
    MergeActionMixin.formatIdeaMergeResult = function(sOutcome, oMessage) {
        return oMessage && oMessage.MESSAGE_TEXT || this.getText(sOutcome);
    };
    
    /**
     * formatter: naive check whether a server error / warning message is a valid object
     * 
     * @param   {object}    oMessage    a message object from the server
     * @returns {boolean}               true if a message object exists
     */
    MergeActionMixin.formatIdeaMergeResultErroneous = function (oMessage) {
        return !!oMessage;
    };
   
    /**
     * formatter: checks whether the given idea id is in aSelectedIdeas
     * 
     * @param   {int}   iId             the idea id
     * @param   {int[]} aSelectedIdeas  list of idea ids
     * @returns {boolean}               true if id is contained
     */ 
    MergeActionMixin.formatIsInSelectedIdeas = function(iId, aSelectedIdeas) {
        return aSelectedIdeas.indexOf(iId) !== -1;
    }; 
    
    /**
     * formatter: checks whether there are ideas selected to enable the next step (simulation) 
     * 
     * @param   {int[]} aSelectedIdeas  a list of selected idea ids
     * @returns {boolean}               true if next step is enabled 
     */ 
    MergeActionMixin.formatIdeaMergeNextStepEnabled = function(aSelectedIdeas) {
        return aSelectedIdeas && aSelectedIdeas.length > 0 || false;
    };
    
    /**
     * formatter: checks whether merging is enabled for at least two of the selected ideas
     * 
     * @param   {object[]}  aIdeaObjects    list of idea objects with outcome information
     * @returns {boolean}                   true if at least 2 mergable ideas are present
     */ 
    MergeActionMixin.formatMergeActionEnabled = function(aIdeaObjects) {
        var iValidCount = 0;
        if (aIdeaObjects) {
            jQuery.each(aIdeaObjects, function(idx, oItem) {
                if (oItem.outcome && oItem.outcome.OUTCOME !== "IDEA_MERGE_NOT_MERGABLE") {
                    iValidCount += 1;
                }
            });
        }
        return iValidCount >= 2;
    };
    
    MergeActionMixin.handleMassMerge = function(oEvent) {
        if (this.getViewProperty("/List/SELECT_ALL")) {
			var oBindingParams = this.getBindingParameter();
			var bIsManaged = this._check4ManagingList();
			var sFilterParams = this.getList().getBinding('items').sFilterParams;
            var aTags = this.getViewProperty("/List/TAGS");
		    var tagGroup = {};
            var tagGroupKey = [];
            aTags.forEach(function(item){
                        if(!tagGroup[item.ROOTGROUPID]){
                            tagGroup[item.ROOTGROUPID] = [];
                            tagGroup[item.ROOTGROUPID].push(item.ID);
                            tagGroupKey.push(item.ROOTGROUPID);
                        } else {
                            tagGroup[item.ROOTGROUPID].push(item.ID);
                        }   
                    });
            
			var oParameter = {
				searchToken: oBindingParams.SearchTerm || "",
				tagsToken:  tagGroup[tagGroupKey[0]] ? tagGroup[tagGroupKey[0]].join(",") : "",
    			tagsToken1: tagGroup[tagGroupKey[1]] ? tagGroup[tagGroupKey[1]].join(",") : "",
    			tagsToken2: tagGroup[tagGroupKey[2]] ? tagGroup[tagGroupKey[2]].join(",") : "",
    			tagsToken3: tagGroup[tagGroupKey[3]] ? tagGroup[tagGroupKey[3]].join(",") : "",
    			tagsToken4: tagGroup[tagGroupKey[4]] ? tagGroup[tagGroupKey[4]].join(",") : "",
				filterName: oBindingParams.VariantFilter || "",
				filterBackoffice: bIsManaged ? "1" : "0",
				filterString: sFilterParams || ""
			};
    		if(this.setQueryObjectIdeaformFilters){
    		    this.setQueryObjectIdeaformFilters(oParameter);
    		}
    		if(this.getCampaignFormQuery){
    		    oParameter.ideaFormId = this.getCampaignFormQuery() || "";
    		}
    		if(this.getSearchType){
			    oParameter.searchType = this.getSearchType();
			}
			if (this.setQueryObjectCompanyViewFilters) {
				this.setQueryObjectCompanyViewFilters(oParameter);
			}
			// call back end service
			var that = this;
			var oSource = oEvent.getSource();
			// disable button
			oSource.setEnabled(false);
			jQuery.ajax({
				url: Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/select_all_ideas.xsjs",
				data: oParameter,
				success: function(res) {
					// enable button
					oSource.setEnabled(true);
					if (res.Ideas.length === 0) {
						MessageBox.show(that.getText("NO_IDEAS_AND_RELOAD_PAGE"), {
							icon: MessageBox.Icon.INFORMATION,
							actions: [sap.m.MessageBox.Action.OK],
							onClose: function() {
								that.bindList();
							}
						});
						return;
					}
					// clear selection map
					that._oSelectionMap = {};
					jQuery.each(res.Ideas, function(iIdx, oData) {
						if (!that._oDeselectionMap[oData.ID]) {
							// create data structure as property model
							oData.property = that._createPropertyData(oData);
							that._oSelectionMap[oData.ID] = oData;
						}
					});
					// call mass merge action
					that._onMassMerge();
				},
				error: function(res) {
					MessageToast.show(that.getText(res.responseJSON.messageKey));
				}
			});
		} else {
			// call mass merge action
			this._onMassMerge();
		}
    };
    
    MergeActionMixin._onMassMerge = function() {
        var oDialog, iIdeaId, oMergeModel, aCBIdeas, aSelListIdeas, aFilters, aSelectedIdeas;
        
        var oClipboard = this._getClipboardModel();
        if (oClipboard) {
            // get clipboard ideas except currently selected idea
            aCBIdeas = oClipboard.getObjectKeys(Idea).filter(function (iTempIdeaId) {
                // filter source Idea
                return iTempIdeaId !== iIdeaId;
            });
        }
        if (this.isActionContextSingleIdeaDisplay()) {
            aSelListIdeas = [this.getObjectModel().getProperty("/ID")];
        } else {
            aSelListIdeas = Object.keys(this._oSelectionMap).map(function(sIdeaId) {
                return parseInt(sIdeaId, 10);
            });
        }
        aCBIdeas = aCBIdeas || [];
        aSelectedIdeas = aSelListIdeas.concat(aCBIdeas);
        aFilters = aSelectedIdeas.map(function(iTempIdeaId) {
            return new Filter("ID", FilterOperator.EQ, iTempIdeaId);
        });
        
        // var aCBIdeas = Object.keys(this._oSelectionMap).map(function(iIdeaKey) {
        //     return that._oSelectionMap[iIdeaKey];
        // }).sort(function(oIdea1, oIdea2) {
        //     return oIdea2.SUBMITTED_AT_DT.getTime() - oIdea1.SUBMITTED_AT_DT.getTime();
        // });
        

        //iIdeaId = aCBIdeas[0].ID;
        
        // internal model for merge feature
        oMergeModel = new JSONModel({
            // current page in NavController
            pageview: "massMerge01",
            // leading idea
            leadingIdeaId: -1,
            // selected ideas in first step
            selectedIdeas: aSelectedIdeas,
            leadingIdeaList: [],
            mergeResultList: [],
            // merge button enable
            mergeable: false,
            // merge rule enable
            mergeRuleEnable: !!(Configuration.getSystemSetting("sap.ino.config.ENABLE_IDEA_MERGE_RULE") * 1),
            // vote merge enable
            voteMergeEnable: true
        });

        // exclude the first element
        // var aSourceIdeas = aCBIdeas.slice(1);
        // oMergeModel.setProperty("/selectedIdeas", aCBIdeas);
    
        oDialog = this._getIdeaMassMergeDialog();
        oDialog.setModel(oMergeModel, "merge");
        this._prepareListItemForMassIdeaMerge(aFilters);
        
        var oNavCon = this.byId("massIdeaMergeNavCon");
        oNavCon.to(this.byId("massMerge01"));

        oDialog.open();
    };
    
    MergeActionMixin._getIdeaMassMergeDialog = function() {
        if (!this._oMassMergeDialog) {
            this._oMassMergeDialog = this.createFragment("sap.ino.vc.idea.fragments.IdeaMassMergeDialog", this.getView().getId());
            this._oMassMergeDialog.setEscapeHandler(this.handleEscapePress, this);
            this.getView().addDependent(this._oMassMergeDialog);
        }
        return this._oMassMergeDialog;
    };
    
    MergeActionMixin._prepareListItemForMassIdeaMerge = function(aFilters) {
        var oActionBox, oSelectionList, oCheckBox, aLeadingIdeaList = [{ID: -1, NAME: ""}];
        var oMergeModel = this._getIdeaMassMergeDialog().getModel("merge");
        
        // prepare FlatListItemForMerge template by adding checkbox
        if (!this._oIdeaMassMergeListItemTemplate) {
            this._oIdeaMassMergeListItemTemplate = this.getFragment("sap.ino.vc.idea.fragments.FlatListItemForMerge");
            // as this is a template, we need to get the idea via Fragment's byId
            oActionBox = sap.ui.core.Fragment.byId(this.getView().getId(), "mergeListIdeaActions");
            // remove the first checkbox
            oActionBox.removeItem(oActionBox.getItems()[0]);
            var _fnFormatCheckboxTooltip = this.formatCheckboxTooltip.bind(this);
            oCheckBox = new CheckBox({
                selected: {
                    parts: ["data>ID", "merge>/leadingIdeaId", "merge>/selectedIdeas"], formatter: this.formatSelectedState
                }, 
                tooltip: {
                    parts: ["data>ID", "merge>/leadingIdeaId", "merge>/selectedIdeas"], formatter: _fnFormatCheckboxTooltip
                },
                enabled: {
                    parts: ["data>ID", "merge>/leadingIdeaId", "data>STATUS"], formatter: this.formatIsLeadingIdea
                },
                select: this.onIdeaMergeIdeaSelect});
            oActionBox.addItem(oCheckBox);
        }
        
        // bind to idea data from IdeaMedium with filters
        var oIdeaIdsFilter = new Filter({
            filters: aFilters,
            and: false
        });
        var oStatusFilter = new Filter("STATUS", FilterOperator.NE, IdeaStatusType.Merged);
        oSelectionList = this.byId("ideaToMerge");
        oSelectionList.bindItems({
            path: "data>/IdeaMedium",
            sorter: new Sorter("NAME"),
            filters: new Filter({
                filters: [oIdeaIdsFilter, oStatusFilter],
                and: true
            }),// aFilters, new Filter("ID", FilterOperator.EQ, iTempIdeaId);
            template: this._oIdeaMassMergeListItemTemplate
        });
        oSelectionList.getBinding("items").attachDataReceived(function() {
            jQuery.each(oSelectionList.getItems(), function (iIdx, oItem) {
                var iItemId = oItem.getBindingContext("data").getProperty("ID");
                var sItemName = oItem.getBindingContext("data").getProperty("NAME");
                var sVoteTypeCode = oItem.getBindingContext("data").getProperty("VOTE_TYPE_TYPE_CODE");
                aLeadingIdeaList.push({ID: iItemId, NAME: sItemName, VOTE_TYPE_TYPE_CODE: sVoteTypeCode});
            });
            oMergeModel.setProperty("/leadingIdeaList", aLeadingIdeaList);
        }, this);
    };
    
    MergeActionMixin.handleChangeLeadingMergeIdea = function() {
        var oMergeModel = this._getIdeaMassMergeDialog().getModel("merge");
        var iLeadingIdeaId = parseInt(oMergeModel.getData().leadingIdeaId, 10);
        //var aSelectedIdeas = oMergeModel.getProperty("/selectedIdeas");
        var aAllIdeas = oMergeModel.getProperty("/leadingIdeaList");
        oMergeModel.setProperty("/selectedIdeas", aAllIdeas.filter(function(oIdea) {
            //return iIdeaID !== iLeadingIdeaId;
            return oIdea.ID !== iLeadingIdeaId && oIdea.ID !== -1;
        }).map(function(oIdea) {
            return oIdea.ID;
        }));
    };
    
    MergeActionMixin.handleMassIdeaMergePrevStep = function() {
        var oDialog = this._getIdeaMassMergeDialog();
        var oMergeModel = oDialog.getModel("merge");
        var iCurrentPage = parseInt(/massMerge0(\d)/.exec(oMergeModel.getProperty("/pageview"))[1], 10);
        var sNewPage;
        if (iCurrentPage === 3 && !oMergeModel.getProperty("/mergeRuleEnable")) {
            sNewPage = "massMerge01";
        } else {
            sNewPage = "massMerge0" + (iCurrentPage - 1);
        }
        oMergeModel.setProperty("/pageview", sNewPage);
        
        var oNavCon = this.byId("massIdeaMergeNavCon");
        oNavCon.to(this.byId(sNewPage));
    };
    
    MergeActionMixin.handleMassIdeaMergeNextStep = function() {
        var oDialog = this._getIdeaMassMergeDialog();
        var oMergeModel = oDialog.getModel("merge");
        if (oMergeModel.getProperty("/mergeRuleEnable")) {
            this.handleMassIdeaMergeToRuleStep();
        } else {
            this.handleMassIdeaMergeToConfirmStep();
        }
    };
    
    MergeActionMixin.handleMassIdeaMergeToRuleStep = function() {
        var that = this;
        var oNavCon = this.byId("massIdeaMergeNavCon");
        oNavCon.to(this.byId("massMerge02"));
        
        var oDialog = this._getIdeaMassMergeDialog();
        var oMergeModel = oDialog.getModel("merge");
        oMergeModel.setProperty("/pageview", "massMerge02");
        
        // reset mergeable property
        oMergeModel.setProperty("/mergeable", false);
        
        oDialog.setBusy(true);
        // get merge rule config
        var oDeffered = MergeConfig.getMergeConfig();
        oDeffered.done(function(oData) {
            if (oData.RESULT.length === 0) {
                oData.RESULT = [{
                    MERGE_TYPE: that.getText('IDEA_MASS_MERGE_RULE_TABLE_LABEL_AUTHOR'),
                    ADD: false,
                    IGNORE: false,
                    PROMPT: true,
                    OBJECT_TYPE_CODE: 'AUTHOR'
                }, {
                    MERGE_TYPE: that.getText('IDEA_MASS_MERGE_RULE_TABLE_LABEL_EXPERTS'),
                    ADD: false,
                    IGNORE: false,
                    PROMPT: true,
                    OBJECT_TYPE_CODE: 'EXPERT'
                }, {
                    MERGE_TYPE: that.getText('IDEA_MASS_MERGE_RULE_TABLE_LABEL_VOTES'),
                    ADD: false,
                    IGNORE: false,
                    PROMPT: true,
                    OBJECT_TYPE_CODE: 'VOTE'
                }, {
                    MERGE_TYPE: that.getText('IDEA_MASS_MERGE_RULE_TABLE_LABEL_COMMENTS'),
                    ADD: false,
                    IGNORE: false,
                    PROMPT: true,
                    OBJECT_TYPE_CODE: 'COMMENT'
                }];
            } else {
                oData.RESULT.forEach(function(oRule) {
                    switch(oRule.OBJECT_TYPE_CODE) {
                        case "AUTHOR":
                            oRule.MERGE_TYPE = that.getText('IDEA_MASS_MERGE_RULE_TABLE_LABEL_AUTHOR');
                            break;
                        case "EXPERT":
                            oRule.MERGE_TYPE = that.getText('IDEA_MASS_MERGE_RULE_TABLE_LABEL_EXPERTS');
                            break;
                        case "VOTE":
                            oRule.MERGE_TYPE = that.getText('IDEA_MASS_MERGE_RULE_TABLE_LABEL_VOTES');
                            break;
                        case "COMMENT":
                            oRule.MERGE_TYPE = that.getText('IDEA_MASS_MERGE_RULE_TABLE_LABEL_COMMENTS');
                            break;
                    }
                    oRule.ADD = !!oRule.ADD;
                    oRule.IGNORE = !!oRule.IGNORE;
                    oRule.PROMPT = !!oRule.PROMPT;
                });
            }
            // compute the vote rule
            //that._computeVoteRule(oData.RESULT, oMergeModel.getData());
            var oRuleModel = new JSONModel(oData.RESULT);
            oDialog.setModel(oRuleModel, "rule");
            
            oRuleModel.attachPropertyChange(that._handleRuleChange, that);
            oRuleModel.firePropertyChange();
            
            oDialog.setBusy(false);
        });
    };
    
    MergeActionMixin.handleMassIdeaMergeToConfirmStep = function() {
        var oDialog = this._getIdeaMassMergeDialog();
        var oMergeModel = oDialog.getModel("merge");
        var iLeadingIdeaId = parseInt(oMergeModel.getProperty("/leadingIdeaId"), 10);
        var aTargetIdeas = [iLeadingIdeaId].concat(oMergeModel.getProperty("/selectedIdeas"));
        var aLeadingIdeaList = oMergeModel.getProperty("/leadingIdeaList");
        
        var that = this;
        // generate merge results
        oMergeModel.setProperty("/mergeResultList", aTargetIdeas.map(function(iIdeaID) {
            var oIdea = aLeadingIdeaList.filter(function(oIdeaData) {
                return oIdeaData.ID === iIdeaID;
            })[0];
            return {
                ideaType: oIdea.ID === iLeadingIdeaId ? that.getText("IDEA_MASS_MERGE_CONFIRM_TABLE_COL_LEADING_TYPE") : that.getText("IDEA_MASS_MERGE_CONFIRM_TABLE_COL_SOURCE_TYPE"),
                ideaName: oIdea.NAME,
                ideaID: oIdea.ID,
                result: oIdea.ID === iLeadingIdeaId ? that.getText("IDEA_MASS_MERGE_CONFIRM_TABLE_COL_RESULT_CONTINUE") : that.getText("IDEA_MASS_MERGE_CONFIRM_TABLE_COL_RESULT_STOP"),
                isLeading: oIdea.ID === iLeadingIdeaId
            };
        }));
        
        var oNavCon = this.byId("massIdeaMergeNavCon");
        oNavCon.to(this.byId("massMerge03"));
        
        oMergeModel.setProperty("/pageview", "massMerge03");
    };
    
    MergeActionMixin.handleMassIdeaMergeCancel = function() {
        this._getIdeaMassMergeDialog().close();
    };
    
    MergeActionMixin.handleEscapePress = function(oPromise) {
        oPromise.reject();
    };
    
    MergeActionMixin.formatIsLeadingIdea = function(iIdeaID, iLeadingIdeaID) {
        return iIdeaID !== parseInt(iLeadingIdeaID, 10);
    };
    
    MergeActionMixin.formatSelectedState = function(iIdeaID, iLeadingIdeaID, aSelectedIdeas) {
        return iIdeaID !== parseInt(iLeadingIdeaID, 10) && aSelectedIdeas.indexOf(iIdeaID) !== -1;
    };
    
    MergeActionMixin.formatCheckboxTooltip = function(iIdeaID, iLeadingIdeaID, aSelectedIdeas) {
        if (!MergeActionMixin.formatIsLeadingIdea(iIdeaID, iLeadingIdeaID)) {
            return "";
        }
        var bChecked = MergeActionMixin.formatSelectedState(iIdeaID, iLeadingIdeaID, aSelectedIdeas);
        return bChecked ? this.getText("IDEA_MASS_MERGE_SOURCE_IDEA_DESELECTED") : this.getText("IDEA_MASS_MERGE_SOURCE_IDEA_SELECTED");
    };

    MergeActionMixin.formatMergeEnable = function(bMergeRuleEnable, bMergeable, sLeadingIdeaId, aSelectedIdeas) {
        if (!bMergeRuleEnable) {
            return parseInt(sLeadingIdeaId, 10) !== -1 && aSelectedIdeas.length > 0;
        } else {
            return bMergeable;
        }
    };
    
    MergeActionMixin.formatVoteMergeAbleMsgDisplay = function(sPageView, aSelectedIdeas, iLeadingIdeaId, aAllIdeas) {
        if (sPageView !== 'massMerge03') {
            return false;
        }
        if (aSelectedIdeas.length > 1) {
            // show vote disable merge message
            return true;
        }
        var aMergedIdeaIds = [aSelectedIdeas[0], parseInt(iLeadingIdeaId, 10)];
        // get source idea vote type
        var aMergedIdeas = aAllIdeas.filter(function(oIdea) {
            if (aMergedIdeaIds.indexOf(oIdea.ID) > -1) {
                return true;
            }
            return false;
        });
        return aMergedIdeas[0].VOTE_TYPE_TYPE_CODE !== aMergedIdeas[1].VOTE_TYPE_TYPE_CODE;
    };
    
    MergeActionMixin._computeVoteRule = function(oSysRuleData, oMergeData) {
        var aNotLikeVoteIdea = oMergeData.selectedIdeas.filter(function(oIdea) {
            return oIdea.VOTE_TYPE_TYPE_CODE !== "LIKE";
        });
        var oVoteRule;
        if (aNotLikeVoteIdea.length > 0) {
            oVoteRule = oSysRuleData.filter(function(oRule) {
                return oRule.OBJECT_TYPE_CODE === "VOTE";
            })[0];
            oVoteRule.ADD = false;
            oVoteRule.IGNORE = true;
            oVoteRule.PROMPT = false;
        }
    };
    
    MergeActionMixin._handleRuleChange = function(oEvent) {
        var aRuleData = oEvent.getSource().getData();
        // check all rule valid
        var aNoChoosed = aRuleData.filter(function(oRule) {
            if (!oRule.ADD && !oRule.IGNORE) {
                return true;
            } else {
                return false;
            }
        });
        if (aNoChoosed.length === 0) {
            this._getIdeaMassMergeDialog().getModel('merge').setProperty('/mergeable', true);
        }
    };
    
    MergeActionMixin.handleMassMergeExecute = function() {
        
        var oDialog = this._getIdeaMassMergeDialog();
        oDialog.setBusy(true);
        var oMergeModel = oDialog.getModel("merge");
        var iLeadingIdeaId = parseInt(oMergeModel.getProperty("/leadingIdeaId"), 10);
        var aMergeIdeaIds = oMergeModel.getProperty("/selectedIdeas");
        var aMergeRuleData = oMergeModel.getProperty("/mergeRuleEnable") ? oDialog.getModel("rule").getData() : [];
        
        var oActionRequest = Idea.mergeIdeas(iLeadingIdeaId, {
            SOURCE_IDEAS: aMergeIdeaIds,
            MERGE_RULE: aMergeRuleData
        });
        var that = this;
        oActionRequest.done(function(){
            oDialog.setBusy(false);
            oDialog.close();
            // notify ModelSynchronizer about updated ideas
            aMergeIdeaIds.forEach(function(iIdeaId) {
                ModelSynchronizer.update(null, "mergeIdeas", Idea, iIdeaId);
            });
            if (typeof that.bindList === "function") {
                that.bindList();
            }
            // close dialog and clean up
            //that._disposeIdeaMergeDialog();
            MessageToast.show(that.getText("MSG_IDEA_MERGE_SUCCESS"));
        });
        //show message when the ideamerge operation is not sucessfull
        oActionRequest.fail(function(oResponse) {
            var aMessages = oResponse.MESSAGES;
            
            jQuery.each(aMessages, function(iIdx, oMessage) {
                var sText;
                if (oMessage.MESSAGE_TEXT) {
                    sText = oMessage.MESSAGE_TEXT;
                } else {
                    sText = that.getText(oMessage.MESSAGE, oMessage.REF_ID);
                }
                MessageToast.show(sText);
            });
        });
    };
    
    return MergeActionMixin;
});
}; // end of sap/ino/vc/idea/mixins/MergeActionMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.internal.EditInternalNoteDialog.controller') ) {
jQuery.sap.declare('sap.ino.vc.internal.EditInternalNoteDialog.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/vc/internal/EditInternalNoteDialog.controller",["sap/ino/vc/commons/BaseObjectModifyController"],
    function (Controller) {
    "use strict";

     return Controller.extend("sap.ino.vc.internal.EditInternalNoteDialog", {

        open : function(iId, sModelObjectType){
            var that = this;
            var oSettings = {
                actions :["modify", "del"],
                continuousUse : true,
                readSource : {
                    model : this.getDefaultODataModel()
                }
            };

            jQuery.sap.require(sModelObjectType);
            var NoteModelType = jQuery.sap.getObject(sModelObjectType, 0);
            var oNoteModel = new NoteModelType(iId, oSettings);
            that.setObjectModel(oNoteModel);
            var oView = that.getView();
            oView.byId("editInternalNoteDialog").open();
        },
 
        onDeletePressed : function(oEvent) {
           var oDelPromise = this.executeObjectAction("del", {messages: {
               confirm : "MSG_DEL_CONFIRM",
               success : "MSG_DEL_SUCCESS_NOTE"
            }} );
            var oView = this.getView();
            oDelPromise.done(function(oResponse) {
                oView.getParent().getController()._commentMixinRefresh();
                oView.byId("editInternalNoteDialog").close();
            });
            oDelPromise.fail(function(oResponse) {
                // do not use MessageSupportView here to avoid marking the comments field red
            });
            oDelPromise.always(function() {
            });

        },
        
        onUpdatePressed : function(oEvent) {
            var oModifyPromise = this.executeObjectAction("modify", { messages: {success : "MSG_UPDATE_SUCCESS_NOTE"} } );
            var oView = this.getView();
            oModifyPromise.done(function(oResponse) {
                oView.byId("editInternalNoteDialog").close();
            });
            oModifyPromise.fail(function(oResponse) {
                // do not use MessageSupportView here to avoid marking the comments field red
            });
            oModifyPromise.always(function() {
            });
        },
        
        onCancelPressed : function(oEvent) {
            var oView = this.getView();
            oView.byId("editInternalNoteDialog").close();
        }
    });
});
}; // end of sap/ino/vc/internal/EditInternalNoteDialog.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.internal.InternalAttachment.controller') ) {
jQuery.sap.declare('sap.ino.vc.internal.InternalAttachment.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/internal/InternalAttachment.controller",[
    "sap/ino/vc/commons/BaseBlockController",
    "sap/ino/vc/attachment/AttachmentMixin",
    "sap/ui/model/json/JSONModel", 
    "sap/ino/commons/models/object/Attachment",
    "sap/ino/commons/application/Configuration",
     "sap/m/MessageToast"
], function(BaseController,
            AttachmentMixin,
            JSONModel,
            Attachment,
            Configuration,
            MessageToast){
                
    "use strict";

    var attachmentUploadUrl = Attachment.getEndpointURL();

    return BaseController.extend("sap.ino.vc.internal.InternalAttachment", jQuery.extend({}, AttachmentMixin, {
        
        onInit : function() {
            BaseController.prototype.onInit.apply(this, arguments);
            if (!this.getModel("local")) {
                this.setModel(new JSONModel({
                    ATTACHMENT_UPLOAD_URL : attachmentUploadUrl
                }), "local");
            }
        },
        onAfterRendering : function() {
            this._attachmentMixinInit({
                attachmentId: "InternalAttachments",
                updateObject: function(oObject){
                    oObject.update();
                },
                uploadSuccess: function(oObject, oResponse){
                    oObject.addInternalAttachment({
                        "CREATED_BY_NAME" : Configuration.getCurrentUser().NAME,
                        "ATTACHMENT_ID" : oResponse.attachmentId,
                        "FILE_NAME" : oResponse.fileName,
                        "MEDIA_TYPE" : oResponse.mediaType,
                        "CREATED_AT" : new Date()
                    });
                    oObject.update().fail(function(){
                        oObject.getMessageParser().parse(oResponse);
                        MessageToast.show(this.getText("OBJECT_MSG_ATTACHMENT_FAILED"));
                        return true;
                    });
                }
            });
            
        }
        
    }));
});
}; // end of sap/ino/vc/internal/InternalAttachment.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.reward.RewardFormatter') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.vc.reward.RewardFormatter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/reward/RewardFormatter",[
    "sap/ino/commons/models/core/CodeModel",
    "sap/ui/base/Object",
    "sap/ino/commons/formatters/ObjectFormatter",
    "sap/ino/commons/models/aof/PropertyModel",
    "sap/ino/commons/models/aof/PropertyModelCache"
], function(CodeModel,
	Object,
	ObjectFormatter,
	PropertyModel,
	PropertyModelCache) {
	"use strict";

	var oRewardFormatter = Object.extend("sap.ino.vc.idea.RewardFormatter", {});
	jQuery.extend(oRewardFormatter, ObjectFormatter);

	var fnRewardCreateFormatter = PropertyModel.getStaticActionEnabledDynamicFormatter(
		"sap.ino.xs.object.reward.RewardList", "create", function(iIdeaId) {
			return {
				IDEA_ID: iIdeaId
			};
		});

	oRewardFormatter.createRewardEnabled = function(iIdeaId) {
		if (iIdeaId) {
			return fnRewardCreateFormatter(iIdeaId);
		}
		return false;
	};
	oRewardFormatter.rewardAmountUnit = function(iAmount, sUnit) {
		sUnit = sUnit === null ? "" : " " + sUnit;
		return iAmount + sUnit;
	};

	oRewardFormatter.addPercentage = function(iNumber) {
		iNumber = Math.round(Number(iNumber));
		return String(iNumber) + "%";
	};
	oRewardFormatter.addPercentageDetail = function(iNumber) {
	   if(iNumber === undefined || !iNumber) 
	   {
	      return '';
	   }
	   else
		{iNumber = Math.round(Number(iNumber));
		return String(iNumber) + "%";
		}
	};

	oRewardFormatter.maxFractionFormatter = function(nNumber, nDigits) {
		var number = parseFloat(nNumber);
		if (isNaN(number)) {
			return nNumber;
		}
		var precious = parseInt(nDigits, 10);
		if (isNaN(precious)) {
			precious = 2;
		}
		var nPrecious = Math.pow(10, precious);
		return Math.round(number * nPrecious) / nPrecious;
	};

	return oRewardFormatter;
});
}; // end of sap/ino/vc/reward/RewardFormatter.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.reward.mixins.CreateActionMixin') ) {
jQuery.sap.declare('sap.ino.vc.reward.mixins.CreateActionMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/reward/mixins/CreateActionMixin",[
    "sap/ino/vc/idea/mixins/BaseActionMixin",
    "sap/ino/vc/commons/BaseController",
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/models/object/Idea",
    "sap/ino/commons/models/object/RewardList",
    "sap/ino/commons/models/aof/PropertyModel",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/ui/model/Sorter",
    "sap/m/MessageToast"
], function(BaseActionMixin, BaseController, JSONModel, Idea, RewardList, PropertyModel, Filter, FilterOperator, Sorter, MessageToast) {
	"use strict";

	/**
	 * Create Reward Action -
	 */
	var CreateActionMixin = jQuery.extend({}, BaseActionMixin);
	CreateActionMixin.onCreateReward = function(oEvent) {
		var aCustomeData = oEvent.getSource().getCustomData();
		if (!aCustomeData || aCustomeData.length === 0) {
			return;
		}
		var oParameters = this._parseCustomDatas(oEvent);
		var oDialog = this._createRewardDialog();
		this._getChildController(oDialog).setDialog(oDialog);
		var oSettings = {
			actions: ["create", "del", "executeStatusTransition"],
			nodes: ["Root"],
			invalidation: {
				entitySets: ["IdeaFull"]
			},
			continuousUse: true,
			concurrencyEnabled: true,
			readSource: {
				model: this.getDefaultODataModel()
			}
		};
		var oRewardList = new RewardList(oParameters.oKey, oSettings);
		this._getChildController(oDialog).getView().setBusy(true);
		if (!oParameters.oKey.hasOwnProperty("IDEA_ID")) {
			var that = this;
			oRewardList.getDataInitializedPromise().done(function() {
				that._getChildController(oDialog).getView().setBusy(false);
			});
		} else {
			this._handleIdeaInfo(oDialog, oRewardList, oParameters.oKey.IDEA_ID);
		}
		this._setDefaultValue(oRewardList, oParameters);
		oDialog.setModel(oRewardList, "object");
		oDialog.open();
	};

	//Dismiss Idea Reward
	CreateActionMixin.onDismissReward = function(oEvent) {
		var aCustomeData = oEvent.getSource().getCustomData();
		if (!aCustomeData || aCustomeData.length === 0) {
			return;
		}
		var oParameters = this._parseCustomDatas(oEvent);

		if (oParameters.oKey.IDEA_ID) {
			var oController = this;
			var oRequest = Idea.dismissReward(oParameters.oKey.IDEA_ID);
			oRequest.done(function() {
				var oBindingInfo = oController.getList().getBindingInfo("items");
				oController.getList().bindItems(oBindingInfo);
			});
		}
	};

	CreateActionMixin._createRewardDialog = function() {
		var oRewardDialog = this.createFragment("sap.ino.vc.idea.fragments.CreateRewardDialog", this.getView().getId());
		this.getView().addDependent(oRewardDialog);
		return oRewardDialog;
	};

	CreateActionMixin._parseCustomDatas = function(oEvent) {
		var oParameters = {
			oKey: null,
			IdeaPhaseCode: null,
			IdeaName: null,
			UnitCode: null,
			UnitText: null
		};
		var oCustomDatas = oEvent.getSource().getCustomData();
		jQuery.each(oCustomDatas, function(index, data) {
			var sKey = data.getKey();
			var sValue = data.getValue();
			if (sKey === "IdeaId") {
				oParameters.oKey = {
					IDEA_ID: data.getValue(),
					OBJECT_TYPE_CODE: "IDEA",
					OBJECT_ID: data.getValue()
				};
			} else if (sKey === "RewardListId") {
				oParameters.oKey = sValue;
			} else if (oParameters.hasOwnProperty(sKey)) {
				oParameters[sKey] = sValue;
			}
		});
		return oParameters;
	};

	CreateActionMixin._setDefaultValue = function(oRewardList, oParameters) {
		if (typeof oParameters.oKey !== "object") {
			return;
		}
		oRewardList.setProperty("/IDEA_NAME", oParameters.IdeaName);
		oRewardList.setProperty("/IDEA_PHASE_CODE", oParameters.IdeaPhaseCode);
		oRewardList.setProperty("/REWARD_UNIT_CODE", oParameters.UnitCode);
		oRewardList.setProperty("/REWARD_UNIT_TEXT", oParameters.UnitText);
	};

	CreateActionMixin._getChildController = function(oDialog) {
		return oDialog.getContent()[0].getController();
	};

	CreateActionMixin._handleIdeaInfo = function(oDialog, oRewardList, nIdeaId) {
		var that = this;
		oRewardList.getReadSourceModel().read("/IdeaFull(" + nIdeaId + ")/ContributionShare", {
			success: function(oRewards) {
				var aRewards = [];
				jQuery.each(oRewards.results || [], function(index, data) {
					aRewards.push({
						ID: oRewardList.getNextHandle(),
						AUTHOR_ID: data.AUTHOR_ID,
						REWARD_AMOUNT: data.REWARD_AMOUNT,
						REWARD_SHARE: data.REWARD_SHARE,
						CONTRIBUTION_SHARE: data.PERCENTAGE,
						IDEA_ID: data.IDEA_ID,
						EMPLOYEE_NAME: data.AUTHOR_NAME
					});
				});
				that._setIdeaDetails(oRewardList, nIdeaId, aRewards);
				that._getChildController(oDialog).getView().setBusy(false);
			},
			error: function() {
				that._getChildController(oDialog).getView().setBusy(false);
			}
		});
	};

	CreateActionMixin._setIdeaDetails = function(oRewardList, nIdeaId, oRewards) {
		oRewardList.setProperty("/IDEA_ID", nIdeaId);
		oRewardList.setProperty("/Rewards", oRewards);
		oRewardList.setProperty("/REWARD_AMOUNT_TOTAL", 0);
	};

	return CreateActionMixin;
});
}; // end of sap/ino/vc/reward/mixins/CreateActionMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.reward.mixins.ExportActionMixin') ) {
jQuery.sap.declare('sap.ino.vc.reward.mixins.ExportActionMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/reward/mixins/ExportActionMixin",[
    "sap/ino/commons/util/Export",
    "sap/ino/commons/application/Configuration",
    "sap/ui/core/format/DateFormat",
    "sap/m/MessageToast"
], function(Export, Configuration, DateFormat, MessageToast) {
	"use strict";

	/**
	 * @class
	 * Mixin that provides export functionality
	 */
	var ExportMixin = function() {
		throw "Mixin may not be instantiated directly";
	};

	ExportMixin.onListExport = function(oEvent) {
	    if (!this._oExportActionSheet) {
			this._oExportActionSheet = this.createFragment("sap.ino.vc.commons.fragments.ExportActionSheet", this.getView().getId());
			this.getView().addDependent(this._oExportActionSheet);
		}
		if (oEvent.getSource().data("placement")) {
			this._oExportActionSheet.setPlacement(oEvent.getSource().data("placement"));
		}
		this._oExportActionSheet.triggerButton = oEvent.getSource();
		this._oExportActionSheet.openBy(oEvent.getSource());
	};

	ExportMixin.onListExportXLS = function(oEvent) {
		Export.i18n = this.getModel("i18n");
		var oExportControl = typeof this.getExportControl === "function" ? this.getExportControl() : this.getList();
		var fnCompleted = typeof this.fnCompleted === "function" ? this.fnCompleted : null;

		if (fnCompleted) {
			Export.exportAdvanced(oExportControl, "xls", this.getExportPrefix && this.getExportPrefix(), this._oExportActionSheet.triggerButton,
				Configuration.getCurrentUser().NAME, null, fnCompleted(this));
		} else {
			Export.exportAdvanced(oExportControl, "xls", this.getExportPrefix && this.getExportPrefix(), this._oExportActionSheet.triggerButton,
				Configuration.getCurrentUser().NAME);
		}
	};

	ExportMixin.onListExportCSV = function(oEvent) {
		Export.i18n = this.getModel("i18n");
		var oExportControl = typeof this.getExportControl === "function" ? this.getExportControl() : this.getList();
		var fnCompleted = typeof this.fnCompleted === "function" ? this.fnCompleted : null;

		if (fnCompleted) {
			Export.exportAdvanced(oExportControl, "csv", this.getExportPrefix && this.getExportPrefix(), this._oExportActionSheet.triggerButton,
				Configuration.getCurrentUser().NAME, null, fnCompleted(this));
		} else {
			Export.exportAdvanced(oExportControl, "csv", this.getExportPrefix && this.getExportPrefix(), this._oExportActionSheet.triggerButton,
				Configuration.getCurrentUser().NAME);
		}
	};

	ExportMixin.onListExportPPT = function(oEvent) {
		Export.i18n = this.getModel("i18n");
		var oExportControl = typeof this.getExportControl === "function" ? this.getExportControl() : this.getList();
		var fnCompleted = typeof this.fnCompleted === "function" ? this.fnCompleted : null;
		
		if (fnCompleted) {
			Export.exportAdvanced(oExportControl, "pptx", this.getExportPrefix && this.getExportPrefix(), this._oExportActionSheet.triggerButton,
				Configuration.getCurrentUser().NAME, null, fnCompleted(this));
		} else {
			Export.exportAdvanced(oExportControl, "pptx", this.getExportPrefix && this.getExportPrefix(), this._oExportActionSheet.triggerButton,
				Configuration.getCurrentUser().NAME, 50);
		}
		
	};

	ExportMixin.onChartExportSVG = function(oEvent) {
		Export.i18n = this.getModel("i18n");
		var oExportControl = typeof this.getExportChartControl === "function" ? this.getExportChartControl() : this.getChart();
		Export.exportChartAdvanced(oExportControl, this.getChartTitle && this.getChartTitle(), oEvent.getSource());
	};

	return ExportMixin;
});
}; // end of sap/ino/vc/reward/mixins/ExportActionMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.shell.Settings.controller') ) {
jQuery.sap.declare('sap.ino.vc.shell.Settings.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/shell/Settings.controller",[
    "sap/ino/vc/commons/BaseObjectController",
    "sap/ino/commons/application/Configuration",
    "sap/ino/commons/models/object/UserSettings",
    "sap/ino/commons/models/object/Attachment",
   "sap/m/MessageToast",
   "sap/ino/commons/models/core/ModelSynchronizer"
], function (BaseController,
             Configuration,
             UserSettings,
             Attachment,
             MessageToast,
             ModelSynchronizer) {
    "use strict";

    return BaseController.extend("sap.ino.vc.shell.Settings", {

        formatter : jQuery.extend({
            mailLanguageText : function(sDefaultText, sCode) {
                return sDefaultText;
                // var sText = this.getText(sCode);
                // if (sText === sCode || sText === "") {
                //     return sDefaultText;
                // }
                // return sText;
            }
        }, BaseController.prototype.formatter),

        onInit : function () {
            BaseController.prototype.onInit.apply(this, arguments);

            this.setViewProperty("/EDIT", true);
            this.setViewProperty("/ATTACHMENT_UPLOAD_URL", Attachment.getEndpointURL());

            this.aBusyControls = [this.byId("userSettings")];
        },
        
        setUserDataModel : function (oUserDataModel) {
            this._oUserDataModel = oUserDataModel;
        },
        
        onBeforeRendering : function(){
            var iUserId = Configuration.getCurrentUser().USER_ID;
            var oUserSettings = new UserSettings(iUserId, {
                continuousUse : true,
                actions : ["updateUserLocale"],
                readSource : {
                    model : this.getDefaultODataModel()
                }
            });
            this.setObjectModel(oUserSettings);
            this.bindDefaultODataModel(iUserId); 
            if (this._oUserDataModel) {
                ModelSynchronizer.addAOInstanceDependency(oUserSettings, this._oUserDataModel, function(oAOInstance, oDependentModel){
                    if (oAOInstance && oAOInstance.getProperty("/Settings") && oDependentModel) {
                        oDependentModel.setProperty("/IMAGE_ID", oAOInstance.getProperty("/Settings").TITLE_IMAGE_ID);
                    }
                });
            }
        },
        
        getODataEntitySet : function() {
            return "Identity";
        },
        
        onFileUploaderChange : function(oEvent) {
            var oFileUploader = oEvent.getSource();
            var aFile = oEvent.getParameter("files");
            oFileUploader.setBusy(true);
            Attachment.prepareFileUploader(oFileUploader, aFile);
        },
        
        onFileUploaderComplete : function(oEvent) {
            var oResponse = Attachment.parseUploadResponse(oEvent.getParameter("responseRaw"));
            var oFileUploader = oEvent.getSource();
            if (oResponse) {
                var oObject = this.getObjectModel();
                if (oResponse.success) {
                    oObject.setUserImage({
                        "ATTACHMENT_ID" : oResponse.attachmentId,
                        "FILE_NAME" : oResponse.fileName,
                        "MEDIA_TYPE" : oResponse.mediaType
                    });
                } else {
                    MessageToast.show(this.getText("SETTINGS_MSG_USER_IMAGE_FAILED"));
                }
            } else {
                MessageToast.show(this.getText("SETTINGS_MSG_USER_IMAGE_ERROR"));
            }
            oFileUploader.setBusy(false);
            oFileUploader.clear();
        },
        
        onImageSettingClear : function(oEvent) {
            var oObject = this.getObjectModel();
            oObject.clearUserImage();
            var oFileUploader = this.byId("imageSettingUploader");
            oFileUploader.setValue(null);
        }

    });
});
}; // end of sap/ino/vc/shell/Settings.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.formatters.BaseListFormatter') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.formatters.BaseListFormatter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/formatters/BaseListFormatter",[
    "sap/ino/commons/formatters/ObjectFormatter",
    "sap/ino/commons/models/core/CodeModel",
    "sap/ui/base/Object"
], function(ObjectFormatter,
            CodeModel,
            Object) {
    "use strict";
    
    var oBaseListFormatter = Object.extend("sap.ino.commons.formatters.BaseListFormatter", {});
    
    jQuery.extend(oBaseListFormatter, ObjectFormatter);
    
    oBaseListFormatter.showActiveFilterInBar = function(sStatus, sPhase, oSystem) {
        var bPhone = oSystem && oSystem.phone;
        var sPath = this.getListProperty("/Filter/PhaseBinding/TABLE_PATH");
        var fnFormatter = CodeModel.getFormatter(sPath);
        
        if (!!sStatus) {
            sStatus = this.getText(this.getStatus(sStatus).TEXT);
        }
        
        if (!!sPhase) {
            sPhase = fnFormatter(sPhase);
        }
        
        if (bPhone) {
            if (sStatus && sPhase) {
                return this.getText("LIST_FILTER_FLD_COUNTS", [2]);
            }
            else if (sStatus || sPhase) {
                return this.getText("LIST_FILTER_FLD_COUNT");
            }
        }
        else {
            if (sStatus && sPhase) {
                return this.getText("LIST_FILTERS_FLD", [sStatus, sPhase]);
            }
            else if (sStatus) {
                return this.getText("LIST_FILTER_FLD", [sStatus]);
            }
            else if (sPhase) {
                return this.getText("LIST_FILTER_FLD", [sPhase]);
            }
        }
        
        return "";
    };
    
    oBaseListFormatter.variantTitle = function(sVariant, sOptionalCampaignContext, oCurrentIdeaLink) {
        
        if(oCurrentIdeaLink && oCurrentIdeaLink.TYPE_CODE === "QUICK_LINK_CUSTOM_IDEA" && !sOptionalCampaignContext) {
            return oCurrentIdeaLink.LINK_TEXT;
        }
        
        if (sVariant === undefined) {
            return this.getText("EMPTY_FLD_TEXT");
        }
        
        var oVariant = this.getVariant(sVariant);
        if(!oVariant){
        	return this.getText("EMPTY_FLD_TEXT");
        }
        var sDisplayLabel = oVariant.DISPLAY_LABEL;
        if (!sOptionalCampaignContext) {
            if(sDisplayLabel){
            return this.getText(oVariant.TEXT,[sDisplayLabel]);
            } 
             return this.getText(oVariant.TEXT);  
        } else if(oCurrentIdeaLink && oCurrentIdeaLink.TYPE_CODE === "QUICK_LINK_CUSTOM_IDEA"){
            return this.getText("LIST_TIT_COMBINED_TEXT", [sOptionalCampaignContext, oCurrentIdeaLink.LINK_TEXT]);
        }
        else {
            var sText;
            if(sDisplayLabel){
             sText = this.getText(oVariant.TEXT,[sDisplayLabel]);
            }  else {
                sText = this.getText(oVariant.TEXT);
            }           
            
            return this.getText("LIST_TIT_COMBINED_TEXT", [sOptionalCampaignContext, sText]);
        }
    };
    
    oBaseListFormatter.listSortText = function(oSystem, sSort) {
        if (sSort === undefined) {
            return this.getText("EMPTY_FLD_TEXT");
        }
        
        var bPhone = oSystem && oSystem.phone;
        var sText = bPhone ? "LIST_SORT_BY_SHORT" : "LIST_SORT_BY";
        var sParameter = this.getSort(sSort).TEXT;
        
        return this.getText(sText, [this.getText(sParameter)]);
    };

    return oBaseListFormatter;
});
}; // end of sap/ino/commons/formatters/BaseListFormatter.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.formatters.ListFormatter') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.formatters.ListFormatter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.GroupHeaderListItem'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/formatters/ListFormatter",[
    "sap/ino/commons/formatters/BaseListFormatter",
    "sap/m/GroupHeaderListItem",
    "sap/ui/base/Object"
], function(BaseListFormatter,
            GroupHeaderListItem,
            Object) {
    "use strict";
    
    var oListFormatter = Object.extend("sap.ino.commons.formatters.ListFormatter", {});
    
    jQuery.extend(oListFormatter, BaseListFormatter);
    
    oListFormatter.listThreshold = function(oSystem) {
        if (oSystem.desktop) {
            return 20;
        }
        else if (oSystem.tablet) {
            return 20;
        }
        else {
            return 10;
        }
    };
        
    oListFormatter.showFilter = function(sStatus, sPhase) {
        return !!(sStatus || sPhase);
    };

    return oListFormatter;
});
}; // end of sap/ino/commons/formatters/ListFormatter.js
if ( !jQuery.sap.isDeclared('sap.ino.commons.formatters.ObjectListFormatter') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.commons.formatters.ObjectListFormatter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/ino/commons/formatters/ObjectListFormatter",[
    "sap/ino/commons/formatters/BaseFormatter",
    "sap/ino/commons/formatters/ListFormatter",
    "sap/ino/commons/formatters/ObjectFormatter",
    "sap/ino/commons/models/core/CodeModel",
    "sap/ui/base/Object"
], function(BaseFormatter,
	ListFormatter,
	ObjectFormatter,
	CodeModel,
	Object) {
	"use strict";

	var oObjectListFormatter = Object.extend("sap.ino.commons.formatters.ObjectListFormatter", {});

	jQuery.extend(oObjectListFormatter, ListFormatter, ObjectFormatter);

	oObjectListFormatter.ideaListCampaignBackground = function(sColor) {
		if (sColor && sColor.length === 6) {
			sColor = "#" + sColor;
		} else {
			sColor = "#FFFFFF";
		}
		return "<div class='sapInoIdeaListColor' style='background-color : " + sColor + ";' />";
	};

	oObjectListFormatter.widthCampaignCard = function(oSystem) {
		if (oSystem.phone) {
			return "300px";
		} else {
			return "400px";
		}
	};

	oObjectListFormatter.feedObjectTypeFormatter = function(sObjectType) {
		if (!sObjectType) {
			return;
		}
		return this.getText("FEEDS_FLD_OBJECT_TYPE_" + sObjectType);
	};

	oObjectListFormatter.feedFieldNameFormatter = function(sFieldName) {
		if (!sFieldName) {
			return;
		}
		return this.getText("FEEDS_FLD_NAME_" + sFieldName);
	};

	oObjectListFormatter.feedFieldValueFormatter = function(sValueType, sValue) {
		if (!sValueType || !sValue) {
			return;
		}
		if (sValueType === "BOOLEAN") {
			return Number(sValue) ? this.getText("FEEDS_FLD_VALUE_TRUE") : this.getText("FEEDS_FLD_VALUE_FALSE");
		}
		if (sValueType === "DATE") {
			sValue = sValue.split(".");
			sValue = sValue[0].replace(/-/g, "/");
			return BaseFormatter.toDate(sValue);
		}
		return;
	};

	oObjectListFormatter.feedObjectLinkFormatter = function(sObjectId, sObjectName, sObjectType) {
		if (!sObjectId || !sObjectName || !sObjectType) {
			return;
		}
		var sResult;
		switch (sObjectType) {
			case "IDEA":
				sResult = "<a href='" + this.ideaNavigationLink(sObjectId) + "' class='sapMLnk sapMLnkMaxWidth' tabindex='0' role='link'>" +
					sObjectName + "</a>";
				break;
			case "WALL":
				sResult = "<a href='" + this.wallNavigationLink(sObjectId) + "' class='sapMLnk sapMLnkMaxWidth' tabindex='0' role='link'>" +
					sObjectName + "</a>";
				break;
			case "CAMPAIGN":
				sResult = "<a href='" + this.campaignNavigationLink(sObjectId) + "' class='sapMLnk sapMLnkMaxWidth' tabindex='0' role='link'>" +
					sObjectName + "</a>";
				break;
			case "EVALUATION":
				sResult = "<a href='" + this.evaluationNavigationLink(sObjectId) +
					"' class='sapMLnk sapMLnkMaxWidth' tabindex='0' role='link' rel='"+sObjectName+"'>" + sObjectName + "</a>";
				break;
			case "BLOG":
				sResult = "<a href='" + this.blogNavigationLink(sObjectId) +
					"' class='sapMLnk sapMLnkMaxWidth' tabindex='0' role='link' rel='"+sObjectName+"'>" + sObjectName + "</a>";
				break;
			case "LINK":
				sResult = "<a href='" + sObjectId + "' class='sapMLnk sapMLnkMaxWidth' tabindex='0' role='link' rel='"+sObjectName+"'>" + sObjectName +
					"</a>";
				break;
			default:
				sResult = sObjectName;
				break;
		}
		return sResult;
	};

	oObjectListFormatter.feedMsgFormatter = function(oValue) {
		var sResult, sMsgKey;
		if (!oValue || !oValue.FEED_CODE) {
			return;
		}

		var sAction = oValue.FEED_CODE,
			sObjectName = jQuery.sap.encodeHTML(oValue.OBJECT_TEXT || ""),
			sObjectId = oValue.OBJECT_ID,
			sObjectType = oValue.OBJECT_TYPE_CODE,
			sInvolvedObjectName = jQuery.sap.encodeHTML(oValue.INVOLVED_OBJ_TEXT || ""),
			sInvolvedObjectId = oValue.INVOLVED_ID,
			sInvolvedObjectType = oValue.INVOLVED_OBJ_TYPE_CODE,
			sFieldOneValue = oValue.FIELD1_VALUE_OPTION === 'DATE' ? oValue.FIELD1_VALUE : jQuery.sap.encodeHTML(oValue.FIELD1_VALUE || ""),
			sFieldOneName = jQuery.sap.encodeHTML(oValue.FIELD1_NAME || ""),
			sFieldOneText = jQuery.sap.encodeHTML(oValue.FIELD1_TEXT || ""),
			sFieldOneValueOption = jQuery.sap.encodeHTML(oValue.FIELD1_VALUE_OPTION || ""),
			sFieldTwoValue = oValue.FIELD2_VALUE_OPTION === 'DATE' ? oValue.FIELD2_VALUE : jQuery.sap.encodeHTML(oValue.FIELD2_VALUE || ""),
			sFieldTwoName = jQuery.sap.encodeHTML(oValue.FIELD2_NAME || ""),
			sFieldTwoText = jQuery.sap.encodeHTML(oValue.FIELD2_TEXT || ""),
			sFieldTwoValueOption = jQuery.sap.encodeHTML(oValue.FIELD2_VALUE_OPTION || ""),
			sContent = jQuery.sap.encodeHTML(oValue.CONTENT || ""),
			sObjectLink,
			sInvolvedObjectLink;

		sObjectLink = this.feedObjectLinkFormatter(sObjectId, sObjectName, sObjectType);
		sInvolvedObjectName = sInvolvedObjectType === "EVALUATION" ? this.feedObjectTypeFormatter(sInvolvedObjectType) : sInvolvedObjectName;
		sInvolvedObjectId = sInvolvedObjectType === "LINK" ? sContent : sInvolvedObjectId;
		sInvolvedObjectLink = this.feedObjectLinkFormatter(sInvolvedObjectId, sInvolvedObjectName, sInvolvedObjectType);

		// action name
		if (sAction.indexOf("STATUS_ACTION") === 0) { //status change
			if (sAction.indexOf("SUBMIT") > 0) {
				sAction = "STATUS_ACTION_SUBMIT";
			} else if (sAction.indexOf("EVAL") > 0) {
				sAction = "STATUS_ACTION" + "_EVAL";
			} else {
				sAction = "STATUS_ACTION";
			}
		}
		if (sAction.indexOf("CAMP_MAJOR_PUBLISH") === 0) { //campaign major publish
			sAction = "ACTION_FLD_COMPAIGN_MAJOR_CHANGE";
		}
		if (sAction.indexOf("IDEA_RELATION") === 0) { //idea relation change
			sAction = sAction.substr(sAction.lastIndexOf(".") + 1);
		}

		// field name/value
		if (sFieldOneText === "IDEA_FORM") { //idea form field change
			sAction = "ACTION_IDEA_FORM";
			if (["BOOLEAN", "DATE"].indexOf(sFieldOneValueOption) >= 0) {
				sFieldOneValue = this.feedFieldValueFormatter(sFieldOneValueOption, sFieldOneValue);
			} else if (sFieldOneValueOption) {
				sFieldOneValue = sFieldOneValueOption ? CodeModel.getText(sFieldOneValueOption, Number(sFieldOneValue)) : sFieldOneValue;
			}

			if (["BOOLEAN", "DATE"].indexOf(sFieldTwoValueOption) >= 0) {
				sFieldTwoValue = this.feedFieldValueFormatter(sFieldTwoValueOption, sFieldTwoValue);
			} else if (sFieldTwoValueOption) {
				sFieldTwoValue = sFieldTwoValueOption ? CodeModel.getText(sFieldTwoValueOption, Number(sFieldTwoValue)) : sFieldTwoValue;
			}

		} else { //normal field change
			if (["BOOLEAN", "DATE"].indexOf(sFieldOneValueOption) >= 0) {
				sFieldOneValue = this.feedFieldValueFormatter(sFieldOneValueOption, sFieldOneValue);
			} else if (sFieldOneValueOption) {
				sFieldOneValue = CodeModel.getText(sFieldOneValueOption, sFieldOneValue);
			}
			if (["BOOLEAN", "DATE"].indexOf(sFieldTwoValueOption) >= 0) {
				sFieldTwoValue = this.feedFieldValueFormatter(sFieldTwoValueOption, sFieldTwoValue);
			} else if (sFieldTwoValueOption) {
				sFieldTwoValue = CodeModel.getText(sFieldTwoValueOption, sFieldTwoValue);
			}
			sFieldOneName = sFieldOneText ? this.feedFieldNameFormatter(sFieldOneText) : sFieldOneName;
			sFieldTwoName = sFieldTwoText ? this.feedFieldNameFormatter(sFieldTwoText) : sFieldTwoName;
		}

		sObjectType = this.feedObjectTypeFormatter(sObjectType);
		sInvolvedObjectType = this.feedObjectTypeFormatter(sInvolvedObjectType);

		sMsgKey = "FEEDS_MSG_" + sAction;

		sResult = this.getText(sMsgKey, [this.spanWrapperFormatter(sObjectType), sObjectLink, this.spanWrapperFormatter(sInvolvedObjectType),
			sInvolvedObjectLink,
		    this.spanWrapperFormatter(sFieldOneName), this.spanWrapperFormatter(sFieldOneValue), this.spanWrapperFormatter(sFieldTwoName), this.spanWrapperFormatter(
				sFieldTwoValue),""]);

		return this.spanWrapperFormatter(sResult);
	};

	oObjectListFormatter.spanWrapperFormatter = function(sText) {
		return sText ? "<span>" + sText + "</span>" : "";
	};

	oObjectListFormatter.heightCampaignCard = function(oSystem) {
		if (oSystem.phone) {
			return "160px";
		} else {
			return "213px";
		}
	};

	oObjectListFormatter.respListFilterEnable = function(oItemsArray) {
		if ((oItemsArray === null) || (oItemsArray && oItemsArray.length > 1)) {
			return true;
		} else {
			return false;
		}
	};
	oObjectListFormatter.setIdeaHeaderTitleLength = function(bFullScreen){
	    if(!bFullScreen){
	        return "IDEA_HEADER_TITLE_LENGTH_SMALL";
	    }else {
	        return "IDEA_HEADER_TITLE_LENGTH_BIG";
	    }
	};
	oObjectListFormatter.quickLinkFilterInfo = function(oFilterInfo, bActive, aStatus, aOperator) {
	    var that = this;
	    var iCount = 0, 
    	    aParam = [], 
    	    sStatus = bActive ? this.getText('QUICK_LINK_FLD_ACTIVE') : this.getText('QUICK_LINK_FLD_INACTIVE'), 
    	    sVoteNum = '', 
    	    sVoteOperator = '',
    	    arr = '',
    	    result = [],
    	    i;
		if(oFilterInfo && aStatus && aOperator){
		    for(var sKey in oFilterInfo){
		        switch(sKey){
		            case 'CAMPAIGN':
		                aParam.push(that.getText('LIST_TIT_FILTER_CAMPAIGN_HEADER') + ': ' + oFilterInfo[sKey]);
		                break;
		            case 'IDEAFORMID':
		                aParam.push(that.getText('LIST_TIT_FILTER_CAMPAIGN_FORM_HEADER') + ': ' + CodeModel.getText('sap.ino.xs.object.ideaform.IdeaForm.Root',oFilterInfo[sKey]));
		                break;
		            case 'PHASE':
		                arr = oFilterInfo[sKey].split(',');
		                result = [];
		                for(i=0; i<arr.length; i++){
		                    result.push(CodeModel.getText('sap.ino.xs.object.campaign.Phase.Root', arr[i]));
		                }
		                aParam.push(that.getText('LIST_TIT_FILTER_PHASE_HEADER') + ': ' + result.join(','));
		                break;
		            case 'STATUS':
		                arr = oFilterInfo[sKey].split(',');
		                result = [];
		                for(i=0; i<aStatus.length; i++){
		                    if(arr.indexOf(aStatus[i].KEY) >= 0){
		                        result.push(that.getText(aStatus[i].TEXT));
		                    }
		                }
		                if(result.length){
		                    aParam.push(that.getText('LIST_TIT_FILTER_STATUS_HEADER') + ': ' + result.join(','));
		                }
		                break;
		            case 'SUBSTATUS':
		                arr = oFilterInfo[sKey].split(',');
		                result = [];
		                for(i=0; i<arr.length; i++){
		                    result.push(CodeModel.getText('sap.ino.xs.object.idea.Status.Root', arr[i]));
		                }
		                aParam.push(that.getText('LIST_TIT_FILTER_SUB_STATUS') + ': ' + result.join(','));
		                break;
		            case 'RESPCODE':
		                arr = oFilterInfo[sKey] ? JSON.parse(oFilterInfo[sKey]) : [];
		                result = [];
		                for(i=0; i<arr.length; i++){
		                    result.push(CodeModel.getText('sap.ino.xs.object.subresponsibility.ResponsibilityStage.RespValues', arr[i].code));
		                }
		                aParam.push(that.getText('LIST_TIT_FILTER_RESPONSIBILITY_LIST_HEADER') + ': ' + result.join(','));
		                break;
		            case 'AUTHORS':
		                aParam.push(that.getText('LIST_TIT_FILTER_AUTHOR_HEADER') + ': ' + oFilterInfo[sKey]);
		                break;
		            case 'COACHES':
		                aParam.push(that.getText('LIST_TIT_FILTER_COACH_HEADER') + ': ' + oFilterInfo[sKey]);
		                break;
		            case 'DUEFROM':
		                aParam.push(that.getText('QUICK_LINK_FLD_DUE_FROM') + ': ' + oFilterInfo[sKey]);
		                break;
		            case 'DUETO':
		                aParam.push(that.getText('QUICK_LINK_FLD_DUE_TO') + ': ' + oFilterInfo[sKey]);
		                break;
		            case 'VOTENUM':
		                sVoteNum = oFilterInfo[sKey];
		                break;
		            case 'VOTEOPERATOR':
		                sVoteOperator = oFilterInfo[sKey];
		                break;
		            default:
		                break;
		        }
		    }
		    if(sVoteNum && sVoteOperator){
                for(i=0; i<aOperator.length; i++){
                    if(aOperator[i].ACTION === sVoteOperator){
                        sVoteOperator = that.getText(aOperator[i].TEXT);
                    }
                }
                aParam.push(that.getText('LIST_TIT_FILTER_VOTE_NUMBER') + ': ' + sVoteOperator + ' ' + sVoteNum);
		    }
    		iCount = aParam.length;
    		return this.getText('QUICK_LINK_FILTER_INFO_TEXT', [iCount, sStatus]) + '\n' +  aParam.join('\n'); 
		}
		return '';
	};
	
	return oObjectListFormatter;
});
}; // end of sap/ino/commons/formatters/ObjectListFormatter.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.analytics.Display.controller') ) {
jQuery.sap.declare('sap.ino.vc.analytics.Display.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.odata.ODataModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartfilterbar.ControlConfiguration'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartfilterbar.SelectOption'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexItemData'); // unlisted dependency retained
jQuery.sap.require('sap.m.SegmentedButtonItem'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartfilterbar.SmartFilterBar'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smarttable.SmartTable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartchart.SmartChart'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.message.Message'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.LabelDesign'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.VerticalLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.HorizontalLayout'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/analytics/Display.controller",[
    "sap/ino/vc/commons/BaseObjectModifyController",
    "sap/ino/vc/commons/TopLevelPageFacet",
    "sap/ino/commons/application/Configuration",
    "sap/ui/model/odata/ODataModel",
    "sap/ui/comp/smartfilterbar/ControlConfiguration",
    "sap/ui/comp/smartfilterbar/SelectOption",
    "sap/m/FlexItemData",
    "sap/m/SegmentedButtonItem",
    "sap/ui/comp/smartfilterbar/SmartFilterBar",
    "sap/ui/comp/smarttable/SmartTable",
    "sap/ui/comp/smartchart/SmartChart",
    "sap/ino/commons/models/object/Report",
    "sap/ino/commons/util/ReportUtil",
    "sap/ui/core/MessageType",
    "sap/ui/core/message/Message",
    "sap/m/Label",
    "sap/m/LabelDesign",
    "sap/ino/vc/commons/mixins/ExportMixin",
    "sap/ui/layout/VerticalLayout",
    "sap/ui/layout/HorizontalLayout",
    "sap/m/FlexBox",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageBox"
    ], function(BaseController, TopLevelPageFacet, Configuration,
	ODataModel, ControlConfiguration, SelectOption, FlexItemData, SegmentedButtonItem, SmartFilterBar, SmartTable, SmartChart, Report,
	ReportUtil, MessageType, Message, Label, LabelDesign, ExportMixin, VerticalLayout, HorizontalLayout, FlexBox, JSONModel, MessageBox) {
	"use strict";

	return BaseController.extend("sap.ino.vc.analytics.Display", jQuery.extend({}, TopLevelPageFacet, ExportMixin, {

		routes: ["report"],

		onInit: function() {
			BaseController.prototype.onInit.apply(this, arguments);

			this.oFlexItemData = new FlexItemData({
				growFactor: 0
			});

			this.oFlexItemLayoutData = new FlexItemData({
				growFactor: 1
			});

			this.oVBox = this.byId("oVBox");
			this.oSegmentedButton = this.byId("segmentedButton"); // maybe need to change code via xml view 
		},

		onRouteMatched: function(oEvent) {
            var bBOPrivilege = this.getModel("user").getProperty("/privileges")["sap.ino.ui::backoffice.access"];
            if(!bBOPrivilege){
              this.navigateTo("home"); 
              return;
              }			
			this.initFullScreen();

			this.setHelp("REPORT_DISPLAY");

			var oController = this;
			var sPath = oEvent.getParameter("arguments").code;
			this.sCampaignId = null;
			if (oEvent.getParameter("arguments")["?query"]) {
				this.sCampaignId = oEvent.getParameter("arguments")["?query"].campaign;
			}

			this.oObjectContext = {
				chartVisible: !Configuration.getPersonalize().REPORT_VIEW,
				tableVisible: !!Configuration.getPersonalize().REPORT_VIEW,
				saveButtonEnabled: true,
				otbFooterVisible: true,
				listBoxVisible: false,
				VBoxVisible: false,
				datePickerVisible: false
			};
			this.setModel(new JSONModel(this.oObjectContext), "objectContext");

			//remove all items , if using xml way ,maybe as below code ,we can delete them
			if (this.oSegmentedButton.getItems() && this.oSegmentedButton.getItems().length > 0) {
				this.oSegmentedButton.destroyItems();
				this.oSegmentedButton.destroyButtons();
			}
			//destroy the parameterDialog
			// 			if (this._oParameterDialog) {
			// 				this._oParameterDialog.destroy();
			// 				this._oParameterDialog = null;
			// 			}

			this.initModel(sPath);

			//add segmentedButton items
			if (this.oConfiguration.Views.length > 1) {
				jQuery.each(this.oConfiguration.Views, function(iIndex, oView) {
					var oItem = new SegmentedButtonItem({
						text: "{i18n>" + oView.DisplayName + "}",
						key: iIndex,
						width: "200px"
					});
					oController.oSegmentedButton.addItem(oItem);
				});
			}

			var aItem = this.oVBox.getItems();
			//smartChart  Note: Most of the attributes are not dynamic and cannot be changed once the control has been initialized.	
			if (aItem.length > 0) {
				this.oVBox.removeAllItems();
			}
			oController.aTempParameter = [];
			oController.iParameterIndex = 0;
			if (ReportUtil.checkMandatoryParameters(this.oConfiguration)) {
				this.freshViews(this.oConfiguration.SelectedView);
			}
		},

		initModel: function(sPath) {
			var oController = this;
			sPath = "/" + sPath;
			if (this.getOwnerComponent().getModel("data").getProperty(sPath)) {
				this.oConfig = this.getOwnerComponent().getModel("data").getProperty(sPath);
				this.oConfiguration = JSON.parse(this.oConfig.CONFIG);
				ReportUtil.deleteSorterInConfig(this.oConfiguration);
				oController.onAfterShow();
			} else {
				var sOdataPath = Configuration.getApplicationPath("sap.ino.config.URL_PATH_OD_BACKOFFICE");
				var oDataModel = new sap.ui.model.odata.ODataModel(Configuration.getBackendRootURL() + "/" + sOdataPath);

				oDataModel.read(sPath, {
					async: false,
					success: function(oData) {
						oController.oConfig = oData;
						oController.oConfiguration = JSON.parse(oData.CONFIG);
						ReportUtil.deleteSorterInConfig(oController.oConfiguration);
						oController.onAfterShow();
					}
				});
			}

			this.iSelectedView = this.oConfiguration.SelectedView;
			this.oSegmentedButton.setSelectedKey(this.iSelectedView.toString());

			this.oChartPage = this.byId("chartPage");
			this.oSaveButton = this.byId("saveButton");

			if (parseInt(this.oConfig.ID, 0) < 0) {
				//this.oChartPage.setText(this.oConfig.DEFAULT_TEXT);
				//this.oSaveButton.setEnabled(false);
				this.getModel("objectContext").setProperty("/saveButtonEnabled", false);
			} else {
				//this.oChartPage.setText(this.oConfiguration.Title);
				//this.oSaveButton.setEnabled(true);
				this.getModel("objectContext").setProperty("/saveButtonEnabled", true);
			}

			this.oModel = this.createModel(parseInt(this.oConfig.ID, 0), this.oConfig.CODE);
			this.setObjectModel(this.oModel);

			if (this.sCampaignId) {
				this.oConfiguration.Parameters.Campaign.Selection.push(this.sCampaignId);
				this.oTemplateDataRequest.done(function() {
					oController.getObjectModel().getProperty("/CONFIG").Parameters.Campaign.Selection.push(oController.sCampaignId);
				});
			}
			this._oSeletedTableView = 0;
		},

		onSaveAs: function() {
			this.getDialog().open();
			this.byId('reportTitle').setValue(this.oChartPage.getText());
		},

		onSave: function() {
			var oController = this;

			this.storeConfiguration();
			this.getObjectModel().setConfiguration(this.oConfiguration);
			var oRequest = this.executeObjectAction("modify");

			oRequest.always(function() {
				oController.setBusy(false);
			});
		},
		getDialog: function() {
			if (!this._oDialog) {
				this._oDialog = this.createFragment("sap.ino.vc.analytics.fragments.Dialog");
				this.getView().addDependent(this._oDialog);
			}
			return this._oDialog;
		},
		onSubmit: function() {
			var oController = this;

			this.storeConfiguration();
			this.oConfiguration.Title = this.byId('reportTitle').getValue();

			var oSettings = {
				continuousUse: true,
				actions: ["modify"],
				readSource: {
					model: this.getDefaultODataModel()
				}
			};
			oController.oModel = new Report(-1, oSettings);
			oController.oModel.setProperty("/ID", -1);
			oController.oModel.setConfiguration(this.oConfiguration);
			oController.setObjectModel(oController.oModel);

			var oDialog = this.getDialog();
			oDialog.setBusy(true);

			oController.resetClientMessages();
			var oRequest = oController.executeObjectAction("create");

			oRequest.done(function() {
				oDialog.close();
				oController.oChartPage.setText(oController.oConfiguration.Title);
				oController.oSaveButton.setEnabled(true);
				oController.getModel("objectContext").setProperty("/saveButtonEnabled", true);
			});

			oRequest.fail(function() {});

			oRequest.always(function() {
				oDialog.setBusy(false);
			});
		},

		onCancel: function() {
			this._oDialog.close();
		},

		createModel: function(iId, sCode) {
			var oSettings = {
				continuousUse: true,
				actions: ["modify"],
				readSource: {
					model: this.getDefaultODataModel()
				}
			};

			this.oModel = new Report(iId, oSettings);

			if (sCode !== undefined && sCode !== null) {
				if (!iId || iId < 0) {
					this.oTemplateDataRequest = this.oModel.setDataFromTemplate(sCode, this.getDefaultODataModel());
				}
			}
			if (!iId || iId < 0) {
				this._bSaveAllowed = false;
			} else {
				this._bSaveAllowed = true;
			}
			//everything done in this method is the initialization of the mode, make sure the change Manager does not recognize this as user change.
			this.oModel.setAfterInitChanges();

			return this.oModel;
		},

		onNavigateToChart: function() {
			// 			this.oSmartTable.setVisible(false);
			// 			this.oSmartChart.setVisible(true);
			var that = this;
			var oResult = this.checkSelectedClumns();
			if (oResult.errors.length > 0) { //this.getText("IDEA_LIST_REASSIGN_CAMPAIGN_MSG_CHG_NO_FORM_FIELD")
				MessageBox.error(sap.ui.getCore().getLibraryResourceBundle("sap.m").getText("P13NDIALOG_VALIDATION_CHARTTYPE"), {
					icon: MessageBox.Icon.ERROR,
					actions: [MessageBox.Action.CLOSE],
					onClose: function(sDialogAction) {
						that.byId("typeSegmentedButton").setSelectedButton(that.byId("navigateToTable"));
						that.getModel("objectContext").setProperty("/chartVisible", false);
						that.getModel("objectContext").setProperty("/tableVisible", true);
					}
				});
			} else {
				this.getModel("objectContext").setProperty("/chartVisible", true);
				this.getModel("objectContext").setProperty("/tableVisible", false);
				this.oSmartChart.applyVariant(this._convertTableSetingToChart());
			}
			this._oSeletedTableView = 0;
		},

		checkSelectedClumns: function() {
			var sChartType = this.oSmartChart.getChart().getChartType(); //fetchVariant().dimeasure.chartTypeKey;
			var aDimensionItems = [];
			var aMeasureItems = [];
			var allDefaultDimensions = this.oSmartChart.getChart().mAggregations.dimensions;
			var allDefaultMeasures = this.oSmartChart.getChart().mAggregations.measures;
			var aColumns = this.oSmartTable.getTable().mAggregations.columns;
			jQuery.each(aColumns, function(indexTb, dataTb) {
				if (dataTb.getProperty("visible")) {
					jQuery.each(allDefaultDimensions, function(indexD, dataD) {
						if (dataD.getProperty("name") === dataTb.getProperty("leadingProperty")) {
							aDimensionItems.push({
								"name": dataD.getProperty("name")
							});

						}
					});
					jQuery.each(allDefaultMeasures, function(indexM, dataM) {
						if (dataM.getProperty("name") === dataTb.getProperty("leadingProperty")) {
							aMeasureItems.push({
								"name": dataM.getProperty("name")
							});

						}

					});

				}

			});

			sap.ui.getCore().loadLibrary("sap.chart");
			var oResult = sap.chart.api.getChartTypeLayout(sChartType, aDimensionItems, aMeasureItems);
			return oResult;
		},
		onNavigateToTable: function() {
			// 			this.oSmartTable.setVisible(true);
			// 			this.oSmartChart.setVisible(false);
			var oObjectContext = this.getModel("objectContext");
			oObjectContext.setProperty("/chartVisible", false);
			oObjectContext.setProperty("/tableVisible", true);
			this._convertChartSetingToTable();
			this._oSeletedTableView = 1;
		},

		_formatChartType: function(sChartType) {
			var sChartTypeResult = "";
			if (sChartType && sChartType.indexOf("_") >= 0) {
				var stringArray = sChartType.split("_").reverse();
				jQuery.each(stringArray, function(iIndex, indexString) {
					var index = indexString.replace(/^(\w)(\w+)/, function(v, v1, v2) {
						return v1.toUpperCase() + v2.toLowerCase();
					});
					sChartTypeResult += index;
				});

				if (sChartTypeResult.indexOf("Horizontal") >= 0) {
					sChartTypeResult = sChartTypeResult.replace("Horizontal", "");
				}

				if (sChartTypeResult.indexOf("Vertical") >= 0) {
					sChartTypeResult = sChartTypeResult.replace("Vertical", "");
				}
			} else {
				if (sChartType !== "heatmap") {
					sChartTypeResult = sChartType;
				} else {
					sChartTypeResult = "HeatMap";
				}
			}
			return sChartTypeResult;
		},

		onSelect: function(oEvent) {
			this.storeConfiguration();
			this.iSelectedView = parseInt(oEvent.getParameters().key, 0);
			this.oConfiguration.SelectedView = this.iSelectedView;
			this.freshViews(this.iSelectedView);
		},

		freshViews: function(iSelectedView) {
			var index = this.getModel("objectContext").getProperty("/chartVisible") ? 0 : 1;
			var oTypeSegmentedButton = this.byId("typeSegmentedButton");
			oTypeSegmentedButton.setSelectedButton(oTypeSegmentedButton.getButtons()[index]);
			//this.byId("otbFooter").setVisible(true);
			this.getModel("objectContext").setProperty("/otbFooterVisible", true);
			this.sChartType = this.oConfiguration.Views[iSelectedView].Chart.Type;
			this.aDimensions = this.oConfiguration.Views[iSelectedView].Dimensions;
			this.aMeasures = this.oConfiguration.Views[iSelectedView].Measures;

			var aItem = this.oVBox.getItems();
			//smartChart  Note: Most of the attributes are not dynamic and cannot be changed once the control has been initialized.	
			if (aItem.length > 0) {
				this.oVBox.removeAllItems();
			}

			var oSmartFilterBar = new SmartFilterBar({
				showClearButton: true,
				layoutData: this.oFlexItemData,
				visible: false
			});

			var sAnalyticViewType = this.oConfiguration.DataSource + "Type";
			oSmartFilterBar.setEntityType(sAnalyticViewType);

			//filter odataModel
			var oGroupKeys = {};
			jQuery.each(this.oConfiguration.Parameters, function(iIndex, oParameter) {
				if (oParameter.hasOwnProperty("groupKey") && oParameter.groupKey) {
					oGroupKeys[oParameter.groupKey] = oGroupKeys[oParameter.groupKey] || [];
					oGroupKeys[oParameter.groupKey].push(oParameter);
					return true;
				}
				var vControlConfiguration = new ControlConfiguration({
					key: oParameter.Key,
					label: "{i18n>" + oParameter.DisplayName + "}",
					visibleInAdvancedArea: true
				});
				jQuery.each(oParameter.Selection, function(iSecondIndex, sSelection) {
					if (sSelection) {
						var vSelectOption = new SelectOption({
							low: sSelection
						});
						vControlConfiguration.addDefaultFilterValue(vSelectOption);
					} else {
						return true;
					}
				});
				oSmartFilterBar.addControlConfiguration(vControlConfiguration);
			});
			jQuery.each(oGroupKeys, function(sKey, aGroup) {
				var vControlConfiguration = new ControlConfiguration({
					key: sKey,
					label: "{i18n>" + aGroup[0].groupName + "}",
					visibleInAdvancedArea: true
				});
				var vSelectOption = new SelectOption({
					low: aGroup[0].Selection,
					high: aGroup[1].Selection + "T23:59:59",
					operator: "BT"
				});
				vControlConfiguration.addDefaultFilterValue(vSelectOption);
				oSmartFilterBar.addControlConfiguration(vControlConfiguration);
			});

			this.oSmartChart = new SmartChart({
				useChartPersonalisation: true,
				enableAutoBinding: true,
				layoutData: this.oFlexItemLayoutData,
				useVariantManagement: true,
				visible: "{objectContext>/chartVisible}"
				// showDrillBreadcrumbs: false
			});

			//this.oSmartChart._oDrillBreadcrumbs.setVisible(false);//smartChart showDrillBreadcrumbs property bug
			//this.oSmartChart.setVisible(true);
			// 			this.getModel("objectContext").setProperty("/chartVisible", true);
			// 			this.getModel("objectContext").setProperty("/tableVisible", false);
			if (this.aMeasures && this.aMeasures.length === 0) {
				this.getModel("objectContext").setProperty("/chartVisible", false);
				this.getModel("objectContext").setProperty("/tableVisible", true);
				this.byId("typeSegmentedButton").setSelectedButton(this.byId("navigateToTable"));
				this._oSeletedTableView = 1;
			}
			var sId = oSmartFilterBar.getId();
			this._sSmartFilterBarId = sId;
			this.oSmartChart.setSmartFilterId(sId);
			this.oSmartChart.setEntitySet(this.oConfiguration.DataSource);

			this.oConfiguration.SelectedView = this.iSelectedView;
			var sOdataPath = this.oConfiguration.ODataPath || Configuration.getApplicationPath("sap.ino.config.URL_PATH_OD_ANALYTICS");

			var mParameters = {
				json: false,
				loadAnnotationsJoined: true
			};

			var oAnalyticalChartModel = new ODataModel(Configuration.getBackendRootURL() + "/" + sOdataPath, mParameters);
			oAnalyticalChartModel.addAnnotationXML(ReportUtil.getAnnotationXML(this.oConfiguration));

			var oView = this.getView();
			oView.setModel(oAnalyticalChartModel);
			//add default sort of smart chart
			var oVariantSetting = {
				sort: {
					sortItems: []
				},
				filter: {
					filterItems: []
				}
			};
			if (this.oConfiguration.Views[iSelectedView].hasOwnProperty("Sorter") && this.oConfiguration.Views[iSelectedView].Sorter) {
				this.oConfiguration.Views[iSelectedView].Sorters = [{
					columnKey: this.oConfiguration.Views[iSelectedView].Sorter.Path,
					operation: this.oConfiguration.Views[iSelectedView].Sorter.Descending ? "Descending" : "Ascending"
				}];
				delete this.oConfiguration.Views[iSelectedView].Sorter;
			}
			if (this.oConfiguration.Views[iSelectedView].Sorters) {
				oVariantSetting.sort.sortItems = this.oConfiguration.Views[iSelectedView].Sorters;
			}
			if (this.oConfiguration.Views[iSelectedView].Filters) {
				oVariantSetting.filter.filterItems = this.oConfiguration.Views[iSelectedView].Filters;
			}
			//add fiter and sorter paramters to smart table
			this.oSmartChart.attachInitialise(null, function() {
				this.oSmartChart.applyVariant(oVariantSetting);
			}, this);
			this.oVBox.addItem(oSmartFilterBar);
			this.oVBox.addItem(this.oSmartChart);

			var that = this;
			setTimeout(function() {
				var oChart = that.oSmartChart.getChart();
				if (oChart) {
					oChart.setUiConfig({
						applicationSet: "fiori"
					});
				}
			}, 0);

			//add smart table
			var sVisibleFields = "";
			jQuery.each(this.oConfiguration.Views[iSelectedView].Dimensions, function(iIndex, sDimension) {
				sVisibleFields += (sDimension + ",");
			});

			if (this.oConfiguration.Views[iSelectedView].SecondaryDimensions) {
				jQuery.each(this.oConfiguration.Views[iSelectedView].SecondaryDimensions, function(iIndex, sDimension) {
					sVisibleFields += (sDimension + ",");
				});
			}

			jQuery.each(this.oConfiguration.Views[iSelectedView].Measures, function(iIndex, sMeasure) {
				sVisibleFields += (sMeasure + ",");
			});

			if (this.oConfiguration.Views[iSelectedView].SecondaryMeasures) {
				jQuery.each(this.oConfiguration.Views[iSelectedView].SecondaryMeasures, function(iIndex, sMeasure) {
					sVisibleFields += (sMeasure + ",");
				});
			}

			sVisibleFields = sVisibleFields.substring(0, sVisibleFields.length - 1);
			this._createSmartTable(sVisibleFields);
		},

		_createSmartTable: function(sVisibleFields) {
			if (this.oSmartTable) {
				this.oVBox.removeItem(this.oSmartTable);
				this.oSmartTable = undefined;
			}
			this.oSmartTable = new SmartTable({
				entitySet: this.oConfiguration.DataSource,
				smartFilterId: this._sSmartFilterBarId,
				tableType: "AnalyticalTable",
				useExportToExcel: true,
				useVariantManagement: false,
				useTablePersonalisation: true,
				header: "Views",
				showRowCount: true,
				enableAutoBinding: true,
				initiallyVisibleFields: sVisibleFields,
				ignoredFields: "ID",
				ignoreFromPersonalisation: "ID",
				layoutData: this.oFlexItemLayoutData,
				visible: "{objectContext>/tableVisible}"
			});
			this.oSmartTable.attachInitialise(function() {
				console.log(this.oSmartTable.getTable().getColumns());
			}, this);
			this.oSmartTable.attachBeforeRebindTable(function() {
				console.log(this.oSmartTable.getTable().getColumns());
			}, this);
			this.oVBox.addItem(this.oSmartTable);
		},

		fnGetFilter: function(oParam) {
			var oController = this,
				aFilter = [];
			for (var i = 0; i < oController.aTempParameter.length; i++) {
				var oParameter = oController.aTempParameter[i];
				if (oParam.Key === "CAMPAIGN_ID" || oParameter.Key.indexOf("SUBMISSION_DATE_") > -1) {
				    continue;
				}
				var aParameterFilter = [];
				for (var j = 0; j < oParameter.Selection.length; j++) {
					aParameterFilter.push(new sap.ui.model.Filter(oParameter.Key, "EQ", oParameter.Selection[j]));
				}
				if (aParameterFilter.length > 0) {
					aFilter.push(new sap.ui.model.Filter(aParameterFilter, false));
				}
			}
			var oReturn;
			if (aFilter.length > 0) {
				oReturn = new sap.ui.model.Filter(aFilter, true);
			}
			return oReturn;
		},

		fnBindData: function(oParameter, sDataSourcePath) {
			var oController = this,
				oView = oController.getView(),
				oListBox = oController.byId("listBox");
			oListBox.setAllowMultiSelect(oParameter.Multiselect);
			var oListBoxItem = new sap.ui.core.ListItem({
				key: "{" + oParameter.Key + "}",
				text: "{" + oParameter.Text + "}"
			});
			var oFilter = oController.fnGetFilter(oParameter);
			oListBox.bindAggregation("items", {
				path: "/" + (sDataSourcePath || oController.oConfiguration.DataSource),
				filters: oFilter,
				parameters: {
					select: oParameter.Key + "," + oParameter.Text
				},
				template: oListBoxItem,
				sorter: new sap.ui.model.Sorter(oParameter.Text, false)
			});
			if (oParameter.Selection !== undefined &&
				oParameter.Selection !== null &&
				oParameter.Selection.length > 0) {
				oListBox.getBinding("items").attachDataReceived(
					function() {
						oListBox.setBusy(false);
						oListBox.setSelectedKeys(oParameter.Selection);
					}
				);
			}
			var oDomRef = jQuery("#" + oView.createId("listBox-list"));
			oDomRef.attr("aria-require", oParameter.Mandatory || false);
		},

		_setListBox: function(oConfiguration) {
			var oController = this,
				sDataSource, oParameterModel,
				oListBox = oController.byId("listBox"),
				oDialog = this.getParameterDialog(),
				oParameters = oConfiguration.Parameters,
				aParameter = jQuery.map(oParameters, function(value) {
					return [value];
				});

			// 			oBtnNext.setText(aParameter.length > 1 ? this.getText("BO_ANA_BUT_NEXT") : this.getText("BO_ANA_BUT_OK"));
			var sODataPath = oConfiguration.ODataPath || Configuration.getApplicationPath("sap.ino.config.URL_PATH_OD_ANALYTICS");
			if (aParameter && aParameter[oController.iParameterIndex] && aParameter[oController.iParameterIndex].Key && aParameter[oController.iParameterIndex]
				.Key === "CAMPAIGN_ID") {
				sDataSource = "AuthCampaignReports";
				oParameterModel = new sap.ui.model.odata.v2.ODataModel(Configuration.getBackendRootURL() + "/" + Configuration.getApplicationPath(
					"sap.ino.config.URL_PATH_OD_BACKOFFICE"), {
					disableHeadRequestForToken: true
				});
				oParameterModel.setSizeLimit(10 * 1000);
			} else {
				sDataSource = undefined;
				oParameterModel = new sap.ui.model.odata.v2.ODataModel(Configuration.getBackendRootURL() + "/" + sODataPath, {
					disableHeadRequestForToken: true
				});
			}
			oListBox.setModel(oParameterModel);
			if (oDialog && oDialog.getParent()) {
				oDialog.getParent().setBusy(true);
			}
			oParameterModel.attachBatchRequestCompleted(function() {
				if (oDialog.getParent()) {
					oDialog.getParent().setBusy(false);
				}
				oListBox.setBusy(false);
				oDialog.open();
				oController.getModel("objectContext").setProperty("/listBoxVisible", true);
				oController.getModel("objectContext").setProperty("/VBoxVisible", false);
			});
			oController.fnBindData(aParameter[oController.iParameterIndex], sDataSource);
		},

		_bindCancelBtn: function() {
			var oController = this,
				oCancelButton = this.byId("parametercancelbutton"); // or use the way this.byId(__xmlview2--parametercancelbutton)
			var fnCancel = function() {
				var _oDialog = oController.byId("parameterDialog");
				oController.iParameterIndex = 0;
				_oDialog.close();
				if (oController.oVBox.getItems().length === 0) {
					oController.navigateBack();
				}
			};
			oCancelButton.attachPress(fnCancel);
		},

		_nextPress: function() {
			var oController = this;
			return function() {
				var oConfiguration = oController.oConfiguration,
					oParameters = oConfiguration.Parameters,
					aParameter = jQuery.map(oParameters, function(value) {
						return [value];
					}),
					oDatePicker = oController.byId("datePicker"),
					oLabel = oController.byId("dialogLabel");
				var oParameter = aParameter[oController.iParameterIndex];
				if (oParameter.ControlType && oParameter.ControlType === "DatePicker") {
					if (oParameter.Mandatory && !oDatePicker.getValue()) {
						if (oDatePicker.setValueState) {
							oDatePicker.setValueState(sap.ui.core.ValueState.Error);
						}
						return;
					}

					oController.aTempParameter[oController.iParameterIndex] = {};
					oController.aTempParameter[oController.iParameterIndex].Selection = oDatePicker.getValue();
					oController.aTempParameter[oController.iParameterIndex].SelectionString = oDatePicker.getValue();
					oController.aTempParameter[oController.iParameterIndex].Key = oParameter.Key;
				} else {
					var oListBox = oController.byId("listBox");
					var fnStoreParameter = function(oParameter) {
						var bStored = true;
						var aSelectedItems = oListBox.getSelectedItems();
						if (oParameter.Mandatory && aSelectedItems.length === 0) {
							oListBox.addStyleClass("sapUiInoListBoxErr");
							bStored = false;
						} else {
							var aParameterKeys = [];
							var aParameterNames = [];
							jQuery.each(aSelectedItems, function(iIndex, oItem) {
								aParameterKeys.push(oItem.getKey());
								aParameterNames.push(oItem.getText().trim());
							});

							var sSelectionString = aParameterNames.join(", ");
							oController.aTempParameter[oController.iParameterIndex] = {};
							oController.aTempParameter[oController.iParameterIndex].Selection = aParameterKeys;
							oController.aTempParameter[oController.iParameterIndex].SelectionString = sSelectionString;
							oController.aTempParameter[oController.iParameterIndex].Key = oParameter.Key;
						}
						return bStored;
					};
					if (!fnStoreParameter(aParameter[oController.iParameterIndex])) {
						return;
					}
					if ((aParameter && aParameter.length > 1 && oListBox.getModel().sServiceUrl.indexOf("analytics.xsodata") < 0) || (aParameter &&
						aParameter.length === 1 && aParameter[0].Key !== "CAMPAIGN_ID")) {
						var oChangeModel = new sap.ui.model.odata.v2.ODataModel(Configuration.getBackendRootURL() + "/" + (oConfiguration.ODataPath ||
							Configuration.getApplicationPath("sap.ino.config.URL_PATH_OD_ANALYTICS")), {
							disableHeadRequestForToken: true
						});
						oChangeModel.attachBatchRequestCompleted(function() {
							oListBox.setBusy(false);
						});
						if (oListBox.getBindingInfo("items").path.indexOf("AuthCampaignReports") > -1) {
							oListBox.removeAllItems();
							oListBox.setModel(null);
							oListBox.mBindingInfos.items.path = "";
						}
						oListBox.setModel(oChangeModel);
					}
					oListBox.setBusy(true);
				}
				oController.iParameterIndex += 1;
				oParameter = aParameter[oController.iParameterIndex];
				if (!oParameter) {
					oController._goNext(null, aParameter[oController.iParameterIndex]);
					return;
				}

				oLabel.setText(oController.getText(oParameter.DisplayName));
				oLabel.setRequired(oParameter.Mandatory || false);
				oController.getModel("objectContext").setProperty("/listBoxVisible", false);
				oController.getModel("objectContext").setProperty("/VBoxVisible", false);
				oController.getModel("objectContext").setProperty("/datePickerVisible", false);
				if (oParameter.ControlType && oParameter.ControlType === "DatePicker") {
					oController.getModel("objectContext").setProperty("/datePickerVisible", true);
					oController._goNext(null, aParameter[oController.iParameterIndex]);
					if (oDatePicker) {
						var sDatePickerValue = "";
						if (oController.aTempParameter && oController.aTempParameter[oController.iParameterIndex]) {
							sDatePickerValue = oController.aTempParameter[oController.iParameterIndex].Selection;
						}
						oDatePicker.setValue(sDatePickerValue);
						if (oDatePicker.setValueState) {
							oDatePicker.setValueState(sap.ui.core.ValueState.None);
						}
					}
				} else {
					oController.getModel("objectContext").setProperty("/listBoxVisible", true);
					oController._goNext(oController.fnBindData, aParameter[oController.iParameterIndex]);
				}
			};
		},

		_goNext: function(fnBind, oParameter) {
			var oController = this,
				oDialog = oController.getParameterDialog(),
				oConfiguration = oController.oConfiguration;
			var oParameters = oConfiguration.Parameters;
			var aParameter = jQuery.map(oParameters, function(value) {
				return [value];
			});
			if (oController.iParameterIndex === aParameter.length) {
				for (var i = 0; i < aParameter.length; i++) {
					aParameter[i].Selection = oController.aTempParameter[i].Selection;
					aParameter[i].SelectionString = oController.aTempParameter[i].SelectionString;
				}
				oController.iParameterIndex = 0;
				oDialog.close();

				oController.freshViews(oConfiguration.SelectedView);
			} else {
				if (oController.iParameterIndex === aParameter.length - 1) {
					oController.byId("parameterbutton").setText(oController.getText("BO_ANA_BUT_OK"));
				}
				if (fnBind) {
					fnBind.call(oController, oParameter);
				}
			}
		},

		getReportParameter: function() {
			var oConfiguration = this.oConfiguration,
				oController = this;
			if (!oConfiguration.Parameters) {
				return;
			}
			var oDialog = oController.getParameterDialog();
			if (oDialog && oDialog.isOpen()) {
				if (ReportUtil.checkMandatoryParameters(oConfiguration)) {
					oDialog.close();
				}
			}
			oController.getModel("objectContext").setProperty("/listBoxVisible", false);
			oController.getModel("objectContext").setProperty("/datePickerVisible", false);
			oController.getModel("objectContext").setProperty("/VBoxVisible", true);
			var oBtnNext = oController.byId("parameterbutton");
			// 			oBtnNext.removePress();
			oController.iParameterIndex = oController.iParameterIndex || 0;
			oController.aTempParameter = oController.aTempParameter || [];
			var oParameters = oConfiguration.Parameters;
			var aParameter = jQuery.map(oParameters, function(value) {
				return [value];
			});
			var oParameter = aParameter[oController.iParameterIndex];
			if (oParameter.ControlType && oParameter.ControlType === "DatePicker") {
				oController.getModel("objectContext").setProperty("/datePickerVisible", true);
				oDialog.open();
			} else {
				var oLabel = oController.byId("dialogLabel");
				oLabel.setText(oController.getText(oParameter.DisplayName));
				oLabel.setRequired(oParameter.Mandatory || false);
				oController._setListBox(oConfiguration);
			}
			oBtnNext.setText(aParameter.length > 1 ? oController.getText("BO_ANA_BUT_NEXT") : oController.getText("BO_ANA_BUT_OK"));
			if (!oController.hasNextBtnEvent) {
				oController.hasNextBtnEvent = true;
				oBtnNext.attachPress(oController._nextPress());
				oController._bindCancelBtn();
			}
		},

		getParameterDialog: function() {
			if (!this._oParameterDialog) {
                this.hasNextBtnEvent = false;
				this._oParameterDialog = this.createFragment("sap.ino.vc.analytics.fragments.ParameterDialog");
				this.getView().addDependent(this._oParameterDialog);
			}
			return this._oParameterDialog;
		},

		onFilter: function() {
			this.getReportParameter();
		},
		onShowFilter: function(oEvent) {
			if (!this._oPopover) {
				this._oPopover = this.createFragment("sap.ino.vc.analytics.fragments.Popover");
				this.getView().addDependent(this._oPopover);
			}

			if (this._oPopover.isOpen()) {
				this._oPopover.close();
			} else {
				this._oPopover.destroyContent();

				var oController = this;
				var oLayout = new VerticalLayout({
					width: "500px"
				});
				var oParameters = this.oConfiguration.Parameters;
				if (oParameters) {
					var bFirstParameter = true;
					jQuery.each(oParameters, function(iIndex, oParameter) {
						if (oParameter.SelectionString) {
							var aSelection = oParameter.SelectionString.split(",");
							var iLength = aSelection.length;
							for (var i = 0; i < iLength; i++) {
								if (bFirstParameter) {
									oLayout.addContent(oController.createFilterRow("{i18n>BO_ANA_FLD_SELECT_PARAMETER}"));
									bFirstParameter = false;
								}
								if (!i) {
									oLayout.addContent(oController.createFilterRow(
										"{i18n>" + oParameter.DisplayName + "}",
										aSelection[i]));
								} else {
									oLayout.addContent(oController.createFilterRow(
										undefined,
										aSelection[i]));
								}

							}
						}
					});
				}
				var oViewFilter = ReportUtil.getViewConfiguration(this.oConfiguration).FilterText;
				if (oViewFilter) {
					oLayout.addContent(oController.createFilterRow("{i18n>BO_ANA_FLD_LOCAL_VIEW_FILTER}"));
					jQuery.each(oViewFilter, function(sKey, sFilterValue) {
						oLayout.addContent(oController.createFilterRow(sKey, sFilterValue));
					});
				}

				if (oLayout.getContent().length === 0) {
					oLayout.addContent(oController.createFilterRow("{i18n>BO_ANA_FLD_NO_FILTER_SET}"));
				}

				this._oPopover.addContent(oLayout);

				var oButton = oEvent.getSource();
				jQuery.sap.delayedCall(0, this, function() {
					this._oPopover.openBy(oButton);
				});
			}
		},

		onAfterShow: function() {
			//check parameter
			if (this.oConfiguration && !ReportUtil.checkMandatoryParameters(this.oConfiguration)) {
				this.getReportParameter();
			}
		},

		onAfterHide: function() {
			var listBox = this.byId("listBox");
			if (listBox) {
				listBox.setModel(null);
			}
			this.oConfiguration = null;
			//because sometimes onroutematch excute after than onaftershow
			if (this._oParameterDialog) {
				this.getView().removeDependent(this._oParameterDialog);
				this._oParameterDialog.destroy();
				this._oParameterDialog = null;
			}
		},

		createFilterRow: function(sDimension, sValue) {
			var oDimensionLabel;
			if (sDimension) {
				oDimensionLabel = new Label({
					text: sDimension,
					width: "150px"
				});
			}
			var oValueLabel;
			if (sValue) {
				oValueLabel = new Label({
					text: sValue,
					width: "250px"
				});
			} else {
				oDimensionLabel.setDesign(LabelDesign.Bold);
				return new HorizontalLayout({
					content: [new FlexBox({
						alignItems: "Center",
						height: "40px",
						width: "150px",
						items: [oDimensionLabel]
					})]
				});
			}
			return new HorizontalLayout({
				content: [new FlexBox({
						alignItems: "Center",
						height: "40px",
						width: "150px",
						items: [oDimensionLabel]
					}),
				new FlexBox({
						alignItems: "Center",
						height: "40px",
						width: "250px",
						items: [oValueLabel]
					})]
			});
		},
		resetPendingChanges: function() {
			var oModel = this.getObjectModel();
			if (oModel && oModel.hasPendingChanges()) {
				oModel.revertChanges();
			}
			oModel.revertChanges();
			this._oReset = true;
		},
		hasPendingChanges: function() {
			if (this._oReset === true) {
				this._oReset = false;
				return false;
			}
			if (!this.oSmartChart || !this.oSmartTable) {
				return false;
			}
			if (!this.getObjectModel().getConfiguration()) {
				return false;
			}

			if (this.getObjectModel().getKey() < 0) {
				if (this.oConfiguration.Parameters && this.oConfiguration.Parameters.Campaign.Mandatory) {
					var boolResult = !!this.oConfiguration.Parameters.Campaign.Selection[0];
					return boolResult;
				} else {
					if (this.getObjectModel().getConfiguration().Description) {
						delete this.getObjectModel().getConfiguration().Description;
					}
					if (this.getObjectModel().getConfiguration().Title) {
						delete this.getObjectModel().getConfiguration().Title;
					}
				}
			}

			var vConfiguration = this.getObjectModel().getConfiguration();
			if (vConfiguration.Parameters && typeof(vConfiguration.Parameters.Campaign.Selection[0]) === "number") {
				vConfiguration.Parameters.Campaign.Selection[0] = vConfiguration.Parameters.Campaign.Selection[0].toString();
			}

			if (JSON.stringify(vConfiguration) !== JSON.stringify(this.oConfiguration)) {
				return true;
			}

			var currentChartType, currentDimensions, currentMeasures;
			var oCurrentVariant = this.oSmartChart.fetchVariant();
			if (!this._oSeletedTableView) {
				if (!oCurrentVariant || !oCurrentVariant.dimeasure) {
					currentChartType = this.sChartType;
					currentDimensions = this.aDimensions;
					currentMeasures = this.aMeasures;
				} else {
					currentChartType = "viz/" + this._formatChartType(oCurrentVariant.dimeasure.chartTypeKey);
					currentDimensions = [];
					currentMeasures = [];

					jQuery.each(oCurrentVariant.dimeasure.dimeasureItems, function(iIndex, indexDimeasure) {
						if (!indexDimeasure.visible) {
							return true;
						} else {
							if (indexDimeasure.role.indexOf("axis") >= 0) {
								currentMeasures.push(indexDimeasure.columnKey);
							} else {
								if (indexDimeasure.role === "category" || indexDimeasure.role === "series") {
									currentDimensions.push(indexDimeasure.columnKey);
								}
							}
						}
					});
				}
			} else {
				var oCurrentTableVariant = this.oSmartTable.fetchVariant();
				if (!oCurrentTableVariant || !oCurrentTableVariant.columns) {
					currentChartType = this.sChartType;
					currentDimensions = this.aDimensions;
					currentMeasures = this.aMeasures;
				} else {

					currentChartType = this.sChartType;
					currentDimensions = [];
					currentMeasures = [];

					var oCurrentTable = this.oSmartTable.getTable();
					var oTableColumns = oCurrentTable.getColumns();
					var oCurrentChart = this.oSmartChart.getChart();
					var aDimensions = oCurrentChart.getDimensions();
					var aMeasures = oCurrentChart.getMeasures();
					jQuery.each(oTableColumns, function(index, oColumn) {
						if (!oColumn.getVisible()) {
							return true;
						} else {
							jQuery.each(aDimensions, function(iIndex, dimension) {
								if (dimension.getName() === oColumn.getLeadingProperty()) {
									currentDimensions.push(dimension.getName());
								}
							});
							jQuery.each(aMeasures, function(iIndex, measure) {
								if (measure.getName() === oColumn.getLeadingProperty()) {
									currentMeasures.push(measure.getName());
								}

							});
						}
					});
				}
			}

			var oChartView = this.getObjectModel().getConfiguration().Views[this.iSelectedView];
			if (oChartView.Chart.Type !== currentChartType || JSON.stringify(oChartView.Dimensions) !== JSON.stringify(currentDimensions) ||
				JSON.stringify(oChartView.Measures) !== JSON.stringify(currentMeasures)) {
				return true;
			}

			return false;
		},

		storeConfiguration: function() {
			var currentChartType, currentDimensions, currentMeasures;
			var oCurrentVariant = this.oSmartChart.fetchVariant();
			if (!this._oSeletedTableView) {
				if (!oCurrentVariant || !oCurrentVariant.dimeasure) {
					currentChartType = this.sChartType;
					currentDimensions = this.aDimensions;
					currentMeasures = this.aMeasures;
				} else {

					currentChartType = "viz/" + this._formatChartType(oCurrentVariant.dimeasure.chartTypeKey);
					currentDimensions = [];
					currentMeasures = [];
					jQuery.each(oCurrentVariant.dimeasure.dimeasureItems, function(iIndex, indexDimeasure) {
						if (!indexDimeasure.visible) {
							return true;
						} else {
							if (indexDimeasure.role.indexOf("axis") >= 0) {
								currentMeasures.push(indexDimeasure.columnKey);
							} else {
								if (indexDimeasure.role === "category" || indexDimeasure.role === "series") {
									currentDimensions.push(indexDimeasure.columnKey);
								}
							}
						}
					});
				}
			} else {
				var oCurrentTableVariant = this.oSmartTable.fetchVariant();
				if (!oCurrentTableVariant || !oCurrentTableVariant.columns) {
					currentChartType = this.sChartType;
					currentDimensions = this.aDimensions;
					currentMeasures = this.aMeasures;
				} else {

					currentChartType = this.sChartType;
					currentDimensions = [];
					currentMeasures = [];

					var oCurrentTable = this.oSmartTable.getTable();
					var oTableColumns = oCurrentTable.getColumns();
					var oCurrentChart = this.oSmartChart.getChart();
					var aDimensions = oCurrentChart.getDimensions();
					var aMeasures = oCurrentChart.getMeasures();
					jQuery.each(oTableColumns, function(index, oColumn) {
						if (!oColumn.getVisible()) {
							return true;
						} else {
							jQuery.each(aDimensions, function(iIndex, dimension) {
								if (dimension.getName() === oColumn.getLeadingProperty()) {
									currentDimensions.push(dimension.getName());
								}
							});
							jQuery.each(aMeasures, function(iIndex, measure) {
								if (measure.getName() === oColumn.getLeadingProperty()) {
									currentMeasures.push(measure.getName());
								}

							});
						}

					});

				}

				if (!oCurrentVariant || !oCurrentVariant.dimeasure) {
					this.aDimensions = currentDimensions;
					this.aMeasures = currentMeasures;

				}

			}

			var oConfiguration = this.oConfiguration;
			oConfiguration.SelectedView = this.iSelectedView;
			oConfiguration.Views[this.iSelectedView].Chart.Type = currentChartType;
			oConfiguration.Views[this.iSelectedView].Measures = currentMeasures;
			oConfiguration.Views[this.iSelectedView].Dimensions = currentDimensions;
			if (oCurrentVariant) {
				if (oCurrentVariant.filter) {
					oConfiguration.Views[this.iSelectedView].Filters = oCurrentVariant.filter.filterItems;
				}
				if (oCurrentVariant.sort) {
					oConfiguration.Views[this.iSelectedView].Sorters = oCurrentVariant.sort.sortItems;
				}
			}
		},

		onExport: function(oEvent) {
			if (this.oSmartTable.getVisible()) {
				var oViewModel = this.getModel("view");
				if (oViewModel) {
					var oListProperty = oViewModel.getProperty("/List");
					if (!oListProperty) {
						oViewModel.setProperty("/List", {});
					}
					oViewModel.setProperty("/List/HIDE_PPT_EXPORT", true);
				}
				this.onListExport(oEvent);
			} else {
				this.onChartExportSVG(oEvent);
			}
		},

		getExportControl: function() {
			return this.oSmartTable.getTable();
		},

		getExportChartControl: function() {
			return this.oSmartChart._getVizFrame();
		},

		getChartTitle: function() {
			return this.oChartPage.getText();
		},

		initFullScreen: function() {
			// only read previous setting if we already restored it
			// routing from campaign homepage to campaign homepage would not restore, as view is not hidden
			if (this._bFullscreenReset === undefined || this._bFullscreenReset === true) {
				this._bPreviouslyFullscreen = this.getFullScreen();
			}
			this.setFullScreen(true);
			this._bFullscreenReset = false;
		},

		_convertChartSetingToTable: function() {
			var result = jQuery.extend(true, {}, this.oSmartChart.fetchVariant()),
				that = this;
			var aFields = [],
				oCurrentTxtPro, sCurrentTxtPro;
			result.columns = {
				columnsItems: []
			};
			var aColumnKeys = [].concat(this.oSmartChart.getChart().getVisibleDimensions())
				.concat(this.oSmartChart.getChart().getVisibleMeasures());
			var aTableColumns = this.oSmartTable._aColumnKeys;
			jQuery.each(aColumnKeys, function(index, data) {
				oCurrentTxtPro = that.oSmartChart.getChart().getDimensionByName(data);
				if (oCurrentTxtPro) {
					sCurrentTxtPro = oCurrentTxtPro.getTextProperty();
				}
				jQuery.each(aTableColumns, function(indexTb, dataTb) {
					if (data === dataTb || (sCurrentTxtPro && sCurrentTxtPro === dataTb)) {
						result.columns.columnsItems.push({
							"columnKey": dataTb,
							"visible": true
						});
						aFields.push(dataTb);
					}
				});
			});
			delete result.dimeasure;
			this._createSmartTable(aFields.join(","));
			this.oSmartTable.applyVariant(result);
		},

		_convertTableSetingToChart: function() {
			var result = jQuery.extend(true, {}, this.oSmartTable.fetchVariant());
			result.dimeasure = {
				chartTypeKey: this.oSmartChart.getChart().getProperty("chartType"),
				dimeasureItems: []
			};
			var aColumnsItems = [].concat(this.oSmartChart.getChart().mAggregations.dimensions)
				.concat(this.oSmartChart.getChart().mAggregations.measures);
			jQuery.each(this.oSmartTable.getTable().mAggregations.columns, function(indexTb, dataTb) {
				if (dataTb.getProperty("visible")) {
					jQuery.each(aColumnsItems, function(index, data) {
						if (data.getProperty("name") === dataTb.getProperty("leadingProperty")) {
							result.dimeasure.dimeasureItems.push({
								"columnKey": dataTb.getProperty("leadingProperty"),
								"visible": true,
								"role": data.getRole()
							});
						}
					});
				}
			});
			delete result.columns;
			return result;
		}
	}));
});
}; // end of sap/ino/vc/analytics/Display.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.attachment.Attachment.controller') ) {
jQuery.sap.declare('sap.ino.vc.attachment.Attachment.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/attachment/Attachment.controller",[
    "sap/ino/vc/commons/BaseBlockController",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ino/commons/models/object/Attachment",
    "sap/ino/commons/application/Configuration",
    "sap/ino/vc/attachment/AttachmentMixin"
], function(BaseController,
	JSONModel,
	MessageToast,
	Attachment,
	Configuration,
	AttachmentMixin) {
	"use strict";

	var attachmentUploadUrl = Attachment.getEndpointURL();

	return BaseController.extend("sap.ino.vc.attachment.Attachment", jQuery.extend({}, AttachmentMixin, {

		onInit: function() {
			BaseController.prototype.onInit.apply(this, arguments);
			if (!this.getModel("local")) {
				this.setModel(new JSONModel({
					ATTACHMENT_UPLOAD_URL: attachmentUploadUrl
				}), "local");
			}
		},
		onFileRenamed: function(oEvent) {
			var that = this;
			that.getView().setBusy(true);
			var oActionRequest = Attachment.rename({
				id: oEvent.getParameter("documentId"),
				fileName: oEvent.getParameter("fileName")
			});
			oActionRequest.always(function() {
				that.getView().setBusy(false);
			});
			oActionRequest.fail(function(oResponse) {
				if (oResponse && oResponse.MESSAGES && oResponse.MESSAGES.length > 0) {
					MessageToast.show(oResponse.MESSAGES[0].MESSAGE_TEXT, {
						autoClose: false
					});
				}
			});
		},
		onAfterRendering: function() {
			this._attachmentMixinInit({
				attachmentId: "Attachments",
				updateObject: function(oObject) {

				},
				uploadSuccess: function(oObject, oResponse) {
					oObject.addAttachment({
						"CREATED_BY_NAME": Configuration.getCurrentUser().NAME,
						"ATTACHMENT_ID": oResponse.attachmentId,
						"FILE_NAME": oResponse.fileName,
						"MEDIA_TYPE": oResponse.mediaType,
						"CREATED_AT": new Date()
					});
				}
			});
		}
	}));
});
}; // end of sap/ino/vc/attachment/Attachment.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.blog.Display.controller') ) {
jQuery.sap.declare('sap.ino.vc.blog.Display.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/blog/Display.controller",[
    "sap/ino/vc/commons/BaseObjectController",
    "sap/ino/commons/models/object/Blog",
    "sap/m/MessageToast",
    "sap/ino/vc/commons/TopLevelPageFacet",
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/application/Configuration",
    "sap/ino/commons/formatters/BaseFormatter",
    "sap/ino/vc/commons/mixins/TagCardMixin",
    "sap/ino/vc/commons/mixins/FollowMixin"
], function(BaseController, Blog, MessageToast, TopLevelPageFacet, JSONModel, Configuration, BaseFormatter, TagCardMixin, FollowMixin) {
	"use strict";

	return BaseController.extend("sap.ino.vc.blog.Display", jQuery.extend({}, TopLevelPageFacet, TagCardMixin, FollowMixin, {
		routes: ["blog-display"],

		onInit: function() {
			BaseController.prototype.onInit.apply(this, arguments);
			this.setViewProperty("/EDIT", false);
		},

		onRouteMatched: function() {
			BaseController.prototype.onRouteMatched.apply(this, arguments);
			this.setHelp("CAMPAIGN_BLOG_MODIFY");
		},

		createObjectModel: function(vObjectKey) {
			var oSettings = {
				nodes: ["Root"],
				actions: ["modify", "del", "unPublish"],
				continuousUse: true,
				readSource: {
					model: this.getDefaultODataModel()
				}
			};
			var oModel = new Blog(vObjectKey, oSettings);
			oModel.setProperty("/InitRefObjectId", vObjectKey);
			return oModel;
		},

		getODataEntitySet: function() {
			// can be redefined if OData Model is needed;
			return "CampaignBlogsFull";
		},

		onEdit: function() {
			var oCurrrentModel = this.getObjectModel();
			this.navigateTo("blog-edit", {
				id: oCurrrentModel.getKey()
			});
		},
		onOpenCreator: function(oEvent) {
			var oSource = oEvent.getSource();
			var iIdentityId = oSource.getBindingContext("data").getProperty("CREATED_BY_ID");
			if (!this.oIdentityCardView) {
				this.oIdentityCardView = sap.ui.xmlview({
					viewName: "sap.ino.vc.iam.IdentityCard"
				});
				this.getView().addDependent(this.oIdentityCardView);
			}
			this.oIdentityCardView.getController().open(oSource, iIdentityId);
		},
		/**
		 * Cancels object editing and navigates back
		 */
		onCancel: function() {
			// ask the user if the pending changes should be thrown away => during navigation
			//this.resetPendingChanges();
			this.navigateBack();
		},

		onPublish: function() {
			this._executeAction("majorPublishSubmit");
		},

		onPublishAction: function(oEvent) {
			var sItem = oEvent.getParameter("item");
			if (!sItem) {
				return;
			}
			this._executeAction(sItem.getProperty("key") || "publishSubmit");
		},

		onUnPublish: function() {
			this._executeAction("unPublishSubmit");
		},

		onCampaignPressed: function(oEvent) {
			// prevent href
			oEvent.preventDefault();

			var iId = this.getObjectModel().getProperty("/CAMPAIGN_ID");
			this.navigateTo("campaign", {
				id: iId
			});
		},

		onImgPressed: function(oEvent) {
			sap.m.URLHelper.redirect(oEvent.oSource.getProperty("src"), true);
		},

		onIconPressed: function(oEvent) {
			var oItemList = oEvent.oSource.oParent.getItems();
			if (oItemList && oItemList.length >= 2) {
				sap.m.URLHelper.redirect(oItemList[2].getProperty("href"), true);
			}
		},

		showPopupTagCard: function(oEvent) {
			this._bIsTokenPressed = true;
			if (!this._oPopover) {
				this._oPopover = sap.ui.xmlfragment("sap.ino.vc.tag.fragments.TagCardPopover", this);
				this.getView().addDependent(this._oPopover);
			}
			var oToken = oEvent.getSource();
			var sPath = "/SearchTagsAll(searchToken='',ID=" + oToken.getKey() + ")";
			var oDatamodel = this.getModel("data");
			var that = this;
			oDatamodel.read(sPath, {
				async: true,
				success: function(oData) {
					var oModel = new JSONModel();
					oModel.setData(oData);
					that._oPopover.setModel(oModel, "Tag");
					jQuery.sap.delayedCall(0, that, function() {
						that._oPopover.openBy(oToken);
					});
				}
			});
		},

		_executeAction: function(sAction) {
			var oController = this;
			oController.resetClientMessages();
			oController.executeObjectAction(sAction);
		},

		iconUrl: function(fileName) {
			var e = this._splitFilename(fileName).extension;
			if (jQuery.type(e) === 'string') {
				e = e.toLowerCase();
			}
			switch (e) {
				case '.bmp':
				case '.jpg':
				case '.jpeg':
				case '.png':
					return "sap-icon://camera";
				case '.csv':
				case '.xls':
				case '.xlsx':
					return 'sap-icon://excel-attachment';
				case '.doc':
				case '.docx':
				case '.odt':
					return 'sap-icon://doc-attachment';
				case '.pdf':
					return 'sap-icon://pdf-attachment';
				case '.ppt':
				case '.pptx':
					return 'sap-icon://ppt-attachment';
				case '.txt':
					return 'sap-icon://document-text';
				default:
					return 'sap-icon://document';
			}
		},
		_splitFilename: function(s) {
			var r = {};
			var n = s.split('.');
			if (n.length === 1) {
				r.extension = '';
				r.name = n.pop();
				return r;
			}
			r.extension = '.' + n.pop();
			r.name = n.join('.');
			return r;
		}
	}));
});
}; // end of sap/ino/vc/blog/Display.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.blog.Modify.controller') ) {
jQuery.sap.declare('sap.ino.vc.blog.Modify.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.Token'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.HTML'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/blog/Modify.controller",[
    "sap/ino/vc/commons/BaseObjectModifyController",
    "sap/m/Token",
    "sap/ino/commons/models/object/Blog",
    "sap/ino/vc/commons/TopLevelPageFacet",
    "sap/ui/core/ResizeHandler",
    "sap/ui/Device",
    "sap/ui/core/HTML",
    "sap/ino/commons/models/object/Attachment",
    "sap/m/MessageToast",
    "sap/ino/commons/application/Configuration"],
	function(BaseController, Token, Blog, TopLevelPageFacet, ResizeHandler, Device, HTML, Attachment,
		MessageToast, Configuration) {

		"use strict";
		return BaseController.extend("sap.ino.vc.blog.Modify", jQuery.extend({}, TopLevelPageFacet, {
			routes: ["blog-edit", "blog-create"],

			onInit: function() {
				BaseController.prototype.onInit.apply(this, arguments);
				this._dViewShown = jQuery.Deferred();
				this.setViewProperty("/EDIT", true);
				this.setViewProperty("/ATTACHMENT_UPLOAD_URL", Attachment.getEndpointURL());
				this._bindingTags();
			},

			onRouteMatched: function() {
				var oController = this;
				BaseController.prototype.onRouteMatched.apply(oController, arguments);
				oController._destroyRTE();
				jQuery.when(this._dViewShown).done(function() {
					oController._initRTE();
				});
				oController.setHelp("CAMPAIGN_BLOG_MODIFY");
			},

			createObjectModel: function(vObjectKey, sRoute, oRouteArgs) {
				var oKey = vObjectKey;
				var oSettings = {
					nodes: ["Root"],
					actions: ["submit", "publish", "majorPublishSubmit", "publishSubmit", "del"],
					continuousUse: true,
					concurrencyEnabled: true,
					readSource: {
						model: this.getDefaultODataModel()
					}
				};
				if (!oKey) {
					var mQuery = oRouteArgs["?query"] || {};
					try {
						oKey = {
							OBJECT_TYPE_CODE: "CAMPAIGN",
							OBJECT_ID: mQuery.campaign ? parseInt(mQuery.campaign, 10) : 0,
							CAMPAIGN_ID: mQuery.campaign ? parseInt(mQuery.campaign, 10) : 0,
							NAME: mQuery.title,
							DESCRIPTION: mQuery.description,
							Tags: mQuery.tags && mQuery.tags.split(",")
						};
					} catch (oError) {
						jQuery.sap.log.error("Failed parsing creation arguments", oError, "sap.ino.vc.blog.Modify.controller");
					}
				}
				return new Blog(oKey, oSettings);
			},

			onAfterHide: function() {
				this._dViewShown = jQuery.Deferred();
				this._destroyRTE();
			},

			onCampaignPressed: function() {
				//OBJECT_ID
				var iId = this.getObjectModel().getProperty("/CAMPAIGN_ID");
				this.navigateTo("campaign", {
					id: iId
				}, true);
			},

			onFileUploaderChange: function(oEvent) {
				var oFileUploader = oEvent.getSource();
				var aFile = oEvent.getParameter("files");
				oFileUploader.setBusy(true);
				Attachment.prepareFileUploader(oFileUploader, aFile);
			},

			onFileUploaderComplete: function(oEvent) {
				var oResponse = Attachment.parseUploadResponse(oEvent.getParameter("responseRaw"));
				var oFileUploader = oEvent.getSource();
				if (oResponse) {
					var oObject = this.getObjectModel();
					oObject.getMessageParser().parse(oResponse);
					if (oResponse.success) {
						oObject.setTitleImage({
							"ATTACHMENT_ID": oResponse.attachmentId,
							"FILE_NAME": oResponse.fileName,
							"MEDIA_TYPE": oResponse.mediaType
						});
					} else {
						MessageToast.show(this.getText("BLOG_OBJECT_MSG_TITLE_IMAGE_FAILED"));
					}
				} else {
					MessageToast.show(this.getText("BLOG_OBJECT_MSG_TITLE_IMAGE_ERROR"));
				}
				oFileUploader.setBusy(false);
				oFileUploader.clear();
			},

			onTagChanged: function(oEvent) {
				var oMultiInput = oEvent.getSource();
				var sValue = oEvent.getParameter("value");
				if (!sValue) {
					return;
				}
				if (!oEvent.getSource().getAggregation("tokenizer")) {
					return;
				}
				var aTokens = oEvent.getSource().getAggregation("tokenizer").getAggregation("tokens");
				var aTag = sValue.split(",");
				aTag.forEach(function(sTag) {
					sTag = sTag.trim();
					if (sTag === "") {
						return;
					}

					var oToken = new Token({
						text: sTag
					});
					// This is an application internal flag to handle
					// model update correctly
					var bTokenExisted;
					aTokens.forEach(function(oToken) {
						if (oToken.getProperty("text") === sTag) {
							bTokenExisted = true;
							return;
						}
					});
					if (!bTokenExisted) {
						oToken.bApplicationCreated = true;
						oMultiInput.addToken(oToken);
					}
				});
				oMultiInput.setValue("");
			},

			onTagTokenChanged: function(oEvent) {
				var oMultiInput = oEvent.getSource();

				if (!oEvent.getSource().getAggregation("tokenizer")) {
					return;
				}

				oMultiInput.setValue("");
			},

			onSave: function() {
				this._executeAction("submit");
			},

			onPublish: function() {
				this._executeAction("majorPublishSubmit");
			},

			onPublishAction: function(oEvent) {
				var sItem = oEvent.getParameter("item");
				if (!sItem) {
					return;
				}
				this._executeAction(sItem.getProperty("key") || "publishSubmit");
			},

			onUnPublish: function() {
				this._executeAction("unPublishSubmit");
			},

			onAfterShow: function() {
				this._dViewShown.resolve();
			},

			_executeAction: function(sAction) {
				var oController = this;
				oController.resetClientMessages();
				var oCurrrentModel = oController.getObjectModel();
				var isNew = oCurrrentModel.isNew();
				this._CheckContentAttachments(oCurrrentModel);
				var oModifyRequest = oController.executeObjectAction(sAction);
				oModifyRequest.done(function() {
					if (isNew && sAction === "submit") {
						oController.navigateTo("blog-edit", {
							id: oCurrrentModel.getKey()
						}, true);
					} else {
						oController.navigateTo("blog-display", {
							id: oCurrrentModel.getKey()
						}, true);
					}
				});
			},

			_initDetails: function() {
				this._sTitleText = undefined;
				this._sDescriptionText = undefined;
				this._aTags = undefined;
			},

			_bindingTags: function() {
				this.addMultiInputHandling(this.byId("Tags"), {
					childNodeName: "Tags",
					childNodeNameSingular: "Tag",
					suggestion: {
						key: "NAME",
						text: "NAME",
						path: "data>/SearchTagsParams(searchToken='$suggestValue')/Results",
						filter: [],
						sorter: []
					},
					token: {
						key: "NAME",
						text: "NAME"
					}
				});
			},

			// resizes the height of the richtext editor
			_onResize: function(oEvent) {
				var oView;
				var iHeight;
				var iOldHeight;
				if (oEvent) {
					oView = oEvent.control;
					iHeight = oEvent.size.height;
					iOldHeight = oEvent.oldSize.height;
				} else {
					oView = this.getView();
					iHeight = oView.$().height();
					iOldHeight = 0;
				}

				var oRTE = oView.getController()._getRTE();
				if (!oRTE || oRTE.getMetadata().getName() !== "sap.ino.controls.RichTextEditor") {
					return;
				}

				if (Math.abs(iHeight - iOldHeight) > 0) {
					var $Container = oView.$().find(".sapInoBlogModify");
					// this requires px values
					var iMin = parseInt($Container.css("min-height"), 10) || 400;
					var iMax = parseInt($Container.css("max-height"), 10) || 600;

					// the surounding container give only little possibilities to get the correct height
					// so we substract from the whole view the heights of the toolbar, header, other fields, ...
					iHeight = iHeight - 600;
					iHeight = iHeight < iMin ? iMin : iHeight;
					iHeight = iHeight > iMax ? iMax : iHeight;
					oRTE.setHeight(iHeight + "px");
				}
			},

			_initRTE: function() {
				var that = this;
				if (!Device.system.desktop) {
					return;
				}
				this._destroyRTE();
				// If it is not editable an HTML element is used as RTE otherwise updates
				// descriptions  also in read-only mode which leads to wrong data-loss handling
				// and the situation that blogs with non-editable descriptions cannot be saved any more
				var oRichTextContainer = this.byId("rteContainer");
				var oRichTextControl;
				that._TextControlID = "richtextBlogControl_" + new Date().getTime();

				// Otherwise there the RTE is not rendered properly when the application is launched uncached
				jQuery.sap.require("sap.ino.controls.RichTextEditor");
				oRichTextControl = new sap.ino.controls.RichTextEditor({
					id: this.createId(that._TextControlID),
					width: "100%",
					editable: true,
					editorType: "TinyMCE4",
					height: "300px",
					showGroupInsert: true,
					showGroupLink: true,
					showGroupFont: true,
					beforeEditorInit: function(c) {
						c.mParameters.configuration.plugins = c.mParameters.configuration.plugins.replace("image,", "");
						c.mParameters.configuration.plugins = c.mParameters.configuration.plugins.replace("powerpaste", "paste,imagetools");
						c.mParameters.configuration.paste_data_images = true;
						c.mParameters.configuration.automatic_uploads = true;
						c.mParameters.configuration.images_upload_handler = function(oFile, success, failure) {
							var oFileToUpload = oFile.blob();
							//oFileToUpload.name = "image-" + (new Date()).getTime() + Math.floor(Math.random() * 1000) + "." + oFileToUpload.type.substr(oFileToUpload.type.lastIndexOf("/") + 1);
							if (oFileToUpload) {
								Attachment.uploadFile(oFileToUpload).done(function(oResponse) {
									var oBlog = that.getObjectModel();
									success(Configuration.getAttachmentDownloadURL(oResponse.attachmentId));
									oBlog.setProperty("/DESCRIPTION", jQuery.sap._sanitizeHTML(tinymce.activeEditor.getContent()));
								}).fail(function() {
									failure();
									MessageToast.show(that.getText("IDEA_OBJECT_MSG_TITLE_IMAGE_CROP_FAILED"));
								});
							}
						};
						c.mParameters.configuration.paste_postprocess = function(editor, fragment) {
							tinymce.activeEditor.uploadImages();
						};
					}
				});

				/*	oRichTextControl.addPlugin("paste");
				    oRichTextControl.attachBeforeEditorInit(function(c) {
					c.mParameters.configuration.paste_data_images = true;
				});*/
				oRichTextControl.attachReady(function onRTEReady() {
					this.bindProperty("value", {
						model: "object",
						path: "DESCRIPTION"
					});
					that._onResize();
					if (!this._sResizeRegId) {
						this._sResizeRegId = ResizeHandler.register(that.getView(), that._onResize);
					}
				});
				setTimeout(function() {
					oRichTextContainer.destroyItems();
					oRichTextContainer.addItem(oRichTextControl);
				}, 500);
			},

			_getRTE: function() {
				return this.byId(this._TextControlID);
			},

			_destroyRTE: function() {
				// Desktop: we use the RTE and need to calculate the best height
				if (this._sResizeRegId) {
					ResizeHandler.deregister(this._sResizeRegId);
				}

				// destroy RTE  when screen is not displayed any more as it will go mad
				// when bindings change and it is not displayed (yet)
				var oRTE = this._getRTE();
				if (oRTE) {
					oRTE.destroy();
				}
			},

			alternativeBlogBy: function(vBy, vIdentity, vAlternativeIdentity, vDate, vAlternativeDate, sStatusCode) {
				if (sStatusCode !== "sap.ino.config.BLOG_PUBLISHED") {
					return this.formatter.alternativeBy(vBy, vIdentity, vAlternativeIdentity, vDate, vAlternativeDate);
				} else {
					return this.formatter.alternativeBy(vBy, vIdentity, vAlternativeIdentity, vAlternativeDate, vDate);
				}
			},

			_CheckContentAttachments: function(oModel) {
				var content = oModel.getProperty("/DESCRIPTION"),
					aContentAttachments = [],
					aNewContentAttachments = [],
					aOriginContentAttachments = oModel.getProperty("/ContentAttachments");
				if (!content) {
					return;
				}
				var reg = new RegExp("<img.*attachment_download\.xsjs/(\\d+)\"", "g"),
					result;
				do {
					result = reg.exec(content);
					if (result && result.length === 2) {
						aContentAttachments.push(result[1]);
					}
				}
				while (result !== null);
				var tag = false,
					oTempAttachment = void 0;
				for (var i = 0; i <= aContentAttachments.length - 1; i++) {
					tag = false;
					oTempAttachment = undefined;
					for (var j = 0; j <= aOriginContentAttachments.length - 1; j++) {
						if (Number(aContentAttachments[i]) === aOriginContentAttachments[j].ATTACHMENT_ID) {
							tag = true;
							oTempAttachment = aOriginContentAttachments[j];
							break;
						}
					}
					if (tag) {
						aNewContentAttachments.push(oTempAttachment);
					} else {
						aNewContentAttachments.push({
							ID: oModel.getNextHandle(),
							ATTACHMENT_ID: Number(aContentAttachments[i])
						});
					}
				}
				oModel.setProperty("/ContentAttachments", aNewContentAttachments);
			}

		}));
	});
}; // end of sap/ino/vc/blog/Modify.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.campaign.CampaignCommentList.controller') ) {
jQuery.sap.declare('sap.ino.vc.campaign.CampaignCommentList.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.ViewType'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/campaign/CampaignCommentList.controller",[
    "sap/ino/vc/commons/BaseObjectModifyController",
    "sap/ino/commons/models/object/Campaign",
    "sap/ino/vc/commons/TopLevelPageFacet",
    "sap/ino/commons/application/WebAnalytics",
    "sap/ui/core/mvc/ViewType"
], function (Controller, Campaign, TopLevelPageFacet, WebAnalytics, ViewType) {
    "use strict";
    
    return Controller.extend("sap.ino.vc.campaign.CampaignCommentList", jQuery.extend({}, TopLevelPageFacet, {
        
        routes : ["campaign-comment"],
        
        onInit: function () {
            Controller.prototype.onInit.apply(this, arguments);
        },
        
        onRouteMatched : function(oEvent) {
            var that = this;
            var oArguments = oEvent.getParameter("arguments");
            var iCampaignId = parseInt(oArguments.id, 10);
            
            this.bindDefaultODataModel(iCampaignId, function() {
                var oCampaign = that.getDefaultODataModelEntity(iCampaignId);
                if (oCampaign) {
                    that.updateBackgroundColor(oCampaign.COLOR_CODE);
                    that.setBackgroundImages(oCampaign.CAMPAIGN_BACKGROUND_IMAGE_ID, oCampaign.CAMPAIGN_SMALL_BACKGROUND_IMAGE_ID);
                }
            });
            
            var oCommentView = this.byId("campaignCommentListComment");
            oCommentView.data("object_id", iCampaignId);
            oCommentView.getController()._commentMixinResetCommentModel();
        },
        
        hasBackgroundImage: function(){
            return true;
        },
        
        getODataEntitySet: function () {
            return "CampaignFull";
        }
        
    }));
});
}; // end of sap/ino/vc/campaign/CampaignCommentList.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.campaign.CampaignFeedList.controller') ) {
jQuery.sap.declare('sap.ino.vc.campaign.CampaignFeedList.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.ViewType'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/campaign/CampaignFeedList.controller",[
    "sap/ino/vc/commons/BaseObjectModifyController",
    "sap/ino/commons/models/object/Campaign",
    "sap/ino/vc/commons/TopLevelPageFacet",
    "sap/ino/commons/application/WebAnalytics",
    "sap/ui/core/mvc/ViewType",
    "sap/ino/vc/follow/mixins/FeedsMixin"
], function (Controller, Campaign, TopLevelPageFacet, WebAnalytics, ViewType, FeedsMixin) {
    "use strict";
    
    return Controller.extend("sap.ino.vc.campaign.CampaignFeedList", jQuery.extend({}, TopLevelPageFacet, FeedsMixin, {
        
        routes : ["campaign-feeds"],
        
        onInit: function () {
            Controller.prototype.onInit.apply(this, arguments);
        },
        
        getCurrentView: function() {
			var aContent = this.getView().getContent();
			var oPage = (aContent && aContent.length > 0) ? aContent[1] : undefined;
			if (oPage) {
				if (oPage.getContent().length > 0) {
					return oPage.getContent()[0];
				}
			}
			return undefined;
		},
        
        onRouteMatched : function(oEvent) {
            var that = this;
            var oArguments = oEvent.getParameter("arguments");
            var iCampaignId = parseInt(oArguments.id, 10);
            
            this.bindDefaultODataModel(iCampaignId, function() {
                var oCampaign = that.getDefaultODataModelEntity(iCampaignId);
                if (oCampaign) {
                    that.updateBackgroundColor(oCampaign.COLOR_CODE);
                    that.setBackgroundImages(oCampaign.CAMPAIGN_BACKGROUND_IMAGE_ID, oCampaign.CAMPAIGN_SMALL_BACKGROUND_IMAGE_ID);
                }
            });
            
            var oCurrentView = this.getCurrentView();
			if (oCurrentView && oCurrentView.getController)  {
				var oCurrentController = oCurrentView.getController();

				if (typeof oCurrentController.onRouteMatched === "function") {
					oCurrentController.onRouteMatched(oEvent);
				}
			}
			this.setHelp("CAMPAIGN_FEED");
           
        },
        
        onRefresh: function() {
            var oCurrentView = this.getCurrentView();
			if (oCurrentView && oCurrentView.getController()) {
				var oCurrentController = oCurrentView.getController();

				if (typeof oCurrentController.onRefresh === "function") {
					oCurrentController.onRefresh();
				}
			}
        },
        
        hasBackgroundImage: function(){
            return true;
        },
        
        getODataEntitySet: function () {
            return "CampaignFull";
        }
        
    }));
});
}; // end of sap/ino/vc/campaign/CampaignFeedList.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.campaign.CampaignManagerList.controller') ) {
jQuery.sap.declare('sap.ino.vc.campaign.CampaignManagerList.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/vc/campaign/CampaignManagerList.controller",[
    "sap/ino/vc/commons/BaseObjectModifyController",
    "sap/ino/vc/commons/TopLevelPageFacet"
], function (Controller, TopLevelPageFacet) {
    "use strict";
    
    return Controller.extend("sap.ino.vc.campaign.CampaignManagerList", jQuery.extend({}, TopLevelPageFacet, {
        
        routes : ["campaign-managerlist"],
        
        onInit: function () {
            Controller.prototype.onInit.apply(this, arguments);
        },
        
        onRouteMatched : function(oEvent) {
            var oArguments = oEvent.getParameter("arguments");
            var iCampaignId = parseInt(oArguments.id, 10);
            
            this.bindDefaultODataModel(iCampaignId);
        },
        
        getODataEntitySet: function () {
            return "CampaignFull";
        }
        
    }));
});
}; // end of sap/ino/vc/campaign/CampaignManagerList.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.campaign.mixins.RegistrationMixin') ) {
jQuery.sap.declare('sap.ino.vc.campaign.mixins.RegistrationMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/campaign/mixins/RegistrationMixin",[
    "sap/ino/vc/idea/mixins/BaseActionMixin",
     "sap/ino/vc/commons/BaseController",
    "sap/ino/commons/models/aof/PropertyModel",
    "sap/m/MessageToast",
    "sap/ino/commons/models/object/Registration",
    "sap/ui/core/IconPool",
    "sap/ui/model/json/JSONModel"
], function(BaseActionMixin, BaseController, PropertyModel, MessageToast, RegistrationService, IconPool, JSONModel) {
	"use strict";

	var RegistrationMixin = function() {
		throw "Mixin may not be instantiated directly";
	};

	RegistrationMixin.Register = function(event) {
		var self = this;
		var source = event.getSource();
		var id = source.getBindingContext("data").getProperty("ID");
		var value = source.getBindingContext("data").getProperty("REGISTER_ID");
		var status = source.getBindingContext('data').getProperty('REGISTER_STATUS');
		var isAutoApprove = source.getBindingContext('data').getProperty('IS_REGISTER_AUTO_APPROVE');
		var service, text;

		if (source.setEnabled) {
			source.setEnabled(false);
		}

		if (!value) {
			service = RegistrationService.Register(value, id);
			text = 'REGISTER_MSG_REGISTER';
		} else if (status === 3) {
			service = RegistrationService.Register(null, id);
			text = 'REGISTER_MSG_REGISTER';
		} else {
			service = RegistrationService.Leave(value, id);
			text = 'REGISTER_MSG_LEAVE';
		}

		if (isAutoApprove && isAutoApprove === 1 && text !== 'REGISTER_MSG_LEAVE') {
			text = 'REGISTER_MSG_SUCCESS';
		}

		service.done(function() {
			source.setEnabled(true);
			MessageToast.show(self.getText(text));
			if (isAutoApprove && isAutoApprove === 1 && text !== 'REGISTER_MSG_LEAVE') {
				self.navigateTo('campaignlist');
				self.navigateTo("campaign", {
					id: id
				});

			}
			if (status === 2) {
				PropertyModel.invalidateCachedProperties('sap.ino.xs.object.campaign.Campaign', id);
				return self.navigateTo('campaignlist');
			}
			if (self.isGlobalSearch) {
				self.getSearchResult(self.getViewProperty("/SEARCH_QUERY"));
			}
		}).fail(function() {
			source.setEnabled(true);
			MessageToast.show(self.getText('MSG_CAMPAIGN_REGISTER_ERROR'));
		});

	};

	RegistrationMixin.Approved = function(event) {
		var self = this;
		var source = event.getSource();
		var value = source.getBindingContext("data").getProperty("REGISTER_ID");
		var service = RegistrationService.Approved(value);
		var text = 'REGISTER_MSG_APPROVED';

		if (source.setEnabled) {
			source.setEnabled(false);
		}

		service.done(function() {
			MessageToast.show(self.getText(text));
			source.setEnabled(true);
			self.bindList();

		}).fail(function() {
			MessageToast.show(self.getText('REGISTER_ERROR_MASSAGE'));
		});
	};

	RegistrationMixin.Rejected = function(event) {
		var self = this;
		var source = event.getSource();
		var value = source.getBindingContext("data").getProperty("REGISTER_ID");
		// var service = RegistrationService.Rejected(value);
		var text = 'REGISTER_MSG_REJECTED';

		var oRejectDialog = this.getRejectReasonDialog();
		var oModel = new JSONModel({
			REJECT_REASON: "",
			VALUE: value
		});
		oRejectDialog.setModel(oModel, "register");
		oRejectDialog.open();

		// if(source.setEnabled){
		//     source.setEnabled(false);
		// }

		// service.done(function(){
		//     MessageToast.show(self.getText(text));
		//     source.setEnabled(true);
		//     self.bindList();
		// }).fail(function(){
		//      MessageToast.show( self.getText('REGISTER_ERROR_MASSAGE'));
		// });

	};

	RegistrationMixin.Leave = function(event) {
		var self = this;
		var source = event.getSource();
		var value = source.getBindingContext("data").getProperty("REGISTER_ID");
		var service = RegistrationService.Leave(value);
		var text = 'REGISTER_MSG_LEAVE';

		if (source.setEnabled) {
			source.setEnabled(false);
		}

		service.done(function() {
			MessageToast.show(self.getText(text));
			source.setEnabled(true);
		}).fail(function() {
			MessageToast.show(self.getText('REGISTER_ERROR_MASSAGE'));
		});

	};

	RegistrationMixin.isVisabled = function(id, isopen, status) {
		return (!!id && !!isopen) || (!!id && !isopen && status === 2);
	};

	RegistrationMixin.isVisabledForApprove = function(status) {
		return status === 1;
	};

	RegistrationMixin.isVisabledForList = function(id, isopen, status) {

		return !!id && !!isopen && status !== 2;
	};

	RegistrationMixin.isEnabled = function(status, disabled, setting) {
		if (status !== 1) {
			if (setting === 1) {
				if (disabled === 0) {
					return true;
				} else {
					return false;
				}
			} else {
				return true;
			}
		} else {
			return false;
		}
	};

	RegistrationMixin.onApprovalListSelectionChange = function(oEvent) {
		var that = this;
		var bSelected = oEvent.getParameter("selected");
		var oSource = oEvent.getSource();
		var oData = oSource.getBindingContext("data").getObject();
		if (!this._oSelectionMap) {
			this._oSelectionMap = [];
		}
		if (!this._oSelectedCheckBox) {
			this._oSelectedCheckBox = [];
		}

		function deriveMassActionButtonEnabledStatus(_oSelectionMap) {
			var oBtnAccept = that.byId("sapInoMassRegisterAcceptBtn");
			var oBtnReject = that.byId("sapInoMassRegisterRejectBtn");
			if (oBtnAccept && oBtnReject) {
				oBtnAccept.setEnabled(_oSelectionMap.length > 0);
				oBtnReject.setEnabled(_oSelectionMap.length > 0);
			}
		}
		this.actionButtonEnabledStatus = deriveMassActionButtonEnabledStatus;

		if (bSelected) {
			this._oSelectionMap.push(oData.REGISTER_ID);
			this._oSelectedCheckBox.push(oSource);
		} else {
			var index = this._oSelectionMap.indexOf(oData.REGISTER_ID);
			this._oSelectionMap.splice(index, 1);
		}

		deriveMassActionButtonEnabledStatus(this._oSelectionMap);
	};

	RegistrationMixin.onApprovalMassAction = function(oEvent) {
		var registerIDs = this._oSelectionMap;
		var selectedCheckBox = this._oSelectedCheckBox;
		var self = this;
		var actionbtnStatus = oEvent.getSource().getCustomData();
		var sStatus = actionbtnStatus[0].getValue() * 1 ? "sap.ino.config.REGISTER_APPROVED" : "sap.ino.config.REGISTER_REJECTED";
		var text = actionbtnStatus[0].getValue() * 1 ? "OBJECT_MSG_REG_ACCEPT_SUCCESS" : "OBJECT_MSG_REG_REJECT_SUCCESS";
		var sErrorMsg = actionbtnStatus[0].getValue() * 1 ? "REGISTER_APPROVE_MSG_ERROR" : "REGISTER_REJECT_MSG_ERROR";
		// mass action handling
		var oOptions = {
			parameters: {
				ids: registerIDs,
				status: sStatus
			}
		};

		if (actionbtnStatus[0].getValue() * 1) {
			var massReq = BaseController.prototype.executeObjectAction.call(this, RegistrationService, "massUpdate", oOptions);
			massReq.done(function() {
				MessageToast.show(self.getText(text));
				self.bindList();
				self._oSelectionMap = [];
			}).fail(function() {
				MessageToast.show(self.getText(sErrorMsg));
				for (var i = 0; i < selectedCheckBox.length; i++) {
					selectedCheckBox[i].setSelected(false);
				}
			});
			registerIDs = [];
			this.actionButtonEnabledStatus.call(this, registerIDs);
		} else {
			var oRejectDialog = this.getRejectReasonDialog();
			var oModel = new JSONModel({
				REJECT_REASON: "",
				MASS_ACTION_REJECT: true
			});
			oRejectDialog.setModel(oModel, "register");
			oRejectDialog.open();
		}
	};

	RegistrationMixin.transText = function(status) {
		var text;
		switch (status) {
			case 0:
				text = 'REGISTER_TEXT_REGISTER';
				break;
			case 1:
				text = 'REGISTER_TEXT_PENDING';
				break;
			case 2:
				text = 'REGISTER_TEXT_LEAVE';
				break;
			case 3:
				text = 'REGISTER_TEXT_REGISTER';
				break;
			default:
				text = 'REGISTER_TEXT_REGISTER';
				break;
		}

		return this.getText(text);
	};

	RegistrationMixin.transTooltip = function(status, disabled, setting) {
		var text;
		if (setting === 1 && disabled === 1) {
			text = 'REGISTER_TOOLTIP_REGISTER_DISABLED';
			return this.getText(text);
		}
		switch (status) {
			case 0:
				text = 'REGISTER_TOOLTIP_REGISTER';
				break;
			case 1:
				text = 'REGISTER_TOOLTIP_PENDING';
				break;
			case 2:
				text = 'REGISTER_TOOLTIP_LEAVE';
				break;
			case 3:
				text = 'REGISTER_TOOLTIP_REGISTER';
				break;
			default:
				text = 'REGISTER_TOOLTIP_REGISTER';
				break;
		}

		return this.getText(text);
	};

	RegistrationMixin.transIcon = function(status) {
		var icon;
		switch (status) {
			case 0:
				icon = IconPool.getIconURI('register', 'InoIcons');
				break;
			case 1:
				icon = IconPool.getIconURI('pending', 'InoIcons');
				break;
			case 2:
				icon = IconPool.getIconURI('journey-depart');

				break;
			case 3:
				icon = IconPool.getIconURI('register', 'InoIcons');
				break;
			default:
				icon = IconPool.getIconURI('register', 'InoIcons');
				break;
		}
		return icon;
	};
	RegistrationMixin.getRejectReasonDialog = function() {
		if (!this._rejectReasonDialog) {
			this._rejectReasonDialog = this.createFragment("sap.ino.vc.campaign.fragments.RejectReasonDialog", this.getView().getId());
			this.getView().addDependent(this._rejectReasonDialog);
		}
		return this._rejectReasonDialog;
	};

	RegistrationMixin.onHandleRejectCancel = function(oEvent) {
		var oDialog = this.getRejectReasonDialog();
		var oModel = oDialog.getModel("register");
		oDialog.close();
	};

	RegistrationMixin.onHandleRejectOK = function(oEvent) {
		var self = this;
		var text = 'REGISTER_MSG_REJECTED';
		var oRejectDialog = this.getRejectReasonDialog();
		var oModel = oRejectDialog.getModel("register");
		var value = oModel.getProperty("/VALUE");
		var sReason = oModel.getProperty("/REJECT_REASON");
		
		oRejectDialog.setBusy(true);
		if (!oModel.getProperty("/MASS_ACTION_REJECT")) {
			var service = RegistrationService.Rejected(value, sReason);
			service.done(function() {
				MessageToast.show(self.getText(text));
				oRejectDialog.setBusy(false);
				oRejectDialog.close();
				self.bindList();
			}).fail(function() {
				oRejectDialog.setBusy(false);
				MessageToast.show(self.getText('REGISTER_ERROR_MASSAGE'));
			});
		} else {
			var registerIDs = this._oSelectionMap;
			var selectedCheckBox = this._oSelectedCheckBox;
			var sStatus = "sap.ino.config.REGISTER_REJECTED";
			var sRejectText = "OBJECT_MSG_REG_REJECT_SUCCESS";
			var sErrorMsg = "REGISTER_REJECT_MSG_ERROR";
			// mass action handling
			var oOptions = {
				parameters: {
					ids: registerIDs,
					status: sStatus,
					REASON: sReason
				}
			};
			var massReq = BaseController.prototype.executeObjectAction.call(this, RegistrationService, "massUpdate", oOptions);
			massReq.done(function() {
				MessageToast.show(self.getText(sRejectText));
				oRejectDialog.setBusy(false);
				self.bindList();
				self._oSelectionMap = [];
				oRejectDialog.close();
			}).fail(function() {
				oRejectDialog.setBusy(false);
				MessageToast.show(self.getText(sErrorMsg));
				for (var i = 0; i < selectedCheckBox.length; i++) {
					selectedCheckBox[i].setSelected(false);
				}
			});
			registerIDs = [];
			this.actionButtonEnabledStatus.call(this, registerIDs);

		}

	};
    RegistrationMixin.onRejectReasonLiveChange = function(oEvent){
        var oSource = oEvent.getSource();
        var oRejectBtn = this.byId("rejectReasonBtn");
        if(oSource.getValue().length > 0){
            oRejectBtn.setEnabled(true);
        } else {
            oRejectBtn.setEnabled(false);
        }
        
    };
	return RegistrationMixin;
});
}; // end of sap/ino/vc/campaign/mixins/RegistrationMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.comment.CommentMixin') ) {
jQuery.sap.declare('sap.ino.vc.comment.CommentMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.ViewType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/comment/CommentMixin",[
    "sap/ui/core/mvc/ViewType",
    "sap/ino/vc/commons/BaseObjectController",
    "sap/ino/commons/models/object/IdeaFollow",
    "sap/ino/commons/application/Configuration",
    "sap/ui/model/json/JSONModel"
], function(ViewType, BaseObjectController, IdeaFollow, Configuration, JSONModel) {

	"use strict";

	/*
	 * @class Mixin that handles actions for Comment and Internal Note
	 */
	var CommentMixin = function() {
		throw "Mixin may not be instantiated directly";
	};

	CommentMixin.commentMixinInit = function(oSettings) {
		this._commentMixinSettings = oSettings;
		this.setViewProperty("/USER_IMAGE_ID", this.getOwnerComponent().getCurrentUserImageId());
		this._commentMixinResetCommentModel();
	};

	CommentMixin._commentMixinResetCommentModel = function() {
		this._commentMixinSetCommentModel(null);
		this._commentMixinGetCommentModel();
	};

	CommentMixin._commentMixinInitCommentModel = function(iObjectId) {
		var oSettings = {
			continuousUse: true,
			readSource: {
				model: this.getDefaultODataModel()
			}
		};

		var sModelObjectType = this.getView().data("modelObjectType");
		jQuery.sap.require(sModelObjectType);
		var CommentModelType = jQuery.sap.getObject(sModelObjectType, 0);

		var oModel = new CommentModelType({
			OBJECT_ID: iObjectId
		}, oSettings);

		this._commentMixinSetCommentModel(oModel);
	};

	/**
	 * Sets an object to as current model, it will be set on view level and bind it in the view
	 *
	 * Afterwards you can use it on the view using the name "comment"
	 *
	 * @param oModel
	 */
	CommentMixin._commentMixinSetCommentModel = function(oModel) {
		this.getView().setModel(oModel, "comment");
	};

	/**
	 * @returns current object
	 */
	CommentMixin._commentMixinGetCommentModel = function() {
		if (!this.getView().getModel("comment")) {
			// 			var iObjectId = this.getView().data("object_id") || (this.getObjectModel() && this.getObjectModel().getProperty("/ID"));
			var iObjectId = this.getView().data("object_id") || (this.getModel("object") && this.getModel("object").getProperty("/ID"));
			if (iObjectId > 0) {
				this._commentMixinInitCommentModel(iObjectId);
			}
		}
		return this.getView().getModel("comment");
	};

	CommentMixin.commentMixinSubmit = function(oEvent) {
		var oButton = oEvent.getSource();
		oButton.setEnabled(false);

		var oView = this.getView();
		var oModel = this._commentMixinGetCommentModel();
		var sType = oView.data("modelObjectType");

		var sSuccessMessage = this._commentMixinSettings.successMessageKey;
		oView.setBusy(true);

		var oCreateRequest = BaseObjectController.prototype.executeObjectAction.call(this, "create", {
			messages: {
				success: sSuccessMessage
			},
			objectModelExt: oModel
		});

		var that = this;
		oCreateRequest.done(function() {
			// Initialize comment after submit
			that._commentMixinResetCommentModel();
			that._commentMixinRefresh();
			that.onVotedFollow(sType);
		});

		oCreateRequest.always(function() {
			oView.setBusy(false);
			oButton.setEnabled(true);
		});
	};
	CommentMixin.onVotedFollow = function(oType) {
		var that = this;
		var oIdeaModel = this.getModel("object");
		if (oIdeaModel && oIdeaModel.getProperty("/AUTO_FOLLOW")) {
			var bAutoFollow = oIdeaModel.getProperty("/AUTO_FOLLOW");
			var iFollowId = oIdeaModel.getProperty("/FOLLOW");
			var aAllNotificationPeople = oIdeaModel.getProperty("/SubmitterContributorsCoach");
			var oPerson = aAllNotificationPeople.filter(function(submitter) {
				return submitter.IDENTITY_ID === Configuration.getCurrentUser().USER_ID;
			});
			if (oType === "sap.ino.commons.models.object.IdeaComment" && bAutoFollow && !iFollowId && !oPerson.length) {
				var iIdeaId = oIdeaModel.getProperty("/ID");
				var oFollow = IdeaFollow.follow(iIdeaId, "IDEA", 0);
				oFollow.done();
			}
		}
	};
	CommentMixin.commentMixinOnUserPressed = function(oEvent) {
		var oSource = oEvent.getSource();
		var oDomRef = oEvent.getParameter("domRef");
		var oContext = oSource.getBindingContext("data");
		var iIdentityId = oContext.getProperty("CHANGED_BY_ID");
		if (oDomRef) {
			var oReferenceControl = sap.ui.getCore().byId(oDomRef.id);
		}
		if (!this.oIdentityCardView) {
			this.oIdentityCardView = sap.ui.xmlview({
				viewName: "sap.ino.vc.iam.IdentityCard"
			});
			this.getView().addDependent(this.oIdentityCardView);
		}
		if (oReferenceControl) {
			this.oIdentityCardView.getController().open(oReferenceControl, iIdentityId);
		} else {
			this.oIdentityCardView.getController().open(oSource, iIdentityId);
		}

	};

	CommentMixin.commentMixinOnDetailPress = function(oEvent) {
		this._commentMixinResetCommentModel();
		var sModelObjectType = this.getView().data("modelObjectType");

		if (!this.oEditDialog) {
			// var that = this;
			// var oController;
			var sViewName = this._commentMixinSettings.editDialogViewName;
			this.oEditDialog = this.createView({
				type: ViewType.XML,
				viewName: sViewName
			});
			this.getView().addDependent(this.oEditDialog);
		}
		var oBindingContext = oEvent.getSource().getBindingContext("data");
		var iId = oBindingContext.getProperty(oBindingContext.sPath).ID;
		this.oEditDialog.getController().open(iId, sModelObjectType);
	};

	CommentMixin._commentMixinRefresh = function() {
		// var sModelObjectType = this.getView().data("modelObjectType");
		var sListId = this._commentMixinSettings.commentListId;
		var oBindingInfo = this.getView().byId(sListId).getBindingInfo("items");
		this.getView().byId(sListId).bindItems(oBindingInfo);

	};

	return CommentMixin;
});
}; // end of sap/ino/vc/comment/CommentMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.comment.EditCommentDialog.controller') ) {
jQuery.sap.declare('sap.ino.vc.comment.EditCommentDialog.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/vc/comment/EditCommentDialog.controller",["sap/ino/vc/commons/BaseObjectModifyController"],
    function (Controller) {
    "use strict";

     return Controller.extend("sap.ino.vc.comment.EditCommentDialog", {

        open : function(iId, sModelObjectType){
            var that = this;
            var oSettings = {
                actions :["modify", "del"],
                continuousUse : true,
                readSource : {
                    model : this.getDefaultODataModel()
                }
            };

            jQuery.sap.require(sModelObjectType);
            var CommentModelType = jQuery.sap.getObject(sModelObjectType, 0);
            var oCommentModel = new CommentModelType(iId, oSettings);
            that.setObjectModel(oCommentModel);
            var oView = that.getView();
            oView.byId("editCommentDialog").open();
        },
 
        onDeletePressed : function(oEvent) {
           var oDelPromise = this.executeObjectAction("del", {messages: {
               confirm : "MSG_DEL_CONFIRM",
               success : "MSG_DEL_SUCCESS_COMMENT"
            }} );
            var oView = this.getView();
            oDelPromise.done(function(oResponse) {
                oView.getParent().getController()._commentMixinRefresh();
                oView.byId("editCommentDialog").close();
            });
            oDelPromise.fail(function(oResponse) {
                // do not use MessageSupportView here to avoid marking the comments field red
            });
            oDelPromise.always(function() {
            });

        },
        
        onUpdatePressed : function(oEvent) {
            var oModifyPromise = this.executeObjectAction("modify", { messages: {success : "MSG_UPDATE_SUCCESS_COMMENT"} } );
            var oView = this.getView();
            oModifyPromise.done(function(oResponse) {
                oView.byId("editCommentDialog").close();
            });
            oModifyPromise.fail(function(oResponse) {
                // do not use MessageSupportView here to avoid marking the comments field red
            });
            oModifyPromise.always(function() {
            });
        },
        
        onCancelPressed : function(oEvent) {
            var oView = this.getView();
            this.resetInputTypeValidations();
            oView.byId("editCommentDialog").close();
        }
    });
});
}; // end of sap/ino/vc/comment/EditCommentDialog.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.comment.RichCommentMixin') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */

jQuery.sap.declare('sap.ino.vc.comment.RichCommentMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.ViewType'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/comment/RichCommentMixin",[
    "sap/ui/core/mvc/ViewType",
    "sap/ino/vc/commons/BaseObjectController",
    "sap/ino/commons/application/Configuration",
    "sap/ino/commons/models/object/IdeaFollow",
    "sap/m/MessageToast",
    "sap/m/MessageBox",
    "sap/m/Button"
], function(ViewType, BaseObjectController, Configuration, IdeaFollow, MsgToast, MessageBox, Button) {
	"use strict";
	/*
	 * @class Mixin that handles actions for Comment and Internal Note
	 */
	var objectTypeCode = {
		idea: "IDEA",
		campaign: "CAMPAIGN",
		blog: "BLOG"
	};
	var RichCommentMixin = function() {
		throw "Mixin may not be instantiated directly";
	};

	RichCommentMixin.defaultRichCommentSetting = {
		commentContainerId: "rteContainer",
		commentInputId: "rteCtrlInput",
		commentListId: "commentList",
		type:"comment",
		successMessageKey: "MSG_CREATE_SUCCESS_COMMENT",
		validateMsgKey: "MSG_CREATE_EMPTY_COMMENT",
		updateMsgKey: "MSG_UPDATE_SUCCESS_COMMENT",
		createReplyMsgKey: "MSG_CREATE_REPLY_SUCCESS_COMMENT",
		editDialogViewName: "sap.ino.vc.comment.RichEditCommentDialog",
		delDialogViewName: "sap.ino.vc.comment.RichDelDialog",
		editAttachmentDialogViewName: "sap.ino.vc.comment.RichAttachmentDialog",
		delReplyConfirmMsgKey: "MSG_COMMENT_REPLY_DEL_CONFIRM",
		delAllDataComfirmMsgKey: "MSG_COMMENT_DELETE_ALL_DATA_CONFIRM",
		delSuccessfulMsgKey: "MSG_COMMENT_DEL_SUCCESS",
		delBtnKey: "COMMENT_OBJECT_BTN_DELETE_COMMENT",
		delBtnAllDataKey: "COMMENT_OBJECT_BTN_DELETE_ALL_DATA"
	};

	RichCommentMixin.richCommentMixinInitRouterEvent = function(oSetting) {
		if (oSetting) {
			this.defaultRichCommentSetting = oSetting;
		}
		this._oRouter = this.getOwnerComponent().getRouter();
		this._oRouter.getRoute(this.routes).attachMatched(this._onCommentMixinRouteMatched, this);
	};

	RichCommentMixin.onExit = function() {
		this._oRouter.getRoute(this.routes).detachMatched(this._onCommentMixinRouteMatched, this);
	};

	RichCommentMixin.richCommentMixinInit = function(oSettings) {
		var oController = this;
		oController._commentMixinSettings = oSettings || this.defaultRichCommentSetting;
		oController._initRTE();
		oController._commentMixinResetCommentModel();
	};

	RichCommentMixin.richCommentMixinSubmit = function() {
		var oView = this.getBlockView();
        var oModel = this.getModel("comment") ?  this.getModel("comment") : this._commentMixinGetCommentModel();
		var sType = oView.data("modelObjectType");

		var sSuccessMessage = this._commentMixinSettings.successMessageKey;
		if (!oModel.getProperty("/COMMENT")) {
			MsgToast.show(this.getText(this._commentMixinSettings.validateMsgKey));
			return;
		}
		oView.setBusy(true);
		oModel.setProperty("/Imgs", this._getImgIds(oModel.getProperty("/COMMENT")));
		var oCreateRequest = BaseObjectController.prototype.executeObjectAction.call(this, "create", {
			messages: {
				success: sSuccessMessage,
				error: function(oServiceResult) {
					if (oServiceResult && oServiceResult.MESSAGES && oServiceResult.MESSAGES.length > 0) {
						MsgToast.show(oServiceResult.MESSAGES[0].MESSAGE_TEXT);
					}
				}
			},
			objectModelExt: oModel
		});
		var oRouter = this.getRouter();
		var that = this;
		oCreateRequest.done(function() {
			if (that.getCurrentRoute() === "idea-display" && (oRouter.getContext().indexOf("sectionComment") > -1 || oRouter.getContext().indexOf(
				"sectionInternal") > -1)) {
				that._commentMixinSetCommentModel(null);
			}
			that._commentMixinResetCommentModel();
			that._commentMixinRefresh();
			that.onVotedFollow(sType);
		});

		oCreateRequest.always(function() {
			oView.setBusy(false);
		});
	};

	RichCommentMixin.richCommentMixinOnUserPressed = function(oEvent) {
		var oSource = oEvent.getSource();
		var oDomRef = oEvent.getParameter("domRef");
		var oContext = oSource.getBindingContext("data");
		var iIdentityId = oContext.getProperty("CHANGED_BY_ID");
		if (oDomRef) {
			var oReferenceControl = sap.ui.getCore().byId(oDomRef.id);
		}
		if (!this.oIdentityCardView) {
			this.oIdentityCardView = sap.ui.xmlview({
				viewName: "sap.ino.vc.iam.IdentityCard"
			});
			this.getBlockView().addDependent(this.oIdentityCardView);
		}
		if (oReferenceControl) {
			this.oIdentityCardView.getController().open(oReferenceControl, iIdentityId);
		} else {
			this.oIdentityCardView.getController().open(oSource, iIdentityId);
		}
	};

	RichCommentMixin.richCommentMixinOnDetailPress = function(oEvent) {
		this._commentMixinResetCommentModel();
		var sModelObjectType = this.getBlockView().data("modelObjectType");

		if (!this.oEditDialog) {
			var sViewName = this._commentMixinSettings.editDialogViewName;
			this.oEditDialog = this.createView({
				type: ViewType.XML,
				viewName: sViewName
			});
			this.getBlockView().addDependent(this.oEditDialog);
		}
		var oBindingContext = oEvent.getSource().getBindingContext("data");
		var iId = oBindingContext.getProperty(oBindingContext.sPath).ID;
		this.oEditDialog.getController().open(iId, sModelObjectType);
	};

	RichCommentMixin.onVotedFollow = function(oType) {
		var oIdeaModel = this.getModel("object");
		if (oIdeaModel && oIdeaModel.getProperty("/AUTO_FOLLOW")) {
			var bAutoFollow = oIdeaModel.getProperty("/AUTO_FOLLOW");
			var iFollowId = oIdeaModel.getProperty("/FOLLOW");
			var aAllNotificationPeople = oIdeaModel.getProperty("/SubmitterContributorsCoach");
			var oPerson = aAllNotificationPeople.filter(function(submitter) {
				return submitter.IDENTITY_ID === Configuration.getCurrentUser().USER_ID;
			});
			if (oType === "sap.ino.commons.models.object.IdeaComment" && bAutoFollow && !iFollowId && !oPerson.length) {
				var iIdeaId = oIdeaModel.getProperty("/ID");
				var oFollow = IdeaFollow.follow(iIdeaId, "IDEA", 0);
				oFollow.done();
			}
		}
	};

	RichCommentMixin.richCommentMixinOnReply = function(oEvent) {
		var cusData = oEvent.getSource().getCustomData()[0];
		this._commentMixinOnEdit(-1, cusData.getValue());
	};

	RichCommentMixin.richCommentMixinOnEdit = function(oEvent) {
		var cusData = oEvent.getSource().getCustomData();
		this._commentMixinOnEdit(cusData[0].getValue(), cusData[1].getValue());
	};

	RichCommentMixin._commentMixinOnEdit = function(iId, iParentId) {
		var sModelObjectType = this.getBlockView().data("modelObjectType");
		if (!this.oEditDialog) {
			var sViewName = this._commentMixinSettings.editDialogViewName;
			this.oEditDialog = this.createView({
				type: ViewType.XML,
				viewName: sViewName
			});
			this.getBlockView().addDependent(this.oEditDialog);
		}
		this.oEditDialog.getController().open(iId, iParentId, sModelObjectType, this._commentMixinSettings);
	};

	RichCommentMixin.richCommentMixinOnAttach = function(id) {
		var sModelObjectType = this.getBlockView().data("modelObjectType");
		if (!this.oAttachmentDialog) {
			var sViewName = this._commentMixinSettings.editAttachmentDialogViewName;
			this.oAttachmentDialog = this.createView({
				type: ViewType.XML,
				viewName: sViewName
			});
			this.getBlockView().addDependent(this.oAttachmentDialog);
		}
		this.oAttachmentDialog.getController().open(id, sModelObjectType);
	};

	RichCommentMixin.onRichAttachmentFileDeleted = function(oEvent) {
		var oController = this;
		var commentID;
		if (oEvent.getParameter("item") && oEvent.getParameter("item").getCustomData() && oEvent.getParameter("item").getCustomData().length > 0) {
			commentID = oEvent.getParameter("item").getCustomData()[0].getValue();
		}
		var oRemovePromise = oController._commentMixinGetStaticCommentModel().removeAttachments({
			ATTACHMENT_ID: oEvent.getParameter("documentId"),
			ID: commentID
		});
		this.getBlockView().setBusy(true);
		oRemovePromise.done(function() {
			oController._commentMixinRefresh();
		});
		oRemovePromise.fail(function(oResponse) {
			MsgToast.show(oResponse.MESSAGES[0].MESSAGE_TEXT);
		});
		oRemovePromise.always(function() {
			oController.getBlockView().setBusy(false);
		});
	};

	RichCommentMixin.richCommentMixinOnDel = function(iId, iParentId, sModelObjectType) {
		//Comment Delete Function popup msg
		var oController = this;
		var sObjectType;
		if (sModelObjectType.indexOf("IdeaComment") > -1) {
			sObjectType = objectTypeCode.idea;
		} else if (sModelObjectType.indexOf("CampaignComment") > -1) {
			sObjectType = objectTypeCode.campaign;
		} else if (sModelObjectType.indexOf("BlogComment") > -1) {
			sObjectType = objectTypeCode.blog;
		}
		if(!oController.getModel("comment")){
		this._commentMixinGetCommentModel();
		}
		var sConfirmMsg = iParentId ? oController._commentMixinSettings.delReplyConfirmMsgKey : oController._commentMixinSettings.delAllDataComfirmMsgKey;
		jQuery.sap.require(sModelObjectType);
		var CommentModelType = jQuery.sap.getObject(sModelObjectType, 0);
		var oDeferred = new jQuery.Deferred();
		var aActions = iParentId ? [MessageBox.Action.OK, MessageBox.Action.CANCEL] : [oController.getText(oController._commentMixinSettings.delBtnKey),
			oController.getText(oController._commentMixinSettings.delBtnAllDataKey), MessageBox.Action.CANCEL];
		MessageBox.confirm(oController.getText(sConfirmMsg), {
			actions: aActions,
			onClose: function(sAction) {
				var index = Math.pow(aActions.length, aActions.indexOf(sAction) + 1);
				if (index === 4 || index === 27 || index === 1) {
					oDeferred.resolve({
						confirmationCancelled: true
					});
					return;
				} else {
					var oActionRequest = BaseObjectController.prototype.executeObjectAction.call(oController, "delComment", {
						staticparameters: {
							COMMENT_ID: iId,
							ALL_DATA: index === 9 ? 1 : 0,
							OBJECT_TYPE: sObjectType,
							OBJECT_ID: oController.getModel("comment").getProperty("/OBJECT_ID")
						},
						messages: {
							success: oController._commentMixinSettings.delSuccessfulMsgKey
						},
						objectModelExt: CommentModelType
					});
					oActionRequest.done(oDeferred.resolve);
					oActionRequest.fail(oDeferred.reject);
				}
			}
		});
		return oDeferred.promise();
	};

	RichCommentMixin.richCommentMixinOnRemoveComments = function(oEvent) {
		var cusData = oEvent.getSource().getCustomData();
		var iId = cusData[0].getValue();
		var iParentId = cusData[1].getValue();
		var sModelObjectType = this.getBlockView().data("modelObjectType");
		var oController = this;
		var oDelPromise = this.richCommentMixinOnDel(iId, iParentId, sModelObjectType);
		oDelPromise.done(function(oResponse) {
			if (oResponse && oResponse.confirmationCancelled === true) {
				return;
			} else {
				oController._commentMixinRefresh();
			}
		});
	};

	RichCommentMixin.setAccessibilityProperty = function() {
		if (this.byId(this._commentMixinSettings.commentListId)) {
			this.byId(this._commentMixinSettings.commentListId).addEventDelegate({
				onAfterRendering: function(oEvent) {
					var oList = oEvent.srcControl;
					var aItems = oList.$().find("li");
					jQuery.each(aItems, function(iIdx, oItemDom) {
						var $Item = jQuery(oItemDom);
						$Item.attr("aria-label", $Item.getEncodedText());
					});
				}
			});
		}
	};

	RichCommentMixin._commentMixinResetCommentModel = function() {
		//this._commentMixinSetCommentModel(null);
		this._commentMixinGetCommentModel();
	};

	RichCommentMixin.commentMixinForceInitCommentModel = function() {
		if (!this.getBlockView().getModel("comment")) {
			var iObjectId = this.getBlockView().data("object_id") || (this.getModel("object") && this.getModel("object").getProperty("/ID"));
			if (iObjectId > 0) {
				this._commentMixinInitCommentModel(iObjectId);
			}
		}
	};

	RichCommentMixin._commentMixinInitCommentModel = function(iObjectId) {
		var oSettings = {
			continuousUse: true,
			readSource: {
				model: this.getDefaultODataModel()
			}
		};

		var sModelObjectType = this.getBlockView().data("modelObjectType");
		jQuery.sap.require(sModelObjectType);
		var CommentModelType = jQuery.sap.getObject(sModelObjectType, 0);

		var oModel = new CommentModelType({
			OBJECT_ID: iObjectId
		}, oSettings);
		this.addSomeMethodIntoModel(oModel);
		this._commentMixinSetCommentModel(oModel);
	};

	RichCommentMixin._commentMixinSetCommentModel = function(oModel) {
		this.getBlockView().setModel(oModel, "comment");
	};

	RichCommentMixin._commentMixinGetCommentModel = function() {
		if (this.getCurrentRoute() !== "idea-display") {
			this._commentMixinSetCommentModel(null);
		}

		if (this.getCurrentRoute() === "idea-display") {
			//When the Idea-Display page to record the sub view to Idea model
			var oIdea = this.getModel("object");
			if (this.getBlockView().getViewName() === "sap.ino.vc.comment.RichComment") {
				oIdea.setProperty("/IDEA_COMMENT_VIEW", this.getBlockView());

			}
			if (this.getBlockView().getViewName() === "sap.ino.vc.internal.InternalSection") {
				oIdea.setProperty("/IDEA_INTERNAL_COMMENT_VIEW", this.getBlockView());
			}
			if (this.getBlockView().getModel("comment") && this.getModel("object") && this.getBlockView().getModel("comment").getProperty("/OBJECT_ID") !==
				this.getModel("object").getProperty("/ID")) {
				this._commentMixinSetCommentModel(null);
			}
		}
		this.commentMixinForceInitCommentModel();
		return this.getBlockView().getModel("comment");
	};

	RichCommentMixin._commentMixinGetStaticCommentModel = function() {
		var sModelObjectType = this.getBlockView().data("modelObjectType");
		jQuery.sap.require(sModelObjectType);
		return jQuery.sap.getObject(sModelObjectType, 0);
	};

	RichCommentMixin._commentMixinGetSingleCommentModel = function(iObjectId) {
		var sModelObjectType = this.getBlockView().data("modelObjectType");
		jQuery.sap.require(sModelObjectType);
		var CommentModelType = jQuery.sap.getObject(sModelObjectType, 0);
		var oSettings = {
			continuousUse: true,
			readSource: {
				model: this.getDefaultODataModel()
			}
		};
		return new CommentModelType(iObjectId, oSettings);
	};

	RichCommentMixin._commentMixinRefresh = function(oBindingInfo) {
		var oController = this;
		jQuery.sap.delayedCall(0, oController, function() {
			var sListId = oController._commentMixinSettings.commentListId;
			var bindingInfo = oBindingInfo || jQuery.extend(true, {}, oController.getBlockView().byId(sListId).getBindingInfo("items"));
			oController.getBlockView().byId(sListId).destroyItems();
			oController.getBlockView().byId(sListId).bindItems(bindingInfo);
		});
	};

	RichCommentMixin._onCommentMixinRouteMatched = function(oEvent) {
		var oRouteArgs = oEvent.getParameter("arguments");
		var oQuery = oRouteArgs["?query"];
		var sSection = (oQuery && oQuery.section) || "sectionDetails";
		if (sSection === "sectionComments") { //"sap.ino.commons.models.object.IdeaComment") {
			this.getModel("view").setProperty("/IDEA_COMMENT", true);
		} else {
			this.getModel("view").setProperty("/IDEA_COMMENT", false);
		}
         this._commentMixinGetCommentModel();
// 		if (sSection === this.sectionName) {
// 			this.richCommentMixinInit();
// 			this.richAttachmentMixinInit();
// 		} 
	};

	return RichCommentMixin;
});
}; // end of sap/ino/vc/comment/RichCommentMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.comment.RichEditCommentDialog.controller') ) {
jQuery.sap.declare('sap.ino.vc.comment.RichEditCommentDialog.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.ViewType'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/comment/RichEditCommentDialog.controller",[
    "sap/ino/vc/commons/BaseObjectModifyController",
    "sap/ino/vc/comment/RichCommentCntrlMixin",
    "sap/ino/vc/comment/RichCommentAttachmentMixin",
    "sap/ui/core/mvc/ViewType",
    "sap/m/MessageToast",
    "sap/ino/vc/comment/RichCommentMixin"
], function(Controller, RichCommentCntrlMixin, RichCommentAttachmentMixin, ViewType, MsgToast, RichCommentMixin) {
	"use strict";

	return Controller.extend("sap.ino.vc.comment.RichEditCommentDialog", jQuery.extend({}, RichCommentCntrlMixin, RichCommentAttachmentMixin,
		RichCommentMixin, {
			_cId: "richEditCommentDialog",
			_dicODataPaths: {
				"sap.ino.commons.models.object.IdeaComment": {
					"Parent": "IdeaComment",
					"Child": "IdeaChildrenComment",
					"Prefix": "COMMENT"
				},
				"sap.ino.commons.models.object.InternalNote": {
					"Parent": "IdeaInternalNote",
					"Child": "IdeaInternalNoteChildrenComment",
					"Prefix": "INTERNALNOTE"
				}
			},

			open: function(iId, iParentId, sModelObjectType, oViewSetting) {
				this._open(iId, iParentId, sModelObjectType, oViewSetting);
			},

			_open: function(iId, iParentId, sModelObjectType, oViewSetting) {
				this.setViewProperty("/parentId", iParentId);
				this.setViewProperty("/id", iId);
				this.setViewProperty("/type", sModelObjectType);
				this._iId = iId;
				this._modelObjectType = sModelObjectType;
				this._commentMixinSettings = jQuery.extend(true, {}, oViewSetting);
				this._commentMixinSettings.commentContainerId = "rteCommentReplyContainer";
	            this._commentMixinSettings.type = "comment_reply";				
				var that = this;
				var oSettings = {
					actions: ["update", "del"],
					continuousUse: true,
					readSource: {
						model: this.getDefaultODataModel()
					}
				};
				var RteSetting = {
					height: "300px"
				};
				jQuery.sap.require(sModelObjectType);
				var CommentModelType = jQuery.sap.getObject(sModelObjectType, 0);
				var oCommentModel = new CommentModelType(iId, oSettings);
				this.addSomeMethodIntoModel(oCommentModel);
				that.setModel(oCommentModel, "comment");				
				var oDataModel = oCommentModel.getReadSourceModel();
				oDataModel.read("/" + this._dicODataPaths[sModelObjectType][!iParentId ? "Parent" : "Child"] + "(" + iId + ")/CommentAttachments", {
					success: function(oCommentAttachments) {
						oCommentModel.setProperty("/Attachments", oCommentAttachments.results);
					}
				});
				var oView = that.getView();
				this._initRTE(RteSetting);
				this.richAttachmentMixinInit();
				oCommentModel.getDataInitializedPromise().done(function(oData) {
                oView.byId(that._cId).open();
				});					
				//oView.byId(this._cId).open();
			},

			onDeletePressed: function(oEvent) {
				// 		if (!this.oDelDialog) {
				// 			var sViewName = this._commentMixinSettings.delDialogViewName;
				// 			this.oDelDialog = this.createView({
				// 				type: ViewType.XML,
				// 				viewName: sViewName
				// 			});
				// 			this.getView().addDependent(this.oDelDialog);
				// 		}
				// 		this.oDelDialog.getController().open(this._iId, this._modelObjectType, this.onCloseDialog);
				var cusData = oEvent.getSource().getCustomData();
				var iId = cusData[0].getValue();
				var iParentId = cusData[1].getValue();
				var sModelObjectType = this.getViewProperty("/type");
				var oView = this.getView();
				var oController = this;
				var oDelPromise = this.richCommentMixinOnDel(iId, iParentId, sModelObjectType);
				oDelPromise.done(function(oResponse) {
					if (oResponse && oResponse.confirmationCancelled === true) {
						return;
					} else {
						oController._clearData();
						oView.getParent().getController()._commentMixinRefresh();
						oView.byId(oController._cId).close();
					}
				});

			},

			onCloseDialog: function() {
				var oController = this;
				var oView = this.getView();
				oController._clearData();
				oView.byId(oController._cId).close();
			},

			onUpdatePressed: function() {
				var oController = this;
				var commentModel = oController.getModel("comment");
				if (!commentModel.getProperty("/COMMENT")) {
					MsgToast.show(this.getText(this._commentMixinSettings.validateMsgKey));
					return;
				}
				commentModel.setProperty("/Imgs", this._getImgIds(commentModel.getProperty("/COMMENT")));
				var oModifyPromise = this.executeObjectAction("update", {
					objectModelExt: commentModel,
					messages: {
						success: oController._commentMixinSettings.updateMsgKey
					}
				});
				var oView = this.getView();
				oModifyPromise.done(function() {
					oController._clearData();
					oView.getParent().getController()._commentMixinRefresh();
					oView.byId(oController._cId).close();
				});
			},

			onReplyPressed: function() {
				var oController = this;
				var commentModel = oController.getModel("comment");
				if (!commentModel.getProperty("/COMMENT")) {
					MsgToast.show(this.getText(this._commentMixinSettings.validateMsgKey));
					return;
				}
				commentModel.setProperty("/Imgs", this._getImgIds(commentModel.getProperty("/COMMENT")));
				commentModel.setProperty("/PARENT_ID", oController.getViewProperty("/parentId"));
				commentModel.setProperty("/OBJECT_ID", this.getModel("object").getProperty("/ID"));
				var oModifyPromise = this.executeObjectAction("create", {
					objectModelExt: commentModel,
					messages: {
						success: oController._commentMixinSettings.createReplyMsgKey,
						error: function(oServiceResult) {
							if (oServiceResult && oServiceResult.MESSAGES && oServiceResult.MESSAGES.length > 0) {
								MsgToast.show(oServiceResult.MESSAGES[0].MESSAGE_TEXT);
							}
						}
					}
				});
				var oView = this.getView();
				oModifyPromise.done(function() {
					oController._clearData();
					oView.byId(oController._cId).close();
					oView.byId(oController._commentReplyControlId).destroy();					
					oView.getParent().getController()._commentMixinRefresh();
					
				});
			},

			onCancelPressed: function() {
				var oView = this.getView();
				this.resetInputTypeValidations();
				this._clearData();
				oView.byId(this._cId).close();
			},

			_clearData: function() {
				this.getViewProperty("/parentId", null);
				this.getViewProperty("/id", null);
				this._iId = null;
				this._modelObjectType = null;
			},

			formatTitle: function(id, parentId, type) {
				if (!type) {
					return "";
				}
				var sTxtKey = this._dicODataPaths[type].Prefix;
				if (id > 0) {
					if (!parentId) {
						sTxtKey += "_EDIT_OBJECT_TIT";
					} else {
						sTxtKey += "_EDIT_REPLY_OBJECT_TIT";
					}
				} else {
					sTxtKey += "_CREATE_REPLY_OBJECT_TIT";
				}
				return this.getText(sTxtKey);
			}
			//end
		}));
});
}; // end of sap/ino/vc/comment/RichEditCommentDialog.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.commons.BaseListController') ) {
jQuery.sap.declare('sap.ino.vc.commons.BaseListController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/commons/BaseListController",[
    "./BaseBlockController",
    "sap/ui/Device",
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/formatters/BaseListFormatter",
    "sap/ino/controls/OrientationType",
    "sap/ui/core/ResizeHandler",
    "./mixins/IdentityQuickviewMixin",
    "./mixins/ClipboardMixin",
    "./mixins/IdentityCardSendMailMixin",
    "sap/ino/commons/application/Configuration"
], function(BaseController,
	Device,
	JSONModel,
	BaseListFormatter,
	OrientationType,
	ResizeHandler,
	IdentityQuickviewMixin,
	ClipboardMixin,
	IdentityCardSendMailMixin,
	Configuration) {
	"use strict";

	/**
	 * @mixes IdentityQuickViewMixin
	 */
	return BaseController.extend("sap.ino.vc.commons.BaseListController", jQuery.extend({}, IdentityQuickviewMixin, ClipboardMixin,
		IdentityCardSendMailMixin, {

			formatter: BaseListFormatter,

			onInit: function() {
				BaseController.prototype.onInit.apply(this, arguments);

				this._oListConfigModel = new JSONModel(this.list || {});
				this.getView().setModel(this._oListConfigModel, "list");

				this._oFilterBar = this.byId("filterBar");
				// remove pullToRefresh on Desktops
				if (Device.system.desktop) {
					var oPull = this.byId("pullToRefresh");
					if (oPull) {
						var oParent = oPull.getParent();
						oParent.removeContent(oPull);
					}
				}
				this._sResizeRegId = this.attachListControlResized(this.getList());
				this.setFullScreen(Configuration.getPersonalize().SCREEN_SIZE);
			},

			onExit: function() {
				this.detachListControlResized(this._sResizeRegId);
			},

			//TODO move to basecontroller

			/* *************** ORIENTATION HANDLING *************** */

			// attached to orientation of device
			_onBaseOrientationChange: function(oEvent) {
				this._onOrientationHandler();
			},

			_onOrientationHandler: function(eOrientation) {
				this.bindList();
			},

			// can be overwritten
			onOrientationChange: function(eOrientation) {
				if (eOrientation === OrientationType.LANDSCAPE) {
					if (this.getPortraitStyle) {
						this.getList().removeStyleClass(this.getPortraitStyle());
					}
					if (this.getLandscapeStyle) {
						this.getList().addStyleClass(this.getLandscapeStyle());
					}
				} else {
					if (this.getPortraitStyle) {
						this.getList().addStyleClass(this.getPortraitStyle());
					}
					if (this.getLandscapeStyle) {
						this.getList().removeStyleClass(this.getLandscapeStyle());
					}
				}

				this.getList().setWrapping(eOrientation !== OrientationType.LANDSCAPE);

			},

			// manual change via button
			_onManualOrientationChange: function() {
				var iOrientation = this.getViewProperty("/ORIENTATION");
				iOrientation = (iOrientation === OrientationType.PORTRAIT ? OrientationType.LANDSCAPE : OrientationType.PORTRAIT);
				this.setViewProperty("/ORIENTATION", iOrientation);

				this._onOrientationHandler(iOrientation);
				this.onOrientationChange(iOrientation);
			},

			/* ****************************** */

			//TODO: this does not work for overflow buttons => see CSN 1670307807

			// focus during updates in managed lists
			onObjectListUpdateStarted: function(oEvent) {
				var iControlId = sap.ui.getCore().getCurrentFocusedControlId();
				// if we are some where within the list the focus lies one a __clone id
				if (iControlId && iControlId.indexOf("__clone") > -1) {
					// as the list item is probably replacedby a new clone, we need to know the list index
					//todo use indexOfItem
					var list = oEvent.getSource(),
						iIdx;
					if (list && list.getItems) {
						iIdx = list.getItems().map(function(e) {
							return e.getId().substring(e.getId().lastIndexOf("__clone"));
						}).indexOf(iControlId.substring(iControlId.lastIndexOf("__clone")));
						this._iBeforeUpdateControlIdx = iIdx;
						this._iBeforeUpdateControlId = iControlId.substring(0, iControlId.lastIndexOf("__clone"));
					}
				}
			},

			onObjectListUpdateFinished: function(oEvent) {
				// do not change focus if available
				if (!sap.ui.getCore().getCurrentFocusedControlId() && this._iBeforeUpdateControlIdx > -1) {
					//todo get all items???
					var aItems = this.getList().getItems();
					if (aItems && aItems.length > this._iBeforeUpdateControlIdx) {
						var oItem = aItems[this._iBeforeUpdateControlIdx];
						var sClone = oItem.getId().substring(oItem.getId().lastIndexOf("__clone"));

						var sControlId = this._iBeforeUpdateControlId + sClone;
						var oControl = sap.ui.getCore().getElementById(sControlId);
						if (oControl) {
							oControl.focus();
						}
					}
				}
				//         var oVariant = this.getModel("view").getData().List.VARIANT;
				//         var oCount = this.getModel("data");
				//           for (var i = 0; i < this.getModel("list").getData().Variants.Values.length; i += 1) {
				//             if(this.getModel("list").getData().Variants.Values[i].ACTION === oVariant){
				// 	this.getModel("list").setProperty("/Variants/Values/" + i + "/COUNT",1);
				// 	break;
				//                   }
				// }
				//this.bindlist();
				this._iBeforeUpdateControlId = undefined;
				this._iBeforeUpdateControlIdx = undefined;
			},

			onObjectListGrowFinished: function(oEvent) {
				// update the check box state after lazy load
				// this event will be fired before "UpdateFinished"
				if (oEvent.getParameter("actual") > 30) {
					var aNewItems = this.getList().getItems().slice(oEvent.getParameter("actual") - 30);
					this.onMassIdeaSelect(aNewItems, this.getViewProperty("/List/SELECT_ALL"), true);
				}
			},

			/* ****************************** */

			/**
			 * @deprecated
			 */
			_onResize: function(oEvent) {
				var that = oEvent.control;
				var iWidth = oEvent.size.width;
				var iOldWidth = oEvent.oldsize ? oEvent.oldsize.width : -1;

				if (iWidth !== iOldWidth) {
					that.removeStyleClass("sapInoListWidthXXXS");
					that.removeStyleClass("sapInoListWidthXXS");
					that.removeStyleClass("sapInoListWidthXS");
					that.removeStyleClass("sapInoListWidthS");
					that.removeStyleClass("sapInoListWidthM");
					that.removeStyleClass("sapInoListWidthL");
					that.removeStyleClass("sapInoListWidthXL");
					that.removeStyleClass("sapInoListWidthXXL");
					that.removeStyleClass("sapInoListWidthXXXL");
					that.removeStyleClass("sapInoListWidthXXXXL");

					if (iWidth < 500) {
						that.addStyleClass("sapInoListWidthXXXS");
					} else if (iWidth < 600) {
						that.addStyleClass("sapInoListWidthXXS");
					} else if (iWidth < 700) {
						that.addStyleClass("sapInoListWidthXS");
					} else if (iWidth < 800) {
						that.addStyleClass("sapInoListWidthS");
					} else if (iWidth < 900) {
						that.addStyleClass("sapInoListWidthM");
					} else if (iWidth < 1000) {
						that.addStyleClass("sapInoListWidthL");
					} else if (iWidth < 1100) {
						that.addStyleClass("sapInoListWidthXL");
					} else if (iWidth < 1200) {
						that.addStyleClass("sapInoListWidthXXL");
					} else if (iWidth < 1300) {
						that.addStyleClass("sapInoListWidthXXXL");
					} else {
						that.addStyleClass("sapInoListWidthXXXXL");
					}
				}
			},

			_updateListAccessibility: function() {
				// accessibility: we need to update the aria property like this due to (for us) not usable behaviour of UI5
				var oList = this.getList();

				oList.$().find(".sapMListUl").attr("role", "list");

				var aItems = oList.$().find("li");
				jQuery.each(aItems, function(iIdx, oItemDom) {
					var $Item = jQuery(oItemDom);
					$Item.attr("role", "group");
					var $Label = $Item.find(".sapInoItemAriaLabel");
					if ($Label && $Label.length > 0) {
						$Item.attr("aria-labelledby", $Label[0].id);
					}
					var $Content = $Item.find(".sapMLIBContent");
					if ($Content && $Content.length > 0) {
						$Content.attr("role", "listitem");
					}
				});
			},

			getScrollContainer: function() {
				return this._oScrollContainer;
			},

			getFilterBar: function() {
				return this._oFilterBar;
			},

			getListLayout: function() {
				return this.byId("objectListLayout");
			},
			getFilterButton: function() {
				return this.byId("filterButton");
			},
			getFilterPanel: function() {
				return this.byId("filterPanel");
			},

			getFilterDialog: function() {
				return this.byId("filterDialog");
			},

			getSortPanel: function() {
				return this.byId('sortPanel');
			},
			isFilterVisible: function() {
				var oFilterPanel = this.getFilterPanel();
				if (oFilterPanel) {
					return oFilterPanel.hasStyleClass("sapInoFilterSidePanelVisible");
				} else {
					return false;
				}
			},

			onShowFilterBar: function(oEvent) {
				this.showFilterBar(true);
				if (this.getModel("filterItemModel")) {
					this.getModel("filterItemModel").setProperty("/isShowFilterSideFilterButtonGroup", oEvent.getSource().getPressed && oEvent.getSource()
						.getPressed());
				}
			},

			showFilterBar: function(bShow) {
				if (!Device.system.desktop) {
					var oFilterDialog = this.getFilterDialog();
					if (oFilterDialog.isOpen() && !bShow) {
						oFilterDialog.close();
					} else if (!oFilterDialog.isOpen() && bShow) {
						oFilterDialog.open();
						if (this.onSetFilterBarVisible) {
							this.onSetFilterBarVisible();
						}
					}
				} else {
					var oObjectListLayout = this.getListLayout();
					var oFilterPanel = this.getFilterPanel();
					var oSortPanel = this.getSortPanel();
					if (!oObjectListLayout || !oFilterPanel) {
						return;
					}

					if (this.isFilterVisible() || bShow === false) {
						oObjectListLayout.removeStyleClass("sapInoObjectListLayoutFit");
						oFilterPanel.removeStyleClass("sapInoFilterSidePanelVisible");
						if (oSortPanel) {
							oObjectListLayout.removeStyleClass('sapInoObjectListLayoutTop');
							oSortPanel.removeStyleClass("sapInoSortPanelLayoutFit");
						}
					} else {
						oObjectListLayout.addStyleClass("sapInoObjectListLayoutFit");
						oFilterPanel.addStyleClass("sapInoFilterSidePanelVisible");
						if (oSortPanel) {
							oObjectListLayout.addStyleClass('sapInoObjectListLayoutTop');
							oSortPanel.addStyleClass("sapInoSortPanelLayoutFit");
						}
						if (this.onSetFilterBarVisible) {
							this.onSetFilterBarVisible();
						}
					}
				}
			},

			onApplyFilter: function() {
				var oFilterDialog = this.getFilterDialog();
				if (JSON.stringify(this.getViewModelBackup()) === JSON.stringify(this.getViewProperty("/")) && JSON.stringify(this.getFilterItemModelBackup()) ===
					JSON.stringify(this.getModel("filterItemModel"))) {
					oFilterDialog.close();
					return;
				}

				var oQuery = this.getQuery();

				this.navigateIntern(oQuery, true);

				oFilterDialog.close();
			},

			onCancelFilter: function() {
				var oFilterDialog = this.getFilterDialog();
				//             var ModelBackup = this.ViewModelBackup || this.getListController().ViewModelBackup;

				//             this.setViewProperty("/List/SORT", ModelBackup.List.SORT);
				// 			this.setViewProperty("/List/ORDER", ModelBackup.List.ORDER);
				// 			this.setViewProperty("/List/SEARCH", ModelBackup.List.SEARCH);
				// 			this.setViewProperty("/List/TAGS",  ModelBackup.List.TAGS);
				// 			this.setViewProperty("/List/VARIANT", ModelBackup.List.VARIANT);

				this.setViewProperty("/List/SORT", this.ViewModelBackup.List.SORT);
				this.setViewProperty("/List/ORDER", this.ViewModelBackup.List.ORDER);
				this.setViewProperty("/List/SEARCH", this.ViewModelBackup.List.SEARCH);
				this.setViewProperty("/List/TAGS", this.ViewModelBackup.List.TAGS);
				this.setViewProperty("/List/VARIANT", this.ViewModelBackup.List.VARIANT);

				this.setViewProperty("/List/STATUS", "");
				this.setViewProperty("/List/PHASE", "");
				this.setViewProperty("/List/CAMPAIGN", undefined);
				this.setViewProperty("/List/DUE", undefined);
				this.setViewProperty("/List/AUTHORS", []);
				this.setViewProperty("/List/COACHES", []);
				this.setViewProperty("/List/EXTENSION", {});
				this.setViewProperty("/List/RESP_VALUE_CODE", "");

				oFilterDialog.close();
			},

			// when overwritten functions of view can be redirected to search filter
			getFilterElementById: function(sId) {
				return this.byId(sId);
			},

			// when overwritten functions of view can be redirected to search filter
			createIdForFilterElement: function(sId) {
				if (sId) {
					return this.createId(sId);
				} else {
					return this.getView().getId();
				}
			},

			// when overwritten functions of view can be redirected to search filter
			setFilterModel: function(oModel, sName) {
				this.setModel(oModel, sName);
			},

			getFilterNavContainer: function() {
				if (!this._oNavContainer) {
					if (!Device.system.desktop) {
						this._oNavContainer = this.byId("dialogFilterFragment--navContainer");
					} else {
						this._oNavContainer = this.byId("panelFilterFragment--navContainer");
					}
				}
				return this._oNavContainer;
			},

			onFilterPageChange: function() {
				var oNavContainer = this.getFilterNavContainer();
				var oCurrentPage = oNavContainer.getCurrentPage();

				var aPages = oNavContainer.getPages();
				var aNavToPage = jQuery.grep(aPages, function(p) {
					return p.sId !== oCurrentPage.sId;
				});

				if (aNavToPage && aNavToPage.length > 0) {
					var oNavToPage = aNavToPage[0];
					if (oNavToPage !== aPages[0]) {
						oNavContainer.to(oNavToPage.sId, "slide");
					} else {
						oNavContainer.backToPage(oNavToPage.sId, "slide");
					}
				}
			},

			onMoreFilterChange: function(oEvent) {
				var oNavContainer = this.getFilterNavContainer();
				var aPages = oNavContainer.getPages();
				var oFilterContainer = aPages[0].getContent()[0];
				if (oFilterContainer.getItems().length > 3) {
					/*var oMoreFilters = this.getFilterElementById("filterItems");
				oMoreFilters.setVisible(true);*/
					this.setViewProperty("/List/IS_SHOW_MORE_FILTER", true);
					oEvent.getSource().setVisible(false);
					oFilterContainer.$().find('*[tabindex="0"]')[oFilterContainer.getItems().length - 1].focus();
				}
			},

			addSubFilterPageContent: function(vContent) {
				this.setViewProperty("/List/IS_FILTER_SUBPAGE", true);

				var oNavContainer = this.getFilterNavContainer();
				var aPages = oNavContainer.getPages();
				var oSubPage = aPages[1];

				oSubPage.addContent(vContent);
			},

			removeSubFilterPage: function() {
				this.setViewProperty("/List/IS_FILTER_SUBPAGE", false);

				var oNavContainer = this.getFilterNavContainer();
				var aPages = oNavContainer.getPages();
				var oSubPage = aPages[1];

				oSubPage.removeAllContent();
			},

			createViewModelBackup: function() {
				this.ViewModelBackup = jQuery.extend(true, {}, this.getViewProperty("/"));
				this.FilterItemModelBackup = jQuery.extend(true, {}, this.getModel("filterItemModel"));
			},

			getViewModelBackup: function() {
				return this.ViewModelBackup;
			},
			getFilterItemModelBackup: function() {
				return this.FilterItemModelBackup;
			},

			restoreViewModelBackup: function() {
				if (this.oViewModelBackup !== undefined) {
					this.setViewProperty("/", this.ViewModelBackup);
					this.ViewModelBackup = undefined;
				}
				if (this.FilterItemModelBackup !== undefined) {
					this.setModel("filterItemModel", this.FilterItemModelBackup);
					this.FilterItemModelBackup = undefined;
				}
			},

			resetViewModelBackup: function() {
				this.ViewModelBackup = undefined;
				this.FilterItemModelBackup = undefined;
			},

			getModel: function(sName) {
				return this.getView().getModel(sName);
			},

			setListProperty: function(sProperty, vValue) {
				return this.getModel("list").setProperty(sProperty, vValue);
			},

			getListProperty: function(sProperty) {
				return this.getModel("list").getProperty(sProperty);
			},

			getList: function() {
				// needs to be overwritten
				jQuery.sap.assert(false, "getList of sap.ino.vc.commons.BaseListController must not be called");
			},

			getItemTemplate: function() {
				// needs to be overwritten
				jQuery.sap.assert(false, "getItemTemplate of sap.ino.vc.commons.BaseListController must not be called");
			},

			addListToolbarContent: function(oControl) {
				//by default, add oControl after the last spacer or at the end if there is no spacer
				var oList = this.getList();
				var oToolbar = oList ? (oList.getHeaderToolbar && oList.getHeaderToolbar()) : undefined;
				var aContent = oToolbar ? (oToolbar.getContent && oToolbar.insertContent && oToolbar.getContent()) : undefined;
				if (jQuery.isArray(aContent)) {
					var iIdx = aContent.length - 1;
					for (var ii = aContent.length - 1; ii >= 0; ii--) {
						var oMetadata = aContent[ii].getMetadata && aContent[ii].getMetadata();
						var sName = oMetadata ? (oMetadata.getName && oMetadata.getName()) : undefined;
						if (sName === "sap.m.ToolbarSpacer") {
							iIdx = ii + 1;
							break;
						}
					}
					oToolbar.insertContent(oControl, iIdx);
				} else {
					jQuery.sap.assert(false, "addListToolbarContent of sap.ino.vc.commons.BaseListController failed");
				}
			},

			getPath: function() {
				return this._sPath;
			},

			setPath: function(sPath) {
				this._sPath = sPath;
			},

			addSorterConfig: function(vSorter, bEnd) {
				var sProperty = "/Sorter/Values";
				var aValues = this.getListProperty(sProperty);
				if (!aValues) {
					return;
				}

				var fnAdd = function(oSorter) {
					if (jQuery.grep(aValues, function(e) {
						return e.ACTION === oSorter.ACTION;
					}).length === 0) {
						if (bEnd) {
							aValues.push(oSorter);
						} else {
							aValues.unshift(oSorter);
						}
					}
				};

				if (jQuery.isArray(vSorter)) {
					vSorter.forEach(function(oSorter) {
						fnAdd(oSorter);
					});
				} else {
					fnAdd(vSorter);
				}

				this.setListProperty(sProperty, aValues);
			},

			removeSorterConfig: function(vSorter) {
				var sProperty = "/Sorter/Values";
				var aValues = this.getListProperty(sProperty);
				if (!aValues || aValues.length === 0) {
					return;
				}

				var fnRemove = function(oSorter) {
					aValues = jQuery.grep(aValues, function(oListSorter) {
						return oListSorter.ACTION !== oSorter.ACTION;
					});
				};

				if (jQuery.isArray(vSorter)) {
					vSorter.forEach(function(oSorter) {
						fnRemove(oSorter);
					});
				} else {
					fnRemove(vSorter);
				}

				this.setListProperty(sProperty, aValues);
			},

			getSorter: function() {
				return this._oSorter;
			},

			setSorter: function(oSorter) {
				this._oSorter = oSorter;
			},

			getFilter: function() {
				var aGlobalFilter = this.getGlobalFilter();
				var aFilter = this._aFilter || [];
				return aFilter.concat(aGlobalFilter);
			},

			setFilter: function(aFilter) {
				if (jQuery.type(aFilter) === "array") {
					this._aFilter = aFilter;
				} else {
					this._aFilter = aFilter ? [aFilter] : [];
				}
			},

			addFilter: function(oFilter) {
				if (!this._aFilter) {
					this._aFilter = [];
				}
				this._aFilter.push(oFilter);
			},

			getGlobalFilter: function() {
				return this._aGlobalFilter || [];
			},

			setGlobalFilter: function(aFilter) {
				if (jQuery.type(aFilter) === "array") {
					this._aGlobalFilter = aFilter;
				} else {
					this._aGlobalFilter = aFilter ? [aFilter] : [];
				}
			},

			addGlobalFilter: function(oFilter) {
				if (!this._aGlobalFilter) {
					this._aGlobalFilter = [];
				}
				this._aGlobalFilter.push(oFilter);
			},

			getGroupHeaderFactory: function() {
				return this._oGroupHeaderFactory;
			},

			setGroupHeaderFactory: function(oGroupHeaderFactory) {
				this._oGroupHeaderFactory = oGroupHeaderFactory;
			},

			bindList: function(fnCallback) {
				var that = this;
				//var a = this.getList();
				var oList = this.getList().bindItems({
					path: this.getPath(),
					template: this.getItemTemplate(),
					sorter: this.getSorter(),
					filters: this.getFilter(),
					groupHeaderFactory: this.getGroupHeaderFactory(),
					events: {
						dataRequested: function() {
							jQuery.each(that.getBusyControls(), function(iIdx, oControl) {
								if (jQuery.type(oControl.setBusy) === "function") {
									oControl.setBusy(true);
								}
							});
						},
						dataReceived: function() {
							jQuery.each(that.getBusyControls(), function(iIdx, oControl) {
								if (jQuery.type(oControl.setBusy) === "function") {
									oControl.setBusy(false);
								}
							});

							if (jQuery.type(fnCallback) === "function") {
								fnCallback.apply(this);
							}
						}
					}
				});
			},

			onListExport: function() {},

			onRefresh: function() {
				this.bindList();
			},

			onUpdateFinished: function() {
				var oRefresh = this.byId("pullToRefresh");
				if (oRefresh && typeof oRefresh.hide === "function") {
					oRefresh.hide();
				}

				this._updateListAccessibility();
			},

			// TODO as here is already a mix of variant and non-variant list controller, we should merge them!?
			navigateIntern: function(oQuery, bReplace, bOnlyDesktop) {
				if (bOnlyDesktop) {
					//no navigation on mobile phones yet
					if (!Device.system.desktop) {
						return;
					}
				}
				var sVariant = this.getViewProperty("/List/VARIANT");

				this.navigateTo(this.getCurrentRoute(), {
					"variant": sVariant,
					"query": oQuery
				}, bReplace, true);
			},

			_getListDefinitionEntry: function(sValue, sKey, sListPath) {
				var aValues = this.getListProperty(sListPath);
				if (!aValues) {
					return undefined;
				}

				var aValue = jQuery.grep(aValues, function(oValue) {
					return oValue[sKey] === sValue;
				});

				if (aValue && aValue.length > 0) {
					return aValue[0];
				}

				return undefined;
			},

			getSort: function(sAction) {
				return this._getListDefinitionEntry(sAction, "ACTION", "/Sorter/Values");
			},

			getStatus: function(sKey) {
				return this._getListDefinitionEntry(sKey, "KEY", "/Filter/Status");
			},

			onTagItemSelected: function(oEvent) {
				oEvent.oSource = oEvent.getSource().getContent()[0];
				this.onTagSelected(oEvent);
			},

			onTagSelected: function(oEvent) {
				var oSource = oEvent.getSource();
				if (!oSource.getEnabled()) {
					return;
				}
				var oTag = {
					ID: oSource.data("id"),
					NAME: encodeURIComponent(oSource.getText()),
					GROUP_ID: oSource.data("groupid")
				};
				var aTags = this.getViewProperty("/List/TAGS");
				aTags.push(oTag);
				this.setViewProperty("/List/TAGS", aTags);
				this.setViewProperty("/List/IS_TAGS_SELECTION", aTags.length > 0);

				//no navigation on mobile phones yet
				if (!Device.system.desktop) {
					this.bindTagCloud();
					return;
				}

				this.navigateIntern(this.getQuery(), true);
			},

			//inm tag group hierarchy
			onTagTreeSelectedDone: function(oEvent) {
				var oSource = oEvent.getSource();
				var aTag = [];
				var aUnSelrctedTag = [];
				var bFindTag = {
					"bFind": false
				};
				aTag = this.setSelectedTagGroup(aTag, this._oPopover.getModel().oData);
				this.updateTagHierarchy(aTag, this._oPopover.getModel().oData, bFindTag);
				aUnSelrctedTag = this.setUnSelectedTagGroup(aUnSelrctedTag, this._oPopover.getModel().oData);
				var sRootGroupId = this._oPopover.getModel().oData.tagGroupID ? this._oPopover.getModel().oData.tagGroupID : 'other';
				var aTags = this.getViewProperty("/List/TAGS") || [];
				aTags = aTags.concat(aTag);
				aTags = this.uniqTagGroup(aTags) || [];
				aTags = this.excludeUnSelectedTags(aTags, aUnSelrctedTag) || [];
				aTags.forEach(function(item) {
				    item.NAME = decodeURIComponent(item.NAME);
					item.NAME = encodeURIComponent(item.NAME);
					if(!item.ROOTGROUPID){
					    item.ROOTGROUPID = sRootGroupId;
					}
					
				});
				this.setViewProperty("/List/TAGS", aTags);
				this.setViewProperty("/List/IS_TAGS_SELECTION", aTags.length > 0);
				//no navigation on mobile phones yet
				if (!Device.system.desktop) {
					this.bindTagCloud();
					return;
				}
				this._oPopover.close();
				this.navigateIntern(this.getQuery(), true);

			},

			excludeUnSelectedTags: function(aAllTags, aExTags) {
				if (aAllTags.length > 0) {
					aExTags.forEach(function(oAllTag) {
						var bExclude = false;
						var sNum;
						aAllTags.forEach(function(oExTag, index) {
							if (!bExclude) {
								bExclude = oExTag.ID === oAllTag.ID ? true : false;
								if (bExclude) {
									sNum = index;
								}
							}
						});
						if (bExclude) {
							aAllTags.splice(sNum);
							bExclude = false;
						}
					});
				}
				return aAllTags;
			},

			onTagSelectionChange: function(oEvent) {
				var cxt = oEvent.getSource().getBindingContext();
				var path = cxt.getPath();
				this.validateChild(this._oPopover.getModel(), path);
				path = path.substring(0, path.lastIndexOf('/'));
				this.validateParent(this._oPopover.getModel(), path);
			},

			//sap ui commons TriStateCheckBox
			setVibilityTagIcon: function(code) {
				if (code === "TAG_GROUP") {
					return true;
				} else {
					return false;
				}
			},

			setVibilityTag: function(bDisplay) {
				if (bDisplay) {
					return true;
				} else {
					return false;
				}
			},

			uniqTagGroup: function(array) {
				var temp = [];
				for (var i = 0; i < array.length; i++) {
					var bNeed = true;
					for (var a = 0; a < temp.length; a++) {
						if (bNeed) {
							bNeed = temp[a].ID === array[i].ID ? false : true;
						}
					}
					if (bNeed) {
						temp.push(array[i]);
					}
				}
				return temp;

			},

			setSelectedTagGroup: function(aTag, tagHierarchy) {
				var oTag;
				var that = this;
				if (tagHierarchy.children) {
					tagHierarchy.children.forEach(function(object) {
						if (object.children) {
							that.setSelectedTagGroup(aTag, object);
						} else if (object.checked === "Checked") {
							oTag = {
								ID: object.TAG_ID,
								NAME: object.NAME,
								GROUP_ID: object.TAG_GROUP_ID
							};
							aTag.push(oTag);
						}
					});
				} else if (tagHierarchy instanceof Array) {
					tagHierarchy.forEach(function(object) {
						if (object.checked === "Checked") {
							oTag = {
								ID: object.ID,
								NAME: object.NAME,
								GROUP_ID: object.TAG_GROUP_ID
							};
							aTag.push(oTag);
						}
					});
				} else {
					if (tagHierarchy.checked === "Checked") {
						oTag = {
							ID: tagHierarchy.TAG_ID,
							NAME: tagHierarchy.NAME,
							GROUP_ID: tagHierarchy.TAG_GROUP_ID
						};
						aTag.push(oTag);
					}
				}

				return this.uniqTagGroup(aTag);
			},

			setUnSelectedTagGroup: function(aTag, tagHierarchy) {
				var oTag;
				var that = this;
				if (tagHierarchy.children) {
					tagHierarchy.children.forEach(function(object) {
						if (object.children) {
							that.setUnSelectedTagGroup(aTag, object);
						} else if (object.checked === "Unchecked") {
							oTag = {
								ID: object.TAG_ID,
								NAME: object.NAME,
								GROUP_ID: object.TAG_GROUP_ID
							};
							aTag.push(oTag);
						}
					});
				} else if (tagHierarchy instanceof Array) {
					tagHierarchy.forEach(function(object) {
						if (object.checked === "Unchecked") {
							oTag = {
								ID: object.ID,
								NAME: object.NAME,
								GROUP_ID: object.TAG_GROUP_ID
							};
							aTag.push(oTag);
						}
					});
				} else {
					if (tagHierarchy.checked === "Unchecked") {
						oTag = {
							ID: tagHierarchy.TAG_ID,
							NAME: tagHierarchy.NAME,
							GROUP_ID: tagHierarchy.TAG_GROUP_ID
						};
						aTag.push(oTag);
					}
				}

				return this.uniqTagGroup(aTag);
			},

			setChildState: function(obj, state) {
				var that = this;
				this.getChildren(obj).forEach(function(x) {
					x.checked = state;
					that.setChildState(x, state);
				});
			},

			validateChild: function(model, path) {
				var cur = model.getProperty(path);
				this.setChildState(cur, cur.checked);
			},

			getChildren: function(obj) {
				if (obj.children) {
					return obj.children;
				} else {
					return [];
				}

			},

			validateParent: function(model, path) {
				if (path === '/children' || path === '') {
					return;
				}
				var obj = model.getProperty(path);
				var state = 'Unchecked';
				var children = this.getChildren(obj);

				var selectedCount = children.filter(function(x) {
					return x.checked === 'Checked';
				}).length;

				if (selectedCount === children.length) {
					obj.checked = 'Checked';
				} else {
					var unselectedCount = children.filter(function(x) {
						return x.checked === 'Unchecked';
					}).length;

					if (unselectedCount === children.length) {
						obj.checked = 'Unchecked';
					} else {
						obj.checked = 'Mixed';
					}
				}

				model.setProperty(path, obj);
				path = path.substring(0, path.lastIndexOf('/'));
				if (path !== '/children') {
					this.validateParent(model, path);
				}
			},

			updateTagHierarchy: function(aTag, tagHierarchy, bFindTag) {
				var that = this;
				if (tagHierarchy.children) {
					tagHierarchy.children.forEach(function(object) {
						if (object.children) {
							that.updateTagHierarchy(aTag, object, bFindTag);
							if (object.checked === "Checked" && bFindTag.bFind) {
								object.checked = "Unchecked";
							}
						} else {
							var bNeed = false;
							aTag.forEach(function(oTag) {
								if (!bNeed) {
									bNeed = object.TAG_ID !== oTag.ID ? false : true;
								}
							});
							if (!bNeed) {
								object.checked = "Unchecked";
								bFindTag.bFind = true;
								bNeed = false;
							} else {
								object.checked = "Checked";
								bNeed = false;
							}
						}
					});
				} else if (tagHierarchy instanceof Array) {
					tagHierarchy.forEach(function(object) {
						var bNeed = false;
						aTag.forEach(function(oTag) {
							if (!bNeed) {
								bNeed = object.ID !== oTag.ID ? false : true;
							}
						});
						if (!bNeed) {
							object.checked = "Unchecked";
						} else {
							object.checked = "Checked";
							bNeed = false;
						}
					});

				} else {
					var bNeed = false;
					aTag.forEach(function(oTag) {
						if (!bNeed) {
							bNeed = tagHierarchy.TAG_ID !== oTag.ID ? false : true;
						}
					});
					if (!bNeed) {
						tagHierarchy.checked = "Unchecked";
						bFindTag.bFind = true;
						bNeed = false;
					} else {
						tagHierarchy.checked = "Checked";
						bNeed = false;
					}
				}
				return tagHierarchy;
			},

			updateTagHierarchyForFisrt: function(aTag, tagHierarchy) {
				var that = this;
				if (tagHierarchy.children) {
					tagHierarchy.children.forEach(function(object) {
						if (object.children) {
							that.updateTagHierarchyForFisrt(aTag, object);
						} else {
							var bNeed = false;
							aTag.forEach(function(oTag) {
								if (!bNeed) {
									bNeed = object.TAG_ID !== oTag.ID ? false : true;
								}
							});
							if (bNeed) {
								object.checked = "Checked";
								bNeed = false;
							}
						}
					});
				} else {
					var bNeed = false;
					aTag.forEach(function(oTag) {
						if (!bNeed) {
							bNeed = tagHierarchy.TAG_ID !== oTag.ID ? false : true;
						}
					});
					if (bNeed) {
						tagHierarchy.checked = "Checked";
						bNeed = false;
					}
				}
				return tagHierarchy;
			},

			onTagGroupSelected: function(oEvent) {
				var oSource = oEvent.getSource();
				var sModelName = "TagGroup-" + oEvent.getSource().getCustomData()[0].getValue();
				var GroupName =  oEvent.getSource().getCustomData()[1].getValue();
				if (!this._oPopover) {
					this._oPopover = sap.ui.xmlfragment("sap.ino.vc.commons.fragments.TagGroupPopover", this);
					this.getView().addDependent(this._oPopover);
				}
				var aTags = this.getViewProperty("/List/TAGS");

				var reqBody = {
					GROUP_ID: oEvent.getSource().getCustomData()[0].getValue(),
					TagList: this.getView().getModel("tag").getProperty("/RANKED_TAG")
				};

				// var reqBody = {
				// 	GROUP_ID: oEvent.getSource().getCustomData()[0].getValue(),
				// 	TagList: this.getView().getModel("tag").getProperty("/RANKED_TAG"),
				// 	TagHierarchy: this.getView().getModel(sModelName) ? this.getView().getModel(sModelName).oData : null
				// };
				var _oPopover = this._oPopover;
				var oTreeModel;

				var that = this;

				var oObjectData = jQuery.ajax({
					url: Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/tagGroupQuery.xsjs",
					type: "POST",
					dataType: "json",
					contentType: "application/json",
					data: JSON.stringify(reqBody),
					async: false

				});
				oObjectData.done(function(oResponse) {
					oTreeModel = new JSONModel(oResponse);
					if (that.getView().getModel(sModelName)) {
						var bFindTag = {
							"bFind": false
						};
						oResponse = that.updateTagHierarchy(aTags, oResponse, bFindTag);
						that.getView().getModel(sModelName).setData(oResponse);
					} else {
						that.updateTagHierarchyForFisrt(aTags, oTreeModel.oData);
						that.getView().setModel(oTreeModel, sModelName);
					}

				});
				//this._oPopover.bindElement("oResponse");
				// if (this.getView().getModel(sModelName)) {
				//     var bFindTag = {"bFind":false};
				// 	this.updateTagHierarchy(aTags, this.getView().getModel(sModelName).oData,bFindTag);
				// }
				this.getView().getModel(sModelName).setProperty("/RootGroupName",GroupName);
				_oPopover.setModel(this.getView().getModel(sModelName));
				this._oPopover.openBy(oEvent.getSource());
			},

			_deselectTag: function(iKey) {
				var aTags = this.getViewProperty("/List/TAGS");
				aTags = aTags.filter(function(tag) {
					return tag.ID !== iKey;
				});
				this.setViewProperty("/List/TAGS", aTags);
				this.setViewProperty("/List/IS_TAGS_SELECTION", aTags.length > 0);
                var oQuery = this.getQuery();
				if (aTags.length === 0) {
				    oQuery.tags = undefined;
					// after the last tag was selected, focus the tagcloud again
					setTimeout(function() {
						//that.byId("panelFilterFragment--tagCloud").focus();
						//that.byId("TagGroupList").focus();
					}, 0);
				}

				//no navigation on mobile phones yet
				if (!Device.system.desktop) {
					this.bindTagCloud();
					return;
				}

                
				this.navigateIntern(oQuery, true);
			},

			onTagItemDeselectPress: function(oEvent) {
				var iKey = parseInt(oEvent.getParameter("listItem").getContent()[0].getKey(), 10);
				if (!isNaN(iKey)) {
					this._deselectTag(iKey);
				}
			},

			onTagItemDelete: function(oEvent) {
				var iKey = parseInt(oEvent.getSource().getProperty("key"), 10);
				if (!isNaN(iKey)) {
					this._deselectTag(iKey);
				}
			}
		}));
});
}; // end of sap/ino/vc/commons/BaseListController.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.commons.BaseVariantListController') ) {
jQuery.sap.declare('sap.ino.vc.commons.BaseVariantListController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.InvisibleText'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/commons/BaseVariantListController",[
    "./BaseListController",
    "sap/ui/Device",
    "sap/ino/commons/formatters/ListFormatter",
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/application/Configuration",
    "sap/ui/model/Sorter",
    "sap/m/MessageBox",
    "sap/ui/core/InvisibleText"
], function(BaseController, Device, ListFormatter, JSONModel, Configuration, Sorter, MessageBox, InvisibleText) {
	"use strict";

	var mOrder = {
		ASC: "ASC",
		DESC: "DESC"
	};

	var mSort = {
		SEARCH_SCORE: "SEARCH_SCORE"
	};

	return BaseController.extend("sap.ino.vc.commons.BaseVariantListController", {

		formatter: ListFormatter,

		onInit: function() {
			BaseController.prototype.onInit.apply(this, arguments);

			this._eOrientation = null;

			// only attach to orientation changes when the view is displayed =>
			// _onRouteMatched / _onAnyRouteMatched
			// sap.ui.Device.orientation.attachHandler(this._onOrientationChange,
			// this);
		},

		onExit: function() {
			this.getList().detachUpdateFinished(this.onUpdateFinished, this);
		},

		/* detect navigation within this view and between different views,
        based on this the filterbar is made visible or not */
		onAnyRouteMatched: function(oEvent) {
			// this function is call very often, so keep it as short as possible

			var sRoute = oEvent.getParameter("name");
			// make sure every list page open filter bar only once
			if (this.routes && this.routes.indexOf(sRoute) > -1) {
				this.openDefaultFilterBar();
			}

			if (!this._bInnerViewNavigation) {
				return;
			}

			//var sRoute = oEvent.getParameter("name");

			if (this.routes && this.routes.indexOf(sRoute) === -1) {
				// we are leaving the screen
				this._bInnerViewNavigation = false;
			}
		},

		openDefaultFilterBar: function() {
			if (this.getModel("filterItemModel")) {
				this.getModel("filterItemModel").setProperty("/isShowFilterSideFilterButtonGroup", false);
			}
			if (!Device.system.desktop) {
				return;
			}
			var oFilterButton = this.getFilterButton();
			var oFilterPanel = this.getFilterPanel();
			var oSortPanel = this.getSortPanel();
			var oObjectListLayout = this.getListLayout();
			var personalizeSetting = Configuration.getPersonalize();
			if (!personalizeSetting.FILTER) {
				if (oFilterPanel && oFilterPanel.hasStyleClass("sapInoFilterSidePanelVisible")) {
					if (this.getModel("filterItemModel")) {
						this.getModel("filterItemModel").setProperty("/isShowFilterSideFilterButtonGroup", true);
					}
				}
				return;
			}
			if (oFilterPanel && !oFilterPanel.hasStyleClass("sapInoFilterSidePanelVisible")) {
				if (oFilterButton) {
					oFilterButton.setPressed(true);
				}
				oObjectListLayout.addStyleClass("sapInoObjectListLayoutFit");
				oFilterPanel.addStyleClass("sapInoFilterSidePanelVisible");
				if (this.onSetFilterBarVisible) {
					this.onSetFilterBarVisible();
					if (this.getModel("filterItemModel")) {
						this.getModel("filterItemModel").setProperty("/isShowFilterSideFilterButtonGroup", true);
					}
				}
				if (oSortPanel) {
					oObjectListLayout.addStyleClass('sapInoObjectListLayoutTop');
					oSortPanel.addStyleClass('sapInoSortPanelLayoutFit');
				}
			}
			if (oFilterPanel && oFilterPanel.hasStyleClass("sapInoFilterSidePanelVisible")) {
				if (this.onSetFilterBarVisible) {
					this.onSetFilterBarVisible();
					if (this.getModel("filterItemModel")) {
						this.getModel("filterItemModel").setProperty("/isShowFilterSideFilterButtonGroup", true);
					}
				}
			}
		},

		setParameters: function(oQuery, oVariant) {
			// can be redefined
			oQuery = oQuery || {};

			//var oSorter = this.getSort(oVariant.DEFAULT_SORT);
			var sSort = this.checkSort(oQuery, oVariant.DEFAULT_SORT);
			/*var sOrder;
			if (oSorter) {
				sOrder = this.checkOrder(oQuery, oSorter.DEFAULT_ORDER);
			}*/
			var aTags = this.checkTags(oQuery.tags);

			this.setViewProperty("/List/VARIANT", oVariant.ACTION);
			this.setViewProperty("/List/SORT", sSort);
			this.setViewProperty("/List/QUICKSORT", oQuery.quickSort);
			//this.setViewProperty("/List/ORDER", sOrder);
			this.setViewProperty("/List/SEARCH", oQuery.search);
			this.setViewProperty("/List/TAGS", aTags);
			this.setViewProperty("/List/IS_TAGS_SELECTION", aTags.length > 0);
		},

		saveState: function(sVariant) {
			var sRoute = this.getCurrentRoute();
			sVariant = sVariant || this.getBindingParameter().Variant;
			var oQuery = this.getQuery({bFilterChange:true, bSorterChange: true});
			var bPortrait = Device.orientation.portrait;
			var iContextObjectId = this.getContextObjectId();
			this._oState = this.createState(sRoute, sVariant, oQuery, bPortrait, iContextObjectId);
		},

		createState: function(sRoute, sVariant, oQuery, bPortrait, iContextObjectId) {
			// can be redefined
			oQuery = oQuery || {};

			var oState = {
				route: sRoute,
				variant: sVariant,
				query: {
				// 	"sort": oQuery.sort,
				// 	"order": oQuery.order,
				// 	"search": oQuery.search,
				// 	"tags": oQuery.tags,
				// 	"quickSort": oQuery.quickSort,
				// 	"sIdeaFilterChange":oQuery.sIdeaFilterChange
				}
			};
			
			Object.keys(oQuery).forEach(function(sKey){
			    if(sKey){
			       oState.query[sKey] = oQuery[sKey]; 
			    }
			});
			
			if (bPortrait !== undefined) {
				oState.portrait = bPortrait;
			}
			if (iContextObjectId > 0) {
				oState.contextObjectId = iContextObjectId;
			}
			return oState;
		},

		hasStateChanged: function(sRoute, sVariant, oQuery, bPortrait, iContextObjectId) {
			return JSON.stringify(this.createState(sRoute, sVariant, oQuery, bPortrait, iContextObjectId)) !== JSON.stringify(this._oState);
		},

		getQuery: function() {
			//can be redefined
			var oQuery = {};

			var sSort = this.getViewProperty("/List/SORT");
			var quickSort = this.getViewProperty('/List/QUICKSORT');
			var sOrder = this.getViewProperty("/List/ORDER");
			var sSearchTerm = this.getViewProperty("/List/SEARCH");
			var aTags = this.getViewProperty("/List/TAGS");

			if (quickSort) {
				oQuery.quickSort = quickSort;
			}

			if (sSort) {
				oQuery.sort = sSort;
				if (sOrder) {
					oQuery.order = sOrder;
				}
			}
			if (sSearchTerm) {
				oQuery.search = sSearchTerm;
			}
			if (aTags && aTags.length > 0) {
				oQuery.tags = JSON.stringify(aTags);
			}

			return oQuery;
		},

		/* *************** VARIANTS *************** */

		getVariant: function(sAction) {
			return this._getListDefinitionEntry(sAction, "ACTION", "/Variants/Values");
		},

		getVariantsPopover: function() {
			if (!this._oVariantsPopover) {
				if (!Device.system.desktop) {
					this._oVariantsPopover = sap.ui.xmlfragment("sap.ino.vc.commons.fragments.ListVariantsDialog", this);
				} else {
					this._oVariantsPopover = sap.ui.xmlfragment("sap.ino.vc.commons.fragments.ListVariants", this);
				}
				this.getView().addDependent(this._oVariantsPopover);
			}
			return this._oVariantsPopover;
		},

		_onListVariants: function(oEvent) {
			var oButton = oEvent.getSource();
			var oPopover = this.getVariantsPopover();

			// focus the variants button after close again
			oPopover.attachAfterClose(function() {
				oButton.focus();
			}, this);

			if (typeof oPopover.openBy === "function") {
				oPopover.openBy(oButton);
			} else {
				oPopover.open();
			}
		},

		onListVariants: function() {
			this._onListVariants.apply(this, arguments);
		},

		onListVariatsClose: function() {
			this.getVariantsPopover().close();
		},

		onVariantPress: function(sVariantAction) {
			var oQuery = this.getQuery();

			// do not show invalid filters in URL => they are ignored, but we don't want to confuse users
			this.removeInvalidFilters(oQuery);

			// TODO: this should prevent navigation when source and target are same - doesn't work yet
			//if (!this.hasStateChanged(this.getRoute(true), sVariantAction, oQuery, Device.orientation.portrait)) {
			//    return;
			//}

			if (sVariantAction) {
				this.navigateTo(this.getRoute(true), {
					variant: sVariantAction,
					query: oQuery
				}, false, true);
			} else {
				this.navigateTo(this.getRoute(false), {
					query: oQuery
				}, false, true);
			}
		},

		removeInvalidFilters: function(oQuery) {

		},

		onVariantBasePress: function(oEvent) {
			var oItem = oEvent.getSource();
			if (oItem.getSelectedItem && oItem.getSelectedItem()) {
				oItem = oItem.getSelectedItem();
			}
			var oContext = oItem.getBindingContext("list");
			var sAction;
			var oObject;
            var previousSelect;
            
			if (oContext) {

				//////////////////////////////////////////////////////////////////////////////////////////////////////////////
				// do not access idea-, campaign-, etc. specific functionaility here
				// in case of the search list "this" may be the wrong controller (change from campaign to idea list)
				//////////////////////////////////////////////////////////////////////////////////////////////////////////////

				oObject = oContext.getObject();
				sAction = oObject ? oObject.ACTION : undefined;
				this.setViewProperty("/List/VARIANT", sAction);
				this.setViewProperty("/List/CURRENTVAR", oObject);
			}

			this.setViewProperty("/List/SORT", undefined);
			this.setViewProperty("/List/ORDER", undefined);
			this.setViewProperty("/NAVIGATETOPLINK", false);
			this.getModel("list").setProperty("/CURRENTQUICKLINK" , undefined);
            this.getModel("list").setProperty("/CURRENTSELECTLINK" , oObject);
            this.getModel("list").setProperty("/TITLESELECTQUICKLINK" , oObject);
            this.getModel("list").setProperty("/List/SELECTQUICKLINKID" , oObject.ID);
            
			if (!Device.system.desktop) {
				//no navigation on mobile phones yet
				return;
			}
			if(oObject.ID){
			    this.setViewProperty("/List/SELECTQUICKLINKID", oObject.ID);
			}else{
			    this.setViewProperty("/List/SELECTQUICKLINKID", undefined);
			}
			if(oObject.TYPE_CODE === "QUICK_LINK_CUSTOM_IDEA"){
			    this.getModel("list").setProperty("/CURRENTQUICKLINK" , oObject);
				var sCustomerQuickLinkUrl = this.campaignId ? 
				    location.href.split("#")[0] + "#/campaign/" + this.campaignId + "/" + oObject.LINK_URL : 
				    location.href.split("#")[0] + "#/" + oObject.LINK_URL;
				this.navigateToByURL(sCustomerQuickLinkUrl);
			}/*else if(oObject.TYPE_CODE === "QUICK_LINK_STANDARD_IDEA" && ){
			    var standardQuickLinkUrl = this.campaignId ? 
				    location.href.split("#")[0] + "#/campaign/" + this.campaignId + "/ideas-" + oObject.ACTION : 
				    location.href.split("#")[0] + "#/ideas-" + oObject.ACTION;
				this.navigateToByURL(standardQuickLinkUrl);
			}*/else{
			    this.onVariantPress(sAction, oEvent);
			}
		},

		/* *************** FILTER DIALOG *************** */

		//mobile phone use case
		onApplyFilter: function() {
			var oFilterDialog = this.byId("filterDialog");
			if (JSON.stringify(this.getViewModelBackup()) !== JSON.stringify(this.getViewProperty("/")) || JSON.stringify(this.getFilterItemModelBackup()) !==
				JSON.stringify(this.getModel("filterItemModel"))) {
				var oQuery = this.getQuery();

				var sVariant = this.getViewProperty("/List/VARIANT");
				if (sVariant === this.getListProperty("/Variants/DEFAULT_VARIANT")) {
					this.navigateTo(this.getRoute(false), {
						query: oQuery
					}, true, true);
				} else {
					this.navigateTo(this.getRoute(true), {
						variant: sVariant,
						query: oQuery
					}, true, true);
				}
			}
			this.resetViewModelBackup();
			oFilterDialog.close();
		},

		/* *************** DESKTOP FILTERBAR *************** */

		initialSorterItems: function() {
			if (!Device.system.desktop) {
				return;
			}
			var self = this;
			var aOrder = ["ASC", "DESC"];
			var sSort = this.getViewProperty("/List/SORT");
			if (!sSort) {
				return;
			}
			if (!this._oSorterContainer) {
				this._oSorterContainer = this.byId(this.getSortFragmnetId() + "--SorterContainer");
			}
			var aSortOrder = sSort.split(",");
			var oFlexBox;
			var that = this;
			var iCnt = 0;
			var _setSorterItem = function(items, sSortOrder) {
				var aSO = sSortOrder.split(" ");
				items[0].setSelectedKey(aSO[0]);
				items[1].setPressed(aOrder.indexOf(aSO[1]));
				self.setSorterIcon(items[1]);
			};

			oFlexBox = this._oSorterContainer.getItems()[0];
			_setSorterItem(oFlexBox.getItems(), aSortOrder.shift());

			if (aSortOrder.length > 0) {
				jQuery.each(aSortOrder, function(iIdx, sTSortOrder) {
					if (that._oSorterContainer.getItems()[iIdx + 1]) {
						oFlexBox = that._oSorterContainer.getItems()[iIdx + 1];
					} else {
						oFlexBox = that.addSorter(that._oSorterContainer);
					}
					_setSorterItem(oFlexBox.getItems(), sTSortOrder);
					iCnt = iIdx + 1;
				});
			}
			// remove no use sorter items
			var aItems = this._oSorterContainer.getItems();
			for (iCnt = iCnt + 1; iCnt < aItems.length; iCnt++) {
				this._oSorterContainer.removeItem(aItems[iCnt]);
				aItems[iCnt].destroy();
			}
			self.checkSorterLimit(self._oSorterContainer);
		},

		onSorterAdd: function(oEvent) {
			var oSorterContainer = this._oSorterContainer || oEvent.getSource().getParent().getParent();
			this.addSorter(oSorterContainer);
			this.checkSorterLimit(oSorterContainer);
			// BCP-1980515839: store the last focused element
			this._oLastFocusedControl = oEvent.getSource();
		},

		addSorter: function(oSorterContainer) {
			var fragment = this.createFragment("sap.ino.vc.commons.fragments.SorterItems");

			oSorterContainer.addItem(fragment);

			var aItems = oSorterContainer.getItems();
			var oFlexBox = aItems[aItems.length - 1].getItems();
			oFlexBox[0].insertItem(new sap.ui.core.Item({
				text: "",
				key: ''
			}), 0);
			// BCP-1980515839: focus the first object of sorter
			oFlexBox[0].addEventDelegate({
			    onAfterRendering: function(){
			        oFlexBox[0].focus();
			    }
			});
			return aItems[aItems.length - 1];
		},

		onSorterChange: function(oEvent) {
			var oSource = oEvent.getSource();
			if (!oSource.getSelectedItem().getProperty("key")) {
				return;
			}
			// if source select is not Sort Select
			if (oSource.getBindingPath("items").indexOf("Sorter") < 0) {
				var oSortSelect = oSource.getParent().getItems()[0];
				if (!oSortSelect.getSelectedItem().getProperty("key")) {
					return;
				}
			}

			var sSorterOrder = this.getSortCombination();
			if (sSorterOrder === "-1") {
				MessageBox.show(this.getText("MSG_REPEAT_IDEAT_SORTER"), MessageBox.Icon.INFORMATION, "", [
					MessageBox.Action.OK], function() {
					oSource.setSelectedKey("");
				});
				return;
			}
			this.setViewProperty("/List/SORT", sSorterOrder);
			this.navigateIntern(this.getQuery({bSorterChange: true}), true);
		},

		onSorterRemove: function(oEvent) {
			var oSorterContainer = oEvent.getSource().getParent().getParent();
			var oFlexBox = oEvent.getSource().getParent();
			if (oSorterContainer && oSorterContainer.indexOfItem(oFlexBox) > 0) {
				oSorterContainer.removeItem(oFlexBox);
				oFlexBox.destroy();
			}
			this.checkSorterLimit(oSorterContainer);
			// if is need to reload
			var sSorterOrder = this.getViewProperty("/List/SORT");
			var iSorterProperyCnt = sSorterOrder.split(",").length;
			var iSorterCnt = oSorterContainer.getItems().length - 1; // count the sorter number from all items(include bar element);
			if (iSorterProperyCnt > iSorterCnt) {
				// reload page
				this.setViewProperty("/List/SORT", this.getSortCombination());
				this.navigateIntern(this.getQuery({bSorterChange: true}), true);
			}
		    // BCP-1980515839: refocus the last focused element
		    var that = this;
			setTimeout(function(){
			    if(that._oLastFocusedControl){
			        that._oLastFocusedControl.focus();
			    }
			}, 2000);
		},

		setSorter: function(aSorter) {
			if (Object.prototype.toString.call(aSorter) !== "[object Array]") {
				aSorter = [aSorter];
			}
			var aTSorter = [];
			jQuery.each(aSorter, function(iIdx, oSorter) {
				if (oSorter instanceof Sorter) {
					aTSorter.push(oSorter);
				} else {
					aTSorter.push(new Sorter(oSorter.ACTION, oSorter.DEFAULT_ORDER === mOrder.DESC));
				}
			});
			this._oSorter = aTSorter;
		},

		getSort: function(sSorterOrder) {
			if (sSorterOrder) {
				var aSorterOrder = sSorterOrder.split(",");
				var that = this;
				var aSorter = [];
				jQuery.each(aSorterOrder, function(iIdx, sSorter) {
					var oSorter = BaseController.prototype.getSort.call(that, sSorter.split(" ")[0]);
					if (oSorter) {
						if (sSorter.split(" ")[1]) {
							oSorter.DEFAULT_ORDER = sSorter.split(" ")[1];
						}
						aSorter.push(oSorter);
					}
				});

				return aSorter;
			}
		},

		getQuickSort: function(quickSort) {
			var aQuickSorter = [],
				aSorterOrder;
			var quickSortSource = this.getListProperty('/QuickSorter');
			if (!quickSort || !quickSortSource || !quickSortSource.length) {
				return aQuickSorter;
			}
			aSorterOrder = quickSort.split(' ');

			for (var i = 0; i < quickSortSource.length; i++) {
				if (quickSortSource[i].ACTION === aSorterOrder[0]) {
					aQuickSorter.push(quickSortSource[i]);
				}
			}
			return aQuickSorter;
		},

		/**
		 * Get the sorter list value cambination
		 * if there are the same sorters in the list, it will return -1
		 */
		getSortCombination: function() {
			var aOrder = ["ASC", "DESC"];
			var sSortComb = "";
			var aSortKey = [];
			var bValid = true;
			var aSorterBox = this._oSorterContainer.getItems();
			// aSorterBox.shift();
			jQuery.each(aSorterBox, function(iIdx, oBox) {
				var oItems = oBox.getItems();
				var sSortKey = oItems[0].getSelectedItem().getProperty("key");
				var sOrderkey = oItems[1].getPressed() ? aOrder[1] : aOrder[0];
				// check exists the same sort item
				if (sSortKey !== "" && jQuery.inArray(sSortKey, aSortKey) === -1) {
					aSortKey.push(sSortKey);
					sSortComb += sSortKey + " " + sOrderkey + ",";
				} else if (jQuery.inArray(sSortKey, aSortKey) > -1) {
					bValid = false;
				}
			});
			if (bValid) {
				return sSortComb.slice(0, sSortComb.length - 1);
			} else {
				return "-1";
			}
		},

		setSortIcon: function(oOrder, sOrder) {
			var aIcons = ["sap-icon://sort-ascending", "sap-icon://sort-descending"];
			var aOrder = ["ASC", "DESC"];
			if (aOrder.indexOf(sOrder) === -1) {
				return;
			}
			if (oOrder && oOrder.setIcon) {
				oOrder.setIcon(aIcons[aOrder.indexOf(sOrder)]);
			}
		},

		reverseSort: function(bRun, oEvent) {
			var aOrders = ["ASC", "DESC"];
			var sSort = this.getViewProperty("/List/ORDER");
			// toggle sort order
			this.setViewProperty("/List/ORDER", aOrders[!aOrders.indexOf(sSort) ? 1 : 0]);
			this.setSortIcon(oEvent.getSource(), this.getViewProperty("/List/ORDER"));
			if (!bRun && !Device.system.desktop) {
				//no navigation on mobile phones yet
				return;
			}

			this.navigateIntern(this.getQuery(), false);
		},

		onListSortReverse: function() {
			this.reverseSort(true);
		},

		onSortReverse: function(oEvent) {
			this.reverseSort(false, oEvent);
		},

		resetFilter: function() {
			this.setViewProperty("/List/TAGS", []);
			this.setViewProperty("/List/IS_TAGS_SELECTION", false);
			this.setViewProperty("/List/SORT", "");
			this.setViewProperty("/List/QUICKSORT", "");

			if (!Device.system.desktop) {
				//no navigation on mobile phones yet
				return;
			}

			this.navigateIntern(this.getQuery({bFilterChange: true, bSorterChange: true}), true);
		},

		onFilterReset: function(oEvent) {
			this.resetFilter();
		},

		/* *************** HELPER *************** */
		// TODO move search stuff to global search controller
		checkSort: function(oQuery, sDefault) {
			var oSorter = {
				"TEXT": "SORT_MIT_SEARCH_SCORE",
				"ACTION": mSort.SEARCH_SCORE,
				"DEFAULT_ORDER": mOrder.DESC
			};

			if (oQuery && oQuery.search !== undefined /* "" is a valid search */ && (!this._oState || !this._oState.query.search)) {
				this.addSorterConfig(oSorter);
			} else if (oQuery && oQuery.search === undefined && (this._oState && !this._oState.query.search)) {
				this.removeSorterConfig(oSorter);
			}

			if (oQuery && oQuery.search !== undefined && !oQuery.sort) {
				return mSort.SEARCH_SCORE;
			}

			return oQuery && this.getSort(oQuery.sort) ? oQuery.sort : sDefault;
		},

		checkOrder: function(oQuery, sDefault) {
			/*
            if ((oQuery.search && (!this._oState || !this._oState.query.search)) ||
                    (oQuery.search && this._oState && this._oState.query.search && oQuery.search !== this._oState.query.search)) {
                return mOrder.DESC;
            }
            */

			if (jQuery.type(oQuery.order) === "string") {
				oQuery.order = oQuery.order.toUpperCase();

				if (oQuery.order === mOrder.ASC || oQuery.order === mOrder.DESC) {
					return oQuery.order;
				}
			}
			return sDefault;
		},

		checkTags: function(sTags) {
			try {
				return JSON.parse(sTags);
			} catch (e) {
				return [];
			}
		},
		
		checkRespList: function(sRespList) {
		    try {
				return JSON.parse(sRespList);
			} catch (e) {
				return [];
			}
		},

		getBindingParameter: function() {
			return {
				Variant: null,
				VariantFilter: null,
				SearchTerm: null,
				TagIds: []
			};
		},

		setContextObjectId: function(iContextObjectId) {
			this._iContextObjectId = iContextObjectId;
		},

		getContextObjectId: function() {
			return this._iContextObjectId;
		},

		/* the variant the view currently displays */
		getCurrentVariant: function() {
			return this.getVariant(this.getViewProperty("/List/VARIANT"));
		},

		getRoute: function(bVariant) {
			if (this.routes && this.routes.length) {
				if (bVariant) {
					return this.routes[1];
				} else {
					return this.routes[0];
				}
			}
			return undefined;
		},

		getFilterFragmentId: function() {
			return Device.system.desktop ? "panelFilterFragment" : "dialogFilterFragment";
		},

		getSortFragmnetId: function() {
			return Device.system.desktop ? "panelSortFragment" : "dialogFilterFragment";
		},

		setSorterIcon: function(source) {
			var aIcons = ["sap-icon://sort-ascending", "sap-icon://sort-descending"];
			return source.getPressed() ? source.setIcon(aIcons[1]) : source.setIcon(aIcons[0]);
		},

		onOrder: function(event) {
			var sSorterOrder = this.getSortCombination();

			this.setSorterIcon(event.getSource());
			this.setViewProperty("/List/SORT", sSorterOrder);
			if((sSorterOrder.split(" "))[1] === "ASC"){
				event.getSource().setTooltip(this.getText('EXP_ASCENDING_SORT_BUTTON'));
			}else if((sSorterOrder.split(" "))[1] === "DESC"){
				event.getSource().setTooltip(this.getText('EXP_DESCENGDING_SORT_BUTTON'));
			}
			this.navigateIntern(this.getQuery({bSorterChange: true}), true);
		},

		onQuickSort: function(event) {
			var param = event.getParameters();
			var item = param.item;
			var quickSort = item.getKey();
			var currentSort = this.getViewProperty('/List/QUICKSORT');
			if (currentSort === quickSort) {
				quickSort = '';
			}
			this.setViewProperty('/List/QUICKSORT', quickSort);
			this.navigateIntern(this.getQuery({bSorterChange: true}), true);

		},

		checkSorterLimit: function(oSorterContainer) {
			if (!oSorterContainer) {
				return false;
			}
			var items = oSorterContainer.getItems();
			var limit = this.getListProperty('/Sorter/Limit');
			if (!limit) {
				return false;
			}
			if (items.length >= limit) {
				this.setListProperty('/Sorter/disableAddButton', true);
			} else {
				this.setListProperty('/Sorter/disableAddButton', false);
			}
		},

		transListValue: function(list) {
			return list && !!list.length || false;
		},

		isDisable: function(bool) {
			return !bool;
		},
		
		quickSortEnable: function(sAction,sCurrentSort) {
		    if(sAction === "CHANGED_AT_DT" && sCurrentSort){
	            if(sAction === sCurrentSort.split(" ")[0]){
    			    return false;
    			}else{
    			    return true;
    			}
		    }else{
		        return true;
		    }
		}
		
	});
});
}; // end of sap/ino/vc/commons/BaseVariantListController.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.evaluation.EvaluationFacet') ) {
jQuery.sap.declare('sap.ino.vc.evaluation.EvaluationFacet'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/evaluation/EvaluationFacet",[
    "sap/ino/vc/commons/BaseObjectController",
    "sap/ino/commons/models/core/CodeModel",
    "sap/ino/controls/EvaluationData",
    "sap/ino/controls/EvaluationDataCriterionValue",
    "sap/ino/vc/evaluation/EvaluationFormatter",
    "sap/ui/model/Sorter",
    "sap/ino/commons/models/types/StringNumberType"
], function(BaseObjectController,
	CodeModel,
	EvaluationData,
	EvaluationDataCriterionValue,
	EvaluationFormatter,
	Sorter,
	StringNumberType) {
	"use strict";

	/**
	 * @class
	 * Facet for view controllers that are used for evaluation display and modify.
	 */
	var Evaluation = function() {
		throw "Facet may not be instantiated directly";
	};

	var oFormatter = {};
	jQuery.extend(oFormatter, EvaluationFormatter);

	Evaluation.formatter = oFormatter;

	Evaluation.onCriterionPressed = function(oEvent) {
		var oSource = oEvent.getSource();
		if (oSource) {
			var sPath = oSource.getBindingContext("object") && oSource.getBindingContext("object").getPath();
			if (sPath) {
				if (!this.oCriterionValueHelpView) {
					this.oCriterionValueHelpView = sap.ui.xmlview({
						viewName: "sap.ino.vc.evaluation.CriterionValueHelp"
					});
					this.getView().addDependent(this.oCriterionValueHelpView);
				}
				if (this.oCriterionValueHelpView && this.oCriterionValueHelpView.getController()) {
					this.oCriterionValueHelpView.getController().open(oSource, sPath);
				}
			}
		}
	};

	Evaluation.onEvaluatorPressed = function(oEvent) {
		var oSource = oEvent.getSource();
		if (oSource) {
			var iIdentityId = oSource.getBindingContext("object") &&
				oSource.getBindingContext("object").getProperty("EVALUATOR_ID");
			if (iIdentityId !== undefined && !this.oIdentityCardView) {
				this.oIdentityCardView = sap.ui.xmlview({
					viewName: "sap.ino.vc.iam.IdentityCard"
				});
				this.getView().addDependent(this.oIdentityCardView);
			}
			if (this.oIdentityCardView && this.oIdentityCardView.getController()) {
				this.oIdentityCardView.getController().open(oSource, iIdentityId);
			}
		}
	};

	Evaluation.initMatrixControl = function() {
		var oCriterionValueTemplate = new EvaluationDataCriterionValue({
			criterionId: {
				path: "object>ID",
				mode: "OneTime"
			},
			criterionCode: {
				path: "object>CODE",
				mode: "OneTime"
			},
			parentCriterionCode: {
				path: "object>PARENT_CRITERION_CODE",
				mode: "OneTime"
			},
			criterionName: {
				path: "object>CODE",
				formatter: function(sCode) {
					return oFormatter.criterionCode(sCode);
				},
				mode: "OneTime"
			},
			criterionDescription: {
				path: "object>CODE",
				formatter: function(sCode) {
					return oFormatter.criterionCodeLongText(sCode);
				},
				mode: "OneTime"
			},
			criterionDataType: {
				path: "object>DATATYPE_CODE",
				mode: "OneTime"
			},
			criterionValue: {
				parts: [{
						path: "object>TEXT_VALUE"
					},
					{
						path: "object>BOOL_VALUE"
					},
					{
						path: "object>NUM_VALUE"
					},
					{
						path: "object>DATATYPE_CODE"
					}],
				formatter: function(sTextValue, bBoolValue, iNumValue, sCriterionDataType) {
					return oFormatter.getValue(sCriterionDataType, iNumValue, bBoolValue, sTextValue);
				}
			},
			criterionLabel: {
				parts: [{
						path: "object>VALUE_OPTION_LIST_CODE"
					},
					{
						path: "object>CODE"
					},
					{
						path: "object>TEXT_VALUE"
					},
					{
						path: "object>BOOL_VALUE"
					},
					{
						path: "object>NUM_VALUE"
					},
					{
						path: "object>DATATYPE_CODE"
					}],
				formatter: function(sValueListCode, sCode, sTextValue, bBoolValue, iNumValue, sCriterionDataType) {
					var sLabel = oFormatter.criterionCode(sCode);
					var sValue = oFormatter.getValue(sCriterionDataType, iNumValue, bBoolValue, sTextValue);
					var sText = sLabel + ": ";
					if (sValueListCode) {
						var sCodeTable = CodeModel.getConfigObjectNodeForValueOptionList(sValueListCode);
						sText = sText + CodeModel.getText(sCodeTable, sValue);
					} else {
						sText = sText + sValue;
					}
					return sText;
				}
			},
			numValueMin: {
				path: "object>NUM_VALUE_MIN",
				type: new StringNumberType(),
				mode: "OneTime"
			},
			numValueMax: {
				path: "object>NUM_VALUE_MAX",
				type: new StringNumberType(),
				mode: "OneTime"
			},
			numValueStepSize: {
				path: "object>NUM_VALUE_STEP_SIZE",
				type: new StringNumberType(),
				mode: "OneTime"
			},
			comment: "{object>COMMENT}",
			isDone: "{object>IS_DONE}",
			sequenceNo: {
				path: "object>SEQUENCE_NO",
				mode: "OneTime"
			},
			isOverallResult: {
				path: "object>IS_OVERALL_RESULT",
				mode: "OneTime"
			},
			uomCode: {
				path: "object>UOM_CODE",
				mode: "OneTime"
			},
			valueOptionListLabelCodes: {
				path: "object>VALUE_OPTION_LIST_CODE",
				formatter: function(listCode) {
					if (!listCode) {
						return null;
					}
					var sCodeTable = CodeModel.getConfigObjectNodeForValueOptionList(listCode);
					var aQLabelCode = CodeModel.getCodes(sCodeTable);
					var aSortedQLabelCode = aQLabelCode.sort(function(c1, c2) {
						return c1.CODE - c2.CODE;
					});
					// Translate codes
					for (var i = 0; i < aSortedQLabelCode.length; i++) {
						aSortedQLabelCode[i].TEXT = CodeModel.getText(sCodeTable, aSortedQLabelCode[i].CODE);
					}
					return aSortedQLabelCode;
				}
			},
			aggregationType: {
				path: "object>AGGREGATION_TYPE",
				mode: "OneTime"
			},
			weight: {
				path: "object>WEIGHT",
				formatter: function(sWeight) {
					return oFormatter.getWeight(sWeight);
				},
				mode: "OneTime"
			},
			xAxisCriterionCode: {
				path: "object>X_AXIS_CRITERION_CODE",
				mode: "OneTime"
			},
			xAxisCriterionCodeLabel: {
				path: "object>X_AXIS_CRITERION_CODE",
				formatter: function(code) {
					return oFormatter.uomCode(code);
				},
				mode: "OneTime"
			},
			xAxisSegmentNo: {
				path: "object>X_AXIS_SEGMENT_NO",
				mode: "OneTime"
			},
			yAxisCriterionCode: {
				path: "object>Y_AXIS_CRITERION_CODE",
				mode: "OneTime"
			},
			yAxisCriterionCodeLabel: {
				path: "{object>Y_AXIS_CRITERION_CODE}",
				formatter: function(code) {
					return oFormatter.uomCode(code);
				},
				mode: "OneTime"
			},
			yAxisSegmentNo: {
				path: "object>Y_AXIS_SEGMENT_NO",
				mode: "OneTime"
			},
			visParam1CriterionCode: {
				path: "object>VIS_PARAM_1_CRITERION_CODE",
				mode: "OneTime"
			},
			visParam1CriterionCodeLabel: {
				path: "object>UOM_CODE",
				formatter: function(code) {
					return oFormatter.uomCode(code);
				},
				mode: "OneTime"
			},
			visParam2CriterionCode: {
				path: "object>VIS_PARAM_2_CRITERION_CODE",
				mode: "OneTime"
			},
			visParam2CriterionCodeLabel: {
				path: "object>UOM_CODE",
				formatter: function(code) {
					return oFormatter.uomCode(code);
				},
				mode: "OneTime"
			}
		});

		this._oEvalDataTemplate = new EvaluationData({
			evaluationId: "{object>ID}",
			modelCode: "{object>MODEL_CODE}",
			modelName: {
				path: "object>MODEL_CODE",
				formatter: function(sCode) {
					return oFormatter.modelCode(sCode);
				}
			},
			modelDescription: {
				path: "object>MODEL_CODE",
				formatter: function(sCode) {
					return oFormatter.modelCodeLongText(sCode);
				}
			},
			ideaId: "{object>IDEA_ID}",
			statusCode: "{object>STATUS_CODE}",
			ideaPhaseCode: "{object>IDEA_PHASE_CODE}",
			evaluatorId: "{object>EVALUATOR_ID}",
			evaluatorName: "{object>EVALUATOR_NAME}",
			evaluationDate: {
				path: "object>CHANGED_AT",
				type: new sap.ui.model.type.Date({
					style: "medium"
				})
			},
			overallResult: function() {
				return {
					parts: [{
							path: "OV_RES_DATATYPE_CODE"
						},
						{
							path: "OV_RES_NUM_VALUE"
						},
						{
							path: "OV_RES_BOOL_VALUE"
						},
						{
							path: "OV_RES_TEXT_VALUE"
						},
						{
							path: "OV_RES_VALUE_OPTION_LIST_CODE"
						},
						{
							path: "OV_RES_UOM_CODE"
						}],
					formatter: function() {
						return function(sDataType, fNumValue, bBoolValue, sTextValue, sVoLCode, sUoMCode) {
							return oFormatter.getFormattedValue(sDataType, fNumValue, bBoolValue, sTextValue, sVoLCode, sUoMCode);
						};
					}
				};
			},
			values: {
				path: "object>CriterionValues",
				template: oCriterionValueTemplate,
				sorter: new Sorter("SEQUENCE_NO", false),
				templateShareable: true
			}
		});

		var oEvaluationMatrix = this.byId("evaluationMatrix");
		var oBinding = oEvaluationMatrix.getBinding();
		if (oBinding) {
			oBinding.attachChange(oEvaluationMatrix.prepareMatrix, oEvaluationMatrix);
		}
	};

	/*
    Evaluation.setHelp = function(sHelpId) {
        var that = this;
        var sGeneralHelp = this.getText("HELP_EXP_" + sHelpId);
        var sSpecificHelp = "";
        var oData = this.getObjectModel() && this.getObjectModel().getData();

        if (oData && oData.criteriaHierarchy) {
            
            sSpecificHelp = this.getText("HELP_EXP_EVALUATION_DESCRIPTION");
            
            var aCriteria = oData.criteriaHierarchy.aggregatingCriteria;
            aCriteria.forEach(function(oCriterion) {
                if (oCriterion.criterion && oCriterion.criterion.CRITERION_CODE) {
                    sSpecificHelp += that.getText("HELP_EXP_EVALUATION_DESCRIPTION_VALUE", 
                        [that.formatter.criterionCode(oCriterion.criterion.CRITERION_CODE), that.formatter.criterionCodeLongText(oCriterion.criterion.CRITERION_CODE)]);
                }
                oCriterion.children.forEach(function(oChild) {
                    sSpecificHelp += that.getText("HELP_EXP_EVALUATION_DESCRIPTION_CHILD_VALUE", 
                        [that.formatter.criterionCode(oChild.CRITERION_CODE), that.formatter.criterionCodeLongText(oChild.CRITERION_CODE)]);
                });
            });
        }
        
        var oComponent = this.getOwnerComponent();
        oComponent.setHelpContent("<div>" + sGeneralHelp + sSpecificHelp + this.getText("HELP_EXP_" + sHelpId + "_FOOTER") + "</div>");
    };
    */

	Evaluation.bindMatrix = function() {
		var oMatrix = this.getView().byId("evaluationMatrix");
		oMatrix.addAggregation("evalData", this._oEvalDataTemplate);
		oMatrix.bindElement({
			path: "/",
			model: "object"
		});
	};

	Evaluation.onDelete = function(oEvent) {
		var oController = this;
		var oDelBtn = oEvent.getSource();
		var oDelRequest = this.executeObjectAction("del", {
			messages: {
				confirm: "MSG_DEL_CONFIRM",
				success: "MSG_DEL_SUCCESS"
			}
		});
		oDelRequest.done(function(oResponse) {
			if (oResponse && oResponse.confirmationCancelled === true) {
				if (oDelBtn && jQuery.type(oDelBtn.focus) === "function") {
					oDelBtn.focus();
				}
				return;
			}
			oController.onDeleteNavBack("idea", true);
		});
	};

	Evaluation.onSubmit = function() {
		var oController = this;
		var oEvaluation = oController.getObjectModel();
		var bIsNew = oEvaluation.isNew();
		var oSubmitRequest = oController.executeObjectAction("modifyAndSubmit", {
			messages: {
				confirm: "EVALUATION_OBJECT_MSG_SUBMIT_CONFIRM",
				success: function() {
					return oController.getText("EVALUATION_OBJECT_MSG_SUBMIT_OK");
				}
			},
			parameters: {
				IDEA_ID: oEvaluation.getProperty("/IDEA_ID"),
				EVAL_REQ_ITEM_ID: oEvaluation.getProperty("/EVAL_REQ_ITEM_ID")
			}
		});
		oSubmitRequest.done(function(oResponse) {
			oEvaluation.getPropertyModel().getDataInitializedPromise().done(function() {
				if (oController.setStatusChangeButtons) {
					oController.setStatusChangeButtons();
				}
			});
			if (oResponse && oResponse.confirmationCancelled === true) {
				oController.byId("evaluationSubmitBtn").focus();
				return;
			}
			if (bIsNew) {
				oController.navigateTo("evaluation-display", {
					id: oEvaluation.getKey()
				}, true);
			} else {
				oController.navigateBack();
			}
		});
	};

	return Evaluation;
});
}; // end of sap/ino/vc/evaluation/EvaluationFacet.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.evaluation.Modify.controller') ) {
jQuery.sap.declare('sap.ino.vc.evaluation.Modify.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/evaluation/Modify.controller",[
    "sap/ino/vc/commons/BaseObjectModifyController",
    "sap/ino/commons/models/object/Evaluation",
    "sap/ino/vc/evaluation/EvaluationFacet",
    "sap/ino/commons/models/types/IntBooleanType",
    "sap/ino/commons/models/types/IntNullableBooleanType",
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/models/object/Attachment",
    "sap/ino/vc/attachment/AttachmentMixin",
    "sap/ino/commons/application/Configuration",
    "sap/m/MessageToast",
    "sap/ino/vc/commons/TopLevelPageFacet"
], function(BaseController,
	Evaluation,
	EvaluationFacet,
	IntBooleanType,
	IntegerType,
	JSONModel,
	Attachment,
	AttachmentMixin,
	Configuration,
	MessageToast,
	TopLevelPageFacet) {
	"use strict";

	var mRoutes = {
		create: "evaluation-create",
		edit: "evaluation-edit"
	};

	var attachmentUploadUrl = Attachment.getEndpointURL();
	return BaseController.extend("sap.ino.vc.evaluation.Modify", jQuery.extend({}, TopLevelPageFacet, EvaluationFacet, AttachmentMixin, {

		routes: [mRoutes.create, mRoutes.edit],

		intBoolean: new IntBooleanType(),
		integerType: new IntegerType(),

		onInit: function() {
			BaseController.prototype.onInit.apply(this, arguments);
			if (!this.getModel("local")) {
				this.setModel(new JSONModel({
					ATTACHMENT_UPLOAD_URL: attachmentUploadUrl
				}), "local");
			}
			if (!this.getModel("view")) {
				this.setModel(new JSONModel({
					"IDEA_NAVIGATION_SECTION": "ideaSectionEvaluations"
				}), "view");
			}
			var oViewModel = this.getModel("view");
			if (!oViewModel.getProperty("/IDEA_NAVIGATION_SECTION")) {
				oViewModel.setProperty("/IDEA_NAVIGATION_SECTION", "ideaSectionEvaluations");
			}
			oViewModel.setProperty("/EDIT_MODE", true);
			this.aBusyControls = [this.byId("evaluationLayout")];
			this.initMatrixControl();
			this.scrollDockElement("evaluationModify", "evaluationMatrix");
			this._sResizeEvalList = this.attachListControlResized(this.byId("criteriaList"));
		},

		onExit: function() {
			BaseController.prototype.onExit.apply(this, arguments);
			this.detachListControlResized(this._sResizeEvalList);
		},

		onRouteMatched: function(oEvent) {
			var that = this;
			var oArgs = oEvent.getParameter("arguments");
			var oEvaluation = this.getObjectModel();
			var sRoute = oEvent.getParameter("name");

			this.setObjectExists(true);

			var oSettings = {
				actions: ["del", "modify", "modifyAndSubmit", "submit"],
				nodes: ["Root"],
				continuousUse: true,
				readSource: {
					model: this.getDefaultODataModel()
				}
			};

			function setEvaluationModel(oEvaluation) {
				that.setObjectModel(oEvaluation);

				oEvaluation.getDataInitializedPromise().done(function() {
					that.setHelp("EVALUATION_MODIFY");
				});
				oEvaluation.getDataInitializedPromise().fail(function() {
					that.setObjectExists(false);
				});

				that.bindMatrix();
			}

			if (sRoute === mRoutes.create) {
				var mQuery = oArgs["?query"] || {};
				if (jQuery.isNumeric(mQuery.ideaId)) {
					if (mQuery.evalIds) {
						// Average Evaluation
						var aEvaluationId = mQuery.evalIds.split(",");
						var oDataModel = this.getModel("data");
						var aDeferred = [];
						jQuery.each(aEvaluationId, function(iIndex, iEvaluationId) {
							var oDeferred = new jQuery.Deferred();
							oDataModel.read("/IdeaEvaluation(" + iEvaluationId + ")/CriterionValues", {
								success: function(oData) {
									oDeferred.resolve({
										"CriterionValues": oData.results
									});
								},
								error: function(oError) {
									oDeferred.reject(oError);
								}
							});
							aDeferred.push(oDeferred);
							if (mQuery.includeAttachs * 1) {
								var oAttachDeferred = new jQuery.Deferred();
								oDataModel.read("/IdeaEvaluation(" + iEvaluationId + ")/EvalAttachments", {
									success: function(oData) {
										oAttachDeferred.resolve({
											"EvalAttachments": oData.results
										});
									},
									error: function(oError) {
										oAttachDeferred.reject(oError);
									}
								});
								aDeferred.push(oAttachDeferred);
							}
						});
						jQuery.when.apply(jQuery, aDeferred).done(function() {
							var aCriterionValues = [],
								aEvalAttachments = [],
								keyObj = {};
							jQuery.each(arguments, function(index, oData) {
								if (oData.hasOwnProperty("CriterionValues") && oData.CriterionValues) {
									aCriterionValues.push(oData.CriterionValues);
								} else if (oData.hasOwnProperty("EvalAttachments") && oData.EvalAttachments) {
									jQuery.each(oData.EvalAttachments, function(iNewIndex, evalA) {
										if (!keyObj.hasOwnProperty(evalA.ATTACHMENT_ID)) {
											keyObj[evalA.ATTACHMENT_ID] = true;
											aEvalAttachments.push(evalA);
										}
									});
								}
							});
							var nAction = Number(mQuery.evalAction);
							if (nAction === 1) {
								oEvaluation = Evaluation.createAverageEvaluation(parseInt(mQuery.ideaId, 10), aCriterionValues, oSettings, aEvalAttachments
								, that.getText("IDEA_OBJECT_DEFAULT_AVE_EVALUATION_COMMENT"));
							} else if (nAction === 2) {
								oEvaluation = Evaluation.createTotalEvaluation(parseInt(mQuery.ideaId, 10), aCriterionValues, oSettings, aEvalAttachments,
									that.getText("IDEA_OBJECT_DEFAULT_TOTAL_EVALUATION_COMMENT"), aEvaluationId[0], function(aArgs, nType) {
										return nType === 1 ? {
										    msg: that.getText("MSG_EVALUATION_MAX_WARNING_TXT", aArgs),
											msg_tooltip: that.getText("MSG_EVALUATION_MAX_WARNING_INFO", aArgs)
										} : {
										    msg: that.getText("MSG_EVALUATION_MAX_WARNING_TXT", aArgs),
											msg_tooltip: that.getText("MSG_EVALUATION_MIN_WARNING_INFO", aArgs)
										};
									});
							}
							setEvaluationModel(oEvaluation);
						});
					} else {
						var oCustomSetting = {
							IDEA_ID: parseInt(mQuery.ideaId, 10)
						};
						if (parseInt(mQuery.EvalReqItemId, 10) > 0) {
							oCustomSetting.EVAL_REQ_ITEM_ID = parseInt(mQuery.EvalReqItemId, 10);
						}
						oEvaluation = new Evaluation(oCustomSetting, oSettings);
						setEvaluationModel(oEvaluation);
					}
				}
			} else {
				if (jQuery.isNumeric(oArgs.id)) {
					var iEvaluationId = parseInt(oArgs.id, 10);
					if (!oEvaluation || (oEvaluation.getKey() !== iEvaluationId)) {
						oEvaluation = new Evaluation(iEvaluationId, oSettings);
					}
					this.bindDefaultODataModel(iEvaluationId);
					setEvaluationModel(oEvaluation);
				}
			}
		},

		onAfterRendering: function() {
			this._attachmentMixinInit({
				attachmentId: "EvalAttachments",
				updateObject: function(oObject) {},
				uploadSuccess: function(oObject, oResponse) {
					oObject.addAttachment({
						"CREATED_BY_NAME": Configuration.getCurrentUser().NAME,
						"ATTACHMENT_ID": oResponse.attachmentId,
						"FILE_NAME": oResponse.fileName,
						"MEDIA_TYPE": oResponse.mediaType,
						"CREATED_AT": new Date()
					});
				}
			});
		},

		onSave: function() {
			var oController = this;
			var bIsNewEvaluation = oController.getObjectModel().isNew();
			var oModifyRequest = oController.executeObjectAction("modify");
			oModifyRequest.done(function() {
				var oEvaluation = oController.getObjectModel();
				if (bIsNewEvaluation) {
					oController.navigateTo("evaluation-edit", {
						id: oEvaluation.getKey()
					}, true);
				}
			});
		}

	}));
});
}; // end of sap/ino/vc/evaluation/Modify.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.evaluation.RequestsList.controller') ) {
jQuery.sap.declare('sap.ino.vc.evaluation.RequestsList.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/evaluation/RequestsList.controller",[
    "sap/ui/Device",
    "sap/ui/model/Sorter",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/m/MessageBox",
    "sap/ino/commons/application/Configuration",
    "sap/ino/commons/formatters/ObjectListFormatter",
    "sap/ino/commons/models/aof/ApplicationObjectChange",
    "sap/ino/controls/OrientationType",
    "sap/ino/vc/commons/TopLevelPageFacet",
    "sap/ino/vc/commons/BaseVariantListController",
    "sap/ino/vc/evaluation/mixins/MassActionMixin"
], function(
	Device,
	Sorter,
	Filter,
	FilterOperator,
	MessageBox,
	Configuration,
	ObjectListFormatter,
	ApplicationObjectChange,
	OrientationType,
	TopLevelPageFacet,
	BaseController,
	MassActionMixin) {
	"use strict";

	var mRoutes = {
		EVALREQ: "evalreqlist",
		EVALREQ_VARIANT: "evalreqlistvariant"
	};

	var mVariant = {
		EVAL_REQ_ALL: "all",
		EVAL_REQ_FOR_ME: "forme",
		EVAL_REQ_FOR_ME_OVERDUE: "formeoverdue",
		EVAL_REQ_MY: "my",
		EVAL_REQ_MY_OVERDUE: "myoverdue"
	};

	var mFilter = {
		NONE: undefined,
		EVAL_REQ_FOR_ME: "forMe",
		EVAL_REQ_FOR_ME_OVERDUE: "forMeOverdue",
		EVAL_REQ_MY: "byMe",
		EVAL_REQ_MY_OVERDUE: "byMeOverdue"
	};

	var mList = {
	   	NAME:"EVAL_REQ_LIST_MIT_NAME",
		Variants: {
			DEFAULT_VARIANT: mVariant.EVAL_REQ_ALL,
			TITLE: "EVAL_REQ_LIST_MIT_ALL",
		
			Values: [{
				TEXT: "EVAL_REQ_LIST_MIT_ALL",
				ACTION: mVariant.EVAL_REQ_ALL,
				FILTER: mFilter.NONE,
				MANAGE: false
            }, {
				TEXT: "EVAL_REQ_LIST_MIT_FOR_ME",
				ACTION: mVariant.EVAL_REQ_FOR_ME,
				HIERARCHY_LEVEL: "1",
				FILTER: mFilter.EVAL_REQ_FOR_ME,
				MANAGE: false
            }, {
				TEXT: "EVAL_REQ_LIST_MIT_FOR_ME_OVERDUE",
				ACTION: mVariant.EVAL_REQ_FOR_ME_OVERDUE,
				HIERARCHY_LEVEL: "1",
				FILTER: mFilter.EVAL_REQ_FOR_ME_OVERDUE,
				MANAGE: false
            }, {
				TEXT: "EVAL_REQ_LIST_MIT_MY",
				ACTION: mVariant.EVAL_REQ_MY,
				HIERARCHY_LEVEL: "1",
				FILTER: mFilter.EVAL_REQ_MY,
				MANAGE: true
            }, {
				TEXT: "EVAL_REQ_LIST_MIT_MY_OVERDUE",
				ACTION: mVariant.EVAL_REQ_MY_OVERDUE,
				HIERARCHY_LEVEL: "1",
				FILTER: mFilter.EVAL_REQ_MY_OVERDUE,
				MANAGE: true
            }]
		}
	};

	var oList = BaseController.extend("sap.ino.vc.evaluation.RequestsList", jQuery.extend({}, TopLevelPageFacet, MassActionMixin, {

		formatter: jQuery.extend({}, ObjectListFormatter),

		list: mList,

		routes: ["evalreqlist", "evalreqlistvariant"],

		view: {
			"List": {
				"VARIANT": mVariant.EVAL_REQ_ALL,
				"MANAGE": false,
				"TAGS": [],
				"IS_TAGS_SELECTION": false,
				"TAGCLOUD": true,
				"TAGCLOUD_EXPABLE": true,
				"TAGCLOUD_EXP": false,
				"TAGCLOUD_BAR_VISIBLE": false
			},
			"ORIENTATION": OrientationType.PORTRAIT
		},

		onInit: function() {
			BaseController.prototype.onInit.apply(this, arguments);
			this.oViewModel = this.getModel("view");
			this.oViewModel.setData(this.view, true);
			this.initApplicationObjectChangeListeners();
		},

		onRouteMatched: function(oEvent) {
			this.setGlobalFilter([]);
			this.setHelp("EVALREQ_LIST");
			this.show(oEvent);
			this._bInnerViewNavigation = true;
		},

		onCampaignDialogItemsSelect: function(oEvent) {
		    var sSelectedKey = oEvent.getParameter("selectedItem").data("ID") + "";
			var oCampaignFilterList = this.byId("panelFilterFragment--campaignFilterList");
			oCampaignFilterList.getBinding("suggestionItems").filter([]);
			var oCampaignFilterItems = oCampaignFilterList.getSuggestionItems();
			for (var i = 0; i < oCampaignFilterItems.length; i++) {
				if (oCampaignFilterItems[i].getProperty("key") === sSelectedKey) {
					oCampaignFilterList.setSelectionItem(oCampaignFilterItems[i]);
					break;
				}
			}
			if(sSelectedKey !== this.getViewProperty("/List/CAMPAIGN")){
			    this.setViewProperty("/List/CAMPAIGN", sSelectedKey);
			    this.setFilter(new Filter("CAMPAIGN_ID", FilterOperator.EQ, sSelectedKey));
			    this._filter();
			}
		},

		onCampaignDialogSearch: function(oEvent) {
		    var oBinding = oEvent.getParameter("itemsBinding");
			var sValue = jQuery.sap.encodeURL(oEvent.getParameter("value"));
			oBinding.filter(new Filter("SHORT_NAME", FilterOperator.Contains, sValue));
			oBinding.sort(new Sorter("SHORT_NAME"));
		},

		onCampaignSuggestion: function(oEvent) {
		    var oViewModel = this.getModel("view");
		    var oBinding = oEvent.getSource().getBinding("suggestionItems");
			var mEvent = jQuery.extend({}, oEvent, true);
			var sValue = mEvent.getParameter("suggestValue");
			this.resetClientMessages();
			this.byId("panelFilterFragment--campaignFilterList").setFilterSuggests(false);
			oViewModel.setProperty("/campaignSuggestion", this._aCampaignSuggestion);
			oBinding.filter(new Filter("SHORT_NAME", FilterOperator.Contains, sValue));
			oBinding.sort(new Sorter("SHORT_NAME"));
		},

		onFilterReset: function() {
			this.setViewProperty("/List/IDEA_TITLE", "");
			this.setViewProperty("/List/CAMPAIGN_TITLE", "");
			this.setViewProperty("/List/EXPERT_NAME", "");
			this.setViewProperty("/List/STATUS_TEXT", "");
			this.setViewProperty("/List/CAMPAIGN", undefined);
			this.setViewProperty("/List/ACCEPT_DATE", undefined);
			this.setViewProperty("/List/COMPLETE_DATE", undefined);
			var oTable = this.getList();
			var oColumns = oTable.getColumns();
			for (var i = 0; i < oColumns.length; i++) {
				oTable.filter(oColumns[i], null);
			}
			this.byId("panelFilterFragment--campaignFilterList").setValue(undefined);
			this.setFilter([]);

			if (!Device.system.desktop) {
				//no navigation on mobile phones yet
				return;
			}
		},

		onFilterCampaignChange: function(oEvent) {
			var sSelectedKey = oEvent.getParameter("selectedItem") ? Number(oEvent.getParameter("selectedItem").getProperty("key")) : undefined;
			if(sSelectedKey !== this.getViewProperty("/List/CAMPAIGN")){
			    this.setViewProperty("/List/CAMPAIGN", sSelectedKey);
			    this.setFilter(new Filter("CAMPAIGN_ID", FilterOperator.EQ, sSelectedKey));
			    this._filter();
			}
		},
		
		onClearCampaignFilter: function(oEvent) {
		    var sValue = oEvent.getParameter("value");
		    if (sValue.trim() === "") {
		        this.setViewProperty("/List/CAMPAIGN", undefined );
			    this.setFilter([]);
			    this._filter();
		    }
		},

		onHandleCampaignFilterHelp: function() {
			var oViewModel = this.getModel("view");
			if(!this._oCampaignlistDialog){
			    this._oCampaignlistDialog = this.createCampaignListDialog();
			}
			oViewModel.setProperty("/campaignSuggestion", this._aCampaignSuggestion);
			this._oCampaignlistDialog.open();
		},

		onOrientationChange: function() {},

		onTableFilter: function(oEvent) {
			oEvent.preventDefault();
			var oColumn = oEvent.getParameter("column");
			var sValue = oEvent.getParameter("value");
			var sId = oColumn.getId().substr(oColumn.getId().lastIndexOf("-") + 1);

			switch (sId) {
				case "colIdeaTitle":
					this.setViewProperty("/List/IDEA_TITLE", sValue);
					break;
				case "colExpert":
					this.setViewProperty("/List/EXPERT_NAME", sValue);
					break;
				case "colCampaign":
					this.setViewProperty("/List/CAMPAIGN_TITLE", sValue);
					break;
				case "colStatus":
					this.setViewProperty("/List/STATUS_TEXT", sValue);
					break;
				case "colAcceptDate":
					this.setViewProperty("/List/ACCEPT_DATE", sValue);
					break;
				case "colCompleteDate":
					this.setViewProperty("/List/COMPLETE_DATE", sValue);
					break;
				default:
					break;
			}

			oColumn.setFiltered(Boolean(sValue));
			this._filter();
		},

		onTableSelectionChange: function(oEvent) {
			var oTable = this.getList();
			var aSelect = oTable.getSelectedIndices();
			var aStatusForAcceptReject = jQuery.grep(aSelect, function(iIndex) {
				var sStatus = oTable.getContextByIndex(iIndex).getProperty("STATUS_CODE");
				return sStatus === "sap.ino.config.EVAL_REQ_REQUESTED" || sStatus === "sap.ino.config.EVAL_REQ_IN_CLARIFICATION";
			});
			var aStatusForCreate = jQuery.grep(aSelect, function(iIndex) {
				var sStatus = oTable.getContextByIndex(iIndex).getProperty("STATUS_CODE");
				return sStatus !== "sap.ino.config.EVAL_REQ_REJECTED" && sStatus !== "sap.ino.config.EVAL_REQ_COMPLETED" && sStatus !==
					"sap.ino.config.EVAL_REQ_EXPIRED";
			});
			var aStatusForFoward = jQuery.grep(aSelect, function(iIndex) {
				var sStatus = oTable.getContextByIndex(iIndex).getProperty("STATUS_CODE");
				return sStatus !== "sap.ino.config.EVAL_REQ_REJECTED" && sStatus !== "sap.ino.config.EVAL_REQ_COMPLETED" && sStatus !==
					"sap.ino.config.EVAL_REQ_EXPIRED" && sStatus !== "sap.ino.config.EVAL_REQ_ACCEPTED";
			});

			/* select items which shares the same "EVAL_REQ_ID" */
			if (this.getViewProperty("/List/IS_EVAL_REQ_LIST_BY_ME")) {
				// if (!this._bIsWarnedForEvalReq) {
				// 	this._bIsWarnedForEvalReq = true;
				// 	MessageBox.show(this.getText("SELECTION_WITH_EVAL_REQ_MESSAGE"), MessageBox.Icon.INFORMATION, this.getText("MESSAGE_TIT_WARNING"), [
				// 		MessageBox.Action.OK]);
				// }
				// if (this._bIsTableSelectionChanging) {
				// 	/* when selecting items and triggering this event, do not handle this event */
				// 	return;
				// }

				// var bSelected = aSelect.indexOf(oEvent.getParameter("rowIndex")) >= 0 ? true : false;
				// var iCount = oEvent.getParameter("rowIndex") === -1 || oEvent.getParameter("selectAll") ? 0 : oTable._getRowCount();
				// var iEvalReqId = oEvent.getParameter("rowIndex") === -1 || oEvent.getParameter("selectAll") ? 0 : oTable.getContextByIndex(oEvent.getParameter(
				// 	"rowIndex")).getProperty("EVAL_REQ_ID");

				// for (var j = 0; j < iCount; j++) {
				// 	this._bIsTableSelectionChanging = true;
				// 	if (oTable.getContextByIndex(j).getProperty("EVAL_REQ_ID") === iEvalReqId && j !== oEvent.getParameter("rowIndex")) {
				// 		if (bSelected) {
				// 			oTable.addSelectionInterval(j, j);
				// 		} else {
				// 			oTable.removeSelectionInterval(j, j);
				// 		}
				// 	}
				// }

				if (this.byId("sapInoMassDeleteBtn")) {
					this.byId("sapInoMassDeleteBtn").setEnabled(aSelect.length > 0);
				}

				// this._bIsTableSelectionChanging = false;
			}

			if (this.byId("sapInoAcceptBtn") && this.byId("sapInoRejectBtn") && this.byId("sapInoFowardBtn") && this.byId(
				"sapInoCreateBtn")) {
				this.byId("sapInoAcceptBtn").setEnabled(aSelect.length > 0 && aStatusForAcceptReject.length === aSelect.length);
				this.byId("sapInoRejectBtn").setEnabled(aSelect.length > 0 && aStatusForAcceptReject.length === aSelect.length);
				this.byId("sapInoFowardBtn").setEnabled(aSelect.length > 0 && aStatusForFoward.length === aSelect.length);
				this.byId("sapInoCreateBtn").setEnabled(aSelect.length > 0 && aStatusForCreate.length === aSelect.length);
			}
		},

		onTableColumnMenuOpen: function(oEvent) {
			var oMenu = oEvent.getParameter("menu");
			var sId = oEvent.getParameters().id;
			sId = sId.substr(sId.lastIndexOf("-") + 1);
			if (sId === "colAcceptDate" || sId === "colCompleteDate") {
				oMenu.onAfterRendering = function() {
					var oItem = $(oMenu.getItems()[2].getDomRef());
					oItem.find("label").html(this.getText("EVAL_REQ_LIST_FLD_WITHIN_NEXT"));
					oItem.find("input").addClass("sapUiTinyMarginBeginEnd").attr("style", "width:5em").attr("type", "number").attr("min", "1").after(
						"<label class='sapUiMnuTfItemLbl'>" + this.getText("EVAL_REQ_LIST_FLD_DAYS") + "</label>");
				};
			}
		},
		
		onTableBtnPress: function(oEvent){
            var oSource = oEvent.getSource();
            var iEvalId = oSource.getBindingContext("data").getProperty("ID");
            this.navigateTo("evaluationrequest-item", {
                id: iEvalId
            });
		},

		_filter: function() {
			var that = this;
			var aFilters = [];
			if (this.getViewProperty("/List/CAMPAIGN")) {
				aFilters.push(new Filter("CAMPAIGN_ID", FilterOperator.EQ, this.getViewProperty("/List/CAMPAIGN")));
			}
			if (this.getViewProperty("/List/CAMPAIGN_TITLE")) {
				aFilters.push(new Filter({
					path: "CAMPAIGN_TITLE",
					test: function(oValue) {
						var sValue = that.getViewProperty("/List/CAMPAIGN_TITLE");
						if (oValue && oValue.toLowerCase().indexOf(sValue.trim().toLowerCase()) >= 0) {
							return true;
						}
						return false;
					}
				}));
			}
			if (this.getViewProperty("/List/IDEA_TITLE")) {
				aFilters.push(new Filter({
					path: "IDEA_TITLE",
					test: function(oValue) {
						var sValue = that.getViewProperty("/List/IDEA_TITLE");
						if (oValue && oValue.toLowerCase().indexOf(sValue.trim().toLowerCase()) >= 0) {
							return true;
						}
						return false;
					}
				}));
			}
			if (this.getViewProperty("/List/EXPERT_NAME")) {
				aFilters.push(new Filter({
					path: "EXPERT_NAME",
					test: function(oValue) {
						var sValue = that.getViewProperty("/List/EXPERT_NAME");
						if (oValue && oValue.toLowerCase().indexOf(sValue.trim().toLowerCase()) >= 0) {
							return true;
						}
						return false;
					}
				}));
			}
			if (this.getViewProperty("/List/STATUS_TEXT")) {
				aFilters.push(new Filter({
					path: "STATUS_TEXT",
					test: function(oValue) {
						var sValue = that.getViewProperty("/List/STATUS_TEXT");
						if (oValue && oValue.toLowerCase().indexOf(sValue.trim().toLowerCase()) >= 0) {
							return true;
						}
						return false;
					}
				}));
			}
			if (this.getViewProperty("/List/ACCEPT_DATE")) {
				aFilters.push(new Filter({
					path: "ACCEPT_DATE",
					test: function(oValue) {
						var oDate = new Date();
						var sValue = that.getViewProperty("/List/ACCEPT_DATE");
						if (!oValue || isNaN(sValue)) {
							return false;
						}
						sValue = parseInt(sValue, 10);
						if (oDate.setDate(oDate.getDate() + sValue) < oValue) {
							return false;
						}
						return true;
					}
				}));
			}
			if (this.getViewProperty("/List/COMPLETE_DATE")) {
				aFilters.push(new Filter({
					path: "COMPLETE_DATE",
					test: function(oValue) {
						var oDate = new Date();
						var sValue = that.getViewProperty("/List/COMPLETE_DATE");
						if (!oValue || isNaN(sValue)) {
							return false;
						}
						sValue = parseInt(sValue, 10);
						if (oDate.setDate(oDate.getDate() + sValue) < oValue) {
							return false;
						}
						return true;
					}
				}));
			}
			this.getList()
				.getBinding("rows")
				.filter(aFilters.length ? new Filter(aFilters, true) : null, "Application");
		},

		_check4ManagingList: function() {
			var bBackoffice = Configuration.hasCurrentUserPrivilege("sap.ino.ui::backoffice.access");

			if (bBackoffice) {
				var sVariant = this.getViewProperty("/List/VARIANT");
				var aVariants = this.getListProperty("/Variants/Values");

				var vVariant = jQuery.grep(aVariants, function(oVariant) {
					return oVariant.ACTION === sVariant;
				});

				vVariant = (vVariant && vVariant.length > 0) ? vVariant[0] : {};

				return vVariant.MANAGE || vVariant.CAMPAIGN_MANAGE || false;
			}

			return false;
		},

		bindList: function() {
		    var that = this;
			this.saveState();

			// see MassActionMixin.js - cleans all internal state for mass action execution
			this.resetActionState();

			var sPath = "";
			var bIsLandscape = false;
			var oBindingParameter = this.getBindingParameter();
			
			function fnCallback(){
			    var aData = arguments[0].getParameter("data").results;
			    var aNewData = [];
			    var oViewModel = that.getModel("view");
			    jQuery.each(aData, function(iIndex, oItem){
			        if(jQuery.grep(aNewData, function(oNewItem){
			            return oNewItem.ID === oItem.CAMPAIGN_ID;
			        }).length === 0 || aNewData.length === 0){
			            aNewData.push({
			                ID: oItem.CAMPAIGN_ID,
			                SHORT_NAME: oItem.CAMPAIGN_TITLE
			            });
			        }
			    });
			    oViewModel.setProperty("/campaignSuggestion", aNewData);
			    that._aCampaignSuggestion = aNewData;
			    that._filter();
			}

			sPath += "SearchEvaluationRequestParams";
			sPath += "(filterName='" + (oBindingParameter.VariantFilter || "") + "'" + ")/Results";

			this.setPath("data>/" + sPath);

			if ((!Device.system.desktop && Device.orientation.landscape) ||
				(Device.system.desktop && this.getViewProperty("/ORIENTATION") === OrientationType.LANDSCAPE)) {
				bIsLandscape = true;
			}

			this.getList().bindRows({
				parameters: {
					operationMode: "Client"
				},
				sorter: new Sorter("COMPLETE_DATE", false),
				path: this.getPath(),
				events: {
					dataRequested: function() {
						jQuery.each(that.getBusyControls(), function(iIdx, oControl) {
							if (jQuery.type(oControl.setBusy) === "function") {
								oControl.setBusy(true);
							}
						});
					},
					dataReceived: function() {
						jQuery.each(that.getBusyControls(), function(iIdx, oControl) {
							if (jQuery.type(oControl.setBusy) === "function") {
								oControl.setBusy(false);
							}
						});

						if (jQuery.type(fnCallback) === "function") {
							fnCallback.apply(this,arguments);
						}
					}
				}
			});
		},

		createCampaignListDialog: function() {
			if (!this._campaignDialog) {
				this._campaignDialog = this.createFragment("sap.ino.vc.idea.fragments.CampaignSuggestionSelectList", this.getView().getId());
				this.getView().addDependent(this._campaignDialog);
			}
			return this._campaignDialog;
		},

		getBindingParameter: function() {
			var sVariant, sVariantFilter;
			sVariant = this.getViewProperty("/List/VARIANT");
			sVariantFilter = this.getCurrentVariant().FILTER;
			var sSearchTerm = this.getViewProperty("/List/SEARCH");
			var aTags = this.getViewProperty("/List/TAGS");
			var sCampaignId = this.getViewProperty("/List/CAMPAIGN");

			var aTagId = jQuery.map(aTags, function(oTag) {
				return oTag.ID;
			});

			return {
				Variant: sVariant,
				VariantFilter: sVariantFilter,
				SearchTerm: sSearchTerm,
				TagIds: aTagId,
				CampaignId: sCampaignId
			};
		},

		getList: function() {
			return this.byId("tablelist--evaluationrequestlist");
		},

		getVariantVisibility: function(sVariant) {
			var aVariants, bVisible;

			aVariants = this.getModel("list").getProperty("/Variants/Values");

			for (var i = 0; i < aVariants.length; i += 1) {
				var oVariant = aVariants[i];

				if (oVariant.ACTION === sVariant) {
					bVisible = oVariant.VISIBLE;
				}
			}

			return bVisible;
		},
		
		initApplicationObjectChangeListeners: function() {
			var that = this;
			var aActions = ["create", "del", "modifyAndSubmit", "executeStatusTransition", "forward"];

			var fnAOChangeListener = function(oEvent) {
				var sAction = oEvent.getParameter("actionName");
				if (sAction && aActions.indexOf(sAction) > -1 && oEvent.getParameter("object").getMetadata().getName() ===
					"sap.ino.commons.models.object.EvaluationRequestItem") {
					that.bindList();
				}
			};

			ApplicationObjectChange.attachChange(ApplicationObjectChange.Action.Create, fnAOChangeListener);
			ApplicationObjectChange.attachChange(ApplicationObjectChange.Action.Del, fnAOChangeListener);
			ApplicationObjectChange.attachChange(ApplicationObjectChange.Action.Action, fnAOChangeListener);
		},

		show: function(oEvent, oObject) {
			var oQuery;
			var sVariant;
			if (oEvent && oEvent.getParameter) {
				var oArguments = oEvent.getParameter("arguments");
				oQuery = oArguments["?query"];
				sVariant = oArguments.variant;
			} else {
				sVariant = oObject.variant;
				oQuery = oObject;
			}

			var that = this;

			var sDefaultVariant = this.getListProperty("/Variants/DEFAULT_VARIANT");
			this.setViewProperty("/isre", sVariant || sDefaultVariant);

			sVariant = this.getViewProperty("/isre");
			var oVariant = this.getVariant(sVariant);
			this.setViewProperty("/List/VARIANT", oVariant.ACTION);

			var bBound = this.getList() && this.getList().isBound("rows");

			var bRebindRequired = this.hasStateChanged(this.getCurrentRoute(), sVariant, oQuery, Device.orientation.portrait);
			bRebindRequired = bRebindRequired || this._bListChanged;
			this._bListChanged = false;

			if (!bBound || bRebindRequired) {
				// update the VISIBILITY flag of all variants for binding in Filter
				this.setVariantVisibility();

				this.setParameters(oQuery, oVariant);

				//TODO move to ListPage
				var iOrientation = this.getViewProperty("/ORIENTATION");
				this.onOrientationChange(Device.system.desktop ? iOrientation : Device.orientation);

				//check visiablity for current Variiant
				var bVisible = this.getVariantVisibility(sVariant);

				if (bVisible === false || typeof(bVisible) === "undefined") {
					MessageBox.show(
						that.getText("NOT_AUTHORIZED_MESSAGE"),
						MessageBox.Icon.INFORMATION,
						that.getText("NOT_AUTHORIZED_DIALOG_TITLE"), [MessageBox.Action.OK],
						function() {
							that.navigateTo("home");
						});
					return;
				}

				this.bindList();
			}
		},

		setParameters: function(oQuery, oVariant) {
			oQuery = oQuery || {};
			var sVariant = oVariant.ACTION;
			this.setViewProperty("/List/HAS_BACKOFFICE", Configuration.hasCurrentUserPrivilege("sap.ino.ui::backoffice.access"));
			this.setViewProperty("/List/TAGCLOUD", false);
			this.setViewProperty("/List/MANAGE", true);
			this.setViewProperty("/List/IS_EVAL_REQ_LIST", true);
			this.setViewProperty("/List/IS_EVAL_REQ_LIST_FOR_ME", false);
			this.setViewProperty("/List/IS_EVAL_REQ_LIST_BY_ME", false);
			this.setViewProperty("/List/IS_EVAL_REQ_LIST_ALL", false);
			this.setViewProperty("/DISABLE_ORIENTATION", true);
			if ([mVariant.EVAL_REQ_FOR_ME, mVariant.EVAL_REQ_FOR_ME_OVERDUE].indexOf(sVariant) >= 0) {
				this.setViewProperty("/List/IS_EVAL_REQ_LIST_FOR_ME", true);
				this.setViewProperty("/List/IS_EVAL_REQ_LIST_BY_ME", false);
				this.setViewProperty("/List/IS_EVAL_REQ_LIST_ALL", false);
				this.setViewProperty("/List/SELECTION_MODE", "Single");
			} else if ([mVariant.EVAL_REQ_MY, mVariant.EVAL_REQ_MY_OVERDUE].indexOf(sVariant) >= 0) {
				this.setViewProperty("/List/IS_EVAL_REQ_LIST_BY_ME", true);
				this.setViewProperty("/List/IS_EVAL_REQ_LIST_FOR_ME", false);
				this.setViewProperty("/List/IS_EVAL_REQ_LIST_ALL", false);
				this.setViewProperty("/List/SELECTION_MODE", "MultiToggle");
			} else {
				this.setViewProperty("/List/IS_EVAL_REQ_LIST_BY_ME", false);
				this.setViewProperty("/List/IS_EVAL_REQ_LIST_FOR_ME", false);
				this.setViewProperty("/List/IS_EVAL_REQ_LIST_ALL", true);
				this.setViewProperty("/List/SELECTION_MODE", "Single");
			}
			this.setViewProperty("/List/MANAGE", !this.getViewProperty("/List/IS_EVAL_REQ_LIST_ALL") && !oVariant.MANAGE || (oVariant.MANAGE &&
				Configuration.hasCurrentUserPrivilege("sap.ino.ui::backoffice.access")));
		},

		setVariantVisibility: function() {
			var aVariants = this.getModel("list").getProperty("/Variants/Values");

			for (var i = 0; i < aVariants.length; i += 1) {
				var oVariant = aVariants[i];
				var bIsManage = oVariant.MANAGE || false;
				var bIsExpert = oVariant.EXPERT || false;
				var bIsCampaignManage = oVariant.CAMPAIGN_MANAGE || false;

				var bVisible =  Configuration.getSystemSetting("sap.ino.config.EVAL_REQ_ACTIVE") === "1" &&
					(!bIsManage && !bIsExpert && !bIsCampaignManage) ||
					// user has expert role and variant is for experts
					(bIsExpert && Configuration.hasCurrentUserPrivilege("sap.ino.ui::expert")) ||
					// user has campaign manager role and variant is for campaign manager
					(bIsCampaignManage && Configuration.hasCurrentUserPrivilege("sap.ino.ui::campaign_manager")) ||
					// user has general backoffice privileges and variant has manage flag
					(bIsManage && Configuration.hasCurrentUserPrivilege("sap.ino.ui::backoffice.access"));
				this.getModel("list").setProperty("/Variants/Values/" + i + "/VISIBLE", bVisible);
			}
		}

	}));

	oList.list = mList;
	oList.routes = mRoutes;

	return oList;
});
}; // end of sap/ino/vc/evaluation/RequestsList.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.follow.CampaignFeedList.controller') ) {
sap.ui.getCore().loadLibrary("sap.ino.wall");

jQuery.sap.declare('sap.ino.vc.follow.CampaignFeedList.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/follow/CampaignFeedList.controller",[
    "sap/ino/vc/commons/BaseObjectModifyController",
    "sap/ino/commons/formatters/ObjectListFormatter",
    "sap/ino/vc/commons/TopLevelPageFacet",
    "sap/m/Label",
    "sap/ino/controls/IdentityActionCard",
    "sap/ino/commons/models/core/ClipboardModel",
    "sap/ino/commons/models/object/User",
    "sap/m/VBox",
    "sap/ino/vc/campaign/mixins/RegistrationMixin",
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/application/Configuration",
    "sap/ino/vc/commons/mixins/TagCardMixin",
    "sap/ino/vc/idea/mixins/VoteMixin",
    "sap/ino/vc/commons/mixins/FollowMixin",
    "sap/ino/vc/idea/mixins/VolunteerMixin",
    "sap/ino/vc/follow/mixins/FeedsMixin"
], function(Controller, FeedFormatter, TopLevelPageFacet, Label, IdentityActionCard, ClipboardModel, User, VBox, RegistrationMixin,
	JSONModel, Configuration,
	TagCardMixin, VoteMixin, FollowMixin, VolunteerMixin, FeedsMixin) {
	"use strict";

	return Controller.extend("sap.ino.vc.follow.CampaignFeedList", jQuery.extend({}, FeedFormatter, RegistrationMixin, TagCardMixin,
		TopLevelPageFacet, FeedsMixin, {
			formatter: jQuery.extend({}, this.formatter, FeedFormatter),

			onInit: function() {
				Controller.prototype.onInit.apply(this, arguments);
			},

			onRouteMatched: function(oEvent) {
				var oArgs = oEvent.getParameter("arguments");
				this.iCampaignId = parseInt(oArgs.id, 0);
				this.bindList();
			},

			getList: function() {
				return this.byId("campaignFeedList");
			},

			bindList: function() {
				var self = this;
				var sPath = Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/feed.xsjs";
				var aParameter = [];
				var oFeedList = this.byId("campaignFeedList");
				
				oFeedList.setBusy(true);
				if (this.iCampaignId) {
					aParameter.push("campaign=" + this.iCampaignId);
				}

				if (aParameter.length > 0) {
					sPath = sPath + "?" + aParameter.join("&");
				}

				var oFeedModel = new JSONModel(sPath);
				
				oFeedModel.attachRequestCompleted(null, function() {
				    oFeedList.setBusy(false);
				    if(oFeedModel.oData.results) {
    				      jQuery.each(oFeedModel.oData.results, function(iIndex, oFeed) {
    				        oFeed.EVENT_AT = new Date(oFeed.EVENT_AT);
    				      });
				    }
				    self.getView().setModel(oFeedModel, "feed");  
				}, oFeedModel);
			},

			onRefresh: function() {
				this.bindList();
			}
		}));
});
}; // end of sap/ino/vc/follow/CampaignFeedList.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.follow.FeedList.controller') ) {
sap.ui.getCore().loadLibrary("sap.ino.wall");

jQuery.sap.declare('sap.ino.vc.follow.FeedList.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/follow/FeedList.controller",[
    "sap/ino/vc/commons/BaseVariantListController",
    "sap/ino/vc/commons/TopLevelPageFacet",
    "sap/ino/commons/formatters/ObjectListFormatter",
    "sap/ino/commons/models/core/ClipboardModel",
    "sap/ino/vc/commons/mixins/FollowMixin",
    "sap/ino/commons/models/object/User",
    "sap/m/VBox",
    "sap/m/Link",
    "sap/ui/model/Sorter",
    "sap/ino/vc/campaign/mixins/RegistrationMixin",
    "sap/ino/vc/commons/mixins/TagCardMixin",
    "sap/ino/vc/idea/mixins/VoteMixin",
    "sap/ino/vc/idea/mixins/VolunteerMixin",
    "sap/ino/commons/models/object/Attachment",
    "sap/ino/vc/attachment/AttachmentMixin",
    "sap/ino/vc/follow/mixins/FeedsMixin"
], function(Controller, TopLevelPageFacet, Formatter,
ClipboardModel, FollowMixin, User, VBox, Link, Sorter, RegistrationMixin, TagCardMixin, VoteMixin, VolunteerMixin, Attachment, AttachmentMixin, FeedsMixin) {
	"use strict"; 

	return Controller.extend("sap.ino.vc.follow.FeedList", jQuery.extend({},Formatter, RegistrationMixin,FollowMixin, TopLevelPageFacet, TagCardMixin, AttachmentMixin, FeedsMixin, {
		routes: ["feedlist"],
		formatter: Formatter,
		onInit: function() {
			Controller.prototype.onInit.apply(this, arguments);
		},
	    
		onRouteMatched: function() {
		    this.bindList();
		    this.setHelp("FEED_LIST");
		},
		
		bindList: function(){
			var oBindingInfo = this.getList().getBindingInfo("items");
			this.getList().bindItems(oBindingInfo);
		},
		
		getList: function() {
			return this.byId("feedList");
		},
		
		onRefresh: function(){
		    this.bindList();  
		}
		
	}));
});
}; // end of sap/ino/vc/follow/FeedList.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.follow.List.controller') ) {
jQuery.sap.declare('sap.ino.vc.follow.List.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/follow/List.controller",[
    "sap/ino/vc/commons/BaseVariantListController",
    "sap/ui/Device",
    "sap/ui/model/Sorter",
    "sap/ui/model/json/JSONModel",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/ino/commons/application/Configuration",
    "sap/ino/commons/formatters/ObjectListFormatter",
    "sap/ino/vc/commons/TopLevelPageFacet",
    "sap/ino/vc/commons/mixins/FollowMixin",
    "sap/ino/vc/commons/mixins/TagCardMixin",
    "sap/ino/controls/OrientationType",
    "sap/m/MessageToast",
    "sap/ino/vc/campaign/mixins/RegistrationMixin",
    "sap/ino/vc/idea/mixins/VoteMixin",
    "sap/ino/vc/idea/mixins/VolunteerMixin"
], function(BaseController,
	Device,
	Sorter,
	JSONModel,
	Filter,
	FilterOperator,
	Configuration,
	ObjectListFormatter,
	TopLevelPageFacet,
	FollowMixin,
	TagCardMixin,
	OrientationType,
	MessageToast,
	RegistrationMixin,
	VoteMixin,
	VolunteerMixin
) {
	"use strict";

	var mOrder = {
		ASC: "ASC",
		DESC: "DESC"
	};

	var mSort = {
		NAME: "NAME",
		CREATED_AT: "FOLLOW_DATE"
	};

	var mVariant = {
		CAMPAIGN: "campaign",
		IDEA: "idea",
		TAG: "tag"
	};

	var mFilter = {
		NONE: undefined
	};

	var mList = {
		ADJUSTMENT_TITLE: "FOLLOWED_OBJECT_LIST_TIT_ADJUSTMENT",
		Filter: {},
		Sequence: ['campaign', 'idea', 'tag'],
		Sorter: {
			Values: [{
				TEXT: "SORT_MIT_NAME",
				ACTION: mSort.NAME,
				DEFAULT_ORDER: mOrder.ASC
            }, {
				TEXT: "SORT_MIT_FOLLOW",
				ACTION: mSort.CREATED_AT,
				DEFAULT_ORDER: mOrder.ASC
            }]
		},
		Order: {
			Values: [{
				TEXT: "ORDER_MIT_ASC",
				ACTION: mOrder.ASC
		    }, {
				TEXT: "ORDER_MIT_DESC",
				ACTION: mOrder.DESC
		    }]
		},
		Variants: {
			DEFAULT_VARIANT: mVariant.CAMPAIGN,
			TITLE: "FOLLOWED_OBJECT_LIST_TIT_VARIANTS",
			Values: [{
					TEXT: "FOLLOWED_OBJECT_LIST_MIT_CAMPAIGN",
					ACTION: mVariant.CAMPAIGN,
					FILTER: mFilter.NONE,
					DEFAULT_SORT: mSort.NAME,
					VISIBLE: true,
					OBJECT_COUNT: undefined
            }, {
					TEXT: "FOLLOWED_OBJECT_LIST_MIT_IDEA",
					ACTION: mVariant.IDEA,
					FILTER: mFilter.NONE,
					DEFAULT_SORT: mSort.NAME,
					VISIBLE: true,
					OBJECT_COUNT: undefined
            }, {
					TEXT: "FOLLOWED_OBJECT_LIST_MIT_TAG",
					ACTION: mVariant.TAG,
					FILTER: mFilter.NONE,
					DEFAULT_SORT: mSort.NAME,
					VISIBLE: true,
					OBJECT_COUNT: undefined
            }
        ]
		}
	};

	var mListContext = {
		FOLLOW: "followlist",
		FOLLOW_VARIANT: "followlistvariant"
	};

	var oFollowList = BaseController.extend("sap.ino.vc.follow.List", jQuery.extend({}, TopLevelPageFacet, RegistrationMixin, FollowMixin,
		TagCardMixin, VoteMixin, VolunteerMixin, {
			/* Controller reacts when these routes match */
			routes: ["followlist", "followlistvariant"],

			initialFocus: "mainFilterButton",

			/* ListModel defining filter, sorter and variants of the list */
			list: mList,

			formatter: ObjectListFormatter,

			/* ViewModel storing the current configuration of the list */
			view: {
				"List": {
					"SORT": mSort.NAME,
					"ORDER": undefined,
					"VARIANT": mVariant.CAMPAIGN,
					"Default": {
						"SORT": mSort.NAME,
						"ORDER": undefined,
						"VARIANT": mVariant.CAMPAIGN
					}
				},
				"ORIENTATION": OrientationType.LANDSCAPE
			},

			onInit: function() {
				BaseController.prototype.onInit.apply(this, arguments);

				this.oViewModel = this.getModel("view") || new JSONModel({});
				this.oViewModel.setData(this.view, true);

				this.getList().attachUpdateFinished(this.onListUpdateFinished, this);
			},

			onRouteMatched: function(oEvent, oObject) {
				var oQuery;
				var sVariant;

				if (oEvent && oEvent.getParameter) {
					var oArguments = oEvent.getParameter("arguments");
					this._sRoute = oEvent.getParameter("name");
					oQuery = oArguments["?query"];
					sVariant = oArguments.variant;
				} else {
					this._sRoute = oEvent;
					oQuery = oObject;
					sVariant = oObject.variant;
				}

				var sDefaultVariant = this.getListProperty("/Variants/DEFAULT_VARIANT");

				this.setViewProperty("/List/VARIANT", sVariant || sDefaultVariant);

				sVariant = this.getViewProperty("/List/VARIANT");

				var aSorter;
				var oVariant = this.getVariant(sVariant);

				var bBound = this.getList().isBound("items");

				// even if there is no query defined, we need to add the default sorter that is applied
				if (!oQuery || !oQuery.sort) {
					var sDefaultSort = oVariant.DEFAULT_SORT;
					var sDefaultOrder = this.getSort(sDefaultSort).DEFAULT_ORDER;

					oQuery = oQuery || {};

					oQuery.sort = oQuery.sort || sDefaultSort;
					// enhance for sort combination
					oQuery.sort = oQuery.sort + " " + (oQuery.order || sDefaultOrder);
				}

				var bRebindRequired = this.hasStateChanged(this._sRoute, sVariant, oQuery, Device.orientation.portrait);

				if (!bBound || bRebindRequired) {

					this.setParameters(oQuery, oVariant);

					aSorter = this.getSort(this.getViewProperty("/List/SORT"));

					this.setSorter(aSorter);

					//TODO move to ListPage
					var iOrientation = this.getViewProperty("/ORIENTATION");
					this.onOrientationChange(Device.system.desktop ? iOrientation : Device.orientation);

					this.setSortIcon(this.byId("panelFilterFragment--sortreverse"), this.getViewProperty("/List/ORDER"));

					this.bindList();
					this.initialSorterItems();
				}

				/* used to prevent opening and closing the filter while changing the variant, etc. */
				this._bInnerViewNavigation = true;
				/* auto open the filter bar when the page loaded */
				if (Device.system.desktop &&
					this._bAutoOpenFilter !== false /* undefined is ok */ ) {
					this.onShowFilterBar(true);
					this._bAutoOpenFilter = false;
				}
				this.setHelp("FOLLOW_LIST");
			},

			bindList: function() {
				var sVariant = this.getViewProperty("/List/VARIANT");
				this.saveState();

				this.setPath("data>/" + this.getBindingPath(sVariant));

				BaseController.prototype.bindList.apply(this);
			},

			getBindingPath: function(sVariant) {
				if (sVariant === "campaign") {
					return "MyCampaignFollow";
				} else if (sVariant === "idea") {
					return "MyIdeaFollow";
				} else {
					return "MyTagFollow";
				}
			},

			getVariantNumer: function(sVariant) {
				var sequence = this.getListProperty("/Sequence");
				return sequence && sequence.indexOf(sVariant);
			},

			getList: function() {
				return this.byId("objectlist");
			},

			onListUpdateFinished: function(object) {
				var sVariant = this.getViewProperty("/List/VARIANT");
				this.setListProperty("/Variants/Values/" + this.getVariantNumer(sVariant) + '/OBJECT_COUNT', object.getParameter('total'));
			},

			getItemTemplate: function() {
				var sVariant = this.getViewProperty("/List/VARIANT");
				if (sVariant === 'tag') {
					return this.getFragment("sap.ino.vc.tag.fragments.CardListItem");
				}
				var sRequiredTemplate;

				if ((!Device.system.desktop && Device.orientation.landscape) ||
					(Device.system.desktop && this.getViewProperty("/ORIENTATION") === OrientationType.LANDSCAPE)) {
					sRequiredTemplate = "Landscape";
				} else {
					sRequiredTemplate = "Portrait";
				}

				var oTemplate;
				switch (sRequiredTemplate) {

					case "Landscape":
						oTemplate = this.getFragment("sap.ino.vc." + sVariant + ".fragments.FlatListItem");
						break;
					case "Portrait":
						oTemplate = this.getFragment("sap.ino.vc." + sVariant + ".fragments.CardListItem");
						break;
					default:
						break;
				}
				return oTemplate;
			},

			//TODO move to ListPage
			onOrientationChange: function(eOrientation) {
				if (this.getList()) {
					var sVariant = this.getViewProperty("/List/VARIANT");
					if (sVariant === 'tag') {
						if (this.getPortraitStyle) {
							this.getList().addStyleClass(this.getPortraitStyle());
						}
						if (this.getLandscapeStyle) {
							this.getList().removeStyleClass(this.getLandscapeStyle());
						}
					    this.getList().setWrapping(true);
						return;
					}
					if (eOrientation === OrientationType.LANDSCAPE || eOrientation.landscape) {
						if (this.getPortraitStyle) {
							this.getList().removeStyleClass(this.getPortraitStyle());
						}
						if (this.getLandscapeStyle) {
							this.getList().addStyleClass(this.getLandscapeStyle());
						}
					} else {
						if (this.getPortraitStyle) {
							this.getList().addStyleClass(this.getPortraitStyle());
						}
						if (this.getLandscapeStyle) {
							this.getList().removeStyleClass(this.getLandscapeStyle());
						}
					}

					this.getList().setWrapping(!(eOrientation === OrientationType.LANDSCAPE || eOrientation.landscape));
				}
			},

			setParameters: function(oQuery, oVariant) {
				BaseController.prototype.setParameters.apply(this, arguments);
			},

			getDefaultVariantValue: function() {
				return [{
					TEXT: "FOLLOWED_OBJECT_LIST_MIT_CAMPAIGN",
					ACTION: mVariant.CAMPAIGN,
					FILTER: mFilter.NONE,
					DEFAULT_SORT: mSort.NAME,
					VISIBLE: true
		    }];
			},
			onOpenIdea: function(oEvent) {
				var iIdeaId;

				if (oEvent.getParameter("ideaId")) {
					iIdeaId = oEvent.getParameter("ideaId");
				} else {
					try {
						if (oEvent.getSource().getProperty("objectId")) {
							iIdeaId = oEvent.getSource().getProperty("objectId");
						}
					} catch (e) {
						iIdeaId = oEvent.getSource().getBindingContext("data").getProperty("ID");
					}
				}
				if (iIdeaId) {
					this.navigateTo("idea-display", {
						id: iIdeaId
					});
				}
			},
			onOpenCampaign: function(oEvent) {
				this.navigateTo("campaign", {
					id: oEvent.getParameter("campaignId")
				});
			},
			onItemPress: function(oEvent) {
				var oItem = oEvent.getSource();
				var oContext = oItem.getBindingContext("data");
				var isIdea = oEvent.getSource().getBindingContext("data").getProperty("CAMPAIGN_ID");
				if (isIdea) {
					this.navigateTo("idea-display", {
						id: oEvent.getSource().getBindingContext("data").getProperty("ID")
					});
				} else if (oContext) {
					this.navigateTo("campaign", {
						id: oContext.getProperty("ID")
					});
				}
			},
			onCreateIdea: function(oEvent) {
				this.navigateTo("idea-create", {
					query: {
						campaign: oEvent.getParameter("campaignId")
					}
				});
			},
			onIdeaCommentPress: function(oEvent) {
				var iIdeaId;
				if (oEvent.getParameter("ideaId")) {
					iIdeaId = oEvent.getParameter("ideaId");
				} else {
					try {
						if (oEvent.getSource().getProperty("objectId")) {
							iIdeaId = oEvent.getSource().getProperty("objectId");
						}
					} catch (e) {
						iIdeaId = oEvent.getSource().getBindingContext("data").getProperty("ID");
					}
				}
				if (iIdeaId) {
					this.navigateTo("idea-display", {
						id: iIdeaId,
						query: {
							section: "sectionComments"
						}
					});
				}
			}
		}));

	oFollowList.list = mList;
	oFollowList.listContext = mListContext;

	return oFollowList;
});
}; // end of sap/ino/vc/follow/List.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.gamification.LeaderBoard.controller') ) {
jQuery.sap.declare('sap.ino.vc.gamification.LeaderBoard.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.m.SegmentedButtonItem'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/gamification/LeaderBoard.controller",[
    "sap/ino/vc/commons/BaseController",
    "sap/ino/commons/application/Configuration",
    "sap/ui/model/json/JSONModel",
    "sap/ino/vc/commons/TopLevelPageFacet",
    "sap/ui/Device",
    "sap/ino/vc/commons/mixins/ClipboardMixin",
    "sap/ino/vc/commons/mixins/IdentityQuickviewMixin",
    "sap/ino/commons/formatters/ObjectListFormatter",
    "sap/m/SegmentedButtonItem"
], function(
	BaseController,
	Configuration,
	JSONModel,
	TopLevelPageFacet,
	Device,
	ClipboardMixin,
	IdentityQuickviewMixin,
	ObjectListFormatter,
	SegmentedButtonItem
) {
	"use strict";

	var oFormatter = {
		formatTitle: function(code, text) {
			return text;
		},
		formatMyRanking: function(iUserId) {
			var iCurrentUserId = Configuration.getCurrentUser().USER_ID;
			if (iUserId === iCurrentUserId) {
				return true;
			} else {
				return false;
			}
		},
		formatRankImage: function(iSequence) {
			var iSeq = parseInt(iSequence, 10);
			if (iSeq > 3) {
				return null;
			}
			var sPath = jQuery.sap.getModulePath("sap.ino.assets");
			if (iSeq === 1) {
				//"./ngui/sap/ino/assets/img/gold.png"		
				return sPath + "/img/leaderBoard/gold2x.png";
			} else if (iSeq === 2) {
				return sPath + "/img/leaderBoard/sliver2x.png";
			} else if (iSeq === 3) {
				return sPath + "/img/leaderBoard/bronze2x.png";
			}

		},
		formatVisbleNumber: function(iSequence) {
			if (parseInt(iSequence, 10) > 3) {
				return true;
			} else {
				return false;
			}
		},
		formatVisbleRankImage: function(iSequence) {
			if (parseInt(iSequence, 10) <= 3) {
				return true;
			} else {
				return false;
			}
		},
		formatTooltipRank: function(iSequence) {
			return this.getText("LEADER_BOARD_RANK", [iSequence]);
		}
	};

	jQuery.extend(oFormatter, ObjectListFormatter);

	return BaseController.extend("sap.ino.vc.gamification.LeaderBoard", jQuery.extend({}, TopLevelPageFacet, ClipboardMixin,
		IdentityQuickviewMixin, {
			routes: ["leaderboard"],

			formatter: oFormatter,

			view: {
				"showCommentDialogBtn": false
			},

			onInit: function() {
				BaseController.prototype.onInit.apply(this, arguments);
				this.oViewModel = this.getModel("view");
				this.oViewModel.setData(this.view, true);
			},

			onRouteMatched: function() {
				this.generateDimensionSegmentBtn();
			},
			generateDimensionSegmentBtn: function() {
				var that = this;
				var oSegBtn = this.byId('leaderBoardSegBtn');
				var sURL = Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/dimension.xsjs/getAllActiveDimension";
				var oAjaxPromise = jQuery.ajax({
					url: sURL,
					headers: {
						"X-CSRF-Token": Configuration.getXSRFToken()
					},
					dataType: "json",
					type: "POST",
					contentType: "application/json; charset=UTF-8",
					async: true
				});
				oAjaxPromise.done(function(result) {
					var dimensionItems = result.RESULT.ALL_ACTIVE_DIMENSION;
					var oModel = new JSONModel();
					oModel.setData(dimensionItems);
					that.getView().setModel(oModel, "dimension");
					if (dimensionItems.length === 0) {
						return;
					}
					if (oSegBtn) {
						oSegBtn.removeAllItems();
						var oTemplate = new SegmentedButtonItem({
							text: "{dimension>NAME}",
							tooltip: "{dimension>NAME}",
							key: "{dimension>ID}",
							press: function(oEvent) {
								that.onPressItem(oEvent);
							}
						});
						oSegBtn.bindItems({
							path: "dimension>/",
							template: oTemplate
						});
					}
					var iWidth = dimensionItems.length * 10;
					oSegBtn.setWidth("80%");
					oSegBtn.fireSelect(oSegBtn.getItems()[0]);
					that.setViewProperty("/SELECTED_DIMENSION_ID", dimensionItems[0].ID);
					that.bindViewData();
				});
			},
			onPressItem: function(oEvent) {
				var oSource = oEvent.getSource();
				var oCurrentKey = oSource.getKey();
				var aItems = this.getModel("dimension").getData();
				for (var i = 0; i < aItems.length; i++) {
					if (oCurrentKey === aItems[i].ID.toString()) {
						this.setViewProperty("/SELECTED_DIMENSION_ID", aItems[i].ID);
						break;
					}
				}
				this.byId('leaderBoardSegBtn').setBusy(true);
				this.bindViewData();
			},
			bindViewData: function() {
				var that = this;
				var leaderBoardTemplate = this.getFragment("sap.ino.vc.gamification.fragments.leaderBoardItem");
				var oBody = {
					DIMENSION_ID: this.getViewProperty("/SELECTED_DIMENSION_ID")
				};
				var sURL = Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/dimension.xsjs/getLeaderBoardByDimension";
				var oAjaxPromise = jQuery.ajax({
					url: sURL,
					headers: {
						"X-CSRF-Token": Configuration.getXSRFToken()
					},
					data: JSON.stringify(oBody),
					dataType: "json",
					type: "POST",
					contentType: "application/json; charset=UTF-8",
					async: true
				});
				oAjaxPromise.done(function(result) {
					var aLeaderBoardRanking = result.RESULT.LeaderBoardRanking;
					var oSelfRanking = result.RESULT.SelfRanking;
					var oModel = that.getView().getModel("dimension");
					var aLeaderBoardData = [],
						bSelfFound = false,
						sImageID = null,
						selfImageID = null;

					for (var i = 0; i < aLeaderBoardRanking.length; i++) {
						sImageID = null;
						if (JSON.stringify(aLeaderBoardRanking[i].BADGE) !== "{}" && aLeaderBoardRanking[i].BADGE.currentBadge.Attachment &&
							aLeaderBoardRanking[i].BADGE.currentBadge.Attachment.length > 0) {
							sImageID = aLeaderBoardRanking[i].BADGE.currentBadge.Attachment[0].ATTACHMENT_ID;
						}

						aLeaderBoardData.push({
							USER_ID: aLeaderBoardRanking[i].IDENTITY_ID,
							USER_NAME: aLeaderBoardRanking[i].NAME,
							IMAGE_ID: aLeaderBoardRanking[i].IDENTITY_IMAGE_ID,
							SEQUENCE: aLeaderBoardRanking[i].ranking,
							BADGE_IMAGE_ID: sImageID,
							BADGE_NAME: JSON.stringify(aLeaderBoardRanking[i].BADGE) !== "{}" ? aLeaderBoardRanking[i].BADGE.currentBadge.NAME : null
						});
						if (oSelfRanking && !bSelfFound) {
							bSelfFound = aLeaderBoardRanking[i].IDENTITY_ID === oSelfRanking.IDENTITY_ID ? true : false;
						}
					}
					if (oSelfRanking && !bSelfFound) {
						if (JSON.stringify(oSelfRanking.BADGE) !== "{}" && oSelfRanking.BADGE.currentBadge.Attachment && oSelfRanking.BADGE.currentBadge
							.Attachment.length > 0) {
							selfImageID = oSelfRanking.BADGE.currentBadge.Attachment[0].ATTACHMENT_ID;
						}

						aLeaderBoardData.push({
							USER_ID: oSelfRanking.IDENTITY_ID,
							USER_NAME: oSelfRanking.NAME,
							IMAGE_ID: oSelfRanking.IDENTITY_IMAGE_ID,
							SEQUENCE: oSelfRanking.ranking,
							BADGE_IMAGE_ID: selfImageID,
							BADGE_NAME: JSON.stringify(oSelfRanking.BADGE) !== "{}" ? oSelfRanking.BADGE.currentBadge.NAME : null
						});
					}
					oModel.setProperty("/LeaderBoardRanking", aLeaderBoardData);
					var oTemplate = {
						path: "dimension>/LeaderBoardRanking",
						template: leaderBoardTemplate
					};
					var oList = that.byId("leaderBoardList");
					oList.bindItems(oTemplate);
				});
				that.byId('leaderBoardSegBtn').setBusy(false);
			}
		}));
});
}; // end of sap/ino/vc/gamification/LeaderBoard.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.home.CommunityHome.controller') ) {

jQuery.sap.declare('sap.ino.vc.home.CommunityHome.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/home/CommunityHome.controller",[
    "sap/ino/vc/commons/BaseObjectController",
    "sap/ino/vc/iam/mixins/IdentityProfileMixin",
    "sap/ino/commons/application/Configuration",
    "sap/ui/model/Sorter",
    "sap/ui/model/Filter",
    "sap/ino/vc/idea/mixins/VoteMixin",
    "sap/ino/vc/commons/mixins/FollowMixin",
    "sap/ino/commons/formatters/ObjectListFormatter",
    "sap/ino/vc/commons/mixins/TagCardMixin",
    "sap/ino/vc/campaign/mixins/RegistrationMixin",
    "sap/ino/vc/idea/RewardFormatter",
    "sap/ino/vc/idea/mixins/VolunteerMixin",
    "sap/ui/core/IconPool",
    "sap/ino/vc/follow/mixins/FeedsMixin",
    "sap/ino/commons/models/object/Homepagewidget",
    "sap/ui/model/json/JSONModel"
], function(Controller,
	IdentityProfileMixin,
	Configuration,
	Sorter,
	Filter,
	VoteMixin, 
	FollowMixin, 
	ObjectListFormatter, 
	TagCardMixin, RegistrationMixin, RewardFormatter, VolunteerMixin, IconPool, FeedsMixin, Homepagewidget, JSONModel) {
	"use strict";

	var mIdentityProfile = {
		Community: {
			PATH: "/EntityCount(1)",
			SHOW_BUTTONS: true,
			Binding: [{
				ICON: "sap-icon://InoIcons/campaign",
				LINK_TEXT: "PROFILE_LNK_CAMPAIGNS_OPENED",
				COUNT: "OPEN_CAMPAIGN_COUNT",
				Route: {
					NAME: "campaignlistvariant",
					QUERY: {
						variant: "open"
					}
				},
				ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role","sap.ino.ui::camps_part_role"]
            }, 
    //         {
				// ICON: "sap-icon://lightbulb",
				// LINK_TEXT: "PROFILE_LNK_PENDING_EVAL_MY",
				// COUNT: "EVALUATION_PENDING_COUNT",
				// EXPERT: true,
				// Route: {
				// 	NAME: "idealistvariant",
				// 	QUERY: {
				// 		variant: "evalpending"
				// 	}
				// },
				// ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role", "sap.ino.ui::camps_expert_role",
				// 	"sap.ino.ui::camps_resp_expert_role"]
    //         }, 
            {
				ICON: "sap-icon://lightbulb",
				LINK_TEXT: "PROFILE_LNK_OPEN_FOR_EVALUATION",
				COUNT: "EVALUATION_OPEN_COUNT",
				EXPERT: true,
				Route: {
					NAME: "idealistvariant",
					QUERY: {
						variant: "evalopen"
					}
				},
				ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role", "sap.ino.ui::camps_expert_role",
					"sap.ino.ui::camps_resp_expert_role"]
            }, {
				ICON: "sap-icon://lightbulb",
				LINK_TEXT: "PROFILE_LNK_IDEAS_MY",
				COUNT: "AUTHORED_IDEA_COUNT",
				Route: {
					NAME: "idealistvariant",
					QUERY: {
						variant: "my"
					}
				},
				ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role", "sap.ino.ui::camps_part_role"]
            }, {
				ICON: "sap-icon://lightbulb",
				LINK_TEXT: "PROFILE_LNK_EVAL_BY_ME",
				COUNT: "EVALUATED_IDEA_COUNT",
				EXPERT: true,
				Route: {
					NAME: "idealistvariant",
					QUERY: {
						variant: "eval"
					}
				},
				ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role", "sap.ino.ui::camps_expert_role",
					"sap.ino.ui::camps_resp_expert_role"]
            }, {
				ICON: "sap-icon://InoIcons/wall",
				LINK_TEXT: "PROFILE_LNK_WALLS_MY",
				COUNT: "MY_WALLS_COUNT",
				Route: {
					NAME: "walllistvariant",
					QUERY: {
						variant: "my"
					}
				},
				ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role", "sap.ino.ui::camps_part_role"]
            }, {
				ICON: "sap-icon://InoIcons/heart",
				LINK_TEXT: "PROFILE_LNK_MY_VOTES",
				COUNT: "MY_VOTES_IDEA_COUNT",
				Route: {
					NAME: "idealistvariant",
					QUERY: {
						variant: "voted"
					}
				},
				ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role", "sap.ino.ui::camps_expert_role",
					"sap.ino.ui::camps_resp_expert_role", "sap.ino.ui::camps_part_role"]
            }, {
				ICON: "sap-icon://comment",
				LINK_TEXT: "PROFILE_LNK_MY_COMMENTS",
				COUNT: "MY_COMMENTS_IDEA_COUNT",
				Route: {
					NAME: "idealistvariant",
					QUERY: {
						variant: "commented"
					}
				},
				ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role", "sap.ino.ui::camps_expert_role",
					"sap.ino.ui::camps_resp_expert_role", "sap.ino.ui::camps_part_role"]
            }, {
				ICON: IconPool.getIconURI('following', 'InoIcons'),
				LINK_TEXT: "PROFILE_LNK_FOLLOWED_MY",
				COUNT: "MY_FOLLOWED_COUNT",
				Route: {
					NAME: "followlistvariant",
					QUERY: {
						variant: "campaign"
					}
				},
				ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role", "sap.ino.ui::camps_expert_role",
					"sap.ino.ui::camps_resp_expert_role", "sap.ino.ui::camps_part_role"]
            }
    //         , {
				// ICON: "sap-icon://clinical-tast-tracker",
				// LINK_TEXT: "PROFILE_LNK_PENDING_EVAL_REQ_MY",
				// COUNT: "MY_PENDING_EVAL_ITEM_COUNT",
				// Route: {
				// 	NAME: "evalreqlistvariant",
				// 	QUERY: {
				// 		variant: "forme"
				// 	}
				// },
				// ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role", "sap.ino.ui::camps_expert_role",
				// 	"sap.ino.ui::camps_resp_expert_role"]              
    //         }
            ]
		}
	};

	var mList = {
		"my": {
			sPath: "data>/MyIdeaMediumCommunity",
			sorter: new Sorter("CHANGED_AT", true)
		},
		"all": {
			sPath: "data>/IdeaMediumCommunity",
			filter: [new Filter("STATUS", "NE", "sap.ino.config.DRAFT")],
			sorter: new Sorter("SUBMITTED_AT", true)
		},
		"completed": {
		    sPath: "data>/IdeaMediumSearchParams(searchToken='',tagsToken='',tagsToken1='',tagsToken2='',tagsToken3='',tagsToken4='',filterName='completedIdeas',filterBackoffice=0,c1='',o1=-2,v1='',c2='',o2=-1,v2='',c3='',o3=-1,v3='',cvt='',cvr=0,cvy=0)/Results",
			sorter: new Sorter("SUBMITTED_AT", true)
		}
	};

	// mapping of container and content ids for each layout size
	var mLayout = {
		XS: {
			centerProfileContainer: "identityProfileFragment--identityProfile",
			centerTopContributorContainer: "topContributorFragment--topContributor",
			centerBlogContainer: "blogsFragment--blogCommunity",
			rightTopContributorContainer: undefined,
			leftProfileContainer: undefined
		},
		S: {
			leftProfileContainer: "identityProfileFragment--identityProfile",
			centerTopContributorContainer: "topContributorFragment--topContributor",
			centerBlogContainer: "blogsFragment--blogCommunity"
		},
		M: {
			leftProfileContainer: "identityProfileFragment--identityProfile",
			centerTopContributorContainer: "topContributorFragment--topContributor",
			centerBlogContainer: "blogsFragment--blogCommunity"
		},
		L: {
			leftProfileContainer: "identityProfileFragment--identityProfile",
			centerTopContributorContainer: "topContributorFragment--topContributor",
			centerBlogContainer: "blogsFragment--blogCommunity"
		},
		XL: {
			leftProfileContainer: "identityProfileFragment--identityProfile",
			rightTopContributorContainer: "topContributorFragment--topContributor",
			rightTopBlogContainer: "blogsFragment--blogCommunity"
		}
	};

	return Controller.extend("sap.ino.vc.home.CommunityHome", jQuery.extend({}, IdentityProfileMixin, VoteMixin, FollowMixin, TagCardMixin,
		RegistrationMixin, VolunteerMixin, ObjectListFormatter, FeedsMixin, {

			identityProfile : mIdentityProfile,
			list : mList,
			
			formatter: jQuery.extend({}, ObjectListFormatter, RewardFormatter),

			initialFocus: ["backofficeButton--backofficeToogle", "identityProfileFragment--createIdea"],

			onInit: function() {
				Controller.prototype.onInit.apply(this, arguments);
				this.aBusyControls = [this.getView()];
				
				// get home page widget configuration
				var oDeffered = Homepagewidget.getCommunityHomepageWidget();
				oDeffered.done(function(oData) {
				    var oWidgetData = oData.RESULT[0] || {IS_VISIBLE: false, HTML_CONTENT: ""};
                    oWidgetData.IS_VISIBLE = !!oWidgetData.IS_VISIBLE;
                    this.getView().setModel(new JSONModel(oWidgetData), "widget");
				}.bind(this));
			},

			feedTitleLink: function(iObjectId, sObjectTypeCode) {
				if (!isNaN(parseInt(iObjectId, 10))) {
					switch (sObjectTypeCode) {
						case 'CAMPAIGN':
							return ObjectListFormatter.navigationLink.apply(this, ["campaign", {
								id: iObjectId
    				    }]);
						case 'IDEA':
							return ObjectListFormatter.navigationLink.apply(this, ["idea-display", {
								id: iObjectId
    				    }]);
    				    default:
    				        break;
					}

				}
				return undefined;
			},

			show: function(oParentView) {
				this._oParentView = oParentView;
				this.setIdentityProfileBinding();
				this.bindViewData();
			},

			setIdentityProfileBinding: function() {
				this.bindIdentityProfile(this.byId("identityProfileFragment--identityProfile"), mIdentityProfile.Community);

				if (this.getModel("data").getProperty(mIdentityProfile.Community.PATH)) {
					var oController = this;
					this.getModel("data").read(mIdentityProfile.Community.PATH, {
						success: function() {
							var oBinding = oController.byId("identityProfileFragment--identityProfileList").getBindingInfo("items");
							oController.byId("identityProfileFragment--identityProfileList").bindItems(oBinding);
						}
					});
				}
			},

			bindViewData: function() {
				this._bindCampaigns();
				this.setViewProperty("/IS_COMMUNITY_VIEW", true); //->Mark Community view, No edit&delete button in Blog list
				var sIdeaViewKey;
				if (this.getModel("device").getProperty("/system/phone")) {
					sIdeaViewKey = Object.keys(mList)[0];
				} else {
					sIdeaViewKey = this.byId("ideasFragment--sapInoHomeIdeasButtons").getSelectedKey();
				}
				this._sIdeaViewKey = sIdeaViewKey || Object.keys(mList)[0];
				this._bindIdeas(this._sIdeaViewKey);
				this._bindBlogs();
			},

			onResizeLayoutChange: function(sOldSize, sNewSize) {
				var that = this;

				function setVisibility(aList, iNrShown) {
					for (var i = 0; i < aList.length; i += 1) {
						if (i < iNrShown) {
							aList[i].setVisible(true);
						} else {
							aList[i].setVisible(false);
						}
					}
				}

				function setVisibleItems(sListId) {
					var oList = that.byId(sListId);
					var aItems = oList.getItems();
					switch (sNewSize) {
						case "XL":
							//campaign blogs list should be shown 3 items on the right
							if (sListId === "blogsFragment--blogsList") {
								setVisibility(aItems, 3);
							} else {
								setVisibility(aItems, 4);
							}
							break;
						case "L":
							setVisibility(aItems, 4);
							break;
						case "M":
							setVisibility(aItems, 3);
							break;
						case "S":
							setVisibility(aItems, 2);
							break;
						case "XS":
							setVisibility(aItems, 1);
							break;
						default:
						    break;
							// do nothing - unknown size
					}
				}

				var bIsPhone = this.getModel("device").getProperty("/system/phone");
				if (!bIsPhone) {
					// card hiding based on size
					setVisibleItems("ideasFragment--ideasList");
					setVisibleItems("blogsFragment--blogsList");
				}
			},

			_bindCampaigns: function() {
				var sPath = "data>/CampaignSearchParams(searchToken=''," +
					"tagsToken=''," + "tagsToken1=''," + "tagsToken2=''," + "tagsToken3=''," + "tagsToken4=''," +
					"filterName='openCampaigns'," +
					"filterBackoffice=0)/Results";
				var oCarousel = this.byId("campaignsListFragment--campaignsCarousel");
				oCarousel.bindAggregation(
					"pages", {
						path: sPath,
						template: this.createFragment("sap.ino.vc.home.fragments.CampaignBanner"),
						length: 4,
						top: 4,
						filters: [new Filter("STATUS_CODE", "NE", "sap.ino.config.CAMP_DRAFT")],
						sorter: new Sorter("SUBMIT_TO", false)
					}
				);
			},

			_bindIdeas: function(sKey) {
				var bIsPhone = this.getModel("device").getProperty("/system/phone");
                var disableImage = Configuration.getSystemSetting("sap.ino.config.DISABLE_IDEA_IMAGE") * 1 || Configuration.getSystemSetting("sap.ino.config.DISABLE_IDEA_IMAGE_HIDE_PHASE_BAR") * 1;
				var template = Number(disableImage) ? this.getFragment("sap.ino.vc.idea.fragments.CardListItemNoImage") : this.getFragment("sap.ino.vc.idea.fragments.CardListItem");
				var oTemplate = {
					path: mList[sKey].sPath,
					template: template,
					length: 4,
					top: 4,
					sorter: mList[sKey].sorter,
					filters: mList[sKey].filter
				};

				var that = this;
				var sPath = "";
				var sFilter = "";
				var sSorter = "";
    			var sSelect = "&$select(ID)";
    			var bBackoffice = Configuration.hasCurrentUserPrivilege("sap.ino.ui::backoffice.access");
			    var sOdataPath = "";
			    if (bBackoffice) {
			        sOdataPath = "/sap/ino/xs/rest/backoffice/odata.xsodata";
			    } else {
			        sOdataPath = "/sap/ino/xs/rest/community/odata.xsodata";
			    }
				if (bIsPhone) {
					var oCarousel = this.byId("ideasFragment--ideasCarousel");
					oCarousel.bindAggregation("pages", oTemplate);
					sPath = Configuration.getBackendRootURL() + sOdataPath + oCarousel.mBindingInfos.pages.binding.sPath + "?$format=json";
    				sFilter = oCarousel.mBindingInfos.pages.binding.sFilterParams;
    				sSorter = oCarousel.mBindingInfos.pages.binding.sSortParams;
				} else {
					var oList = this.byId("ideasFragment--ideasList");
					oList.bindItems(oTemplate);
					oList.attachEventOnce("updateFinished", function(oEvent) {
						that.onResizeLayoutChange(null, that._sCurrentLayout);
					});
					sPath = Configuration.getBackendRootURL() + sOdataPath + oList.mBindingInfos.items.binding.sPath + "?$format=json";
    				sFilter = oList.mBindingInfos.items.binding.sFilterParams;
    				sSorter = oList.mBindingInfos.items.binding.sSortParams;
				}

				// set title accordingly
				var oTitle = this.byId("ideasFragment--panelTitle");
				oTitle.setText(this.getText("HOMEPAGE_PANEL_IDEAS_" + sKey.toUpperCase()));
				// set idea list search params
				sPath = sPath + "&" + sSorter + "&" + sFilter + sSelect;
				var oIdeaSearchParams = new JSONModel();
				oIdeaSearchParams.setData({
				    path: sPath
				});
				sap.ui.getCore().setModel(oIdeaSearchParams, "ideaSearchParams");
			},

			_bindBlogs: function() {
				if (Configuration.getCurrentUser().USER_ID) {
					var bIsPhone = this.getModel("device").getProperty("/system/phone");
					var sPath = "data>/BlogSearchParams(searchToken=''," +
						"tagsToken=''," +
						"filterName='publishedBlogs')/Results";
					var oBinding = {
						path: sPath,
						template: this.getFragment("sap.ino.vc.blog.fragments.ListItemHome"),
						sorter: new Sorter("PUBLISHED_AT", true),
						length: 4,
						top: 4
					};
					var that = this;
					if (bIsPhone) {
						var oCarousel = this.byId("blogsFragment--blogsCarousel");
						oCarousel.bindAggregation("pages", oBinding);
					} else {
						var oList = this.byId("blogsFragment--blogsList");
						if (oList) {
							oList.bindItems(oBinding);
							oList.attachEventOnce("updateFinished", function() {
								that.onResizeLayoutChange(null, that._sCurrentLayout);
							});
						}
					}
					var oTitle = this.byId("blogsFragment--panelBlogTitle");
					oTitle.setText(this.getText("HOMEPAGE_PANEL_CAMPAIGN_BLOGS"));
				}
			},

			onIdeaListTypeSelect: function(oEvent) {
				// two options: either by SegmentedButton or Select
				this._sIdeaViewKey = oEvent.getParameter("key") || oEvent.getParameter("selectedItem") && oEvent.getParameter("selectedItem").getKey();
				this._bindIdeas(this._sIdeaViewKey);
			},

			onNavigateToIdeas: function() {
				if (!this._sIdeaViewKey) {
					this.navigateTo("idealist");
				} else {
					this.navigateTo("idealistvariant", {
						variant: this._sIdeaViewKey
					});
				}
			},
			onNavigateToBlogs: function() {
				this.navigateTo("bloglist");
			},

			onNavigateToCampaigns: function() {
				this.navigateTo("campaignlistvariant", {
					variant: "open"
				});
			},

			onCampaignsListItemPress: function(oEvent) {
				var oItem = oEvent.getSource();
				var oContext = oItem.getBindingContext("data");
				if (oContext) {
					this.navigateTo("campaign", {
						id: oContext.getProperty("ID")
					});
				}
			},

			onCardItemPress: function(oEvent) {
				var oItem = oEvent.getSource();
				var oIdeaCard = oItem.getAggregation("content")[0];
				oIdeaCard.getFocusDomRef().focus();
			},

			onCreateIdea: function(oEvent) {
				this.navigateTo("idea-create", {
					query: {
						campaign: oEvent.getParameter("campaignId")
					}
				});
			},

			onOpenIdea: function(oEvent) {
				var iIdeaId;

				if (oEvent.getParameter("ideaId")) {
					iIdeaId = oEvent.getParameter("ideaId");
				} else {
					try {
						if (oEvent.getSource().getProperty("objectId")) {
							iIdeaId = oEvent.getSource().getProperty("objectId");
						}
					} catch (e) {
						iIdeaId = oEvent.getSource().getBindingContext("data").getProperty("ID");
					}
				}
				if (iIdeaId) {
					this.navigateTo("idea-display", {
						id: iIdeaId
					});
				}
			},

			onIdeaCommentPress: function(oEvent) {
				var iIdeaId;

				if (oEvent.getParameter("ideaId")) {
					iIdeaId = oEvent.getParameter("ideaId");
				} else {
					try {
						if (oEvent.getSource().getProperty("objectId")) {
							iIdeaId = oEvent.getSource().getProperty("objectId");
						}
					} catch (e) {
						iIdeaId = oEvent.getSource().getBindingContext("data").getProperty("ID");
					}
				}
				if (iIdeaId) {
					this.navigateTo("idea-display", {
						id: iIdeaId,
						query: {
							section: "sectionComments"
						}
					});
				}
			},

			onOpenCampaign: function(oEvent) {
				this.navigateTo("campaign", {
					id: oEvent.getParameter("campaignId")
				});
			},

			getLayout: function(sLayout) {
				return mLayout[sLayout];
			},

			onBackofficeSettings: function() {
				if (this._oParentView) {
					var oController = this._oParentView.getController();
					if (oController.onBackofficeSettings) {
						oController.onBackofficeSettings();
					}
				}
			},

			onNavigateToFeedList: function() {
				this.navigateTo("feedlist");
			},

			onOfficeToggle: function() {
				if (this._oParentView) {
					var oController = this._oParentView.getController();
					if (oController.switchView) {
						oController.switchView();
					}
				}
			},

			onBlogItemPress: function(oEvent) {
				if (this._bIsTokenPressed) {
					this._bIsTokenPressed = false;
					return;
				}
				var oItem = oEvent.getSource();
				var oContext = oItem.getBindingContext("data");
				if (oContext) {
					this.navigateTo("blog-display", {
						id: oContext.getProperty("ID")
					});
				}
			},

			onOpenCreator: function(oEvent) {
				var oSource = oEvent.getSource();
				var iIdentityId = oSource.getBindingContext("data").getProperty("CREATED_BY_ID");
				if (!this.oIdentityCardView) {
					this.oIdentityCardView = sap.ui.xmlview({
						viewName: "sap.ino.vc.iam.IdentityCard"
					});
					this.getView().addDependent(this.oIdentityCardView);
				}
				this.oIdentityCardView.getController().open(oSource, iIdentityId);
			},

			showPopupTagCard: function(oEvent) {
		    this._bIsTokenPressed = true;
			if (!this._oPopover) {
				this._oPopover = sap.ui.xmlfragment("sap.ino.vc.tag.fragments.TagCardPopover", this);
				this.getView().addDependent(this._oPopover);
			}
            var oToken = oEvent.getSource();
            var sPath = "/SearchTagsAll(searchToken='',ID=" + oToken.getKey() + ")";
            var oDatamodel = this.getModel("data");
            var that = this;
            oDatamodel.read(sPath, {
                async: true,
                success: function(oData) {
                    var oModel = new sap.ui.model.json.JSONModel();
                    oModel.setData(oData);
                    that._oPopover.setModel(oModel, "Tag");
                    jQuery.sap.delayedCall(0, that, function() {
        				that._oPopover.openBy(oToken);
        			});
                }
            });			
			}
		}));
});
}; // end of sap/ino/vc/home/CommunityHome.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.home.RegisterApprovalList.controller') ) {
jQuery.sap.declare('sap.ino.vc.home.RegisterApprovalList.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/home/RegisterApprovalList.controller",[
    "sap/ino/vc/commons/BaseVariantListController",
    "sap/ino/vc/commons/TopLevelPageFacet",
    "sap/ino/commons/formatters/ObjectListFormatter",
    "sap/ino/commons/formatters/BaseFormatter",
    "sap/ino/commons/application/Configuration",
    "sap/ui/model/json/JSONModel",
    "sap/m/Label",
    "sap/ino/controls/IdentityActionCard",
    "sap/ino/commons/models/object/User",
    "sap/m/VBox",
    "sap/m/Link",
    "sap/ino/vc/campaign/mixins/RegistrationMixin",
    "sap/ui/model/Filter"
], function(Controller, TopLevelPageFacet, ObjectListFormatter, BaseFormatter, Configuration, JSONModel, Label, IdentityActionCard, User,
	VBox, Link, RegistrationMixin, Filter) {
	"use strict";

	return Controller.extend("sap.ino.vc.home.RegisterApprovalList", jQuery.extend({}, ObjectListFormatter, BaseFormatter, TopLevelPageFacet,
		RegistrationMixin, {
			routes: ["registerapprovallist", "registerapprovallistvariant","campaign-registerapprovallistvariant"],
			formatter: jQuery.extend({}, ObjectListFormatter, BaseFormatter),
			onInit: function() {
				Controller.prototype.onInit.apply(this, arguments);
			},

			getList: function() {
				return this.byId("registerList");
			},
			bindList: function() {
				var sListId = "registerList";
				var oBindingInfo = this.getView().byId(sListId).getBindingInfo("items");
				this.getView().byId(sListId).bindItems(oBindingInfo);
			},
			onCampaignsListItemPress: function(oEvent) {
				var oItem = oEvent.getSource();
				var oContext = oItem.getBindingContext("data");
				if (oContext) {
					this.navigateTo("campaign", {
						id: oContext.getProperty("CAMPAIGN_ID")
					});
				}
			},
            // 	ACCESSIBILITY
			onAfterRendering: function() {
				this._initTabs();
			},
			_getTabs: function() {
				return this._tabs;
			},
			_initTabs: function() {
				this._tabs = [];
				// if (this.getAggregation("_campaignLink") && this.getAggregation("_campaignLink").$().length) {
				// 	this._tabs.push(this.getAggregation("_campaignLink").$()[0].id);
				// }
				// if (this.getAggregation("_ideaLink") && this.getAggregation("_ideaLink").$().length) {
				// 	this._tabs.push(this.getAggregation("_ideaLink").$()[0].id);
				// }
				// if (this.getAggregation("followPlaceholder")) {
				// 	this._tabs.push(this.getAggregation("followPlaceholder").$().find("[tabindex=0],button")[0].id);
				// }
			},
			_defaultOnKeyDown: function(oEvent) {
				if (Control.prototype.onkeydown) {
					Control.prototype.onkeydown.apply(this, arguments);
				}
			},
			
            onRouteMatched : function (oEvent) {
				var oArguments = oEvent.getParameter("arguments");
				var sCampaignID = oArguments["id"];
    			var sListId = "registerList";
    			var oBindingInfo = this.getView().byId(sListId).getBindingInfo("items");                
                if(oBindingInfo.filters.length > 1){ 
                    oBindingInfo.filters.pop();
                }                    
                if(sCampaignID){
                var oCampaignFilter = new Filter("CAMPAIGN_ID","EQ",sCampaignID);                    
                     oBindingInfo.filters.push(oCampaignFilter);
                }
                this.getView().byId(sListId).bindItems(oBindingInfo);
                this.setHelp("APPROVAL_LIST");
            },

			onkeydown: function(oEvent) {
				var aTabs = this._getTabs();
				var fnUpdate = this._incr;

				if (oEvent.shiftKey || oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_UP || oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_LEFT) {
					fnUpdate = this._decr;
				}

				if (oEvent.keyCode === jQuery.sap.KeyCodes.ESCAPE) {
					this.getParent().focus();
				} else if (oEvent.keyCode === jQuery.sap.KeyCodes.TAB ||
					oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_DOWN ||
					oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_RIGHT ||
					oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_UP ||
					oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_LEFT) {
					var $Current = jQuery(":focus");
					var iIdx = -1;
					if ($Current && $Current.length > 0) {
						iIdx = aTabs.indexOf($Current[0].id);
						iIdx = fnUpdate(iIdx, aTabs.length - 1);
						this._focus(jQuery("#" + aTabs[iIdx]));

						oEvent.preventDefault();
						oEvent.stopPropagation();
					} else {
						this.getParent().focus();
					}
				} else {
					this._defaultOnKeyDown(oEvent);
				}
			},
			_incr: function(iVal, iMax) {
				iVal++;
				if (iVal > iMax) {
					return 0;
				}
				return iVal;
			},

			/**
			 * @private
			 */
			_decr: function(iVal, iMax) {
				iVal--;
				if (iVal < 0) {
					return iMax;
				}
				return iVal;
			},
			_focus: function(oElement) {
				if (jQuery.type(oElement.focus) === "function") {
					setTimeout(function() {
						oElement.focus();
					}, 0);
				}
			}

		}));
});
}; // end of sap/ino/vc/home/RegisterApprovalList.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.iam.List.controller') ) {
jQuery.sap.declare('sap.ino.vc.iam.List.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/iam/List.controller",[
   "sap/ino/vc/commons/BaseVariantListController",
   "sap/ui/Device",
   "sap/ui/model/Sorter",
   "sap/ui/model/json/JSONModel",
   "sap/ui/model/Filter",
    "sap/ino/vc/commons/TopLevelPageFacet",
    "sap/ino/controls/OrientationType",
    "sap/ino/commons/application/Configuration"
], function (BaseController,
             Device,
             Sorter,
             JSONModel,
             Filter,
             TopLevelPageFacet,
             OrientationType,Configuration) {
   "use strict"; 
   
    var mOrder = {
        ASC : "ASC",
        DESC : "DESC"
    };

    var mSort = {
        CHANGED_AT : "CHANGED_AT",
        NAME : "NAME",
        SEARCH_SCORE: "SEARCH_SCORE"
    };

    var mVariant = {
        ALL : "all"
    };
	    
    var mFilter = {
        NONE : undefined,
        USER : "USER"
    };
    
    var mListContext = {
        PEOPLE : "peoplelist",
        PEOPLE_VARIANT : "peoplelistvariant"
    };
    
    var mList = {
        NAME:"PEOPLE_LIST_TIT_NAME",
        ADJUSTMENT_TITLE : "IDENTITY_LIST_TIT_ADJUSTMENT",
        Filter : {},
        Sorter : {
            Values : [{
                TEXT : "SORT_MIT_CHANGED",
                ACTION : mSort.CHANGED_AT,
                DEFAULT_ORDER : mOrder.DESC
            }, {
                TEXT : "SORT_MIT_NAME",
                ACTION : mSort.NAME,
                DEFAULT_ORDER : mOrder.ASC
            }]
        },
        Order: {
		    Values: [{
		        TEXT: "ORDER_MIT_ASC",
		        ACTION: mOrder.ASC
		    }, {
		        TEXT: "ORDER_MIT_DESC",
		        ACTION: mOrder.DESC
		    }]
		},
        Variants : {
            DEFAULT_VARIANT : mVariant.ALL,
            TITLE : "PEOPLE_LIST_TIT_VARIANTS",
            Values : [{
                TEXT : "PEOPLE_LIST_MIT_USER",
                ACTION : mVariant.ALL,
                FILTER : mFilter.USER,
                DEFAULT_SORT : mSort.NAME,
                VISIBLE: true
            }]
        }
    };
	
    var oIAMList = BaseController.extend("sap.ino.vc.iam.List", jQuery.extend({}, TopLevelPageFacet, {
	   
       /* Controller reacts when these routes match */ 
        routes : ["peoplelist", "peoplelistvariant"],
        
        initialFocus : "mainFilterButton",
        
        /* ListModel defining filter, sorter and variants of the list */
        list : mList,
        
        /* ViewModel storing the current configuration of the list */
        view : {
            "List" : {
                "SORT" : mSort.NAME,
                "ORDER" : undefined,
                "VARIANT" : mVariant.ALL,
                "Default" : {
                    "SORT" : mSort.NAME,
                    "ORDER" : undefined,
                    "VARIANT" : mVariant.ALL
                }
            },
            "ORIENTATION" : OrientationType.PORTRAIT,
            "DISABLE_ORIENTATION" : true
        },	   
      
        onInit: function () {
            BaseController.prototype.onInit.apply(this, arguments);

            var oViewModel = this.getModel("view") || new JSONModel({});
            oViewModel.setData(this.view, true);

            this.getList().attachUpdateFinished(this.onUpdateFinished, this);
            if (Device.system.phone && !Device.orientation.portrait) {
                this.getList().setWrapping(false);
            }
            else {
                //this.getList().addStyleClass("sapInoIdeaListCardItems");
                this.getList().setWrapping(true);
            }
             
        },        
    
        //TODO remove toplevelpagefacet, implement show function w/ signature to 1: route 2: query
        onRouteMatched : function(oEvent, oObject) {
            var oQuery;
            var sVariant;
            var aSorter;
            var oVariant;
            var sVariantFilter;
	        
	        var sDefaultVariant = this.getListProperty("/Variants/DEFAULT_VARIANT");
	        
            if (oEvent && oEvent.getParameter) {
                var oArguments = oEvent.getParameter("arguments");    
                this._sRoute = oEvent.getParameter("name");
                oQuery = oArguments["?query"];
                sVariant = oArguments.variant;
            }
            else {
                this._sRoute = oEvent;
                oQuery = oObject;
                sVariant = oObject.variant;
            }
             
            var oViewModel = this.getModel("view");
            oViewModel.setData(this.view, true);
	         
            var bBound = this.getList().isBound("items");
             
            // even if there is no query defined, we need to add the default sorter that is applied
            if (!oQuery || !oQuery.sort) {
                var sDefaultSort = this.getViewProperty("/List/Default/SORT");
                var sDefaultOrder = this.getSort(sDefaultSort)[0].DEFAULT_ORDER;
	             
                oQuery = oQuery || {};

				oQuery.sort = oQuery.sort || sDefaultSort;
				
				// enhance for sort combination
				oQuery.sort = oQuery.sort + " " + (oQuery.order || sDefaultOrder);
	        }
	         
            var bRebindRequired = this.hasStateChanged(this._sRoute, sVariant, oQuery, Device.orientation.portrait); 
	         
            if (!bBound || bRebindRequired) {
                oVariant = this.getVariant(sVariant);
                if (!oVariant) {
                    oVariant = this.getVariant(sDefaultVariant);
                }
                sVariantFilter = oVariant.FILTER;
	             
                this.setParameters(oQuery, oVariant);
	             
	            /* -- Do not show the filterbar automatically but let the user change it -- */
	             
                aSorter = this.getSort(this.getViewProperty("/List/SORT"));
	             
                this.setSorter(aSorter);
                this.updateFilter();
	
	            this.setSortIcon(this.byId("panelFilterFragment--sortreverse"), this.getViewProperty("/List/ORDER"));
	
                var sSearchTerm = this.getViewProperty("/List/SEARCH");
                this.bindList(sSearchTerm, sVariantFilter);
                this.initialSorterItems();
            }
	         
            /* used to prevent opening and closing the filter while changing the variant, etc. */
            this._bInnerViewNavigation = true;

            this.setHelp("IDENTITY_LIST");
	     },
	     
        getBindingPath : function(oQuery) {
            if(!oQuery || oQuery === {}) {
                return { Path: this.getIdentiryEntityName() };
            } else {
                var oBindingData = {};
    
                if (oQuery.search === undefined) {
                    oBindingData.Path = this.getIdentiryEntityName();
                } else {
                    oBindingData.Path = "SearchIdentityPeopleList(searchToken='" + (oQuery.search || "") + "')/Results";
                }
                
                if(oQuery.variant) {
                    oBindingData.Filter = [new Filter("TYPE_CODE", "EQ", oQuery.variant)];
                }
                return oBindingData;
            }
        },
        getIdentiryEntityName: function() {
			if (Configuration.hasCurrentUserPrivilege("sap.ino.ui::backoffice.access")) {
				return "Identity";
			}
			return "LeanIdentity";
	    },
        updateListAccessibilityUserCard : function() {
            // accessibility: we need to update the aria property like this due to (for us) not usable behaviour of UI5
         this.getList().getBinding("items").attachDataReceived(function() {
                    var oList = this.getList();
                    //oList.$().find(".sapMListUl").attr("role", "list"); 
                    var aItems = oList.$().find("li");
                    jQuery.each(aItems, function(iIdx, oItemDom) {
                        var $Item = jQuery(oItemDom);
                        $Item.attr("aria-label", $Item.getEncodedText()); 
                      
                    });
                }, this);
        
        },
     
        bindList : function(sSearchTerm, sVariantFilter) {
            var sRoute = this.getCurrentRoute();
	         
            var sVariant;
            if (sRoute === "identitylistvariant") {
                sVariant = this.getCurrentVariant().ACTION;
            }
	
            this.saveState(sVariant);
	         
            var oBindingData = this.getBindingPath({
                search: sSearchTerm,
                variant: sVariantFilter
            });
            this.setPath("data>/" + oBindingData.Path);
            BaseController.prototype.setFilter.apply(this, oBindingData.Filter);
            BaseController.prototype.bindList.apply(this, arguments);
            this.updateListAccessibilityUserCard();
        },
        
        getList : function() {
            return this.byId("objectlist");
        },

        getItemTemplate : function() {
            return this.getFragment("sap.ino.vc.iam.fragments.IdentityListItem");
        },

        onVariantPress : function(sVariantAction, oEvent) {
            BaseController.prototype.onVariantPress.apply(this, [sVariantAction, oEvent, "identitylistvariant", "identitylist"]);
        },
        
        onRefresh: function() {
            var oList = this.getList();
            var oBindingInfo = oList.getBindingInfo("items");
			oList.bindAggregation("items", oBindingInfo);
		},
 
        updateFilter : function() {
            //nothing to do
        },  

        onUserPressed: function(oEvent) {
            var oItem = oEvent.getSource();
            var oContext = oItem.getBindingContext("data");
            if (oContext) {
                this.navigateTo("userdetail", { id: oContext.getProperty("ID") });
            }
        },
        
        formatObjectListVariantsVisible: function () {
            return true;
        }
        
    }));
    
    /* ListModel defining filter, sorter and variants of the list */
    oIAMList.list = mList;
    oIAMList.listContext = mListContext;
    
    return oIAMList;
});
}; // end of sap/ino/vc/iam/List.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.Activities.controller') ) {
sap.ui.getCore().loadLibrary("sap.ino.wall");

jQuery.sap.declare('sap.ino.vc.idea.Activities.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ino.vc.wall.util.WallFactory'); // unlisted dependency retained
jQuery.sap.require('sap.ino.wall.WallPreview'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.CustomData'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.XMLView'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.ViewType'); // unlisted dependency retained
jQuery.sap.require('sap.m.HBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.HTML'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/Activities.controller",[
    "sap/ino/vc/commons/BaseObjectController",
    "sap/ino/commons/formatters/ObjectListFormatter",
    "sap/ino/vc/wall/util/WallFactory",
    "sap/ino/wall/WallPreview",
    "sap/ino/commons/application/Configuration",
    "sap/ui/model/json/JSONModel",
    "sap/ino/controls/IFrame",
    "sap/ui/core/CustomData",
    "sap/m/Label",
    "sap/m/Link",
    "sap/ino/controls/Image",
    "sap/m/Text",
    "sap/ui/core/mvc/XMLView",
    "sap/ui/core/mvc/ViewType",
    "sap/m/HBox",
    "sap/ui/core/HTML",
    "sap/ino/controls/IdentityActionCard",
    "sap/ino/commons/models/core/ClipboardModel",
    "sap/ino/vc/campaign/mixins/RegistrationMixin",
    "sap/ino/commons/models/object/User",
    "sap/ino/vc/idea/mixins/VoteMixin",
    "sap/ino/vc/commons/mixins/FollowMixin",
    "sap/ino/vc/idea/mixins/VolunteerMixin",
    "sap/ino/commons/models/core/CodeModel"
    ], function(BaseController, ObjectListFormatter, WallFactory, WallPreview, Configuration, JSONModel, IFrame, CustomData,
	Label, Link, Image, Text, XMLView, ViewType, HBox, HTML, IdentityActionCard, ClipboardModel, RegistrationMixin, User, VoteMixin,
	FollowMixin, VolunteerMixin, CodeModel) {

	"use strict";

	return BaseController.extend("sap.ino.vc.idea.Activities", jQuery.extend({}, RegistrationMixin, VoteMixin, FollowMixin, VolunteerMixin, {

		/** @member the formatter */
		formatter: ObjectListFormatter,

		// different change events affect different entities and are displayed differently
		/** @constant {array} change events leading to idea display - corresponds to following messages (listed for usage check analysis):
        ACTIVITIES_MSG_CREATED_sap.ino.config.COPIED_SOURCE ACTIVITIES_MSG_CREATED_sap.ino.config.COPIED_TARGET ACTIVITIES_MSG_CREATED_sap.ino.config.MERGED_SOURCE
        ACTIVITIES_MSG_CREATED_sap.ino.config.MERGED_TARGET ACTIVITIES_MSG_CREATED_sap.ino.config.DUPLICATE_SOURCE ACTIVITIES_MSG_DELETED_sap.ino.config.DUPLICATE_SOURCE
        ACTIVITIES_MSG_CREATED_sap.ino.config.DUPLICATE_TARGET ACTIVITIES_MSG_DELETED_sap.ino.config.DUPLICATE_TARGET*/
		DISPLAY_EVENTS_IDEA: ["CREATED_sap.ino.config.COPIED_SOURCE", "CREATED_sap.ino.config.COPIED_TARGET",
            "CREATED_sap.ino.config.DUPLICATE_SOURCE", "CREATED_sap.ino.config.DUPLICATE_TARGET",
            "CREATED_sap.ino.config.MERGED_SOURCE", "CREATED_sap.ino.config.MERGED_TARGET",
            "DELETED_sap.ino.config.DUPLICATE_SOURCE", "DELETED_sap.ino.config.DUPLICATE_TARGET"],
		/** @constant {array} change events leading to campaign display.
        ACTIVITIES_MSG_IDEA_CAMPAIGN_REASSIGN ACTIVITIES_MSG_STATUS_ACTION_SUBMIT ACTIVITIES_MSG_CAMPAIGN_PROCESS_CHANGE
        ACTIVITIES_MSG_CAMPAIGN_PHASE_CODE_REPLACEMENT ACTIVITIES_MSG_CAMPAIGN_STATUS_MODEL_CODE_REPLACEMENT
        ACTIVITIES_MSG_CAMPAIGN_VOTE_TYPE_REPLACEMENT
        */
		DISPLAY_EVENTS_CAMPAIGN: ["IDEA_CAMPAIGN_REASSIGN", "STATUS_ACTION_SUBMIT"],
		/** @constant {array} change events leading to wall display 
        ACTIVITIES_MSG_WALL_ASSIGNED ACTIVITIES_MSG_WALL_UNASSIGNED*/
		DISPLAY_EVENTS_WALL: ["WALL_ASSIGNED", "WALL_UNASSIGNED"],
		/** @constant {array} change events leading to evaluation display 
        ACTIVITIES_MSG_STATUS_ACTION_sap.ino.config.EVAL_PUB_SUBMITTER ACTIVITIES_MSG_STATUS_ACTION_sap.ino.config.EVAL_PUB_COMMUNITY 
        ACTIVITIES_MSG_STATUS_ACTION_sap.ino.config.EVAL_SUBMIT ACTIVITIES_MSG_STATUS_ACTION_sap.ino.config.EVAL_UNPUBLISH
        ACTIVITIES_MSG_STATUS_ACTION_sap.ino.config.EVAL_REWORK
        */
		DISPLAY_EVENTS_EVAL: ["STATUS_ACTION_sap.ino.config.EVAL_PUB_COMMUNITY",
			"STATUS_ACTION_sap.ino.config.EVAL_PUB_SUBMITTER", "STATUS_ACTION_sap.ino.config.EVAL_SUBMIT"],
		/** @constant {array} change events leading to text difference display 
        ACTIVITIES_MSG_IDEA_NAME_CHANGED ACTIVITIES_MSG_IDEA_NAME_DESCRIPTION_CHANGED ACTIVITIES_MSG_IDEA_DESCRIPTION_CHANGED */
		DISPLAY_EVENTS_DIFFTEXT: ["IDEA_NAME_CHANGED", "IDEA_NAME_DESCRIPTION_CHANGED"],
		/** @constant {array} change events leading to attachment display 
        ACTIVITIES_MSG_ATTACHMENT_ASSIGNED ACTIVITIES_MSG_ATTACHMENT_UNASSIGNED ACTIVITIES_MSG_ATTACHMENT_CHANGED
        */
		DISPLAY_EVENTS_ATTACHMENT: ["ATTACHMENT_ASSIGNED", "ATTACHMENT_UNASSIGNED"],
		/** @constant {array} change events leading to title image display 
        ACTIVITIES_MSG_IDEA_TITLE_IMAGE_ASSIGNED ACTIVITIES_MSG_IDEA_TITLE_IMAGE_CHANGED ACTIVITIES_MSG_IDEA_TITLE_IMAGE_UNASSIGNED
        */
		DISPLAY_EVENTS_TITLEIMG: ["IDEA_TITLE_IMAGE_ASSIGNED", "IDEA_TITLE_IMAGE_CHANGED"],
		/* "IDEA_TITLE_IMAGE_UNASSIGNED" */
		/** @constant {array} change events leading to authorbox display 
        ACTIVITIES_MSG_IDEA_COACH_CREATED ACTIVITIES_MSG_IDEA_COACH_DELETED ACTIVITIES_MSG_IDEA_CONTRIBUTOR_CREATED ACTIVITIES_MSG_IDEA_CONTRIBUTOR_DELETED
        ACTIVITIES_MSG_IDEA_EXPERT_CREATED ACTIVITIES_MSG_IDEA_EXPERT_DELETED
        */
		DISPLAY_EVENTS_PERSON: ["IDEA_COACH_CREATED", "IDEA_COACH_DELETED", "IDEA_CONTRIBUTOR_CREATED", "IDEA_CONTRIBUTOR_DELETED",
			"IDEA_EXPERT_CREATED", "IDEA_EXPERT_DELETED"],
		/** @constant {array} change events leading to link display 
        ACTIVITIES_MSG_LINK_CREATED ACTIVITIES_MSG_LINK_DELETED
        */
		DISPLAY_EVENTS_LINK: ["LINK_CREATED"],
		/* "LINK_DELETED" */
		/** @constant {array} change events leading to evaluation request display 
		ACTIVITIES_MSG_EVAL_REQ_CREATED ACTIVITIES_MSG_EVAL_REQ_UPDATED ACTIVITIES_MSG_EVAL_REQ_DELETED ACTIVITIES_MSG_EVAL_REQ_EXPIRED ACTIVITIES_MSG_EVAL_REQ_ITEM_CLARIFICATION_SENT
		ACTIVITIES_MSG_EVAL_REQ_EXPERT_FORWARDED ACTIVITIES_MSG_EVAL_REQ_CHECKED*/
		DISPLAY_EVENTS_EVAL_REQ: ["EVAL_REQ_CREATED", "EVAL_REQ_UPDATED", "EVAL_REQ_DELETED", "EVAL_REQ_EXPIRED", "EVAL_REQ_ITEM_CLARIFICATION_SENT",
		"EVAL_REQ_EXPERT_FORWARDED","EVAL_REQ_CHECKED"],
		/* other messages 
        ACTIVITIES_MSG_STATUS_ACTION_sap.ino.config.COMPLETE ACTIVITIES_MSG_STATUS_ACTION_sap.ino.config.DISCONTINUE ACTIVITIES_MSG_STATUS_ACTION_sap.ino.config.START_NEXT_PHASE
        ACTIVITIES_MSG_STATUS_ACTION_sap.ino.config.RESTART_PHASE ACTIVITIES_MSG_STATUS_ACTION_sap.ino.config.RESTART_PREV_PHASE ACTIVITIES_MSG_STATUS_ACTION_sap.ino.config.WAIT
        ACTIVITIES_MSG_STATUS_ACTION_sap.ino.config.START_PROCESS ACTIVITIES_MSG_STATUS_ACTION_sap.ino.config.REWORK_EVALUATION ACTIVITIES_MSG_STATUS_ACTION_sap.ino.config.DECISION_PREPARE
        ACTIVITIES_MSG_STATUS_ACTION_sap.ino.config.CONTINUE_PROJECT
        ACTIVITIES_MSG_IDEA_CREATED ACTIVITIES_MSG_IDEA_DELETED ACTIVITIES_MSG_IDEA_SUBMITTED
        */

		onInit: function() {
			BaseController.prototype.onInit.apply(this, arguments);

			// concat all classes of Activity events that may be expanded
			this.DISPLAY_EVENTS_EXPANDABLE = [].concat(
				this.DISPLAY_EVENTS_IDEA, this.DISPLAY_EVENTS_CAMPAIGN, this.DISPLAY_EVENTS_WALL,
				this.DISPLAY_EVENTS_PERSON, this.DISPLAY_EVENTS_DIFFTEXT, this.DISPLAY_EVENTS_ATTACHMENT,
				this.DISPLAY_EVENTS_LINK, this.DISPLAY_EVENTS_EVAL, this.DISPLAY_EVENTS_TITLEIMG, this.DISPLAY_EVENTS_EVAL_REQ
			);

			// attach to list's onAfterRendering for induction of grouping titles
			var oActivitiesList = this.getView().byId("ideaActivitiesList");
			oActivitiesList.addEventDelegate({
				onAfterRendering: this._applyGroupingHeaders.bind(this, oActivitiesList)
			});
			this._sResizeActivityList = this.attachListControlResized(oActivitiesList);
		},
		
		onBeforeRendering: function() { 
            var oActivitiesList = this.getView().byId("ideaActivitiesList");
            var oBindingInfo = oActivitiesList.getBindingInfo("items");
            oActivitiesList.bindItems(oBindingInfo);
        },

		onAfterRendering: function() {
			var oActivitiesList = this.getView().byId("ideaActivitiesList");
			var oBinding = oActivitiesList.getBinding("items");
			var that = this;
			if (oBinding) {
				oBinding.attachDataReceived(function() {
					that._applyGroupingHeaders(oActivitiesList);
				}, this);
			}
		},

		onExit: function() {
			BaseController.prototype.onExit.apply(this, arguments);
			this.detachListControlResized(this._sResizeActivityList);
		},

		/**
		 * formatter making sense of activity event names and converting it to a meaningful text
		 *
		 * Formatting activity messages is not straight-forward, as the activity event structure is
		 * a bit convoluted due to historic reasons. PARAM_0 and PARAM_1 are freely defined depending
		 * on the activity event's semantics. For these, see v_idea_activities.
		 *
		 * @see "SAP_INO"."sap.ino.db.idea::v_idea_activities"
		 * @param   {Object}    oValue      the Activity Object to be formatted
		 * @return  {string}                the formatted message
		 */
		msgformatter: function(oValue) {
			var sResult, sMsgKey, sParam0, sParam1, sCampName;
			if (oValue && oValue.CHANGE_EVENT) {
				sMsgKey = "ACTIVITIES_MSG_" + oValue.CHANGE_EVENT;
				if (oValue.CHANGE_CODE === "AUTO_COACH_ASSIGNED") {
					sMsgKey += "_AUTO_COACH_ASSIGNED";
				}
				sParam0 = oValue.PARAM_0;
				sParam1 = oValue.PARAM_1;
				sCampName = oValue.CAMPAIGN_NAME;
				// special case: for all STATUS_ACTION change events, param 0 is a phase code and has to be transformed to a readable phase
				if (oValue.CHANGE_EVENT.indexOf("STATUS_ACTION_") === 0) {
					sParam0 = this.formatter.ideaPhase(sParam0);
				}
				// special case: campaign changes, contain both phase (param0) and status (param1)
				if (oValue.CHANGE_EVENT.indexOf("CAMPAIGN_") === 0) {
					// can be either status of phase - try to format both
					sParam0 = this.formatter.ideaPhase(sParam0);
					sParam1 = this.formatter.ideaStatus(sParam1);
				}
				// special case: sub responsibility code change, param 0 and param1 is a sub responsibility code
				if (oValue.CHANGE_EVENT.indexOf("IDEA_RESP_VALUE_CODE") === 0) {
					// can be either status of phase - try to format both
					sParam0 = CodeModel.getText('sap.ino.xs.object.subresponsibility.ResponsibilityStage.RespValues', sParam0);
					sParam1 = CodeModel.getText('sap.ino.xs.object.subresponsibility.ResponsibilityStage.RespValues', sParam1);
				}
				sResult = this.getText(sMsgKey, ["", sParam0, sParam1, sCampName]);
				if(oValue.CHANGE_EVENT.indexOf("IDEA_CAMPAIGN_REASSIGN") > -1){
				    var sStatusText = this.formatter.ideaStatus(oValue.STATUS_CODE);
				    var sStatusTextBundle = this.getText(sMsgKey + "_STATUS", [sStatusText]);
				    sResult = sResult + sStatusTextBundle;
				}
				
				if (sResult === sMsgKey) {
					// key was not found
					if (oValue.CHANGE_EVENT.indexOf("STATUS_ACTION_") === 0) {
						// in case of status action: generate generic text
						var sStatusAction = this.formatter.ideaStatusAction(oValue.PARAM_1);
						var sStatus = this.formatter.ideaStatus(oValue.STATUS_CODE);
						sResult = this.getText("ACTIVITIES_MSG_STATUS_ACTION_GENERIC", ["", sStatusAction, sStatus, sCampName]);
					} else {
						// unknown change event - generic message
						sResult = this.getText("ACTIVITIES_MSG_GENERIC_CHANGE_EVENT", [oValue.CHANGE_EVENT]);
					}
				}
			}
			return sResult;
		},

		/**
		 * formatter deciding whether an activity item is expandable (has more information to be displayed)
		 *
		 * @param   {object}    oChangeEvent    the activity event (aka change event)
		 * @return  {boolean}   whether the item is expandable
		 */
		isExpandable: function(oChangeEvent) {
			var sEventName = oChangeEvent.CHANGE_EVENT;
			if (this.DISPLAY_EVENTS_EXPANDABLE.indexOf(sEventName) !== -1) {
				// all defined activities
				return true;
			} else if ((sEventName.indexOf("STATUS_ACTION_") === 0) && (oChangeEvent.PARAM_0_ID) && (sEventName.indexOf("EVAL_REWORK") === -1 && sEventName.indexOf("EVAL_UNPUBLISH") === -1)) {
				// special case: phase change and a decision ID is set
				return true;
			}
			return false;
		},

		/**
		 * adds idea to panel
		 *
		 * @private
		 * @param   {object}    oSourceCtrl     the originating source control
		 * @param   {int}       iIdeaId         an idea ID
		 */
		_createPanelIdea: function(oSourceCtrl, iIdeaId) {
			var oSourceCtrl2 = oSourceCtrl;
			var oCtrl;
			if (iIdeaId) {
				oCtrl = this.getFragment("sap.ino.vc.idea.fragments.FlatListItem").clone();
				oCtrl.addStyleClass("sapMListBGSolid");
				// as events are badly named, we have to add custom data "source type" so that we can differentiate
				// clicks on idea and campaign in onItemPress
				oCtrl.data("source-type", "idea");
				// damn you, one-time bindings!
				oCtrl.bindElement({
					path: "data>/IdeaMedium(" + iIdeaId + ")/"
				});
			} else {
				// idea has been deleted
				oCtrl = new Label({
					text: this.getText("ACTIVITIES_MSG_IDEA_NON_EXISTENT")
				});
			}
			oSourceCtrl2.addContent(oCtrl);
		},

		/**
		 * adds identity list item in panel
		 *
		 * @private
		 * @param   {object}    oSourceCtrl     the originating source control
		 * @param   {int}       iIdentId         an identity ID
		 */
		_createPanelIdentity: function(oSourceCtrl, iIdentId, sUserName, iImgId, sOrg, sRole) {
			var oCtrl;
			if (iIdentId) {
				oCtrl = new IdentityActionCard({
					identityId: iIdentId,
					userImageUrl: iImgId ? this.formatter.userImage(iImgId) : null,
					userOrganization: sOrg,
					userName: sUserName,
					userRole: sRole ? this.formatter.multipleRoleCodes(sRole) : null,
					actionable: false,
					pinnable: this.getModel("clipboard").getProperty("/enabled"),
					isPinned: this.formatIsUserInClipboard(iIdentId),
					pinPressed: [this.onUserPinPressed, this],
					identityPress: [this.onOpenIdentityQuickView, this]
				});
			}
			oSourceCtrl.addContent(oCtrl);
		},

		/**
		 * adds campaign card in panel
		 *
		 * @private
		 * @param   {object}    oSourceCtrl     the originating source control
		 * @param   {int}       iCampId         a campaign ID
		 */
		_createPanelCampaign: function(oSourceCtrl, iCampId) {
			var oCtrl, sWidth, oHBox;
			if (iCampId) {
				sWidth = this.formatter.widthCampaignCard(this.getModel("device"));
				oCtrl = this.getFragment("sap.ino.vc.campaign.fragments.CardListItem").clone();
				// HBox wrapper to enforce correct width
				oHBox = new sap.m.HBox({
					width: sWidth
				}).addItem(oCtrl);
				// as events are badly named, we have to add custom data "source type" so that we can differentiate
				// clicks on idea and campaign in onItemPress
				// additionally, the event is thrown by inner control
				oCtrl.getContent()[0].data("source-type", "campaign");
				oCtrl.bindElement("data>/CampaignFull(" + iCampId + ")/");
			}
			oSourceCtrl.addContent(oHBox);
		},

		/**
		 * adds wall in panel
		 *
		 * @private
		 * @param   {object}    oSourceCtrl     the originating source control
		 * @param   {int}       iWallId         a wall ID
		 */
		_createPanelWall: function(oSourceCtrl, iWallId) {
			if (iWallId) {
				var sURL = Configuration.getBackendRootURL() + Configuration.getApplicationObject("sap.ino.xs.object.wall.Wall") + "/" + iWallId;
				var oModel = new JSONModel(sURL);
				oModel.attachRequestCompleted({
					controller: this,
					wallId: iWallId
				}, this._onWallLoaded, oSourceCtrl);
			}
		},

		/**
		 * adds text diff content in panel
		 *
		 * Note: this is experimental
		 *
		 * @private
		 * @param   {object}    oSourceCtrl     the originating source control
		 * @param   {string}    sOld            text before change
		 * @param   {string}    sNew            text after changing
		 */
		_createPanelTextDiff: function(oSourceCtrl, sOld, sNew) {
			// evil: as sap.ui.core.HTML does not allow "addStyleClass", we have to manually add it here in a wrapping div
			var sHTML = "<div class=\"ideaActivityDiff\">" + this.getText("ACTIVITIES_MSG_TITLE_DIFF", [sOld && sOld.trim() || "", sNew && sNew.trim() ||
				""]) + "</div>";
			var oCtrl = new HTML({
				content: sHTML,
				sanitizeContent: true
			});
			//oHTML.addStyleClass("ideaActivityDiff");
			oSourceCtrl.addContent(oCtrl);
		},

		/**
		 * adds attachment in panel
		 *
		 * @private
		 * @param   {object}    oSourceCtrl     the originating source control
		 * @param   {int}       iAttmntId       an attachment ID
		 */
		_createPanelAttachment: function(oSourceCtrl, iAttmntId) {
			var oCtrl;
			if (iAttmntId) {
				oCtrl = this.createView({
					viewName: "sap.ino.vc.attachment.Attachment",
					type: ViewType.XML
				});
				// disable editing
				oCtrl.data("editable", false);
				oCtrl.byId("Attachments").setNoDataText(this.getText("ACTIVITIES_MSG_ATTACHMENT_NON_EXISTENT"));
				oCtrl.bindElement("data>/Attachment(" + iAttmntId + ")/");
			}
			oSourceCtrl.addContent(oCtrl);
		},

		/**
		 * adds title image in panel
		 *
		 * @private
		 * @param   {object}    oSourceCtrl     the originating source control
		 * @param   {int}       iImgId          an image ID
		 * @param   {string}    sImgTitle       the image's title
		 */
		_createPanelTitleImg: function(oSourceCtrl, iImgId, sImgTitle) {
			var oCtrl;
			if (iImgId) {
				var sURL = Configuration.getAttachmentDownloadURL(iImgId);
				oCtrl = new Image({
					src: sURL,
					objectId: iImgId,
					objectName: sImgTitle,
					alt: this.getText("ACTIVITIES_MSG_IMG_NON_EXISTENT")
				});
			}
			oSourceCtrl.addContent(oCtrl);
		},

		/**
		 * adds link in panel
		 *
		 * @private
		 * @param   {object}    oSourceCtrl     the originating source control
		 * @param   {string}    sURL            target URL
		 * @param   {string}    sText           displayed URL description
		 */
		_createPanelLink: function(oSourceCtrl, sURL, sText) {
			var oCtrl;
			if (sURL) {
				oCtrl = new Link({
					text: sText ? sText : sURL,
					target: "_blank",
					href: sURL
				});
			}
			oSourceCtrl.addContent(oCtrl);
		},

		/**
		 * adds link to evaluation in panel
		 *
		 * @private
		 * @param   {object}    oSourceCtrl     the originating source control
		 * @param   {int}       iEvalId         an evaluation ID
		 */
		_createPanelEvalLink: function(oSourceCtrl, iEvalId) {
			var oCtrl;
			if (iEvalId) {
				oCtrl = new Link({
					text: this.getText("ACTIVITIES_MSG_LINK_EVALUATION"),
					press: [this.onOpenEvaluation, this]
				});
			}
			oSourceCtrl.addContent(oCtrl);
		},

		_createPanelDecision: function(oSourceCtrl, iDecisionId) {
			var oCtrl;
			if (iDecisionId) {
				oCtrl = this.createFragment("sap.ino.vc.idea.fragments.DecisionPanel");
				oCtrl.bindElement("data>/IdeaStatusDecision(" + iDecisionId + ")/");
			}
			oSourceCtrl.addContent(oCtrl);
		},

		decisionMadeByFormatter: function(sDeciderName) {
			return this.getText("ACTIVITIES_MSG_DECISION_MADE_BY", [sDeciderName]);
		},

		decisionReasonFormatter: function(sReason) {
			return this.getText("ACTIVITIES_MSG_DECISION_REASON_COMMENTS", [sReason]);
		},

		decisionReasonCodeFormatter: function(sReasonCode) {
			var sReasonValue = this.formatter.valueOption(sReasonCode);
			return this.getText('ACTIVITIES_MSG_DECISION_REASON_CODE', [sReasonValue]);
		},

		onDecisionLinkPress: function(oEvent) {
			var oCtx = oEvent.getSource().getBindingContext("data");
			var sUrl = Configuration.getMailPreviewURL({
				DECISION: oCtx.getProperty("ID")
			});
			var oModel = new JSONModel(sUrl);
			oModel.attachRequestCompleted(this.onMailTextLoaded, this);
		},

		onMailTextLoaded: function(oEvent) {
			var oHTML = new IFrame({
				content: oEvent.getSource().getData().TEXT
			});
			if (!this._oMailViewDialog) {
				this._oMailViewDialog = this.createFragment("sap.ino.vc.idea.fragments.MailPreviewDialog");
				this.getView().addDependent(this._oMailViewDialog);
			}
			this._oMailViewDialog.addContent(oHTML);
			this._oMailViewDialog.open();
		},

		onMailViewClose: function(oEvent) {
			if (this._oMailViewDialog) {
				this._oMailViewDialog.close();
				this._oMailViewDialog.destroyContent();
			}
		},

		/**
		 * adds description to evaluation request in panel
		 *
		 * @private
		 * @param   {object}    oSourceCtrl     the originating source control
		 * @param   {int}       iEvalReqId      an evaluation request ID
		 * @param   {string}    sText           displayed  request description
		 */
		_createPanelEvalReqText: function(oSourceCtrl, iEvalReqId, sText) {
			var oCtrl;
			if (iEvalReqId) {
				var oLabel = new Label({
					text: this.getText("ACTIVITIES_MSG_EVAL_REQ_DESCRIPTION")
				});
				var oText = new Text({
					text: sText,
					maxLines: 2
				});
				oCtrl = new sap.m.HBox({
				}).addItem(oLabel).addItem(oText);
			}
			oSourceCtrl.addContent(oCtrl);
		},

		/**
		 * listens to expand event; creates controls lazily for displaying additional information about the activity item
		 **/
		onExpand: function(oEvent) {
			var oSourceCtrl = oEvent.getSource();
			var oChangeEvent = oSourceCtrl.getBindingContext("data");
			if (oEvent.getParameter("expand") && oChangeEvent) {
				// set class
				oSourceCtrl.toggleStyleClass("sapInoActivityExpanded");
				var oData = oChangeEvent.getObject();
				// get change event name
				var sChange = oData.CHANGE_EVENT;

				// expand - create components based on event
				if (this.DISPLAY_EVENTS_IDEA.indexOf(sChange) !== -1) {
					this._createPanelIdea(oSourceCtrl, oData.PARAM_0_ID);
				} else if (this.DISPLAY_EVENTS_PERSON.indexOf(sChange) !== -1) {
					//iIdentId, sUserName, iImgId, sOrg, sRole
					this._createPanelIdentity(oSourceCtrl, oData.PARAM_0_ID, oData.PARAM_0, oData.PARAM_1_ID, oData.PARAM_1);
				} else if (this.DISPLAY_EVENTS_CAMPAIGN.indexOf(sChange) !== -1) {
					this._createPanelCampaign(oSourceCtrl, oData.CAMPAIGN_ID);
				} else if (this.DISPLAY_EVENTS_WALL.indexOf(sChange) !== -1) {
					this._createPanelWall(oSourceCtrl, oData.PARAM_0_ID);
				} else if (this.DISPLAY_EVENTS_DIFFTEXT.indexOf(sChange) !== -1) {
					this._createPanelTextDiff(oSourceCtrl, oData.PARAM_1, oData.PARAM_0);
				} else if (this.DISPLAY_EVENTS_ATTACHMENT.indexOf(sChange) !== -1) {
					this._createPanelAttachment(oSourceCtrl, oData.PARAM_0_ID);
				} else if (this.DISPLAY_EVENTS_TITLEIMG.indexOf(sChange) !== -1) {
					this._createPanelTitleImg(oSourceCtrl, oData.PARAM_0_ID, oData.PARAM_0);
				} else if (this.DISPLAY_EVENTS_LINK.indexOf(sChange) !== -1) {
					this._createPanelLink(oSourceCtrl, oData.PARAM_1, oData.PARAM_0);
				} else if (this.DISPLAY_EVENTS_EVAL.indexOf(sChange) !== -1) {
					this._createPanelEvalLink(oSourceCtrl, oData.PARAM_0_ID);
				} else if (this.DISPLAY_EVENTS_EVAL_REQ.indexOf(sChange) !== -1) {
					this._createPanelEvalReqText(oSourceCtrl, oData.PARAM_0_ID, oData.PARAM_1);
				} else if ((sChange.indexOf("STATUS_ACTION_") === 0) && oData.PARAM_0_ID) {
					this._createPanelDecision(oSourceCtrl, oData.PARAM_0_ID, oData.PARAM_1_ID);
				}
			} else {
				oSourceCtrl.toggleStyleClass("sapInoActivityExpanded");
				// destroy all components on close
				oSourceCtrl.removeAllContent();
			}
		},

		/**
		 * called when the Wall JSON-model is loaded
		 *
		 * "this" in this context is the expanded Panel
		 */
		_onWallLoaded: function(oEvent, oParam) {
			var oSource = oEvent.getSource();
			var oData = oSource.oData;
			if (oData && oData.ID && oParam.controller) {
				var oWall = WallFactory.createWallFromInoJSON(oData);
				var oWallPreview = new WallPreview({
					owner: oData.CREATED_BY_NAME,
					hits: oData.VIEW_COUNT,
					press: [oParam, oParam.controller.onOpenWall, oParam.controller]
				});
				oWallPreview.setWall(oWall);
				this.addContent(oWallPreview);
			} else {
				this.addContent(new Text({
					text: {
						path: "i18n>ACTIVITIES_MSG_WALL_NON_EXISTENT"
					}
				}));
			}
		},

		onOpenEvaluation: function(oEvent) {
			var iEvalId = oEvent.getSource().getBindingContext("data").getProperty("PARAM_0_ID");
			if (iEvalId) {
				this.navigateTo("evaluation-display", {
					id: iEvalId
				});
			}
		},

		/**
		 * opens wall
		 */
		onOpenWall: function(oEvent, oParam) {
			var iWallId = oParam.wallId;
			if (iWallId) {
				this.navigateToWall("wall", {
					id: iWallId
				});
			}
		},

		/**
		 * Event listener for opening referenced ideas (fragment FlatListItem)
		 */
		onOpenIdea: function(oEvent) {
			var iIdeaId = oEvent.getSource().getBindingContext("data").getProperty("ID");
			if (iIdeaId) {
				this.navigateTo("idea-display", {
					id: iIdeaId
				});
			}
		},

		/**
		 * unfortunately-named event listener of CardListItem fragment for campaign navigation
		 */
		onItemPress: function(oEvent) {
			var oSource = oEvent.getSource();
			var sNavTarget;
			switch (oSource.data("source-type")) {
				case "idea":
					sNavTarget = "idea-display";
					break;
				case "campaign":
					sNavTarget = "campaign";
					break;
				default:
					break;
			}
			var iItemId = oEvent.getSource().getBindingContext("data").getProperty("ID");
			if (sNavTarget && iItemId) {
				this.navigateTo(sNavTarget, {
					id: iItemId
				});
			}
		},

		/**
		 * enriches DOM element with custom data element in order to display idea phase groups in Activity List
		 *
		 * @private
		 */
		_applyGroupingHeaders: function(oEvent) {
			var oSource = oEvent.getSource && oEvent.getSource() || oEvent;
			var aItems = oSource.getItems(),
				sCurrentPhase,
				sPrevPhase,
				sPhaseName,
				oItem;
			// run over phase codes with lag of one
			for (var i = 0; i < aItems.length; ++i) {
				oItem = aItems[i];
				sCurrentPhase = oItem.getBindingContext("data").getProperty("PHASE_CODE");
				if (sCurrentPhase !== sPrevPhase) {
					sPhaseName = this.formatter.ideaPhase(sCurrentPhase);
					if (sPhaseName) {
						oItem.$().attr("data-actgroup-title", this.getText("ACTIVITIES_TIT_PHASE_GROUP", sPhaseName));
						oItem.$().attr("aria-label", this.getText("ACTIVITIES_TIT_PHASE_GROUP", sPhaseName));
					}
				} else {
					oItem.$().removeAttr("data-actgroup-title");
					oItem.$().removeAttr("aria-label");
				}
				sPrevPhase = sCurrentPhase;
			}
		}

	}));
});
}; // end of sap/ino/vc/idea/Activities.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.Evaluations.controller') ) {
jQuery.sap.declare('sap.ino.vc.idea.Evaluations.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.GroupHeaderListItem'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/Evaluations.controller",[
    "sap/ino/commons/models/aof/ApplicationObjectChange",
    "sap/ino/vc/commons/BaseController",
    "sap/ino/vc/evaluation/EvaluationFacet",
    "sap/ino/vc/evaluation/EvaluationFormatter",
    "sap/m/GroupHeaderListItem",
    "sap/ino/commons/application/Configuration"     
], function (ApplicationObjectChange,
             BaseController,
             EvaluationFacet,
             EvaluationFormatter,
             GroupHeaderListItem,
             Configuration) {
    "use strict";
    
    var oFormatter = {};
    jQuery.extend(oFormatter, EvaluationFormatter);
    
    // Format the header of the evaluations group
    oFormatter.formatGroupHeader = function(oGroup) {
        return new GroupHeaderListItem({
            title: oFormatter.ideaPhase(oGroup.ideaPhaseCode),
            upperCase: false
        });
    };

    return BaseController.extend("sap.ino.vc.idea.Evaluations", {
        
        formatter: oFormatter,
        
        // Use group order as key and map group order to phase code
        // in order to format the group header later on
        grouper: function(oContext){
            return {
                key: oContext.getProperty("GROUP_ORDER"),
                ideaPhaseCode: oContext.getProperty("IDEA_PHASE_CODE")
            };
        },
        
        onInit: function(){
            var aEvalListIds = ["evaluationList", "myEvaluationList", "pubEvaluationList"];
            var that = this;
            BaseController.prototype.onInit.apply(this, arguments);
            this._initHandleEvaluationAOChange();
			this._initHandleEvaluationRequestAOChange();            
            
            aEvalListIds.forEach(function(sEvalListId){
                var oEvalList = that.byId(sEvalListId);
                if(oEvalList) {
                    if (!that._aResizeEvalList) {
                        that._aResizeEvalList = [];
                    }
                    that._aResizeEvalList.push(that.attachListControlResized(oEvalList));
                }
            });
            this._oRouter = this.getOwnerComponent().getRouter();
            this._oRouter.attachRouteMatched(this._resetSelList, this);
        },
        
        onExit: function() {
            var that = this;
            BaseController.prototype.onExit.apply(this, arguments);
            that._aResizeEvalList.forEach(function(fnResizeEvalList){
                that.detachListControlResized(fnResizeEvalList);
            });
            this._oRouter.detachRouteMatched(this._resetSelList, this);
        },
        
        onItemPress: function(oEvent) {
            var oContext = oEvent.getSource() && oEvent.getSource().getBindingContext("data");
            if (oContext) {
                this.navigateTo("evaluation-display", {id: oContext.getProperty("ID")});
            }
        },
		onItemRequestPressManager: function(oEvent) {
			var oContext = oEvent.getSource() && oEvent.getSource().getBindingContext("data");
			if (oContext) {
				this.navigateTo("evaluationrequest-display", {
					id: oContext.getProperty("ID")
				});
			}
		},
		onItemRequestPressExpert: function(oEvent) {
			var oContext = oEvent.getSource() && oEvent.getSource().getBindingContext("data");
			if (oContext) {
				this.navigateTo("evaluationrequest-item", {
					id: oContext.getProperty("ID")
				});
			}
		},        
        onSelectionChange : function(oEvent) {
            if (!this._oSelectionMap) {
                this._oSelectionMap = {};
            }
            var bSelected = oEvent.getParameter("selected");
            var oSource = oEvent.getSource();
            var oData = oSource.getBindingContext("data").getObject();
            
            var oObjectContextModel = this.getModel("objectContext");

            if (bSelected) {
                this._oSelectionMap[oData.ID] = oData.MODEL_CODE;
            } else {
                delete this._oSelectionMap[oData.ID];
            }
            var oObjectModel = this.getModel("object");
            oObjectContextModel.setProperty("/EvaluationSelection", this._oSelectionMap);
            var bValidModel = true;
            jQuery.each(this._oSelectionMap, function(iEvaluationId, sEvaluationModelCode) {
                if (sEvaluationModelCode !== oObjectModel.getProperty("/CURR_PHASE_EVALUATION_MODEL")) {
                    bValidModel = false;
                }
            });
            var bEnabled = bValidModel && Object.keys(this._oSelectionMap).length >= 2;
            oObjectContextModel.setProperty("/CreateAverageEvaluationEnabled", bEnabled);
            oObjectContextModel.setProperty("/CreateTotalEvaluationEnabled", bEnabled);
        },
        
        /**
         * Update the evaluation lists, once an evaluation is
         * created, deleted, status changed or submitted.
         */
        _initHandleEvaluationAOChange: function() {
            var that = this;
            
            var fnAOChangeListener = function(oEvent){
                
                var sAction = oEvent && oEvent.getParameter("actionName");
                if (sAction && ["create", "del", "submit", "modifyAndSubmit", "executeStatusTransition"].indexOf(sAction) > -1) {
                    that.rebindList(that.getView().byId("myEvaluationList"));
                    var sStatusCode = oEvent &&
                                      oEvent.getParameter("instance") && 
                                      oEvent.getParameter("instance").getProperty("/STATUS_CODE");
                    if (sStatusCode !== "sap.ino.config.EVAL_DRAFT") {
                        that.rebindList(that.getView().byId("pubEvaluationList"));
                        that.rebindList(that.getView().byId("evalationRequestExpert"));
                    }
                    var oChangeRequest = oEvent.getParameter("changeRequest");
                    if ((sAction && ["create","del", "submit", "modifyAndSubmit"].indexOf(sAction) > -1) || oChangeRequest && oChangeRequest.STATUS_ACTION_CODE === "sap.ino.config.EVAL_REWORK") {
                        that.rebindList(that.getView().byId("evaluationList"));
                        that.rebindList(that.getView().byId("evalationRequestExpert"));
                    }
                }
            };
            ApplicationObjectChange.attachChange(ApplicationObjectChange.Action.Create, fnAOChangeListener);
            ApplicationObjectChange.attachChange(ApplicationObjectChange.Action.Del, fnAOChangeListener);
            ApplicationObjectChange.attachChange(ApplicationObjectChange.Action.Action, fnAOChangeListener);
        },
		_initHandleEvaluationRequestAOChange: function(oEvent) {
			var that = this;
		
			var fnAOChangeListener = function(oEvent) {
				var sAction = oEvent && oEvent.getParameter("actionName");
				var oChangeRequest = oEvent.getParameter("changeRequest");
				if (oEvent.getParameter("object").getMetadata().getName() === "sap.ino.commons.models.object.EvaluationRequest" && that && that.getView()
					.byId("evalationRequestManager")) {

					if (sAction && ["create", "del", "submit", "modifyAndSubmit", "bulkDeleteEvalReqs"].indexOf(sAction) > -1) {

						if ((sAction && ["del", "submit", "modifyAndSubmit", "create"].indexOf(sAction) > -1) || oChangeRequest) {
							that.rebindList(that.getView().byId("evalationRequestManager"));
						}
					}
				} else if (oEvent.getParameter("object").getMetadata().getName() === "sap.ino.commons.models.object.EvaluationRequestItem" && that &&
					that.getView().byId("evalationRequestExpert")) {
					if (sAction && ["create", "del", "submit", "modifyAndSubmit", "forward","executeStatusTransition"].indexOf(sAction) > -1) {
						if ((sAction && ["del", "submit", "modifyAndSubmit", "create"].indexOf(sAction) > -1) || oChangeRequest) {
							that.rebindList(that.getView().byId("evalationRequestExpert"));
						}
					}
				}

			};

			ApplicationObjectChange.attachChange(ApplicationObjectChange.Action.Create, fnAOChangeListener);
			ApplicationObjectChange.attachChange(ApplicationObjectChange.Action.Del, fnAOChangeListener);
			ApplicationObjectChange.attachChange(ApplicationObjectChange.Action.Action, fnAOChangeListener);
		},        
        onEvaluatorPressed: function(oEvent) {
            oEvent.preventDefault();
            var oSource = oEvent.getSource();
            if (oSource) {
                var iIdentityId = oSource.getBindingContext("data") && 
                                  oSource.getBindingContext("data").getProperty("EVALUATOR_ID");
                if (iIdentityId !== undefined && !this.oIdentityCardView) {
                    this.oIdentityCardView = sap.ui.xmlview({
                        viewName : "sap.ino.vc.iam.IdentityCard"
                    });
                    this.getView().addDependent(this.oIdentityCardView);
                }
                if (this.oIdentityCardView && this.oIdentityCardView.getController()) {
                    this.oIdentityCardView.getController().open(oSource, iIdentityId);    
                }
            }
        },
		onEvaluationRequestOwnerPressed: function(oEvent) {
			oEvent.preventDefault();
			var oSource = oEvent.getSource();
			if (oSource) {
				var iIdentityId = oSource.getBindingContext("data") &&
					oSource.getBindingContext("data").getProperty("OWNER_ID");
				if (iIdentityId !== undefined && !this.oIdentityCardView) {
					this.oIdentityCardView = sap.ui.xmlview({
						viewName: "sap.ino.vc.iam.IdentityCard"
					});
					this.getView().addDependent(this.oIdentityCardView);
				}
				if (this.oIdentityCardView && this.oIdentityCardView.getController()) {
					this.oIdentityCardView.getController().open(oSource, iIdentityId);
				}
			}
		}  ,
			
	    rebindList:function(oList){
            if (oList) {
                var oBindingInfo = oList.getBindingInfo("items");
                oList.bindItems(oBindingInfo);
            }
        },
        
        _resetSelList:function(){
            var oObjectContextModel = this.getModel("objectContext");
			var aAvgEvalId = Object.keys(oObjectContextModel.getProperty("/EvaluationSelection") || {});
			if (aAvgEvalId.length <= 0 && this.getCurrentRoute() === "idea-display") {
			    this._oSelectionMap = {};
			    this.rebindList(this.getView().byId("evaluationList"));
			    this.rebindList(this.getView().byId("myEvaluationList"));
                this.rebindList(this.getView().byId("pubEvaluationList"));
			}
        }
        
    });
});
}; // end of sap/ino/vc/idea/Evaluations.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.ModifyRewardList.controller') ) {
jQuery.sap.declare('sap.ino.vc.idea.ModifyRewardList.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/ModifyRewardList.controller",[
    "sap/ino/vc/commons/BaseObjectModifyController",
    "sap/m/MessageToast",
    "sap/ino/vc/idea/RewardFormatter"],
	function(BaseController, MessageToast, RewardFormatter) {
		"use strict";
		return BaseController.extend("sap.ino.vc.idea.ModifyRewardList", {
			formatter: RewardFormatter,
			setDialog: function(oDialog) {
				this._oDialog = oDialog;
			},
			//event
			onExecuteStatusTransition: function(sStatusAction) {
				var oContorller = this;
				var oModel = oContorller.getObjectModel();
				var oActionRequest = oModel.executeStatusTransition({
					STATUS_ACTION_CODE: sStatusAction
				});
				if (oActionRequest) {
					oActionRequest.done(function() {
						MessageToast.show(oContorller.getText("OBJECT_MSG_STATUS_CHANGE_SUCCESS"));
					});
					oActionRequest.fail(function(o) {
						if (o.MESSAGES && o.MESSAGES.length > 0) {
							MessageToast.show(oContorller.getText(o.MESSAGES[0].MESSAGE_TEXT));
						}
					});
				}
			},

			onSave: function() {
				this.resetClientMessages();
				this._setRewardUnit();
				this.executeObjectAction("modify");
			},

			onDel: function(oEvent) {
				return this.executeObjectAction("del", {
					messages: {
						confirm: "MSG_DEL_CONFIRM",
						success: "MSG_DEL_SUCCESS"
					}
				});
			},

// 			onIdeaPressed: function() {
// 				var oModel = this.getObjectModel();
// 				var iId = oModel.getProperty("/IDEA_ID");
// 				this._closeDialog();
// 				this.navigateTo("idea-display", {
// 					id: iId
// 				}, true);
// 			},

			onRewardsBtnUnPublish: function() {
				this.onExecuteStatusTransition('sap.ino.config.REWARD_UNPUBLISH');
			},

			onRewardsBtnPublishAuthor: function() {
				this.onExecuteStatusTransition('sap.ino.config.REWARD_PUB_AUTHOR');
			},

			onRewardsBtnPublishCommunity: function() {
				this.onExecuteStatusTransition('sap.ino.config.REWARD_PUB_COMMUNITY');
			},

			onRewardDialogDel: function(oEvent) {
				var that = this;
				var oDelRequest = this.onDel(oEvent);
				var oDelBtn = oEvent.getSource();
				oDelRequest.done(function(oResponse) {
					if (!oResponse || !oResponse.confirmationCancelled) {
						that._closeDialog();
						return;
					}
					if (oDelBtn && jQuery.type(oDelBtn.focus) === "function") {
						oDelBtn.focus();
					}
				});
			},

			onRewardDialogCancel: function() {
				this._closeDialog();
			},

			onRewardAmoutChange: function(oEvent) {
				var nAuthorId = this._getAuthorId(oEvent);
				var nTotalAmount = this._getTotalAmount(nAuthorId, oEvent);
				this._setRewardShare(nAuthorId, nTotalAmount, oEvent);
				this._setLastRewardShare();
				this.getObjectModel().setProperty("/REWARD_AMOUNT_TOTAL", nTotalAmount);
			},

			_getAuthorId: function(oEvent) {
				var nAuthorId = -1;
				var aCustomData = oEvent.getSource().getCustomData();
				jQuery.each(aCustomData, function(index, data) {
					if (data.getKey() === "Id") {
						nAuthorId = data.getValue();
						return false;
					}
				});
				return nAuthorId;
			},

			_getTotalAmount: function(nAuthorId, oEvent) {
				var sum = 0;
				var aRewards = this.getObjectModel().getProperty("/Rewards");
				jQuery.each(aRewards, function(index, data) {
					var sValue = data.REWARD_AMOUNT;
					if (data.AUTHOR_ID === nAuthorId) {
						sValue = oEvent.getParameter("value");
					}
					if (sValue) {
						var amount = parseInt(sValue.toString().replace(/,/g, ""), 10);
						if (!isNaN(amount)) {
							sum += parseInt(amount, 10);
						}
					}
				});
				return sum;
			},

			_setRewardShare: function(nAuthorId, nTotalAmount, oEvent) {
				var nSumAmout = nTotalAmount;
				if (!nSumAmout) {
					nSumAmout = 1;
				}
				var oModel = this.getObjectModel();
				var aRewards = oModel.getProperty("/Rewards");
				jQuery.each(aRewards, function(index, data) {
					var sValue = data.REWARD_AMOUNT;
					if (data.AUTHOR_ID === nAuthorId) {
						sValue = oEvent.getParameter("value");
					}
					if (sValue) {
						var amount = parseInt(sValue.toString().replace(/,/g, ""), 10);
						if (isNaN(amount) || amount === 0) {
							amount = 0;
						} else {
							amount = Math.round(amount * 100 / nSumAmout);
						}
						oModel.setProperty("/Rewards/" + index + "/REWARD_SHARE", amount);
					}
				});
			},

			_setLastRewardShare: function() {
				var nPercentage = 0;
				var oModel = this.getObjectModel();
				var aRewards = oModel.getProperty("/Rewards");
				jQuery.each(aRewards, function(index, data) {
					if (data.REWARD_SHARE) {
						nPercentage += data.REWARD_SHARE;
					}
				});
				var nRewardLength = aRewards.length - 1;
				for (; nRewardLength >= 0; nRewardLength--) {
					if (aRewards[nRewardLength].REWARD_SHARE > 0) {
						oModel.setProperty("/Rewards/" + nRewardLength + "/REWARD_SHARE",
							100 - nPercentage + aRewards[nRewardLength].REWARD_SHARE);
						break;
					}
				}
			},

			_setRewardUnit: function() {
				var oModel = this.getObjectModel();
				var aRewards = oModel.getProperty("/Rewards");
				var sUnit = oModel.getProperty("/REWARD_UNIT_CODE");
				oModel.setProperty("/REWARD_UNIT", sUnit);
				jQuery.each(aRewards, function(index, data) {
					oModel.setProperty("/Rewards/" + index + "/REWARD_UNIT", sUnit);
				});
			},

			rewardShareFormatter: function(nRewardShare) {
				if (nRewardShare === null || nRewardShare === void 0) {
					return "";
				}
				return Math.round(parseFloat(nRewardShare * 100)) / 100 + "%";
			},

			_closeDialog: function() {
				if (this._oDialog) {
					this._oDialog.close();
					this._oDialog.destroy();
				}
			}
			//end
		});

	});
}; // end of sap/ino/vc/idea/ModifyRewardList.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.PPM.controller') ) {
sap.ui.getCore().loadLibrary("sap.ino.wall");

jQuery.sap.declare('sap.ino.vc.idea.PPM.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.odata.ODataModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.NumberFormat'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/PPM.controller",[
    "sap/ino/vc/commons/BaseObjectController",
    "sap/ino/commons/formatters/ObjectListFormatter",
    "sap/ino/commons/application/Configuration",
    "sap/ui/model/odata/ODataModel",
    "sap/ui/core/format/NumberFormat"
    ], function(BaseController, ObjectListFormatter, Configuration, ODataModel, NumberFormat) {

	"use strict";

	//mapping object type with corresponding fragment
	var oPPMMapping = {
		"DPO": "sap.ino.vc.idea.fragments.PPMProjectDetail",
		"PPO": "sap.ino.vc.idea.fragments.PPMItemDetail",
		"TPO": "sap.ino.vc.idea.fragments.PPMTaskDetail",
		"TTO": "sap.ino.vc.idea.fragments.PPMTaskDetail"
	};

	return BaseController.extend("sap.ino.vc.idea.PPM", {

		/** @member the formatter */
		formatter: jQuery.extend({
			currentStep: function(currentStep) {
				return currentStep - 1;
			},
			successProbability: function(sSuccessProbability) {
				var oNumberFormat = NumberFormat.getPercentInstance({
					maxFractionDigits: 3
				});
				return oNumberFormat.format(sSuccessProbability / 1000);
			}
		}, this.formatter, ObjectListFormatter),

		onInit: function() {
			BaseController.prototype.onInit.apply(this, arguments);

			var sServiceURL = Configuration.getPPMURL();
			this.oPPMModel = new ODataModel(sServiceURL, false);
			this.setModel(this.oPPMModel, "ppm");
		},

		onBeforeRendering: function(oEvent) {
			var vIdeaId = this.getObjectModel().getProperty("/ID");
			var sIdeaId = ("0000000000" + vIdeaId).slice(-10);
			var oList = this.getView().byId("ideaPPMList");
			var ofilter = new sap.ui.model.Filter("IdeaID", "EQ", sIdeaId);

			oList.getBinding("items").filter(ofilter);
		},

		/**
		 * listens to expand event; creates controls lazily for displaying additional information about the PPM object detail
		 **/
		onExpand: function(oEvent) {
			var oSourceCtrl = oEvent.getSource();
			var oChangeEvent = oSourceCtrl.getBindingContext("ppm");
			if (oEvent.getParameter("expand") && oChangeEvent) {
				oSourceCtrl.toggleStyleClass("sapInoPPMExpanded");
				var oData = oChangeEvent.getObject();
				var sObjectType = oData.LinkedObjectType;
				var aPathComponents = oData.LinkedEntity.split("/");
				var sPath = aPathComponents[aPathComponents.length - 2];
				var oCtrl;

				if (sPath) {
					oCtrl = this.createFragment(oPPMMapping[sObjectType]);
					oCtrl.bindElement("ppm>/" + sPath);
				}
				oSourceCtrl.addContent(oCtrl);
			} else {
				oSourceCtrl.toggleStyleClass("sapInoPPMExpanded");
				// destroy all components on close
				oSourceCtrl.removeAllContent();
			}
		}
	});
});
}; // end of sap/ino/vc/idea/PPM.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.RelatedIdeas.controller') ) {
jQuery.sap.declare('sap.ino.vc.idea.RelatedIdeas.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.m.GroupHeaderListItem'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/RelatedIdeas.controller",[
    "sap/ino/vc/commons/BaseObjectController",
    "sap/ino/vc/commons/BaseListController",
    "sap/ino/commons/application/Configuration",
    "sap/ui/Device",
    "sap/ino/vc/idea/mixins/DuplicateActionMixin",
    "sap/m/GroupHeaderListItem",
    "sap/ino/commons/models/object/Idea",
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/formatters/ObjectListFormatter",
    "sap/ui/model/Sorter",
    "sap/m/Button",
    "sap/ino/vc/idea/mixins/VoteMixin",
    "sap/ino/vc/commons/mixins/FollowMixin",
    "sap/ino/vc/idea/mixins/VolunteerMixin",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator"
], function(BaseController,
	BaseListController,
	Configuration,
	Device,
	DuplicateActionMixin,
	GroupHeaderListItem,
	Idea,
	JSONModel,
	ObjectListFormatter,
	Sorter,
	Button,
	VoteMixin,
	FollowMixin,
	VolunteerMixin,
	Filter,
	FilterOperator) {
	"use strict";

	return BaseController.extend("sap.ino.vc.idea.RelatedIdeas", jQuery.extend({}, DuplicateActionMixin, VoteMixin, FollowMixin,
		VolunteerMixin, {

			formatter: ObjectListFormatter,

			onInit: function() {
				BaseController.prototype.onInit.apply(this, arguments);
				this._sResizeSimList = this.attachListControlResized(this.byId("idealist-similar"));
				this._sResizeRelList = this.attachListControlResized(this.byId("idealist-related"));
				this._sResizeRMerList = this.attachListControlResized(this.byId("idealist-merge"));
			},

			onExit: function() {
				BaseController.prototype.onExit.apply(this, arguments);
				this.detachListControlResized(this._sResizeSimList);
				this.detachListControlResized(this._sResizeRelList);
				this.detachListControlResized(this._sResizeRMerList);
			},

			/*getTopLevelController: function() {
		    if(!this.oTopLevelController) {
		        var oView  = this.getView();
    		    var oParentView = oView.getParent && oView.getParent();
    		    while(oParentView && !oView.getController().attachObjectModelDataReceivedListener) {
    		        oView = oParentView;
    		        oParentView = oView.getParent && oView.getParent();
    		    }
    		    if (oView.getController().attachObjectModelDataReceivedListener) {
    		        this.oTopLevelController = oView.getController();
    		    }
		    }
		    
		    return this.oTopLevelController;
		},*/

			onBeforeRendering: function(oEvent) {
				var that = this;
				//var oObjectController = this.getTopLevelController();
				//oObjectController.attachObjectModelDataReceivedListener(this.myCallback);
                var oOtherPanel = this.byId("otherCampaignPanel");
                if(oOtherPanel && oOtherPanel.getExpanded())
                {
                    oOtherPanel.setExpanded(false);
                }
                var oCurrentPanel = this.byId("currentCampaignPanel");
                if(oCurrentPanel && !oCurrentPanel.getExpanded())
                {
                    oCurrentPanel.setExpanded(true);
                }
				var iIdeaId = this.getObjectModel().getKey();
			    var iCampaignId = this.getObjectModel().getProperty("/CAMPAIGN_ID");
				if (iIdeaId !== null) {
					var oSimilarModel = new JSONModel(Configuration.getRelatedIdeasURL(iIdeaId));
					var oSimilarList = this.byId("idealist-similar");
					that.bindSimilarIdeaList(oSimilarList, oSimilarModel, FilterOperator.EQ,iCampaignId);

					var oRelatedIdeaList = this.byId('idealist-related');
					var oMergeIdeaList = this.byId('idealist-merge');
					//var oRelatedIdeaOtherList = this.byId('idealist-relatedOther');
					that.bindRelatedCampaignIdeaList(oRelatedIdeaList, FilterOperator.EQ,iCampaignId);
					that.bindMergeIdeaList(oMergeIdeaList, FilterOperator.EQ,iCampaignId);
				}
			},

			/*myCallback: function(){
            console.log();
        },*/

			onAfterRendering: function() {
				//var oObjectController = this.getTopLevelController();
				//oObjectController.detachObjectModelDataReceivedListener(this.myCallback);
			},

			getRelatedIdeaItemTemplate: function() {
				// prepare FlatListItem template by adding checkbox
				if (!this._oIdeaDupListItemTemplate) {
					this._oIdeaDupListItemTemplate = this.getFragment("sap.ino.vc.idea.fragments.FlatListItem");
					// as this is a template, we need to get the idea via Fragment's byId
					var oActionBox = sap.ui.core.Fragment.byId(this.getView().getId(), "flatListIdeaActions");
					var oButton = new Button({
						type: "Transparent",
						visible: this.getObjectModel().getProperty("/property/actions/update/enabled") &&
							!this.getModel("device").getProperty("/system/phone"),
						icon: "sap-icon://duplicate",
						tooltip: this.getModel("i18n").getProperty("IDEA_OBJECT_TIT_DUPLCATE_GENERAL"),
						press: this.onDuplicate.bind(this)
					});
					oActionBox.addItem(oButton);
				}
				return this._oIdeaDupListItemTemplate;
			},

			onItemPress: function(oEvent) {
				var oSource = oEvent.getSource();
				var iItemId = oSource.getBindingContext("data").getProperty("ID");
				if (iItemId) {
					this.navigateTo("idea-display", {
						id: iItemId
					});
				}
			},
			onExpandOther: function(oEvent) {
				var that = this;
				var iIdeaId = this.getObjectModel().getKey();
				var iCampaignId = this.getObjectModel().getProperty("/CAMPAIGN_ID");
				var oSourceCtrl = oEvent.getSource();
				var oChangeEvent = oSourceCtrl.getBindingContext("data");
				if (iIdeaId !== null && oEvent.getParameter("expand") && oChangeEvent) {
					var oSimilarModel = new JSONModel(Configuration.getRelatedIdeasURL(iIdeaId));
					var oSimilarOtherList = this.byId("idealist-similarOther");
					that.bindSimilarIdeaList(oSimilarOtherList, oSimilarModel, FilterOperator.NE,iCampaignId);
					var oRelatedIdeaOtherList = this.byId('idealist-relatedOther');
					that.bindRelatedOtherCampaignIdeaList(oRelatedIdeaOtherList, FilterOperator.NE,iCampaignId);

				}
			},
			bindMergeIdeaList: function(oList, oFilterOperater) {
			    var that = this;
				if (!oList) {
					jQuery.sap.log.warning("List not ready", "", "sap.ino.vc.idea.RelatedIdeasController.js");
				} else {
					oList.bindItems({
						path: "data>RelatedIdeas",
						template: this.getRelatedIdeaItemTemplate(),
						filters: [new Filter({
						    path: "SEMANTIC",
							operator: oFilterOperater,
							value1: "sap.ino.config.MERGED"
						})],
						sorter: [new Sorter("SEMANTIC_SOURCE", false, true)],
						groupHeaderFactory: function(oGroup) {
							return new GroupHeaderListItem({
								title: that.getText("IDEA_RELATED_" + oGroup.key),
								upperCase: false
							}).addStyleClass("sapInoIdeasRelatedHeader");
						}
					});
				}
			},
			bindRelatedCampaignIdeaList: function(oList, oFilterOperater,iCampaignid) {
				var that = this;
				if (!oList) {
					jQuery.sap.log.warning("List not ready", "", "sap.ino.vc.idea.RelatedIdeasController.js");
				} else {
					oList.bindItems({
						path: "data>RelatedIdeas",
						template: this.getRelatedIdeaItemTemplate(),
						filters: [new Filter({
							path: "CAMPAIGN_ID",
							operator: oFilterOperater,
							value1: iCampaignid
						}),new Filter({
						    path: "SEMANTIC",
							operator: oFilterOperater,
							value1: "sap.ino.config.DUPLICATE" || "sap.ino.config.COPIED"
						})],
						sorter: [new Sorter("SEMANTIC_SOURCE", false, true)],
						groupHeaderFactory: function(oGroup) {
							return new GroupHeaderListItem({
								title: that.getText("IDEA_RELATED_" + oGroup.key),
								upperCase: false
							}).addStyleClass("sapInoIdeasRelatedHeader");
						}
					});
				}
			},
			bindRelatedOtherCampaignIdeaList: function(oList, oFilterOperater,iCampaignid) {
				var that = this;
				if (!oList) {
					jQuery.sap.log.warning("List not ready", "", "sap.ino.vc.idea.RelatedIdeasController.js");
				} else {
					oList.bindItems({
						path: "data>RelatedIdeas",
						template: this.getRelatedIdeaItemTemplate(),
						filters: [new Filter({
							path: "CAMPAIGN_ID",
							operator: oFilterOperater,
							value1: iCampaignid
						}),new Filter({
						    path: "SEMANTIC",
							operator: oFilterOperater,
							value1: "sap.ino.config.MERGED"
						})],
						sorter: [new Sorter("SEMANTIC_SOURCE", false, true)],
						groupHeaderFactory: function(oGroup) {
							return new GroupHeaderListItem({
								title: that.getText("IDEA_RELATED_" + oGroup.key),
								upperCase: false
							}).addStyleClass("sapInoIdeasRelatedHeader");
						}
					});
				}
			},
			bindSimilarIdeaList: function(oList, oModel, oFilterOperater,iCampaignid) {
				var that = this;
				if (!oList) {
					jQuery.sap.log.warning("List not ready", "", "sap.ino.vc.idea.RelatedIdeasController.js");
				} else {
					oList.setModel(oModel, "data");
					//oSimilarList.bindItems({path: "data>/", template: this.getRelatedIdeaItemTemplate()});
					oList.bindItems({
						path: "data>/",
						filters: new Filter({
							path: "CAMPAIGN_ID",
							operator: oFilterOperater,
							value1: iCampaignid
						}),
						template: this.getRelatedIdeaItemTemplate(),
						sorter: [new Sorter("SEMANTIC", false, true)],
						groupHeaderFactory: function(oGroup) {
							return new GroupHeaderListItem({
								title: that.getText("IDEA_RELATED_TITLE_SIMILAR_IDEAS"),
								upperCase: false
							}).addStyleClass("sapInoIdeasRelatedHeader");
						}
					});
				}
			}
		}));
});
}; // end of sap/ino/vc/idea/RelatedIdeas.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.Rewards.controller') ) {
jQuery.sap.declare('sap.ino.vc.idea.Rewards.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.GroupHeaderListItem'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/Rewards.controller",[
    "sap/ino/commons/models/aof/ApplicationObjectChange",
    "sap/ino/vc/commons/BaseController",
    "sap/ino/vc/idea/mixins/CreateRewardActionMixin",
    "sap/ino/vc/idea/RewardFormatter",
    "sap/m/GroupHeaderListItem"
], function(ApplicationObjectChange,
	BaseController,
	CreateRewardActionMixin,
	RewardFormatter,
	GroupHeaderListItem
) {
	"use strict";

	var oFormatter = {};
	oFormatter = jQuery.extend(oFormatter, RewardFormatter);
	// Format the header of the Rewards Phase group
	oFormatter.formatGroupHeader = function(oGroup) {
		return new GroupHeaderListItem({
			title: this.getText("REWARDS_LBL_IDEA_PHASE") + oFormatter.ideaPhase(oGroup.ideaPhaseCode),
			upperCase: false
		});
	};

	return BaseController.extend("sap.ino.vc.idea.Rewards", jQuery.extend({}, CreateRewardActionMixin, {
		formatter: oFormatter,
		// Use group order as key and map group order to phase code
		// in order to format the group header later on
		grouper: function(oContext) {
			return {
				key: oContext.getProperty("GROUP_ORDER"),
				ideaPhaseCode: oContext.getProperty("IDEA_PHASE_CODE")
			};
		},
		onInit: function() {
			BaseController.prototype.onInit.apply(this, arguments);
			this._initHandleRewardsAOChange();
		},

		/*onExit: function() {
			var that = this;
			BaseController.prototype.onExit.apply(this, arguments);
			that._aResizeEvalList.forEach(function(fnResizeEvalList) {
				that.detachListControlResized(fnResizeEvalList);
			});
		},*/

		onItemPress: function(oEvent) {
			this.getView().getController().onCreateReward(oEvent);
		},

		/**
		 * Update the evaluation lists, once an evaluation is
		 * created, deleted, status changed or submitted.
		 */
		_initHandleRewardsAOChange: function() {
			var that = this;

			var fnAOChangeListener = function(oEvent) {
				// if (oEvent.getParameter("object").getMetadata().getName() === "sap.ino.commons.models.object.RewardList"
				// && that && that.getView().byId("rewardsList")) {
				if (that && that.getView().byId("rewardsList")) {
					var fnRebindList = function(oList) {
						if (oList) {
							var oBindingInfo = oList.getBindingInfo("items");
							oList.bindItems(oBindingInfo);
						}
					};

					var sAction = oEvent && oEvent.getParameter("actionName");
					if (sAction && ["create", "del", "submit", "modifyAndSubmit", "executeStatusTransition", "bulkDeleteRewards", "changeAuthorStatic"].indexOf(sAction) > -1) {
						var oChangeRequest = oEvent.getParameter("changeRequest");
						if ((sAction && ["del", "submit", "modifyAndSubmit", "create"].indexOf(sAction) > -1) || oChangeRequest) {
							fnRebindList(that.getView().byId("rewardsList"));
						}
					}
				}
			};

			ApplicationObjectChange.attachChange(ApplicationObjectChange.Action.Create, fnAOChangeListener);
			ApplicationObjectChange.attachChange(ApplicationObjectChange.Action.Del, fnAOChangeListener);
			ApplicationObjectChange.attachChange(ApplicationObjectChange.Action.Action, fnAOChangeListener);
		},

		onEmployeePressed: function(oEvent) {
			oEvent.preventDefault();
			var oSource = oEvent.getSource();
			if (oSource) {

				var iIdentityId = oSource.getBindingContext("data") &&
					oSource.getBindingContext("data").getProperty("EMPLOYEE_ID");
				if (iIdentityId !== undefined && !this.oIdentityCardView) {
					this.oIdentityCardView = sap.ui.xmlview({
						viewName: "sap.ino.vc.iam.IdentityCard"
					});
					this.getView().addDependent(this.oIdentityCardView);
				}
				if (this.oIdentityCardView && this.oIdentityCardView.getController()) {
					this.oIdentityCardView.getController().open(oSource, iIdentityId);
				}
			}
		}
	}));
});
}; // end of sap/ino/vc/idea/Rewards.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.Volunteers.controller') ) {
jQuery.sap.declare('sap.ino.vc.idea.Volunteers.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.m.GroupHeaderListItem'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/Volunteers.controller",[
    "sap/ino/vc/commons/BaseObjectController",
    "sap/ino/vc/commons/BaseListController",
    "sap/ino/commons/application/Configuration",
    "sap/ui/Device",
    "sap/ino/vc/idea/mixins/DuplicateActionMixin",
    "sap/m/GroupHeaderListItem",
    "sap/ino/commons/models/object/Idea",
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/formatters/ObjectListFormatter",
    "sap/ui/model/Sorter"
], function (BaseController,
             BaseListController,
             Configuration,
             Device,
             DuplicateActionMixin,
             GroupHeaderListItem,
             Idea,
             JSONModel,
             ObjectListFormatter,
             Sorter) {
    "use strict";
    
    var oFormatter = {};
	jQuery.extend(oFormatter, BaseController.prototype.formatter);

	oFormatter.generateMailURL = function(sMailAddress) {
		var oContent = this.oView.getController().createMailContent();

		if (oContent) {
			//sap.m.URLHelper is a namescpace and can't be required in the define
			return sap.m.URLHelper.normalizeEmail(sMailAddress, oContent.subject, oContent.body);
		} else {
			return sap.m.URLHelper.normalizeEmail(sMailAddress);
		}
	};
    
    return BaseController.extend("sap.ino.vc.idea.Volunteers", {
        
        formatter: oFormatter,
        
        onBeforeRendering: function(oEvent) { 
            var iIdeaId = this.getObjectModel().getKey();
            if (!!iIdeaId) {
                var oVolunteerList = this.byId("volunteerlist");
                oVolunteerList.bindItems({
                    path: "data>Volunteers",
                    template: this.getItemTemplate()
                });
            }
        },
        
        getItemTemplate: function() {
            return this.getFragment("sap.ino.vc.idea.fragments.VolunteerListItem");
        }
    });
});
}; // end of sap/ino/vc/idea/Volunteers.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.mixins.AddExpertFromClipboardMixin') ) {
jQuery.sap.declare('sap.ino.vc.idea.mixins.AddExpertFromClipboardMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/mixins/AddExpertFromClipboardMixin",[
    "sap/ino/vc/idea/mixins/BaseActionMixin",
    "sap/m/MessageToast",
    "sap/ino/vc/commons/BaseController",
    "sap/m/MessageBox",
    "sap/ino/commons/models/object/User",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/ino/commons/models/object/Idea"
], function(BaseActionMixin, MessageToast, BaseController, MessageBox, User, Filter, FilterOperator, Idea) {
    "use strict";

	var AddExpertFromClipboardMixin = jQuery.extend({}, BaseActionMixin);

    AddExpertFromClipboardMixin.onAddFromClipboard = function() {
		var oDialog = this.getAddFromClipboardDialog();
		oDialog.open();
		this._bindFromClipboard();
	};

	AddExpertFromClipboardMixin._bindFromClipboard = function() {
		var oList = this.byId("AddExpertList");
		var oTemplate = this._getClipboardListItem();
		var aExpertId = this._getClipboardExpertIds();
		if (aExpertId.length > 0) {
			var oFilter = this._getClipboardItemsFilter(aExpertId);
			// we cannot do the aggregation binding declaratively in XML view, due to data-dependent ODATA filter
			oList.bindAggregation("items", {
				path: "data>/SearchIdentity(searchToken='*')/Results",
				template: oTemplate,
				filters: oFilter,
				parameters: {
					select: "ID,NAME,ORGANIZATION,IMAGE_ID"
				}
			});
		} else {
			oList.unbindAggregation("items");
		}
		this.aSelectedExperts = [];
		this.getModel("view").setProperty("/CLIPBOARD_ITEM_SELECT_COUNTER", this.view.CLIPBOARD_ITEM_SELECT_COUNTER + 1); // refresh bindings
	};

	AddExpertFromClipboardMixin._getClipboardListItem = function() {
		if (!this._oClipboardListItem) {
			this._oClipboardListItem = this.createFragment("sap.ino.vc.idea.fragments.AddExpertFromClipboardListItem");
		}
		return this._oClipboardListItem;
	};

	AddExpertFromClipboardMixin._getClipboardExpertIds = function() {
		var oClipboardModel = this._getClipboardModel();
		return oClipboardModel.getObjectKeys(User);
	};

	AddExpertFromClipboardMixin._getClipboardItemsFilter = function(aClipboardItems) {
		var aFilter = [];
		jQuery.each(aClipboardItems, function(i, iExpertId) {
			var oFilter = new Filter({
				path: "ID",
				operator: FilterOperator.EQ,
				value1: iExpertId
			});
			aFilter.push(oFilter);
		});
		return (aFilter.length === 0) ? [] : [new Filter(aFilter, false)];
	};

	AddExpertFromClipboardMixin.getAddFromClipboardDialog = function() {
		if (!this._oAddFromClipboardDialog) {
			this._oAddFromClipboardDialog = this.createFragment("sap.ino.vc.idea.fragments.AddExpertFromClipboard");
			this.getView().addDependent(this._oAddFromClipboardDialog);
		}
		return this._oAddFromClipboardDialog;
	};

	AddExpertFromClipboardMixin.onAddFromClipboardDialogSelectAll = function() {
		var that = this;
		this.aSelectedExperts = [];
		var oList = this.byId("AddExpertList");
		var aListItem = oList.getAggregation("items") || [];
		jQuery.each(aListItem, function(i, oListItem) {
			var oExpert = {
				id: oListItem.getBindingContext("data").getProperty("ID"),
				name: oListItem.getBindingContext("data").getProperty("NAME")
			};
			that.aSelectedExperts.push(oExpert);
		});
		this.getModel("view").setProperty("/CLIPBOARD_ITEM_SELECT_COUNTER", this.getModel("view").getProperty("/CLIPBOARD_ITEM_SELECT_COUNTER") + 1); // refresh bindings
	};

	AddExpertFromClipboardMixin.onAddFromClipboardItemSelected = function(oEvent) {
		var oCheckbox = oEvent.getSource();
		var bSelected = oCheckbox.getSelected();
		var iExpertId = oCheckbox.data("id");
		var aMatchedExperts = jQuery.grep(this.aSelectedExperts, function(oExpert) {
			return oExpert.id === iExpertId;
		});
		if (bSelected && aMatchedExperts.length === 0) {
			var oExpert = {
				id: iExpertId,
				name: oCheckbox.data("name")
			};
			this.aSelectedExperts.push(oExpert);
		} else if (!bSelected && aMatchedExperts.length !== 0) {
			// remove expert from array
			this.aSelectedExperts = jQuery.grep(this.aSelectedExperts, function(oExpert) {
				return oExpert.id !== iExpertId;
			});
		}
	};

	AddExpertFromClipboardMixin.isClipboardItemEnabled = function(iExpertId, iCounter) {
	    var aIdeaExperts = this.isActionContextSingleIdeaDisplay() || this.getViewProperty("/IS_EVALUATION_REQUEST") ? this.getObjectModel().getProperty("/Experts") : [];
		return jQuery.grep(aIdeaExperts, function(o) {
			return o.IDENTITY_ID === iExpertId;
		}).length === 0;
	};

	AddExpertFromClipboardMixin.isClipboardItemSelected = function(iExpertId, iCounter) {
	    var aIdeaExperts = this.isActionContextSingleIdeaDisplay() || this.getViewProperty("/IS_EVALUATION_REQUEST") ? this.getObjectModel().getProperty("/Experts") : [];
		var aExistingExperts = jQuery.grep(aIdeaExperts, function(o) {
			return o.IDENTITY_ID === iExpertId;
		});
		if (aExistingExperts.length > 0) {
			return false;
		}
		var aMatchedExperts = jQuery.grep(this.aSelectedExperts, function(oExpert) {
			return oExpert.id === iExpertId;
		});
		return aMatchedExperts.length > 0;
	};

	AddExpertFromClipboardMixin.onAddFromClipboardDialogCancel = function() {
		var oDialog = this.getAddFromClipboardDialog();
		oDialog.close();
	};

	AddExpertFromClipboardMixin.onAddFromClipboardDialogOK = function() {
		var that = this;
		var aExpert = [];
	    jQuery.each(this.aSelectedExperts, function(i, oExpert) {
	        if(that.getViewProperty("/IS_EVALUATION_REQUEST")){
	            aExpert.push({
    	            IDENTITY_ID: oExpert.id,
    	            NAME: oExpert.name
    	        }); 
	        } else {
	            aExpert.push({
    	            IDENTITY_ID: oExpert.id
    	        });    
	        }
		});
		if (aExpert.length > 0) {
	    	that._addExpert(aExpert);
		}
		var oDialog = this.getAddFromClipboardDialog();
		oDialog.close();
		if(this._oAssignExpertDialog){
    		oDialog = this._oAssignExpertDialog;
    		oDialog._dialog.close();
    		oDialog.destroy();
    		this._oAssignExpertDialog = undefined;
    		this.resetActionState(oDialog.data("context") === "mass");
    		this.restoreFocusAfterActionDialogClose();
		}
	};
	
	AddExpertFromClipboardMixin._addExpert = function(aExpert, sExpertName) {
		var that = this;
		var oModel = this.isActionContextSingleIdeaDisplay() || this.getViewProperty("/IS_EVALUATION_REQUEST") ? this.getObjectModel() : Idea;
		if (this.getViewProperty("/IS_EVALUATION_REQUEST")) {
		    if(Array.isArray(aExpert) && aExpert.length){
    		    jQuery.each(aExpert, function(i, oExpert) {
        			oModel.addExpert(oExpert);
        		});
        	}
		} else {
			var vIdeaID, sActionName;
		    if(this.isActionContextSingleIdeaDisplay()){
		        vIdeaID = this.getObjectModel().getKey();
		    } else {
		        if(this.getModel("assignment") && this.getModel("assignment").getProperty("/IDS")){
		            vIdeaID = this.getModel("assignment").getProperty("/IDS");
		        } else if (this.getModel("assignment") && this.getModel("assignment").getProperty("/ID")){
		            vIdeaID = this.getModel("assignment").getProperty("/ID");
		        }
		    }
		    var bIsMassAction = Array.isArray(vIdeaID);
		    var oParameters = {};
		    oParameters.Experts = aExpert;
			var oMessages = {
				success: function() {
					return sExpertName ? that.getText("IDEA_OBJECT_MSG_EXPERT_ASSIGNED_SUCCESS", [sExpertName]) : that.getText("IDEA_OBJECT_MSG_EXPERTS_ASSIGNED_SUCCESS");
				},
				error: function() {
					return sExpertName ? that.getText("IDEA_OBJECT_MSG_EXPERT_ASSIGNED_ERROR", [sExpertName]) : that.getText("IDEA_OBJECT_MSG_EXPERTS_ASSIGNED_ERROR");
				}
			};
		    var oOptions = {
    			parameters: oParameters,
    			messages: oMessages,
    			staticparameters: this.isActionContextSingleIdeaDisplay() || bIsMassAction ? undefined : vIdeaID //undefine: for model instance, vIdeaID: for model static method
    		};
    		if (bIsMassAction) {
    			oOptions.parameters.keys = vIdeaID;
    			sActionName = "massAddExpert";
    		} else {
    		    sActionName = "addExpert";
    		}
			var oActionPromise = BaseController.prototype.executeObjectAction.call(this, oModel, sActionName, oOptions);
			return oActionPromise;
		}
	};

	AddExpertFromClipboardMixin._removeExpert = function(aExpert, sExpertName) {
		var that = this;
		var oModel = this.getObjectModel();

		if (this.getViewProperty("/IS_EVALUATION_REQUEST")) {
			oModel = this.getObjectModel();
			oModel.removeExpert(aExpert[0].IDENTITY_ID);
		} else {
			MessageBox.confirm(this.getText("MSG_DEL_CONFIRM"), {
				onClose: function(sDialogAction) {
					if (sDialogAction !== MessageBox.Action.OK) {
						return;
					} else {
						var oParameters = {};
		                oParameters.Experts = aExpert;
        				var oMessages = {
        					success: function() {
        						return that.getText("IDEA_OBJECT_MSG_EXPERT_UNASSIGNED_SUCCESS", [sExpertName]);
        					},
        					error: function() {
        						return that.getText("IDEA_OBJECT_MSG_EXPERT_UNASSIGNED_ERROR", [sExpertName]);
        					}
        				};
        				var oOptions = {
        					parameters: oParameters,
        					messages: oMessages,
        					staticparameters: undefined
        				};
        				BaseController.prototype.executeObjectAction.call(that, oModel, 'removeExpert', oOptions);
					}
				}
			});
		}
	};
	
	AddExpertFromClipboardMixin.isActionContextSingleIdeaDisplay = function() {
        return !!(this.getObjectModel && 
            this.getObjectModel() &&
            this.getObjectModel().getMetadata && 
            this.getObjectModel().getMetadata().getName() === "sap.ino.commons.models.object.Idea");
    };
    
    return AddExpertFromClipboardMixin;	
});
}; // end of sap/ino/vc/idea/mixins/AddExpertFromClipboardMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.mixins.AssignmentActionMixin') ) {
jQuery.sap.declare('sap.ino.vc.idea.mixins.AssignmentActionMixin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ListItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.Token'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.message.Message'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/mixins/AssignmentActionMixin",[
    "sap/ino/vc/idea/mixins/BaseActionMixin",
    "sap/ino/vc/commons/BaseController",
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/models/object/Idea",
    "sap/ino/commons/models/aof/PropertyModel",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/ui/model/Sorter",
    "sap/m/MessageToast",
    "sap/ui/Device",
    "sap/ui/core/ListItem",
    "sap/m/Token",
    "sap/ino/commons/models/object/User",
    "sap/ui/core/MessageType",
    "sap/ui/core/message/Message",
    "sap/m/MessageBox",
    "sap/ino/commons/application/Configuration"
], function(BaseActionMixin, BaseController, JSONModel, Idea, PropertyModel, Filter, FilterOperator, Sorter, MessageToast, Device, ListItem,
	Token, User, MessageType, Message, MessageBox, Configuration) {
	"use strict";

	/**
	 * Assignment Action - handles Assign Coach, Assign Me as Coach and Unassign Coach actions both for single ideas and mass actions
	 */
	var AssignmentActionMixin = jQuery.extend({}, BaseActionMixin);

	AssignmentActionMixin._openAssignmentActionSheet = function(oSource, sContext) {
		if (!this._oAssignActionSheet) {
			this._oAssignActionSheet = this.createFragment("sap.ino.vc.idea.fragments.AssignmentActionSheet", this.getView().getId());
			this.getView().addDependent(this._oAssignActionSheet);
		}
		this._oAssignActionSheet.data("context", sContext || "single");
		jQuery.sap.delayedCall(0, this, function() {
			this._oAssignActionSheet.openBy(oSource);
		});

	};

	/**
	 * Event handler: opens Assignment Action sheet for mass operations with assignment options and prepare the internal private model
	 *
	 * @param {Event} oEvent the event
	 * @return {undefined} Nothing
	 */
	AssignmentActionMixin.onMassAssignGeneral = function(oEvent) {
		var oSource = oEvent.getSource();
		if (this.getModel("assignment")) {
			this.getModel("assignment").destroy();
		}
		// preparing the model based on BaseActionMixin's aggregation function
		var oModel = new JSONModel();
		this.setModel(oModel, "assignment");
		var oAggregatedActions = this._computeActionAggregations();
		// mock property model structure for actions
		var _checkActionIsEnabled = function(bValue) {
			return !!bValue;
		};
		// 		var aAuthors = [];
		// 		jQuery.each(this._oSelectionMap, function(iIndex, oIdea) {
		// 	        var aAuthorList = oIdea.Authors.__list;
		// 	        jQuery.each(aAuthorList, function(iIndex, oAuthor){
		// 	            var sAuthor = Number(oAuthor.substr(oAuthor.indexOf("IDENTITY_ID=") + 12).replace(")", ""));
		// 	            if(aAuthors.indexOf(sAuthor) === -1){
		// 	                aAuthors.push(sAuthor);
		// 	            }
		// 	        });
		// 		});
		var oProps = {
			actions: {
				assignToMe: {
					enabled: oAggregatedActions.assignToMe.every(_checkActionIsEnabled)
				},
				assignCoach: {
					enabled: oAggregatedActions.assignCoach.every(_checkActionIsEnabled) && oAggregatedActions.campaigns.length === 1
				},
				unassignCoach: {
					enabled: oAggregatedActions.unassignCoach.every(_checkActionIsEnabled)
				},
				addExpert: {
					enabled: oAggregatedActions.addExpert.every(_checkActionIsEnabled)
				},
				assignTag: {
					enabled: oAggregatedActions.assignTag.every(_checkActionIsEnabled)
				},
				reassignCampaign: {
					enabled: oAggregatedActions.reassignCampaign.every(_checkActionIsEnabled) && oAggregatedActions.campaigns.length === 1
				}
			}
		};
		oModel.setProperty("/property", oProps);
		oModel.setProperty("/IDS", oAggregatedActions.ideas);
		oModel.setProperty("/CAMPAIGN_IDS", oAggregatedActions.campaigns);
		oModel.setProperty("/CAMPAIGN_ID", oAggregatedActions.campaigns[0]);
		oModel.setProperty("/RESP_VALUE_CODES", oAggregatedActions.respValueCode);
		// 		oModel.setProperty("/AUTHORS", aAuthors);
		oModel.setProperty("/UNASSIGN_IDS", jQuery.map(this._oSelectionMap, function(oIdea) {
				return oIdea.property.actions.unassignCoach.enabled ? oIdea.ID : null;
			})
			.filter(function(oValue) {
				return !!oValue;
			}));
		oModel.setProperty("/ASSIGNME_IDS", jQuery.map(this._oSelectionMap, function(oIdea) {
				return oIdea.property.actions.assignToMe.enabled ? oIdea.ID : null;
			})
			.filter(function(oValue) {
				return !!oValue;
			}));
		if (this.hasOwnProperty("_CampaignId")) {
			this.setViewProperty("/IS_CAMPAIGN_IDEA_LIST", true);
		} else {
			this.setViewProperty("/IS_CAMPAIGN_IDEA_LIST", false);
		}
		this.setViewProperty("/IS_DIALOG", true);
		this._openAssignmentActionSheet(oSource, "mass");
	};

	/**
	 * Event handler: Opens Assignment Action sheet with assignment options and prepare the internal private model
	 *
	 * @param {Event} oEvent the event
	 **/
	AssignmentActionMixin.onAssignGeneral = function(oEvent) {
		var oSource = oEvent.getSource();
		var that = this;

		this.saveCurrentFocusBeforeActionDialogOpen();

		// in case we are called within idea list, we have to re-create the actionsheet in order to compute visibility again
		if (!this.isActionContextSingleIdeaDisplay() && this._oAssignActionSheet) {
			//this._oAssignActionSheet.destroy();
			//delete this._oAssignActionSheet;
		}
		if (!this.isActionContextSingleIdeaDisplay()) {
			if (this.getModel("assignment")) {
				this.getModel("assignment").destroy();
			}
			// create new private Idea model copy if in list context
			this.setModel(new JSONModel(), "assignment");
			var iIdeaId = oSource.getBindingContext("data").getProperty("ID");
			var oSettings = {
				actions: ["assignCoach", "assignToMe", "unassignCoach", "addExpert", "assignTag", "reassignCampaign"]
			};
			var oProp = new PropertyModel("sap.ino.xs.object.idea.Idea", iIdeaId, oSettings, false, function(oPropertyEvent) {
				var oPropData = oPropertyEvent.getSource().getData();
				that.getModel("assignment").setProperty("/property", oPropData);
				that._openAssignmentActionSheet(oSource, "single");
			});
			this.getModel("assignment").setData(oSource.getBindingContext("data").getObject());

			// 			var aAuthors = [];
			//     		jQuery.each(this.getModel("assignment").getProperty("/Authors").__list, function(iIndex, oAuthor) {
			//     	        var sAuthor = Number(oAuthor.substr(oAuthor.indexOf("IDENTITY_ID=") + 12).replace(")", ""));
			// 	            if(aAuthors.indexOf(sAuthor) === -1){
			// 	                aAuthors.push(sAuthor);
			// 	            }
			//     		});
			//     		this.getModel("assignment").setProperty("/AUTHORS", aAuthors);
		} else {
			// just reference current object model
			this.setModel(this.getObjectModel(), "assignment");
			this._openAssignmentActionSheet(oSource, "single");
		}

	};

	/**
	 * executes an assignment action (call to backend)
	 *
	 * @param {string}      sActionName     the name of the action to execute
	 * @param {int|int[]}   vIdeaID         either a single idea ID or an array of idea IDs for mass actions
	 * @param {object}      oParameters     parameter map to hand on to action - in case of mass actions, "keys" parameter is automatically bound
	 * @param {object}      oMessages       message object (with success, error, confirm keys)
	 */
	AssignmentActionMixin._executeAssignAction = function(sActionName, vIdeaID, oParameters, oMessages, oAssignmentDialog) {
		var bIsMassAction = Array.isArray(vIdeaID);
		var oIdeaModel = this.isActionContextSingleIdeaDisplay() ? this.getObjectModel() : Idea;
		var oOptions = {
			parameters: oParameters,
			messages: oMessages,
			staticparameters: this.isActionContextSingleIdeaDisplay() || bIsMassAction ? undefined : vIdeaID //undefine: for model instance, vIdeaID: for model static method
		};
		var oDialog = oAssignmentDialog;
		if (bIsMassAction) {
			oOptions.parameters.keys = vIdeaID;
		}

		oDialog.setBusy(true);
		var that = this;
		var oActionPromise = BaseController.prototype.executeObjectAction.call(this, oIdeaModel, sActionName, oOptions);
		oActionPromise.always(function() {
			oDialog.setBusy(false);
		}).done(function() {
			// clean up different mass action states
			//oScrollbar._scrollTo(iLeft,iTop,0);
			that.resetActionState(bIsMassAction);
			that.restoreFocusAfterActionDialogClose();
			if (that.bindList) {
				that.bindList();
			}
		});
		return oActionPromise;
	};

	/**
	 * executes an "assignCoach" action on one or multiple ideas
	 *
	 * @param {int|int[]}   vIdeaID                 either a single idea ID or an array of idea IDs for mass actions
	 * @param {int}         iAssignedIdentityID     Coach's Identity ID to be assigned
	 * @param {string}      sCoachName              Coach's full name
	 * @param {int}         iCampaignId             The affected idea's campaign id
	 */
	AssignmentActionMixin._executeAssignCoachAction = function(vIdeaID, iAssignedIdentityID, sCoachName, iCampaignId) {
		var that = this;
		var oParameters = {
			IDENTITY_ID: iAssignedIdentityID,
			CAMPAIGN_ID: iCampaignId
		};
		var sActionName = Array.isArray(vIdeaID) ? "massAssignCoach" : "assignCoach";
		var oMessages = {
			success: function() {
				return that.getText("IDEA_OBJECT_MSG_COACH_ASSIGNED_SUCCESS", [sCoachName]);
			},
			error: function() {
				return that.getText("IDEA_OBJECT_MSG_COACH_ASSIGNED_ERROR", [sCoachName]);
			}
		};
		return this._executeAssignAction(sActionName, vIdeaID, oParameters, oMessages, this._getAssignCoachDialog());
	};

	AssignmentActionMixin._executeAssignExpertAction = function(vIdeaID, aAssignedIdentityID, sExpertName) {
		var that = this;
		var oParameters = {};
		var sActionName = Array.isArray(vIdeaID) ? "massAddExpert" : "addExpert";
		var oMessages = {
			success: function() {
				return that.getText("IDEA_OBJECT_MSG_EXPERT_ASSIGNED_SUCCESS", [sExpertName]);
			},
			error: function() {
				return that.getText("IDEA_OBJECT_MSG_EXPERT_ASSIGNED_ERROR", [sExpertName]);
			}
		};
		oParameters.Experts = aAssignedIdentityID;

		return this._executeAssignAction(sActionName, vIdeaID, oParameters, oMessages, this._getAssignExpertDialog());
	};

	/**
	 * executes an "unassignCoach" action on one or multiple ideas
	 *
	 * @param {int|int[]}   vIdeaID                 either a single idea ID or an array of idea IDs for mass actions
	 * @param {string}      sCoachName              Coach's full name
	 * @param {int}         iCampaignId             The affected idea's campaign id
	 */
	AssignmentActionMixin._executeUnassignCoachAction = function(vIdeaID, sCoachName, iCampaignId) {
		var that = this;
		var oParameters = {
			CAMPAIGN_ID: iCampaignId
		};
		var bIsMassAction = Array.isArray(vIdeaID);
		var sActionName = bIsMassAction ? "massUnassignCoach" : "unassignCoach";
		var oMessages = {
			success: function() {
				return that.getText(bIsMassAction ? "IDEA_OBJECT_MSG_COACH_UNASSIGNED_MASS_SUCCESS" : "IDEA_OBJECT_MSG_COACH_UNASSIGNED_SUCCESS", [
					sCoachName]);
			},
			error: function() {
				return that.getText(bIsMassAction ? "IDEA_OBJECT_MSG_COACH_UNASSIGNED_MASS_ERROR" : "IDEA_OBJECT_MSG_COACH_UNASSIGNED_ERROR", [
					sCoachName]);
			}
		};
		return this._executeAssignAction(sActionName, vIdeaID, oParameters, oMessages, this._getAssignCoachDialog());
	};

	AssignmentActionMixin._getAssignCoachDialog = function() {
		var oDialog = this._oAssignCoachDialog;
		if (!oDialog) {
			var _enhanceDialog = function(oSelectDialog) {
				oSelectDialog._oList.setMode("SingleSelectLeft");
				// remove default handler for single row selection change
				oSelectDialog._oList.mEventRegistry.selectionChange = [];
				//oSelectDialog._oDialog.setBeginButton(oSelectDialog._getOkButton());
				oSelectDialog._oDialog.setEndButton(oSelectDialog._getCancelButton());
			};
			oDialog = this.createFragment("sap.ino.vc.idea.fragments.AssignCoach", this.getView().getId());
			this.getView().addDependent(oDialog);
			this._oAssignCoachDialog = oDialog;
			_enhanceDialog(this._oAssignCoachDialog);
		}
		return oDialog;
	};

	AssignmentActionMixin._getAssignExpertDialog = function() {
		var that = this;
		var oDialog = this._oAssignExpertDialog;
		if (!oDialog) {
			oDialog = this.createFragment("sap.ino.vc.idea.fragments.AssignExpert", this.getView().getId());
			this.getView().addDependent(oDialog);
			this._oAssignExpertDialog = oDialog;
			// 			oDialog._dialog.removeAllButtons();
			// 			oDialog._dialog.setBeginButton(new sap.m.Button({
			// 				text: "{i18n>BTN_ADD_FROM_CLIPBOARD}",
			// 				press: [that.onAddFromClipboard, that],
			// 				visible: "{=!${device>/system/phone}}",
			// 				enabled: {
			// 					parts: [{
			// 						path: 'clipboard>/changed',
			// 						type: null
			// 					}],
			// 					formatter: function() {
			// 						var oClipboardModel = that.getModel("clipboard");
			// 						return oClipboardModel ? oClipboardModel.getProperty("/enabled") && !oClipboardModel.isClipboardEmpty(User) : false;
			// 					}
			// 				}
			// 			}));
			// 			oDialog._dialog.setEndButton(oDialog._getCancelButton());
			oDialog._dialog.addButton(new sap.m.Button({
				text: "{i18n>BTN_ADD_FROM_CLIPBOARD}",
				press: [that.onAddFromClipboard, that],
				visible: "{=!${device>/system/phone}}",
				enabled: {
					parts: [{
						path: 'clipboard>/changed',
						type: null
					}],
					formatter: function() {
						var oClipboardModel = that.getModel("clipboard");
						return oClipboardModel ? oClipboardModel.getProperty("/enabled") && !oClipboardModel.isClipboardEmpty(User) : false;
					}
				}
			}));
			oDialog._dialog.addButton(oDialog._getOkButton());
			oDialog._dialog.addButton(oDialog._getCancelButton());
		}
		return oDialog;
	};

	AssignmentActionMixin._getAssignTagDialog = function() {
		var oDialog = this._oAssignTagDialog;
		if (!oDialog) {
			oDialog = this.createFragment("sap.ino.vc.idea.fragments.AssignTag", this.getView().getId());
			this.getView().addDependent(oDialog);
			this._oAssignTagDialog = oDialog;
		}
		return oDialog;
	};

	AssignmentActionMixin._getReassignCampaignDialog = function() {
		var oDialog = this._oReassignCampaignDialog;
		if (!oDialog) {
			oDialog = this.createFragment("sap.ino.vc.idea.fragments.ReassignCampaign", this.getView().getId());
			this.getView().addDependent(oDialog);
			this._oReassignCampaignDialog = oDialog;
		}
		return oDialog;
	};

	/**
	 * binds the coach list to the SelectDialog's results according to the search term
	 *
	 * @param {string}  sSearchTerm         the search/filter term
	 * @param {int}     iCampaignId         the campaign's ID on which coaches to execute the search
	 * @param {string}  (sActionContext)    the context of the binding - if given, custom data "context" is set with this value.
	 *                                      This is for differentiating, whether the coach assignment was triggered for one or
	 *                                      multiple ideas.
	 */
	AssignmentActionMixin._bindAssignCoachList = function(sSearchTerm, iCampaignId, sActionContext) {
		var oDialog = this._getAssignCoachDialog();
		// we add custom data to preserve context of caller
		if (sActionContext) {
			oDialog.data("context", sActionContext);
		}
		oDialog.bindAggregation("items", {
			path: "data>/SearchCoach(searchToken='" + jQuery.sap.encodeURL(sSearchTerm || '*') + "')/Results",
			filters: [new Filter({
				path: "CAMPAIGN_ID",
				operator: FilterOperator.EQ,
				value1: iCampaignId
			})],
			sorter: new Sorter("NAME"),
			template: oDialog.getBindingInfo("items").template
		});
		return oDialog;
	};

	AssignmentActionMixin._bindAssignRespCoachList = function(sSearchTerm, sRespValueCode, iCampaignId, sActionContext) {
		var oDialog = this._getAssignCoachDialog();
		// we add custom data to preserve context of caller
		if (sActionContext) {
			oDialog.data("context", sActionContext);
		}
		oDialog.bindAggregation("items", {
			path: "data>/SearchCoach(searchToken='" + jQuery.sap.encodeURL(sSearchTerm || '*') + "')/Results",
			filters: new Filter({
				filters: [new Filter({
					path: "RESP_VALUE_CODE",
					operator: FilterOperator.EQ,
					value1: sRespValueCode
				}), new Filter({
					path: "CAMPAIGN_ID",
					operator: FilterOperator.EQ,
					value1: iCampaignId
				})],
				and: false
			}),
			sorter: new Sorter("NAME"),
			factory: function() {

			},
			template: oDialog.getBindingInfo("items").template
		});
		return oDialog;
	};
	AssignmentActionMixin.formatIdentityCardShow = function(iIdentityId) {
		var aBindedItems = this.byId("assignCoachDialog").getItems();
		for (var i = 0; i < aBindedItems.length - 1; i++) {
			var oldId = aBindedItems[i].getContent()[0].getProperty("identityId");
			if (oldId === iIdentityId) {
				return false;
			}
		}
		return true;
	};
	AssignmentActionMixin._bindAssignExpertList = function(sSearchTerm, vIdeaID) {
		var oDialog = this._getAssignExpertDialog();
		vIdeaID = Array.isArray(vIdeaID) ? vIdeaID : [vIdeaID];
		// 		var oFilter = [];
		// 		var aAuthors = [];
		// 		aAuthors = this.getModel("assignment").getProperty("/AUTHORS");
		// 	    jQuery.each(aAuthors, function(i, oAuthor){
		// 	        oFilter.push(new Filter({
		// 		        path: "ID",
		// 		        operator: FilterOperator.NE,
		// 				value1: oAuthor
		// 		    }));
		// 	    });

		oDialog.bindAggregation("items", {
			path: "data>/SearchProposedExpertParams(searchToken='" + jQuery.sap.encodeURL(sSearchTerm || '*') + "',ideasToken='" + vIdeaID.join(
				",") + "')/Results",
			sorter: new Sorter("NAME"),
			// 			filters: [new Filter({
			// 				filters: oFilter,
			// 				and: true
			// 			})],
			template: oDialog.getBindingInfo("items").template
		});
		return oDialog;
	};

	/**
	 * search event - rebinds search results to SelectDialog's result list
	 *
	 * @param {Event}   oEvent
	 */
	AssignmentActionMixin.onAssignCoachSearch = function(oEvent) {
		var sSearchTerm = oEvent.getParameter("value") || "*";
		var iCampaignId = this.getModel("assignment").getProperty("/CAMPAIGN_ID");
		var aRespValueCodes = this.getModel("assignment").getProperty("/RESP_VALUE_CODES");
		if (this.getModel("assignment").getProperty("/RESP_VALUE_CODE") || (aRespValueCodes && aRespValueCodes.length ===
			1 && aRespValueCodes[0] !== null)) {
			var sRespValueCode = this.getModel("assignment").getProperty("/RESP_VALUE_CODE");
			if (!sRespValueCode) {
				sRespValueCode = aRespValueCodes[0];
			}
			this._bindAssignRespCoachList(sSearchTerm, sRespValueCode, iCampaignId);
		} else {
			this._bindAssignCoachList(sSearchTerm, iCampaignId);
		}
	};

	AssignmentActionMixin.onAssignExpertSearch = function(oEvent) {
		var sSearchTerm = oEvent.getParameter("value") || "*";
		var oDialog = this._getAssignExpertDialog();
		var vIdeaID;
		if (oDialog.data("context") === "mass") {
			vIdeaID = this.getModel("assignment").getProperty("/IDS");
		} else {
			vIdeaID = this.getModel("assignment").getProperty("/ID");
		}
		this._bindAssignExpertList(sSearchTerm, vIdeaID);
	};

	/**
	 * selection event - triggered when a coach is selected for assignment
	 *
	 * Note: this needs to trigger both mass and single idea actions due to re-use of the
	 * coach selection dialog.
	 *
	 * @param {Event}   oEvent
	 */
	AssignmentActionMixin.onAssignCoachDialogOK = function(oEvent) {
		var oSelected = oEvent.getParameter("selectedItem");
		var oSource = oEvent.getSource();
		if (oSelected) {
			var oBindingContext = oSelected.getBindingContext("data");
			if (oBindingContext) {
				var iIdentityID = oBindingContext.getProperty("ID");
				var sCoachName = oBindingContext.getProperty("NAME");
				var iCampaignId = this.getModel("assignment").getProperty("/CAMPAIGN_ID");
				var vIdeaID;
				// we need to differentiate whether we are in mass or single idea context
				if (oSource.data("context") === "mass") {
					vIdeaID = this.getModel("assignment").getProperty("/IDS");
				} else {
					vIdeaID = this.getModel("assignment").getProperty("/ID");
				}
				this._executeAssignCoachAction(vIdeaID, iIdentityID, sCoachName, iCampaignId);
			}
		}
	};

	AssignmentActionMixin.onAssignExpertDialogOK = function(oEvent) {
		var aSelected = oEvent.getParameter("selectedItems");
		var oSource = oEvent.getSource();
		var aIdentityID = [];
		var aExpertName = [];
		if (aSelected.length) {
			jQuery.each(aSelected, function(i, item) {
				var oBindingContext = item.getBindingContext("data");
				if (oBindingContext) {
					var iIdentityID = oBindingContext.getProperty("ID");
					var sExpertName = oBindingContext.getProperty("NAME");
					aIdentityID.push({
						IDENTITY_ID: iIdentityID
					});
					aExpertName.push(sExpertName);
				}
			});
			var vIdeaID;
			// we need to differentiate whether we are in mass or single idea context
			if (oSource.data("context") === "mass") {
				vIdeaID = this.getModel("assignment").getProperty("/IDS");
			} else {
				vIdeaID = this.getModel("assignment").getProperty("/ID");
			}
			this._executeAssignExpertAction(vIdeaID, aIdentityID, aExpertName.join(","));
		}
	};

	/**
	 * event for coach assignment
	 *
	 * @param {Event}   oEvent
	 */
	AssignmentActionMixin.onAssignCoach = function(oEvent) {
		var sContext = oEvent.getSource().getParent().data("context");
		var iCampaignId = this.getModel("assignment").getProperty("/CAMPAIGN_ID");
		var aRespValueCodes = this.getModel("assignment").getProperty("/RESP_VALUE_CODES");
		if (this.getModel("assignment").getProperty("/RESP_VALUE_CODE") || (aRespValueCodes && aRespValueCodes.length ===
			1 && aRespValueCodes[0] !== null)) {
			var sRespValueCode = this.getModel("assignment").getProperty("/RESP_VALUE_CODE");
			if (!sRespValueCode) {
				sRespValueCode = aRespValueCodes[0];
			}
			this._bindAssignRespCoachList("*", sRespValueCode, iCampaignId, sContext).open();
		} else {
			this._bindAssignCoachList("*", iCampaignId, sContext).open();
		}
	};

	AssignmentActionMixin.onAssignExperts = function(oEvent) {
		var sContext = oEvent.getSource().getParent().data("context");
		var oDialog = this._getAssignExpertDialog();
		var vIdeaID;
		// we add custom data to preserve context of caller
		if (sContext) {
			oDialog.data("context", sContext);
		}
		if (sContext === "mass") {
			vIdeaID = this.getModel("assignment").getProperty("/IDS");
		} else {
			vIdeaID = this.getModel("assignment").getProperty("/ID");
		}
		this._bindAssignExpertList("*", vIdeaID).open();
	};

	AssignmentActionMixin.onassignTag = function(oEvent) {
		var sContext = oEvent.getSource().getParent().data("context");
		var oDialog = this._getAssignTagDialog();
		// we add custom data to preserve context of caller
		if (sContext) {
			oDialog.data("context", sContext);
		}
		this._INPUT_TAGS_SETTING = {
			suggestion: {
				key: "ID",
				text: "NAME",
				path: "data>/SearchTagsParams(searchToken='$suggestValue')/Results",
				filter: [],
				sorter: []
			},
			token: {
				key: "ID",
				text: "NAME"
			}
		};
		if (this.byId("Tags")) {
			this.addTagMultiInputHandling(this.byId("Tags"), this._INPUT_TAGS_SETTING);
		}
		oDialog.open();
	};

	AssignmentActionMixin.addTagMultiInputHandling = function(oControl, mSettings) {
		if (!oControl) {
			return;
		}

		var fnSuggestHandler = this._createSuggestHandler(mSettings.suggestion);
		oControl.attachSuggest(fnSuggestHandler, this);

		oControl.attachTokenChange(function(oEvent) {
			if (!this._aIgnoreTokenChanges || this._aIgnoreTokenChanges.filter(function(o) {
				return o.id === oEvent.oSource.id;
			}).length === 0) {
				if (oEvent.getParameter("type") === "tokensChanged" && (oEvent.getParameter("addedTokens").length > 0 || oEvent.getParameter(
					"removedTokens").length > 0) && mSettings.tokenChangeCallback) {
					mSettings.tokenChangeCallback.apply(this, [oEvent]);
				}
			}
		}, this);

		if (mSettings.identity) {
			this.setMultiInputContent(oControl, mSettings.identity);
		}
	};
	AssignmentActionMixin._findFilters = function(aKeys, fnGetKey) {
		this._INPUT_TAGS_SETTING.suggestion.filters = undefined;
		if (!aKeys || aKeys.length <= 0) {
			return;
		}

		var aFilters = [];
		jQuery.each(aKeys, function(index, oKey) {
			if (fnGetKey(oKey)) {
				aFilters.push(new sap.ui.model.Filter({
					path: "ID",
					operator: "NE",
					value1: fnGetKey(oKey)
				}));
			}
		});
		if (aFilters.length > 0) {
			this._INPUT_TAGS_SETTING.suggestion.filters = new sap.ui.model.Filter({
				filters: aFilters,
				and: true
			});
		}
	};
	AssignmentActionMixin.onTagValueChanged = function(oEvent) {
		this.resetClientMessages();
		var oMultiInput = oEvent.getSource();
		var sValue = oEvent.getParameter("value");
		if (!sValue) {
			return;
		}
		if (!oEvent.getSource().getAggregation("tokenizer")) {
			return;
		}
		var aTokens = oEvent.getSource().getAggregation("tokenizer").getAggregation("tokens");
		var aTag = sValue.split(",");
		aTag.forEach(function(sTag) {
			sTag = sTag.trim();
			if (sTag === "") {
				return;
			}

			var oToken = new Token({
				text: sTag
			});
			// This is an application internal flag to handle
			// model update correctly
			var bTokenExisted;
			aTokens.forEach(function(oToken) {
				if (oToken.getProperty("text") === sTag) {
					bTokenExisted = true;
					return;
				}
			});
			if (!bTokenExisted) {
				oToken.bApplicationCreated = true;
				oMultiInput.addToken(oToken);
			}
		});
		oMultiInput.setValue("");
	};
	AssignmentActionMixin.onTagChanged = function(oEvent) {
		this.resetClientMessages();
		var oMultiInput = oEvent.getSource();
		//New Added Logic 20170809			
		if (!oEvent.getSource().getAggregation("tokenizer")) {
			return;
		}
		var aTokens = oEvent.getSource().getAggregation("tokenizer").getAggregation("tokens");
		this._findFilters(aTokens, function(oToken) {
			return oToken.getProperty("key");
		});
		oMultiInput.setValue("");
	};

	/****Reassign Campagin********
	Open reassign Dialog and select the corresponding campaign for the mass/single idea ID
	************/
	AssignmentActionMixin.onReassignCampaign = function(oEvent) {
		var sContext = oEvent.getSource().getParent().data("context");
		var oDialog = this._getReassignCampaignDialog();
		if (sContext) {
			oDialog.data("context", sContext);
		}

		var oModel = this.getModel("assignment");
		oModel.setSizeLimit(500);

		var oCampaignCombox = this.byId("reassignCampaignList");
		var oRespList = this.byId("reassignCampaignRespList");
		this.setViewProperty("/DISPLAY_RESP_LIST", false);
		oCampaignCombox.setValue("");
		oRespList.setValue("");
		oDialog.open();
	};
	AssignmentActionMixin.onReassignCampaignDialogOK = function() {
		var that = this;
		var oCampaignCombox = this.byId("reassignCampaignList");
		var oRespList = this.byId("reassignCampaignRespList");
		var oModel = this.getModel("assignment");
		this.resetClientMessages();
		var sCampaignId = oCampaignCombox.getSelectedKey();
		if (this.checkReassignCampaignValidValue(oCampaignCombox, oRespList)) {
			var sOldFormCode = this.getOldCampaignFormCode(oModel);
			var sOldAdminFormCode = this.getOldCampaignAdminFormCode(oModel);
			if (sOldFormCode === oModel.getProperty("/REASSIGN_CAMPAIGN_FORM_CODE") && sOldAdminFormCode === oModel.getProperty(
				"/REASSIGN_CAMPAIGN_ADMIN_FORM_CODE")) { //The same Form Used marked as true
				this.popConfirmMessageBox([], oModel, true);
			} else if (!oModel.getProperty("/REASSIGN_CAMPAIGN_FORM_CODE") && !oModel.getProperty("/REASSIGN_CAMPAIGN_ADMIN_FORM_CODE")) { //Different form but null in the target
				this.popConfirmMessageBox([], oModel, false);
			} else {
				this.getModel("data").read("/CampaignSmall(" + sCampaignId + ")/FormFields", {
					success: function(res) {
						//Get Campaign Admin Form Field
						var aCampaignFormFields = res.results;
						that.getModel("data").read("/CampaignSmall(" + sCampaignId + ")/AdminFormFields", {
							success: function(oData) {
								oData.results.forEach(function(object) {
									object.FORM_TYPE_CODE = "ADMIN_FORM";
								});
								aCampaignFormFields = aCampaignFormFields.concat(oData.results);
								that.popConfirmMessageBox(aCampaignFormFields, oModel, false);
							}
						});

					}
				});
			}
		}

	};
	AssignmentActionMixin.onReassignCampaignDialogSearch = function(oEvent) {
		var sValue = jQuery.sap.encodeURL(oEvent.getParameter("value"));
		var sCampaignId = this.getModel("assignment").getProperty("/CAMPAIGN_ID");
		var oModel = this.getDefaultODataModel ? this.getDefaultODataModel() : this.getModel("data");
		var oViewModel = this.getModel("assignment");
		oModel.read("/CampaignSuggestionParams(searchToken='" + sValue + "',filterName='allCampaignsExceptDraft')/Results", {
			urlParameters: {
				"$orderby": "SHORT_NAME",
				"$filter": "ID ne " + sCampaignId
			},
			success: function(oData) {
				oViewModel.setProperty("/campaignSuggestion", oData.results);
			}
		});
	};

	AssignmentActionMixin.onReassignCampaignDialogItemsSelect = function(oEvent) {
		var that = this;
		var sSelectedKey = oEvent.getParameter("selectedItem").data("ID") + "";
		var oCampaignFilterList = this.byId("reassignCampaignList") || this.getFilterElementById("reassignCampaignList");
		var oCampaignFilterItems = oCampaignFilterList.getSuggestionItems();
		for (var i = 0; i < oCampaignFilterItems.length; i++) {
			if (oCampaignFilterItems[i].getProperty("key") === sSelectedKey) {
				oCampaignFilterList.setSelectionItem(oCampaignFilterItems[i]);
				that.onReassignCampaignChange();
				break;
			}
		}
	};

	AssignmentActionMixin.getOldCampaignAdminFormCode = function(oModel) {
		var oData = this.getModel("data").oData;
		var oDialog = this._getReassignCampaignDialog();
		var sContext = oDialog.data("context");
		var oRegex = /^IdeaMediumBackofficeSearch/igm;
		var sFormCode = null;
		if (sContext === "mass") {
			if (oData) {
				for (var oIdeaMedium in oData) {
					if (oData.hasOwnProperty(oIdeaMedium) && oRegex.exec(oIdeaMedium) && (oData[oIdeaMedium].CAMPAIGN_ID === oModel.getProperty(
						"/CAMPAIGN_ID"))) {
						sFormCode = oData[oIdeaMedium].CAMPAIGN_ADMIN_FORM_CODE;
						break;
					}
				}
				return sFormCode;
			}
		} else {
			return oModel.getProperty("/CAMPAIGN_ADMIN_FORM_CODE");
		}
	};
	AssignmentActionMixin.getOldCampaignFormCode = function(oModel) {
		var oData = this.getModel("data").oData;
		var oDialog = this._getReassignCampaignDialog();
		var sContext = oDialog.data("context");
		var oRegex = /^IdeaMediumBackofficeSearch/igm;
		var sFormCode = null;
		if (sContext === "mass") {
			if (oData) {
				for (var oIdeaMedium in oData) {
					if (oData.hasOwnProperty(oIdeaMedium) && oRegex.exec(oIdeaMedium) && (oData[oIdeaMedium].CAMPAIGN_ID === oModel.getProperty(
						"/CAMPAIGN_ID"))) {
						sFormCode = oData[oIdeaMedium].CAMPAIGN_FORM_CODE;
						break;
					}
				}
				return sFormCode;
			}
		} else {
			return oModel.getProperty("/CAMPAIGN_FORM_CODE");
		}
	};
	AssignmentActionMixin.popConfirmMessageBox = function(aCampaignFormFields, oModel, bSameForm) {
		var that = this;
		var oDialog = this._getReassignCampaignDialog();
		var sContext = oDialog.data("context");
		var vIdeaID;
		if (sContext === "mass") {
			vIdeaID = this.getModel("assignment").getProperty("/IDS");
		} else {
			vIdeaID = this.getModel("assignment").getProperty("/ID");
		}

		var fnExectueDialogAction = function(sDialogAction, aFormFields) {
			switch (sDialogAction) {
				case MessageBox.Action.OK:
					that._executeReassignCampaignAction(vIdeaID, aFormFields, oModel);
					break;
				case MessageBox.Action.CANCEL:
					break;
			}

			that.resetActionState(sContext === "mass");
			that.restoreFocusAfterActionDialogClose();
			that._oReassignCampaignDialog.close();
			if (that.getView().sViewName === "sap.ino.vc.idea.ListPage") {
				that.bindList();
			}
		};
		if (!bSameForm) {
			var aFieldsValue = [];
			if (aCampaignFormFields.length === 0) {
				MessageBox.confirm(this.getText("IDEA_LIST_REASSIGN_CAMPAIGN_MSG_CHG_NO_FORM_FIELD"), {
					actions: [MessageBox.Action.OK, MessageBox.Action.CANCEL],
					onClose: function(sDialogAction) {
						fnExectueDialogAction(sDialogAction, aFieldsValue);
					}
				});
			} else { //Mark the mandatory formfields
				var bMandatory;
				var sFormType;
				for (var i = 0; i < aCampaignFormFields.length; i++) {
					if (aCampaignFormFields[i].MANDATORY) {
						bMandatory = true;
						sFormType = aCampaignFormFields[i].FORM_TYPE_CODE;
						break;
					}
					if (aCampaignFormFields[i].FORM_TYPE_CODE === "ADMIN_FORM") {
						aFieldsValue.push({
							FIELD_CODE: aCampaignFormFields[i].CODE,
							FORM_TYPE_CODE: "ADMIN_FORM"
						});
					} else {
						aFieldsValue.push({
							FIELD_CODE: aCampaignFormFields[i].CODE
						});
					}

				}
				if (bMandatory) {
				    var sShowText = sFormType === "ADMIN_FORM" ? this.getText("IDEA_LIST_REASSIGN_CAMPAIGN_MSG_NOCHG_ADMIN_FORM_FIELD") : this.getText("IDEA_LIST_REASSIGN_CAMPAIGN_MSG_NOCHG_FORM_FIELD");
					MessageBox.error(sShowText, {
						actions: [MessageBox.Action.OK],
						onClose: function(sDialogAction) {
							if (sDialogAction === MessageBox.Action.OK) {
								that.resetActionState(sContext === "mass");
								that.restoreFocusAfterActionDialogClose();
								that._oReassignCampaignDialog.close();
							}
						}
					});
				} else {
					/*****No mandatory fields, then pop message to discard the old formfields or use the new one*/
					MessageBox.confirm(this.getText("IDEA_LIST_REASSIGN_CAMPAIGN_MSG_CHG_FORM_FIELD"), {
						actions: [MessageBox.Action.OK, MessageBox.Action.CANCEL],
						onClose: function(sDialogAction) {
							fnExectueDialogAction(sDialogAction, aFieldsValue);
						}
					});
				}

			}
		} else //Same form: update directly
		{
			that._executeReassignCampaignAction(vIdeaID, undefined, oModel);
			that.resetActionState(sContext === "mass");
			that.restoreFocusAfterActionDialogClose();
			that._oReassignCampaignDialog.close();
			if (that.getView().sViewName === "sap.ino.vc.idea.ListPage") {
				that.bindList();
			}
		}

	};
	AssignmentActionMixin.checkReassignCampaignValidValue = function(oCampaignList, oRespList) {
		var oModel = this.getModel("assignment");
		if (!oCampaignList.getSelectedItem()) {
			var oCampaignBoxMessage = new Message({
				code: "IDEA_LIST_REASSIGN_CAMPAIGN_MSG_NO_CAMPAIGN_ID",
				type: MessageType.Error
			});
			this.setClientMessage(oCampaignBoxMessage, oCampaignList);
			return false;
		} else {
			if (oModel.getProperty("/RESP_CODE")) {
				if (!oRespList.getSelectedItem()) {
					var oRespListMessage = new Message({
						code: "IDEA_LIST_REASSIGN_CAMPAIGN_MSG_NO_RESPLIST_VALUE",
						type: MessageType.Error
					});
					this.setClientMessage(oRespListMessage, oRespList);
					return false;
				} else {
					return true;
				}
			} else {
				return true;
			}

		}
	};

	AssignmentActionMixin.onReassignCampaignDialogCancel = function() {
		//var oDialog = this._getReassignCampaignDialog();
		this.restoreFocusAfterActionDialogClose();
		this._oReassignCampaignDialog.close();
	};
	AssignmentActionMixin.onReassignCampaignSuggestion = function(oEvent) {
		var oModel = this.getModel("assignment");
		var that = this;
		var sCampaignId = oModel.getProperty("/CAMPAIGN_ID");
		var oDataModel = this.getDefaultODataModel ? this.getDefaultODataModel() : this.getModel("data");
		var mEvent = jQuery.extend({}, oEvent, true);
		var sTerm = jQuery.sap.encodeURL(mEvent.getParameter("suggestValue"));
		this.resetClientMessages();
		oDataModel.read("/CampaignSuggestionParams(searchToken='" + sTerm + "',filterName='allCampaignsExceptDraft')/Results", {
			urlParameters: {
				"$orderby": "SHORT_NAME",
				"$filter": "ID ne " + sCampaignId
			},
			success: function(oData) {
				oModel.setProperty("/campaignSuggestion", oData.results);
				var oCampFilter = that.byId("reassignCampaignList") || that.getFilterElementById("reassignCampaignList");
				oCampFilter.setFilterSuggests(false);
			}
		});
	};
	AssignmentActionMixin.onHandleReassignCampaignHelp = function() {
		var that = this;
		var oViewModel = this.getModel("assignment");
		var sCampaignId = oViewModel.getProperty("/CAMPAIGN_ID");
		var oModel = this.getDefaultODataModel ? this.getDefaultODataModel() : this.getModel("data");
		oModel.read("/CampaignSuggestionParams(searchToken='',filterName='allCampaignsExceptDraft')/Results", {
			urlParameters: {
				"$orderby": "SHORT_NAME",
				"$filter": "ID ne " + sCampaignId
			},
			success: function(oData) {
				oViewModel.setProperty("/campaignSuggestion", oData.results);
				var oCampFilter = that.byId("reassignCampaignList") || that.getFilterElementById("reassignCampaignList");
				oCampFilter.setFilterSuggests(false);
				// create dialog
				var oCampaignlistDialog = that.createReassignCampaignListDialog();
				oCampaignlistDialog.open();
			}
		});
	};

	AssignmentActionMixin.createReassignCampaignListDialog = function() {
		if (!this._campaignDialog) {
			this._campaignDialog = this.createFragment("sap.ino.vc.idea.fragments.ReassignCampaignSuggestionSelectList", this.getView().getId());
			this.getView().addDependent(this._campaignDialog);
		}
		return this._campaignDialog;
	};
	AssignmentActionMixin.onReassignCampaignChange = function() {
		var that = this;
		var oModel = this.getModel("assignment");
		var oRespList = this.byId("reassignCampaignRespList");
		oRespList.setSelectedKey();
		var oCampaignRespCombox = this.byId("reassignCampaignList");
		var sCampaignId = oCampaignRespCombox.getSelectedKey();
		if (oCampaignRespCombox.getSelectedItem()) {
			this.resetClientMessages();
		}
		oModel.setProperty("/REASSIGN_CAMPAIGN_ID", parseInt(sCampaignId, 10));
		this.getModel("data").read("/CampaignSmall(" + sCampaignId + ")", {
			success: function(oData) {
				oModel.setProperty("/REASSIGN_CAMPAIGN_NAME", oData.NAME);
				oModel.setProperty("/REASSIGN_CAMPAIGN_FORM_CODE", oData.FORM_CODE);
				oModel.setProperty("/REASSIGN_CAMPAIGN_ADMIN_FORM_CODE", oData.ADMIN_FORM_CODE);
				if (oData.RESP_CODE) {
					that.setViewProperty("/DISPLAY_RESP_LIST", true);
					oModel.setProperty("/RESP_NAME", oData.RESP_NAME);
					oModel.setProperty("/RESP_CODE", oData.RESP_CODE);
					//that.bindingRespListValue(oData.RESP_CODE);
				} else {
					oModel.setProperty("/RESP_NAME", "");
					oModel.setProperty("/RESP_CODE", "");
					that.setViewProperty("/DISPLAY_RESP_LIST", false);
				}
			},
			error: function(oMessage) {
				//	MessageToast.show(oMessage.message);
			}
		});

	};
	AssignmentActionMixin.onRespValueChange = function(oEvent) {
		if (oEvent.getSource().getSelectedItem()) {
			this.resetClientMessages();
		}
	};
	AssignmentActionMixin.bindingRespListValue = function(sRespCode) {
		// 		var oItemTemplate, sBindingPath;
		// 		oItemTemplate = new ListItem({
		// 			key: "{data>CODE}",
		// 			text: "{data>NAME}"
		// 		});
		// 		sBindingPath = "data>/ResponsibilityValueSearchParams(searchToken='',respCode='" + sRespCode + "')/Results";

		// 		var oCampaignRespCombox = this.byId("reassignCampaignRespList");
		// 	   //this.getModel("assignment").setProperty("/Resp_Value",)
		// 		oCampaignRespCombox.bindSuggestionRows({
		// 			path: sBindingPath,
		// 			template: oItemTemplate,
		// 			sorter: new Sorter("NAME")
		// 		});
		var oCampaignRespCombox = this.byId("reassignCampaignRespList");
		var oModel = this.getModel("assignment");
		var sTerm = "";
		var that = this;
		this.getModel("data").read("/ResponsibilityValueSearchParams(searchToken='" + sTerm + "',respCode='" + sRespCode +
			"')/Results", {
				urlParameters: {
					"$orderby": "NAME"
				},
				success: function(oData) {
					oModel.setProperty("/Resp_Value", oData.results);
					oCampaignRespCombox.setFilterSuggests(false);
				}
			});

	};

	AssignmentActionMixin._executeReassignCampaignAction = function(vIdeaID, aFormFields, oModel) {
		var that = this;
		var oRespList = this.byId("reassignCampaignRespList");
		var sCampaignName = oModel.getProperty("/REASSIGN_CAMPAIGN_NAME");
		var aAdminForm = [];
		var aCustomIdeaForm = [];
		if (aFormFields && aFormFields.length > 0) {
			aFormFields.forEach(function(object) {
				if (object.FORM_TYPE_CODE && object.FORM_TYPE_CODE === "ADMIN_FORM") {
					delete object.FORM_TYPE_CODE;
					aAdminForm.push(object);
				} else {
					aCustomIdeaForm.push(object);
				}
			});
		}
		var oParameters = {
			CAMPAIGN_ID: oModel.getProperty("/REASSIGN_CAMPAIGN_ID"),
			FieldsValue: aCustomIdeaForm,
			AdminFieldsValue: aAdminForm,
			RESP_VALUE_CODE: oRespList.getSelectedKey()
		};
		var sActionName = Array.isArray(vIdeaID) ? "massReassignCampaign" : "reassignCampaign";
		var oMessages = {
			success: function() {
				return that.getText("IDEA_OBJECT_MSG_CAMPAIGN_REASSIGNED_SUCCESS", [sCampaignName]);
			},
			error: function() {
				return that.getText("IDEA_OBJECT_MSG_CAMPAIGN_REASSIGNED_ERROR", [sCampaignName]);
			}
		};
		return this._executeAssignAction(sActionName, vIdeaID, oParameters, oMessages, this._getReassignCampaignDialog());

	};
	/**
	 * event when dialog's cancel is clicked
	 *
	 * @param {Event}   oEvent
	 */
	AssignmentActionMixin.onAssignCoachDialogCancel = function(oEvent) {
		//var oSource = oEvent.getSource();
		//this.resetActionState(oSource.data("context") === "mass");
		this.restoreFocusAfterActionDialogClose();
	};

	AssignmentActionMixin.onAssignExpertDialogCancel = function(oEvent) {
		//var oSource = oEvent.getSource();
		// 		var oDialog = this._getAssignExpertDialog();
		// 		oDialog._dialog.close();
		// 		oDialog.destroy();
		// 		this._oAssignExpertDialog = undefined;
		//this.resetActionState(oSource.data("context") === "mass");
		this.restoreFocusAfterActionDialogClose();
	};

	AssignmentActionMixin.onAssignTagDialogCancel = function(oEvent) {
		//var oSource = oEvent.getSource();
		var oMultiInput = this.byId("Tags");
		var oDialog = this._getAssignTagDialog();
		if (oMultiInput) {
			oMultiInput.removeAllTokens();
			oMultiInput.setValue("");
		}
		if (this.resetInputTypeValidations) {
			this.resetInputTypeValidations(oDialog);
		}
		oDialog.close();
		this.restoreFocusAfterActionDialogClose();
	};

	AssignmentActionMixin.onAssignTagDialogOK = function(oEvent) {
		var oMultiInput = this.byId("Tags");
		var oSource = this._getAssignTagDialog();
		var vIdeaID;
		var that = this;
		this.resetClientMessages();
		if (oMultiInput) {
			var aTokens = oMultiInput.getTokens();
			var aNewTags = [];

			if (aTokens.length === 0) {
				var oMessage = new Message({
					code: "IDEA_LIST_ASSIGN_TAG_MSG_NO_TAG",
					type: MessageType.Error
				});
				this.setClientMessage(oMessage, oMultiInput);
			}
			if (!this.hasAnyClientErrorMessages()) {
				aTokens.forEach(function(oToken) {
					var oTag = {};
					var vKey = oToken.getKey();
					try {
						vKey = parseInt(oToken.getKey(), 10);
					} catch (e) {
						// Never mind, then there is no int
					}
					oTag.TAG_ID = vKey;
					oTag.NAME = oToken.getText();
					aNewTags.push(oTag);
				});

				// we need to differentiate whether we are in mass or single idea context
				if (oSource.data("context") === "mass") {
					vIdeaID = that.getModel("assignment").getProperty("/IDS");
				} else {
					vIdeaID = that.getModel("assignment").getProperty("/ID");
				}
				that._executeAssignTagAction(vIdeaID, aNewTags);

				oSource.close();
				this.resetActionState(oSource.data("context") === "mass");
				this.restoreFocusAfterActionDialogClose();
				this.bindList();
			}
		}
	};

	AssignmentActionMixin._executeAssignTagAction = function(vIdeaID, aNewTags) {
		var that = this;
		var oParameters = {};
		var sActionName = Array.isArray(vIdeaID) ? "massAssignTag" : "assignTag";
		var oMultiInput = this.byId("Tags");
		var oMessages = {
			success: function() {
				oMultiInput.removeAllTokens();
				oMultiInput.setValue("");
				return that.getText("IDEA_OBJECT_MSG_TAG_ASSIGNED_SUCCESS");
			},
			error: function() {
				return that.getText("IDEA_OBJECT_MSG_TAG_ASSIGNED_ERROR");
			}
		};
		oParameters.Tags = aNewTags;
		return this._executeAssignAction(sActionName, vIdeaID, oParameters, oMessages, this._getAssignTagDialog());
	};

	/**
	 * event for "me as coach" assignment
	 *
	 * @param {Event}   oEvent
	 */
	AssignmentActionMixin.onAssignMeAsCoach = function(oEvent) {
		var sContext = oEvent.getSource().getParent().data("context");
		var oUserModel = this.getModel("user");
		var iIdentityID = oUserModel.getProperty("/data/USER_ID");
		var sMyName = oUserModel.getProperty("/data/NAME");
		var iCampaignId = this.getModel("assignment").getProperty("/CAMPAIGN_ID");
		var vIdeaID;
		if (sContext === "mass") {
			vIdeaID = this.getModel("assignment").getProperty("/ASSIGNME_IDS");
		} else {
			vIdeaID = this.getModel("assignment").getProperty("/ID");
		}
		this._executeAssignCoachAction(vIdeaID, iIdentityID, sMyName, iCampaignId);
	};

	/**
	 * event for coach unassignment
	 *
	 * @param {Event}   oEvent
	 */
	AssignmentActionMixin.onUnassignCoach = function(oEvent) {
		var sContext = oEvent.getSource().getParent().data("context");
		var sCoachName = this.getModel("assignment").getProperty("/COACH_NAME") || undefined;
		var iCampaignId = this.getModel("assignment").getProperty("/CAMPAIGN_ID");
		var vIdeaID;
		if (sContext === "mass") {
			vIdeaID = this.getModel("assignment").getProperty("/UNASSIGN_IDS");
		} else {
			vIdeaID = this.getModel("assignment").getProperty("/ID");
		}
		this._executeUnassignCoachAction(vIdeaID, sCoachName, iCampaignId);
	};

	/**
	 * mass action on assignment
	 *
	 */
	AssignmentActionMixin.onMassAssign = function(oEvent) {

		// if it's a select all mass action
		if (this.getViewProperty("/List/SELECT_ALL")) {
			var oBindingParams = this.getBindingParameter();
			var bIsManaged = this._check4ManagingList();
			var sFilterParams = this.getList().getBinding('items').sFilterParams;
			var aTags = this.getViewProperty("/List/TAGS");
		    var tagGroup = {};
            var tagGroupKey = [];
            aTags.forEach(function(item,index){
                        if(!tagGroup[item.ROOTGROUPID]){
                            tagGroup[item.ROOTGROUPID] = [];
                            tagGroup[item.ROOTGROUPID].push(item.ID);
                            tagGroupKey.push(item.ROOTGROUPID);
                        } else {
                            tagGroup[item.ROOTGROUPID].push(item.ID);
                        }   
                    });
			

			var oParameter = {
				searchToken: oBindingParams.SearchTerm || "",
				tagsToken:  tagGroup[tagGroupKey[0]] ? tagGroup[tagGroupKey[0]].join(",") : "",
    			tagsToken1: tagGroup[tagGroupKey[1]] ? tagGroup[tagGroupKey[1]].join(",") : "",
    			tagsToken2: tagGroup[tagGroupKey[2]] ? tagGroup[tagGroupKey[2]].join(",") : "",
    			tagsToken3: tagGroup[tagGroupKey[3]] ? tagGroup[tagGroupKey[3]].join(",") : "",
    			tagsToken4: tagGroup[tagGroupKey[4]] ? tagGroup[tagGroupKey[4]].join(",") : "",
				filterName: oBindingParams.VariantFilter || "",
				filterBackoffice: bIsManaged ? "1" : "0",
				filterString: sFilterParams || ""
			};
			
			if (this.setQueryObjectIdeaformFilters) {
				this.setQueryObjectIdeaformFilters(oParameter);
			}
			
			if (this.getCampaignFormQuery) {
				oParameter.ideaFormId = this.getCampaignFormQuery() || "";
			}
			
			if(this.getSearchType){
			    oParameter.searchType = this.getSearchType();
			}
			
			if (this.setQueryObjectCompanyViewFilters) {
				this.setQueryObjectCompanyViewFilters(oParameter);
			}
			// call back end service
			var that = this;
			var oObjEvt = jQuery.extend({}, oEvent);
			var oSource = oEvent.getSource();
			// disable button
			oSource.setEnabled(false);
			jQuery.ajax({
				url: Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/select_all_ideas.xsjs",
				data: oParameter,
				success: function(res) {
					// enable button
					oSource.setEnabled(true);
					if (res.Ideas.length === 0) {
						MessageBox.show(that.getText("NO_IDEAS_AND_RELOAD_PAGE"), {
							icon: MessageBox.Icon.INFORMATION,
							actions: [sap.m.MessageBox.Action.OK],
							onClose: function() {
								that.bindList();
							}
						});
						return;
					}
					// clear selection map
					that._oSelectionMap = {};
					jQuery.each(res.Ideas, function(iIdx, oData) {
						if (!that._oDeselectionMap[oData.ID]) {
							// create data structure as property model
							oData.property = that._createPropertyData(oData);
							that._oSelectionMap[oData.ID] = oData;
						}
					});
					// call general assign action
					that.onMassAssignGeneral(oObjEvt);
				},
				error: function(res) {
					MessageToast.show(that.getText(res.responseJSON.messageKey));
				}
			});
		} else {
			// general assign action
			this.onMassAssignGeneral(oEvent);
		}

	};
	/*-------------------------------------------------
	//Hierarchy for Responsibility List when Reassign Campaign
	--------------------------------------------------*/
	AssignmentActionMixin.convertToHierarchy = function(aObjects, sKeyName, sParentKeyName) {
		var aNodeObjects = this.createStructure(aObjects, sParentKeyName);
		var oTreeNode = aNodeObjects.root;
		this.arrToHierarchy(oTreeNode, aNodeObjects, sKeyName);
		return oTreeNode;
	};
	AssignmentActionMixin.createStructure = function(aNodes, sParentKeyName) {
		var aObjects = {
			root: []
		};
		for (var i = 0; i < aNodes.length; i++) {
			var sProName = "Sub_" + aNodes[i][sParentKeyName];
			if (!aNodes[i].children || !jQuery.isArray(aNodes[i].children)) {
				aNodes[i].children = []; // create empty array for children later
			}
			if (isNaN(parseInt(aNodes[i][sParentKeyName], 10))) {
				aObjects.root.push(aNodes[i]);
			} else {
				if (!aObjects.hasOwnProperty(sProName)) {
					aObjects[sProName] = [];
				}
				aObjects[sProName].push(aNodes[i]);
			}
		}
		return aObjects;
	};
	AssignmentActionMixin.arrToHierarchy = function(oTreeNode, aNodeObjects, sKeyName) {
		if (!oTreeNode || oTreeNode.length === 0) {
			return;
		}
		for (var i = 0; i < oTreeNode.length; i++) {
			var sProName = "Sub_" + oTreeNode[i][sKeyName];
			if (aNodeObjects.hasOwnProperty(sProName)) {
				oTreeNode[i].children = aNodeObjects[sProName];
				this.arrToHierarchy(oTreeNode[i].children, aNodeObjects, sKeyName);
			}
		}
	};

	AssignmentActionMixin.onRespListSuggestion = function(oEvent) {
		var that = this;
		var oModel = this.getModel("assignment");
		var mEvent = jQuery.extend({}, oEvent, true);
		var sTerm = jQuery.sap.encodeURL(mEvent.getParameter("suggestValue"));
		this.resetClientMessages();
		this.getModel("data").read("/ResponsibilityValueSearchParams(searchToken='" + sTerm + "',respCode='" + oModel.getProperty("/RESP_CODE") +
			"')/Results", {
				urlParameters: {
					"$orderby": "NAME"
				},
				success: function(oData) {
					oModel.setProperty("/Resp_Value", oData.results);
					that.byId("reassignCampaignRespList").setFilterSuggests(false);
				}
			});
	};
	AssignmentActionMixin.createRespListHierarchyDialog = function() {
		if (!this._oRespListTreeDialog) {
			this._oRespListTreeDialog = this.createFragment("sap.ino.vc.idea.fragments.ReassignCampaignResponsibilityListValue", this.getView().getId());
			this.getView().addDependent(this._oRespListTreeDialog);
		}
		return this._oRespListTreeDialog;
	};
	AssignmentActionMixin.onHandleRespListValueHelp = function(oEvent) {
		var that = this;
		var oReslistDialog = that.createRespListHierarchyDialog();
		oReslistDialog.open();
		oReslistDialog.setBusy(true);
		var oTreeTable = that.byId('respValueTreeTable');
		var oRespValueInput = that.byId('reassignCampaignRespList');
		var oModel = this.getModel("assignment");
		this.getModel("data").read("/ResponsibilityValueSearchParams(searchToken='',respCode='" + oModel.getProperty("/RESP_CODE") +
			"')/Results", {
				urlParameters: {
					"$orderby": "NAME"
				},
				success: function(oData) {
					oReslistDialog.setBusy(false);
					oModel.setProperty("/Resp_Value", oData.results);
					var aHierarchy_RespValue = that.convertToHierarchy(oData.results, "ID", "PARENT_VALUE_ID");
					oModel.setProperty("/Resp_Value_Tree", aHierarchy_RespValue);
					that.setViewProperty("/ENABLE_OK_BTN", false);

					that.resetClientMessages();
					that.byId('reassignCampaignRespList')._closeSuggestionPopup();

					oTreeTable.attachBrowserEvent("dblclick", function() {
						//Double click for the Popup RL list selection   
						if (oTreeTable.isIndexSelected(that._treeTableIndex)) {
							oTreeTable.removeSelectionInterval(that._treeTableIndex, that._treeTableIndex);
						} else {
							oTreeTable.addSelectionInterval(that._treeTableIndex, that._treeTableIndex);
						}
						if (that._treeTableIndex > -1) {
							var sBindingPath = oTreeTable.getContextByIndex(that._treeTableIndex).getPath();
							oRespValueInput.setSelectedKey(oModel.getProperty(sBindingPath + "/CODE"));
							oRespValueInput.setValue(oModel.getProperty(sBindingPath + "/NAME"));
							if (that._oRespListTreeDialog) {
								that._oRespListTreeDialog.close();
								that._oRespListTreeDialog.destroy();
								that._oRespListTreeDialog = undefined;
							}
						}
						that._treeTableIndex = -1;
					});
				},
				error: function(oMessage) {
					oModel.setProperty("/Resp_Value_Tree", []);
					oReslistDialog.setBusy(false);
					MessageToast.show(oMessage.message);
				}
			});
	};
	AssignmentActionMixin.onRespValueDialogClose = function() {
		if (this._oRespListTreeDialog) {
			this._oRespListTreeDialog.close();
			this._oRespListTreeDialog.destroy();
			this._oRespListTreeDialog = undefined;
		}
	};
	AssignmentActionMixin.onSelectedItem = function(oEvent) {
		var that = this;
		var oModel = this.getModel("assignment");
		var oRespValueTree = that.byId("respValueTreeTable");
		var oRespValueInput = that.byId('reassignCampaignRespList');
		var iIndex = oRespValueTree.getSelectedIndex();
		if (iIndex > -1) {
			var sBindingPath = oRespValueTree.getContextByIndex(iIndex).getPath();
			oRespValueInput.setSelectedKey(oModel.getProperty(sBindingPath + "/CODE"));
			oRespValueInput.setValue(oModel.getProperty(sBindingPath + "/NAME"));
		}
		if (this._oRespListTreeDialog) {
			this._oRespListTreeDialog.close();
			this._oRespListTreeDialog.destroy();
			this._oRespListTreeDialog = undefined;
		}
	};
	AssignmentActionMixin.onRespRowSelectionChange = function(oEvent) {
		var that = this;
		var oRespValueTree = that.byId("respValueTreeTable");
		var iIndex = oRespValueTree.getSelectedIndex();
		if (iIndex > -1) {
			this.setViewProperty("/ENABLE_OK_BTN", true);
			this._treeTableIndex = iIndex;
		} else {
			this.setViewProperty("/ENABLE_OK_BTN", false);
		}

	};
	return AssignmentActionMixin;
});
}; // end of sap/ino/vc/idea/mixins/AssignmentActionMixin.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.internal.InternalNote.controller') ) {
jQuery.sap.declare('sap.ino.vc.internal.InternalNote.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.ViewType'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/internal/InternalNote.controller",[
    "sap/ino/vc/commons/BaseObjectModifyController",
    "sap/ui/core/mvc/ViewType",
    "sap/ino/vc/comment/CommentMixin" 
], function (Controller, ViewType, CommentMixin) {
    "use strict";

    return Controller.extend("sap.ino.vc.internal.InternalNote", jQuery.extend({}, CommentMixin, {

        onInit: function () {
            Controller.prototype.onInit.apply(this, arguments);
        },

        onBeforeRendering: function (oEvent) {
            this.commentMixinInit({ 
                commentInputId : "internalNoteInputField",
                commentListId : "internalNoteList",
                successMessageKey : "MSG_CREATE_SUCCESS_NOTE",
                editDialogViewName : "sap.ino.vc.internal.EditInternalNoteDialog"
            });
        }
    }));
});
}; // end of sap/ino/vc/internal/InternalNote.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.internal.InternalSection.controller') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
sap.ui.getCore().loadLibrary("sap.ino.wall");

jQuery.sap.declare('sap.ino.vc.internal.InternalSection.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ino.vc.wall.WallMixin'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.message.Message'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.CheckBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Input'); // unlisted dependency retained
jQuery.sap.require('sap.m.ComboBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.String'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.type.Date'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ListItem'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/internal/InternalSection.controller",[
    "sap/ino/vc/commons/BaseVariantListController",
    "sap/ui/Device",
    "sap/ino/commons/formatters/ObjectListFormatter",
    "sap/ino/vc/wall/WallMixin",
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/models/object/Attachment",
    "sap/ino/commons/application/Configuration",
     "sap/m/MessageToast",
    "sap/ino/vc/attachment/AttachmentMixin",
    "sap/ino/vc/comment/RichCommentCntrlMixin",
    "sap/ino/vc/comment/RichCommentMixin",
    "sap/ino/vc/comment/RichCommentAttachmentMixin",
    "sap/ui/core/MessageType",
    "sap/ui/core/message/Message",
    "sap/m/Label",
    "sap/m/CheckBox",
    "sap/m/Input",
    "sap/m/ComboBox",
    "sap/ino/commons/models/core/CodeModel",
    "sap/ui/model/type/String",
    "sap/ino/commons/models/types/IntegerType",
    "sap/ino/commons/models/types/FloatType",
    "sap/ui/model/odata/type/Date",
    "sap/ino/commons/models/types/IntegerNullableType",
    "sap/ino/commons/models/types/FloatNullableType",
    "sap/ino/commons/models/types/IntNullableBooleanType",
    "sap/ino/commons/models/types/IntBooleanType",
    "sap/ui/model/Sorter",
    "sap/ui/core/ListItem",
    "sap/ino/vc/commons/mixins/RichTextInitMixin"
], function(BaseController,
	Device,
	ObjectListFormatter,
	WallMixin,
	JSONModel,
	Attachment,
	Configuration,
	MessageToast, AttachmentMixin, RichCommentCntrlMixin, RichCommentMixin, RichCommentAttachmentMixin, MessageType, Message,
	Label,
	CheckBox,
	Input,
	ComboBox,
	CodeModel,
	StringType,
	IntegerType,
	FloatType,
	DateType,
	IntegerNullableType,
	FloatNullableType,
	IntNullableBooleanType,
	IntBooleanType,
	Sorter,
	ListItem,
	RichTextInitMixin) {
	"use strict";

	var mVariant = {
		MY: "my",
		SHARED: "shared"
	};

	var mFilter = {
		NONE: "myWalls",
		MY: "myWalls",
		SHARED: "sharedWalls"
	};
	var mDataType = {
		BOOLEAN: "BOOL_VALUE",
		TEXT: "TEXT_VALUE",
		INTEGER: "NUM_VALUE",
		NUMERIC: "NUM_VALUE",
		RICHTEXT: "RICH_TEXT_VALUE",
		DATE: "DATE_VALUE"
	};
	var attachmentUploadUrl = Attachment.getEndpointURL();

	return BaseController.extend("sap.ino.vc.internal.InternalSection", jQuery.extend({}, WallMixin, AttachmentMixin, RichCommentCntrlMixin,
		RichCommentMixin,
		RichCommentAttachmentMixin,
		RichTextInitMixin, {
			/* Controller reacts when these routes match */
			routes: "idea-display",
			sectionName: "sectionInternal",
			list: {
				"Variants": {},
				"Picker": {
					"Variants": {
						"Values": [{
							"TEXT": "WALL_LIST_MIT_MY",
							"ACTION": mVariant.MY,
							"FILTER": mFilter.MY
                        }, {
							"TEXT": "WALL_LIST_MIT_SHARED",
							"ACTION": mVariant.SHARED,
							"FILTER": mFilter.SHARED
                        }]
					}
				}
			},

			/* ViewModel storing the current configuration of the list */
			view: {
				"Picker": {
					"VARIANT": undefined // mVariant.MY will be initialized in onWallAdd
				},
				"EDITABLE": undefined
			},

			formatter: ObjectListFormatter,

			objectListFormatter: ObjectListFormatter,

			onInit: function() {
				var that = this;
				that._wallMixinInit({
					wallId: "interalwalllistinidea",
					wallBindPath: "object>/InternalWalls",
					wallAddAction: function(oObject, oWallData) {
						oObject.addInternalWall(oWallData);
					},
					wallRemoveAction: function(oObject, oWallControl) {
						oObject.removeInternalWall(oWallControl.getStorageId());
						oObject.update();
					},
					wallData: function(oObject) {
						return oObject.getProperty("/InternalWalls");
					}
				});
				that.getList().addStyleClass("sapInoWallListPreviewItems");

				BaseController.prototype.onInit.apply(this, arguments);

				if (!that.getModel("local")) {
					that.setModel(new JSONModel({
						ATTACHMENT_UPLOAD_URL: attachmentUploadUrl
					}), "local");
				}
				this.getView().setModel(null, "comment");
				var oSetting = jQuery.extend(true, {}, this.defaultRichCommentSetting);
				oSetting.commentInputId = "internalNoteInputField";
				oSetting.commentListId = "internalNoteList";
				oSetting.commentContainerId = "rteInternalContainer";
				oSetting.commentInputId = "rteInternalCtrlInput";
				oSetting.delReplyConfirmMsgKey = "MSG_INTERNALNOTE_REPLY_DEL_CONFIRM";
				oSetting.delAllDataComfirmMsgKey = "MSG_INTERNALNOTE_DELETE_ALL_DATA_CONFIRM";
				oSetting.delSuccessfulMsgKey = "MSG_INTERNALNOTE_DEL_SUCCESS";
				oSetting.delBtnKey = "INTERNALNOTE_OBJECT_BTN_DELETE_INTERNALNOTE";
				oSetting.delBtnAllDataKey = "INTERNALNOTE_OBJECT_BTN_DELETE_ALL_DATA";
				oSetting.type = "internal";
				this.richCommentMixinInitRouterEvent(oSetting);
			},
			onRouteMatched: function(oEvent) {
				BaseController.prototype.onRouteMatched.apply(this, arguments);

			},
			onBeforeRendering: function() {
				this.view.EDITABLE = true;
				var oViewModel = this.getModel("view");
				oViewModel.setData(this.view, true);
				this._bindList();
				var oBinding = this.getList().getBinding("items");
				if (oBinding) {
					this._updateWallPreviewControls();
				}
				//for internal note
				// this.commentMixinInit({
				// 	commentInputId: "internalNoteInputField",
				// 	commentListId: "internalNoteList",
				// 	successMessageKey: "MSG_CREATE_SUCCESS_NOTE",
				// 	editDialogViewName: "sap.ino.vc.internal.EditInternalNoteDialog"
				// });
			},

			onAfterRendering: function() {

				this.getAdminFormFields();
				this.richCommentMixinInit();
				this.richAttachmentMixinInit();
				this._attachmentMixinInit({
					attachmentId: "InternalAttachments",
					updateObject: function(oObject) {
						oObject.update();
					},
					uploadSuccess: function(oObject, oResponse) {
						oObject.addInternalAttachment({
							"CREATED_BY_NAME": Configuration.getCurrentUser().NAME,
							"ATTACHMENT_ID": oResponse.attachmentId,
							"FILE_NAME": oResponse.fileName,
							"MEDIA_TYPE": oResponse.mediaType,
							"CREATED_AT": new Date()
						});
						oObject.update().fail(function() {
							oObject.getMessageParser().parse(oResponse);
							MessageToast.show(this.getText("OBJECT_MSG_ATTACHMENT_FAILED"));
							return true;
						});
					}
				});

				this.setAccessibilityProperty();

			},
			getAdminFormFields: function() {
				var oIdea = this.getModel("object");
				var oDisplayAdminFields = this.byId("vBoxForDisplayAdminFields");
				//this.byId("vBoxForAdminContentVisible").setVisible(true);
				if (this.getModel("editObject") && typeof(this.getModel("editObject").getProperty("/ID")) === "number" && (this.getModel("object").getProperty(
					"/ID") !== this.getModel("editObject").getProperty("/ID"))) {
					this.visibleSettingForAdminField();
					this.getModel("editObject").setData(null);
				}

				var that = this;
				this.bIsNew = true;
				if (!oIdea.oData.AdminFieldsValue) { //If the fields is not existed.
					oIdea.getDataInitializedPromise().done(function(oData) {
						if (oIdea.oData.AdminFieldsValue.length > 0) {
							that.bIsNew = false;
						}
						if (that.bIsNew) {
							that.getModel("data").read("/CampaignSmall(" + oIdea.oData.CAMPAIGN_ID + ")/AdminFormFields", {
								urlParameters: {
									"$orderby": "SEQUENCE_NO"
								},
								success: function(oResult) {
									var aFields = oResult.results;
									if (aFields.length === 0) {
										that.byId("vBoxForAdminContentVisible").setVisible(false);
									} else {
										that.byId("vBoxForAdminContentVisible").setVisible(true);
										that.byId("nameOfAdminForm").setText(aFields[0].FORM_DEFAULT_TEXT);
										that.addDisplayFormFields(oDisplayAdminFields, oIdea); //1219
										that.setModel(new sap.ui.model.json.JSONModel(), "AdminForm");
										that.getModel("AdminForm").setProperty("/CampaignAdminForm", aFields);
									}
								},
								error: function(oMessage) {
									MessageToast.show(oMessage.message);
								}
							});
						}
					});
				} else { //Exsited
					if (oIdea.oData.AdminFieldsValue.length > 0) {
						that.bIsNew = false;
						//	that.byId("editButtonForAdminFields").setEnabled(true);
						that.getModel("data").read("/CampaignSmall(" + oIdea.oData.CAMPAIGN_ID + ")/AdminFormFields", {
							urlParameters: {
								"$orderby": "SEQUENCE_NO"
							},
							success: function(oResult) {
								var aFields = oResult.results;
								that.setModel(new sap.ui.model.json.JSONModel(), "AdminForm");
								that.getModel("AdminForm").setProperty("/CampaignAdminForm", aFields);
							},
							error: function(oMessage) {
								MessageToast.show(oMessage.message);
							}
						});
						that.byId("vBoxForAdminContentVisible").setVisible(true);
						that.addDisplayFormFields(oDisplayAdminFields, oIdea); //1219
					} else {
						that.getModel("data").read("/CampaignSmall(" + oIdea.oData.CAMPAIGN_ID + ")/AdminFormFields", {
							urlParameters: {
								"$orderby": "SEQUENCE_NO"
							},
							success: function(oResult) {
								var aFields = oResult.results;
								if (aFields.length === 0) {
									that.byId("vBoxForAdminContentVisible").setVisible(false);
								} else {
									that.byId("vBoxForAdminContentVisible").setVisible(true);
									that.byId("nameOfAdminForm").setText(aFields[0].FORM_DEFAULT_TEXT);
									that.addDisplayFormFields(oDisplayAdminFields, oIdea); //1219
									that.setModel(new sap.ui.model.json.JSONModel(), "AdminForm");
									that.getModel("AdminForm").setProperty("/CampaignAdminForm", aFields);
								}
							},
							error: function(oMessage) {
								MessageToast.show(oMessage.message);
							}
						});
					}
				}

			},
			getVariantsPopover: function() {
				if (!this._getWallPickerDialog().isActive()) {
					return BaseController.prototype.getVariantsPopover.apply(this, arguments);
				} else {
					if (!this._oPickerVariantPopover) {
						this._oPickerVariantPopover = sap.ui.xmlfragment("sap.ino.vc.wall.fragments.PickerListVariants", this);
						// if (Device.system.phone) {
						//     this._oPickerVariantPopover = sap.ui.xmlfragment("sap.ino.vc.wall.fragments.PickerListVariantsDialog", this);
						// } else {
						//     this._oPickerVariantPopover = sap.ui.xmlfragment("sap.ino.vc.wall.fragments.PickerListVariants", this);
						// }
						this.getView().addDependent(this._oPickerVariantPopover);
					}
					return this._oPickerVariantPopover;
				}
			},

			getVariant: function(sAction) {
				if (!this._getWallPickerDialog().isActive()) {
					return BaseController.prototype.getVariant.apply(this, arguments);
				} else {
					return this._getListDefinitionEntry(sAction, "ACTION", "/Picker/Variants/Values");
				}
			},

			onVariantPress: function(sVariantAction, oEvent) {
				this.setViewProperty("/Picker/VARIANT", sVariantAction);
				var oWallPickerView = this._getWallPickerView();
				if (oWallPickerView) {
					oWallPickerView.getController().setViewProperty("/List/VARIANT", sVariantAction);
					oWallPickerView.invalidate();
				}
			},

			_onVariantPress: function(oEvent) {
				var oItem = oEvent.getSource();
				var oContext = oItem.getBindingContext("list");
				var sAction;
				var oObject;

				if (oContext) {
					oObject = oContext.getObject();
					sAction = oObject ? oObject.ACTION : undefined;
				}

				this.onVariantPress(sAction, oEvent);

				var oPopover = this.getVariantsPopover();
				if (typeof oPopover.close === "function") {
					oPopover.close();
				}
			},

			onWallPicked: function(oWallData) {
				this._bindList();
				var oBinding = this.getList().getBinding("items");
				var oIdea = this.getModel("object");
				if (oBinding) {
					var that = this;
					oIdea.update().done(
						function() {
							that._updateWallPreviewControls();
						});
				}
			},
			onSaveWithPub: function(oEvent) {
				var oController = this;
				jQuery.each(oController.aCheckBoxes, function(iIndex, oControl) {
					oControl.fireSelect();
				});
				if (!this.hasAnyClientErrorMessages()) {
					var aUpdateObject = [];
					var oRequestBody = {};
					var oUpdateObject = {};
					var sFieldValue;
					var oIdea = this.getModel("object");
					var oDisplayAdminFields = this.byId("vBoxForDisplayAdminFields");
					var sSaveUrl = Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/idea.xsjs/" + this.getModel("object").getProperty("/ID");
					var oAdminFeildsValue = jQuery.extend(true, [], this.getModel("editObject").getProperty("/AdminFieldsValue"));
					oAdminFeildsValue.forEach(function(object) {
						sFieldValue = mDataType[object.DATATYPE_CODE];
						oUpdateObject[sFieldValue] = object[sFieldValue];
						oUpdateObject.ID = object.ID;
						oUpdateObject.FIELD_CODE = object.FIELD_CODE;
						oUpdateObject.RICH_TEXT_VALUE = object.RICH_TEXT_VALUE;
						if (object.IS_PUBLISH === 1) {
							oUpdateObject.STATE_OF_PUBLISH = 1;
							object.STATE_OF_PUBLISH = 1;
						} else {
							oUpdateObject.STATE_OF_PUBLISH = 0;
							object.STATE_OF_PUBLISH = 0;
						}
						aUpdateObject.push(oUpdateObject);
						oUpdateObject = {};
					});
					oRequestBody.AdminFieldsValue = aUpdateObject;
					oRequestBody.ID = this.getModel("object").getProperty("/ID");
					var that = this;
					var oUpdateAjax = jQuery.ajax({
						url: sSaveUrl,
						data: JSON.stringify(oRequestBody),
						type: "PUT",
						contentType: "application/json; charset=UTF-8",
						async: true,
						success: function(oResponse) {
							if (oResponse.GENERATED_IDS && oResponse.GENERATED_IDS !== null) {
								jQuery.each(oAdminFeildsValue, function(index, object) {
									object.ID = oResponse.GENERATED_IDS[object.ID] ? oResponse.GENERATED_IDS[object.ID] : object.ID;
								});
							}
							MessageToast.show(that.getText("OBJECT_MSG_ADMIN_FORM_SAVE_AS_PULISH_SUCCESS"));
							that.getModel("object").setProperty("/AdminFieldsValue", oAdminFeildsValue);
							that.getModel("editObject").setData(null);
							that.addDisplayFormFields(oDisplayAdminFields, oIdea);

							that.visibleSettingForAdminField(); //1219
							var oAdminFormFieldsCrl = that.byId("vBoxForAdminFields");
							oAdminFormFieldsCrl.removeAllItems();
							return true;
						},
						error: function(oResponse) {
							var sErrorMessage;
				// 			if (oResponse.responseJSON.MESSAGES.length > 0) {
				// 				for (var i = 0; i < oResponse.responseJSON.MESSAGES.length; i++) {
				// 					sErrorMessage = oResponse.responseJSON.MESSAGES[i].MESSAGE_TEXT + " ";
				// 				}
				// 			}
							sErrorMessage = oResponse.responseText;
							MessageToast.show(sErrorMessage ? sErrorMessage : that.getText("OBJECT_MSG_ADMIN_FORM_SAVE_FAILED"));
							return true;
						}
					});
				} else {
					MessageToast.show(this.getText("MSG_SAVE_USER_ERROR"));
				}
			},

			visibleSettingForAdminField: function() {
				var adminInputVisible = this.byId("vBoxForAdminFields").getVisible();
				this.byId("vBoxForAdminFields").setVisible(!adminInputVisible);
				this.byId("vBoxForDisplayAdminFields").setVisible(adminInputVisible);
				this.byId("overToolbarAdminButtons").setVisible(!adminInputVisible);
				this.byId("editButtonForAdminFields").setEnabled(adminInputVisible);
			},

			onEditButtonForAdminFields: function(oEvent) {
				var oAdminFormFieldsCrl = this.byId("vBoxForAdminFields");
				var oIdea = this.getModel("object");
				var oEditIdea;
				if (this.getModel("editObject") && (this.getModel("object").getProperty("/ID") === this.getModel("editObject").getProperty("/ID"))) {
					oEditIdea = this.getModel("editObject");
				} else {
					if (this.getModel("editObject")) {
						oEditIdea = this.getModel("editObject");
						oEditIdea = undefined;
					}
					var oNewAdminFormField = {};
					oNewAdminFormField = jQuery.extend(true, [], oIdea.getProperty("/AdminFieldsValue"));
					this.setModel(new sap.ui.model.json.JSONModel(), "editObject");
					oEditIdea = this.getModel("editObject");
					oEditIdea.setProperty("/AdminFieldsValue", oNewAdminFormField);
					oEditIdea.setProperty("/ID", this.getModel("object").getProperty("/ID"));
				}
				var aAdminFieldsValue = oIdea.oData.AdminFieldsValue;
				var aCampaignAdminForm = this.getModel("AdminForm").getProperty("/CampaignAdminForm");
				var oAdminFieldsValue;
				if (aAdminFieldsValue && aAdminFieldsValue.length > 0 && aCampaignAdminForm && aCampaignAdminForm.length > 0 &&
					aAdminFieldsValue[0].FORM_CODE === aCampaignAdminForm[0].FORM_CODE) {
					oAdminFieldsValue = oIdea.oData.AdminFieldsValue;
					var aNewFields = this.cacluateNewFieldsAdded(aCampaignAdminForm, aAdminFieldsValue);
					if (aNewFields && aNewFields.length > 0) {
						oAdminFieldsValue = oAdminFieldsValue.concat(aNewFields);
                        oEditIdea.setProperty("/AdminFieldsValue", oAdminFieldsValue);
        				oAdminFieldsValue.sort(function(o1, o2) {
        					if (o1.SEQUENCE_NO < o2.SEQUENCE_NO) {
        						return -1;
        					} else {
        						return 1;
        					}
        				});                        
					}
				} else {
					oAdminFieldsValue = oIdea.oData.AdminFieldsValue.length > 0 ? oIdea.oData.AdminFieldsValue : this.getModel("AdminForm").getProperty(
						"/CampaignAdminForm");
				}
				
				this.addFormFields.call(this, oAdminFieldsValue, oAdminFormFieldsCrl, oEditIdea);
				this.visibleSettingForAdminField();
			},

			cacluateNewFieldsAdded: function(campaignFields, fieldsValue) {
				var aNewFields = [];
				var fnFilterValue = function(fields, code) {
					return fields.filter(function(oValue) {
						return oValue.CODE === code;
					});
				};
				for (var i = 0; i < campaignFields.length; i++) {
					var aFilter = fnFilterValue(fieldsValue, campaignFields[i].CODE);
					if (aFilter.length === 0 && campaignFields[i].IS_ACTIVE) {
						aNewFields.push(campaignFields[i]);
					}
				}
				return aNewFields;

			},
			onAdminFormEditCancel: function() {
				var that = this;
				if (that.aCheckBoxes) {
					that.aCheckBoxes = [];
				}
				var oAdminFormFieldsCrl = this.byId("vBoxForAdminFields");
				oAdminFormFieldsCrl.removeAllItems();
				this.visibleSettingForAdminField();
				this.resetClientMessages();
				this.getModel("editObject").setData(null);
			},

			onSaveWithoutPub: function(oEvent) {
				var oController = this;
				jQuery.each(oController.aCheckBoxes, function(iIndex, oControl) {
					oControl.fireSelect();
				});
				if (!this.hasAnyClientErrorMessages()) {
					var aUpdateObject = [];
					var oRequestBody = {};
					var oUpdateObject = {};
					var sFieldValue;
					var oIdea = this.getModel("object");
					var oDisplayAdminFields = this.byId("vBoxForDisplayAdminFields");
					var sSaveUrl = Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/idea.xsjs/" + this.getModel("object").getProperty("/ID") +
						"/updateAdminForms";
					var oAdminFeildsValue = jQuery.extend(true, [], this.getModel("editObject").getProperty("/AdminFieldsValue"));
					oAdminFeildsValue.forEach(function(object) {
						sFieldValue = mDataType[object.DATATYPE_CODE];
						oUpdateObject[sFieldValue] = object[sFieldValue];
						oUpdateObject.ID = object.ID;
						oUpdateObject.FIELD_CODE = object.FIELD_CODE;
						oUpdateObject.RICH_TEXT_VALUE = object.RICH_TEXT_VALUE;
						oUpdateObject.STATE_OF_PUBLISH = 0;
						object.STATE_OF_PUBLISH = 0;
						aUpdateObject.push(oUpdateObject);
						oUpdateObject = {};
					});
					oRequestBody.AdminFieldsValue = aUpdateObject;
					oRequestBody.ID = this.getModel("object").getProperty("/ID");
					var that = this;
					var oUpdateAjax = jQuery.ajax({
						url: sSaveUrl,
						data: JSON.stringify(oRequestBody),
						type: "POST",
						contentType: "application/json; charset=UTF-8",
						async: true,
						success: function(oResponse) {
							if (oResponse.GENERATED_IDS && oResponse.GENERATED_IDS !== null) {
								jQuery.each(oAdminFeildsValue, function(index, object) {
									object.ID = oResponse.GENERATED_IDS[object.ID] ? oResponse.GENERATED_IDS[object.ID] : object.ID;
								});
							}
							MessageToast.show(that.getText("OBJECT_MSG_ADMIN_FORM_SAVE_SUCCESS"));
							that.getModel("object").setProperty("/AdminFieldsValue", oAdminFeildsValue);
							that.getModel("editObject").setData(null);
							that.addDisplayFormFields(oDisplayAdminFields, oIdea);
							that.visibleSettingForAdminField(); //1219
							var oAdminFormFieldsCrl = that.byId("vBoxForAdminFields");
							oAdminFormFieldsCrl.removeAllItems();
							return true;
						},
						error: function(oResponse) {
							MessageToast.show(that.getText("OBJECT_MSG_ADMIN_FORM_SAVE_FAILED"));
							return true;
						}
					});
				} else {
					MessageToast.show(this.getText("MSG_SAVE_USER_ERROR"));
				}
			},

			addDisplayFormFields: function(oFormFields, oIdea) {
				var that = this;
				if (oFormFields.getItems().length > 0) {
					//remove all the fields
					oFormFields.removeAllItems();
				}
				jQuery.each(oIdea.oData.AdminFieldsValue, function(i, oField) {
					var lblText = oField.DEFAULT_TEXT + ":";

					if (oField.IS_DISPLAY_ONLY) {
						var oRichTextHtml = new sap.ui.core.HTML({
							sanitizeContent: true,
							preferDOM: false,
							content: oField.DISPLAY_TEXT
						});
						oFormFields.addItem(oRichTextHtml);

						return true;
					}

					if (oField.IS_PUBLISH && oField.STATE_OF_PUBLISH === 1) {

						lblText = oField.DEFAULT_TEXT + that.getText("OBJECT_MSG_ADMIN_FORM_FIELD_CAN_PUBLISH") + ":";
					} else if (oField.IS_PUBLISH) {
						lblText = oField.DEFAULT_TEXT + that.getText("OBJECT_MSG_ADMIN_FORM_FIELD_CANNOT_PUBLISH") + ":";
					}
					if (oField.UOM_CODE) {
						lblText = oField.DEFAULT_TEXT + "(" + CodeModel.getText("sap.ino.xs.object.basis.Unit.Root", oField.UOM_CODE) + "):";
					}
					var oLabel = new Label({
						text: lblText,
						tooltip: oField.DEFAULT_LONG_TEXT
					});
					oLabel.addStyleClass("sapInoIdeaFormLabelStyle");
					var sDataType;
					if (oField.DATATYPE_CODE === "BOOLEAN") {
						sDataType = "BOOL_VALUE";
					} else if (oField.DATATYPE_CODE === "TEXT") {
						sDataType = "TEXT_VALUE";
					} else if (oField.DATATYPE_CODE === "RICHTEXT") {
						sDataType = "RICH_TEXT_VALUE";
					} else if (oField.DATATYPE_CODE === "DATE") {
						sDataType = "DATE_VALUE";
					} else {
						sDataType = "NUM_VALUE";
					}
					var oTxt = oField[sDataType];
					var valueList = oField.valueOptionList;
					if (!valueList) {
						if (oField.VALUE_OPTION_LIST_CODE) {
							var sCodeTable = "sap.ino.xs.object.basis.ValueOptionList.Root_" + oField.VALUE_OPTION_LIST_CODE;
							valueList = CodeModel.getCodes(sCodeTable);
						}
					}
					if (!!valueList && valueList.length > 0 && oTxt !== undefined && oTxt !== null && oTxt !== "") {
						jQuery.each(valueList, function(index, data) {
							if (data.CODE.toString() === oTxt.toString()) {
								oTxt = data.DEFAULT_TEXT;
								return;
							}
						});
					}
					var checkBoxText = oField.DEFAULT_TEXT;
					if (oField.IS_PUBLISH && oField.STATE_OF_PUBLISH === 1) {
						checkBoxText = oField.DEFAULT_TEXT + that.getText("OBJECT_MSG_ADMIN_FORM_FIELD_CAN_PUBLISH");
					} else if (oField.IS_PUBLISH) {
						checkBoxText = oField.DEFAULT_TEXT + that.getText("OBJECT_MSG_ADMIN_FORM_FIELD_CANNOT_PUBLISH");
					}

					if (oField.DATATYPE_CODE === "BOOLEAN" && (!valueList || valueList.length === 0)) {
						var bChecked = false;
						if (oField[sDataType]) {
							bChecked = true;
						}

						var oCheckBox = new CheckBox({
							text: checkBoxText,
							selected: bChecked,
							editable: false,
							tooltip: oField.DEFAULT_LONG_TEXT
						});
						var oCheckBoxLabel = oCheckBox._getLabel();
						oCheckBoxLabel.addStyleClass("sapInoIdeaFormLabelStyle");
						oCheckBox.addStyleClass("sapInoIdeaFormChxBoxHeight");
						oFormFields.addItem(oCheckBox);
					} else {
						var contentLbl;
						if (oField.DATATYPE_CODE === "NUMERIC" && !!oTxt && (!valueList || valueList.length === 0)) {
							var oNumberFormat = sap.ui.core.format.NumberFormat.getFloatInstance({
								groupingEnabled: true,
								groupingSeparator: ","
							});
							contentLbl = new sap.m.Text();
							contentLbl.setText(oNumberFormat.format(oTxt));
						} else if (oField.DATATYPE_CODE === "RICHTEXT" && !!oTxt && (!valueList || valueList.length === 0)) {
							contentLbl = new sap.ui.core.HTML({
								sanitizeContent: true,
								preferDOM: false
							});
							contentLbl.setContent(oTxt);
						} else if (oField.DATATYPE_CODE === "DATE" && !!oTxt && (!valueList || valueList.length === 0)) {
							// 			var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
							// 				relative: false
							// 			});
							contentLbl = new sap.m.Text();
							contentLbl.setText(that.formatter.toDate(oTxt));
						} else {
							contentLbl = new sap.m.Text();
							contentLbl.setText(oTxt);
						}
						oFormFields.addItem(oLabel);
						oFormFields.addItem(contentLbl);
					}
				});
			},

			addFormFields: function(aFields, oFormFields, oIdea, oDialogAction) {
				if (oFormFields.getItems().length > 0) {
					//remove all the fields
					oFormFields.removeAllItems();
				}
				var that = this;
				if (that.aCheckBoxes) {
					that.aCheckBoxes = [];
				}
				if (that.aComboBoxes) {
					that.aComboBoxes = [];
				}
				var fnGetDataType = function(oField) {
					var oType;
					switch (oField.DATATYPE_CODE) {
						case "BOOLEAN":
							oType = !oField.VALUE_OPTION_LIST_CODE ? new IntNullableBooleanType(null) : new sap.ino.commons.models.types.IntegerType();
							break;
						case "INTEGER":
							if (oField.MANDATORY) {
								oType = new IntegerType(null, {
									minimum: (oField.NUM_VALUE_MIN || undefined),
									maximum: (oField.NUM_VALUE_MAX || undefined)
								});
							} else {
								oType = new IntegerNullableType(null, {
									minimum: (oField.NUM_VALUE_MIN || undefined),
									maximum: (oField.NUM_VALUE_MAX || undefined)
								});
							}

							break;
						case "NUMERIC":
							if (oField.MANDATORY) {
								oType = new FloatType({
									groupingEnabled: false
								}, {
									minimum: (oField.NUM_VALUE_MIN || undefined),
									maximum: (oField.NUM_VALUE_MAX || undefined)
								});
							} else {
								oType = new FloatNullableType({
									groupingEnabled: false
								}, {
									minimum: (oField.NUM_VALUE_MIN || undefined),
									maximum: (oField.NUM_VALUE_MAX || undefined)
								});
							}
							break;
						case "TEXT":
							oType = new StringType(null, {
								minLength: (oField.MANDATORY ? 1 : undefined)
							});
							break;
						case "RICHTEXT":
							oType = new StringType(null, {
								minLength: (oField.MANDATORY ? 1 : undefined)
							});
							break;
						case "DATE":
							oType = new DateType(null, {
								minimum: (oField.MANDATORY ? 1 : 0)
							});
							break;
						default:
							break;
					}

					return oType;
				};
				//fix bug for next monday
				var onSelectionChangeLaborDatum = function(oEvent) {
					var sValue = oEvent.getParameters().value;
					var oSource = oEvent.getSource();
					var oItem = oSource.getItemByText(sValue);
					if (oItem === null) {
						var oMessage = new Message({
							code: "IDEA_FORM_MSG_DROPDOWN_LIST",
							type: MessageType.Error
						});
						this.oIdeaFormMessage = oMessage;
						that.setClientMessage(oMessage, this);
					} else {
						that.resetClientMessages();
					}
				};
				var onSelectionChangeWrongData = function(oEvent) {
					var oSource = oEvent.getSource();
					var sValue = oSource.getValue();
					var oItem = oSource.getItemByText(sValue);
					if (sValue && !oItem) {
						that.setClientMessage(
							new Message({
								code: "IDEA_FORM_MSG_DROPDOWN_LIST",
								type: MessageType.Error
							}),
							this);
					} else {
						that.resetClientMessages();
					}
				};
				var fnChkboxSelect = function(oEvent) {
					if (!this.getSelected()) {
						this.setValueState('Error');
						that.setClientMessage(
							new Message({
								code: "IDEA_OBJECT_MSG_CHECK_BOX_UNTICK",
								type: MessageType.Error
							}), this);

					} else {
						that.resetClientMessages();
						this.setValueState('None');
					}
				};
				var that = this;
				aFields = aFields.filter(function(oField){
				    if(!oField.ID){
				        return oField.IS_ACTIVE === 1;
				    }
				    return true;
				});
				
				jQuery.each(aFields, function(iId, oField) {
					if (!oField.IS_ACTIVE) {
						return true;
					}
					//bind Idea Model
					var oFieldValue;
				// 	if (oField.CODE !== oIdea.getProperty("/AdminFieldsValue/" + iId + "/CODE")) {
				// 		oFieldValue = jQuery.extend({
				// 			ID: that.getModel("object").getNextHandle(),
				// 			FIELD_CODE: oField.CODE
				// 		}, oField);
				// 	} else {
				// 		oFieldValue = oIdea.getProperty("/AdminFieldsValue/" + iId);
				// 	}
					//oIdea.setProperty("/AdminFieldsValue/" + iId, oFieldValue);				
					if(!oField.ID){
						oFieldValue = jQuery.extend({
							ID: that.getModel("object").getNextHandle(),
							FIELD_CODE: oField.CODE
						}, oField);	
                      that.getModel("editObject").setProperty("/AdminFieldsValue/" + iId, oFieldValue);						
					} else {
					    oFieldValue = that.getModel("editObject").getProperty("/AdminFieldsValue/" + iId);
					}
                     //oIdea.setProperty("/AdminFieldsValue/" + iId, oFieldValue);
					if (oField.IS_DISPLAY_ONLY) {
						var oRichTextHtml = new sap.ui.core.HTML({
							sanitizeContent: true,
							preferDOM: false,
							content: {
								model: "editObject",
								path: "/AdminFieldsValue/" + iId + "/DISPLAY_TEXT",
								formatter: that.formatter.wrapHTML
							}
						});
						oFormFields.addItem(oRichTextHtml);
						return true;
					}

					var sUnitCodelbl;
					if (oField.UOM_CODE) {
						sUnitCodelbl = oField.DEFAULT_TEXT + "(" + CodeModel.getText("sap.ino.xs.object.basis.Unit.Root", oField.UOM_CODE) + ")";
					} else {
						sUnitCodelbl = oField.DEFAULT_TEXT;
					}
					if (oField.IS_PUBLISH && oField.STATE_OF_PUBLISH) {

						sUnitCodelbl = sUnitCodelbl + that.getText("OBJECT_MSG_ADMIN_FORM_FIELD_CAN_PUBLISH");
					} else if (oField.IS_PUBLISH) {
						sUnitCodelbl = sUnitCodelbl + that.getText("OBJECT_MSG_ADMIN_FORM_FIELD_CANNOT_PUBLISH");
					} else {
						sUnitCodelbl = sUnitCodelbl; // + that.getText('OBJECT_MSG_ADMIN_FORM_FIELD_CANNOT_PUBLISH');
					}
					var bMandatory = false;
					if (oField.MANDATORY === 1) {
						bMandatory = true;
					}
					var sDataType;
					sDataType = mDataType[oField.DATATYPE_CODE];
					if (oField.VALUE_OPTION_LIST_CODE) {
						//Valuelist used, then got the value List
						var oLabel = new Label({
							text: sUnitCodelbl,
							tooltip: oField.DEFAULT_LONG_TEXT,
							required: bMandatory
						});
						oLabel.addStyleClass("sapInoIdeaFormLabelStyle");
						oFormFields.addItem(oLabel);
						var sCodeTable = "sap.ino.xs.object.basis.ValueOptionList.Root_" + oField.VALUE_OPTION_LIST_CODE;
						oFieldValue.valueOptionList = CodeModel.getCodes(sCodeTable, function(oCode) {
							return oCode.ACTIVE === 1;
						});

						var sValueSelected = "editObject>/AdminFieldsValue/" + iId + "/" + sDataType;
						var oSelectedKey = {
							path: sValueSelected,
							type: fnGetDataType(oField)
						};
						var oComboBox = new ComboBox({
							tooltip: oField.DEFAULT_LONG_TEXT,
							selectedKey: oSelectedKey,
							width: "100%",
							//selectionChange: onSelectionChangeLaborDatum
							change: oField.MANDATORY ? onSelectionChangeLaborDatum : onSelectionChangeWrongData
						});
						oComboBox.addItem();
						var sKey = "{editObject>" + sDataType + "}";
						var oItemTemplate = new ListItem({
							key: sKey,
							text: "{editObject>DEFAULT_TEXT}"
						});
						var sBindingPath = "editObject>/AdminFieldsValue/" + iId + "/valueOptionList";
						oComboBox.bindItems({
							path: sBindingPath,
							template: oItemTemplate,
							sorter: new Sorter("SEQUENCE_NO")
						});
						if (!that.aComboBoxes) {
							that.aComboBoxes = [];
						}
						that.aComboBoxes.push(oComboBox);
						oFormFields.addItem(oComboBox);
					} else {
						if (oField.DATATYPE_CODE === "BOOLEAN") {
							if (!that.aCheckBoxes) {
								that.aCheckBoxes = [];
							}
							var textEnd;
							if (oField.IS_PUBLISH && oField.STATE_OF_PUBLISH) {
								textEnd = oField.DEFAULT_TEXT + that.getText("OBJECT_MSG_ADMIN_FORM_FIELD_CAN_PUBLISH");
							} else if (oField.IS_PUBLISH) {
								textEnd = oField.DEFAULT_TEXT + that.getText("OBJECT_MSG_ADMIN_FORM_FIELD_CANNOT_PUBLISH");
							} else {
								textEnd = oField.DEFAULT_TEXT; //+ that.getText('OBJECT_MSG_ADMIN_FORM_FIELD_CANNOT_PUBLISH');
							}
							var oCheckBox = new CheckBox({
								text: textEnd,
								enabled: true,
								tooltip: oField.DEFAULT_LONG_TEXT,
								selected: {
									path: "editObject>/AdminFieldsValue/" + iId + "/BOOL_VALUE",
									type: 'sap.ino.commons.models.types.IntBooleanType'
								},
								select: bMandatory ? fnChkboxSelect : function() {}
							});
							var oChkLabel = oCheckBox._getLabel();
							if (bMandatory) { //Add * to the check box
								oChkLabel.addStyleClass("sapMLabelRequired");
								that.aCheckBoxes.push(oCheckBox);
							}
							oChkLabel.addStyleClass("sapInoIdeaFormLabelStyle");
							oCheckBox.addStyleClass("sapInoIdeaFormChxBoxHeight");
							oFormFields.addItem(oCheckBox);

						} else {
							var oFieldControl;
							var txtLabel = new Label({
								text: sUnitCodelbl,
								tooltip: oField.DEFAULT_LONG_TEXT,
								required: bMandatory
							});
							txtLabel.addStyleClass("sapInoIdeaFormLabelStyle");
							oFormFields.addItem(txtLabel);
							var oValue = {
								path: "editObject>/AdminFieldsValue/" + iId + "/" + sDataType,
								type: fnGetDataType(oField)
								//type:new sap.ui.model.type.Integer(null) ???nullable new type to identify
							};
							if (oField.DATATYPE_CODE === "RICHTEXT") {
								// Otherwise there the RTE is not rendered properly when the application is launched uncached
								oFieldControl = sap.ui.xmlfragment({
									id: that.getView().getId(),
									fragmentName: "sap.ino.vc.idea.fragments.IdeaRichTxt"
								}, that);
								oFieldControl.attachReady(function() {
									this.bindProperty("value", {
										path: oValue.path,
										type: fnGetDataType(oField)
									});
								});
							} else if (oField.DATATYPE_CODE === "DATE") {
								oFieldControl = new sap.m.DatePicker({
									//	enabled: bEnableEdit,
									tooltip: oField.DEFAULT_LONG_TEXT,
									value: {
										path: oValue.path,
										type: fnGetDataType(oField)
									},
									width: "100%"
								});
							} else {
								oFieldControl = new Input({
									//	enabled: bEnableEdit,
									tooltip: oField.DEFAULT_LONG_TEXT,
									value: oValue,
									width: "100%"
								});

							}
							if (oFieldControl.addAriaLabelledBy) {
								oFieldControl.addAriaLabelledBy(txtLabel);
							}
							oFieldControl.addStyleClass("sapUiSmallMarginBottom");
							oFormFields.addItem(oFieldControl);
						}

					}
				});
				this._bEditAdminFormContorl = true;
			}
			//end
		}
	));
});
}; // end of sap/ino/vc/internal/InternalSection.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.internal.InternalWall.controller') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
sap.ui.getCore().loadLibrary("sap.ino.wall");

jQuery.sap.declare('sap.ino.vc.internal.InternalWall.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ino.vc.wall.WallMixin'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/internal/InternalWall.controller",[
    "sap/ino/vc/commons/BaseVariantListController",
    "sap/ui/Device",
    "sap/ino/commons/formatters/ObjectListFormatter",
    "sap/ino/vc/wall/WallMixin",
    "sap/ino/vc/attachment/AttachmentMixin",
    "sap/ui/model/json/JSONModel", 
    "sap/ino/commons/models/object/Attachment",
    "sap/ino/commons/application/Configuration",
     "sap/m/MessageToast"
], function(BaseController,
    Device,
    ObjectListFormatter,
    WallMixin,
    AttachmentMixin,
    JSONModel,
    Attachment,
    Configuration,
    MessageToast) {
        "use strict";
        
        var mVariant = {
            MY: "my",
            SHARED: "shared"
        };

        var mFilter = {
            NONE: "myWalls",
            MY: "myWalls",
            SHARED: "sharedWalls"
        };
        
        var attachmentUploadUrl = Attachment.getEndpointURL();
        
        return BaseController.extend("sap.ino.vc.internal.InternalWall", jQuery.extend({}, WallMixin, {
             /* Controller reacts when these routes match */
            routes: [],
            list: {
                "Variants": {},
                "Picker": {
                    "Variants": {
                        "Values": [{
                            "TEXT": "WALL_LIST_MIT_MY",
                            "ACTION": mVariant.MY,
                            "FILTER": mFilter.MY
                        }, {
                            "TEXT": "WALL_LIST_MIT_SHARED",
                            "ACTION": mVariant.SHARED,
                            "FILTER": mFilter.SHARED
                        }]
                    }
                }
            },

            /* ViewModel storing the current configuration of the list */
            view: {
                "Picker": {
                    "VARIANT": undefined // mVariant.MY will be initialized in onWallAdd
                },
                "EDITABLE": undefined
            },

            formatter: ObjectListFormatter,
            
            objectListFormatter: ObjectListFormatter,

            onInit: function() {
                var that = this;
                this._wallMixinInit({
                    wallId: "interalwalllistinidea",
                    wallBindPath: "object>/InternalWalls",
                    wallAddAction: function (oObject, oWallData){
                        oObject.addInternalWall(oWallData);
                    },
                    wallRemoveAction:function(oObject, oWallControl){
                        oObject.removeInternalWall(oWallControl.getStorageId());
                        oObject.update();
                    },
                    wallData: function(oObject){
                        return oObject.getProperty("/InternalWalls");
                    }
                });
                this.getList().addStyleClass("sapInoWallListPreviewItems");

                BaseController.prototype.onInit.apply(this, arguments);
                
                if (!this.getModel("local")) {
                this.setModel(new JSONModel({
                        ATTACHMENT_UPLOAD_URL : attachmentUploadUrl
                    }), "local");
                }
            },

            onBeforeRendering: function() {
                this.view.EDITABLE = true;
                var oViewModel = this.getModel("view");
                oViewModel.setData(this.view, true);
                this._bindList();
                var oBinding = this.getList().getBinding("items");
                if (oBinding) {
                    this._updateWallPreviewControls();
                }
            },
            
            
            onAfterRendering : function() {
            this._attachmentMixinInit({
                    attachmentId: "InternalAttachments",
                    updateObject: function(oObject){
                        oObject.update();
                    },
                    uploadSuccess: function(oObject, oResponse){
                        oObject.addInternalAttachment({
                            "CREATED_BY_NAME" : Configuration.getCurrentUser().NAME,
                            "ATTACHMENT_ID" : oResponse.attachmentId,
                            "FILE_NAME" : oResponse.fileName,
                            "MEDIA_TYPE" : oResponse.mediaType,
                            "CREATED_AT" : new Date()
                        });
                        oObject.update().fail(function(){
                            oObject.getMessageParser().parse(oResponse);
                            MessageToast.show(this.getText("OBJECT_MSG_ATTACHMENT_FAILED"));
                            return true;
                        });
                    }
                });
                
            },
            
            
            
            
            
            
            
            
            getVariantsPopover : function() {
                if (!this._getWallPickerDialog().isActive()) {
                    return BaseController.prototype.getVariantsPopover.apply(this, arguments);
                } else {
                    if (!this._oPickerVariantPopover) {
                        this._oPickerVariantPopover = sap.ui.xmlfragment("sap.ino.vc.wall.fragments.PickerListVariants", this);
                        // if (Device.system.phone) {
                        //     this._oPickerVariantPopover = sap.ui.xmlfragment("sap.ino.vc.wall.fragments.PickerListVariantsDialog", this);
                        // } else {
                        //     this._oPickerVariantPopover = sap.ui.xmlfragment("sap.ino.vc.wall.fragments.PickerListVariants", this);
                        // }
                        this.getView().addDependent(this._oPickerVariantPopover);
                    }
                    return this._oPickerVariantPopover;
                }
            },

            getVariant : function(sAction) {
                if (!this._getWallPickerDialog().isActive()) {
                   return BaseController.prototype.getVariant.apply(this, arguments);
                } else {
                   return this._getListDefinitionEntry(sAction, "ACTION", "/Picker/Variants/Values");
                }
            },
            
            onVariantPress: function(sVariantAction, oEvent) {
                this.setViewProperty("/Picker/VARIANT", sVariantAction);
                var oWallPickerView = this._getWallPickerView();
                if (oWallPickerView) {
                    oWallPickerView.getController().setViewProperty("/List/VARIANT", sVariantAction);
                    oWallPickerView.invalidate();
                }
            },
            
            _onVariantPress : function(oEvent) {
                var oItem = oEvent.getSource();
        	    var oContext = oItem.getBindingContext("list");
        	    var sAction;
        	    var oObject;
        	    
        	    if (oContext) {
        	        oObject = oContext.getObject();    
        	        sAction = oObject ? oObject.ACTION : undefined;
        	    }
        	    
        	    this.onVariantPress(sAction, oEvent);
        	    
        	    var oPopover = this.getVariantsPopover();
        	    if (typeof oPopover.close === "function") {
                    oPopover.close();
                }
            },
            
            onWallPicked : function(oWallData) {
                this._bindList();
                var oBinding = this.getList().getBinding("items");
                var oIdea = this.getModel("object");
                if (oBinding) {
                    var that = this;
                    oIdea.update().done(
                        function(){
                            that._updateWallPreviewControls();
                        });
                }
            }        
            
        }));
});
}; // end of sap/ino/vc/internal/InternalWall.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.notice.NoticeList.controller') ) {
jQuery.sap.declare('sap.ino.vc.notice.NoticeList.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/notice/NoticeList.controller",[
    "sap/ino/vc/commons/BaseController",
    "sap/ino/commons/application/Configuration",
    "sap/ui/model/json/JSONModel",
    "sap/ino/vc/commons/TopLevelPageFacet",
    "sap/ui/Device",
    "sap/ino/vc/commons/mixins/ClipboardMixin",
    "sap/ino/vc/commons/mixins/IdentityQuickviewMixin",
    "sap/ino/commons/formatters/ObjectListFormatter"
], function(
	BaseController,
	Configuration,
	JSONModel,
	TopLevelPageFacet,
	Device,
	ClipboardMixin,
	IdentityQuickviewMixin,
	ObjectListFormatter
) {
	"use strict";

	var mList = {
		"newIdeas": {
			sPath: "data>/MyIdeaMediumCommunity"
		},
		"newStatus": {
			sPath: "data>/IdeaMediumCommunity"
		},
		"newComments": {
			sPath: "data>/IdeaMediumSearchParams(searchToken='',tagsToken='',tagsToken1='',tagsToken2='',tagsToken3='',tagsToken4='',filterName='completedIdeas',filterBackoffice=0,c1='',o1=-2,v1='',c2='',o2=-1,v2='',c3='',o3=-1,v3='')/Results"
		}
	};
	
	var IdeaComment = [{
	    ID: 36338,
        CREATED_AT: "/Date(1566541324522)/",
        CREATED_BY_ID: 814053,
        CHANGED_AT: "/Date(1566541324522)/",
        CHANGED_BY_ID: 814053,
        OBJECT_ID: 314794,
        COMMENT: "Can you demo the POC to us.",
        PARENT_ID: null,
        CHANGED_BY_NAME: "Allen Zhang",
        CHANGED_BY_EMAIL: "allen.zhang07@sap.com",
        CHANGED_BY_PHONE: null,
        CHANGED_BY_MOBILE: "1",
        CHANGED_BY_OFFICE: null,
        CHANGED_BY_IMAGE_ID: null,
        CREATED_BY_NAME: "Allen Zhang",
        CREATED_BY_EMAIL: "allen.zhang07@sap.com",
        CREATED_BY_PHONE: null,
        CREATED_BY_MOBILE: "1",
        CREATED_BY_OFFICE: null,
        CREATED_BY_IMAGE_ID: null,
        HAS_ATTACHMENTS: 0,
        HAS_REPLIES: 1,
        CAN_UPDATE: 1,
        CAN_DELETE: 1,
        SOURCE_ID: null,
        STATUS: 0,
        ChildrenComments:[{
            ID: 36338,
            CREATED_AT: "/Date(1566541324522)/",
            CREATED_BY_ID: 814053,
            CHANGED_AT: "/Date(1566541324522)/",
            CHANGED_BY_ID: 814053,
            OBJECT_ID: 314794,
            COMMENT: "Can you demo the POC to us.",
            PARENT_ID: null,
            CHANGED_BY_NAME: "Allen Zhang",
            CHANGED_BY_EMAIL: "allen.zhang07@sap.com",
            CHANGED_BY_PHONE: null,
            CHANGED_BY_MOBILE: "1",
            CHANGED_BY_OFFICE: null,
            CHANGED_BY_IMAGE_ID: null,
            CREATED_BY_NAME: "Allen Zhang",
            CREATED_BY_EMAIL: "allen.zhang07@sap.com",
            CREATED_BY_PHONE: null,
            CREATED_BY_MOBILE: "1",
            CREATED_BY_OFFICE: null,
            CREATED_BY_IMAGE_ID: null,
            HAS_ATTACHMENTS: 0,
            HAS_REPLIES: 1,
            CAN_UPDATE: 1,
            CAN_DELETE: 1,
            SOURCE_ID: null,
            STATUS: 0
        }]
    }];

	return BaseController.extend("sap.ino.vc.notice.NoticeList", jQuery.extend({}, TopLevelPageFacet, ClipboardMixin, IdentityQuickviewMixin, {
		routes: ["noticelist"],

		formatter: jQuery.extend({}, ObjectListFormatter),

		view: {
			"showCommentDialogBtn": false
		},

		onInit: function() {
			BaseController.prototype.onInit.apply(this, arguments);
			this.oViewModel = this.getModel("view");
			this.oViewModel.setData(this.view, true);
		},

		onRouteMatched: function() {
			this.bindViewData();
		},
		
		onItemPress: function(oEvent) {
			var oItem = oEvent.getSource();
			var oContext = oItem.getBindingContext("data");
			if (oContext) {
				this.navigateTo("idea-display", {
					id: oContext.getProperty("ID")
				});
			}
		},

		onNoticeListTypeSelect: function(oEvent) {
			this._sIdeaViewKey = oEvent.getParameter("key");

			this.onSwitchButtonStyle(oEvent);

			if (this._sIdeaViewKey === "newComments") {
				this.setViewProperty("/showCommentDialogBtn", true);
			} else {
				this.setViewProperty("/showCommentDialogBtn", false);
			}
			this._bindIdeas(this._sIdeaViewKey);
		},

		bindViewData: function() {
			var sIdeaViewKey;
			sIdeaViewKey = this.byId("sapInoNoticeUpdateButtons").getSelectedKey();
			this._sIdeaViewKey = sIdeaViewKey || Object.keys(mList)[0];
			this._bindIdeas(this._sIdeaViewKey);
		},

		_bindIdeas: function(sKey) {
			var disableImage = Configuration.getSystemSetting("sap.ino.config.DISABLE_IDEA_IMAGE") * 1 || Configuration.getSystemSetting(
				"sap.ino.config.DISABLE_IDEA_IMAGE_HIDE_PHASE_BAR") * 1;
			var template = Number(disableImage) ? this.getFragment("sap.ino.vc.notice.fragments.NoticeListItemNoImage") : this.getFragment(
				"sap.ino.vc.notice.fragments.NoticeListItem");
			var oTemplate = {
				path: mList[sKey].sPath,
				template: template
			};
			var that = this;
			var oList = this.byId("noticeIdeaList");
			oList.bindItems(oTemplate);
			oList.attachEventOnce("updateFinished", function(oEvent) {
				that.onResizeLayoutChange(null, that._sCurrentLayout);
			});
		},

		onSwitchButtonStyle: function(oEvent) {
			var oSource = oEvent.getSource();
			var aItems = oSource.getItems();
			var oKey = oSource.getSelectedKey();
			var sIconName,iPosition;
			jQuery.each(aItems, function(index, oItem) {
				if (oItem.getKey() === oKey) {
					oItem.setDisplayNotice(false);
					oItem.setTextVisible(true);
					sIconName = oItem.getIcon();
					oItem.setIcon(sIconName + "-selected");
				} else {
					oItem.setDisplayNotice(true);
					oItem.setTextVisible(false);
					sIconName = oItem.getIcon();
					iPosition = sIconName.indexOf("-selected");
					if(iPosition > 0){
					  oItem.setIcon(sIconName.substr(0,iPosition));  
					}
				}
			});
		},
		
		openCommentDialog: function(oEvent) {
			if (!this._oCommentDialogPopover) {
				this._oCommentDialogPopover = this.createFragment("sap.ino.vc.notice.fragments.NoticeCommentDialog");
				this.getView().addDependent(this._oCommentDialogPopover);

			}
			if (!this._oCommentDialogPopover.isOpen()) {
			    this._oCommentDialogPopover.setModel(new JSONModel(oEvent.getSource().getBindingContext("data").getObject()), "CommentData");
			    this._oCommentDialogPopover.setModel(new JSONModel(IdeaComment), "IdeaComment");
				this._oCommentDialogPopover.openBy(oEvent.getSource());
			} else {
				this.closeNotifications();
			}
		},

		closeNotifications: function() {
			if (this._oCommentDialogPopover && this._oCommentDialogPopover.isOpen()) {
				this._oCommentDialogPopover.close();
			}
		}

	}));

});
}; // end of sap/ino/vc/notice/NoticeList.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.reward.List.controller') ) {
jQuery.sap.declare('sap.ino.vc.reward.List.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/reward/List.controller",[
    "sap/ui/Device",
    "sap/ui/model/Sorter",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/m/MessageBox",
    "sap/ino/commons/application/Configuration",
    "sap/ino/commons/formatters/ObjectListFormatter",
    "sap/ino/commons/models/aof/ApplicationObjectChange",
    "sap/ino/commons/models/object/RewardList",
    "sap/ino/controls/OrientationType",
    "sap/ino/vc/commons/TopLevelPageFacet",
    "sap/ino/vc/commons/BaseVariantListController",
    "sap/ino/vc/evaluation/EvaluationFormatter",
    "sap/ino/vc/reward/RewardFormatter",
    "sap/ino/vc/reward/mixins/MassActionMixin",
    "sap/ino/vc/reward/mixins/CreateActionMixin",
    "sap/ino/vc/commons/mixins/ExportMixin",
    "sap/ui/model/json/JSONModel"
], function(
	Device,
	Sorter,
	Filter,
	FilterOperator,
	MessageBox,
	Configuration,
	ObjectListFormatter,
	ApplicationObjectChange,
	RewardList,
	OrientationType,
	TopLevelPageFacet,
	BaseController,
	EvaluationFormatter,
	RewardFormatter,
	MassActionMixin,
	CreateActionMixin,
	ExportMixin,
	JSONModel) {
	"use strict";

	var mRoutes = {
		REWARD: "rewardlist",
		REWARD_VARIANT: "rewardlistvariant"
	};

	var mVariant = {
		REWARD_MANAGE: "rewardmanage",
		REWARD_QUALIFIED: "rewardqualified",
		REWARD_REWARDED: "rewardobjects",
		REWARD_EXPORTED: "rewarddownloaded",
		REWARD_GAMIFICATION: "rewardgamificationreport"
	};

	var mFilter = {
		REWARD_MANAGE: "rewardManage",
		REWARD_QUALIFIED: "qualifiedIdeaForReward",
		REWARD_REWARDED: "readyForDownloadReward",
		REWARD_EXPORTED: "downloadedReward",
		REWARD_GAMIFICATION: "rewardGamificationReport"
	};

	var mList = {
		NAME: "IDEA_LIST_MIT_REWARD_NAME",
		Variants: {
			DEFAULT_VARIANT: mVariant.REWARD_MANAGE,
			TITLE: "IDEA_LIST_MIT_REWARD_MANAGE",
			Values: [{
					TEXT: "IDEA_LIST_MIT_REWARD_MANAGE",
					ACTION: mVariant.REWARD_MANAGE,
					FILTER: mFilter.REWARD_MANAGE,
					// DEFAULT_SORT: mSort.SUBMITTED_AT,
					CAMPAIGN_MANAGE: true,
					VISIBLE: true
            }, {
					TEXT: "IDEA_LIST_MIT_REWARD_QUALIFIED",
					ACTION: mVariant.REWARD_QUALIFIED,
					FILTER: mFilter.REWARD_QUALIFIED,
					// INCLUDE_DRAFT: false,
					// DEFAULT_SORT: mSort.SUBMITTED_AT,
					HIERARCHY_LEVEL: "1",
					CAMPAIGN_MANAGE: true,
					VISIBLE: true
            }, {
					TEXT: "IDEA_LIST_MIT_REWARD_REWARDED",
					ACTION: mVariant.REWARD_REWARDED,
					FILTER: mFilter.REWARD_REWARDED,
					// DEFAULT_SORT: mSort.SUBMITTED_AT,
					HIERARCHY_LEVEL: "1",
					CAMPAIGN_MANAGE: true
            }, {
					TEXT: "IDEA_LIST_MIT_REWARD_EXPORTED",
					ACTION: mVariant.REWARD_EXPORTED,
					FILTER: mFilter.REWARD_EXPORTED,
					// DEFAULT_SORT: mSort.SUBMITTED_AT,
					HIERARCHY_LEVEL: "1",
					CAMPAIGN_MANAGE: true
            },
				{
					TEXT: "IDEA_LIST_MIT_REWARD_GAMIFICATION_REPORT",
					ACTION: mVariant.REWARD_GAMIFICATION,
					FILTER: mFilter.REWARD_GAMIFICATION,
					// DEFAULT_SORT: mSort.SUBMITTED_AT,
					HIERARCHY_LEVEL: "1",
					CAMPAIGN_MANAGE: true
            }
            ]
		}
	};

	var oList = BaseController.extend("sap.ino.vc.reward.List", jQuery.extend({}, TopLevelPageFacet, ExportMixin, MassActionMixin,
		CreateActionMixin, {

			formatter: jQuery.extend({}, ObjectListFormatter, EvaluationFormatter, RewardFormatter),

			initialFocus: "filterButton",

			list: mList,

			routes: ["rewardlist", "rewardlistvariant"],

			view: {
				"List": {
					"VARIANT": mVariant.REWARD_MANAGE,
					"MANAGE": false,
					"TAGS": [],
					"IS_TAGS_SELECTION": false,
					"TAGCLOUD": false,
					"TAGCLOUD_EXPABLE": true,
					"TAGCLOUD_EXP": false,
					"TAGCLOUD_BAR_VISIBLE": false,
					"HIDE_PPT_EXPORT": true,
					"SELECT_ALL_ENABLE": false,
					"SELECT_ALL": false,
					"IS_IDEA_LIST": false,
					"IS_GAMIFICATION_REPORT": false
				},
				"ORIENTATION": OrientationType.PORTRAIT
			},

			onInit: function() {
				BaseController.prototype.onInit.apply(this, arguments);
				this.oViewModel = this.getModel("view");
				this.oViewModel.setData(this.view, true);
				this.initApplicationObjectChangeListeners();
			},

			onRouteMatched: function(oEvent) {
				this.setGlobalFilter([]);
          var bBOPrivilege = this.getModel("user").getProperty("/privileges")["sap.ino.ui::backoffice.access"];
            if(!bBOPrivilege){
              this.navigateTo("home"); 
              return;
              }   					
				this.setHelp("REWARD_LIST");
				this.setCurrentRouteCampaignID();
				this.show(oEvent);
			},
            setCurrentRouteCampaignID: function(){
				var oHistoryModel = this.getModel("history");
				var sCurrentHash = oHistoryModel.getProperty("/CurrentHash/hash");
				if( sCurrentHash && sCurrentHash.indexOf('campaign/') >= 0){
			    var sCampaignID = sCurrentHash.substr(9);
			    this.setViewProperty("/List/CAMPAIGN",sCampaignID);
				var oCampaignFilterList = this.byId("panelFilterFragment--campaignFilterList");
				var oCampaignFilterItems = oCampaignFilterList.getSuggestionItems();
				for (var i = 0; i < oCampaignFilterItems.length; i++) {
					if (oCampaignFilterItems[i].getProperty("key") === sCampaignID) {
						oCampaignFilterList.setSelectionItem(oCampaignFilterItems[i]);
						break;
					}
				}			    
			    this.setFilter(new Filter("CAMPAIGN_ID", FilterOperator.EQ, sCampaignID));
				}                
            },
			onCampaignDialogItemsSelect: function(oEvent) {
				var sSelectedKey = oEvent.getParameter("selectedItem").data("ID") + "";
				var oCampaignFilterList = this.byId("panelFilterFragment--campaignFilterList");
				oCampaignFilterList.getBinding("suggestionItems").filter([]);
				var oCampaignFilterItems = oCampaignFilterList.getSuggestionItems();
				for (var i = 0; i < oCampaignFilterItems.length; i++) {
					if (oCampaignFilterItems[i].getProperty("key") === sSelectedKey) {
						oCampaignFilterList.setSelectionItem(oCampaignFilterItems[i]);
						break;
					}
				}
				if (sSelectedKey !== this.getViewProperty("/List/CAMPAIGN")) {
					this.setViewProperty("/List/CAMPAIGN", sSelectedKey);
					this.setFilter(new Filter("CAMPAIGN_ID", FilterOperator.EQ, sSelectedKey));
                    var oBindingInfo = this.getList().getBindingInfo("items");
                     oBindingInfo.filters = this._aFilter;
                    this.getList().bindItems(oBindingInfo);
				}
			},

			onCampaignDialogSearch: function(oEvent) {
				var oBinding = oEvent.getParameter("itemsBinding");
				var sValue = jQuery.sap.encodeURL(oEvent.getParameter("value"));
				oBinding.filter(new Filter("SHORT_NAME", FilterOperator.Contains, sValue));
				oBinding.sort(new Sorter("SHORT_NAME"));
			},

			onCampaignSuggestion: function(oEvent) {
				var oViewModel = this.getModel("view");
				var oBinding = oEvent.getSource().getBinding("suggestionItems");
				var mEvent = jQuery.extend({}, oEvent, true);
				var sValue = mEvent.getParameter("suggestValue");
				this.resetClientMessages();
				this.byId("panelFilterFragment--campaignFilterList").setFilterSuggests(false);
				oViewModel.setProperty("/campaignSuggestion", this._aCampaignSuggestion);
				oBinding.filter(new Filter("SHORT_NAME", FilterOperator.Contains, sValue));
				oBinding.sort(new Sorter("SHORT_NAME"));
			},

			onFilterReset: function() {
				this.setViewProperty("/List/CAMPAIGN", undefined);
				this.byId("panelFilterFragment--campaignFilterList").setValue(undefined);
				this.setFilter([]);

				if (!Device.system.desktop) {
					//no navigation on mobile phones yet
					return;
				}

				this._filter();
			},

			onFilterCampaignChange: function(oEvent) {
				var sSelectedKey = oEvent.getParameter("selectedItem") ? Number(oEvent.getParameter("selectedItem").getProperty("key")) : undefined;
				if (sSelectedKey !== this.getViewProperty("/List/CAMPAIGN")) {
					this.setViewProperty("/List/CAMPAIGN", sSelectedKey);
					this.setFilter(new Filter("CAMPAIGN_ID", FilterOperator.EQ, sSelectedKey));
					this._filter();
				}

			},

			onClearCampaignFilter: function(oEvent) {
				var sValue = oEvent.getParameter("value");
				if (sValue.trim() === "") {
					this.setViewProperty("/List/CAMPAIGN", undefined);
					this.setFilter([]);
					this._filter();
				}
			},

			onHandleCampaignFilterHelp: function() {
				var oViewModel = this.getModel("view");
				if (!this._oCampaignlistDialog) {
					this._oCampaignlistDialog = this.createCampaignListDialog();
				}
				oViewModel.setProperty("/campaignSuggestion", this._aCampaignSuggestion);
				this._oCampaignlistDialog.open();
			},

			onDownloadReward: function() {
				var that = this;
				var oTable = this.getList();
				var aRewardId = [];
				var aRewardListId = [];
				var aSelect = oTable.getSelectedIndices();
				if (aSelect.length) {
					for (var i = 0; i < aSelect.length; i++) {
						aRewardId.push(oTable.getContextByIndex(aSelect[i]).getProperty("ID"));
						if (aRewardListId.indexOf(oTable.getContextByIndex(aSelect[i]).getProperty("REWARD_LIST_ID")) === -1) {
							aRewardListId.push(oTable.getContextByIndex(aSelect[i]).getProperty("REWARD_LIST_ID"));
						}
					}
				}

				var oDownloadRequest = BaseController.prototype.executeObjectAction.call(that, RewardList, "download", {
					staticparameters: {
						"REWARD_ID": aRewardId,
						"REWARD_LIST_ID": aRewardListId
					}
				});
				oDownloadRequest.done(function() {
					if (that.bindList && typeof(that.bindList) === "function") {
						that.bindList();
					}
				});
			},

			onListExportXLS: function() {
				var that = this;
				if (!this.getViewProperty("/List/IS_IDEA_LIST") && this.isDownloaded()) {
					MessageBox.confirm(this.getText("IDEA_LIST_REWARD_LIST_INS_EXPORT_CONFIRMATION"), {
						title: this.getText("GENERAL_EXPORT_TIT_EXPORT_CONFIRMATION"),
						icon: MessageBox.Icon.NONE,
						onClose: function(bResult) {
							if (bResult === "OK") {
								ExportMixin.onListExportXLS.call(that);
							}
						}
					});
				} else {
					ExportMixin.onListExportXLS.call(that);
				}
			},

			onListExportCSV: function() {
				var that = this;
				if (!this.getViewProperty("/List/IS_IDEA_LIST") && this.isDownloaded()) {
					MessageBox.confirm(this.getText("IDEA_LIST_REWARD_LIST_INS_EXPORT_CONFIRMATION"), {
						title: this.getText("GENERAL_EXPORT_TIT_EXPORT_CONFIRMATION"),
						icon: MessageBox.Icon.NONE,
						onClose: function(bResult) {
							if (bResult === "OK") {
								ExportMixin.onListExportCSV.call(that);
							}
						}
					});
				} else {
					ExportMixin.onListExportCSV.call(that);
				}
			},
			visibleItem: function(bVisible) {
				return bVisible;
			},
			onTableSelectionChange: function(oEvent) {
				if (!this._bIsWarned) {
					this._bIsWarned = true;
					MessageBox.show(this.getText("SELECTION_WITH_COAUTHOR_MESSAGE"), MessageBox.Icon.INFORMATION, this.getText("MESSAGE_TIT_WARNING"), [
						MessageBox.Action.OK]);
				}
				if (this._bIsTableSelectionChanging) {
					/* when selecting items and triggering this event, do not handle this event */
					return;
				}
				var oTable = this.getList();
				var aSelect = oTable.getSelectedIndices();
				var iCount = oEvent.getParameter("rowIndex") === -1 || oEvent.getParameter("selectAll") ? 0 : oTable._iBindingLength;
				var iRewardId = oEvent.getParameter("rowIndex") === -1 || oEvent.getParameter("selectAll") ? 0 : oTable.getContextByIndex(oEvent.getParameter(
					"rowIndex")).getProperty("REWARD_LIST_ID");
				var bSelected = aSelect.indexOf(oEvent.getParameter("rowIndex")) >= 0 ? true : false;
				var bDeletable = false;
				var bExportable = false;

				/* select items which shares the same "REWARD_LIST_ID" */
				for (var j = 0; j < iCount; j++) {
					this._bIsTableSelectionChanging = true;
					if (oTable.getContextByIndex(j).getProperty("REWARD_LIST_ID") === iRewardId && j !== oEvent.getParameter("rowIndex")) {
						if (bSelected) {
							oTable.addSelectionInterval(j, j);
						} else {
							oTable.removeSelectionInterval(j, j);
						}
					}
				}
				this._bIsTableSelectionChanging = false;

				/* logic to set delete/export button enable/disable */
				aSelect = oTable.getSelectedIndices();
				for (var i = 0; i < aSelect.length; i++) {
					if (Number(oTable.getContextByIndex(aSelect[i]).getProperty("DOWNLOAD_COUNT"))) {
						bDeletable = false;
						break;
					} else {
						bDeletable = true;
					}
				}
				if (aSelect.length) {
					bExportable = true;
				}
				if (this.byId("sapInoMassDeleteBtn")) {
					this.byId("sapInoMassDeleteBtn").setEnabled(bDeletable);
				}
				if (this.byId("sapInoMassExportBtn")) {
					this.byId("sapInoMassExportBtn").setEnabled(bExportable);
				}
			},

			onOpenIdeaReward: function(oEvent) {
				var iIdeaId = oEvent.getSource().getBindingContext("data").getProperty("IDEA_ID");
				if (iIdeaId) {
					this.navigateTo("idea-display", {
						id: iIdeaId,
						query: {
							section: "sectionRewards"
						}
					});
				}
			},

			onOrientationChange: function() {},

			_check4ManagingList: function() {
				var bBackoffice = Configuration.hasCurrentUserPrivilege("sap.ino.ui::backoffice.access");

				if (bBackoffice) {
					var sVariant = this.getViewProperty("/List/VARIANT");
					var aVariants = this.getListProperty("/Variants/Values");

					var vVariant = jQuery.grep(aVariants, function(oVariant) {
						return oVariant.ACTION === sVariant;
					});

					vVariant = (vVariant && vVariant.length > 0) ? vVariant[0] : {};

					return vVariant.MANAGE || vVariant.CAMPAIGN_MANAGE || false;
				}

				return false;
			},

			_filter: function() {
				var aFilters = [];
				if (this.getViewProperty("/List/CAMPAIGN")) {
					aFilters.push(new Filter("CAMPAIGN_ID", FilterOperator.EQ, this.getViewProperty("/List/CAMPAIGN")));
				}
				if (this.getViewProperty("/List/IS_IDEA_LIST")) {
					this.getList()
						.getBinding("items")
						.filter(aFilters.length ? new Filter(aFilters, true) : null, "Application");
				} else {
					this.getList()
						.getBinding("rows")
						.filter(aFilters.length ? new Filter(aFilters, true) : null, "Application");
				}
			},

			createCampaignListDialog: function() {
				if (!this._campaignDialog) {
					this._campaignDialog = this.createFragment("sap.ino.vc.idea.fragments.CampaignSuggestionSelectList", this.getView().getId());
					this.getView().addDependent(this._campaignDialog);
				}
				return this._campaignDialog;
			},
            _setCampaignFilter:function (){
			    var sCampaignID = this.getViewProperty("/List/CAMPAIGN");
				var oCampaignFilterList = this.byId("panelFilterFragment--campaignFilterList");
				var oCampaignFilterItems = oCampaignFilterList.getSuggestionItems();
				for (var i = 0; i < oCampaignFilterItems.length; i++) {
					if (oCampaignFilterItems[i].getProperty("key") === sCampaignID) {
						oCampaignFilterList.setSelectionItem(oCampaignFilterItems[i]);
						break;
					}
				}                
            },
			bindList: function() {
				var that = this;
				this.saveState();

				// see MassActionMixin.js - cleans all internal state for mass action execution
				this.resetActionState();

				var sPath = "";
				var bIsManaged = this._check4ManagingList();
				var oBindingParameter = this.getBindingParameter();

				function fnCallback() {
					var aData = arguments[0].getParameter("data").results;
					var aNewData = [];
					var oViewModel = that.getModel("view");
					jQuery.each(aData, function(iIndex, oItem) {
						if (jQuery.grep(aNewData, function(oNewItem) {
							return oNewItem.ID === oItem.CAMPAIGN_ID;
						}).length === 0 || aNewData.length === 0) {
							aNewData.push({
								ID: oItem.CAMPAIGN_ID,
								SHORT_NAME: oItem.CAMPAIGN_NAME
							});
						}
					});
					oViewModel.setProperty("/campaignSuggestion", aNewData);
					that._aCampaignSuggestion = aNewData;
					that._filter();
					that._setCampaignFilter();
				}

				if (oBindingParameter.Variant === mVariant.REWARD_QUALIFIED) {
					sPath += "IdeaMediumBackofficeSearchParams";
					sPath += "(searchToken='" + (oBindingParameter.SearchTerm ? jQuery.sap.encodeURL(oBindingParameter.SearchTerm) : "") + "'," +
					    "searchType=" + 0 + "," +
						"tagsToken='" + (oBindingParameter.TagIds.join(",") || "") + "'," +
						"filterName='" + (oBindingParameter.VariantFilter || "") + "'," +
						"filterBackoffice=" + (bIsManaged ? "1" : "0") + ",c1='',o1=-1,v1='',c2='',o2=-1,v2='',c3='',o3=-1,v3=''" +
						",cvt='" + "" + "'," + "cvr=0," + "cvy=0" +
						",tagsToken1='',tagsToken2='',tagsToken3='',tagsToken4='')/Results";
				} else if (oBindingParameter.Variant === mVariant.REWARD_GAMIFICATION) {
					sPath += "SearchGamificationReportParams(searchLanguage='" + Configuration.getCurrentUser().LOCALE + "')/Results";

				} else {
					sPath += "RewardSearchParams";
					sPath += "(searchToken='" + (oBindingParameter.SearchTerm ? jQuery.sap.encodeURL(oBindingParameter.SearchTerm) : "") + "'," +
						"filterName='" + (oBindingParameter.VariantFilter || "") + "'" + ")/Results";
				}

				this.setPath("data>/" + sPath);

				if (oBindingParameter.Variant === mVariant.REWARD_QUALIFIED) {
					this.getList().bindItems({
						parameters: {
							operationMode: "Client"
						},
						path: this.getPath(),
						filters: this._aFilter,
						template: this.getItemTemplate(),
						groupHeaderFactory: this.getGroupHeaderFactory(),
						events: {
							dataRequested: function() {
								jQuery.each(that.getBusyControls(), function(iIdx, oControl) {
									if (jQuery.type(oControl.setBusy) === "function") {
										oControl.setBusy(true);
									}
								});
							},
							dataReceived: function() {
								jQuery.each(that.getBusyControls(), function(iIdx, oControl) {
									if (jQuery.type(oControl.setBusy) === "function") {
										oControl.setBusy(false);
									}
								});

								if (jQuery.type(fnCallback) === "function") {
									fnCallback.apply(this, arguments);
								}
							}
						}
					});
				} else if (oBindingParameter.Variant === mVariant.REWARD_GAMIFICATION) {
					this.getList().bindRows({
						path: this.getPath()
					});

				} else {
					this.getList().bindRows({
						parameters: {
							operationMode: "Client"
						},
						path: this.getPath(),
						events: {
							dataRequested: function() {
								jQuery.each(that.getBusyControls(), function(iIdx, oControl) {
									if (jQuery.type(oControl.setBusy) === "function") {
										oControl.setBusy(true);
									}
								});
							},
							dataReceived: function() {
								jQuery.each(that.getBusyControls(), function(iIdx, oControl) {
									if (jQuery.type(oControl.setBusy) === "function") {
										oControl.setBusy(false);
									}
								});

								if (jQuery.type(fnCallback) === "function") {
									fnCallback.apply(this, arguments);
								}
							}
						}
					});

				}
			},

			fnCompleted: function(oController) {
				return function() {
					if (!oController.getViewProperty("/List/IS_IDEA_LIST") && !oController.getViewProperty("/List/IS_GAMIFICATION_REPORT")) {
						oController.onDownloadReward();
					} else {
						return null;
					}
				};
			},

			getExportControl: function() {
				if (this.getViewProperty("/List/GAMIFICATION_DETAIL_OPEN")) {
					return this.byId('gamificationReportTableDetail');
				} else {
					return this.getList();
				}
			},

			getBindingParameter: function() {
				var sVariant, sVariantFilter;
				sVariant = this.getViewProperty("/List/VARIANT");
				sVariantFilter = this.getCurrentVariant().FILTER;
				var sSearchTerm = this.getViewProperty("/List/SEARCH");
				var aTags = this.getViewProperty("/List/TAGS");
				var sCampaignId = this.getViewProperty("/List/CAMPAIGN");

				var aTagId = jQuery.map(aTags, function(oTag) {
					return oTag.ID;
				});

				return {
					Variant: sVariant,
					VariantFilter: sVariantFilter,
					SearchTerm: sSearchTerm,
					TagIds: aTagId,
					CampaignId: sCampaignId
				};
			},

			getList: function() {
				var oFragmentShow = this.getViewProperty("/List/IS_GAMIFICATION_REPORT") ? this.byId(
					"rewardTableGamificationFragment--gamificationReportTable") : this.byId("rewardTableFragment--objectTable");
				return this.getViewProperty("/List/IS_IDEA_LIST") ? this.byId("rewardListFragment--objectlist") : oFragmentShow;
			},

			getVariantVisibility: function(sVariant) {
				var aVariants, bVisible;

				aVariants = this.getModel("list").getProperty("/Variants/Values");

				for (var i = 0; i < aVariants.length; i += 1) {
					var oVariant = aVariants[i];

					if (oVariant.ACTION === sVariant) {
						bVisible = oVariant.VISIBLE;
					}
				}

				return bVisible;
			},

			getExportPrefix: function() {
				if (!this.getViewProperty("/List/IS_IDEA_LIST")) {
					if (this.getViewProperty("/List/IS_GAMIFICATION_REPORT")) {
						return this.getText("EXPORT_PREFIX_GAMIFICATION");
					}
					return this.getText("EXPORT_PREFIX_REWARD");
				} else {
					return this.getText("EXPORT_PREFIX_IDEA");
				}
			},

			getItemTemplate: function() {
				return this.getFragment("sap.ino.vc.reward.fragments.RewardListItem");
			},

			isDownloaded: function() {
				var oTable = this.getList();
				var aSelect = oTable.getSelectedIndices();
				var bDownloaded = false;
				if (aSelect.length) {
					for (var i = 0; i < aSelect.length; i++) {
						if (oTable.getContextByIndex(aSelect[i]).getProperty("DOWNLOAD_COUNT") > 0) {
							bDownloaded = true;
							break;
						}
					}
				}
				return bDownloaded;
			},

			initApplicationObjectChangeListeners: function() {
				var that = this;
				var aActions = ["create", "del", "modifyAndSubmit", "executeStatusTransition", "forward"];

				var fnAOChangeListener = function(oEvent) {
					var sAction = oEvent.getParameter("actionName");
					if (sAction && aActions.indexOf(sAction) > -1 && oEvent.getParameter("object").getMetadata().getName() ===
						"sap.ino.commons.models.object.RewardList") {
						that.bindList();
					}
				};

				ApplicationObjectChange.attachChange(ApplicationObjectChange.Action.Create, fnAOChangeListener);
				ApplicationObjectChange.attachChange(ApplicationObjectChange.Action.Del, fnAOChangeListener);
				ApplicationObjectChange.attachChange(ApplicationObjectChange.Action.Action, fnAOChangeListener);
			},

			show: function(oEvent, oObject) {
				var oQuery;
				var sVariant;
				if (oEvent && oEvent.getParameter) {
					var oArguments = oEvent.getParameter("arguments");
					oQuery = oArguments["?query"];
					sVariant = oArguments.variant;
				} else {
					sVariant = oObject.variant;
					oQuery = oObject;
				}

				if (sVariant === this.list.Variants.Values[4].ACTION) {
					//Hide the Campaign Filter when select the gamification variant
					this.setViewProperty("/List/IS_GAMIFICATION_REPORT", true);
				} else {
					this.setViewProperty("/List/IS_GAMIFICATION_REPORT", false);
				}
				var that = this;

				var sDefaultVariant = this.getListProperty("/Variants/DEFAULT_VARIANT");
				this.setViewProperty("/isre", sVariant || sDefaultVariant);

				sVariant = this.getViewProperty("/isre");
				var oVariant = this.getVariant(sVariant);
				this.setViewProperty("/List/VARIANT", oVariant.ACTION);

				var bBound = this.getList() && this.getList().isBound("rows") || this.getList() && this.getList().isBound("items");

				var bRebindRequired = this.hasStateChanged(this.getCurrentRoute(), sVariant, oQuery, Device.orientation.portrait);
				bRebindRequired = bRebindRequired || this._bListChanged;
				this._bListChanged = false;

				if (!bBound || bRebindRequired) {
					// update the VISIBILITY flag of all variants for binding in Filter
					this.setVariantVisibility();

					this.setParameters(oQuery, oVariant);

					var iOrientation = this.getViewProperty("/ORIENTATION");
					this.onOrientationChange(Device.system.desktop ? iOrientation : Device.orientation);

					//check visiablity for current Variiant
					var bVisible = this.getVariantVisibility(sVariant);

					if (bVisible === false || typeof(bVisible) === "undefined") {
						MessageBox.show(
							that.getText("NOT_AUTHORIZED_MESSAGE"),
							MessageBox.Icon.INFORMATION,
							that.getText("NOT_AUTHORIZED_DIALOG_TITLE"), [MessageBox.Action.OK],
							function() {
								that.navigateTo("home");
							});
						return;
					}

					this.bindList();
				}
			},

			setParameters: function(oQuery, oVariant) {
				oQuery = oQuery || {};
				var sVariant = oVariant.ACTION;
				this.setViewProperty("/List/TAGCLOUD", false);
				this.setViewProperty("/List/IDEA_NAVIGATION_SECTION", "sectionRewards");
				this.setViewProperty("/DISABLE_ORIENTATION", true);
				this.setViewProperty("/List/VARIANT", oVariant.ACTION);
				this.setViewProperty("/List/MANAGE", oVariant.MANAGE || oVariant.CAMPAIGN_MANAGE);
				if (this.byId("sapInoMassDeleteBtn")) {
					this.byId("sapInoMassDeleteBtn").setVisible(sVariant !== mVariant.REWARD_EXPORTED);
				}
				if (sVariant === mVariant.REWARD_QUALIFIED) {
					this.setViewProperty("/List/IS_IDEA_LIST", true);
					this.setViewProperty("/List/HIDE_PPT_EXPORT", false);
					if (!this._sResizeListId) {
						this._sResizeListId = this.attachListControlResized(this.getList());
					}
				} else {
					this.setViewProperty("/List/IS_IDEA_LIST", false);
					this.setViewProperty("/List/HIDE_PPT_EXPORT", true);
					if (this._sResizeRegId) {
						this.detachListControlResized(this.getList());
					}
				}
			},

			setVariantVisibility: function() {
				var aVariants = this.getModel("list").getProperty("/Variants/Values");

				for (var i = 0; i < aVariants.length; i += 1) {
					var oVariant = aVariants[i];
					var bIsManage = oVariant.MANAGE || false;
					var bIsExpert = oVariant.EXPERT || false;
					var bIsCampaignManage = oVariant.CAMPAIGN_MANAGE || false;

					var bVisible = (!bIsManage && !bIsExpert && !bIsCampaignManage) ||
						// user has expert role and variant is for experts
						(bIsExpert && Configuration.hasCurrentUserPrivilege("sap.ino.ui::expert")) ||
						// user has campaign manager role and variant is for campaign manager
						(bIsCampaignManage && (Configuration.hasCurrentUserPrivilege("sap.ino.ui::campaign_manager") ||
								Configuration.hasCurrentUserPrivilege("sap.ino.xs.rest.admin.application::execute")) &&
							Configuration.getSystemSetting("sap.ino.config.REWARD_ACTIVE") === "1") ||
						// user has general backoffice privileges and variant has manage flag
						(bIsManage && Configuration.hasCurrentUserPrivilege("sap.ino.ui::backoffice.access"));
					//Gamification enable the will display the list
					if (aVariants[i].ACTION === mVariant.REWARD_GAMIFICATION) {
						bVisible = bVisible && !!this.getView().getModel("config").getProperty("/ENABLE_GAMIFICATION");
					}

					this.getModel("list").setProperty("/Variants/Values/" + i + "/VISIBLE", bVisible);
				}
			},

			onObjectListUpdateFinished: function(event) {
				var parameters = event && event.getParameters();

				if (parameters && parameters.total > 0) {
					this.setViewProperty("/List/SELECT_ALL_ENABLE", true);
				} else {
					this.setViewProperty("/List/SELECT_ALL_ENABLE", false);
				}

				BaseController.prototype.onObjectListUpdateFinished.apply(this, arguments);
			},
			onPressCurrentValue: function(oEvent) {
				var oSource = oEvent.getSource();
				var sPath = oSource.getBindingInfo("text").binding.getContext().sPath;
				var oDataModel = this.getModel("data");
				var iDimensionId, iIdentityId, sUserName;
				if (sPath) {
					iDimensionId = oDataModel.getProperty(sPath + "/DIMENSION_ID");
					iIdentityId = oDataModel.getProperty(sPath + "/IDENTITY_ID");
					sUserName = oDataModel.getProperty(sPath + "/USER_NAME");
				}
				var oGamificationDialog = this.getGamificationDetailDialog();
				//var aFilter = new Filter([new Filter("DIMENSION_ID", FilterOperator.EQ, iDimensionId),new Filter("IDENTITY_ID", FilterOperator.EQ, iIdentityId)], true);
				var sDetailOdataPath = "data>/SearchGamificationReportDetailParams(dimensionId=" + iDimensionId + "," + "identityId=" + iIdentityId +
					"," + "searchLanguage='" + Configuration.getCurrentUser().LOCALE + "'" + ")/Results";
				var oDetailSorder = new sap.ui.model.Sorter("CREATED_AT", true);
				this.byId('gamificationReportTableDetail').bindAggregation("rows", {
					path: sDetailOdataPath,
					sorter: oDetailSorder
				});
				oGamificationDialog.setTitle(this.getText("IDEA_LIST_REWARD_LIST_GAMIFICATION_REPORT_DETAIL_VIEW", sUserName));
				this.setViewProperty("/List/GAMIFICATION_DETAIL_OPEN", true);
				oGamificationDialog.open();
			},
			onPressGamificationDetailClose: function(oEvent) {
				var oGamificationDialog = this.getGamificationDetailDialog();
				this.setViewProperty("/List/GAMIFICATION_DETAIL_OPEN", false);
				oGamificationDialog.close();
			},
			getGamificationDetailDialog: function() {
				if (!this._oGamifcationDialog) {
					this._oGamifcationDialog = this.createFragment("sap.ino.vc.reward.fragments.RewardGamificationReportDetail", this.getView().getId());
					this.getView().addDependent(this._oGamifcationDialog);
				}
				return this._oGamifcationDialog;
			},
			onGamiTableSelectionChange: function(oEvent) {
				var oTable = this.getList();
				var oExportBtn = this.byId("sapInoMassExportBtn");
				var aSelectRows = oTable.getSelectedIndices();
				if (aSelectRows.length) {
					oExportBtn.setEnabled(true);
				} else {
					oExportBtn.setEnabled(false);
				}
			},
			onGamiTableDetailSelectionChange: function(oEvent) {
				var oTable = this.byId("gamificationReportTableDetail");
				var oExportBtn = this.byId("exportDetailBtn");
				var aSelectRows = oTable.getSelectedIndices();
				if (aSelectRows.length) {
					oExportBtn.setEnabled(true);
				} else {
					oExportBtn.setEnabled(false);
				}

			},
			onOpenSubmitter: function(oEvent) {
				var oSource = oEvent.getSource();
				var iIdentityId = oSource.getBindingContext("data").getProperty(oSource.getBindingContext("data").sPath + "/EMPLOYEE_ID");
				this.openIdentityQuickView(oSource, iIdentityId);
			}			
		}));

	oList.list = mList;
	oList.routes = mRoutes;

	return oList;
});
}; // end of sap/ino/vc/reward/List.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.search.Global.controller') ) {

sap.ui.getCore().loadLibrary("sap.ino.wall");

jQuery.sap.declare('sap.ino.vc.search.Global.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.ViewType'); // unlisted dependency retained
jQuery.sap.require('sap.ino.wall.Wall'); // unlisted dependency retained
jQuery.sap.require('sap.ino.vc.wall.util.WallFactory'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.type.DateTime'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/search/Global.controller",[
    "sap/ino/vc/commons/BaseVariantListController",
    "sap/ui/Device",
    "sap/ui/model/json/JSONModel",
    "sap/ino/vc/commons/TopLevelPageFacet",
    "sap/ui/core/mvc/ViewType",
    "sap/ino/controls/OrientationType",
    "sap/ino/vc/idea/mixins/VoteMixin",
    "sap/ino/vc/commons/mixins/FollowMixin",
    "sap/ino/vc/commons/mixins/TagCardMixin",
    "sap/ino/vc/campaign/mixins/RegistrationMixin",
    "sap/ino/commons/formatters/ObjectListFormatter",
    "sap/ino/vc/commons/mixins/GlobalSearchMixin",
    "sap/ino/wall/Wall",
    "sap/ino/vc/wall/util/WallFactory",
    "sap/ino/commons/application/Configuration", 
    "sap/ino/vc/blog/mixins/BlogCardMixin",
    "sap/ui/model/type/DateTime",
    "sap/m/MessageToast",
    "sap/ino/vc/idea/mixins/VolunteerMixin"
], function(BaseController, Device, JSONModel, TopLevelPageFacet, ViewType, OrientationType, VoteMixin, FollowMixin, TagCardMixin, RegistrationMixin, ObjectListFormatter, GlobalSearchMixin, Wall, WallFactory, Configuration, BlogCardMixin, DateTime, MessageToast, VolunteerMixin){
	"use strict";

	return BaseController.extend("sap.ino.vc.search.Global", jQuery.extend({}, TopLevelPageFacet, VoteMixin, FollowMixin, TagCardMixin, RegistrationMixin, GlobalSearchMixin, BlogCardMixin, VolunteerMixin, {
		/* Controller reacts when these routes match */
		routes: ["search", "searchcategory"],
        
		formatter: $.extend({
		    variantTitle: function() {
		         return "Search";
		    }}, ObjectListFormatter, BaseController.prototype.formatter),

        onInit: function() {
            BaseController.prototype.onInit.apply(this, arguments);
        },

		onBeforeHide: function(oEvent) {
		    
		},
		
		onBeforeRendering: function(){
            
		},
		isGlobalSearch: function(){
		  return true;  
		},
		onRouteMatched: function(oEvent, oObject) {
			
			var params = oEvent.getParameters();
			var searchArguments = params.arguments;
			var query = searchArguments['?query'];
            var view = this.getView();
            
            this.setViewProperty("/SEARCH_QUERY",query);
            
			this.setHelp("GLOBAL_SEARCH");
			
			if(!view.getBusy()){
			    view.setBusy(true);
			}
			this.getSearchResult(query);
		},

        getSearchResult: function(data){
            var self = this;
            var view = this.getView();
            var params = {
                keyword: data.search && window.decodeURIComponent(data.search) || '',
                id: data.id || '',
                type: data.type || '',
                managed: data.managed
            };
            var searhService = $.get('xs/rest/common/search.xsjs', params);
            view.setBusy(true);
            searhService.done(function(result){
                // Done
                self.setModel(new JSONModel(result), 'data');
                self.bindSearchResult(result);
                view.setBusy(false);
            });
            
            searhService.fail(function(err){
                // Fail
                if(err){
                    MessageToast.show(err);
                }
                view.setBusy(false);
            });
            
            searhService.error(function(err){
                // Error
                if(err){
                    MessageToast.show(err);
                }
                view.setBusy(false);
            });
        },

        bindSearchResult: function(result){
            var self = this;
            var campaignList = this.getCampaignList(); 
            var ideaList = this.getIdeaList();
            var tagList = this.getTagList();
            var userList = this.getUserList();
            var wallList = this.getWallList();
            var blogList = this.getBlogList();
            
            if(result.Campaigns && campaignList){
               campaignList.bindItems({
					path: 'data>/Campaigns/data',
					template: self.getFragment("sap.ino.vc.campaign.fragments.CardListItem")
				});
            }
            if(result.Ideas && ideaList){
                var disableImage = Configuration.getSystemSetting("sap.ino.config.DISABLE_IDEA_IMAGE") * 1;
                var template = disableImage ? this.getFragment("sap.ino.vc.idea.fragments.CardListItemNoImage") : this.getFragment("sap.ino.vc.idea.fragments.CardListItem");
                ideaList.bindItems({
					path: 'data>/Ideas/data',
					template: template
				});
            }
            if(result.Tags && tagList){
                tagList.bindItems({
                    path: 'data>/Tags/data',
                    template: self.getFragment('sap.ino.vc.tag.fragments.CardListItem')
                });
            }
            
            if(result.Users && userList){
                userList.bindItems({
                    path: 'data>/Users/data',
                    template: self.getFragment('sap.ino.vc.iam.fragments.IdentityListItem')
                });
            }
            
            if(result.Walls && wallList){
                wallList.bindItems({
                    path: 'data>/Walls/data',
                    template: self.getFragment('sap.ino.vc.wall.fragments.WallListItem')
                }).addStyleClass("sapInoWallListPreviewItems");
                self.bindWallList(wallList, result.Walls.data);
                
                var binding = this.getWallList().getBinding("items");
                
                if (binding) {
                    binding.attachDataReceived(this.bindWallList, this);
                }
            }
            
            if(result.Blogs && blogList){
                blogList.bindItems({
                    path: 'data>/Blogs/data',
                    template: self.getFragment('sap.ino.vc.search.fragments.BlogListItem')
                }).addStyleClass('sapInoBlogList');
            }
        },

        bindWallList: function(list, data){
            var listItems = list.getItems();
            var data = data;
            var wallIds = [];
            var self = this;
            self._oPreview2Wall = self._oPreview2Wall || {};
            for(var i = 0; i < listItems.length; i++){
                var wallPreview = listItems[i].getAggregation("content")[1];
                var iId = wallPreview.getBindingContext("data").getProperty("ID");
                var wallData = data.filter(function(item) {
                    return item.ID === iId;
                });
                
                if (!wallPreview.getWallControl()) {
                    if (wallData && wallData.length > 0) {
                        wallIds.push(iId);
                        
                        var wall = WallFactory.createWallFromInoJSON(wallData[0]);
                        if (wallData[0].BACKGROUND_IMAGE_ATTACHMENT_ID) {
                            wall.setBackgroundImage(Configuration.getAttachmentDownloadURL(wallData[0].BACKGROUND_IMAGE_ATTACHMENT_ID));
                        }
                        self._oPreview2Wall[iId] = wall;
                        wallPreview.setWall(wall);
                        wallPreview.invalidate();
                    }
                } else if (!wallPreview.getWallControl().getItems().length) {
                    if (wallData && wallData.length > 0) {
                        wallIds.push(iId);
                    }
                }
            }
        },

        getCampaignList: function(){
            return this.getView().byId('objectCampaignList');
        },
        
        getIdeaList: function(){
            return this.getView().byId('objectIdeaList');
        },

        getTagList: function(){
            return this.getView().byId('objectTagList');  
        },

        getUserList: function(){
            return this.getView().byId('objectUserList');  
        },

        getWallList: function(){
            return this.getView().byId('objectWallList');
        },
        
        getBlogList: function(){
            return this.getView().byId('objectBlogList');
        },

		getListController: function() {
			return this._oListController;
		},

		setListController: function(oController) {
			this._oListController = oController;
		},

		getListView: function() {
			return this._oListView;
		},

		setListView: function(oView) {
			this._oListView = oView;
		},

		displayListView: function(bShow) {
			var oView = this.getListView();
			if (bShow) {
				oView.removeStyleClass("sapInoMobileObjectListNotVisible");
			} else {
				if (!oView.hasStyleClass("sapInoMobileObjectListNotVisible")) {
					oView.addStyleClass("sapInoMobileObjectListNotVisible");
				}
			}
		},

		/**
		 * Function to enable/disable list binding.
		 *
		 * Used during the filter dialog is opened (phone/table only).
		 *
		 * @public
		 * @function
		 */
		enableListBinding: function(bEnable) {
			if (bEnable) {
				this.getListController().bindList = this.getListController().bindListCore;
			} else {
				this.getListController().bindList = function() {};
			}
		},

		onVariantBasePress: function() {
			var oListController = this.getListController();
			oListController.onVariantBasePress.apply(oListController, arguments);
		},

		onTagSelected: function() {
			var oListController = this.getListController();
			oListController.onTagSelected.apply(oListController, arguments);
		},

		onTagDeselected: function() {
			var oListController = this.getListController();
			oListController.onTagDeselected.apply(oListController, arguments);
		},

		onTagItemDeselectPress: function() {
			var oListController = this.getListController();
			oListController.onTagItemDeselectPress.apply(oListController, arguments);
		},
		getList: function() {
			return this.getListController() && this.getListController().getList();
		},

		getPath: function() {
			return this.getListController() && this.getListController()._sPath;
		},

		getItemTemplate: function() {
			return this.getListController() && this.getListController().getItemTemplate();
		},

		// fix the issue that global filter bar can not close
		getListLayout: function() {
			return this.byId("searchresults");
		},
        
        showMoreLink: function(result){
            return !!(result && result.data && result.counts > result.data.length);
        },
        
        onItemPress: function(event){
            var source = event.getSource();
            var contextData = source.getBindingContext('data');
            var params = event.getParameters();
            if(params.campaignId){
                this.navigateTo('campaign', {id: params.campaignId});
            }
            
            if(contextData.getProperty('WALL_TYPE_CODE')){
                this.navigateToWall("wall", {
    	            id: contextData.getProperty('ID')
    	        });
            }
        },

        onOpenCampaign: function(oEvent) {
			this.navigateTo("campaign", {
				id: oEvent.getParameter("campaignId")
			});
		},

        onOpenIdea: function(event){
           var item = event.getSource();
			var context = item.getBindingContext("data");
			if (context) {
				this.navigateTo("idea-display", {
					id: context.getProperty("ID")
				});
			}
        },

        onBlogItemPress: function(event) {
			var Item = event.getSource();
			var context = Item.getBindingContext("data");
			if (context) {
				this.navigateTo("blog-display", {
					id: context.getProperty("ID")
				});
			}
		},

	    navigateToMore: function(category, extendsParams){
	        var searchModel = this.getModel('search');
	        var data = searchModel.getData();
	        var searchAguments = data.searchAguments;
	        var searchKey = searchAguments['?query'] && searchAguments['?query'].search;
	        var searchParams = {
                category: category,
                search: searchKey,
                param: $.extend(searchAguments, extendsParams || {})
            };
		if (searchParams.category && searchParams.param && searchParams.category === 'idealist') {
			searchParams.param['?query'] = searchParams.param['?query'] || {};
			searchParams.param['?query'].sort = "SEARCH_SCORE DESC";
		}            
	        this._handleSearchNavgate(searchKey, searchParams);
	    },
	    goCampaigns: function(){
	        this.navigateToMore('campaignlist');
	    },
	    goIdeas: function(){
	        var extensData = {};
	        var category = 'idealist';
	        var searchModel = this.getModel('search');
	        var data = searchModel.getData();
	        var searchAguments = data.searchAguments;
	        var query = searchAguments && searchAguments['?query'];
	        var type = query && query.type;
	        if(type === 'campaign'){
	            extensData.id = query.id;
	            category = 'campaign-idealist';
	        }
	        this.navigateToMore(category, extensData);
	    },
	    goTags: function(){
	        this.navigateToMore('taglist');
	    },
	    goUsers: function(){
	        this.navigateToMore('peoplelist');
	    },
	    goWalls: function(){
	        this.navigateToMore('walllist');
	    },
	    goBlogs: function(){
	        var searchModel = this.getModel('search');
	        var data = searchModel.getData();
	        var campaignid = data.searchAguments && data.searchAguments['?query'] && data.searchAguments['?query'].id;
	        if(!campaignid){
	            return false;
	        }
	        this.navigateToMore('campaign-bloglist', {id: campaignid});
	    },
	    
	    isShown: function(data) {
	        return !!data && !!data.data;
	    },
	    
	    transToDate: function(str){
	        var date = new Date(str);
	        return date.toDateString();
	    },
	    
	    showResultCount: function(text, num, result){
	        var bNumberPlus = !!(result && result.data && result.counts > result.data.length);
	        var title = text;
	        var count = num || 0;
	        if(bNumberPlus){
	        return title + '  (' + ( count - 1 ) + '+)';
	        } 
	        else{
	           return title + '  (' + count + ')'; 
	        }
	    }
	}));
});
}; // end of sap/ino/vc/search/Global.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.shell.InoShell.controller') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
// required to set the correct library paths before using the libraries
jQuery.sap.require('sap.ino.apps.ino.Component'); // unlisted dependency retained


jQuery.sap.declare('sap.ino.vc.shell.InoShell.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.ComponentContainer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.routing.History'); // unlisted dependency retained
jQuery.sap.require('sap.ui.unified.Menu'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.ViewType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Item'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.CustomData'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.m.GroupHeaderListItem'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.NumberFormat'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/shell/InoShell.controller",[
   "sap/ino/vc/commons/BaseController",
   "sap/ui/core/ComponentContainer",
   "sap/ui/core/routing/History",
   "sap/ui/unified/Menu",
   "sap/ui/core/MessageType",
   "sap/ui/Device",
   "sap/ino/commons/application/Configuration",
   "sap/ui/model/json/JSONModel",
   "sap/ui/core/mvc/ViewType",
   "sap/ui/core/Item",
   "sap/ui/core/CustomData",
   "sap/m/MessageBox",
   "sap/m/MessageToast",
   "sap/m/GroupHeaderListItem",
   "sap/ino/commons/formatters/ObjectListFormatter",
   "sap/ui/core/format/NumberFormat",
   "sap/ino/commons/models/core/ClipboardModel",
   "sap/ino/commons/formatters/BaseFormatter",
   "sap/ino/commons/models/core/CodeModel",
   "sap/ino/vc/commons/mixins/UserGroupMixin",
   "sap/ino/commons/models/object/PersonalizeSetting",
   "sap/ino/vc/commons/mixins/GlobalSearchMixin"
], function(
	Controller,
	ComponentContainer,
	History,
	Menu,
	MessageType,
	Device,
	Configuration,
	JSONModel,
	ViewType,
	Item,
	CustomData,
	MessageBox,
	MessageToast,
	GroupHeaderListItem,
	ObjectListFormatter,
	NumberFormat,
	Clipboard,
	BaseFormatter,
	CodeModel,
	UserGroupMixin,
	PersonalizeSetting,
	GlobalSearchMixin
) {
	"use strict";

	var iNotificationTimeout = 30000;

	var UserSettings = {
		Theme: {
			HCB: "sap_hcb"
		},
		Mail: {
			Active: "active",
			Inactive: "inactive"
		}
	};

	return Controller.extend("sap.ino.vc.shell.InoShell", jQuery.extend({}, UserGroupMixin, GlobalSearchMixin, {
		formatter: jQuery.extend({
			helpMenuButton: function(oSystem) {
				return oSystem.phone;
			},

			fullScreenToggle: function(oSystem) {
				// fullscreen toggling is deprecated for HTTP connections => HTTPS must be used
				return !oSystem.desktop && window.location.protocol === "https:";
			},

			displayTermsConditions: function() {
				return Configuration.isComponentActive("sap.ino.config.DISPLAY_TERMS_CONDITIONS");
			},

			termsConditions: function(sCode) {
				if (sCode === null || sCode === undefined) {
					return undefined;
				}
				var oModel = this.getView().getModel("module");
				return oModel.getProperty(sCode);
			},

			version: function() {
				return this._i18n.getResourceBundle().getText("ABOUT_VERSION_FLD", [this._oComponent.getVersion(), this._oComponent.getVersionTimestamp()]);
			},

			text: function(sText) {
				return this._i18n.getResourceBundle().getText(sText);
			},

			icon: function(sIconURL) {
				if (jQuery.isNumeric(sIconURL)) {
					sIconURL = Configuration.getAttachmentTitleImageDownloadURL(sIconURL);
				} else if (sIconURL) {
					sIconURL = "/" + sIconURL;
				} else {
					sIconURL = "sap-icon://error";
				}
				return sIconURL;
			},

			groupHeader: function(oGroup) {
				return new GroupHeaderListItem({
					title: this._i18n.getResourceBundle().getText("MENU_TIT_" + oGroup.key)
				});
			},

			visibleWithSearch: function(bSearchVisible, bPhone, bLimitedSpace) {
				return (bPhone !== undefined && !bPhone) || !bSearchVisible || (bLimitedSpace !== undefined && !bLimitedSpace);
			},

			visibleAppTitle: function(bPhone, bTitle) {
				if (bTitle.length === 0 || bTitle.match(/^\s+$/g)) {
					var emptyTitle = true;
				}
				return (bPhone !== undefined && !bPhone) && (emptyTitle === undefined || !emptyTitle);
			},

			generateMailURL: function(sMailAddress) {
				return sap.m.URLHelper.normalizeEmail(sMailAddress);
			},

			notificationTooltip: function(nCount) {
				if (nCount) {
					var oNumberFormat = NumberFormat.getIntegerInstance({
						style: "short"
					});

					var iNum = oNumberFormat.format(nCount);
					if (iNum === 0) {
						return this._i18n.getResourceBundle().getText("SHELL_EXP_NOTIFICATION_EMPTY");
					} else if (iNum === 1) {
						return this._i18n.getResourceBundle().getText("SHELL_EXP_NOTIFICATION_SINGLE");
					} else {
						return this._i18n.getResourceBundle().getText("SHELL_EXP_NOTIFICATION_COUNT", [oNumberFormat.format(nCount)]);
					}
				}

				return this._i18n.getResourceBundle().getText("SHELL_EXP_NOTIFICATION_EMPTY");
			},
			notificationCountFormatter: function(nCount) {
				if (nCount && nCount > 999) {
					return 999;
				}

				return nCount;
			},

			notificationText: function(sText) {
				// the notification item does a rudimentary check for embedded bindings that can fail for texts using brackets => remove the brackets
				return sText.split("{").join("").split("}").join("");
			},

			clipboardObjectName: function(sCode) {
				return sCode ? this._i18n.getResourceBundle().getText("CLIPBOARD_OBJECT_NAME_" + sCode) : "";
			},

			navigationItemSelected: function(sRoute, sNavigationTarget) {
				if (!sRoute || !sNavigationTarget) {
					return false;
				}
				if (sRoute === sNavigationTarget ||
					sRoute === sNavigationTarget + "variant" ||
					sRoute + "list" === sNavigationTarget) {
					return true;
				}
				//prevent double selections
				var aNavigationTargets = jQuery.grep(this.menu.Navigation, function(target) {
					return sRoute === target.TO ||
						sRoute === target.TO + "variant" ||
						sRoute + "list" === target.TO;
				});
				if (aNavigationTargets.length === 0 && sRoute.indexOf("-") > -1) {
					var aRoute = sRoute.split("-");
					if (aRoute[1] === sNavigationTarget ||
						aRoute[1] === sNavigationTarget + "variant") {
						return true;
					}
					var aSubNavigationTargets = jQuery.grep(this.menu.Navigation, function(target) {
						return aRoute[1] === target.TO ||
							aRoute[1] === target.TO + "variant";
					});
					if (aSubNavigationTargets.length === 0 &&
						sRoute.split("-")[0] + 'list' === sNavigationTarget) {
						return true;
					}
				}
				return false;
			},

			navigationItemVisible: function(bBackOfficeAccess, bFrontOfficeEnabled, bMobileEnabled, bPhone, sNavigationTarget) {
				var bVisible = (!bPhone || (bPhone && bMobileEnabled)) && (bFrontOfficeEnabled || (!bFrontOfficeEnabled && bBackOfficeAccess));
				if (sNavigationTarget === "evalreqlist") {
					return bVisible && Configuration.getSystemSetting("sap.ino.config.EVAL_REQ_ACTIVE") === "1";
				}
				if (sNavigationTarget === "rewardlist") {
					return bVisible && (this.getModel("user").getProperty("/privileges/sap.ino.ui::campaign_manager") || this.getModel("user").getProperty(
							"/privileges/sap.ino.xs.rest.admin.application::execute")) && Configuration.getSystemSetting("sap.ino.config.REWARD_ACTIVE") ===
						"1";
				}
				if (sNavigationTarget === "expertfinder") {
					return bVisible && (this.getView().getModel("config").oData["sap.ino.config.EXPERT_FINDER_ACTIVE"] === "1");
				}
				if (sNavigationTarget === "peoplelist") {
					return bVisible && (this.getView().getModel("config").oData["sap.ino.config.PEOPLE_MENU_FOR_ALL_ACTIVE"] === "1");
				}
				if (sNavigationTarget === "leaderboard") {
					return bVisible && !!this.getView().getModel("config").oData.ENABLE_GAMIFICATION && !!this.getView().getModel("config").oData.ENABLE_LEADERBOARD;
				}
				return bVisible;
			},

			historyEnable: function(iCount) {
				return Number(iCount) >= 1;
			},

			historyTooltip: function(aHistory, iCount) {
				if (aHistory.length) {
					return this.getText("PAGE_TIT_" + (!aHistory[0].title ? "HOME" : aHistory[0].title.toUpperCase()));
				} else {
					return "";
				}
			},

			historyMenu: function(sText) {
				return this.getText("PAGE_TIT_" + (!sText ? "HOME" : sText.toUpperCase()));
			},

			historyMenuDetail: function(sText, sHash) {
				var aDetailHashList = this.getOwnerComponent().getModel("historyDetail").getProperty("/HashList");
				var detailTitle = null;
				aDetailHashList.forEach(function(item, index) {
					if (sHash === item.hash) {
						detailTitle = item.detailTitle;
					}
				});
				return detailTitle ? detailTitle : this.getText("PAGE_TIT_" + (!sText ? "HOME" : sText.toUpperCase()));
			},

			formatChangeLogValue: function(sStr, sInt, sDate) {
				if (sDate) {
					return BaseFormatter.toDate(sDate);
				} else if (sInt) {
					return sInt;
				} else if (sStr) {
					return sStr;
				} else {
					return "";
				}
			},

			formatIdentityCode: function(sCode) {
				return CodeModel.getFormatter("sap.ino.xs.object.iam.IdentityLogSetting.Root")(sCode);
			}

		}, Controller.prototype.formatter),

		objectListFormatter: ObjectListFormatter, // used in TemplatePickerDialog

		menu: {
			"Navigation": [{
					"ICON": "sap-icon://InoIcons/idea-add",
					"TITLE": "MENU_MIT_CREATE_IDEA",
					"TO": "idea-create",
					"GROUP": "ACTION",
					"FRONTOFFICE_ENABLED": true,
					"MOBILE_ENABLED": true
                }, {
					"ICON": "sap-icon://home",
					"TITLE": "MENU_MIT_HOME",
					"TO": "home",
					"GROUP": "NAVIGATION",
					"FRONTOFFICE_ENABLED": true,
					"MOBILE_ENABLED": true
                }, {
					"ICON": "sap-icon://InoIcons/campaign",
					"TITLE": "MENU_MIT_CAMPAIGNS",
					"TO": "campaignlist",
					"GROUP": "NAVIGATION",
					"FRONTOFFICE_ENABLED": true,
					"MOBILE_ENABLED": true
                }, {
					"ICON": "sap-icon://lightbulb",
					"TITLE": "MENU_MIT_IDEAS",
					"TO": "idealist",
					"GROUP": "NAVIGATION",
					"FRONTOFFICE_ENABLED": true,
					"MOBILE_ENABLED": true
                }, {
					"ICON": "sap-icon://person-placeholder",
					"TITLE": "MENU_MIT_IDENTITIES",
					"TO": "peoplelist",
					"GROUP": "NAVIGATION",
					"FRONTOFFICE_ENABLED": true,
					"MOBILE_ENABLED": true
                }, {
					"ICON": "sap-icon://InoIcons/wall",
					"TITLE": "MENU_MIT_WALLS",
					"TO": "walllist",
					"GROUP": "NAVIGATION",
					"FRONTOFFICE_ENABLED": true,
					"MOBILE_ENABLED": true
                }, {
					"ICON": "sap-icon://tags",
					"TITLE": "MENU_MIT_TAGS",
					"TO": "taglist",
					"GROUP": "NAVIGATION",
					"FRONTOFFICE_ENABLED": true,
					"MOBILE_ENABLED": true
                }, {
					"ICON": "sap-icon://feed",
					"TITLE": "MENU_MIT_FEEDS",
					"TO": "feedlist",
					"GROUP": "NAVIGATION",
					"FRONTOFFICE_ENABLED": true,
					"MOBILE_ENABLED": true
                }, {
					"ICON": "sap-icon://employee-lookup",
					"TITLE": "MENU_MIT_EXPERT_FINDER",
					"TO": "expertfinder",
					"GROUP": "NAVIGATION",
					"FRONTOFFICE_ENABLED": false,
					"MOBILE_ENABLED": false
                }, {
					"ICON": "sap-icon://bar-chart",
					"TITLE": "MENU_MIT_REPORTS",
					"TO": "reportlist",
					"GROUP": "NAVIGATION",
					"FRONTOFFICE_ENABLED": false,
					"MOBILE_ENABLED": false
                }, {
					"ICON": "sap-icon://clinical-tast-tracker",
					"TITLE": "MENU_MIT_EVALUATION_REQUEST",
					"TO": "evalreqlist",
					"GROUP": "NAVIGATION",
					"FRONTOFFICE_ENABLED": true,
					"MOBILE_ENABLED": false
                }, {
					"ICON": "sap-icon://competitor",
					"TITLE": "MENU_MIT_REWARDS_MANAGEMENT",
					"TO": "rewardlist",
					"GROUP": "NAVIGATION",
					"FRONTOFFICE_ENABLED": false,
					"MOBILE_ENABLED": false
                }, {
					"ICON": "sap-icon://InoIcons/leaderboard_fire",
					"TITLE": "MENU_MIT_GAMEFICATION_LEADERBOARD",
					"TO": "leaderboard",
					"GROUP": "NAVIGATION",
					"FRONTOFFICE_ENABLED": true,
					"MOBILE_ENABLED": false
                }
                /**{
					"ICON": "sap-icon://activity-individual",
					"TITLE": "MENU_MIT_NOTICE_UPDATE",
					"TO": "noticelist",
					"GROUP": "NAVIGATION",
					"FRONTOFFICE_ENABLED": true,
					"MOBILE_ENABLED": false
                }**/
            ]
		},
		view: {
			"Picker": {
				"VARIANT": "templates"
			},
			"Search": {
				"LIMITED_SPACE": Device.orientation.portrait
			}
		},

		list: {
			"Variants": {
				"Values": [{
					"TEXT": "WALL_LIST_MIT_MY_TEMPLATES",
					"ACTION": "templates",
					"FILTER": "myWallTemplates"
                }, {
					"TEXT": "WALL_LIST_MIT_SHARED_TEMPLATES",
					"ACTION": "sharedtemplates",
					"FILTER": "sharedWallTemplates"
                }]
			}
		},

		requestQueue: [],

		onInit: function() {
			Controller.prototype.onInit.apply(this, arguments);
			var oController = this;
			var oUI5Configuration = sap.ui.getCore().getConfiguration();

			// register for change event @ invalidation manager
			//this._initApplicationObjectChangeListeners();

			var oUser = Configuration.getCurrentUser();
			if (oUser) {
				oUI5Configuration.setLanguage(oUser.LOCALE);
			}
			if (!oUser) {
				return;
			}

			// Register styles
			jQuery.each(Configuration.getStylePaths() || [], function(iIndex, sStylePath) {
				jQuery.sap.includeStyleSheet(sStylePath);
			});

			// Register component
			var sComponentName = Configuration.getComponentName();
			if (("sap.ino.ngui." + sComponentName) != gSAPInoAppName) {
				jQuery.sap.registerModulePath(sComponentName, "/" + sComponentName.replace(/\./g, "/"));
			}
			var oComponent = new ComponentContainer({
				id: this.createId("componentcontainer"),
				name: sComponentName,
				height: "100%",
				width: "100%"
			});
			var oToolPage = this.byId("toolPage");
			oToolPage.addAggregation("mainContents", oComponent);

			// var sBootstrapErrorMsg;
			//  if (!oUser) {
			//         sBootstrapErrorMsg = "GENERAL_APPLICATION_TIT_ERROR_NO_USER";
			//          this.byId("componentcontainer").getComponentInstance().navigateTo("welcomepage",sBootstrapErrorMsg);
			//       }
			// TODO: monkey patch update messagebox resource bundle => https://support.wdf.sap.corp/sap/support/message/1670267929
			MessageBox._rb = sap.ui.getCore().getLibraryResourceBundle("sap.m");

			// set user specific theme
			// 			var sUserTheme = Configuration.getTheme();
			// 			var sCurrentTheme = oUI5Configuration.getTheme();
			// 			if (sUserTheme && sCurrentTheme !== sUserTheme) {
			// 				sap.ui.getCore().applyTheme(sUserTheme);
			// 			}

			// set view model
			this.setViewData(this.view);

			if (oUser) {
				// read user model
				var oUserModel = new JSONModel({
					"USER_ID": oUser.USER_ID,
					"NAME": oUser.NAME,
					"IMAGE_ID": oUser.IDENTITY_IMAGE_ID
				});

				oUserModel.setDefaultBindingMode("TwoWay");
				this.getView().setModel(oUserModel, "userData");
			}

			//attach sideExpanded event in mobile and tablet
			if (!Device.system.desktop && (Device.system.phone || Device.system.tablet)) {
				oToolPage.mAggregations.mainContents[0].attachBrowserEvent("click", function() {
					if (oToolPage.getSideExpanded() && !Clipboard.sharedInstance().clipboardVisible) {
						oToolPage.setSideExpanded(false);
					}
				});
			}

			Device.orientation.attachHandler(this._onOrientationChange, this);

			var that = this;
			Clipboard.sharedInstance().attachEvent("objectAdded", function() {
				that.toggleClipboard(true);
			});

			this.getPersonalizeSetting();

		},

		updateModel: function() {
			var a = 1;
		},

		onExit: function() {
			Device.orientation.detachHandler(this._onOrientationChange, this);
		},

		onBeforeRendering: function() {
			var that = this;
			// Check open group for community user .
			var openGroup = Configuration.getSystemSetting('sap.ino.config.OPEN_GROUP_FOR_COMMUNITY_USER') * 1;
			that.setModel(new JSONModel(openGroup), 'identityData>/open_group');
			if (openGroup) {
				if (!this.requestQueue.length) {
					this.requestQueue.push(this.getMemberGroups());
					this.requestQueue[0].done(function(data) {
						that.setModel(new JSONModel(data), 'identityData>/groups');
						if (!data || !data.length) {
							that.openUserGroupDialog();
						}
					});
				}
			}
		},

		onAfterRendering: function() {

			var sUserTheme = Configuration.getTheme();
			var sCurrentTheme = sap.ui.getCore().getConfiguration().getTheme();
			if (sUserTheme && sCurrentTheme !== sUserTheme) {
				sap.ui.getCore().applyTheme(sUserTheme);
			}

			var oUser = Configuration.getCurrentUser();
			var bSetupCompleted = Configuration.setupCompleted();
			if (!oUser || !bSetupCompleted) {
				var oBootStrapErrorView = sap.ui.view({
					viewName: "sap.ino.vc.commons.BootStrapError",
					type: sap.ui.core.mvc.ViewType.XML
				});
				oBootStrapErrorView.placeAt("content", "only");
				return;
			}
			var oView = this.getView();
			var oContainer = this.byId("componentcontainer");

			this._oShell = this.byId("mainShell");

			// remember the component of the underlying app
			this._oComponent = oContainer.getComponentInstance();

			// set the language of the page
			var oTextModel = this._oComponent.getModel("i18n");
			this.updatePageLanguage(oTextModel.getResourceBundle().sLocale);

			// remove scrollbars            
			var sStyle = "overflow-y: hidden;" + oContainer.$().attr("style");
			oContainer.$().attr("style", sStyle);

			// get the models from the component
			this._i18n = this._oComponent.getModel("i18n");
			oView.setModel(this._i18n, "i18n");

			var oDeviceModel = this._oComponent.getModel("device");
			oView.setModel(oDeviceModel, "device");

			var oUserModel = this._oComponent.getModel("user");
			oView.setModel(oUserModel, "user");

			var oNavigationModel = this._oComponent.getModel("navigation");
			oView.setModel(oNavigationModel, "navigation");

			var oSystemSettingsModel = this._oComponent.getModel("config");
			oView.setModel(oSystemSettingsModel, "config");

			var oModuleModel = this._oComponent.getModel("module");
			oView.setModel(oModuleModel, "module");

			var oCodeModel = this._oComponent.getModel("code");
			oView.setModel(oCodeModel, "code");

			var oDataModel = this._oComponent.getModel("data");
			oView.setModel(oDataModel, "data");

			var oNotificationModel = this._oComponent.getModel("notifications");
			oView.setModel(oNotificationModel, "notifications");

			var oSearchModel = this._oComponent.getModel("search");
			oView.setModel(oSearchModel, "search");

			var oClipboardModel = this._oComponent.getModel("clipboard");
			oView.setModel(oClipboardModel, "clipboard");

			// init navigation (we need the text model to do this)
			var oNavigationModel = new JSONModel(this.menu);
			this._oSideNavigation = this.byId("sideNavigation");
			this._oSideNavigation.setModel(oNavigationModel, "navigationList");

			var oHistoryModel = this._oComponent.getModel("history");
			oView.setModel(oHistoryModel, "history");

			// ATTENTION: we manipulate the DOM of the SplitContainer here, but
			// for accessibility reasons make sure the split areas are always placed in the DOM the way they are displayed
			jQuery(".sapInoInnoMgmtShell #main--split-canvas").before(jQuery(".sapInoInnoMgmtShell #main--split-pane"));

			// set initial focus to nav menu
			this.byId("openMenu").focus();

			this.setCategroyData();

			this.listenRouteMatch();
		},

		updatePageLanguage: function(sLocale) {
			var $Html = jQuery("html");
			if (sLocale && !$Html.attr("lang")) {
				sLocale = sLocale.replace("_", "-"); // attribute requires "-" not "_"
				$Html.attr("lang", sLocale);
			}
		},

		_onOrientationChange: function() {
			var oViewModel = this.getModel("view");
			oViewModel.setProperty("/Search/LIMITED_SPACE", Device.orientation.portrait);
		},

		onToggleFullScreen: function() {
			var doc = window.document;
			var docEl = doc.documentElement;

			var requestFullScreen = docEl.requestFullscreen || docEl.mozRequestFullScreen || docEl.webkitRequestFullScreen || docEl.msRequestFullscreen;
			var cancelFullScreen = doc.exitFullscreen || doc.mozCancelFullScreen || doc.webkitExitFullscreen || doc.msExitFullscreen;

			if (!doc.fullscreenElement && !doc.mozFullScreenElement && !doc.webkitFullscreenElement && !doc.msFullscreenElement) {
				requestFullScreen.call(docEl);
			} else {
				cancelFullScreen.call(doc);
			}
		},

		onShowNotification: function(oEvent) {
			if (!this._oNotificationPopover) {
				this._oNotificationPopover = this.createFragment("sap.ino.vc.shell.fragments.Notifications");
				this.getView().addDependent(this._oNotificationPopover);

			}

			//attach close action and replace close icon
			if (!this._oNotificationPopover.isOpen()) {
				this.getModel("notifications").updateNotifications();
				//   var nItems = sap.ui.getCore().byId("nlist").getItems();

				//     for( var i=0; i< nItems.length; i++){
				//       //nItems[i].attachClose(this.onRemoveNotification);
				//       // nItems[i]._closeButton.setIcon("sap-icon://sys-cancel");
				//     }
				this._oNotificationPopover.openBy(this.byId("notification"));

			} else {
				this.closeNotifications();
			}
		},

		closeNotifications: function() {
			if (this._oNotificationPopover && this._oNotificationPopover.isOpen()) {
				this._oNotificationPopover.close();
			}
		},

		onRemoveNotification: function(oEvent) {
			var oButton = oEvent.getSource();
			var oItem = oButton.getParent().getParent();
			var iNotificationId = oItem.data("notification_id");
			var oNotifications = this.getModel("notifications");
			oNotifications.markNotificationAsRead(iNotificationId).done(function() {
				oNotifications.updateNotifications();
			});
		},

		onRemoveAllNotifications: function(oEvent) {
			var oButton = oEvent.getSource();
			var iNotificationId = oButton.data("latest_notification_id");
			if (iNotificationId > 0) {
				var oNotifications = this.getModel("notifications");
				oNotifications.markNotificationsAsRead(iNotificationId);
			}
			this.closeNotifications();
		},

		onNotificationNavigate: function(oEvent) {
			var oItem = oEvent.getSource();
			var sType = oItem.data("object_type_code");
			var sId = oItem.data("object_id");
			var sCode = oItem.data("notification_code");

			if (Device.system.phone) {
				this._oNotificationPopover.close();
			}

			if (sCode === "IDEA_DELETED") {
				return null;
			}

			switch (sType) {
				case "IDEA":
					if (sCode === "COMMENT_CREATED" || sCode === "COMMENT_DELETED") {
						this.navigateTo("idea-display", {
							id: sId,
							query: {
								section: "sectionComments"
							}
						});
					} else if (sCode === "EXPERT_ASSIGNED" || sCode === "EXPERT_UNASSIGNED") {
						this.navigateTo("idea-display", {
							id: sId,
							query: {
								section: "sectionExperts"
							}
						});

					} else if (sCode === "STATUS_ACTION_sap.ino.config.EVAL_SUBMIT" || sCode === "STATUS_ACTION_sap.ino.config.EVAL_PUB_SUBMITTER" ||
						sCode === "STATUS_ACTION_sap.ino.config.EVAL_PUB_COMMUNITY") {
						this.navigateTo("idea-display", {
							id: sId,
							query: {
								section: "sectionEvaluations"
							}
						});

					} else {
						this.navigateTo("idea-display", {
							id: sId
						});
					}
					break;
				case "CAMPAIGN":

					this.navigateTo("campaign", {
						id: sId
					});
					break;
				case "REGISTRATION_REQUEST":
					if (sCode === 'CAMP_REGISTER_CREATED') {
						this.navigateTo("registerapprovallist");
					} else {
						this.navigateTo("campaign", {
							id: sId
						});
					}
					break;
				case "EVAL_REQUEST_ITEM":
					this.navigateTo("evaluationrequest-item", {
						id: sId
					});
					break;
				case "EVAL_REQUEST":
					this.navigateTo("evaluationrequest-display", {
						id: sId
					});
					break;
				default:
					break;

			}

			this.closeNotifications();
		},

		showMenu: function(bShow) {

			if (this._oSplitContainer) {
				if (Device.system.phone) {
					this.byId("openMenu").setSelected(bShow);
					this.byId("menutoolbar").setProperty("visible", false);
					this._oSplitContainer.setSecondaryContentSize("100%");
				} else {
					this._oSplitContainer.setSecondaryContentSize("250px");
				}
				this._oSplitContainer.setShowSecondaryContent(bShow);
			}
		},

		onShowMenu: function(oEvent) {
			if (Clipboard.sharedInstance().clipboardVisible) {
				this.toggleClipboard(false);
				if (!this._oToolPage) {
					this._oToolPage = this.byId("toolPage");
				}
				this._oToolPage.setSideExpanded(!this._oToolPage.getSideExpanded());
			} else {
				if (!this._oToolPage) {
					this._oToolPage = this.byId("toolPage");
				}

				this._oToolPage.setSideExpanded(!this._oToolPage.getSideExpanded());
				if (Device.system.phone) {
					this._oToolPage.getAggregation('sideContent').setExpanded(this._oToolPage.getSideExpanded());
				}
				oEvent.getSource().setTooltip(this._oToolPage.getSideExpanded() ? this._i18n.getResourceBundle().getText("SHELL_EXP_MENU_COLLAPSE") :
					this._i18n.getResourceBundle().getText("SHELL_EXP_MENU_EXPAND"));

				// this._oToolPage.getSideContent().getItem().setExpanded(true);
				// jQuery.each(this._oToolPage.getSideContent().getItem().getItems(), function(iIndex, oItem){
				//     oItem.rerender();
				// });
			}
		},

		onLogoIcon: function(oEvent) {
			this._oComponent.navigateTo("home");
		},

		onNavigate: function(oEvent) {
			var oItem = oEvent.getSource();
			var sNav = oItem.data("TO");

			if (sNav && sNav !== "") {
				var sCurrentNav = this.getModel("navigation").getProperty("/Route");
				if (sCurrentNav !== sNav) {
					this.getModel("navigation").setProperty("/Route", sNav);

					var fnOnNav = oItem.getBindingContext("navigationList").getObject().ON_NAV;
					if (fnOnNav) {
						fnOnNav(this, oItem, sNav);
					} else {
						this._oComponent.navigateTo(sNav);
					}
				}
			} else {
				// Navigation failed, let component handle this
				this._oComponent.showMessage(MessageType.Error, this._i18n.getResourceBundle().getText("NAVIGATION_EXP_UNKNOWN_TARGET"));
			}

			if (Device.system.phone) {
				var oToolPage = this.byId("toolPage");
				oToolPage.setSideExpanded(false);
			}

			var bMenuOpen = !!oItem.getBindingContext("navigationList").getObject().KEEP_MENU_OPEN;
			this.showMenu(bMenuOpen);
		},

		onNavFooterPressed: function(oEvent) {
			var oItem = oEvent.getSource();

			switch (oItem.data("ITEM")) {
				case "HELP_CLIPBOARD":
					this.openHelpScreen("HELP_EXP_CLIPBOARD");
					break;
				case "HELP":
					this.openHelpScreen();
					break;
				case "CLIPBOARD":
					this.toggleClipboard(true);
					break;
				default:
					break;
			}
		},

		onLogout: function() {
			this._oComponent.logout();
		},

		onUserOpen: function(oEvent) {
			var that = this;
			var oButton = oEvent.getSource();

			// create action sheet only once
			if (!this._oUserActionSheet) {
				this._oUserActionSheet = sap.ui.xmlfragment("sap.ino.vc.shell.fragments.UserAction", this);
				this._oUserActionSheet.addStyleClass("sapInoMobileCancel");
				this._oUserActionSheet.attachAfterClose(function() {
					if (!that._getUserDataDialog().isOpen() && !that._getSettingsDialog().isOpen() &&
						!that._getTermsDialog().isOpen() && !that._getAboutDialog().isOpen()) {
						oButton.focus();
					}
				}, this);

				this.getView().addDependent(this._oUserActionSheet);
			}

			this._oUserActionSheet.openBy(oButton);
		},

		onBackBtnPress: function() {
			//this._oComponent.getRouter().onNavBack();
			var oHistoryModel = this.getModel("history");
			var aHashList = oHistoryModel.getProperty("/HashList");
			var oLastHash = aHashList[0];
			var oCurrentHash = oLastHash;
			var sUrl = location.href.split("#")[0] + "#/" + oLastHash.hash;
			aHashList.shift();
			oHistoryModel.setProperty("/CurrentHash", oCurrentHash);
			oHistoryModel.setProperty("/HashList", aHashList);
			oHistoryModel.setProperty("/Count", aHashList.length);
			this._oComponent.navigateToByURL(sUrl);
		},

		onBackMenuPress: function(oEvent) {
			var oSource = oEvent.getSource();
			var sHash = oSource.getBindingContext("history").getProperty("hash");
			var sUrl = location.href.split("#")[0] + "#/" + sHash;
			var oHistoryModel = this.getModel("history");
			var aHashList = oHistoryModel.getProperty("/HashList");
			var aIndex = oSource.getBindingContext("history").sPath.split("/");
			var iIndex = Number(aIndex[aIndex.length - 1]);
			var oCurrentHash = aHashList[iIndex];
			aHashList = aHashList.slice(iIndex + 1);
			oHistoryModel.setProperty("/CurrentHash", oCurrentHash);
			oHistoryModel.setProperty("/HashList", aHashList);
			oHistoryModel.setProperty("/Count", aHashList.length);
			this._oComponent.navigateToByURL(sUrl);
		},

		onBackMenuOpen: function(oEvent) {
			var oButtonBegin = oEvent.getSource();
			var oButtonEnd = $(oButtonBegin.getDomRef()).next("a");

			//in order to improve performance of history menu
			if (this.getOwnerComponent().getModel("historyDetail").getProperty("/HashList").length > 10000) {
				var aHistoryDetailModel = this.getOwnerComponent().getModel("historyDetail").getProperty("/HashList");
				var aUsedHistoricList = jQuery.extend([], this.getModel("history").getProperty("/HashList"));
				aUsedHistoricList.push(this.getModel("history").getProperty("/CurrentHash"));
				var aNewDetailLit = [];
				aHistoryDetailModel.forEach(function(item, index) {
					if (aUsedHistoricList.find(function(detailItem, index) {
						return detailItem.hash === item.hash;
					})) {
						aNewDetailLit.push(item);
					}
				});
				this.getOwnerComponent().getModel("historyDetail").setProperty("/HashList", aNewDetailLit);
			}

			// create action sheet only once
			if (!this._oBackActionSheet) {
				this._oBackActionSheet = sap.ui.xmlfragment("sap.ino.vc.shell.fragments.BackAction", this);
				this._oBackActionSheet.addStyleClass("sapInoMobileCancel sapUiBackActionSheet");
				this.getView().addDependent(this._oBackActionSheet);
			}

			this._oBackActionSheet.attachAfterClose(function() {
				oButtonEnd.focus();
				oButtonBegin._toggleIcon(oButtonEnd, "sap-icon://slim-arrow-down");
			}, this);

			this._oBackActionSheet.openBy(oButtonEnd);
		},

		_getUserDataDialog: function() {
			var that = this;

			if (!this._oUserDataDialog) {
				this._oUserDataDialog = sap.ui.xmlfragment("sap.ino.vc.shell.fragments.UserDataDialog", this);
				this.getView().addDependent(this._oUserDataDialog);

				if (!Device.system.phone) {
					this._oUserDataDialog.getContent()[0].addStyleClass("sapUiSmallMargin sapInoUserDataDialog");
				}

				var iId = that._oComponent.getCurrentUserId();
				that._oIdentityModel = new JSONModel();
				if (Configuration.getUserProfileByTextURL(iId)) {
					that._oIdentityModel.loadData(Configuration.getUserProfileByTextURL(iId), {
						"USER_ID": iId
					}, true, "GET");
					that._oIdentityModel.attachRequestCompleted(null, function() {
						var indentityData = that._oIdentityModel.getData();
						indentityData['open_group'] = Configuration.getSystemSetting('sap.ino.config.OPEN_GROUP_FOR_COMMUNITY_USER') * 1;
						that._oIdentityModel.setData(indentityData);
						that._oUserDataDialog.setModel(that._oIdentityModel, "identityData");
						if (sap.ui.getCore().byId("identityLogList")) {
							sap.ui.getCore().byId("identityLogList").bindItems({
								path: "data>/Identity(" + iId + ")/IdentityLog",
								sorter: new sap.ui.model.Sorter("CHANGED_AT", true),
								template: this.getFragment("sap.ino.vc.iam.fragments.IdentityLogTemplate")
							});
						}
					}, that);
				}

				this._oUserDataDialog.attachAfterClose(function() {
					that._oShell.getUser().focus();
				});
			}
			return this._oUserDataDialog;
		},

		onUserData: function() {
			var that = this;
			var oDialog = that._getUserDataDialog();
			jQuery.sap.delayedCall(0, this, function() {
				oDialog.open();
				if (this.byId("changeHistoryLog")) {
					this.byId("changeHistoryLog").bindItems({
						path: "data>/Identity(" + that._oComponent.getCurrentUserId() + ")/IdentityLog/Results"
					});
				}
				this.getMemberGroups().done(function(data) {
					that.setModel(new JSONModel(data), 'identityData>/groups');
				});
			});
		},

		onUserDataClose: function() {
			var dialog = this._getUserDataDialog();
			dialog.close();
		},

		openHelpPressed: function() {
			this.openHelpScreen();
		},

		openHelpScreen: function(sTextId) {
			this._oComponent.getRootController().openHelpScreen(sTextId);
		},

		toggleClipboard: function(bShowClipboard) {
			var oSideNavigation = this.byId("sideNavigation");
			var oToolPage = this.byId("toolPage");

			if (!this._oClipboardFragment) {
				this._oNavigationFragment = oSideNavigation.getItem();
				this._oNavigationFooterFragment = oSideNavigation.getFixedItem();
				this._oClipboardFragment = sap.ui.xmlfragment("sap.ino.vc.shell.fragments.Clipboard", this);
				this._oClipboardFooterFragment = sap.ui.xmlfragment("sap.ino.vc.shell.fragments.ClipboardFooter", this);
			}

			if (bShowClipboard) {
				oSideNavigation.setItem(this._oClipboardFragment);
				oSideNavigation.setFixedItem(this._oClipboardFooterFragment);

				if (!oToolPage.getSideExpanded()) {
					oToolPage.setSideExpanded(true);
				}

				Clipboard.sharedInstance().clipboardOpened();
			} else {
				oSideNavigation.setItem(this._oNavigationFragment);
				oSideNavigation.setFixedItem(this._oNavigationFooterFragment);

				if (oToolPage.getSideExpanded()) {
					oToolPage.setSideExpanded(false);
				}

				Clipboard.sharedInstance().clipboardClosed();
			}
		},

		onCloseClipboard: function() {
			var oToolPage = this.byId("toolPage");
			oToolPage.setSideExpanded(false);

			this.toggleClipboard(false);
		},

		onRemoveAllClipboardObjects: function() {
			Clipboard.sharedInstance().remove();
		},

		onRemoveClipboardObject: function(oEvent) {
			var oSource = oEvent.getSource();

			var sObjectName = oSource.data("OBJECT_NAME");
			var vKey = oSource.data("OBJECT_KEY");

			var oApplicationObject = Clipboard.loadObject(sObjectName);

			Clipboard.sharedInstance().remove(oApplicationObject, vKey);
		},

		onOpenClipboardObject: function(oEvent) {
			var oSource = oEvent.getSource();
			var sObjectName = oSource.data("OBJECT_NAME");
			var vKey = oSource.data("OBJECT_KEY");
			switch (sObjectName) {
				case "sap.ino.commons.models.object.Idea":
					this.navigateTo("idea-display", {
						id: vKey
					});
					break;

				case "sap.ino.commons.models.object.User":
					if (!this.oIdentityCardView || this.oIdentityCardView.getController() === null) {
						this.oIdentityCardView = sap.ui.xmlview({
							viewName: "sap.ino.vc.iam.IdentityCard"
						});
						oSource.addDependent(this.oIdentityCardView);
					}

					this.oIdentityCardView.getController().open(oSource, vKey);
					break;
				default:
					break;
			}

		},

		_getSettingsDialog: function() {
			var that = this;

			if (!this._oSettingsDialog) {

				this._oSettingsController = sap.ui.controller("sap.ino.vc.shell.Settings");
				var oUserDataModel = this.getView() && this.getView().getModel("userData");
				if (oUserDataModel && this._oSettingsController.setUserDataModel) {
					this._oSettingsController.setUserDataModel(oUserDataModel);
				}
				this._oSettingsView = sap.ui.view({
					type: ViewType.XML,
					viewName: "sap.ino.vc.shell.Settings",
					controller: this._oSettingsController
				});

				this._oSettingsDialog = sap.ui.xmlfragment("sap.ino.vc.shell.fragments.SettingsDialog", this);
				this.getView().addDependent(this._oSettingsDialog);

				this._oSettingsDialog.addContent(this._oSettingsView);

				this._oSettingsDialog.attachAfterClose(function() {
					that._oShell.getUser().focus();
				});
			}
			return this._oSettingsDialog;
		},

		onSettings: function() {
			this._getSettingsDialog().open();
		},

		_cropImage: function(oImageCroppingCtrl) {
			var that = this;
			var oDeferred = jQuery.Deferred();
			var oFile = oImageCroppingCtrl.crop();
			if (oFile) {
				jQuery.sap.require("sap.ino.commons.models.object.Attachment");
				var Attachment = sap.ino.commons.models.object.Attachment;
				Attachment.uploadFile(oFile).done(function(oResponse) {
					var oObject = that._oSettingsController.getObjectModel();
					oObject.setUserImage({
						"ATTACHMENT_ID": oResponse.attachmentId,
						"FILE_NAME": oResponse.fileName,
						"MEDIA_TYPE": oResponse.mediaType
					});
					oDeferred.resolve({
						messages: [{
							"TYPE": "I",
							"MESSAGE": "SETTINGS_MSG_USER_IMAGE_CROP",
							"MESSAGE_TEXT": that.getText("SETTINGS_MSG_USER_IMAGE_CROP"),
							"REF_FIELD": ""
                        }]
					});
				}).fail(function() {
					MessageToast.show(that.getText("SETTINGS_MSG_USER_IMAGE_CROP_FAILED"));
					oDeferred.reject();
				});
			} else {
				oDeferred.resolve();
			}
			return oDeferred.promise();
		},

		_openRestartDialog: function() {
			var sMessage = this.getText("SETTINGS_RESTART_MESSAGE");
			var sTitle = this.getText("SETTINGS_RESTART_TITLE");
			var fnRestart = function(oAction) {
				if (oAction === MessageBox.Action.YES) {
					location.reload();
				}
			};
			MessageBox.confirm(sMessage, {
				icon: MessageBox.Icon.ERROR,
				title: sTitle,
				actions: [MessageBox.Action.YES, MessageBox.Action.NO],
				onClose: fnRestart,
				styleClass: "sapUiSizeCompact"
			});
		},

		onSettingsOk: function() {
		    throw new Error("obsolete method.");
			var that = this;
			var _saveSettings = function() {
				//sap.ui.ino.controls.BusyIndicator.show(0);
				var oView = that._oSettingsView;
				var oObjectModel = that._oSettingsController.getObjectModel();
				var oLocale = oView.byId("settingLOCALE");
				var oNotificationMail = oView.byId("settingMAIL");
				var oHCB = oView.byId("settingHCB");
				var sHCBvalue = oHCB.getSelected() ? UserSettings.Theme.HCB : "";

				that._sHCBPropOLD = oObjectModel._oBeforeData.Settings.THEME; //oObjectModel.getProperty("/Settings/THEME");
				that._sHCBPropOLD = (that._sHCBPropOLD === null) ? "" : that._sHCBPropOLD;
				that._sLocalePropOLD = oObjectModel._oBeforeData.Settings.LOCALE;
				that._sLocalePropOLD = (that._sLocalePropOLD === null) ? "" : that._sLocalePropOLD;

				var oRequest = oObjectModel.updateUserSettings([{
					SECTION: "locale",
					KEY: "locale",
					VALUE: oLocale.getSelectedKey()
                }, {
					SECTION: "notification",
					KEY: "mail",
					VALUE: oNotificationMail && oNotificationMail.getSelected() ? UserSettings.Mail.Active : UserSettings.Mail.Inactive
                }, {
					SECTION: "ui",
					KEY: "theme",
					VALUE: sHCBvalue
                }]);

				oObjectModel.modify(); // update image
				oRequest.always(function() {
					var sHCBPropNEW = oObjectModel.getProperty("/Settings/THEME");
					sHCBPropNEW = (sHCBPropNEW === null) ? "" : sHCBPropNEW;

					var sLocalePropNEW = oObjectModel.getProperty("/Settings/LOCALE");
					sLocalePropNEW = (sLocalePropNEW === null) ? "" : sLocalePropNEW;

					var bRestart = (sLocalePropNEW !== that._sLocalePropOLD) || (sHCBPropNEW !== that._sHCBPropOLD);
					if (bRestart) {
						that._openRestartDialog();
					}
				});

				oRequest.done(function() {
					Configuration.refreshBackendConfiguration();
				});
			};

			var oImageCropping = this._oSettingsView.byId("imageSettingCropping");
			this._cropImage(oImageCropping).done(_saveSettings);
		},

		onSettingsCancel: function() {
			this._getSettingsDialog().close();
		},

		_getTermsDialog: function() {
			var that = this;

			if (!this._oTermsDialog) {
				this._oTermsDialog = this.getTermsDialog(this);
				Configuration.getUserModel().setProperty("/data/TERMACTION", false);
				Configuration.getUserModel().setProperty("/data/USER_ACCEPTED", 1);

				this._oTermsDialog.attachAfterClose(function() {
					that._oShell.getUser().focus();
				});
			}
			return this._oTermsDialog;
		},

		onTermsConditions: function() {
			this._getTermsDialog().open();
		},

		_getAboutDialog: function() {
			var that = this;

			if (!this._oAboutDialog) {
				this._oAboutDialog = sap.ui.xmlfragment("sap.ino.vc.shell.fragments.AboutDialog", this);
				this.getView().addDependent(this._oAboutDialog);

				this._oAboutDialog.attachAfterClose(function() {
					that._oShell.getUser().focus();
				});
			}
			return this._oAboutDialog;
		},

		onAbout: function() {
			this._getAboutDialog().open();
		},

		onAboutClose: function() {
			this._getAboutDialog().close();
		},

		selectGroupTab: function(event) {
			var self = this;
			var param = event.getParameters();
			if (param.selectedKey === 'userDataGroupPage') {
				var groupRequire = this._bindUserGroupModel();
				var table = param.selectedItem.getContent()[0];
				table.getBinding('rows').filter([]);
				groupRequire.attachRequestCompleted(function() {
					self.reBindSelectedData(table);
				});
			}
		},

		_getUserGroupDialog: function() {
			if (!this._userGroupDialog) {
				this._userGroupDialog = sap.ui.xmlfragment('sap.ino.vc.shell.fragments.UserGroupDialog', this);
				this._bindUserGroupModel(this._userGroupDialog);
				this.getView().addDependent(this._userGroupDialog);
			}
			return this._userGroupDialog;
		},

		openUserGroupDialog: function() {
			var dialog = this._getUserGroupDialog();

			return dialog.open();
		},

		onSubmitSelectedGroups: function() {
			var self = this;
			var submited = this.putGroupSelected(this._getUserGroupDialog().getContent()[0], true);
			if (submited) {
				submited.done(function() {
					MessageToast.show(self.getText('USER_GROUP_SELECT_SUCCESS'));
					self._getUserGroupDialog().close();
				});
			}
		},

		onPersonalize: function() {
			var self = this;
			var settingData = Configuration.getPersonalize();

			self.getView().setModel(new JSONModel(settingData), 'PERSONALIZE');

			return this._getPersonalizeDialog().open();
		},

		closePersonalize: function() {
			return this._getPersonalizeDialog().close();
		},

		_getPersonalizeDialog: function() {
			if (!this._personalizeDialog) {
				this._personalizeDialog = sap.ui.xmlfragment('sap.ino.vc.shell.fragments.Personalize', this);
				this.getView().addDependent(this._personalizeDialog);
			}
			return this._personalizeDialog;
		},

		getPersonalizeSetting: function() {
			var defaultData = PersonalizeSetting.defaultPesonalize;
			// 			PersonalizeSetting.getSettings().done(function(data) {
			// 				var settingData = $.extend(defaultData, data.RESULT || {});
			// 				Configuration.setPersonalize(settingData);
			// 			});
			return $.extend(defaultData, Configuration.getPersonalize());
		},

		personalizeSave: function() {
			var self = this;
			var personalizeModel = self.getView().getModel('PERSONALIZE');
			var personalizeData = personalizeModel.getData();
			PersonalizeSetting.updateSettings({
				personalize: personalizeData
			}).done(function() {
				MessageToast.show(self.getText("PERSONALIZE_CHANGE_SUCCESS"));
				self.getView().setModel(new JSONModel(personalizeData), 'PERSONALIZE');
				self._getPersonalizeDialog().close();
			});
		},

		onPersonalSetting: function() {
			this.navigateTo('mySetting');
		},

		formatterLatestNotificationId: function(aNotifications) {
			if (aNotifications && aNotifications.length > 0) {
				return aNotifications.sort(function(oPre, oNext) {
					return oNext.ID - oPre.ID;
				})[0].ID;
			}
		}
	}));
});
}; // end of sap/ino/vc/shell/InoShell.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.tag.List.controller') ) {
jQuery.sap.declare('sap.ino.vc.tag.List.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/tag/List.controller",[
    "sap/ino/vc/commons/BaseVariantListController",
    "sap/ui/Device",
    "sap/ino/commons/formatters/ObjectListFormatter",
    "sap/ui/model/Sorter",
    "sap/ui/model/json/JSONModel",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/ino/commons/application/Configuration",
    "sap/ino/vc/commons/TopLevelPageFacet",
    "sap/ino/controls/OrientationType",
    "sap/m/MessageToast",
    "sap/ino/vc/commons/mixins/FollowMixin",
    "sap/ino/vc/commons/mixins/TagCardMixin"
], function(BaseController,
     Device,
     ObjectListFormatter,
     Sorter,
     JSONModel,
     Filter,
     FilterOperator,
     Configuration,
     TopLevelPageFacet,
     OrientationType,
     MessageToast,
     FollowMixin,
     TagCardMixin) {
    "use strict";
    
    var mOrder = {
        ASC : "ASC",
        DESC : "DESC"
    };
    
    var mSort = {
        NAME : "NAME"
    };
    
    var mVariant = {
        ALL : "all",
        OTHER : "other"
    };
    
    var mFilter = {
        NONE : undefined
    };
    
    var mList = {
        NAME:"TAG_LIST_TIT_NAME",
        ADJUSTMENT_TITLE : "TAG_LIST_TIT_ADJUSTMENT",
        Filter : {},
        Sorter : {
            Values : [ {
                TEXT : "SORT_MIT_NAME",
                ACTION : mSort.NAME,
                DEFAULT_ORDER : mOrder.ASC
            }]
        },
        Order: {
		    Values: [{
		        TEXT: "ORDER_MIT_ASC",
		        ACTION: mOrder.ASC
		    }, {
		        TEXT: "ORDER_MIT_DESC",
		        ACTION: mOrder.DESC
		    }]
		},
        Variants : {
            DEFAULT_VARIANT : mVariant.ALL,
            TITLE : "TAG_LIST_TIT_VARIANTS",
            Values : [{
                TEXT : "TAG_LIST_MIT_TAGS",
                NAME : "TAG_LIST_MIT_TAGS",
                ACTION : mVariant.ALL,
                FILTER : mFilter.NONE,
                DEFAULT_SORT : mSort.NAME,
                VISIBLE: true
            }]
        }
    };
    
    var mListContext = {
		TAG: "taglist",
		TAG_VARIANT: "taglistvariant"
	};

    var oTAGList = BaseController.extend("sap.ino.vc.tag.List", jQuery.extend({}, TopLevelPageFacet, FollowMixin, TagCardMixin, {
        /* Controller reacts when these routes match */
        routes : ["taglist", "taglistvariant"],
        
        initialFocus : "mainFilterButton",
        
        /* ListModel defining filter, sorter and variants of the list */
        list : mList,
        
        /* ViewModel storing the current configuration of the list */
        view : {
            "List" : {
                "SORT" : mSort.NAME,
                "ORDER" : undefined,
                "VARIANT" : mVariant.ALL,
                "Default" : {
                    "SORT" : mSort.NAME,
                    "ORDER" : undefined,
                    "VARIANT" : mVariant.ALL
                }
            },
            "ORIENTATION" : OrientationType.PORTRAIT,
            "DISABLE_ORIENTATION" : true
        },
        
        onInit : function() {
            BaseController.prototype.onInit.apply(this, arguments);
            
            this.oViewModel = this.getModel("view") || new JSONModel({});
			this.oViewModel.setData(this.view, true);
        },
        
        onRouteMatched : function(oEvent, oObject) {
            // bind variant list
            this.bindVariants();
            
            var oViewModel = this.getModel("view");
            oViewModel.setData(this.view, true);

            var oQuery;
			var sVariant;
            var sDefaultVariant = this.getListProperty("/Variants/DEFAULT_VARIANT");

			if (oEvent && oEvent.getParameter) {
				var oArguments = oEvent.getParameter("arguments");
				this._sRoute = oEvent.getParameter("name");
				oQuery = oArguments["?query"];
				sVariant = oArguments.variant;
			} else {
				this._sRoute = oEvent;
				oQuery = oObject;
				sVariant = oObject.variant;
			}

			this.setViewProperty("/List/VARIANT", sVariant || sDefaultVariant);
			sVariant = this.getViewProperty("/List/VARIANT");

			var aSorter;
			var oVariant = this.getVariant(sVariant) || oViewModel.getProperty("/List/CURRENTVAR");
			if(!oVariant){
			    oVariant = {ACTION: sVariant, DEFAULT_SORT:"NAME"};
			}
			var bBound = this.getList().isBound("items");
			// even if there is no query defined, we need to add the default sorter that is applied
			if (!oQuery  || !oQuery.sort) {
				var sDefaultSort = oVariant.DEFAULT_SORT;
				var sDefaultOrder = this.getSort(sDefaultSort)[0].DEFAULT_ORDER;
				oQuery = oQuery || {};

				oQuery.sort = oQuery.sort || sDefaultSort;
				// enhance for sort combination
				oQuery.sort = oQuery.sort + " " + (oQuery.order || sDefaultOrder);
			}
			var bRebindRequired = this.hasStateChanged(this._sRoute, sVariant, oQuery, Device.orientation.portrait);

	        if (!bBound || bRebindRequired) {

                this.setParameters(oQuery, oVariant);
				aSorter = this.getSort(this.getViewProperty("/List/SORT"));
				this.setSorter(aSorter);
				this.updateFilter();
				this.setSortIcon(this.byId("panelFilterFragment--sortreverse"), this.getViewProperty("/List/ORDER"));

				this.bindList(oQuery);
				this.initialSorterItems();
	        }
	        
	        /* used to prevent opening and closing the filter while changing the variant, etc. */
            this._bInnerViewNavigation = true;

            // TODO Set help
            this.setHelp("TAG_LIST");
        },
        
        bindList : function(oQuery) {
            this.saveState();

            this.setPath("data>/" + this.getBindingPath(oQuery));
            
            BaseController.prototype.bindList.apply(this);
        },
        
        bindVariants : function() {
            var sPath = Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/tagGroupQuery.xsjs";
            var oTagGroupModel = new JSONModel(sPath);
            //var aVariants = this.getModel("list").getProperty("/Variants/Values");
            var aVariants = this.getDefaultVariantValue();
            var that = this;
            oTagGroupModel.attachRequestCompleted(null, function() {
                var aTagGroup = oTagGroupModel.getData();
                if (aTagGroup.length > 0) {
                    
                    // add other group
                    aTagGroup.push({
                        TEXT : "TAG_LIST_MIT_OTHER",
                        NAME : "TAG_LIST_MIT_OTHER",
                        ACTION : mVariant.OTHER,
                        FILTER : mFilter.NONE,
                        DEFAULT_SORT : mSort.NAME,
                        HIERARCHY_LEVEL: "1",
                        VISIBLE: true
                    });
                }
                aTagGroup = aVariants.concat(aTagGroup);
                that.getModel("list").setProperty("/Variants/Values", aTagGroup);
            }, oTagGroupModel);
         // var test = oTagGroupModel.loadData(sPath,undefined,false);   

            
        },

        getList: function() {
			return this.byId("objectlist");
		},
		
		getItemTemplate : function() {
            return this.getFragment("sap.ino.vc.tag.fragments.CardListItem");
        },
        
        getBindingPath : function(oQuery) {
            var searchValue = oQuery && oQuery.search || "";
            if (this.getFilter().length === 0) {
                return "SearchTagsAllParams(searchToken='" + searchValue + "')/Results";
            } else {
                return "SearchTagsAllFullParams(searchToken='" + searchValue + "')/Results";
            }
        },
		
		updateFilter: function() {
		    var aFilter = [];
		    this.setFilter([]);
		    // add filter by variant
		    var sVariant = this.getViewProperty("/List/VARIANT");
		    if (sVariant === mVariant.ALL) {
		        return;
		    } else if (sVariant === mVariant.OTHER) {
		        var aTagGroup = this.getModel("list").getProperty("/Variants/Values");
		        jQuery.each(aTagGroup, function(idx, oTagGroup) {
		            if (oTagGroup.ACTION !== mVariant.ALL && oTagGroup.ACTION !== mVariant.OTHER) {
		                aFilter.push(new Filter("GROUP_ID", FilterOperator.NE, oTagGroup.ACTION));
		            }
		        });
		    } else {
		        aFilter.push(new Filter("GROUP_ID", FilterOperator.EQ, this.getViewProperty("/List/VARIANT")));
		    }
		    this.addFilter(new Filter({
		        filters : aFilter,
		        and: true
		    }));
		},
		
		setParameters: function(oQuery, oVariant) {
		    BaseController.prototype.setParameters.apply(this, arguments);
		},
		
		getDefaultVariantValue : function() {
		    return [{
		        TEXT : "TAG_LIST_MIT_TAGS",
                ACTION : mVariant.ALL,
                NAME : "TAG_LIST_MIT_TAGS",
                FILTER : mFilter.NONE,
                DEFAULT_SORT : mSort.NAME,
                VISIBLE: true
		    }];
		},
		
		follow: function(){
		    MessageToast.show("test");
		}
    }));

    oTAGList.list = mList;
    oTAGList.listContext = mListContext;
    
    return oTAGList;
});
}; // end of sap/ino/vc/tag/List.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.analytics.List.controller') ) {
jQuery.sap.declare('sap.ino.vc.analytics.List.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.ODataModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.odata.v4.ODataModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.microchart.ColumnMicroChart'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.microchart.AreaMicroChart'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.microchart.ComparisonMicroChart'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.microchart.HarveyBallMicroChart'); // unlisted dependency retained
jQuery.sap.require('sap.suite.ui.microchart.RadialMicroChart'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.HTML'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/analytics/List.controller",[
    "sap/ui/Device",
    "sap/ino/vc/commons/BaseVariantListController",
    "sap/ui/model/Sorter",
    "sap/ino/commons/formatters/ObjectListFormatter",
    "sap/ino/vc/commons/TopLevelPageFacet",
    "sap/ui/model/odata/ODataModel",
    "sap/ui/model/odata/v4/ODataModel",
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/models/object/Report",
    "sap/ino/commons/util/ReportUtil",
    "sap/ui/model/Filter",
    "sap/ino/commons/application/Configuration",
    "sap/suite/ui/microchart/ColumnMicroChart",
    "sap/suite/ui/microchart/AreaMicroChart",
    "sap/suite/ui/microchart/ComparisonMicroChart",
    "sap/suite/ui/microchart/HarveyBallMicroChart",
    "sap/suite/ui/microchart/RadialMicroChart",
    "sap/ino/commons/models/core/CodeModel",
    "sap/m/MessageBox",
    "sap/ui/core/HTML",
    "sap/m/Text",
    "sap/m/MessageToast",
    "sap/ino/commons/models/object/Attachment"    
], function(
	Device,
	BaseController,
	Sorter,
	ObjectListFormatter,
	TopLevelPageFacet,
	ODataModel,
	V4ODataModel,
	JSONModel,
	Report,
	ReportUtil,
	Filter,
	Configuration,
	ColumnMicroChart,
	AreaMicroChart,
	ComparisonMicroChart,
	HarveyBallMicroChart,
	RadialMicroChart,
	CodeModel,
	MessageBox,
	HTML,
	Text,
	MessageToast,
	Attachment) {
	"use strict";

	var mFilter = {
		IDENTITY_ID: "IDENTITY_ID"
	};

	var mVariant = {
		MY: "my",
		STANDARD: "standard",
		CUSTOM_REPORTS: "customReports"
	};

	var mPath = {
		MY: "data>/MyReports",
		STANDARD: "data>/ReportTemplates"
	};

	var mChartType = {
		bar: "Comparison",
		column: "Column",
		line: "Area",
		pie: "HarveyBall",
		donut: "Radial",
		heatmap: "Column",
		bullet: "Comparison",
		barstacked: "Comparison",
		columnstacked: "Column",
		barstacked100: "Comparison",
		columnstacked100: "Column",
		waterfall: "Column",
		combination: "Column",
		scatter: "Area",
		bubble: "Area",
		combinationstacked: "Column",
		bardual: "Comparison",
		columndual: "Column",
		linedual: "Area",
		barstackeddual: "Comparison",
		columnstackeddual: "Column",
		combinationstackeddual: "Column",
		barstackeddual100: "Comparison",
		columnstackeddual100: "Column",

		lastmonthschart: "Column",
		processindicator: "Column",
		piechart: "HarveyBall",

		toplist: "Comparison",
		currentmonthlist: "Comparison"
	};

	var mColor = ["Good", "Neutral", "Critical", "Error"];

	var mList = {
		ADJUSTMENT_TITLE: "ANALYTICS_LIST_TIT_ADJUSTMENT",
		Variants: {
			DEFAULT_VARIANT: mVariant.MY,
			TITLE: "ANALYTICS_LIST_TIT_VARIANTS",
			Values: [{
					TEXT: "ANALYTIC_MY_REPORT_LIST",
					ACTION: mVariant.MY,
					FILTER: mFilter.IDENTITY_ID,
					FILTER_VALUE: Configuration.getCurrentUser(true).USER_ID,
					PATH: mPath.MY,
					VISIBLE: true
            }, {
					TEXT: "ANALYTIC_STANDARD_REPORT_LIST",
					ACTION: mVariant.STANDARD,
					PATH: mPath.STANDARD,
					VISIBLE: true
            },
				{
					TEXT: Configuration.getCustomReportsTile(),
					ACTION: mVariant.CUSTOM_REPORTS,
					VISIBLE: Configuration.getCustomReportsEnable()
					//	PATH: mPath.STANDARD                
            }]
		}
	};

	var oFormatter = {

		formatterReportText: function(sText, sAction) {
			if (sAction === mVariant.CUSTOM_REPORTS) {
				return sText;
			} else {
				return this.getText(sText);
			}
			return "";
		},
		visibleCreateBtn: function(bValue) {
			return bValue;
		},
		formatNoDataVisible: function(bContent, bEdit) {
			return !bContent && !bEdit;
		},
	    visibleEditRichtext: function(bEdit,bBackOffice){
	        return !!bEdit && bBackOffice; 
	    },
	    visibleOperationBox: function(bInnMgr,sAction){
	        return bInnMgr && (sAction === mVariant.CUSTOM_REPORTS);
	    },
	    visibleSaveActionsBtn: function(bEdit,bBackOffice,sAction){
	        return !!bEdit && bBackOffice && (sAction === mVariant.CUSTOM_REPORTS);
	    }
	};

	jQuery.extend(oFormatter, ObjectListFormatter);

	return BaseController.extend("sap.ino.vc.analytics.List", jQuery.extend({}, TopLevelPageFacet, {
		/* Controller reacts when these routes match */
		routes: ["reportlist", "reportlistvariant"],

		/* ListModel defining filter, sorter and variants of the list */
		list: mList,

		// id of control that get initial focus
		initialFocus: "filterButton",

		view: {
			"List": {
				"VARIANT": mVariant.MY,
				"CAMPAIGN": undefined,
				"TAGCLOUD": false
			}
		},

		formatter: oFormatter,

		onInit: function() {
			BaseController.prototype.onInit.apply(this, arguments);

			sap.ui.getCore().loadLibrary("sap.suite.ui.microchart");
			sap.ui.getCore().loadLibrary("sap.ui.comp");
			sap.ui.getCore().loadLibrary("sap.chart");
			sap.ui.getCore().loadLibrary("sap.viz");

			var sAnalyticsPath = Configuration.getBackendRootURL() + "/" + Configuration.getApplicationPath(
				"sap.ino.config.URL_PATH_OD_ANALYTICS");
			this.oDataModel = new ODataModel(sAnalyticsPath);

			var oViewModel = this.getModel("view");
			oViewModel.setData(this.view, true);

		},

		onRouteMatched: function(oEvent, oObject) {
            var bBOPrivilege = this.getModel("user").getProperty("/privileges")["sap.ino.ui::backoffice.access"];
            if(!bBOPrivilege){
              this.navigateTo("home"); 
              return;
              }
			var sVariant;
			var oQuery;
			if (oEvent && oEvent.getParameter) {
				var oArguments = oEvent.getParameter("arguments");
				this._sRoute = oEvent.getParameter("name");
				oQuery = oArguments["?query"];
				sVariant = oArguments.variant;
			} else {
				this._sRoute = oEvent;
				oQuery = oObject;
				sVariant = oObject.variant;
			}

			var sDefaultVariant = this.getListProperty("/Variants/DEFAULT_VARIANT");
			var oVariant = this.getVariant(sVariant);

			var bBound = this.getList().isBound("items");
			var bRebindRequired = this.hasStateChanged(this._sRoute, sVariant, oQuery);

			this.constructCustomReportsInfo(sVariant);

			if (!bBound || bRebindRequired) {
				oVariant = oVariant || this.getVariant(sDefaultVariant);
				this.setParameters(oQuery, oVariant);
				this.bindList();
			}

			this.setHelp("REPORT_LIST");
		},

		// this function is only called if the extending controller implements the top level page facet
		onBeforeHide: function() {
			this._bFullscreenReset = true;
			this.setFullScreen(this._bPreviouslyFullscreen);
		},

		onAfterShow: function() {
			if (this.byId("sapInoPanelAnalytics") && this.byId("sapInoPanelAnalytics").getDomRef() && this.byId("sapInoPanelAnalytics").getDomRef()
				.querySelector(".sapMPanelContent")) {
				var dom = this.byId("sapInoPanelAnalytics").getDomRef();
				var sHeight = dom.querySelector(".sapMPanelContent").style.height;
				if (sHeight === "0px" || sHeight === "100%") {
					var toolbarDomRef = jQuery(dom.querySelector(".sapInoHomeTitledPanelNav"));
					dom.querySelector(".sapMPanelContent").style.height = (jQuery(dom).height() - toolbarDomRef.height() -
						parseInt(toolbarDomRef.css("padding-top"), 10) - parseInt(toolbarDomRef.css("padding-bottom"), 10)) + "px";
				}
			}
		},

		setParameters: function(oQuery, oVariant) {
			oQuery = oQuery || {};

			var iCampaign = oQuery.campaign;

			this.setViewProperty("/List/VARIANT", oVariant.ACTION);
			this.setViewProperty("/List/CAMPAIGN", iCampaign);
		},

		getList: function() {
			return this.byId("reportlist");
		},

		bindList: function() {
			var that = this;
			if (this.getViewProperty("/List/VARIANT") === mVariant.CUSTOM_REPORTS) {
				//Get the request for the configuration
			} else if (this.getViewProperty("/List/CAMPAIGN") && this.getViewProperty("/List/VARIANT") === "standard") {
				this.getModel("data").read("/CampaignSmall(" + this.getViewProperty("/List/CAMPAIGN") + ")", {
					success: function(oData) {
						that.bindItems(oData);
					}
				});
			} else {
				this.bindItems();
			}
		},

		bindItems: function(oCampaign) {
			var that = this;

			var oCurrentVariant = this.getCurrentVariant();

			var aFilter = [];

			if (oCurrentVariant.FILTER && oCurrentVariant.FILTER_VALUE) {
				aFilter = [new Filter(oCurrentVariant.FILTER, "EQ", oCurrentVariant.FILTER_VALUE)];
			}
			if (oCurrentVariant.ACTION === mVariant.MY && this.getViewProperty("/List/CAMPAIGN")) {
				aFilter.push(new Filter("CAMPAIGN_ID", "EQ", this.getViewProperty("/List/CAMPAIGN")));
			}
			if (!Configuration.isComponentActive('sap.ino.config.USAGE_REPORTING_ACTIVE')) {
				var oUsageReportingFilter = new sap.ui.model.Filter("IS_USAGE_REPORT", sap.ui.model.FilterOperator.NE, 1);
				aFilter.push(oUsageReportingFilter);
			}
			var oReportList = this.getList();

			var fnGetText = sap.ino.commons.models.core.CodeModel.getFormatter("sap.ino.xs.object.analytics.ReportTemplate.Root");
			//oReportList.destroyItems();
			oReportList.bindItems({
				path: oCurrentVariant.PATH,
				filters: aFilter,
				factory: function(sId, oContext) {
					var oTileModel = {
						DELETE_BUTTON_VISIBLE: true,
						CHART_VISIBLE: true
					};

					var oCardItem = that.createFragment("sap.ino.vc.analytics.fragments.CardListItem", sId);

					var oReport = oContext.getObject();
					var oConfiguration;
					if (typeof(oReport.CONFIG) === 'string') {
						oConfiguration = JSON.parse(oReport.CONFIG);
					} else {
						oConfiguration = JSON.parse(JSON.stringify(oReport.CONFIG)); //to avoid the pointer assignment
					}

					oTileModel.TITLE = oConfiguration.Title || fnGetText(oReport.CODE);
					oTileModel.CAMPAIGN_NAME = oReport.CAMPAIGN_NAME || (oCampaign && oCampaign.SHORT_NAME) || that.getText(
						"ANALYTICS_LIST_CROSS_CAMPAIGN");

					var sCampaignColor = oReport.CAMPAIGN_COLOR || (oCampaign && oCampaign.COLOR_CODE);
					if (sCampaignColor && sCampaignColor.length === 6) {
						sCampaignColor = "background-color: #" + sCampaignColor;
					}
					oTileModel.CAMPAIGN_COLOR = "<div style=\"height: 4px; width: 200px; " + sCampaignColor + " \" />";

					if (that.getViewProperty("/List/VARIANT") === mVariant.STANDARD) {
						oTileModel.DELETE_BUTTON_VISIBLE = false;
					}

					if (oCampaign &&
						oConfiguration.Parameters &&
						oConfiguration.Parameters.Campaign) {
						oConfiguration.Parameters.Campaign.Selection = [oCampaign.ID];
					}
					if (!ReportUtil.checkMandatoryParameters(oConfiguration)) {
						oTileModel.CHART_VISIBLE = false;
						oTileModel.UNIT = that.getText("ANALYTICS_LIST_MISSING_PARAMETER");
					} else {
						var oTileConfiguration = jQuery.extend({}, oConfiguration.Views[oConfiguration.SelectedView], oConfiguration.Tile);
						oTileConfiguration.Chart.Type = mChartType[(oTileConfiguration.Content || oTileConfiguration.Chart.Type.split("/")[1]).toLowerCase()];
						var oReadParameter = that.getReadParameter(oConfiguration, oTileConfiguration);

						var oTileUnit = oTileConfiguration.Unit || oTileConfiguration.Tile.Unit;
						oTileModel.UNIT = oTileUnit ? that.getText(oTileUnit) : undefined;

						oReadParameter.success = function(oData) {
							var oChart = that.createChart(oTileConfiguration);
							oChart.setTooltip(that.createChartTooltip(oData.results, oTileConfiguration));
							that.addChartItems(oChart, oData.results, oTileConfiguration);
							if (oCardItem.getContent().length > 0) {
								var oHBox = oCardItem.getContent()[0].getItems()[2].getItems()[1];
								oHBox.removeAllItems();
								oHBox.addItem(oChart);
							}
						};

						that.oDataModel.read("/" + oConfiguration.DataSource, oReadParameter);
					}
					oCardItem.setModel(new JSONModel(oTileModel), "tile");

					return oCardItem;
				},
				events: {
					dataRequested: function() {
						jQuery.each(that.getBusyControls(), function(iIdx, oControl) {
							if (jQuery.type(oControl.setBusy) === "function") {
								oControl.setBusy(true);
							}
						});
					},
					dataReceived: function() {
						jQuery.each(that.getBusyControls(), function(iIdx, oControl) {
							if (jQuery.type(oControl.setBusy) === "function") {
								oControl.setBusy(false);
							}
						});
					}
				}
			});
		},

		onDelete: function(oEvent) {
			var oMyReportList = this.getList();
			var oItem = oEvent.getSource().getParent().getParent().getParent();

			var reportId = /(.+)?(?:\(|（)(.+)(?=\)|）)/.exec(oItem.getBindingContext("data").sPath)[2];
			var idNumber = parseInt(reportId, 0);

			var oView = this.getView();

			MessageBox.confirm(this.getText("MSG_DEL_CONFIRM"), {
				onClose: function(sDialogAction) {
					if (sDialogAction !== MessageBox.Action.OK) {
						return;
					} else {
						oView.setBusy(true);
						var oRequest = Report.del(idNumber);

						oRequest.always(function() {
							oView.setBusy(false);
						});

						oRequest.done(function() {
							oMyReportList.removeItem(oItem);
						});

						oRequest.fail(function() {});
					}
				}
			});
		},

		onItemPress: function(oEvent) {
			var oItem = oEvent.getSource();
			var oContext = oItem.getBindingContext("data");
			var sPath = oContext.sPath.substr(1);
			this.navigateTo("report", {
				code: sPath
			});
		},

		initFullScreen: function() {
			// only read previous setting if we already restored it
			// routing from campaign homepage to campaign homepage would not restore, as view is not hidden
			if (this._bFullscreenReset === undefined || this._bFullscreenReset === true) {
				this._bPreviouslyFullscreen = this.getFullScreen();
			}
			this.setFullScreen(true);
			this._bFullscreenReset = false;
		},

		getReadParameter: function(oConfiguration, oTileConfiguration) {
			var aTileChartSorter;
			if (oTileConfiguration.Sorter) {
				aTileChartSorter = [new Sorter({
					path: oTileConfiguration.Sorter.Path,
					descending: oTileConfiguration.Sorter.Descending
				})];
			}

			var aSelect;
			if (oTileConfiguration.Dimension && oTileConfiguration.Dimension[0]) {
				aSelect = [oTileConfiguration.Dimension, oTileConfiguration.Dimensions[0]];
			} else if (oTileConfiguration.Dimensions && oTileConfiguration.Dimensions[0]) {
				aSelect = [oTileConfiguration.Dimensions[0]];
			}
			if (oTileConfiguration.Sorter && aSelect[0] !== oTileConfiguration.Sorter.Path) {
				aSelect.push(oTileConfiguration.Sorter.Path);
			}
			if (oTileConfiguration.Measure && oTileConfiguration.Measure[0]) {
				aSelect.push(oTileConfiguration.Measure, oTileConfiguration.Measures[0]);
			} else if (oTileConfiguration.Measures && oTileConfiguration.Measures[0]) {
				aSelect.push(oTileConfiguration.Measures[0]);
			}
			var aResult = [];
			for (var i = 0; i < aSelect.length; i++) {
				if (aSelect[i]) {
					aResult.push(aSelect[i]);
				}
			}
			aSelect = aResult;

			return {
				async: true,
				sorters: aTileChartSorter,
				urlParameters: {
					"$select": aSelect.join(","),
					"$top": oTileConfiguration.Top || 5
				}
			};
		},

		createChart: function(oTileConfiguration) {
			var oChart;

			var oConfig = {
				"size": "S",
				"tooltip": this.getText("ANALYTICS_LIST_MISSING_PARAMETER")
			};

			switch (oTileConfiguration.Chart.Type) {
				case "Area":
					oChart = new AreaMicroChart(oConfig);
					break;
				case "Comparison":
					oChart = new ComparisonMicroChart(oConfig);
					break;
				case "HarveyBall":
					oChart = new HarveyBallMicroChart(jQuery.extend(oConfig, {
						total: 100,
						totalScale: " ",
						showFractions: true
					}));
					break;
				case "Radial":
					oChart = new RadialMicroChart(oConfig);
					break;
				default:
					oChart = new ColumnMicroChart(oConfig);
					break;
			}
			oChart.addStyleClass("sapUiSmallMargin");
			oChart.addStyleClass("sapUiMediumMarginBegin");
			oChart.addStyleClass("sapInoAnalyticsDefaultChart");

			return oChart;
		},

		addChartItems: function(oChart, aData, oTileConfiguration) {
			var sMicroChartType = oTileConfiguration.Chart.Type;
			var sDimension = oTileConfiguration.Dimension || oTileConfiguration.Dimensions[0];
			var sMeasure = oTileConfiguration.Measure || oTileConfiguration.Measures[0];

			switch (sMicroChartType) {
				case "Column":
					jQuery.each(aData, function(iIndex, oResult) {
						oChart.addColumn(new sap.suite.ui.microchart.ColumnMicroChartData({
							color: mColor[iIndex % 4],
							label: oResult[sDimension],
							value: oResult[sMeasure]
						}));
					});
					break;
				case "Area":
					var oAreaMicroChartItem = new sap.suite.ui.microchart.AreaMicroChartItem({
						color: "Good"
					});
					var iXLength = 100 / aData.length;
					jQuery.each(aData, function(iIndex, oResult) {
						oAreaMicroChartItem.addPoint(new sap.suite.ui.microchart.AreaMicroChartPoint({
							x: iXLength * iIndex,
							y: oResult[sMeasure]
						}));
					});
					oChart.addLine(oAreaMicroChartItem);
					break;
				case "Comparison":
					jQuery.each(aData, function(iIndex, oResult) {
						oChart.addData(new sap.suite.ui.microchart.ComparisonMicroChartData({
							color: mColor[iIndex % 4],
							title: oResult[sDimension],
							value: oResult[sMeasure]
						}));
					});
					break;
				case "HarveyBall":
					var fTotal = 0;

					jQuery.each(aData, function(iIndex, oResult) {
						oChart.addItem(new sap.suite.ui.microchart.HarveyBallMicroChartItem({
							color: "Good",
							fractionLabel: oResult[sDimension],
							fraction: oResult[sMeasure],
							fractionScale: " "
						}));

						fTotal += oResult[sMeasure];
					});

					if (fTotal) {
						oChart.setTotal(fTotal);
					}
					break;
				case "Radial":
					var fRadialTotal = 0;
					jQuery.each(aData, function(iIndex, oData) {
						fRadialTotal += oData[sMeasure];
					});

					oChart.setTotal(fRadialTotal);
					oChart.setFraction(aData[0][sMeasure]);
					oChart.setValueColor("Good");
					break;
				default:
					jQuery.each(aData, function(iIndex, oResult) {
						oChart.addColumn(new sap.suite.ui.microchart.ColumnMicroChartData({
							color: mColor[iIndex % 4],
							label: oResult[sDimension],
							value: oResult[sMeasure]
						}));
					});
					break;
			}
		},

		createChartTooltip: function(aData, oViewConfig) {
			var sTooltip = "";

			jQuery.each(aData, function(iIndex, oResult) {
				sTooltip += oResult[oViewConfig.Dimension || oViewConfig.Dimensions[0]] + " " + (oResult[oViewConfig.Measure || oViewConfig.Measures[
					0]] || 0);
				sTooltip += (iIndex !== aData.length) ? "\n" : "";
			});

			return sTooltip;
		},

		getQuery: function() {
			var oQuery = {};

			var iCampaign = this.getViewProperty("/List/CAMPAIGN");
			if (iCampaign) {
				oQuery.campaign = iCampaign;
			}

			return oQuery;
		},

		onVariantPress: function(sVariantAction) {
			var oQuery = this.getQuery();

			// do not show invalid filters in URL => they are ignored, but we don't want to confuse users
			this.removeInvalidFilters(oQuery);

			if (sVariantAction) {
				this.navigateTo(this.getRoute(true), {
					variant: sVariantAction,
					query: oQuery
				}, true, true);
			} else {
				this.navigateTo(this.getRoute(false), {
					query: oQuery
				}, true, true);
			}
		},
		constructCustomReportsInfo: function(sVariant) {
            var bInnMgr = this.getModel("user").getProperty("/privileges/sap.ino.xs.rest.admin.application::execute");
            
            var bBackOffice = this.getModel("user").getProperty("/privileges/sap.ino.ui::backoffice.access");
				this.getView().getModel("list").setProperty("/IS_INN_MGR", bInnMgr);
				this.getView().getModel("list").setProperty("/BACKOFFICE_ACCESSABLE", bBackOffice);	
				this.getView().getModel("list").setProperty("/CURRENT_ACTION_SELECTED", sVariant);	   
				if(!sVariant){
				 this.getView().getModel("list").setProperty("/CURRENT_ACTION_SELECTED", mVariant.MY);	   
				}
				
			if (!this.getView().getModel("customReport")) {
				var oModel = new JSONModel();
				this.getView().setModel(oModel, 'customReport');
			}				
			if (sVariant === mVariant.CUSTOM_REPORTS) {
                if(!Configuration.getCustomReportsEnable()){
				this.navigateTo(this.getRoute(true), {
					variant: mVariant.MY,
					query: {}
				}, true, true);		        
		    }			    
				this.getXCSRFTOKEN();
				this.byId("reportlist").setVisible(false);
				this.byId('customReports').setVisible(true);
				this.getCustomReportsInfo();
			} else {
				this.byId('customReports').setVisible(false);
				this.byId("reportlist").setVisible(true);
			}
		},
		getCustomReportsInfo: function() {
			var oReportVbox = this.byId('customReports');
			oReportVbox.removeAllItems();
			oReportVbox.destroyItems();
			var that = this;
			var oRichTextControl = sap.ui.xmlfragment({
				id: that.getView().getId(),
				fragmentName: "sap.ino.vc.analytics.fragments.CustomReportRichTxt"
			}, that);
			oRichTextControl.attachReady(function() {
				this.bindProperty("value", {
					path: 'customReport>/content'
				});
			});
			oReportVbox.addItem(oRichTextControl);
			var oRichTextHtml = new HTML({
				sanitizeContent: true,
				preferDOM: false,
				visible:{
					parts: ['customReport>/hasContent', 'customReport>/EDIT_STATUS','list>/BACKOFFICE_ACCESSABLE'],
					formatter: function(bContent, bEdit,bBackOffice) {
						return bContent && !bEdit && bBackOffice;
					},
					type: null
				},
				content: {
					model: "customReport",
					path: '/content',
					formatter: that.formatter.wrapHTML
				}
			});
			oReportVbox.addItem(oRichTextHtml);
			var oTextField = new Text({
				text: this.getText("ANALYITCS_CUSTOM_REPORTS_TEXT_NO_DATA"),
				visible: {
					parts: ['customReport>/hasContent', 'customReport>/EDIT_STATUS'],
					formatter: function(bContent, bEdit) {
						return !bContent && !bEdit;
					},
					type: null
				}
			});
			oReportVbox.addItem(oTextField);
			var oRequest = {
				"ACTION": "QUERY"
			};
			var sURL = Configuration.getBackendRootURL() + "/sap/ino/xs/rest/backoffice/customReports.xsjs";
			var oAjaxPromise = jQuery.ajax({
				url: sURL,
				headers: {
					"X-CSRF-Token": that._xCSRFToken
				},
				data: JSON.stringify(oRequest),
				type: "POST",
				contentType: "application/json; charset=UTF-8",
				async: false
			});
			oAjaxPromise.done(function(oResponseBody, sResponseText) {
				var oCurrentModel = that.getView().getModel("customReport");
				oCurrentModel.setData(oResponseBody.data);
				oCurrentModel.setProperty("/old_content",oCurrentModel.getProperty("/content"));				
				oCurrentModel.setProperty("/EDIT_STATUS", false);
				if (oCurrentModel.getProperty("/hasContent")) {
					oCurrentModel.setProperty("/CAN_CREATE", false);
					oCurrentModel.setProperty("/CAN_DELETE", true);
					oCurrentModel.setProperty("/CAN_MODIFY", true);
				} else {
					oCurrentModel.setProperty("/CAN_CREATE", true);
					oCurrentModel.setProperty("/CAN_DELETE", false);
					oCurrentModel.setProperty("/CAN_MODIFY", false);
				}
				
			});
		},
		
		beforeEditorInit: function(c){
		    	c.mParameters.configuration.paste_data_images = true;
				c.mParameters.configuration.automatic_uploads = true;
				c.mParameters.configuration.powerpaste_word_import = "clean";
				c.mParameters.configuration.powerpaste_html_import = "clean";
						c.mParameters.configuration.images_upload_handler = function(oFile, success, failure) {
							var oFileToUpload = oFile.blob();
							var sFileLabel = "CUSTOM_REPORT";
							// oFileToUpload.name = "image-" + (new Date()).getTime() + Math.floor(Math.random() * 1000) + "." + oFileToUpload.type.substr(oFileToUpload.type.lastIndexOf("/") + 1);
							if (oFileToUpload) {
								Attachment.uploadFileIncludeFileLabel(oFileToUpload, sFileLabel).done(function(oResponse) {
									success(Configuration.getAttachmentDownloadURL(oResponse.attachmentId));
								}).fail(function() {
									failure();
								});
							}
						};
						c.mParameters.configuration.paste_postprocess = function(editor, fragment) {
							window.tinymce.activeEditor.uploadImages();
						};				
				
				
				
		},
		getXCSRFTOKEN: function() {
			var that = this;
			var sPingURL = window.location.protocol + '//' + window.location.host + "/sap/ino/xs/rest/common/ping.xsjs";
			var oAjaxPromise = jQuery.ajax({
				url: sPingURL,
				headers: {
					"X-CSRF-Token": "Fetch"
				},
				type: "GET",
				contentType: "application/json; charset=UTF-8",
				async: false
			});
			oAjaxPromise.done(function(oResponseBody, sResponseText, oResponse) {
				that._xCSRFToken = oResponse.getResponseHeader("X-CSRF-Token");
			});
		},
		onCreateCustomReportStyle: function() {
			var oModel = this.getView().getModel("customReport");
			oModel.setProperty("/CAN_CREATE", false);
		    oModel.setProperty("/ACTION", "CREATE");
			oModel.setProperty("/EDIT_STATUS", true);
		},
		onModifyCustomReportStyle: function() {
			var oModel = this.getView().getModel("customReport");
			oModel.setProperty("/CAN_MODIFY", false);
		    oModel.setProperty("/ACTION", "UPDATE");			
			oModel.setProperty("/EDIT_STATUS", true);
		},
		onDeleteCustomReportStyle: function() {
			var oModel = this.getView().getModel("customReport");
			oModel.setProperty("/CAN_DELETE", false);
			//oModel.setProperty("/EDIT_STATUS", false);
		    var that = this;	
		var fnDelete = function(){
			var oRequest = {
				"ACTION": "DELETE"
			};
            var oReportVbox = that.byId('customReports');
			oReportVbox.setBusy(true);			
			var sURL = Configuration.getBackendRootURL() + "/sap/ino/xs/rest/backoffice/customReports.xsjs";
			var oAjaxPromise = jQuery.ajax({
				url: sURL,
				headers: {
					"X-CSRF-Token": that._xCSRFToken
				},
				data: JSON.stringify(oRequest),
				type: "POST",
				contentType: "application/json; charset=UTF-8",
				async: false
			});
			oAjaxPromise.done(function(oResponseBody) {
			    oReportVbox.setBusy(false);
                 if(oResponseBody.type === "S"){
                    MessageToast.show(that.getText("ANALYITCS_CUSTOM_REPORTS_DELETE_SUCCESSFULLY"));
                    that.constructCustomReportsInfo(mVariant.CUSTOM_REPORTS);
                 } else {
                      oModel.setProperty("/CAN_DELETE", true);
                      MessageToast.show(oResponseBody.message);
                 }
			});	
			oAjaxPromise.fail(function(oResponse){
			    oReportVbox.setBusy(false);
			    oModel.setProperty("/CAN_DELETE", true);
			    MessageToast.show(oResponse.responseText); 
			});
		};		    
			//MessageBox to confirm;
					MessageBox.show(this.getText("ANALYITCS_CUSTOM_REPORTS_DELETE_BOX_MSG"), {
						title: this.getText("ANALYITCS_CUSTOM_REPORTS_DELETE_BOX_TITLE"),
						icon: MessageBox.Icon.WARNING,
						actions: [MessageBox.Action.YES, MessageBox.Action.NO],
						onClose: function(sDialogAction) {
							if (sDialogAction === MessageBox.Action.YES) {
								fnDelete();
								oModel.setProperty("/EDIT_STATUS", false);
							} else {
			                     oModel.setProperty("/CAN_DELETE", true);							    
							}
						}
					});	
			
		},
		onCustomReportStyleCancel: function() {
			var oModel = this.getView().getModel("customReport");	
			var that = this;
            if(oModel.getProperty("/old_content") === oModel.getProperty("/content")){
             this.constructCustomReportsInfo(mVariant.CUSTOM_REPORTS);
            } else {
					MessageBox.show(this.getText("ANALYITCS_CUSTOM_REPORTS_CANCEL_BOX_MSG"), {
						title: this.getText("ANALYITCS_CUSTOM_REPORTS_CANCEL_BOX_TITLE"),
						icon: MessageBox.Icon.WARNING,
						actions: [MessageBox.Action.YES, MessageBox.Action.NO],
						onClose: function(sDialogAction) {
							if (sDialogAction === MessageBox.Action.YES) {
							   oModel.setProperty("/ACTION", null);
							   that.constructCustomReportsInfo(mVariant.CUSTOM_REPORTS);
							} 
						}
					});
            }
            
		},
		hasPendingChanges: function() {
            var oModel = this.getView().getModel("customReport");
            
            if(oModel && oModel.getProperty("/old_content") !== oModel.getProperty("/content")) {
				return true;
			}
			return false;
		},		
    	resetPendingChanges: function() {
    			var oModel = this.getView().getModel("customReport");
				if(oModel && oModel.getProperty("/old_content") !== oModel.getProperty("/content")) {
				oModel.setProperty("/content",oModel.getProperty("/old_content"));
			}
    		},
		cancelOperationAction: function(){
		    var oSegmentButtons = this.byId("sapInoCampHomeIdeasButtons");
		    oSegmentButtons.setSelectedKey(mVariant.CUSTOM_REPORTS);
		},
		onCustomReportStyleSave: function() {
			var oModel = this.getView().getModel("customReport");			    
		    var that = this;
			var oRequest = {
				"ACTION": oModel.getProperty("/ACTION"),
				"CONTENT":oModel.getProperty("/content")
			};
			if(!oModel.getProperty("/ACTION")){
			    return;
			}
           var oReportVbox = this.byId('customReports');
			oReportVbox.setBusy(true);			
			var sURL = Configuration.getBackendRootURL() + "/sap/ino/xs/rest/backoffice/customReports.xsjs";
			var oAjaxPromise = jQuery.ajax({
				url: sURL,
				headers: {
					"X-CSRF-Token": that._xCSRFToken
				},
				data: JSON.stringify(oRequest),
				type: "POST",
				contentType: "application/json; charset=UTF-8",
				async: false
			});
			
			oAjaxPromise.done(function(oResponseBody, sResponseText) {
			    oReportVbox.setBusy(false);
                 if(oResponseBody.type === "S"){
                    //messageToast() 
                    MessageToast.show(that.getText("ANALYITCS_CUSTOM_REPORTS_SAVE_SUCCESSFULLY"));
                    that.constructCustomReportsInfo(mVariant.CUSTOM_REPORTS);
                 } else {
                     MessageToast.show(oResponseBody.message); 
                 }
			});	
			oAjaxPromise.fail(function(oResponse){
			    oReportVbox.setBusy(false);
			    MessageToast.show(oResponse.responseText); 
			});
		}
	}));
});
}; // end of sap/ino/vc/analytics/List.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.blog.List.controller') ) {
jQuery.sap.declare('sap.ino.vc.blog.List.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Item'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.ViewType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/blog/List.controller",[
    "sap/ino/vc/commons/BaseVariantListController",
    "sap/ui/Device",
    "sap/ui/model/json/JSONModel",
    "sap/ui/model/Sorter",
    "sap/ui/core/Item",
    "sap/ino/commons/application/Configuration",
    "sap/ino/commons/models/core/CodeModel",
    "sap/ui/core/mvc/ViewType",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/ino/commons/formatters/ObjectListFormatter",
    "sap/ino/controls/OrientationType",
    "sap/ino/vc/blog/mixins/DeleteActionMixin",
    "sap/m/MessageToast",
    "sap/m/MessageBox",
    "sap/ino/commons/models/aof/ApplicationObjectChange",
    "sap/ino/vc/commons/mixins/TagGroupMixin",
    "sap/ino/vc/commons/mixins/TagCardMixin",
    "sap/ino/vc/blog/mixins/BlogCardMixin"
], function(
	BaseController,
	Device,
	JSONModel,
	Sorter,
	Item,
	Configuration,
	CodeModel,
	ViewType,
	Filter,
	FilterOperator,
	ObjectListFormatter,
	OrientationType,
	DeleteActionMixin,
	MessageToast,
	MessageBox,
	ApplicationObjectChange,
	TagGroupMixin,
	TagCardMixin,
	BlogCardMixin) {
	"use strict";

	var mOrder = {
		ASC: "ASC",
		DESC: "DESC"
	};

	var mBlogRoutes = {
		BLOG: "bloglist",
		BLOG_VARIANT: "bloglistvariant"
	};

	var mSort = {
		CREATED_AT: "CREATED_AT",
		CHANGED_AT: "CHANGED_AT",
		// case insensitive sort order
		NAME: "tolower(TITLE)"
	};

	var mVariant = {
		ALL: "all",
 		MY: "my",
		DRAFT: "draft",
		PUBLISH: "publish"
	};

	var mFilter = {
		NONE: undefined,
 		MY: "myBlogs",
		DRAFT: "draftBlogs",
		PUBLISH: "publishedBlogs"
	};

	var mList = {
		ADJUSTMENT_TITLE: "BLOG_LIST_TIT_ADJUSTMENT",
		Filter: {},
		Sorter: {
			Values: [{
				TEXT: "SORT_MIT_CREATED",
				ACTION: mSort.CREATED_AT,
				DEFAULT_ORDER: mOrder.DESC
            }, {
				TEXT: "SORT_MIT_CHANGED",
				ACTION: mSort.CHANGED_AT,
				DEFAULT_ORDER: mOrder.DESC
            }, {
				TEXT: "SORT_MIT_TITLE",
				ACTION: mSort.NAME,
				DEFAULT_ORDER: mOrder.ASC
            }]
		},
		Order: {
		    Values: [{
		        TEXT: "ORDER_MIT_ASC",
		        ACTION: mOrder.ASC
		    }, {
		        TEXT: "ORDER_MIT_DESC",
		        ACTION: mOrder.DESC
		    }]
		},
		Variants: {
			DEFAULT_VARIANT: mVariant.ALL,
			TITLE: "BLOG_LIST_TIT_VARIANTS",
			Values: [{
				TEXT: "BLOG_LIST_MIT_ALL",
				ACTION: mVariant.ALL,
				FILTER: mFilter.NONE,
				INCLUDE_DRAFT: true,
				VISIBLE: true,
				DEFAULT_SORT: mSort.CREATED_AT,
				MANAGE: false
            }, 
    //         {
				// TEXT: "BLOG_LIST_MIT_MY",
				// ACTION: mVariant.MY,
				// FILTER: mFilter.MY,
				// INCLUDE_DRAFT: true,
				// DEFAULT_SORT: mSort.CREATED_AT,
				// VISIBLE: false,
				// HIERARCHY_LEVEL: "1",
				// MANAGE: true
    //         }, 
            {
				TEXT: "BLOG_LIST_MIT_DRAFT",
				ACTION: mVariant.DRAFT,
				FILTER: mFilter.DRAFT,
				INCLUDE_DRAFT: true,
				DEFAULT_SORT: mSort.CREATED_AT,
				VISIBLE: false,
				HIERARCHY_LEVEL: "1",
				MANAGE: true
            }, {
				TEXT: "BLOG_LIST_MIT_PUBLISH",
				ACTION: mVariant.PUBLISH,
				FILTER: mFilter.PUBLISH,
				INCLUDE_DRAFT: false,
				DEFAULT_SORT: mSort.CREATED_AT,
				VISIBLE: false,
				HIERARCHY_LEVEL: "1",
				MANAGE: true
            }]
		}
	};
	
	/**
	 * @mixes DeleteActionMixin, TagGroupMixin, TagCardMixin
	 */
	var oBlogList = BaseController.extend("sap.ino.vc.blog.List", jQuery.extend({}, 
	            DeleteActionMixin, TagGroupMixin, TagCardMixin, BlogCardMixin, {
            
			/* ListModel defining filter, sorter and variants of the list */
			list: mList,

			// id of control that get initial focus
			initialFocus: "filterButton",

			/* ViewModel storing the current configuration of the list */
			view: {
				"List": {
					"SORT": mSort.CREATED_AT,
					"ORDER": undefined,
					"VARIANT": mVariant.ALL,
					"MANAGE": false,
					"TAGS": [],
					"IS_TAGS_SELECTION": false,
					"CAMPAIGN": undefined,
					"TAGCLOUD": true,
					"TAGCLOUD_EXPABLE": true,
					"TAGCLOUD_EXP": false,
					"TAGCLOUD_BAR_VISIBLE": false,
					"IS_FILTER_SUBPAGE": true
				},
				"ORIENTATION": OrientationType.PORTRAIT,
				"DISABLE_ORIENTATION": true,
				"IS_COMMUNITY_VIEW" : false
			},

			formatter: jQuery.extend({}, ObjectListFormatter),

			onInit: function() {
				this.formatter.filterStyleClass = function(sValue) {
					return sValue === undefined ? "" : "sapUiTinyMarginBegin";
				};

				BaseController.prototype.onInit.apply(this, arguments);

				this.oViewModel = this.getModel("view");
				this.oViewModel.setData(this.view, true);
                
                // only blog list navigated from user home or global search adds additional filter
			    this.addSubFilterPageContent(this.getAdditionalFilter());

				// TODO currently we always start with the card layout => instead use orientation in viewdata / real orientation
				this.getList().addStyleClass(this.getPortraitStyle());

				this.getList().attachUpdateFinished(this.onUpdateFinished, this);
				this.initApplicationObjectChangeListeners();
			},
			
			//TODO limit signature to 1: route 2: query => no support for onRouteMatched Signature
			show: function(oEvent, oObject) {
				var oQuery;
				var sVariant;
				if (oEvent && oEvent.getParameter) {
					var oArguments = oEvent.getParameter("arguments");
					oQuery = oArguments["?query"];
					sVariant = oArguments.variant;
				} else {
					sVariant = oObject.variant;
					oQuery = oObject;
				}

				var that = this;

				var sDefaultVariant = this.getListProperty("/Variants/DEFAULT_VARIANT");
				this.setViewProperty("/List/VARIANT", sVariant || sDefaultVariant);

				sVariant = this.getViewProperty("/List/VARIANT");
				var oVariant = this.getVariant(sVariant);

				var aSorter;
				var bBound = this.getList().isBound("items");

				// even if there is no query defined, we need to add the default sorter that is applied
				if (!oQuery || !oQuery.sort) {
					var sDefaultSort = oVariant.DEFAULT_SORT;
					var sDefaultOrder = this.getSort(sDefaultSort)[0].DEFAULT_ORDER;

					oQuery = oQuery || {};

					oQuery.sort = oQuery.sort || sDefaultSort;
					// enhance for sort combination
					oQuery.sort = oQuery.sort + " " + (oQuery.order || sDefaultOrder);
				}

				var bRebindRequired = this.hasStateChanged(this.getCurrentRoute(), sVariant, oQuery, Device.orientation.portrait);
				bRebindRequired = bRebindRequired || this._bListChanged;
				this._bListChanged = false;

				if (!bBound || bRebindRequired) {
					// update the VISIBILITY flag of all variants for binding in Filter
					this.setVariantVisibility();

					this.setParameters(oQuery, oVariant);

					/* -- Do not show the filterbar automatically but let the user change it -- */

					aSorter = this.getSort(this.getViewProperty("/List/SORT"));
					this.setSorter(aSorter);
					this.updateFilter();

					//TODO move to ListPage
					var iOrientation = this.getViewProperty("/ORIENTATION");
					this.onOrientationChange(Device.system.desktop ? iOrientation : Device.orientation);

					this.setSortIcon(this.byId("panelFilterFragment--sortreverse"), this.getViewProperty("/List/ORDER"));

					//check visiablity for current Variiant
					var bVisible = this.getVariantVisibility(sVariant);

					if (bVisible === false || typeof(bVisible) === "undefined") {
						MessageBox.show(that.getText("NOT_AUTHORIZED_MESSAGE"), MessageBox.Icon.INFORMATION, that.getText("NOT_AUTHORIZED_DIALOG_TITLE"), [
    						MessageBox.Action
    					.OK], function() {
							that.navigateTo("BlogList");
						});
						return;
					}

					this.bindList();
					this.initialSorterItems();
					if (this.isFilterVisible()) {
						this.bindTagCloud();
					}
				}
				
				this.setHelp("BLOG_LIST");
			},

			setVariantVisibility: function() {
				var aVariants = this.getModel("list").getProperty("/Variants/Values");

				for (var i = 0; i < aVariants.length; i += 1) {
					var oVariant = aVariants[i];
					var bIsManage = oVariant.MANAGE || false;

					var bVisible = (!bIsManage) || (bIsManage && Configuration.hasCurrentUserPrivilege("sap.ino.ui::campaign_manager"));
					this.getModel("list").setProperty("/Variants/Values/" + i + "/VISIBLE", bVisible);
				}
			},

			getVariantVisibility: function(sVariant) {
				var aVariants, bVisible;

				aVariants = this.getModel("list").getProperty("/Variants/Values");

				for (var i = 0; i < aVariants.length; i += 1) {
					var oVariant = aVariants[i];

					if (oVariant.ACTION === sVariant) {
						bVisible = oVariant.VISIBLE;
					}
				}

				return bVisible;
			},

			getPortraitStyle: function() {
				return "sapInoBlogList";
			},

			getList: function() {
				return this.byId("objectlist");
			},

			getBindingParameter: function() {
				var sVariant, sVariantFilter;
				sVariant = this.getViewProperty("/List/VARIANT");
				sVariantFilter = this.getCurrentVariant().FILTER;
				var sSearchTerm = this.getViewProperty("/List/SEARCH");
				var aTags = this.getViewProperty("/List/TAGS");
				// add for tag cloud
				var sCampaignId = this.getViewProperty("/List/CAMPAIGN");

				var aTagId = jQuery.map(aTags, function(oTag) {
					return oTag.ID;
				});

				return {
					Variant: sVariant,
					VariantFilter: sVariantFilter,
					SearchTerm: sSearchTerm,
					TagIds: aTagId,
					CampaignId: sCampaignId
				};
			},

			bindList: function() {
				this.saveState();

				var oBindingParameter = this.getBindingParameter();
				var sPath = "";
				var searchTerm = oBindingParameter.SearchTerm || "";
				var bIsLandscape = false;
				var bIsManaged = this._check4ManagingList();

				sPath += "BlogSearchParams";
				sPath += "(searchToken='" + searchTerm + "'," +
					"tagsToken='" + (oBindingParameter.TagIds.join(",") || "") + "'," +
					"filterName='" + (oBindingParameter.VariantFilter || "") + "'" +
					")/Results";

				this.setPath("data>/" + sPath);

				if ((!Device.system.desktop && Device.orientation.landscape) ||
					(Device.system.desktop && this.getViewProperty("/ORIENTATION") === OrientationType.LANDSCAPE)) {
					bIsLandscape = true;
				}

				var _bindList = function(fnCallback) {
        			var that = this;
        			var oList = this.getList().bindItems({
        				path: this.getPath(),
        				template: this.getItemTemplate(),
        				sorter: this.getSorter(),
        				filters: this.getFilter(),
        				groupHeaderFactory: this.getGroupHeaderFactory(),
        				events: {
        					dataRequested: function() {
        						jQuery.each(that.getBusyControls(), function(iIdx, oControl) {
        							if (jQuery.type(oControl.setBusy) === "function") {
        								oControl.setBusy(true);
        							}
        						});
        					},
        					dataReceived: function() {
        						jQuery.each(that.getBusyControls(), function(iIdx, oControl) {
        							if (jQuery.type(oControl.setBusy) === "function") {
        								oControl.setBusy(false);
        							}
        						});
        
        						if (jQuery.type(fnCallback) === "function") {
        							fnCallback.apply(this);
        						}
        					}
        				}
        			});
        		};

				_bindList.apply(this);
			},

			_check4ManagingList: function() {
				var bBackoffice = Configuration.hasCurrentUserPrivilege("sap.ino.ui::campaign_manager");

				if (bBackoffice) {
					var sVariant = this.getViewProperty("/List/VARIANT");
					var aVariants = this.getListProperty("/Variants/Values");

					var vVariant = jQuery.grep(aVariants, function(oVariant) {
						return oVariant.ACTION === sVariant;
					});

					vVariant = (vVariant && vVariant.length > 0) ? vVariant[0] : {};

					return vVariant.MANAGE || false;
				}

				return false;
			},
			
			includeDrafts: function() {
    			return this.getCurrentVariant().INCLUDE_DRAFT;
    		},

			bindTagCloud: function() {
				var oBindingParameter = this.getBindingParameter();
				var sPath = Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/tagcloud_blogs.xsjs";
				var oController = this;
				
				var aParameter = [];
    			if (!this.includeDrafts()) {
    				aParameter.push("EXCL_STATUS=sap.ino.config.CAMP_DRAFT");
    			}
    			if (oBindingParameter && oBindingParameter.TagIds) {
    				jQuery.each(oBindingParameter.TagIds, function(key, iValue) {
    					aParameter.push("TAG=" + iValue);
    				});
    			}
    			if (oBindingParameter.SearchTerm && oBindingParameter.SearchTerm.length > 0) {
    				aParameter.push("SEARCHTERM=" + oBindingParameter.SearchTerm);
    			}
    			if (oBindingParameter.VariantFilter) {
    				aParameter.push("FILTERNAME=" + oBindingParameter.VariantFilter);
    			}
    			if (aParameter.length > 0) {
    				sPath = sPath + "?" + aParameter.join("&");
    			}
    			
				// check whether refresh is necessary
				if (this._lastTagServicePath !== sPath) {
					var oTagModel = new JSONModel(sPath);
					var sOtherTxt = this.getText("BLOG_LIST_MIT_FILTER_TAG_OTHER");
					oTagModel.attachRequestCompleted(null, function() {
						var oRankedTag = oTagModel.getData().RANKED_TAG;
						var oTagData = oController.groupByTagGroup(oRankedTag, oController.getViewProperty("/List/TAGS"), sOtherTxt);
						oController.setTagCloudProperty(oTagData, oTagModel.getData().WITHOUT_GROUP !== "X");
						oTagModel.setData({
							"RANKED_TAG": oTagData
						}, false);
						this.setFilterModel(oTagModel, "tag");
					}, this);
				}
				// swap last path for refresh checking
				this._lastTagServicePath = sPath;
			},

			onBlogItemPress: function(oEvent) {
			    if(this._bIsTokenPressed){
			        this._bIsTokenPressed = false;
			        return;
			    }
				var oItem = oEvent.getSource();
				var oContext = oItem.getBindingContext("data");
				if (oContext) {
					this.navigateTo("blog-display", {
						id: oContext.getProperty("ID")
					});
				}
			},

			updateFilter: function() {
				var sVariant = this.getViewProperty("/List/VARIANT");
				var sCampaign = this.getViewProperty("/List/CAMPAIGN");

				var bIsManaged = this._check4ManagingList();
				var aFilters = [];

				this.setFilter([]);

				if (sCampaign && sCampaign !== "0") {
					aFilters.push(new Filter("CAMPAIGN_ID", FilterOperator.EQ, sCampaign));
				}

				if (aFilters.length > 0) {
					this.addFilter(new Filter({
						filters: aFilters,
						and: true
					}));
				}
			},
			
			onFilterCampaignChange: function(oEvent) {
				var oSource = oEvent.getSource().getSelectedItem();
				if (oSource.getSelectedItem) {
					oSource = oSource.getSelectedItem();
				}
				var sKey = oSource.getProperty("key");
				this.setViewProperty("/List/CAMPAIGN", sKey);
				this.navigateIntern(this.getQuery(), true, true);
			},
			
			resetFilter: function() {
				this.setViewProperty("/List/CAMPAIGN", undefined);
				BaseController.prototype.resetFilter.apply(this, arguments);
			},

			getQuery: function() {
				var oQuery = {};

				var sSort = this.getViewProperty("/List/SORT");
				var sOrder = this.getViewProperty("/List/ORDER");
				var sSearchTerm = this.getViewProperty("/List/SEARCH");
				var sCampaign = this.getViewProperty("/List/CAMPAIGN");
				var aTags = this.getViewProperty("/List/TAGS");

				if (sSort) {
					oQuery.sort = sSort;
					if (sOrder) {
						oQuery.order = sOrder;
					}
				}
				if (sSearchTerm) {
					oQuery.search = sSearchTerm;
				}
				if (sCampaign) {
					oQuery.campaign = sCampaign;
				}
				if (aTags && aTags.length > 0) {
					oQuery.tags = JSON.stringify(aTags);
				}

				return oQuery;
			},

			setParameters: function(oQuery, oVariant) {
				oQuery = oQuery || {};

				var oSorter = this.getSort(oVariant.DEFAULT_SORT);

				var sSort = this.checkSort(oQuery, oVariant.DEFAULT_SORT);
				var sOrder = this.checkOrder(oQuery, oSorter.DEFAULT_ORDER);
				var aTags = this.checkTags(oQuery.tags);
				var sCampaign = oQuery.campaign;

				this.setViewProperty("/List/VARIANT", oVariant.ACTION);
				this.setViewProperty("/List/SORT", sSort);
				this.setViewProperty("/List/ORDER", sOrder);
				this.setViewProperty("/List/TAGS", aTags);
				this.setViewProperty("/List/IS_TAGS_SELECTION", aTags.length > 0);
				this.setViewProperty("/List/SEARCH", oQuery.search);
				this.setViewProperty("/List/MANAGE", oVariant.MANAGE);
				this.setViewProperty("/List/CAMPAIGN", sCampaign);
			},

			getItemTemplate: function() {
				return this.getFragment("sap.ino.vc.blog.fragments.ListItem");
			},

			createFilterController: function() {
				return sap.ui.controller("sap.ino.vc.blog.Filter");
			},

			createFilterView: function() {
				return this.createView({
					type: ViewType.XML,
					viewName: "sap.ino.vc.blog.Filter",
					controller: this._oFilterController
				});
			},

			createState: function(sRoute, sVariant, oQuery, bPortrait) {
				var oState = BaseController.prototype.createState.apply(this, arguments);
				oState.query.campaign = oQuery.campaign;

				return oState;
			},

			onOpenCampaign: function(oEvent) {
				this.navigateTo("campaign", {
					id: oEvent.getParameter("campaignId")
				});
			},

			onSetFilterBarVisible: function() {
				this.bindTagCloud();
			},
			
			getAdditionalFilter: function() {
				var oFragment = this.createFragment("sap.ino.vc.blog.fragments.FilterItems", this.createIdForFilterElement());
				return oFragment;
			},

			reloadData: function() {
				this.bindList();
				this.bindTagCloud();
			},

			onApplyFilter: function() {
				var oFilterDialog = this.getFilterDialog();
				if (JSON.stringify(this.getViewModelBackup()) === JSON.stringify(this.getViewProperty("/"))) {
					oFilterDialog.close();
					return;
				}

				var oQuery = this.getQuery();

				var sVariant = this.getViewProperty("/List/VARIANT");
				if (sVariant === this.getListProperty("/Variants/DEFAULT_VARIANT")) {
					this.navigateTo(this.getRoute(false), {
						query: oQuery
					}, true, true);
				} else {
					this.navigateTo(this.getRoute(true), {
						variant: sVariant,
						query: oQuery
					}, true, true);
				}

				oFilterDialog.close();
			},

			formatObjectListVariantsVisible: function(bIsManage) {
				if (
					// user has general backoffice privileges and variant has manage flag
					!bIsManage || (bIsManage && Configuration.hasCurrentUserPrivilege("sap.ino.ui::campaign_manager"))) {
					return true;
				}
				return false;
			},

			initApplicationObjectChangeListeners: function() {
				var that = this;
				that._bListChanged = false;
				var aActions = ["create", "del", "modifyAndSubmit", "submit", "majorPublishSubmit", "publishSubmit", "unPublishSubmit"];

				var fnAOChangeListener = function(oEvent) {
					var sAction = oEvent.getParameter("actionName");
					if (sAction && aActions.indexOf(sAction) > -1 && oEvent.getParameter("object").getMetadata().getName() ===
						"sap.ino.commons.models.object.Blog") {
						that._bListChanged = true;
					}
				};

				ApplicationObjectChange.attachChange(ApplicationObjectChange.Action.Create, fnAOChangeListener);
				ApplicationObjectChange.attachChange(ApplicationObjectChange.Action.Del, fnAOChangeListener);
				ApplicationObjectChange.attachChange(ApplicationObjectChange.Action.Action, fnAOChangeListener);
			},
			
			showPopupTagCard: function(oEvent) {
    			if (!this._oPopover) {
    				this._oPopover = sap.ui.xmlfragment("sap.ino.vc.tag.fragments.TagCardPopover", this);
    				this.getView().addDependent(this._oPopover);
    			}
                var oToken = oEvent.getSource();
                var sPath = "/SearchTagsAll(searchToken='',ID=" + oToken.getKey() + ")";
                var oDatamodel = this.getModel("data");
                var that = this;
                oDatamodel.read(sPath, {
                    async: true,
                    success: function(oData) {
                        var oModel = new JSONModel();
                        oModel.setData(oData);
                        that._oPopover.setModel(oModel, "Tag");
                        jQuery.sap.delayedCall(0, that, function() {
            				that._oPopover.openBy(oToken);
            			});
                    }
                });
    		}
			
		}));

	oBlogList.list = mList;
	oBlogList.routes = mBlogRoutes;

	return oBlogList;
});
}; // end of sap/ino/vc/blog/List.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.blog.ListPage.controller') ) {
jQuery.sap.declare('sap.ino.vc.blog.ListPage.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/vc/blog/ListPage.controller",[
    "sap/ino/vc/blog/List.controller",
    "sap/ino/vc/commons/TopLevelPageFacet"
], function (BlogList,
             TopLevelPageFacet) {
    "use strict";
   
    return BlogList.extend("sap.ino.vc.blog.ListPage", jQuery.extend({}, TopLevelPageFacet, {
        /* Controller reacts when these routes match */ 
        routes : ["bloglist", "bloglistvariant"],
        
        onRouteMatched : function(oEvent) {
            this.setGlobalFilter([]);
            this.setHelp("BLOG_LIST");
            this.show(oEvent);
        }
        
   }));
});
}; // end of sap/ino/vc/blog/ListPage.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.campaign.BackOfficeHome.controller') ) {
jQuery.sap.declare('sap.ino.vc.campaign.BackOfficeHome.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.TextAlign'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/campaign/BackOfficeHome.controller",[
    "sap/ino/vc/commons/BaseObjectController",
    "sap/ino/commons/application/Configuration",
    "sap/ino/vc/iam/mixins/IdentityProfileMixin",
    "sap/ui/model/Sorter",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/ui/model/json/JSONModel",
    "sap/ino/vc/evaluation/EvaluationFormatter",
    "sap/ui/core/TextAlign",
    "sap/ino/vc/idea/mixins/AssignmentActionMixin",
    "sap/ino/vc/idea/mixins/ChangeStatusActionMixin",
    "sap/ino/vc/idea/mixins/DeleteActionMixin",
    "sap/ino/vc/idea/mixins/FollowUpMixin",
    "sap/ino/vc/comment/CommentMixin",
    "sap/ino/vc/idea/mixins/MergeActionMixin",
    "sap/ino/vc/commons/mixins/TagCardMixin",
    "sap/ino/vc/blog/mixins/DeleteActionMixin",
    "sap/ino/commons/formatters/ObjectListFormatter",
    "sap/ino/vc/commons/mixins/FollowMixin",
    "sap/ino/vc/campaign/mixins/RegistrationMixin",
    "sap/ino/vc/blog/mixins/BlogCardMixin",
    "sap/ino/vc/idea/mixins/VoteMixin",
    "sap/ino/vc/idea/mixins/VolunteerMixin",
    "sap/ino/vc/follow/mixins/FeedsMixin",
    "sap/ino/vc/campaign/mixins/MilestoneMixin",
    "sap/ino/vc/idea/mixins/IdeaFormCriteriaFilterMixin"
], function(Controller, Configuration, IdentityProfileMixin,
	Sorter, Filter, FilterOperator, JSONModel, EvaluationFormatter, TextAlign,
	AssignmentActionMixin, ChangeStatusActionMixin, DeleteActionMixin, FollowUpMixin, CommentMixin, MergeActionMixin, TagCardMixin,
	BlogDeleteActionMixin, FeedFormatter, FollowMixin, RegistrationMixin, BlogCardMixin, VoteMixin, VolunteerMixin, FeedsMixin,
	MilestoneMixin, IdeaFormCriteriaFilterMixin) {
	"use strict";

	var mList = {
		"follow": {
			filterParam: "",
			filter: [new Filter("FOLLOW_UP_ID", "NE", null), new Filter("STATUS", "NE", "sap.ino.config.DRAFT")],
			sorter: new Sorter("FOLLOW_UP_DATE", false)
		},
		"coachme": {
			filterParam: "",
			filter: [new Filter("COACH_ID", "EQ", Configuration.getCurrentUser().USER_ID), new Filter("STATUS", "NE", "sap.ino.config.DRAFT")],
			sorter: new Sorter("SUBMITTED_AT", false)
		},
		"unassigned": {
			filterParam: "unassignedCoach",
			filter: [new Filter("STATUS", "NE", "sap.ino.config.DRAFT")],
			sorter: new Sorter("SUBMITTED_AT", true)
		},
		"evaldone": {
			filterParam: "evaluatedIdeas",
			filter: [new Filter("STATUS", "NE", "sap.ino.config.DRAFT")],
			sorter: new Sorter("LAST_PUBL_EVAL_AT", true)
		}
	};
	var mBlogList = {
		"published": {
			filterParam: "publishedBlogs",
			filter: [],
			sorter: new Sorter("PUBLISHED_AT", true),
			name: "publish"
		},
		"draft": {
			filterParam: "draftBlogs",
			filter: [],
			sorter: new Sorter("CHANGED_AT", true),
			name: "draft"
		},
		"all": {
			filterParam: "",
			filter: [],
			sorter: new Sorter("PUBLISHED_AT", true),
			name: "all"
		}
	};

	var mIdentityProfile = {
		Backoffice: {
			PATH_TEMPLATE: "/CampaignEntityCount",
			//SHOW_BUTTONS_AUTH: true,
			SHOW_CRTBLOG_AUTH: true,
			Binding: [{
				ICON: "sap-icon://lightbulb",
				LINK_TEXT: "PROFILE_LNK_IDEAS_COACHED",
				COUNT: "IDEAS_COACHED_BY_ME",
				Route: {
					NAME: "campaign-idealistvariant",
					QUERY: {
						variant: "coachme"
					}
				},
				ROLES: ["camp_instance_coach_role", "camp_instance_resp_coach_role"]
            }, {
				ICON: "sap-icon://lightbulb",
				LINK_TEXT: "PROFILE_LNK_IDEAS_UNASSIGNED",
				COUNT: "UNASSIGNED_IDEAS_COUNT",
				Route: {
					NAME: "campaign-idealistvariant",
					QUERY: {
						variant: "unassigned"
					}
				},
				ROLES: ["camp_instance_mgr_role", "camp_instance_coach_role", "camp_instance_resp_coach_role"]
            }, {
				ICON: "sap-icon://lightbulb",
				LINK_TEXT: "PROFILE_LNK_IDEAS_EVALUATED",
				COUNT: "EVALUATED_IDEAS",
				Route: {
					NAME: "campaign-idealistvariant",
					QUERY: {
						variant: "evaldone"
					}
				},
				ROLES: ["camp_instance_mgr_role", "camp_instance_coach_role", "camp_instance_resp_coach_role"]
            }, {
				ICON: "sap-icon://lightbulb",
				LINK_TEXT: "PROFILE_LNK_IDEA_FOLLOWUP",
				COUNT: "FOLLOW_UP_IDEAS",
				Route: {
					NAME: "campaign-idealistvariant",
					QUERY: {
						variant: "follow"
					}
				},
				ROLES: ["camp_instance_mgr_role", "camp_instance_coach_role", "camp_instance_resp_coach_role"]
            }, {
				ICON: "sap-icon://lightbulb",
				LINK_TEXT: "PROFILE_LNK_QUALIFIED_IDEAS_FOR_REWARDS",
				COUNT: "QUALIFIED_IDEAS_FOR_REWARDS",
				Route: {
					NAME: "rewardlistvariant",
					QUERY: {
						variant: "rewardqualified"
					}
				},
				ROLES: ["camp_instance_mgr_role"]
            }, {
				ICON: "sap-icon://lightbulb",
				LINK_TEXT: "PROFILE_LNK_EVALUATION_PENDING_BY_ME",
				COUNT: "EVALUATION_PENDING_BY_ME",
				Route: {
					NAME: "campaign-idealistvariant",
					QUERY: {
						variant: "manage"
					}
				},
				ROLES: ["camp_instance_coach_role", "camp_instance_resp_coach_role"]
            }, {
				ICON: "sap-icon://lightbulb",
				LINK_TEXT: "PROFILE_LNK_IDEAS_MANAGED",
				COUNT: "IDEAS_MANAGED_BY_ME",
				Route: {
					NAME: "campaign-idealistvariant",
					QUERY: {
						variant: "manage"
					}
				},
				ROLES: ["camp_instance_mgr_role", "camp_instance_coach_role", "camp_instance_resp_coach_role"]
            }, {
                ICON: "sap-icon://lightbulb",
                LINK_TEXT: "IDEA_LIST_MIT_COMPLETED",
                COUNT: "COMPLETED_IDEA_COUNT",
                Route: {
                    NAME: "campaign-idealistvariant",
                    QUERY: {
						variant: "managedcompleted"
					}
                },
                ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role"]
            },{
				ICON: "sap-icon://hr-approval",
				LINK_TEXT: "REGISTER_APPR_LIST_TIT", // my pending approvals
				COUNT: "MY_PENDING_APPR_COUNT",
				Route: {
					NAME: "campaign-registerapprovallistvariant",
					QUERY: {
						variant: "pending"
					}
				},
				ROLES: ["camp_instance_mgr_role"]
            }]
		}
	};

	var mReport = {
		"UnchangedIdeasFrame": "ReportTemplates('sap.ino.config.7')",
		"CampaignActivitiesFrame": "ReportTemplates('sap.ino.config.14')"
	};

	// mapping of container and content ids for each layout size
	var mLayout = {
		XS: {
			centerProfileContainer: "identityProfileFragment--identityProfile",
			centerCommentContainer: "ideasCommentFragment--campaignComment",
			centerTagsContainer: "campaignTagsFragment--campaignTags",
			centerReportUnchangedIdeasContainer: "unchangedIdeasFragment--unchangedIdeas",
			centerReportUnchangedIdeasSplitContainer: undefined,
			leftReportUnchangedIdeasContainer: undefined,
			rightReportUnchangedIdeasContainer: undefined,
			centerReportCampaignActivitiesContainer: "campaignActivitiesFragment--campaignActivities",
			centerReportCampaignActivitiesSplitContainer: undefined,
			leftReportCampaignActivitiesContainer: undefined,
			rightReportCampaignActivitiesContainer: undefined
		},
		S: {
			leftProfileContainer: "identityProfileFragment--identityProfile",
			centerCommentContainer: "ideasCommentFragment--campaignComment",
			centerTagsContainer: "campaignTagsFragment--campaignTags",
			centerReportCampaignActivitiesContainer: "campaignActivitiesFragment--campaignActivities",
			centerReportUnchangedIdeasContainer: "unchangedIdeasFragment--unchangedIdeas"
		},
		M: {
			leftProfileContainer: "identityProfileFragment--identityProfile",
			centerCommentContainer: "ideasCommentFragment--campaignComment",
			centerTagsContainer: "campaignTagsFragment--campaignTags",
			centerReportCampaignActivitiesSplitContainer: "campaignActivitiesFragment--campaignActivities",
			centerReportUnchangedIdeasSplitContainer: "unchangedIdeasFragment--unchangedIdeas"
		},
		L: {
			leftProfileContainer: "identityProfileFragment--identityProfile",
			leftCommentContainer: "ideasCommentFragment--campaignComment",
			leftTagsContainer: "campaignTagsFragment--campaignTags",
			leftReportCampaignActivitiesContainer: "campaignActivitiesFragment--campaignActivities",
			leftReportUnchangedIdeasContainer: "unchangedIdeasFragment--unchangedIdeas"
		},
		XL: {
			leftProfileContainer: "identityProfileFragment--identityProfile",
			leftCommentContainer: "ideasCommentFragment--campaignComment",
			leftTagsContainer: "campaignTagsFragment--campaignTags",
			rightReportCampaignActivitiesContainer: "campaignActivitiesFragment--campaignActivities",
			rightReportUnchangedIdeasContainer: "unchangedIdeasFragment--unchangedIdeas"
		}
	};

	return Controller.extend("sap.ino.vc.campaign.BackOfficeHome", jQuery.extend({}, IdentityProfileMixin, AssignmentActionMixin,
		ChangeStatusActionMixin, FollowUpMixin, DeleteActionMixin, CommentMixin, MergeActionMixin, TagCardMixin, BlogDeleteActionMixin,
		FollowMixin, RegistrationMixin, BlogCardMixin, VoteMixin, VolunteerMixin, FeedFormatter, FeedsMixin, MilestoneMixin,
		IdeaFormCriteriaFilterMixin, {

			// id of control that get initial focus
			//initialFocus: "backofficeButton--backofficeToogle",
			initialFocus: ["backofficeButton--backofficeToogle", "identityProfileFragment--createBlog"],
			formatter: jQuery.extend({
				unchangedIdeasColor: function(iCategory) {
					switch (iCategory) {
						case 0:
							return 'Good';
						case 1:
							return 'Neutral';
						case 2:
							return 'Critical';
						default:
							return 'Error';
					}
				},
				unchangedIdeasLabel: function(iCategory) {
					switch (iCategory) {
						case 0:
							return '1';
						case 1:
							return '<= 7';
						case 2:
							return '<= 30';
						default:
							return '> 30';
					}
				}

			}, this.formatter, EvaluationFormatter, FollowUpMixin.followUpMixinFormatter, FeedFormatter),

			onInit: function() {
				Controller.prototype.onInit.apply(this, arguments);
				this.aBusyControls = [this.getView()];
				this._sBOHResizeIdeaListId = this.attachListControlResized(this.byId("ideasFragment--ideasList"));
			},

			onExit: function() {
				Controller.prototype.onExit.apply(this, arguments);
				this.detachListControlResized(this._sBOHResizeIdeaListId);
			},

			bindViewData: function() {
				this.getModel("view").setProperty("/CAMPAIGN_COMMENT_NAVIGATION_SECTION", "campaignSectionComments");
				var sIdeaViewKey;
				if (this.getModel("device").getProperty("/system/phone")) {
					sIdeaViewKey = this.byId("ideasFragment--sapInoCampHomeIdeasSelect").getSelectedKey();
				} else {
					sIdeaViewKey = this.byId("ideasFragment--sapInoCampHomeIdeasButtons").getSelectedKey();
				}
				this._sIdeaViewKey = sIdeaViewKey || Object.keys(mList)[0];
				this._bindIdeas(this._sIdeaViewKey);
				//For Blog 
				var sBlogViewKey;
				if (this.getModel("device").getProperty("/system/phone")) {
					sBlogViewKey = this.byId("blogsFragment--sapInoCampHomeBlogsSelect").getSelectedKey();
				} else {
					sBlogViewKey = this.byId("blogsFragment--sapInoCampHomeBlogsButtons").getSelectedKey();
				}
				this._sBlogViewKey = sBlogViewKey || Object.keys(mBlogList)[0];
				if (!this.getModel("component").getProperty("/SHOW_BACKOFFICE_BLOG")) { //Coach
					this._sBlogViewKey = Object.keys(mBlogList)[2];
				}

				this._bindBlogs(this._sBlogViewKey);

				this._bindUnchangedIdeas();
				this._bindActivities();
				this._bindComments();
				//this._bindFeed();
				this._bindTags();
			},

			onAfterRendering: function() {
				var oUnchangedIdeas = this.byId("unchangedIdeasFragment--UnchangedIdeasFrame");
				var oCampaignActivities = this.byId("campaignActivitiesFragment--CampaignActivitiesFrame");
				var oVizProperties = {
					title: {
						visible: false
					},
					legendGroup: {
						layout: {
							position: "auto"
						}
					},
					categoryAxis: {
						title: {
							visible: false
						},
						label: {
							visible: false
						}
					},
					valueAxis: {
						title: {
							visible: false
						}
					}
				};
				if (oUnchangedIdeas) {
					oUnchangedIdeas.setVizProperties(oVizProperties);
				}
				if (oCampaignActivities) {
					oCampaignActivities.setVizProperties(oVizProperties);
				}

				//vizFrame register the click event to navigate to report
				if (!this.getModel("device").getProperty("/system/phone")) {
					if (!oUnchangedIdeas.aBindParameters) {
						oUnchangedIdeas.attachBrowserEvent("click", this.onNavigateToReport, this);
					}

					if (!oCampaignActivities.aBindParameters) {
						oCampaignActivities.attachBrowserEvent("click", this.onNavigateToReport, this);
					}
				}
			},

			getList: function() {
				return this.byId("ideasFragment--ideasList");
			},

			// it is guaranteed that the data is already available, it is not guaranteed that the view is already rendered
			show: function(oParentView) {
				this._oParentView = oParentView;
				this.bindViewData();
				this.setIdentityProfileBinding();

				this.getList().attachUpdateFinished(this._onListUpdateFinished, this);
				this.bindMilestone(this.getCampaignId());
			},

			_onListUpdateFinished: function() {
				// accessibility: we need to update the aria property like this due to (for us) not usable behaviour of UI5
				var oList = this.getList();

				oList.$().find(".sapMListUl").attr("role", "list");

				var aItems = oList.$().find("li");
				jQuery.each(aItems, function(iIdx, oItemDom) {
					var $Item = jQuery(oItemDom);
					$Item.attr("role", "group");
					var $Label = $Item.find(".sapInoItemAriaLabel");
					if ($Label && $Label.length > 0) {
						$Item.attr("aria-labelledby", $Label[0].id);
					}
					var $Content = $Item.find(".sapMLIBContent");
					if ($Content && $Content.length > 0) {
						$Content.attr("role", "listitem");
					}
				});
			},

			getLayout: function(sLayout) {
				return mLayout[sLayout];
			},

			setIdentityProfileBinding: function() {
				var sCampaignName = this.getView().getBindingContext("data").getProperty("SHORT_NAME");
				var mSettings = mIdentityProfile.Backoffice;
				
				var bRegisterAutoApprove = this.getView().getBindingContext("data").getProperty("IS_REGISTER_AUTO_APPROVE");
				var oCurrentDate = new Date();
			    var oRegisterFrom = this.getView().getBindingContext("data").getProperty("REGISTER_FROM");
			    var oRegisterTo = this.getView().getBindingContext("data").getProperty("REGISTER_TO");
				var bBetweenRegisterPeriod = false;
				if(oCurrentDate >= oRegisterFrom && oCurrentDate <= oRegisterTo){
				    bBetweenRegisterPeriod = true;
				}
				if(!bRegisterAutoApprove) {
				if(bBetweenRegisterPeriod){
				  jQuery.each(mSettings.Binding, function(i,oBinding){
				      if(oBinding.COUNT === "MY_PENDING_APPR_COUNT"){
				          oBinding.VISIBLE = true; 
				      }
				  });				    
				}}
				
				
				if(this.getView().getBindingContext("data").getProperty("REWARD")){
				  jQuery.each(mSettings.Binding, function(i,oBinding){
				      if(oBinding.COUNT === "QUALIFIED_IDEAS_FOR_REWARDS"){
				          oBinding.VISIBLE = true; 
				      }
				  });
				}
				

				mSettings.HEADLINE = sCampaignName;
				mSettings.HEADLINE_BACKGROUND = "#" + (this.getView().getBindingContext("data").getProperty("COLOR_CODE") || "FFFFFF");
				mSettings.PATH = mIdentityProfile.Backoffice.PATH_TEMPLATE + "(" + this.getCampaignId() + ")";

				this.getView().setModel(new JSONModel({
					ID: this.getCampaignId(),
					NAME: sCampaignName,
					_OBJECT_TYPE_CODE: "CAMPAIGN"
				}), "contextObject");

				this.bindIdentityProfile(this.byId("identityProfileFragment--identityProfile"), mSettings, this.getCampaignId(), this.byId(
					"identityProfileFragment--identityProfileButtons"));

				if (this.getModel("data").getProperty(mSettings.PATH)) {
					var oIdentityProfileList = this.byId("identityProfileFragment--identityProfileList");
					this.getModel("data").read(mSettings.PATH, {
						success: function() {
							var oBinding = oIdentityProfileList.getBindingInfo("items");
							oIdentityProfileList.bindItems(oBinding);
						}
					});
				}
			},

			getCampaignId: function() {
				return this.getView().getBindingContext("data") ? this.getView().getBindingContext("data").getProperty("ID") : undefined;
			},

			_bindIdeas: function(sKey, iCampId) {
				var bIsPhone = this.getModel("device").getProperty("/system/phone");
				if (iCampId || this.getCampaignId() && true) {
					var sPath = "data>/IdeaMediumBackofficeSearchParams(searchToken=''," + 
					   	"searchType=" + "0" + "," +
						"tagsToken=''," + "tagsToken1=''," + "tagsToken2=''," + "tagsToken3=''," + "tagsToken4=''," +
						"filterName='" + mList[sKey].filterParam + "'," +
						"filterBackoffice=1" + this.getEmptyIdeaformFilters() + 
						",cvt='" + "" + "'," + "cvr=" + "0"  + "," +  "cvy=" + "0"  + 
						")/Results";
					var oList = this.byId("ideasFragment--ideasList");
					var disableImage = Configuration.getSystemSetting("sap.ino.config.DISABLE_IDEA_IMAGE") * 1 || Configuration.getSystemSetting("sap.ino.config.DISABLE_IDEA_IMAGE_HIDE_PHASE_BAR") * 1;					
					var template = Number(disableImage) ? this.getFragment("sap.ino.vc.idea.fragments.ManageListItemNoImage") : this.getFragment(
						"sap.ino.vc.idea.fragments.ManageListItem");
					if (bIsPhone) {
						//oList.toggleStyleClass("sapInoListWidthXXXS", true);
						//oList.toggleStyleClass("sapInoListWidthL", false);
					} else {
						//oList.toggleStyleClass("sapInoListWidthXXXS", false);
						//oList.toggleStyleClass("sapInoListWidthL", true);
					}
					oList.bindItems({
						path: sPath,
						template: template,
						sorter: mList[sKey].sorter,
						filters: mList[sKey].filter.concat(new Filter("CAMPAIGN_ID", "EQ", iCampId || this.getCampaignId())),
						length: 4
					});
					// set title accordingly to one of
					// CAMPAIGN_HOME_PANEL_IDEAS_FOLLOW CAMPAIGN_HOME_PANEL_IDEAS_UNASSIGNED CAMPAIGN_HOME_PANEL_IDEAS_COACHME CAMPAIGN_HOME_PANEL_IDEAS_EVALDONE
					var oTitle = this.byId("ideasFragment--panelTitle");
					oTitle.setText(this.getText("CAMPAIGN_HOME_PANEL_IDEAS_" + sKey.toUpperCase()));
					var bBackoffice = Configuration.hasCurrentUserPrivilege("sap.ino.ui::backoffice.access");
    			    var sOdataPath = "";
    			    if (bBackoffice) {
    			        sOdataPath = "/sap/ino/xs/rest/backoffice/odata.xsodata";
    			    } else {
    			        sOdataPath = "/sap/ino/xs/rest/community/odata.xsodata";
    			    }
					sPath = Configuration.getBackendRootURL() + sOdataPath + oList.mBindingInfos.items.binding.sPath + "?$format=json";
    				var sFilter = oList.mBindingInfos.items.binding.sFilterParams;
    				var sSorter = oList.mBindingInfos.items.binding.sSortParams;
    				var sSelect = "&$select(ID)";
    				sPath = sPath + "&" + sSorter + "&" + sFilter + sSelect;
    				var oIdeaSearchParams = new JSONModel();
    				oIdeaSearchParams.setData({
    				    path: sPath
    				});
    				sap.ui.getCore().setModel(oIdeaSearchParams, "ideaSearchParams");

				}
			},
			_bindBlogs: function(sKey) {
				if (this.getCampaignId()) {
					var bIsPhone = this.getModel("device").getProperty("/system/phone");
					var sPath = "data>/BlogSearchParams(searchToken=''," +
						"tagsToken=''," +
						"filterName='" + mBlogList[sKey].filterParam + "')/Results";
					var oBinding = {
						path: sPath,
						template: this.getFragment("sap.ino.vc.blog.fragments.ListItemHome"),
						sorter: mBlogList[sKey].sorter,
						filters: mBlogList[sKey].filter.concat(new Filter("CAMPAIGN_ID", "EQ", this.getCampaignId())),
						length: 4,
						top: 4
					};
					if (bIsPhone) {
						var oCarousel = this.byId("blogsFragment--blogsCarousel");
						oCarousel.bindAggregation("pages", oBinding);
					} else {
						var oList = this.byId("blogsFragment--blogsList");
						if (oList) {
							oList.bindItems(oBinding);
						}
					}
					var oTitle = this.byId("blogsFragment--panelBlogTitle");
					if (this.getModel("component").getProperty("/SHOW_BACKOFFICE_BLOG")) {
						oTitle.setText(this.getText("CAMPAIGN_HOME_PANEL_BLOGS_" + sKey.toUpperCase()));
					} else {
						oTitle.setText(this.getText("HOMEPAGE_PANEL_CAMPAIGN_BLOGS"));
					}
				}
			},
			_bindUnchangedIdeas: function() {
				// bind Unchanged Ideas chart
				var oUnchangedIdeasFrame = this.byId("unchangedIdeasFragment--UnchangedIdeasFrame");

				oUnchangedIdeasFrame.getParent().setVisible(true);
				var oDatamodel = this.getModel("data");
				oDatamodel.read("/CampaignUnchangedIdeas", {
					async: true,
					filters: [new Filter("CAMPAIGN_ID", "EQ", this.getCampaignId())],
					success: function(oData) {
						if (oData.results && oData.results[0]) {
							oUnchangedIdeasFrame.getParent().setVisible(true);
							oUnchangedIdeasFrame.getParent().getParent().getContent()[1].setVisible(false);

							var oModel = new sap.ui.model.json.JSONModel();
							oModel.setData(oData);
							oUnchangedIdeasFrame.setModel(oModel);
						} else {
							oUnchangedIdeasFrame.getParent().setVisible(false);
							oUnchangedIdeasFrame.getParent().getParent().getContent()[1].setVisible(true);
						}
					}
				});
			},

			_bindActivities: function() {
				// bind votes chart
				var oCampaignActivitiesFrame = this.byId("campaignActivitiesFragment--CampaignActivitiesFrame");

				oCampaignActivitiesFrame.getParent().setVisible(true);
				var oDatamodel = this.getModel("data");
				oDatamodel.read("/CampaignActivities", {
					async: true,
					filters: [new Filter("CAMPAIGN_ID", "EQ", this.getCampaignId())],
					success: function(oData) {
						if (oData.results && oData.results[0]) {
							oCampaignActivitiesFrame.getParent().setVisible(true);
							oCampaignActivitiesFrame.getParent().getParent().getContent()[1].setVisible(false);

							var oModel = new sap.ui.model.json.JSONModel();
							oModel.setData(oData);
							oCampaignActivitiesFrame.setModel(oModel);
						} else {
							oCampaignActivitiesFrame.getParent().setVisible(false);
							oCampaignActivitiesFrame.getParent().getParent().getContent()[1].setVisible(true);
						}
					}
				});

				var oTitle = this.byId("campaignActivitiesFragment--panelTitle");
				oTitle.setText(this.getText("MW_TCO_TIT_ACTIVITIES_MONTH", [this.getText("MONTH_FLD_" + (new Date().getMonth() + 1))]));
			},

			_bindComments: function() {
				var oCommentList = this.byId("ideasCommentFragment--campaginCommentList");
				var oBindingInfo = oCommentList.getBindingInfo("items");
				oCommentList.bindItems(oBindingInfo);
			},

			_bindTags: function() {
				if (!this._oTagTokenizer) {
					this._oTagTokenizer = this.byId("campaignTagsFragment--campaignTags").getContent()[0];
				}
				this.byId("campaignTagsFragment--campaignTags").getContent()[0].setBusy(true);

				var oTagsTokenizer = this.byId("campaignTagsFragment--Tags");
				var oBindingInfo = oTagsTokenizer.getBindingInfo("tokens");
				oTagsTokenizer.bindAggregation("tokens", oBindingInfo);

				var oDatamodel = this.getModel("data");
				var sPath = this.getView().getBindingContext("data").sPath + "/Tags";
				var that = this;
				oDatamodel.read(sPath, {
					async: true,
					success: function(oData) {
						var oCampaignTags = that.byId("campaignTagsFragment--campaignTags");
						oCampaignTags.removeContent(oCampaignTags.getContent()[0]);
						if (oData.results.length === 0) {
							var oHBox = new sap.m.HBox().addStyleClass("sapInoCampaignTagsContainerNoTags");
							oHBox.addItem(new sap.m.Text({
								text: that.getText("CAMPAIGN_LIST_FLD_NO_TAGS"),
								width: "100%"
							}).setTextAlign(TextAlign.Center));
							oCampaignTags.addContent(oHBox);
						} else {
							oCampaignTags.addContent(that._oTagTokenizer);
						}
						that.byId("campaignTagsFragment--campaignTags").getContent()[0].setBusy(false);
					}
				});
			},

			_bindFeed: function() {
				var self = this;
				var sPath = Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/feed.xsjs";
				var aParameter = [];
				if (this.getCampaignId()) {
					aParameter.push("campaign=" + this.getCampaignId());
					aParameter.push("top=4");
				}

				if (aParameter.length > 0) {
					sPath = sPath + "?" + aParameter.join("&");
				}

				var oFeedModel = new JSONModel(sPath);

				oFeedModel.attachRequestCompleted(null, function() {
					if (oFeedModel.oData.results) {
						jQuery.each(oFeedModel.oData.results, function(iIndex, oFeed) {
							oFeed.EVENT_AT = new Date(oFeed.EVENT_AT);
						});
					}
					var oFeedList = self.byId("feedsFragment--feedList");
					oFeedList.setModel(oFeedModel, "feed");
				}, oFeedModel);
			},

			onIdeaListTypeSelect: function(oEvent) {
				// two options: either by SegmentedButton or Select
				this._sIdeaViewKey = oEvent.getParameter("key") || oEvent.getParameter("selectedItem") && oEvent.getParameter("selectedItem").getKey();
				this._bindIdeas(this._sIdeaViewKey);
			},
			onBlogListTypeSelect: function(oEvent) {
				this._sBlogViewKey = oEvent.getParameter("key") || oEvent.getParameter("selectedItem") && oEvent.getParameter("selectedItem").getKey();
				this._bindBlogs(this._sBlogViewKey);
			},

			onOpenSubmitter: function(oEvent) {
				var oSource = oEvent.getSource();
				var iIdentityId = oSource.getBindingContext("data").getProperty("SUBMITTER_ID");
				this.openIdentityQuickView(oSource, iIdentityId);
			},

			onOpenCoach: function(oEvent) {
				var oSource = oEvent.getSource();
				var iIdentityId = oSource.getBindingContext("data").getProperty("COACH_ID");
				this.openIdentityQuickView(oSource, iIdentityId);
			},

			onNavigateToIdeas: function() {
				var iCampId = this.getCampaignId();
				if (!this._sIdeaViewKey) {
					this.navigateTo("campaign-idealist", {
						id: iCampId
					});
				} else {
					this.navigateTo("campaign-idealistvariant", {
						id: iCampId,
						variant: this._sIdeaViewKey
					});
				}
			},
			onNavigateToBlogs: function() {
				var iCampId = this.getCampaignId();
				if (!this._sBlogViewKey) {
					this.navigateTo("campaign-bloglist", {
						id: iCampId
					});
				} else {
					this.navigateTo("campaign-bloglistvariant", {
						id: iCampId,
						variant: mBlogList[this._sBlogViewKey].name
					});
				}
			},

			onItemPress: function(oEvent) {
				var oItem = oEvent.getSource();
				oItem.$().attr("aria-label", this.getText());
				var oContext = oItem.getBindingContext("data");
				if (oContext) {
					this.navigateTo("idea-display", {
						id: oContext.getProperty("ID")
					});
				}
			},

			onNavigateToComment: function() {
				var iCampId = this.getCampaignId();
				this.navigateTo("campaign-comment", {
					id: iCampId
				});
			},

			onNavigateToCampaignFeeds: function(oEvent) {
				this.navigateTo("campaign-feeds", {
					id: this.getCampaignId()
				});
			},

			onNavigateToReport: function(oEvent) {
				var iCampId = this.getCampaignId();

				//var aIdComponents = oEvent.currentTarget.id.split("--");
				var aIdComponents = ((oEvent.currentTarget && oEvent.currentTarget.id) ||
					(oEvent.oSource.sId)).split("--");
				var sFrameId = aIdComponents[aIdComponents.length - 1];

				this.navigateTo("report", {
					code: mReport[sFrameId],
					query: {
						campaign: iCampId
					}
				});
			},

			onOfficeToggle: function() {
				if (this._oParentView) {
					var oController = this._oParentView.getController();
					if (oController.switchView) {
						oController.switchView();
					}
				}
			},

			onOpenCampaignSettings: function() {
				if (this._oParentView) {
					var oController = this._oParentView.getController();
					if (oController.openCampaignSettings) {
						oController.openCampaignSettings(this.getCampaignId());
					}
				}
			},

			showPopupTagCard: function(oEvent) {
				this._bIsTokenPressed = true;
				if (!this._oPopover) {
					this._oPopover = sap.ui.xmlfragment("sap.ino.vc.tag.fragments.TagCardPopover", this);
					this.getView().addDependent(this._oPopover);
				}
				var oToken = oEvent.getSource();
				var sPath = "/SearchTagsAll(searchToken='',ID=" + oToken.getKey() + ")";
				var oDatamodel = this.getModel("data");
				var that = this;
				oDatamodel.read(sPath, {
					async: true,
					success: function(oData) {
						var oModel = new JSONModel();
						oModel.setData(oData);
						that._oPopover.setModel(oModel, "Tag");
						jQuery.sap.delayedCall(0, that, function() {
							that._oPopover.openBy(oToken);
						});
					}
				});
			},
			onEditBlog: function(oEvent) {
				var oSource = oEvent.getSource();
				this.navigateTo("blog-edit", {
					id: oSource.getBindingContext("data").getProperty("ID")
				});
			},

			onBlogItemPress: function(oEvent) {
				if (this._bIsTokenPressed) {
					this._bIsTokenPressed = false;
					return;
				}
				var oItem = oEvent.getSource();
				var oContext = oItem.getBindingContext("data");
				if (oContext) {
					this.navigateTo("blog-display", {
						id: oContext.getProperty("ID")
					});
				}
			}

		}));
});
}; // end of sap/ino/vc/campaign/BackOfficeHome.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.campaign.CampaignBlogList.controller') ) {
jQuery.sap.declare('sap.ino.vc.campaign.CampaignBlogList.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/campaign/CampaignBlogList.controller",[
    "sap/ino/vc/blog/List.controller",
    "sap/ino/vc/commons/TopLevelPageFacet",
    "sap/ui/Device",
    "sap/ino/commons/application/Configuration",
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/models/aof/PropertyModel",
    "sap/ino/vc/commons/mixins/TagGroupMixin"
], function (BlogList,
             TopLevelPageFacet,
             Device,
             Configuration,
             JSONModel,
             PropertyModel,
             TagGroupMixin) {
    "use strict";
   
    return BlogList.extend("sap.ino.vc.campaign.CampaignBlogList", jQuery.extend({}, TopLevelPageFacet, TagGroupMixin, {
        /* Controller reacts when these routes match */ 
        routes : ["campaign-bloglist", "campaign-bloglistvariant"],
        
        onInit: function () {
            BlogList.prototype.onInit.apply(this, arguments);
            this.setViewProperty("/HIDE_CAMPAIGN_FILTER", true);
            this.setViewProperty("/List/IS_FILTER_SUBPAGE", false);
        },
        
        onRouteMatched : function(oEvent) {
            this.setGlobalFilter([]);
            
            var oArguments = oEvent.mParameters.arguments;
            var oQuery = oArguments["?query"] || {};
            oQuery.campaign = oArguments.id;
            oQuery.variant = oArguments.variant;
            
            var that = this;
            // var iImageId;
            // var iSmallImageId;
            var oView = this.getView();
            
            var fnInit = function() {
                that.updateBackgroundColor(oView.getBindingContext("data").getProperty("COLOR_CODE"));
                //iImageId = oView.getBindingContext("data").getProperty("CAMPAIGN_BACKGROUND_IMAGE_ID");
                // iSmallImageId = oView.getBindingContext("data").getProperty("CAMPAIGN_SMALL_BACKGROUND_IMAGE_ID");
                // that.setBackgroundImages(iImageId, iSmallImageId);
            
                that.show((this.getRoute() === "campaign-bloglist") ? "bloglist" : "bloglistvariant" , oQuery);    
            };
            
            var fnSetVariantVisibility = function(oEvnt) {
                // set visibility information of variants in filter sidebar
                var oProps = oEvnt.getSource();
                var aVariants = that.getModel("list").getProperty("/Variants/Values");
                
                for (var i = 0; i < aVariants.length; i += 1) {
                    var oVariant = aVariants[i];
                    var bIsManage = oVariant.MANAGE || false;
                    var bVisible =                         
                        // user has general backoffice privileges and variant has manage flag
                        !bIsManage || (bIsManage && oProps.getProperty("/nodes/Root/customProperties/backofficeCampaignPrivilege"));
                    that.getModel("list").setProperty("/Variants/Values/" + i + "/VISIBLE", bVisible);
                }
                
                oProps.destroy();
            };

            this._iCampaignId = parseInt(oArguments.id, 10);

            // static privilege is needed to technically access campaign properties
            if (Configuration.hasCurrentUserPrivilege("sap.ino.ui::backoffice.access")) {
                var oTemp = new PropertyModel("sap.ino.xs.object.campaign.Campaign", this._iCampaignId, { nodes: ["Root"] }, false, fnSetVariantVisibility);
            }

            this.bindCampaignODataModel(this._iCampaignId, fnInit);
        },
        
        hasBackgroundImage: function(){
            //return true;
            return false;
        },
        
        onVariantPress : function(sVariantAction) {
            if(!Device.system.desktop) {
                //no navigation on mobile phones yet
                return;
            }
            
            var oQuery = this.getQuery();
            
            // do not show invalid filters in URL => they are ignored, but we don't want to confuse users
            this.removeInvalidFilters(oQuery);
            
            // remove campaign filter
            delete oQuery.campaign;

            if (sVariantAction) {
                this.navigateTo(this.getRoute(true), { id : this._iCampaignId, variant: sVariantAction, query : oQuery}, true, true);
            }
            else {
                this.navigateTo(this.getRoute(false), { id : this._iCampaignId, query : oQuery }, true, true);
            }
        },
        
        navigateIntern : function(oQuery, bReplace) {
            var sVariant = this.getViewProperty("/List/VARIANT");
            
            this.navigateTo(this.getCurrentRoute(), {
                "variant" : sVariant,
			    "query" : oQuery,
			    "id" : this._iCampaignId
		    }, bReplace, true);
        },
        
        
        bindTagCloud: function() {
			var oBindingParameter = this.getBindingParameter();
			var sPath = Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/tagcloud_blogs.xsjs";
			var oController = this;
			
			var aParameter = [];
			if (this._iCampaignId) {
				aParameter.push("CAMPAIGN=" + this._iCampaignId);
			}
			if (!this.includeDrafts()) {
				aParameter.push("EXCL_STATUS=sap.ino.config.CAMP_DRAFT");
			}
			if (oBindingParameter && oBindingParameter.TagIds) {
				jQuery.each(oBindingParameter.TagIds, function(key, iValue) {
					aParameter.push("TAG=" + iValue);
				});
			}
			if (oBindingParameter.SearchTerm && oBindingParameter.SearchTerm.length > 0) {
				aParameter.push("SEARCHTERM=" + oBindingParameter.SearchTerm);
			}
			if (oBindingParameter.VariantFilter) {
				aParameter.push("FILTERNAME=" + oBindingParameter.VariantFilter);
			}
			if (aParameter.length > 0) {
				sPath = sPath + "?" + aParameter.join("&");
			}
			
			// check whether refresh is necessary
			if (this._lastTagServicePath !== sPath) {
				var oTagModel = new JSONModel(sPath);
				var sOtherTxt = this.getText("BLOG_LIST_MIT_FILTER_TAG_OTHER");
				oTagModel.attachRequestCompleted(null, function() {
					var oRankedTag = oTagModel.getData().RANKED_TAG;
					var oTagData = oController.groupByTagGroup(oRankedTag, oController.getViewProperty("/List/TAGS"), sOtherTxt);
					oController.setTagCloudProperty(oTagData, oTagModel.getData().WITHOUT_GROUP !== "X");
					oTagModel.setData({
						"RANKED_TAG": oTagData
					}, false);
					this.setFilterModel(oTagModel, "tag");
				}, this);
			}
			// swap last path for refresh checking
			this._lastTagServicePath = sPath;
		},
        
        bindCampaignODataModel : function(iId, fnCallback) {
            var that = this;
            var sEntitySet = "CampaignFull";
            
            if (iId > 0) {
                this.getView().bindElement({ 
                    path : "data>/" + sEntitySet + "(" + iId + ")",
                    events: {
                        dataRequested: function() {
                            jQuery.each(that.getBusyControls(), function(iIdx, oControl) {
                                if (jQuery.type(oControl.setBusy) === "function") {
                                    oControl.setBusy(true);
                                }
                            });
                        },
                        dataReceived: function() {
                            jQuery.each(that.getBusyControls(), function(iIdx, oControl) {
                                if (jQuery.type(oControl.setBusy) === "function") {
                                    oControl.setBusy(false);
                                }
                            });
                            if (typeof fnCallback === "function") {
                                fnCallback.apply(that);
                            }
                        }
                    }
                });
                
                // if no request is needed, immediately trigger the callback
                if (typeof fnCallback === "function") {
                    var oContext = this.getView().getBindingContext("data");
                    if (oContext && oContext.getPath() === ("/" + sEntitySet + "(" + iId + ")")) {
                        fnCallback.apply(that);
                    }
                }
            }
        }
   }));
});
}; // end of sap/ino/vc/campaign/CampaignBlogList.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.campaign.CommunityHome.controller') ) {
jQuery.sap.declare('sap.ino.vc.campaign.CommunityHome.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.TextAlign'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/campaign/CommunityHome.controller",[
    "sap/ino/vc/commons/BaseObjectController",
    "sap/ui/Device",
    "sap/ui/model/json/JSONModel",
    "sap/ino/vc/commons/TopLevelPageFacet",
    "sap/ino/commons/application/Configuration",
    "sap/ui/core/ResizeHandler",
    "sap/ui/model/Sorter",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/ino/vc/evaluation/EvaluationFormatter",
    "sap/ui/core/TextAlign",
    "sap/ino/vc/comment/CommentMixin",
    "sap/ino/vc/idea/mixins/VoteMixin",
    "sap/ino/vc/commons/mixins/TagCardMixin",
    "sap/ino/vc/commons/mixins/FollowMixin",
    "sap/ino/commons/formatters/ObjectListFormatter",
    "sap/ino/vc/campaign/mixins/RegistrationMixin",
    "sap/ino/vc/campaign/mixins/CampaignProfileMixin",
    "sap/ino/vc/idea/mixins/VolunteerMixin",
    "sap/ino/vc/blog/mixins/BlogCardMixin",
    "sap/ui/core/IconPool",
    "sap/ino/vc/follow/mixins/FeedsMixin",
    "sap/ino/vc/campaign/mixins/MilestoneMixin"
], function(Controller, Device, JSONModel, TopLevelPageFacet, Configuration, ResizeHandler,
	Sorter, Filter, FilterOperator, EvaluationFormatter, TextAlign,
	CommentMixin, VoteMixin, TagCardMixin, FollowMixin, FeedFormatter, RegistrationMixin, CampaignProfileMixin, VolunteerMixin, BlogCardMixin,
	IconPool, FeedsMixin, MilestoneMixin) {
	"use strict";

	var mIdentityProfile = {
		Community: {
			PATH_TEMPLATE: "/CampaignCommunityEntityCount",
			SHOW_BUTTONS_AUTH: true,
			Binding: [{
				ICON: "sap-icon://lightbulb",
				LINK_TEXT: "PROFILE_LNK_IDEAS_ALL",
				COUNT: "ALL_IDEAS_COUNT",
				Route: {
					NAME: "campaign-idealistvariant",
					QUERY: {
						variant: "all"
					}
				},
				ROLES: ["camp_instance_mgr_role", "camp_instance_coach_role", "camp_instance_resp_coach_role", "camp_instance_part_role",
				"camp_instance_expert_role", "camp_instance_resp_expert_role"]
            },
			    {
				ICON: "sap-icon://lightbulb",
				LINK_TEXT: "PROFILE_LNK_IDEAS_OPEN_FOR_VOTING",
				COUNT: "OPEN_VOTING_IDEAS_COUNT",
				Route: {
					NAME: "campaign-idealistvariant",
					QUERY: {
						variant: "vote"
					}
				},
				ROLES: ["camp_instance_mgr_role", "camp_instance_coach_role", "camp_instance_resp_coach_role", "camp_instance_part_role"]
            }, {
				ICON: "sap-icon://lightbulb",
				LINK_TEXT: "PROFILE_LNK_IDEAS_EVA_PENDING_FOR_ME",
				COUNT: "EVALUATION_PENDING_COUNT",
				Route: {
					NAME: "campaign-idealistvariant",
					QUERY: {
						variant: "evalpending"
					}
				},
				ROLES: ["camp_instance_expert_role", "camp_instance_resp_expert_role"]
            }, {
				ICON: "sap-icon://lightbulb",
				LINK_TEXT: "PROFILE_LNK_IDEAS_OPEN_FOR_EVA",
				COUNT: "OPEN_EVALUATION_IDEA_COUNT",
				Route: {
					NAME: "campaign-idealistvariant",
					QUERY: {
						variant: "evalopen"
					}
				},
				ROLES: ["camp_instance_expert_role", "camp_instance_resp_expert_role"]
            }, {
				ICON: "sap-icon://lightbulb",
				LINK_TEXT: "PROFILE_LNK_IDEAS_EVA_BY_ME",
				COUNT: "MY_EVALUATED_IDEA_COUNT",
				Route: {
					NAME: "campaign-idealistvariant",
					QUERY: {
						variant: "eval"
					}
				},
				ROLES: ["camp_instance_expert_role", "camp_instance_resp_expert_role"]
            }
    //         , {
				// ICON: "sap-icon://lightbulb",
				// LINK_TEXT: "PROFILE_LNK_IDEAS_SUBMITTED",
				// COUNT: "SUBMITTED_IDEA_COUNT",
				// Route: {
				// 	NAME: "campaign-idealist",
				// 	QUERY: {
				// 	    variant: "myAuthoredIdeas"
				// 	}
				// },
				// ROLES: ["camp_instance_mgr_role", "camp_instance_coach_role", "camp_instance_resp_coach_role", "camp_instance_part_role",
				// 	"camp_instance_expert_role", "camp_instance_resp_expert_role"]
    //         }
            , {
				ICON: "sap-icon://lightbulb",
				LINK_TEXT: "PROFILE_LNK_IDEAS_MY",
				COUNT: "MY_ALL_IDEA_COUNT",
				Route: {
					NAME: "campaign-idealistvariant",
					QUERY: {
						variant: "my"
					}
				},
				ROLES: ["camp_instance_part_role", "camp_instance_expert_role", "camp_instance_resp_expert_role"]
            }, {
				ICON: "sap-icon://comment",
				LINK_TEXT: "PROFILE_LNK_IDEAS_MY_COMMENTS",
				COUNT: "MY_COMMENT_IDEA_COUNT",
				Route: {
					NAME: "campaign-idealistvariant",
					QUERY: {
						variant: "commented"
					}
				},
				ROLES: ["camp_instance_mgr_role", "camp_instance_coach_role", "camp_instance_resp_coach_role", "camp_instance_part_role",
					"camp_instance_expert_role", "camp_instance_resp_expert_role"]
            }, {
				ICON: "sap-icon://InoIcons/heart",
				LINK_TEXT: "PROFILE_LNK_IDEAS_MY_VOTES",
				COUNT: "MY_VOTE_IDEA_COUNT",
				Route: {
					NAME: "campaign-idealistvariant",
					QUERY: {
						variant: "voted"
					}
				},
				ROLES: ["camp_instance_mgr_role", "camp_instance_coach_role", "camp_instance_resp_coach_role", "camp_instance_part_role",
					"camp_instance_expert_role", "camp_instance_resp_expert_role"]
            }, {
				ICON: "sap-icon://survey",
				LINK_TEXT: "HOMEPAGE_PANEL_CAMPAIGN_BLOGS",
				COUNT: "CAMPAIGN_BLOGS_COUNT",
				Route: {
					NAME: "campaign-bloglist",
					QUERY: {}
				},
				ROLES: ["camp_instance_mgr_role", "camp_instance_coach_role"]
            }]
		}
	};

	var mLayout = {
		XS: {
			centerProfileContainer: "CampaignProfileFragment--campaignProfile",
			centerCampaignManagerContainer: "CampaignManagersFragment--CampaignManagers",
			centerCampaignTagsContainer: "campaignTagsFragment--campaignTags",
			rightTopCommentatorContainer: undefined,
			centerTopCommentatorSplitContainer: undefined,
			centerCommentContainer: "commentFragment--campaignComment",
			centerBlogContainer: "blogsFragment--blogCommunity"
		},
		S: {
			leftProfileContainer: "CampaignProfileFragment--campaignProfile",
			centerCampaignManagerContainer: "CampaignManagersFragment--CampaignManagers",
			centerCampaignTagsContainer: "campaignTagsFragment--campaignTags",
			rightTopCommentatorContainer: undefined,
			centerTopCommentatorSplitContainer: undefined,
			centerCommentContainer: "commentFragment--campaignComment",
			centerBlogContainer: "blogsFragment--blogCommunity"
		},
		M: {
			leftProfileContainer: "CampaignProfileFragment--campaignProfile",
			centerCampaignManagerContainer: "CampaignManagersFragment--CampaignManagers",
			centerCampaignTagsContainer: "campaignTagsFragment--campaignTags",
			rightTopCommentatorContainer: undefined,
			centerTopCommentatorSplitContainer: undefined,
			centerCommentSplitContainer: "commentFragment--campaignComment",
			centerBlogSplitContainer: "blogsFragment--blogCommunity"
		},
		L: {
			leftProfileContainer: "CampaignProfileFragment--campaignProfile",
			leftCampaignManagerContainer: "CampaignManagersFragment--CampaignManagers",
			leftCampaignTagsContainer: "campaignTagsFragment--campaignTags",
			centerTopCommentatorSplitContainer: "topCommentatorFragment--topCommentator",
			centerCommentSplitContainer: "commentFragment--campaignComment",
			centerBlogContainer: "blogsFragment--blogCommunity"
		},
		XL: {
			leftProfileContainer: "CampaignProfileFragment--campaignProfile",
			leftCampaignManagerContainer: "CampaignManagersFragment--CampaignManagers",
			leftCampaignTagsContainer: "campaignTagsFragment--campaignTags",
			rightTopCommentatorContainer: "topCommentatorFragment--topCommentator",
			rightCommentContainer: "commentFragment--campaignComment",
			rightBlogContainer: "blogsFragment--blogCommunity"
		}
	};

	return Controller.extend("sap.ino.vc.campaign.CommunityHome", jQuery.extend({}, FeedFormatter, CommentMixin, VoteMixin, TagCardMixin,
		FollowMixin,
		RegistrationMixin, CampaignProfileMixin, VolunteerMixin, BlogCardMixin, FeedsMixin, MilestoneMixin, {

			identityProfile: mIdentityProfile,

			formatter: jQuery.extend({}, this.formatter, EvaluationFormatter, FeedFormatter),

			// id of control that get initial focus
			initialFocus: ["backofficeButton--backofficeToogle", "identityProfileFragment--createIdea"],

			onInit: function() {
				Controller.prototype.onInit.apply(this, arguments);
				this.aBusyControls = [this.getView()];
			},

			bindViewData: function() {
				this.getModel("view").setProperty("/CAMPAIGN_COMMENT_NAVIGATION_SECTION", "campaignSectionComments");
				this.setViewProperty("/IS_COMMUNITY_VIEW", true);
				this._bindIdeas(this.getCampaignId());
				this._bindBlogs(this.getCampaignId());
				this._bindTopList();
				this._bindComments();
				this._bindTags();
				//this._bindFeed();
				this._bindRegisterButton();

				this.getView().setModel(new JSONModel({
					ID: this.getView().getBindingContext("data").getProperty("ID"),
					NAME: this.getView().getBindingContext("data").getProperty("SHORT_NAME"),
					_OBJECT_TYPE_CODE: "CAMPAIGN"
				}), "contextObject");
				//this._bindBannerList();
			},

			show: function(oParentView) {
				if (!this.getView().getBindingContext("data")) {
					return;
				}
				this._oParentView = oParentView;
				this.bindViewData();
				this.setIdentityProfileBinding();
				var banner = this.byId('campaignBannerList');
				banner.addEventDelegate({
					onAfterRendering: jQuery.proxy(function() {
                        $(".sapMCrslInner.sapMCrslBottomOffset").height($('#' + banner.getActivePage()).parents('.sapMCrslItem').height() + "px");					    
						$('#' + banner.getActivePage()).parents('.sapMCrslItem ').fadeIn();
						//banner.firePageChanged();
					}, this)
				});
				this.bindMilestone(this.getCampaignId());
			},

			getLayout: function(sLayout) {
				return mLayout[sLayout];
			},

			setIdentityProfileBinding: function() {
				var sCampaignName = this.getView().getBindingContext("data").getProperty("SHORT_NAME");

				var mSettings = mIdentityProfile.Community;

				mSettings.HEADLINE = sCampaignName;
				mSettings.HEADLINE_BACKGROUND = "#" + (this.getView().getBindingContext("data").getProperty("COLOR_CODE") || "FFFFFF");
				mSettings.PATH = mIdentityProfile.Community.PATH_TEMPLATE + "(" + this.getCampaignId() + ")";

				this.bindIdentityProfile(this.byId("CampaignProfileFragment--campaignProfile"), mSettings, this.getCampaignId(), this.byId(
					"CampaignProfileFragment--identityProfileButtons"));

				if (this.getModel("data").getProperty(mSettings.PATH)) {
					var oIdentityProfileList = this.byId("CampaignProfileFragment--identityProfileList");
					this.getModel("data").read(mSettings.PATH, {
						success: function() {
							var oBinding = oIdentityProfileList.getBindingInfo("items");
							oIdentityProfileList.bindItems(oBinding);
						}
					});
				}
			},

			getCampaignId: function() {
				return this.getView().getBindingContext("data") ? this.getView().getBindingContext("data").getProperty("ID") : undefined;
			},

			onResizeLayoutChange: function(sOldSize, sNewSize) {
				var that = this;

				function setVisibility(aList, iNrShown) {
					for (var i = 0; i < aList.length; i += 1) {
						if (i < iNrShown) {
							aList[i].setVisible(true);
						} else {
							aList[i].setVisible(false);
						}
					}
				}

				function setVisibleItems(sListId) {
					var oList = that.byId(sListId);
					var aItems = oList.getItems();
					switch (sNewSize) {
						case "XL":
							//campaign blogs list should be shown 3 items on the right
							if (sListId === "blogsFragment--blogsList") {
								setVisibility(aItems, 3);
							} else {
								setVisibility(aItems, 4);
							}
							break;
						case "L":
							setVisibility(aItems, 4);
							break;
						case "M":
							setVisibility(aItems, 3);
							break;
						case "S":
							setVisibility(aItems, 2);
							break;
						case "XS":
							setVisibility(aItems, 1);
							break;
						default:
							break;
							// do nothing - unknown size
					}
				}

				var bIsPhone = this.getModel("device").getProperty("/system/phone");
				if (!bIsPhone) {
					// card hiding based on size
					setVisibleItems("ideasFragment--ideasList");
					setVisibleItems("blogsFragment--blogsList");
				}
			},

			_bindIdeas: function(iCampId) {
				if (iCampId || this.getCampaignId()) {
					var bIsPhone = this.getModel("device").getProperty("/system/phone");
					var disableImage = Configuration.getSystemSetting("sap.ino.config.DISABLE_IDEA_IMAGE") * 1 || Configuration.getSystemSetting("sap.ino.config.DISABLE_IDEA_IMAGE_HIDE_PHASE_BAR") * 1;					
					var template = Number(disableImage) ? this.getFragment("sap.ino.vc.idea.fragments.CardListItemNoImage") : this.getFragment(
						"sap.ino.vc.idea.fragments.CardListItem");
					var oBinding = {
						path: "data>/IdeaMediumCommunity",
						template: template,
						sorter: new Sorter("SUBMITTED_AT", true),
						filters: [
                        new Filter("STATUS", "NE", "sap.ino.config.DRAFT"),
                        new Filter("CAMPAIGN_ID", "EQ", iCampId || this.getCampaignId())
                    ],
						length: 4,
						top: 4
					};
					var that = this;
					var sPath = "";
    				var sFilter = "";
    				var sSorter = "";
        			var sSelect = "&$select(ID)";
        			var bBackoffice = Configuration.hasCurrentUserPrivilege("sap.ino.ui::backoffice.access");
    			    var sOdataPath = "";
    			    if (bBackoffice) {
    			        sOdataPath = "/sap/ino/xs/rest/backoffice/odata.xsodata";
    			    } else {
    			        sOdataPath = "/sap/ino/xs/rest/community/odata.xsodata";
    			    }
					if (bIsPhone) {
						var oCarousel = this.byId("ideasFragment--ideasCarousel");
						oCarousel.bindAggregation("pages", oBinding);
						sPath = Configuration.getBackendRootURL() + sOdataPath + oCarousel.mBindingInfos.pages.binding.sPath + "?$format=json";
        				sFilter = oCarousel.mBindingInfos.pages.binding.sFilterParams;
        				sSorter = oCarousel.mBindingInfos.pages.binding.sSortParams;
					} else {
						var oList = this.byId("ideasFragment--ideasList");
						if (oList) {
							oList.bindItems(oBinding);
							oList.attachEventOnce("updateFinished", function() {
								that.onResizeLayoutChange(null, that._sCurrentLayout);
							});
							sPath = Configuration.getBackendRootURL() + sOdataPath + oList.mBindingInfos.items.binding.sPath + "?$format=json";
            				sFilter = oList.mBindingInfos.items.binding.sFilterParams;
            				sSorter = oList.mBindingInfos.items.binding.sSortParams;
						}
					}
					sPath = sPath + "&" + sSorter + "&" + sFilter + sSelect;
    				var oIdeaSearchParams = new JSONModel();
    				oIdeaSearchParams.setData({
    				    path: sPath
    				});
    				sap.ui.getCore().setModel(oIdeaSearchParams, "ideaSearchParams");
				}
			},
			_bindBlogs: function() {
				if (this.getCampaignId()) {
					var bIsPhone = this.getModel("device").getProperty("/system/phone");
					var sPath = "data>/BlogSearchParams(searchToken=''," +
						"tagsToken=''," +
						"filterName='publishedBlogs')/Results";
					var oBinding = {
						path: sPath,
						template: this.getFragment("sap.ino.vc.blog.fragments.ListItemHome"),
						sorter: new Sorter("PUBLISHED_AT", true),
						filters: [new Filter("CAMPAIGN_ID", "EQ", this.getCampaignId())],
						length: 4,
						top: 4
					};
					var that = this;
					if (bIsPhone) {
						var oCarousel = this.byId("blogsFragment--blogsCarousel");
						oCarousel.bindAggregation("pages", oBinding);
					} else {
						var oList = this.byId("blogsFragment--blogsList");
						if (oList) {
							oList.bindItems(oBinding);
							oList.attachEventOnce("updateFinished", function() {
								that.onResizeLayoutChange(null, that._sCurrentLayout);
							});
						}
					}
					var oTitle = this.byId("blogsFragment--panelBlogTitle");
					oTitle.setText(this.getText("HOMEPAGE_PANEL_CAMPAIGN_BLOGS"));
				}
			},

			_bindTopList: function() {
			    var bHasHomePageSetting = !!this.getView().getBindingContext("data").getProperty("MANAGER_HAS_DISPLAY_HOMEPAGE_SETTING");
				var oCampaignManagerBind = this.byId("CampaignManagersFragment--CampaignManagersList").getBindingInfo("items");
				var oCommentatorsBind = this.byId("topCommentatorFragment--topCommentatorsList").getBindingInfo("items");
				if(bHasHomePageSetting){
				   oCampaignManagerBind.sorter = [];
				   var oCampMgrFilter = new Filter("DISPLAY_HOMEPAGE","EQ",1);
				   oCampaignManagerBind.filters = oCampMgrFilter;
				}
				this.byId("CampaignManagersFragment--CampaignManagersList").bindItems(oCampaignManagerBind);
				this.byId("topCommentatorFragment--topCommentatorsList").bindItems(oCommentatorsBind);
			},

			_bindComments: function() {
				var oCommentList = this.byId("commentFragment--campaginCommentList");
				var oBindingInfo = oCommentList.getBindingInfo("items");
				oCommentList.bindItems(oBindingInfo);
			},

			_bindRegisterButton: function() {
				var oRegisterButton = this.byId("CampaignProfileFragment--registerButton");
				var oBindingInfo;
				var iCampaignId = this.getView().getBindingContext("data").getProperty("ID");
				var sPath = "/CampaignFull(" + iCampaignId + ")";
				this.getModel("data").read(sPath, {
					urlParameters: {
						"$select": "REGISTER_STATUS"
					},
					success: function() {
						oBindingInfo = oRegisterButton.getBindingInfo("enabled");
						oRegisterButton.bindProperty("enabled", oBindingInfo);
						oBindingInfo = oRegisterButton.getBindingInfo("icon");
						oRegisterButton.bindProperty("icon", oBindingInfo);
						oBindingInfo = oRegisterButton.getBindingInfo("text");
						oRegisterButton.bindProperty("text", oBindingInfo);
						oBindingInfo = oRegisterButton.getBindingInfo("visible");
						oRegisterButton.bindProperty("visible", oBindingInfo);
					}
				});
			},

			_bindBannerList: function() {
				var oBannerList = this.byId("campaignBannerList");
				//if (oBannerList.getAggregation("pages") && oBannerList.getAggregation("pages")[0]) {
					var oBinding = oBannerList.getBindingInfo("pages");
					oBannerList.setActivePage(0);
					oBannerList.firePageChanged();
					oBannerList.bindAggregation("pages", oBinding);
				//}
			},

			_bindTags: function() {
				if (!this._oTagTokenizer) {
					this._oTagTokenizer = this.byId("campaignTagsFragment--campaignTags").getContent()[0];
				}
				this.byId("campaignTagsFragment--campaignTags").getContent()[0].setBusy(true);

				var oTagsTokenizer = this.byId("campaignTagsFragment--Tags");
				var oBindingInfo = oTagsTokenizer.getBindingInfo("tokens");
				oTagsTokenizer.bindAggregation("tokens", oBindingInfo);

				var oDatamodel = this.getModel("data");
				var sPath = this.getView().getBindingContext("data").sPath + "/Tags";
				var that = this;
				oDatamodel.read(sPath, {
					async: true,
					success: function(oData) {
						var oCampaignTags = that.byId("campaignTagsFragment--campaignTags");
						oCampaignTags.removeContent(oCampaignTags.getContent()[0]);
						if (oData.results.length === 0) {
							var oHBox = new sap.m.HBox().addStyleClass("sapInoCampaignTagsContainerNoTags");
							oHBox.addItem(new sap.m.Text({
								text: that.getText("CAMPAIGN_LIST_FLD_NO_TAGS"),
								width: "100%"
							}).setTextAlign(TextAlign.Center));
							oCampaignTags.addContent(oHBox);
						} else {
							oCampaignTags.addContent(that._oTagTokenizer);
						}
						that.byId("campaignTagsFragment--campaignTags").getContent()[0].setBusy(false);
					}
				});
			},

			_bindFeed: function() {
				var self = this;
				var sPath = Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/feed.xsjs";
				var aParameter = [];
				if (this.getCampaignId()) {
					aParameter.push("campaign=" + this.getCampaignId());
					aParameter.push("top=4");
				}

				if (aParameter.length > 0) {
					sPath = sPath + "?" + aParameter.join("&");
				}

				var oFeedModel = new JSONModel(sPath);

				oFeedModel.attachRequestCompleted(null, function() {
					if (oFeedModel.oData.results) {
						jQuery.each(oFeedModel.oData.results, function(iIndex, oFeed) {
							oFeed.EVENT_AT = new Date(oFeed.EVENT_AT);
						});
					}
					var oFeedList = self.byId("feedsFragment--feedList");
					oFeedList.setModel(oFeedModel, "feed");
				}, oFeedModel);
			},

			onAfterRendering: function() {
				this._bindBannerList();
			},

			onOpenIdea: function(oEvent) {
				var iIdeaId;

				if (oEvent.getParameter("ideaId")) {
					iIdeaId = oEvent.getParameter("ideaId");
				} else {
					try {
						if (oEvent.getSource().getProperty("objectId")) {
							iIdeaId = oEvent.getSource().getProperty("objectId");
						}
					} catch (e) {
						iIdeaId = oEvent.getSource().getBindingContext("data").getProperty("ID");
					}
				}
				if (iIdeaId) {
					this.navigateTo("idea-display", {
						id: iIdeaId
					});
				}
			},

			onOpenCampaign: function() {
				// we do not want to do anything, as we are already on the campaign page
			},

			onNavigateToIdeas: function() {
				this.navigateTo("campaign-idealist", {
					id: this.getCampaignId()
				});
			},
			onNavigateToBlogs: function() {
				this.navigateTo("campaign-bloglist", {
					id: this.getCampaignId()
				});
			},
			onIdeaCommentPress: function(oEvent) {
				var iIdeaId;

				if (oEvent.getParameter("ideaId")) {
					iIdeaId = oEvent.getParameter("ideaId");
				} else {
					try {
						if (oEvent.getSource().getProperty("objectId")) {
							iIdeaId = oEvent.getSource().getProperty("objectId");
						}
					} catch (e) {
						iIdeaId = oEvent.getSource().getBindingContext("data").getProperty("ID");
					}
				}
				if (iIdeaId) {
					this.navigateTo("idea-display", {
						id: iIdeaId,
						query: {
							section: "sectionComments"
						}
					});
				}
			},
			onCardItemPress: function(oEvent) {
				var oItem = oEvent.getSource();
				var oIdeaCard = oItem.getAggregation("content")[0];
				oIdeaCard.getFocusDomRef().focus();
			},

			onNavigateToComment: function() {
				this.navigateTo("campaign-comment", {
					id: this.getCampaignId()
				});
			},
			onNavigateToCampaignFeeds: function() {
				this.navigateTo("campaign-feeds", {
					id: this.getCampaignId()
				});
			},
			onOfficeToggle: function() {
				if (this._oParentView) {
					var oController = this._oParentView.getController();
					oController.switchView();
				}
			},

			onOpenCampaignSettings: function() {
				if (this._oParentView) {
					var oController = this._oParentView.getController();
					if (oController.openCampaignSettings) {
						oController.openCampaignSettings(this.getCampaignId());
					}
				}
			},

			showPopupTagCard: function(oEvent) {
				this._bIsTokenPressed = true;
				if (!this._oPopover) {
					this._oPopover = sap.ui.xmlfragment("sap.ino.vc.tag.fragments.TagCardPopover", this);
					this.getView().addDependent(this._oPopover);
				}
				var oToken = oEvent.getSource();
				var sPath = "/SearchTagsAll(searchToken='',ID=" + oToken.getKey() + ")";
				var oDatamodel = this.getModel("data");
				var that = this;
				oDatamodel.read(sPath, {
					async: true,
					success: function(oData) {
						var oModel = new JSONModel();
						oModel.setData(oData);
						that._oPopover.setModel(oModel, "Tag");
						jQuery.sap.delayedCall(0, that, function() {
							that._oPopover.openBy(oToken);
						});
					}
				});
			},

			onNavigateToManagers: function() {
				this.navigateTo("campaign-managerlist", {
					id: this.getCampaignId()
				});
			},

			onBlogItemPress: function(oEvent) {
				if (this._bIsTokenPressed) {
					this._bIsTokenPressed = false;
					return;
				}
				var oItem = oEvent.getSource();
				var oContext = oItem.getBindingContext("data");
				if (oContext) {
					this.navigateTo("blog-display", {
						id: oContext.getProperty("ID")
					});
				}
			},

			onChangePage: function(event) {
				var parameters = event.getParameters();
				var newPage = parameters.newActivePageId;
				$(".sapMCrslInner.sapMCrslBottomOffset").height($('#' + newPage).parents('.sapMCrslItem').height() + "px");
				$('#' + newPage).parents('.sapMCrslItem').fadeIn().siblings().hide().fadeIn();
			}

		}));

});
}; // end of sap/ino/vc/campaign/CommunityHome.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.campaign.List.controller') ) {
jQuery.sap.declare('sap.ino.vc.campaign.List.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.ViewType'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/campaign/List.controller",[
    "sap/ino/vc/commons/BaseVariantListController",
    "sap/ino/controls/OrientationType",
    "sap/ui/Device",
    "sap/ui/model/Sorter",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/application/Configuration",
    "sap/ino/vc/commons/TopLevelPageFacet",
    "sap/ino/commons/formatters/ObjectListFormatter",
    "sap/ino/vc/commons/mixins/TagGroupMixin",
    "sap/ino/vc/commons/mixins/FollowMixin",
    "sap/ino/vc/campaign/mixins/RegistrationMixin",
    "sap/ino/vc/commons/mixins/ExtensibilityMixin",
    "sap/ui/core/mvc/ViewType"
], function(BaseController, OrientationType, Device, Sorter, Filter, FilterOperator, JSONModel, Configuration, TopLevelPageFacet,
	ObjectListFormatter, TagGroupMixin, FollowMixin, RegistrationMixin, ExtensibilityMixin, ViewType) {
	"use strict";

	var mOrder = {
		ASC: "ASC",
		DESC: "DESC"
	};

	var mSort = {
		NONE: '',
		SEARCH_SCORE: "SEARCH_SCORE",
		NAME: "tolower(NAME)",
		REGISTER_TO: "REGISTER_TO",
		SUBMIT_TO: "SUBMIT_TO",
		VALID_TO: "VALID_TO",
		CREATED_AT: "CREATED_AT",
		CHANGED_AT: "CHANGED_AT"
	};

	var mVariant = {
		ALL: "all",
		ACTIVE: "active",
		OPEN: 'open',
		FUTURE: "future",
		PAST: "past",
		MANAGE: "manage",
		DRAFT: "draft",
		PUBLISH: "publish",
		SUBMITTABLE: "submittable",
		REGISTERED: "registered"
	};

	var mFilter = {
		NONE: undefined,
		ACTIVE: "activeCampaigns",
		OPEN: "openCampaigns",
		FUTURE: "futureCampaigns",
		PAST: "pastCampaigns",
		MANAGE: "managedCampaigns",
		DRAFT: "draftCampaigns",
		PUBLISH: "publishCampaigns",
		SUBMITTABLE: "submittableCampaigns",
		REGISTERED: "registeredCampaigns"
	};

	var mListContext = {
		CAMPAIGN: "campaignlist",
		CAMPAIGN_VARIANT: "campaignlistvariant"
	};
	var mListBlogVariant = {
		NULL: "",
		YES: "1",
		NO: "0"
	};
	var mList = {
		ADJUSTMENT_TITLE: "IDEA_LIST_TIT_ADJUSTMENT",
		NAME: "CAMPAIGN_LIST_TIT_NAME",
		MANAGEDNAME: "CAMPAIGN_LIST_TIT_MANAGEDNAME",
		Filter: {},
		QuickSorter: [
			{
				TEXT: "SORT_MIT_MOST_RECENT",
				ACTION: mSort.CREATED_AT,
				DEFAULT_ORDER: mOrder.DESC
            }, {
				TEXT: "SORT_MIT_LATEST_CHANGE",
				ACTION: mSort.CHANGED_AT,
				DEFAULT_ORDER: mOrder.DESC
            }
		],
		Sorter: {
			Values: [{
				TEXT: "SORT_MIT_CAMPAIGN_END",
				ACTION: mSort.VALID_TO,
				DEFAULT_ORDER: mOrder.ASC
            }, {
				TEXT: "SORT_MIT_REGISTER_TO",
				ACTION: mSort.REGISTER_TO,
				DEFAULT_ORDER: mOrder.ASC
            }, {
				TEXT: "SORT_MIT_SUBMIT_TO",
				ACTION: mSort.SUBMIT_TO,
				DEFAULT_ORDER: mOrder.ASC
            }, {
				TEXT: "SORT_MIT_TITLE",
				ACTION: mSort.NAME,
				DEFAULT_ORDER: mOrder.ASC
            }],
			Limit: 2
		},
		Order: {
			Values: [{
				TEXT: "ORDER_MIT_ASC",
				ACTION: mOrder.ASC
		    }, {
				TEXT: "ORDER_MIT_DESC",
				ACTION: mOrder.DESC
		    }]
		},
		Variants: {
			DEFAULT_VARIANT: mVariant.ALL,
			TITLE: "CAMPAIGN_LIST_TIT_VARIANTS",
			Values: [{
				TEXT: "CAMPAIGN_LIST_MIT_ALL",
				ACTION: mVariant.ALL,
				FILTER: mFilter.NONE,
				INCLUDE_DRAFT: false,
				DEFAULT_SORT: mSort.NAME,
				COUNT: "0",
				VISIBLE: true
            }, {
				TEXT: "CAMPAIGN_LIST_MIT_ACTIVE",
				ACTION: mVariant.ACTIVE,
				FILTER: mFilter.ACTIVE,
				INCLUDE_DRAFT: false,
				DEFAULT_SORT: mSort.SUBMIT_TO,
				HIERARCHY_LEVEL: "1",
				COUNT: "0",
				VISIBLE: true
            }, {
				TEXT: "CAMPAIGN_LIST_MIT_OPEN",
				ACTION: mVariant.OPEN,
				FILTER: mFilter.OPEN,
				INCLUDE_DRAFT: false,
				DEFAULT_SORT: mSort.SUBMIT_TO,
				HIERARCHY_LEVEL: "1",
				COUNT: "0",
				VISIBLE: true
            }, {
				TEXT: "CAMPAIGN_LIST_MIT_FUTURE",
				ACTION: mVariant.FUTURE,
				FILTER: mFilter.FUTURE,
				INCLUDE_DRAFT: false,
				DEFAULT_SORT: mSort.SUBMIT_TO,
				HIERARCHY_LEVEL: "1",
				COUNT: "0",
				VISIBLE: true
            }, {
				TEXT: "CAMPAIGN_LIST_MIT_CLOSED",
				ACTION: mVariant.PAST,
				FILTER: mFilter.PAST,
				INCLUDE_DRAFT: false,
				DEFAULT_SORT: mSort.SUBMIT_TO,
				HIERARCHY_LEVEL: "1",
				COUNT: "0",
				VISIBLE: true
            }, {
				TEXT: "CAMPAIGN_LIST_MIT_REGISTERED",
				ACTION: mVariant.REGISTERED,
				FILTER: mFilter.REGISTERED,
				INCLUDE_DRAFT: false,
				DEFAULT_SORT: mSort.REGISTER_TO,
				HIERARCHY_LEVEL: "1",
				COUNT: "0",
				VISIBLE: true
            }, {
				TEXT: "CAMPAIGN_LIST_MIT_MANAGE",
				ACTION: mVariant.MANAGE,
				FILTER: mFilter.MANAGE,
				INCLUDE_DRAFT: true,
				DEFAULT_SORT: mSort.SUBMIT_TO,
				VISIBLE: true,
				COUNT: "0",
				MANAGE: true
            }, {
				TEXT: "CAMPAIGN_LIST_MIT_DRAFT",
				ACTION: mVariant.DRAFT,
				FILTER: mFilter.DRAFT,
				INCLUDE_DRAFT: true,
				DEFAULT_SORT: mSort.SUBMIT_TO,
				VISIBLE: true,
				HIERARCHY_LEVEL: "1",
				COUNT: "0",
				MANAGE: true
            }, {
				TEXT: "CAMPAIGN_LIST_MIT_PUBLISH",
				ACTION: mVariant.PUBLISH,
				FILTER: mFilter.PUBLISH,
				INCLUDE_DRAFT: false,
				DEFAULT_SORT: mSort.VALID_TO,
				VISIBLE: true,
				HIERARCHY_LEVEL: "1",
				COUNT: "0",
				MANAGE: true
            }, {
				TEXT: "CAMPAIGN_LIST_MIT_OPEN",
				ACTION: mVariant.SUBMITTABLE,
				FILTER: mFilter.SUBMITTABLE,
				INCLUDE_DRAFT: false,
				DEFAULT_SORT: mSort.SUBMIT_TO,
				COUNT: "0",
				VISIBLE: true,
				HIERARCHY_LEVEL: "1",
				MANAGE: true
            }]
		}
	};

	var oCampaignList = BaseController.extend("sap.ino.vc.campaign.List", jQuery.extend({}, TopLevelPageFacet, TagGroupMixin, FollowMixin,
		RegistrationMixin, {

			/* Controller reacts when these routes match */
			routes: ["campaignlist", "campaignlistvariant"],

			// make sure the vaiant filter is focused, as always there can be timing problems => explicitly focus the control on route match
			initialFocus: "mainFilterButton",

			/* ListModel defining filter, sorter and variants of the list */
			list: mList,

			formatter: ObjectListFormatter,

			/* ViewModel storing the current configuration of the list */
			view: {
				NAME: "CAMPAIGN_LIST",
				List: {
					SORT: mSort.NAME,
					ORDER: undefined,
					MANAGE: false,
					VARIANT: mVariant.ALL,
					TAGS: [],
					Default: {
						SORT: mSort.NAME,
						ORDER: undefined,
						VARIANT: mVariant.ALL
					},
					"RESP_CODE": "",
					"HAS_BLOG": "",
					"IS_SHOW_MORE_FILTER": false,
					"IS_FILTER_SUBPAGE": true,
					"TAGCLOUD": true,
					"TAGCLOUD_EXPABLE": true,
					"TAGCLOUD_EXP": false,
					"TAGCLOUD_BAR_VISIBLE": false
				},
				ORIENTATION: Configuration.getPersonalize().CAMPAIGN_VIEW ? OrientationType.PORTRAIT : OrientationType.LANDSCAPE
			},

			onInit: function() {
				BaseController.prototype.onInit.apply(this, arguments);

				this.oViewModel = this.getModel("view") || new JSONModel({});
				this.oViewModel.setData(this.view, true);

				this.getList().addStyleClass(this.getPortraitStyle());
				this.getList().setWrapping(true);

				this.getList().attachUpdateFinished(this.onUpdateFinished, this);
			},

			//TODO remove toplevelpagefacet, implement show function w/ signature to 1: route 2: query
			onRouteMatched: function(oEvent, oObject) {
				var oQuery;
				var sVariant;

				if (oEvent && oEvent.getParameter) {
					var oArguments = oEvent.getParameter("arguments");
					this._sRoute = oEvent.getParameter("name");
					oQuery = oArguments["?query"];
					sVariant = oArguments.variant;
				} else {
					this._sRoute = oEvent;
					oQuery = oObject;
					sVariant = oObject.variant;
				}
                if(this.getVariant(sVariant) && Configuration.hasCurrentUserPrivilege("sap.ino.ui::backoffice.access")){
				    var bChangedShowBackoffice = this.getVariant(sVariant).MANAGE ? true : false;
				    this.getModel("component").setProperty("/SHOW_BACKOFFICE",bChangedShowBackoffice);
				} 
				var bShowBackoffice = this.getModel("component").getProperty("/SHOW_BACKOFFICE");
				var sDefaultVariant = Configuration.hasCurrentUserPrivilege("sap.ino.ui::backoffice.access") && bShowBackoffice ? mVariant.MANAGE :
					this.getListProperty("/Variants/DEFAULT_VARIANT");

				this.setViewProperty("/List/VARIANT", sVariant || sDefaultVariant);

				sVariant = this.getViewProperty("/List/VARIANT");

				var aSorter, aQuickSorter;
				var oVariant = jQuery.extend(true, {}, this.getVariant(sVariant));
				this.checkSort(oQuery, oVariant.DEFAULT_SORT);
				this.changeDefaultSortOfVariant(oVariant, oQuery);
				var bBound = this.getList().isBound("items");

				// even if there is no query defined, we need to add the default sorter that is applied
				if (!oQuery || !oQuery.sort) {
					var sDefaultSort = oVariant.DEFAULT_SORT;
					var sDefaultOrder = this.getSort(sDefaultSort)[0].DEFAULT_ORDER;

					oQuery = oQuery || {};
					oQuery.sort = oQuery.sort || sDefaultSort;

					// enhance for sort combination
					oQuery.sort = oQuery.sort + " " + (oQuery.order || sDefaultOrder);
				}

				var bRebindRequired = this.hasStateChanged(this._sRoute, sVariant, oQuery, Device.orientation.portrait);

				if (!bBound || bRebindRequired) {
					// update the VISIBILITY flag of all variants for binding in Filter
					this.setVariantVisibility();

					this.setParameters(oQuery, oVariant);

					aSorter = this.getSort(this.getViewProperty("/List/SORT"));
					aQuickSorter = this.getQuickSort(this.getViewProperty("/List/QUICKSORT"));

					this.setSorter(aQuickSorter.concat(aSorter));
					this.updateFilter();

					//TODO move to ListPage
					var iOrientation = this.getViewProperty("/ORIENTATION");
					this.onOrientationChange(Device.system.desktop ? iOrientation : Device.orientation);

					this.setSortIcon(this.byId("panelFilterFragment--sortreverse"), this.getViewProperty("/List/ORDER"));
					this.bindList();
					this.initialSorterItems();
					if (this.isFilterVisible()) {
						this.bindTagCloud();
					}
				}

				/* used to prevent opening and closing the filter while changing the variant, etc. */
				this._bInnerViewNavigation = true;

				// do not change the search context in case of global search
				if (this.bGlobalSearchContext) {
					return;
				}
				//search count 
				var search = oQuery.search || "";
				var sRespListValueCode = this.getViewProperty("/List/RESP_CODE") || '';
				var sHasBlog = this.getViewProperty("/List/HAS_BLOG") || '';
				var aTags = this.getViewProperty("/List/TAGS");
				var tagGroup = {};
				var tagGroupKey = [];

				aTags.forEach(function(item, index) {
					if (!tagGroup[item.ROOTGROUPID]) {
						tagGroup[item.ROOTGROUPID] = [];
						tagGroup[item.ROOTGROUPID].push(item.ID);
						tagGroupKey.push(item.ROOTGROUPID);
					} else {
						tagGroup[item.ROOTGROUPID].push(item.ID);
					}
				});

				var searchObject = {
					searchToken: window.decodeURIComponent(search),
					resp_code: sRespListValueCode,
					has_camp_blog: sHasBlog,
					tagTokens: tagGroup[tagGroupKey[0]] ? tagGroup[tagGroupKey[0]].join(",") : "",
					tagTokens1: tagGroup[tagGroupKey[1]] ? tagGroup[tagGroupKey[1]].join(",") : "",
					tagTokens2: tagGroup[tagGroupKey[2]] ? tagGroup[tagGroupKey[2]].join(",") : "",
					tagTokens3: tagGroup[tagGroupKey[3]] ? tagGroup[tagGroupKey[3]].join(",") : "",
					tagTokens4: tagGroup[tagGroupKey[4]] ? tagGroup[tagGroupKey[4]].join(",") : ""
				};
				var aVariants = this.getModel("list").getProperty("/Variants/Values");
				var oCampaignModel = this.getModel("list");
				Configuration.getCampaignFilterCount(searchObject, oCampaignModel, aVariants);

				this.setHelp("CAMPAIGN_LIST");
			},

			onAfterShow: function() {
				// 			this._bPreviouslyFullscreen = this.getFullScreen();
				// 			if (!this._bPreviouslyFullscreen) {
				// 				this.setFullScreen(true);
				// 			}
			},

			onBeforeHide: function() {
				// 			this.setFullScreen(this._bPreviouslyFullscreen);
			},

			setVariantVisibility: function() {
				var aVariants = this.getModel("list").getProperty("/Variants/Values");
				// var CampaignFilterModel = Configuration.getCampaignFilterCount(sSearchTerm);
				// // var count = Configuration.getCampaignFilterCountProperty();

				// for (var i = 0; i < aVariants.length; i += 1) {
				// 	this.getModel("list").setProperty("/Variants/Values/" + i + "/COUNT", CampaignFilterModel[this.getModel("list").getProperty(
				// 		"/Variants/Values/" + i + "/ACTION")]);

				// }
				for (var i = 0; i < aVariants.length; i += 1) {
					var oVariant = aVariants[i];
					var bIsManage = oVariant.MANAGE || false;

					var bVisible = (!bIsManage) ||
						// user has general backoffice privileges and variant has manage flag
						(bIsManage && Configuration.hasCurrentUserPrivilege("sap.ino.ui::backoffice.access"));
					this.getModel("list").setProperty("/Variants/Values/" + i + "/VISIBLE", bVisible);
				}
			},

			getPortraitStyle: function() {
				return "sapInoCampaignListCardItems";
			},

			getList: function() {
				return this.byId("objectlist");
			},

			getBindingParameter: function() {
				var sVariant, sVariantFilter;
				sVariant = this.getViewProperty("/List/VARIANT");
				sVariantFilter = this.getCurrentVariant().FILTER;
				var sSearchTerm = this.getViewProperty("/List/SEARCH");
				var aTags = this.getViewProperty("/List/TAGS");
				var aTagId = jQuery.map(aTags, function(oTag) {
					return oTag.ID;
				});
				var tagGroup = {};
				var tagGroupKey = [];

				aTags.forEach(function(item, index) {
					if (!tagGroup[item.ROOTGROUPID]) {
						tagGroup[item.ROOTGROUPID] = [];
						tagGroup[item.ROOTGROUPID].push(item.ID);
						tagGroupKey.push(item.ROOTGROUPID);
					} else {
						tagGroup[item.ROOTGROUPID].push(item.ID);
					}
				});

				return {
					Variant: sVariant,
					VariantFilter: sVariantFilter,
					SearchTerm: sSearchTerm,
					TagIds: aTagId,
					tagGroup: tagGroup,
					tagGroupKey: tagGroupKey
				};
			},

			getBindingPath: function(oQuery) {
				var iFilterBackoffice = this._check4ManagingList() ? 1 : 0;
				if (!oQuery || oQuery === {} ||
					(oQuery.search === undefined && oQuery.tags === undefined && oQuery.variant === undefined)) {
					return {
						Path: "CampaignFull"
					};
				}
				return {
					Path: "CampaignSearchParams(searchToken='" + (oQuery.search || "") + "'," +
						"tagsToken='" + (oQuery.tagGroup[oQuery.tagGroupKey[0]] ? oQuery.tagGroup[oQuery.tagGroupKey[0]].join(",") : "") + "'," +
						"tagsToken1='" + (oQuery.tagGroup[oQuery.tagGroupKey[1]] ? oQuery.tagGroup[oQuery.tagGroupKey[1]].join(",") : "") + "'," +
						"tagsToken2='" + (oQuery.tagGroup[oQuery.tagGroupKey[2]] ? oQuery.tagGroup[oQuery.tagGroupKey[2]].join(",") : "") + "'," +
						"tagsToken3='" + (oQuery.tagGroup[oQuery.tagGroupKey[3]] ? oQuery.tagGroup[oQuery.tagGroupKey[3]].join(",") : "") + "'," +
						"tagsToken4='" + (oQuery.tagGroup[oQuery.tagGroupKey[4]] ? oQuery.tagGroup[oQuery.tagGroupKey[4]].join(",") : "") + "'," +
						"filterName='" + (oQuery.variant || "") + "'," +
						"filterBackoffice=" + (iFilterBackoffice || "0") + ")/Results"
				};
			},

			bindList: function() {
				this.saveState();

				var oBindingParameter = this.getBindingParameter();
				var oBindingData = this.getBindingPath({
					search: oBindingParameter.SearchTerm,
					tags: oBindingParameter.TagIds,
					tagGroup: oBindingParameter.tagGroup,
					tagGroupKey: oBindingParameter.tagGroupKey,
					variant: oBindingParameter.VariantFilter
				});
				this.setPath("data>/" + oBindingData.Path);

				BaseController.prototype.bindList.apply(this);
			},

			includeDrafts: function() {
				return this.getCurrentVariant().INCLUDE_DRAFT;
			},

			bindTagCloud: function() {
				var oBindingParameter = this.getBindingParameter();

				var sPath = Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/tagcloud_campaigns.xsjs";

				var aParameter = [];
				if (!this.includeDrafts()) {
					aParameter.push("EXCL_STATUS=sap.ino.config.CAMP_DRAFT");
				}
				if (oBindingParameter && oBindingParameter.TagIds) {
					jQuery.each(oBindingParameter.TagIds, function(key, iValue) {
						aParameter.push("TAG=" + iValue);
					});
				}
				if (oBindingParameter.SearchTerm && oBindingParameter.SearchTerm.length > 0) {
					aParameter.push("SEARCHTERM=" + oBindingParameter.SearchTerm);
				}
				if (oBindingParameter.VariantFilter) {
					aParameter.push("FILTERNAME=" + oBindingParameter.VariantFilter);
				}
				if (this.getViewProperty("/List/RESP_CODE")) {
					aParameter.push("RESP_VALUE_CODE=" + this.getViewProperty("/List/RESP_CODE"));
				}
				if (this.getViewProperty("/List/HAS_BLOG")) {
					aParameter.push("HAS_BLOG=" + this.getViewProperty("/List/HAS_BLOG"));
				}
				sPath = sPath + "?";
				if (aParameter.length > 0) {
					sPath = sPath + "&" + aParameter.join("&");
				}
				// swap last path for refresh checking
				// check whether refresh is necessary
				if (this._lastTagServicePath === sPath) {
					return;
				}
				this._attachRequestCompleted(sPath);
				this._lastTagServicePath = sPath;
			},

			_attachRequestCompleted: function(sPath) {
				var oController = this;
				var sOtherTxt = oController.getText("CAMPAIGN_LIST_FLD_TAG_GROUP_OTHER");
				var oTagModel = new sap.ui.model.json.JSONModel(sPath);
				oTagModel.attachRequestCompleted(null, function() {
					var oRankedTag = oTagModel.getData().RANKED_TAG;
					var aTagGroup = oTagModel.getData().TAG_GROUP;
					var oTagGroups = oController.groupByTagGroup(oRankedTag, oController.getViewProperty("/List/TAGS"), sOtherTxt);
					jQuery.each(oTagGroups, function(element, object) {
						if (object.GROUP_NAME === "Other") {
							aTagGroup.push(object);
						}
					});
					oController.setTagCloudProperty(oTagGroups, oTagModel.getData().WITHOUT_GROUP !== "X");
					oTagModel.setData({
						"RANKED_TAG": oTagGroups,
						"TAG_GROUP": aTagGroup
					}, false);
					oController.setFilterModel(oTagModel, "tag");
				}, oTagModel);
			},

			getItemTemplate: function() {
				var sRequiredTemplate;
				var bIsManaged = this._check4ManagingList();
				if (bIsManaged) {
					sRequiredTemplate = "Managed_Protrait";
				}

				if (bIsManaged) {

					if (this.getViewProperty("/ORIENTATION") === OrientationType.LANDSCAPE) {
						sRequiredTemplate = "Managed_Landscape";
					}
				} else if ((!Device.system.desktop && Device.orientation.landscape) ||
					(Device.system.desktop && this.getViewProperty("/ORIENTATION") === OrientationType.LANDSCAPE)) {
					sRequiredTemplate = "Landscape";
				} else {
					sRequiredTemplate = "Portrait";

				}

				var oTemplate;
				switch (sRequiredTemplate) {
					case "Managed_Landscape":
						oTemplate = this.getFragment("sap.ino.vc.campaign.fragments.CampaignListItem");
						break;
					case "Landscape":
						oTemplate = this.getFragment("sap.ino.vc.campaign.fragments.FlatListItem");
						break;
					case "Portrait":
						oTemplate = this.getFragment("sap.ino.vc.campaign.fragments.CardListItem");
						break;
					case "Managed_Protrait":
						oTemplate = this.getFragment("sap.ino.vc.campaign.fragments.ManagedCardListItem");
						break;
					default:
						break;
				}
				return oTemplate;
			},

			//TODO move to ListPage
			onOrientationChange: function(eOrientation) {
				var bIsManaged = this._check4ManagingList();
				if (this.getList()) {
					if (bIsManaged) {
						if (this.getPortraitStyle) {
							this.getList().addStyleClass(this.getPortraitStyle());
						}
						if (this.getLandscapeStyle) {
							this.getList().removeStyleClass(this.getLandscapeStyle());
						}
					}
				}
				if (this.getList()) {
					if (bIsManaged || eOrientation === OrientationType.LANDSCAPE || eOrientation.landscape) {

						if (eOrientation === OrientationType.LANDSCAPE) {
							if (this.getPortraitStyle) {
								this.getList().removeStyleClass(this.getPortraitStyle());
							}
							if (this.getLandscapeStyle) {
								this.getList().addStyleClass(this.getLandscapeStyle());
							}

						}
					} else {
						if (this.getPortraitStyle) {
							this.getList().addStyleClass(this.getPortraitStyle());
						}
						if (this.getLandscapeStyle) {
							this.getList().removeStyleClass(this.getLandscapeStyle());
						}
					}

					this.getList().setWrapping(!(eOrientation === OrientationType.LANDSCAPE));
				}
			},
			setParameters: function(oQuery, oVariant) {
				BaseController.prototype.setParameters.apply(this, arguments);
				// var sSort = this.checkSort(oQuery, oVariant.DEFAULT_SORT);
				this.setViewProperty("/List/MANAGE", oVariant.MANAGE);
				this.setViewProperty("/List/TAGCLOUD", true);
				oQuery = oQuery || {};
				var sRespList = oQuery.respCode;
				var sHasBlog = oQuery.hasBlog;
				this.setViewProperty("/List/RESP_CODE", sRespList);
				this.setViewProperty("/List/HAS_BLOG", sHasBlog);
				this.removeSubFilterPageContent();
				this.addSubFilterPageContent(this.getAdditionalFilter());
			},

			onVariantPress: function(sVariantAction, oEvent) {
				BaseController.prototype.onVariantPress.apply(this, [sVariantAction, oEvent, "campaignlistvariant", "campaignlist"]);
			},

			updateFilter: function() {
				var aFilters = [];
				this.setFilter([]);
				if (!this.getCurrentVariant().INCLUDE_DRAFT && !this.isCampaignDraftFilterExisted()) {
					aFilters.push(new Filter("STATUS_CODE", FilterOperator.NE, "sap.ino.config.CAMP_DRAFT"));
				}
				var sRespListValueCode = this.getViewProperty("/List/RESP_CODE");
				if (sRespListValueCode) {
					aFilters.push(new Filter("RESP_CODE", FilterOperator.EQ, sRespListValueCode));
				}
				var sHasBlog = this.getViewProperty("/List/HAS_BLOG");
				switch (sHasBlog) {
					case "1":
						aFilters.push(new Filter("BLOG_COUNTS", FilterOperator.GE, 1));
						break;
					case "0":
						aFilters.push(new Filter("BLOG_COUNTS", FilterOperator.EQ, null));
						break;
					default:
						break;
				}
				if (aFilters.length > 0) {
					this.addFilter(new Filter({
						filters: aFilters,
						and: true
					}));
				}
			},

			isCampaignDraftFilterExisted: function() {
				var aExistFilters = this.getFilter();
				var oFilter;

				for (var iIdx = 0; iIdx < aExistFilters.length; iIdx++) {
					oFilter = aExistFilters[iIdx];

					if (oFilter.aFilters && oFilter.aFilters.length > 0) {
						if (oFilter.aFilters[0].oValue1 === "sap.ino.config.CAMP_DRAFT" && oFilter.aFilters[0].sOperator === FilterOperator.NE &&
							oFilter.aFilters[
								0].sPath === "STATUS_CODE") {
							return true;
						}
					}
				}
				return false;
			},

			onItemPress: function(oEvent) {
				var oItem = oEvent.getSource();
				var oContext = oItem.getBindingContext("data");
				if (oContext) {
					this.navigateTo("campaign", {
						id: oContext.getProperty("ID")
					});
				}
			},

			onCardItemPress: function(oEvent) {
				var oItem = oEvent.getSource();
				var oCampaignCard = oItem.getAggregation("content")[0];
				oCampaignCard.getFocusDomRef().focus();
			},

			onCreateIdea: function(oEvent) {
				this.navigateTo("idea-create", {
					query: {
						campaign: oEvent.getParameter("campaignId")
					}
				});
			},

			onSetFilterBarVisible: function() {
				this.bindTagCloud();
			},

			onApplyFilter: function() {
				var oFilterDialog = this.getFilterDialog();
				if (JSON.stringify(this.getViewModelBackup()) === JSON.stringify(this.getViewProperty("/"))) {
					oFilterDialog.close();
					return;
				}

				var oQuery = this.getQuery();

				var sVariant = this.getViewProperty("/List/VARIANT");
				var route = this.getRoute();
				// var isAll = sVariant === this.getListProperty("/Variants/DEFAULT_VARIANT");
				var params = {
					query: oQuery
				};
				// if (!isAll) {
				params.variant = sVariant;
				// }

				// this.navigateTo(this.getRoute(!isAll), params, true, true);
				this.navigateTo(this.getRoute(true), params, true, true);

				oFilterDialog.close();
			},

			formatObjectListVariantsVisible: function(bIsManage, bIsExpert) {
				// all list variants are visible by default
				return true;
			},

			_check4ManagingList: function() {
				var bBackoffice = Configuration.hasCurrentUserPrivilege("sap.ino.ui::backoffice.access");

				if (bBackoffice) {
					var sVariant = this.getViewProperty("/List/VARIANT");
					var aVariants = this.getListProperty("/Variants/Values");

					var vVariant = jQuery.grep(aVariants, function(oVariant) {
						return oVariant.ACTION === sVariant;
					});

					vVariant = (vVariant && vVariant.length > 0) ? vVariant[0] : {};

					return vVariant.MANAGE || false;
				}

				return false;
			},

			onCampaignsListItemPress: function(oEvent) {
				var oItem = oEvent.getSource();
				var oContext = oItem.getBindingContext("data");
				if (oContext) {
					this.navigateTo("campaign", {
						id: oContext.getProperty("ID")
					});
				}
			},

			onOpenCampaignSettings: function(oEvent) {
				var oSource = oEvent.getSource();
				var oContext = oSource.getBindingContext("data");
				this.navigateToByURLInNewWindow(Configuration.getCampaignSettingsURL(oContext.getProperty("ID")));
			},
			//Add more filter
			createState: function(sRoute, sVariant, oQuery, bPortrait) {
				var oState = BaseController.prototype.createState.apply(this, arguments);
				oState.query.status = oQuery.status;
				oState.query.respCode = oQuery.respCode;
				oState.query.hasBlog = oQuery.hasBlog;
				return oState;
			},
			getQuery: function() {
				var oQuery = {};
				var sSort = this.getViewProperty("/List/SORT");
				//var sOrder = this.getViewProperty("/List/ORDER");
				var sRespList = this.getViewProperty("/List/RESP_CODE");
				var sHasBlog = this.getViewProperty("/List/HAS_BLOG");
				var aTags = this.getViewProperty("/List/TAGS");
				var quickSort = this.getViewProperty('/List/QUICKSORT');
				var search = this.getViewProperty('/List/SEARCH');
				if (sSort) {
					oQuery.sort = sSort;
					/*if (sOrder) {
						oQuery.order = sOrder;
					}*/
				}
				if (sRespList) {
					oQuery.respCode = sRespList;
					//oQuery.respName = sRespName;
				}
				if (sHasBlog) {
					oQuery.hasBlog = sHasBlog;
				}
				if (aTags && aTags.length > 0) {
					oQuery.tags = JSON.stringify(aTags);
				}

				if (quickSort) {
					oQuery.quickSort = quickSort;
				}

				if (search) {
					oQuery.search = search;
				}
				return oQuery;
			},
			addSubFilterPageContent: function(vContent) {

				var oNavContainer = this.getFilterNavContainer();
				var aPages = oNavContainer.getPages();
				aPages[0].getContent()[0].addItem(vContent);
			},

			removeSubFilterPageContent: function() {

				var oNavContainer = this.getFilterNavContainer();
				var aPages = oNavContainer.getPages();
				var oFilterContainer = aPages[0].getContent()[0];
				if (oFilterContainer.getItems().length > 2) {
					//oFilterContainer.removeItem(oFilterContainer.getItems()[3]);
					oFilterContainer.getItems()[2].destroy(true);
				}
			},
			onFilterRespListChange: function(oEvent) {
				var oSource = oEvent.getSource().getSelectedItem();
				if (oSource.getSelectedItem) {
					oSource = oSource.getSelectedItem();
				}
				var sKey = oSource.getProperty("key");
				//var sText = oSource.getProperty("text");
				this.setViewProperty("/List/RESP_CODE", sKey);
				this.navigateIntern(this.getQuery(), true, true);
			},
			onFilterHasBlogChange: function(oEvent) {
				var oSource = oEvent.getSource().getSelectedItem();
				if (oSource.getSelectedItem) {
					oSource = oSource.getSelectedItem();
				}
				var sKey = oSource.getProperty("key");
				//var sText = oSource.getProperty("text");
				this.setViewProperty("/List/HAS_BLOG", sKey);
				this.navigateIntern(this.getQuery(), true, true);
			},
			getAdditionalFilter: function() {
				var oFragment;
				oFragment = this.createFragment("sap.ino.vc.campaign.fragments.FilterItems", this.createIdForFilterElement());
				//var oFilterItemsLayout = this.getFilterElementById("filterItems");
				//this._extensibilityExtensionFilterItems(oFilterItemsLayout);
				// this._oIdeaFilterFrag = oFragment;

				return oFragment;
			},
			onMoreFilterChange: function(oEvent) {
				var oNavContainer = this.getFilterNavContainer();
				var aPages = oNavContainer.getPages();
				var oFilterContainer = aPages[0].getContent()[0];
				if (oFilterContainer.getItems().length > 2) {
					var _fncallback = function(oContainer) {
						//oContainer.$().find('*[tabindex="0"]')[oContainer.getItems().length - 1].focus();
						// hide busyindicator
						this.getFilterElementById("filterItems").setBusy(false);
					}.bind(this, oFilterContainer);

					this.setViewProperty("/List/IS_SHOW_MORE_FILTER", true);
					oEvent.getSource().setVisible(false);
					this.getFilterElementById("filterItems").setBusyIndicatorDelay(0).setBusy(true);

					setTimeout(function(fnCallback) {
						this.bindFilters(fnCallback);
					}.bind(this, _fncallback), 0);
				}
			},
			bindFilters: function(fnCallback) {
				var that = this;
				var oViewModel = this.getModel("view");
				var sRespListUrl = Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/campaign_filter_resp_values.xsjs";
				var oParameters = {
					CAMPAIGN_ID: this.getBindingParameter().CampaignId === undefined ? undefined : parseInt(this.getBindingParameter().CampaignId, 10)
				};
				var aHasBlog = [];
				aHasBlog.push({
					code: mListBlogVariant.NULL,
					text: ""
				});
				//CAMPAIGN_LIST_MIT_FILTER_YES
				aHasBlog.push({
					code: mListBlogVariant.YES,
					text: that.getText("CAMPAIGN_LIST_MIT_FILTER_YES")
				});
				aHasBlog.push({
					code: mListBlogVariant.NO,
					text: that.getText("CAMPAIGN_LIST_MIT_FILTER_NO")
				});
				oViewModel.setProperty("/HAS_BLOG", aHasBlog);
				jQuery.ajax({
					url: sRespListUrl,
					headers: {
						"X-CSRF-Token": "Fetch"
					},
					data: oParameters,
					type: "GET",
					contentType: "application/json; charset=UTF-8",
					async: false,
					success: function(oResponse) {
						var aRes = oResponse.RespValues;
						if (aRes && aRes.length > 0) {
							aRes.sort(function(oPrev, oNext) {
								return oPrev.DEFAULT_TEXT.localeCompare(oNext.DEFAULT_TEXT);
							});
						}
						var oData = [{
							CODE: "",
							DEFAULT_LONG_TEXT: "",
							DEFAULT_TEXT: ""
						}].concat(aRes);
						oViewModel.setProperty("/resp", oData);
						if (fnCallback && typeof fnCallback === "function") {
							fnCallback();
						}
					}
				});

			},
			resetFilter: function() {
				var route = this.getRoute();
				this.setViewProperty("/List/RESP_CODE", "");
				this.setViewProperty("/List/HAS_BLOG", "");

				BaseController.prototype.resetFilter.apply(this, arguments);
			},
			onFilterReset: function() {
				this.setViewProperty("/List/TAGS", []);
				this.setViewProperty("/List/IS_TAGS_SELECTION", false);
				this.setViewProperty("/List/IS_SHOW_MORE_FILTER", false);
				this.resetFilter();
				if (!Device.system.desktop) {
					//no navigation on mobile phones yet
					return;
				}

				this.navigateIntern(this.getQuery(), true);
			},

			changeDefaultSortOfVariant: function(oVariant, oQuery) {
				if (oQuery && oQuery.search && (oVariant.ACTION === "manage" || oVariant.ACTION === "all")) {
					oVariant.DEFAULT_SORT = "SEARCH_SCORE";
				} else if (oVariant.ACTION === "manage" || oVariant.ACTION === "all") {
					jQuery.each(this.list.Variants.Values, function(iIdx, sSorter) {
						if (sSorter.ACTION === oVariant.ACTION) {
							oVariant.DEFAULT_SORT = sSorter.DEFAULT_SORT;
							return false;
						}
					});
				}
			},

			onOfficeToggle: function() {
				var bShowBackoffice = this.getModel("component").getProperty("/SHOW_BACKOFFICE");
				bShowBackoffice = !bShowBackoffice;
				this.getModel("component").setProperty("/SHOW_BACKOFFICE", bShowBackoffice);
				var oVariant = {
					query: {},
					variant: ''
				};
				if (bShowBackoffice) {
					oVariant.variant = mVariant.MANAGE;
				} else {
					oVariant.variant = mVariant.ALL;
				}
				if(this.getViewProperty("/List/SEARCH")){
					oVariant.query.search = this.getViewProperty("/List/SEARCH");
					oVariant.query.sort = this.getViewProperty("/List/SORT");
				}
				this.navigateTo("campaignlistvariant", oVariant, true, true);
			}
			//end
		}));

	/* ListModel defining filter, sorter and variants of the list */
	oCampaignList.list = mList;
	oCampaignList.listContext = mListContext;

	return oCampaignList;
});
}; // end of sap/ino/vc/campaign/List.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.campaign.RegistrationHome.controller') ) {
jQuery.sap.declare('sap.ino.vc.campaign.RegistrationHome.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/campaign/RegistrationHome.controller",[
    "sap/ino/vc/commons/BaseObjectController",
    "sap/ui/Device",
    "sap/ui/model/json/JSONModel",
    "sap/ino/vc/commons/TopLevelPageFacet",
    "sap/ino/commons/application/Configuration",
    "sap/ui/core/ResizeHandler",
    "sap/ino/commons/formatters/ObjectListFormatter",
    "sap/ino/vc/commons/mixins/FollowMixin",
    "sap/ino/vc/campaign/mixins/RegistrationMixin",
    "sap/ino/vc/campaign/mixins/CampaignProfileMixin",
    "sap/ino/vc/campaign/mixins/MilestoneMixin",
    "sap/ui/model/Sorter",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator"    
], function(Controller, Device, JSONModel, TopLevelPageFacet, Configuration, ResizeHandler, ObjectListFormatter,FollowMixin, RegistrationMixin,  CampaignProfileMixin, MilestoneMixin,Sorter,Filter,FilterOperator) {
	"use strict";
	
	var mLayout = {
		XS: {
			centerProfileContainer: "RegistrationProfileFragment--registrationProfile",
			centerCampaignManagerContainer: "CampaignManagersFragment--CampaignManagers"
		},
		S: {
			leftProfileContainer: "RegistrationProfileFragment--registrationProfile",
			leftCampaignManagerContainer: "CampaignManagersFragment--CampaignManagers"
		},
		M: {
			leftProfileContainer: "RegistrationProfileFragment--registrationProfile",
			leftrCampaignManagerContainer: "CampaignManagersFragment--CampaignManagers"

		},
		L: {
			leftProfileContainer: "RegistrationProfileFragment--registrationProfile",
			leftCampaignManagerContainer: "CampaignManagersFragment--CampaignManagers"
		},
		XL: {
			leftProfileContainer: "RegistrationProfileFragment--registrationProfile",
			leftCampaignManagerContainer: "CampaignManagersFragment--CampaignManagers"
		}
	};
	
	return Controller.extend("sap.ino.vc.campaign.RegistrationHome", jQuery.extend({}, FollowMixin, RegistrationMixin, CampaignProfileMixin, MilestoneMixin, {

		formatter: jQuery.extend({}, this.formatter, ObjectListFormatter),

		// id of control that get initial focus
		//initialFocus: ["backofficeButton--backofficeToogle", "identityProfileFragment--createIdea"],

		onInit: function() {
			Controller.prototype.onInit.apply(this, arguments);
			this.aBusyControls = [this.getView()];
		},

		show: function(oParentView) {
			this._oParentView = oParentView;
			var banner = this.byId('campaignBannerList');
			banner.addEventDelegate({
			    onAfterRendering: function () {
			     //   $(".sapMCrslInner.sapMCrslBottomOffset").height($('#' + banner.getActivePage()).parents('.sapMCrslItem').height() + "px");					    
        //             $('#' + banner.getActivePage()).parents('.sapMCrslItem ').fadeIn().siblings().hide();    
                        $(".sapMCrslInner.sapMCrslBottomOffset").height($('#' + banner.getActivePage()).parents('.sapMCrslItem').height() + "px");					    
						$('#' + banner.getActivePage()).parents('.sapMCrslItem ').fadeIn();                    
				}
			});
			
			//bind contextObj for trigger mail
			this.getView().setModel(new JSONModel({
					ID: this.getView().getBindingContext("data").getProperty("ID"),
					NAME: this.getView().getBindingContext("data").getProperty("SHORT_NAME"),
					_OBJECT_TYPE_CODE: "CAMPAIGN"
				}), "contextObject");
			this.bindMilestone(this.getCampaignId());
			this._bindAdjustCampaignManagerList();
			//this._bindBlogs(this.getCampaignId());		
		},
			_bindBlogs: function() {
				if (this.getCampaignId()) {
					var bIsPhone = this.getModel("device").getProperty("/system/phone");
					var sPath = "data>/BlogSearchParams(searchToken=''," +
						"tagsToken=''," +
						"filterName='publishedBlogs')/Results";
					var oBinding = {
						path: sPath,
						template: this.getFragment("sap.ino.vc.blog.fragments.ListItemHome"),
						sorter: new Sorter("PUBLISHED_AT", true),
						filters: [new Filter("CAMPAIGN_ID", "EQ", this.getCampaignId())],
						length: 4,
						top: 4
					};
					var that = this;
					if (bIsPhone) {
						var oCarousel = this.byId("blogsFragment--blogsCarousel");
						oCarousel.bindAggregation("pages", oBinding);
					} else {
						var oList = this.byId("blogsFragment--blogsList");
						if (oList) {
							oList.bindItems(oBinding);
							oList.attachEventOnce("updateFinished", function() {
								that.onResizeLayoutChange(null, that._sCurrentLayout);
							});
						}
					}
					var oTitle = this.byId("blogsFragment--panelBlogTitle");
					oTitle.setText(this.getText("HOMEPAGE_PANEL_CAMPAIGN_BLOGS"));
				}
			},		
		
		getLayout: function(sLayout) {
			return mLayout[sLayout];
		},

		getCampaignId: function() {
			return this.getView().getBindingContext("data") ? this.getView().getBindingContext("data").getProperty("ID") : undefined;
		},

		_bindBannerList: function() {
			var oBannerList = this.byId("campaignBannerList");
			if (oBannerList.getAggregation("pages") && oBannerList.getAggregation("pages").length && oBannerList.getAggregation("pages")[0]) {
				var oBinding = oBannerList.getBindingInfo("pages");
				oBannerList.bindAggregation("pages", oBinding);
			}
		},
		
		onNavigateToManagers: function(oEvent) {
		    	this.navigateTo("campaign-managerlist", {
				id: this.getCampaignId()
			});
		},

		onAfterShow: function() {
			this._bindBannerList();
		},
		
		onChangePage: function(event){
		    var parameters = event.getParameters();
		    var newPage = parameters.newActivePageId;
		    $(".sapMCrslInner.sapMCrslBottomOffset").height($('#' + newPage).parents('.sapMCrslItem').height() + "px");
		    $('#' + newPage).parents('.sapMCrslItem').fadeIn().siblings().hide().fadeIn();
		},
		_bindAdjustCampaignManagerList: function(){
			    var bHasHomePageSetting = !!this.getView().getBindingContext("data").getProperty("MANAGER_HAS_DISPLAY_HOMEPAGE_SETTING");
				var oCampaignManagerBind = this.byId("CampaignManagersFragment--CampaignManagersList").getBindingInfo("items");
				if(bHasHomePageSetting){
				   oCampaignManagerBind.sorter = [];
				   var oCampMgrFilter = new Filter("DISPLAY_HOMEPAGE","EQ",1);
				   oCampaignManagerBind.filters = oCampMgrFilter;
				}
				this.byId("CampaignManagersFragment--CampaignManagersList").bindItems(oCampaignManagerBind);
		}
	}));
});
}; // end of sap/ino/vc/campaign/RegistrationHome.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.comment.Comment.controller') ) {
jQuery.sap.declare('sap.ino.vc.comment.Comment.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.ViewType'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/comment/Comment.controller",[
    "sap/ino/vc/commons/BaseObjectModifyController",
    "sap/ui/core/mvc/ViewType",
    "sap/ino/vc/comment/CommentMixin"
], function (Controller, ViewType, CommentMixin) {
    "use strict";
    
    return Controller.extend("sap.ino.vc.comment.Comment", jQuery.extend({}, CommentMixin, {
        
        onInit: function () {
            Controller.prototype.onInit.apply(this, arguments);
        },

        onBeforeRendering: function (oEvent) {
            this.commentMixinInit({ 
                commentInputId :  "commentInputField",
                commentListId : "commentList",
                successMessageKey : "MSG_CREATE_SUCCESS_COMMENT",
                editDialogViewName : "sap.ino.vc.comment.EditCommentDialog"
            });
        },
        
        onAfterRendering: function (){
           this.byId("commentList").addEventDelegate({
                onAfterRendering : function(oEvent) {
                    var oList = oEvent.srcControl;
                    //oList.$().find(".sapMListUl").attr("role", "list"); 
                    var aItems = oList.$().find("li");
                    jQuery.each(aItems, function(iIdx, oItemDom) {
                        var $Item = jQuery(oItemDom);
                        $Item.attr("aria-label", $Item.getEncodedText());
                       
                      
                    });
                }
            });
        }
        
    }));
});
}; // end of sap/ino/vc/comment/Comment.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.comment.RichComment.controller') ) {
/*!
 * SAP Innovation Management (c) Copyright 2014 SAP AG. All rights reserved.
 */
jQuery.sap.declare('sap.ino.vc.comment.RichComment.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/vc/comment/RichComment.controller",[
    "sap/ino/vc/commons/BaseObjectModifyController",
    "sap/ino/vc/comment/RichCommentCntrlMixin",
    "sap/ino/vc/comment/RichCommentMixin",
    "sap/ino/vc/comment/RichCommentAttachmentMixin",
    "sap/ino/commons/models/object/IdeaLatest",   
    "sap/ino/commons/formatters/BaseFormatter"    
], function(BaseObjectModifyController, RichCommentCntrlMixin, RichCommentMixin, RichCommentAttachmentMixin, IdeaLatest, BaseFormatter) {
	"use strict";
	return BaseObjectModifyController.extend("sap.ino.vc.comment.RichComment", jQuery.extend({}, RichCommentCntrlMixin, RichCommentMixin,
		RichCommentAttachmentMixin, {
			routes: "idea-display",
			formatter: BaseFormatter,
			sectionName: "sectionComments",
			onInit: function() {
				BaseObjectModifyController.prototype.onInit.apply(this, arguments);
				this.getView().setModel(null, "comment");
				this.richCommentMixinInitRouterEvent();
			},

			onAfterRendering: function() {
				this.richCommentMixinInit();
				this.richAttachmentMixinInit();
				this.setAccessibilityProperty();
			}
			
		}
	));
});
}; // end of sap/ino/vc/comment/RichComment.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.evaluation.Display.controller') ) {
jQuery.sap.declare('sap.ino.vc.evaluation.Display.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/evaluation/Display.controller",[
    "sap/ino/vc/commons/BaseObjectController",
    "sap/ino/commons/models/object/Evaluation",
    "sap/ino/vc/evaluation/EvaluationFacet",
    "sap/m/MessageToast",
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/models/object/Attachment",
    "sap/ino/vc/commons/TopLevelPageFacet"
], function(BaseController,
            Evaluation,
            EvaluationFacet,
            MessageToast,
            JSONModel,
            Attachment,
            TopLevelPageFacet) {
    "use strict";
    var attachmentUploadUrl = Attachment.getEndpointURL();
    return BaseController.extend("sap.ino.vc.evaluation.Display", jQuery.extend({}, TopLevelPageFacet, EvaluationFacet, {

        routes: ["evaluation-display"],
        
        onInit: function () {
            BaseController.prototype.onInit.apply(this, arguments);
            if (!this.getModel("local")) {
				this.setModel(new JSONModel({
					ATTACHMENT_UPLOAD_URL: attachmentUploadUrl
				}), "local");
			}
            this.setModel(new JSONModel({
                EVAL_REWORK: "sap.ino.config.EVAL_REWORK",
                V_REWORK: false,
                EVAL_PUB_SUBMITTER: "sap.ino.config.EVAL_PUB_SUBMITTER",
                V_PUB_SUBMITTER: false,
                EVAL_PUB_COMMUNITY: "sap.ino.config.EVAL_PUB_COMMUNITY",
                V_PUB_COMMUNITY: false,
                EVAL_UNPUBLISH: "sap.ino.config.EVAL_UNPUBLISH",
                V_UNPUBLISH: false
            }), "status");
            var oViewModel = this.getModel("view");
            if (!oViewModel) {
                oViewModel = new JSONModel({});
                this.setModel(oViewModel, "view");
            }
            oViewModel.setProperty("/IDEA_NAVIGATION_SECTION", "sectionEvaluations");
            oViewModel.setProperty("/EDIT_MODE", false);
            this.aBusyControls = [this.byId("evaluationLayout")];
            this.initMatrixControl();
            this.scrollDockElement("evaluationDisplay", "evaluationMatrix");
            this._sResizeEvalList = this.attachListControlResized(this.byId("criteriaList"));
        },
        
        onExit: function() {
            BaseController.prototype.onExit.apply(this, arguments);
            this.detachListControlResized(this._sResizeEvalList);
        },
        
        resetStatusModel: function() {
            var oStatusModel = this.getModel("status");
            oStatusModel.setProperty("/V_REWORK", false);
            oStatusModel.setProperty("/V_PUB_COMMUNITY", false);
            oStatusModel.setProperty("/V_PUB_SUBMITTER", false);
            oStatusModel.setProperty("/V_UNPUBLISH", false);
        },
        
        setStatusChangeButtons: function() {
            var sNextStatus = this.getObjectModel() &&
                              this.getObjectModel().getPropertyModel().getData().actions.executeStatusTransition.customProperties &&
                              this.getObjectModel().getPropertyModel().getData().actions.executeStatusTransition.customProperties.statusTransitions;
            if(!sNextStatus){
                return;
            }

            this.resetStatusModel();
            var oStatusModel = this.getModel("status");
            jQuery.each(sNextStatus, function(iIdx, sKey){
                switch (sKey.STATUS_ACTION_CODE){
                    case "sap.ino.config.EVAL_REWORK":
                        oStatusModel.setProperty("/V_REWORK", true);
                        break;
                    case "sap.ino.config.EVAL_PUB_SUBMITTER":
                        oStatusModel.setProperty("/V_PUB_SUBMITTER", true);
                        break;
                    case "sap.ino.config.EVAL_PUB_COMMUNITY":
                        oStatusModel.setProperty("/V_PUB_COMMUNITY", true);
                        break;
                    case "sap.ino.config.EVAL_UNPUBLISH":
                        oStatusModel.setProperty("/V_UNPUBLISH", true);
                        break;
                    default:
                        break;
                }
            });
        },
        
        onRouteMatched: function(oEvent) {
            BaseController.prototype.onRouteMatched.apply(this, arguments);
            var that = this;
            var oEvaluation = this.getObjectModel();

            oEvaluation.getDataInitializedPromise().done(function() {
                that.setHelp("EVALUATION_DISPLAY");
            });
            oEvaluation.getPropertyModel().attachEvent("modelInitialized", function(){
                that.setStatusChangeButtons();
            });

            this.bindMatrix();
        },

        createObjectModel: function(vObjectKey) {
            return new Evaluation(vObjectKey, {
                actions: ["update", "del", "executeStatusTransition", "submit"],
                continuousUse: true,
                readSource: {
                    model: this.getDefaultODataModel(),
                    groupSetting: {
                        EvalAttachments: "IdeaEvalAttachments"
                    }
                }
            });
        },

        onExecuteStatusTransition: function(oEvent) {
    	    var that = this;
    	    var oEvaluation = this.getObjectModel();   
    	    var oActionRequest;
            if (!oEvaluation) {
                return;
            }
            var sStatusAction = oEvent.getSource().getCustomData()[0].getValue();
            var bIsEvaluationReworkAction = sStatusAction === "sap.ino.config.EVAL_REWORK";
            oActionRequest = oEvaluation.executeStatusTransition({
                STATUS_ACTION_CODE : sStatusAction,
                IDEA_ID: oEvaluation.getProperty("/IDEA_ID")
            });
            if (oActionRequest) {
                oActionRequest.done(function() {
                    MessageToast.show(that.getText("OBJECT_MSG_STATUS_CHANGE_SUCCESS"));
                    if (bIsEvaluationReworkAction) {
                        that.resetStatusModel();
                        that.setObjectModel(undefined);
                        that.onNavBack(true);
                    }
                    
                });
                oActionRequest.fail(function(o) {
                    if (bIsEvaluationReworkAction) {
                        that.onNavBack(true);
                    }
                    if (o.MESSAGES && o.MESSAGES.length > 0) {
                        MessageToast.show(that.getText(o.MESSAGES[0].MESSAGE_TEXT));
                    }           
                });
            }
        },
        
        onEdit: function() {
            this.navigateTo("evaluation-edit", {id: this.getObjectModel().getKey()});
        },
        onClose: function(){
             this.navigateBack();
        }
        
    }));
});
}; // end of sap/ino/vc/evaluation/Display.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.evaluation.RequestsModify.controller') ) {
jQuery.sap.declare('sap.ino.vc.evaluation.RequestsModify.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.MessageType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.message.Message'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/evaluation/RequestsModify.controller",[
    "sap/ino/vc/commons/BaseObjectModifyController",
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/models/object/EvaluationRequest",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/ui/model/Sorter",
    "sap/ui/core/MessageType",
    "sap/ui/core/message/Message",
    "sap/ino/vc/commons/TopLevelPageFacet",
    "sap/ino/vc/evaluation/mixins/ExpertFinderMixin",
    "sap/ino/vc/idea/mixins/AddExpertFromClipboardMixin",
    "sap/ino/vc/evaluation/EvaluationFormatter",
    "sap/ino/commons/util/DateUtil"
], function(BaseController, JSONModel, EvaluationRequest, Filter, FilterOperator, Sorter, MessageType, Message, TopLevelPageFacet,
	ExpertFinderMixin, AddExpertFromClipboardMixin, EvaluationFormatter, DateUtil) {
	"use strict";

	var mRoutes = {
		create: "evaluationrequest-create",
		edit: "evaluationrequest-edit"
	};

	return BaseController.extend("sap.ino.vc.evaluation.RequestsModify", jQuery.extend({}, TopLevelPageFacet, ExpertFinderMixin,
		AddExpertFromClipboardMixin, {

			view: {
				CLIPBOARD_ITEM_SELECT_COUNTER: 0, // used to refresh data bindings
				IS_EVALUATION_REQUEST: false // used to distinguish whether in evaluation request dialog or idea detail page
			},
			routes: [mRoutes.create, mRoutes.edit],
			_INPUT_EXPERTS_SETTING: {
				childNodeName: "Experts",
				childNodeNameSingular: "Expert",
				suggestion: {
					key: "ID",
					text: "NAME",
					additionalText: "USER_NAME",
					path: "data>/SearchIdentity(searchToken='$suggestValue')/Results",
					sorter: new Sorter("NAME")
				},
				token: {
					key: "IDENTITY_ID",
					text: "NAME"
				}
			},

			onInit: function() {
				BaseController.prototype.onInit.apply(this, arguments);
				this.addMultiInputHandling(this.byId("inputExperts"), this._INPUT_EXPERTS_SETTING);
				this.byId("inputExperts").attachTokenUpdate(this._tokenUpdate, this);
				this.getView().setModel(new JSONModel(this.view), "view");
				this.setViewProperty("/IS_EVALUATION_REQUEST", true);
			},

			_initExpertsFilters: function() {
				this._findFilters(this.getObjectModel().getProperty("/Experts"), function(oExpert) {
					return oExpert.IDENTITY_ID;
				});
			},

			_tokenUpdate: function(oEvent) {
				if (!oEvent.getSource().getAggregation("tokenizer")) {
					return;
				}
				var aTokens = oEvent.getSource().getAggregation("tokenizer").getAggregation("tokens");
				this._findFilters(aTokens, function(oToken) {
					return oToken.getProperty("key");
				});
			},

			_findFilters: function(aKeys, fnGetKey) {
				this._INPUT_EXPERTS_SETTING.suggestion.filters = undefined;
				if (!aKeys || aKeys.length <= 0) {
					return;
				}

				var aFilters = [];
				jQuery.each(aKeys, function(index, oKey) {
					aFilters.push(new sap.ui.model.Filter({
						path: "ID",
						operator: "NE",
						value1: fnGetKey(oKey)
					}));
				});
				this._INPUT_EXPERTS_SETTING.suggestion.filters = new sap.ui.model.Filter({
					filters: aFilters,
					and: true
				});
			},

			createObjectModel: function(vObjectKey, sRoute, oRouteArgs) {
				var oController = this;
				var oKey = vObjectKey;
				var oSettings = {
					nodes: ["Root"],
					continuousUse: true,
					concurrencyEnabled: true,
					readSource: {
						model: this.getDefaultODataModel()
					}
				};
				var oRequest = new EvaluationRequest(oKey, oSettings);

				if (!oKey) {
					var mQuery = oRouteArgs["?query"] || {};
					var nIdeaId = parseInt(mQuery.idea, 10);
					try {
						oController.getView().setBusy(true);
						jQuery.when(oRequest.getReadSourceModel().read("/IdeaMedium(" + nIdeaId + ")", {
							success: function(oIdea) {
								oRequest.setProperty("/RESP_VALUE_CODE", oIdea.RESP_VALUE_CODE);
								oRequest.setProperty("/IDEA_NAME", oIdea.NAME);
								oRequest.setProperty("/IDEA_ID", oIdea.ID);
								oRequest.setProperty("/IDEA_PHASE_CODE", oIdea.PHASE);
								oRequest.setProperty("/CAMPAIGN_SUBMIT_TO", oIdea.CAMPAIGN_SUBMIT_TO);
							}
						})).done(function() {
							oController.getView().setBusy(false);
						});
						jQuery.when(oRequest.getReadSourceModel().read("/IdeaFull(" + nIdeaId + ")/Experts", {
							success: function(oIdea) {
								oRequest.setProperty("/IdeaExpertsForDialog", oIdea.results);
							}
						})).done(function() {
							oController.getView().setBusy(false);
						});
						jQuery.when(oRequest.getReadSourceModel().read("/IdeaFull(" + nIdeaId + ")/RespExperts", {
							success: function(oIdea) {
								oRequest.setProperty("/RespExpertsForDialog", oIdea.results);
							}
						})).done(function() {
							oController.getView().setBusy(false);
						});
						jQuery.when(oRequest.getReadSourceModel().read("/IdeaFull(" + nIdeaId + ")/CampaignExperts", {
							success: function(oIdea) {
								oRequest.setProperty("/CampExpertsForDialog", oIdea.results);
							}
						})).done(function() {
							oController.getView().setBusy(false);
						});
					} catch (oError) {
						jQuery.sap.log.error("Failed parsing creation arguments", oError, "evaluationrequest-create");
					}
				}
				return oRequest;
			},

			onRouteMatched: function() {
				var oController = this;
				BaseController.prototype.onRouteMatched.apply(this, arguments);
				oController.setHelp("EVALUATIONREQUESTS_MODIFY");
				oController.getObjectModel().getDataInitializedPromise().done(function() {
					oController._initExpertsFilters();
				});
			},

			onSubmit: function() {
				var oController = this;
				oController.resetClientMessages();
				if (!oController.validateContent()) {
					return;
				}
				var oData = oController.getObjectModel().oData;
				// oData.ACCEPT_DATE = DateUtil.convertToUtcString(oData.ACCEPT_DATE);
				// oData.COMPLETE_DATE = DateUtil.convertToUtcString(oData.COMPLETE_DATE);
				var oConfirmRequest = sap.ino.commons.models.object.EvaluationRequest.checkBeforeUpdate(oData);
				oConfirmRequest.done(function(oResponse) {
					if (oResponse && oResponse.RESULT) {
						oController.onConfirmDialog(oResponse.RESULT);
					} else {
						oController.onModify();
					}
				});
			},

			onModify: function() {
				var oController = this;
				var oCurrrentModel = oController.getObjectModel();
				var oData = oController.getObjectModel().oData;
				oData.ACCEPT_DATE = DateUtil.convertToUtcString(oData.ACCEPT_DATE);
				oData.COMPLETE_DATE = DateUtil.convertToUtcString(oData.COMPLETE_DATE);
				var oModifyRequest = this.executeObjectAction("modify", {
					messages: {
						error: "MSG_EVAL_REQ_INVALID_ERROR"
					}
				});
				oModifyRequest.done(function() {
					oController.navigateTo("idea-display", {
						id: oCurrrentModel.getProperty("/IDEA_ID"),
						query: {
							section: "sectionEvaluations"
						}
					}, true);
				});
				oModifyRequest.fail(function() {
    				oData.ACCEPT_DATE = DateUtil.convertToLocalDate(oData.ACCEPT_DATE);
    				oData.COMPLETE_DATE = DateUtil.convertToLocalDate(oData.COMPLETE_DATE);
				});
			},

			onIdeaPressed: function() {
				var iId = this.getObjectModel().getProperty("/IDEA_ID");
				this.navigateTo("idea-display", {
					id: iId
				}, true);
			},

			onDelete: function(oEvent) {
				var oController = this;
				oController.resetClientMessages();
				var oDelBtn = oEvent.getSource();
				var oDelRequest = this.executeObjectAction("del", {
					messages: {
						confirm: "MSG_DEL_CONFIRM",
						success: "MSG_DEL_SUCCESS"
					}
				});
				oDelRequest.done(function(oResponse) {
					if (oResponse && oResponse.confirmationCancelled === true) {
						if (oDelBtn && jQuery.type(oDelBtn.focus) === "function") {
							oDelBtn.focus();
						}
						return;
					}
					oController.navigateBack();
				});
			},

			onConfirmDialog: function(aResponse) {
				var _CONFIG_MSG = {
					"EXPERT_AMOUNT_WARNING": "MSG_EVAL_REQ_MAX_EXPERT_WARNING",
					"DUPLICATED_EXPERT_WARNING": "MSG_EVAL_REQ_DUPLICATED_EXPERT_WARNING",
					"EXISTED_EVALUATION_WARNING": "MSG_EVAL_REQ_EXISTED_EVALUATION_WARNING"
				};
				var oController = this;
				var oVBox = new sap.m.VBox();
				if (!aResponse || aResponse.length <= 0) {
					oController.onModify();
					return;
				}
				jQuery.each(aResponse, function(index, data) {
					var bObject = data instanceof Object;
					var sCode = data;
					if (bObject) {
						sCode = data.MSG_CODE;
					}
					var sText = oController.getText(_CONFIG_MSG[sCode]);
					var oText = new sap.m.Text({
						text: sText
					});
					if (!bObject) {
						oText.addStyleClass("sapUiSmallMarginBottom");
					}
					oVBox.addItem(oText);
					var sDuplExperts = '';
					if (bObject && data.DuplExperts) {
						jQuery.each(data.DuplExperts, function(indexExpert, sExpertName) {
							sDuplExperts += "<li>" + sExpertName + "</li>";
						});
						oVBox.addItem(new sap.ui.core.HTML({
							content: "<ul class='sapUiTinyMarginTop sapUiSmallMarginBottom'>" + sDuplExperts + "</ul>",
							sanitizeContent: true
						}));
					}
				});
				var dialog = new sap.m.Dialog({
					title: oController.getText('IDEA_OBJECT_TIT_CONFIRM_EVALUATION_REQUEST'),
					type: 'Message',
					content: [oVBox],
					beginButton: new sap.m.Button({
						text: oController.getText('BTN_OK'),
						press: function() {
							var aExperts = oController.getObjectModel().getProperty("/Experts");
							jQuery.each(aResponse, function(index, data) {
								jQuery.each(data.DuplExperts, function(indexExpert, sExpertName) {
									for (var iExpert = aExperts.length - 1; iExpert >= 0; iExpert--) {
										if (aExperts[iExpert].NAME === sExpertName) {
											aExperts.splice(iExpert, 1);
										}
									}
								});
							});
							oController._initExpertsFilters();
							oController.getObjectModel().setProperty("/Experts", aExperts);
							oController.onModify();
							dialog.close();
						}
					}),
					endButton: new sap.m.Button({
						text: oController.getText("BTN_CANCEL"),
						press: function() {
							dialog.close();
						}
					}),
					afterClose: function() {
						dialog.destroy();
					}
				});
				dialog.open();
			},

			validateContent: function() {
				var oController = this;
				var oModel = oController.getObjectModel();
				var aExperts = oModel.getProperty("/Experts");
				if (!aExperts || aExperts.length <= 0) {
					var oMsgEmptyExperts = new Message({
						code: "MSG_EVAL_REQ_EXPERTS_MANDATORY_ERROR",
						type: MessageType.Error
					});
					oController.setClientMessage(oMsgEmptyExperts, oController.byId("inputExperts"));
					return false;
				}

				if (!oModel.getProperty("/ACCEPT_DATE")) {
					oController.setClientMessage(new Message({
						code: "MSG_EVAL_REQ_ACCEPTANCE_MANDATORY_ERROR",
						type: MessageType.Error
					}), oController.byId("dpAcceptDate"));
					return false;
				}

				if (!oModel.getProperty("/COMPLETE_DATE")) {
					oController.setClientMessage(new Message({
						code: "MSG_EVAL_REQ_COMPLETION_MANDATORY_ERROR",
						type: MessageType.Error
					}), oController.byId("dpCompletetDate"));
					return false;
				}

				if (!oModel.getProperty("/DESCRIPTION")) {
					oController.setClientMessage(new Message({
						code: "MSG_EVAL_REQ_DESCRIPTION_MANDATORY_ERROR",
						type: MessageType.Error
					}), oController.byId("txtAreaDesc"));
					return false;
				}
				return true;
			},

			toSubmitDate: function(txt, date) {
				return txt + " " + EvaluationFormatter.toDate(date);
			}
		}));
});
}; // end of sap/ino/vc/evaluation/RequestsModify.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.home.BackOfficeHome.controller') ) {
jQuery.sap.declare('sap.ino.vc.home.BackOfficeHome.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/home/BackOfficeHome.controller",[
    "sap/ino/vc/commons/BaseObjectController",
    "sap/ino/vc/iam/mixins/IdentityProfileMixin",
    "sap/ino/commons/formatters/ObjectListFormatter",
    "sap/ui/model/Sorter",
    "sap/ui/model/Filter",
    "sap/ino/commons/application/Configuration",
    "sap/ino/vc/idea/mixins/FollowUpMixin",
    "sap/ino/vc/idea/mixins/AssignmentActionMixin",
    "sap/ino/vc/idea/mixins/ChangeStatusActionMixin",
    "sap/ino/vc/idea/mixins/DeleteActionMixin",
    "sap/ino/vc/idea/mixins/AddExpertFromClipboardMixin",
    "sap/ino/vc/evaluation/EvaluationFormatter",
    "sap/ino/vc/idea/mixins/MergeActionMixin",
    "sap/ino/vc/blog/mixins/DeleteActionMixin",
    "sap/ino/vc/commons/mixins/TagCardMixin",
    "sap/ino/vc/campaign/mixins/RegistrationMixin",
    "sap/ino/vc/commons/mixins/FollowMixin",
    "sap/ino/vc/idea/RewardFormatter",
    "sap/ino/vc/idea/mixins/VoteMixin",
    "sap/ino/vc/idea/mixins/VolunteerMixin",
    "sap/ino/vc/follow/mixins/FeedsMixin",
    "sap/ino/vc/idea/mixins/IdeaFormCriteriaFilterMixin",
    "sap/ino/commons/models/object/Homepagewidget",
    "sap/ui/model/json/JSONModel"
], function(Controller,
	IdentityProfileMixin,
	ObjectListFormatter,
	Sorter,
	Filter,
	Configuration,
	FollowUpMixin,
	AssignmentActionMixin,
	ChangeStatusActionMixin,
	DeleteActionMixin,
	AddExpertFromClipboardMixin,
	EvaluationFormatter,
	MergeActionMixin,
	BlogDeleteActionMixin,
	TagCardMixin,
	RegistrationMixin,
	FollowMixin,
	RewardFormatter,
	VoteMixin,
	VolunteerMixin,
	FeedsMixin,
	IdeaFormCriteriaFilterMixin,
	Homepagewidget,
	JSONModel
) {
	"use strict";
	var mList = {
		"follow": {
			filterParam: "",
			filter: [new Filter("FOLLOW_UP_ID", "NE", null), new Filter("STATUS", "NE", "sap.ino.config.DRAFT")],
			sorter: new Sorter("FOLLOW_UP_DATE", false)
		},
		"coachme": {
			filterParam: "",
			filter: [new Filter("COACH_ID", "EQ", Configuration.getCurrentUser().USER_ID), new Filter("STATUS", "NE", "sap.ino.config.DRAFT")],
			sorter: new Sorter("SUBMITTED_AT", false)
		},
		"unassigned": {
			filterParam: "unassignedCoach",
			filter: [new Filter("STATUS", "NE", "sap.ino.config.DRAFT")],
			sorter: new Sorter("SUBMITTED_AT", true)
		},
		"evaldone": {
			filterParam: "evaluatedIdeas",
			filter: [new Filter("STATUS", "NE", "sap.ino.config.DRAFT")],
			sorter: new Sorter("LAST_PUBL_EVAL_AT", true)
		}
	};
	var mBlogList = {
		"published": {
			filterParam: "publishedBlogs",
			filter: [],
			sorter: new Sorter("PUBLISHED_AT", true),
			name: "publish"
		},
		"draft": {
			filterParam: "draftBlogs",
			filter: [],
			sorter: new Sorter("CHANGED_AT", true),
			name: "draft"
		},
		"all": {
			filterParam: "",
			filter: [],
			sorter: new Sorter("PUBLISHED_AT", true),
			name: "all"
		}
	};
	var mIdentityProfile = {
		Backoffice: {
			PATH: "/BackofficeEntityCount(1)",
			Binding: [{
					ICON: "sap-icon://lightbulb",
					LINK_TEXT: "PROFILE_LNK_IDEAS_COACHED",
					COUNT: "COACHED_BY_ME_IDEA_COUNT",
					Route: {
						NAME: "idealistvariant",
						QUERY: {
							variant: "coachme"
						}
					},
					ROLES: ["sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role"]
            }, {
					ICON: "sap-icon://InoIcons/campaign",
					LINK_TEXT: "PROFILE_LNK_MANAGED_CAMPAIGNS",
					COUNT: "MANAGED_CAMPAIGN_COUNT",
					Route: {
						NAME: "campaignlistvariant",
						QUERY: {
							variant: "manage"
						}
					},
					ROLES: ["sap.ino.ui::camps_mgr_role"]
            }, {
					ICON: "sap-icon://lightbulb",
					LINK_TEXT: "PROFILE_LNK_IDEAS_UNASSIGNED",
					COUNT: "UNASSIGNED_IDEA_COUNT",
					Route: {
						NAME: "idealistvariant",
						QUERY: {
							variant: "unassigned"
						}
					},
					ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role"]
            }, {
					ICON: "sap-icon://hr-approval",
					LINK_TEXT: "REGISTER_APPR_LIST_TIT", // my pending approvals
					COUNT: "MY_PENDING_APPR_COUNT",
					Route: {
						NAME: "registerapprovallistvariant",
						QUERY: {
							variant: "pending"
						}
					},
					ROLES: ["sap.ino.ui::camps_mgr_role"]
            }, {
					ICON: "sap-icon://lightbulb",
					LINK_TEXT: "PROFILE_LNK_IDEA_FOLLOWUP",
					COUNT: "FOLLOW_UP_IDEA_COUNT",
					Route: {
						NAME: "idealistvariant",
						QUERY: {
							variant: "follow"
						}
					},
					ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role"]
            }, {
					ICON: "sap-icon://lightbulb",
					LINK_TEXT: "PROFILE_LNK_IDEAS_EVALUATED",
					COUNT: "EVALUATED_IDEA_COUNT",
					Route: {
						NAME: "idealistvariant",
						QUERY: {
							variant: "evaldone"
						}
					},
					ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role"]
            }
    //         , {
				// ICON: "sap-icon://activity-individual",
				// LINK_TEXT: "PROFILE_LNK_PENDING_EVAL_REQ_MY",
				// COUNT: "MY_PENDING_EVAL_ITEM_COUNT",
				// Route: {
				// 	NAME: "evalreqlistvariant",
				// 	QUERY: {
				// 		variant: "my"
				// 	}
				// },
				// ROLES: ["sap.ino.ui::camps_mgr_role"]
    //         }
            , {
					ICON: "sap-icon://competitor",
					LINK_TEXT: "REWARDS_MANAGEMENT_LIST_TIT",
					COUNT: "REWARDS_MANAGEMENT_COUNT",
					Route: {
						NAME: "rewardlist",
						QUERY: {
							variant: "rewardmanage"
						}
					},
					ROLES: ["sap.ino.ui::camps_mgr_role"]
            }, {
					ICON: "sap-icon://InoIcons/following",
					LINK_TEXT: "PROFILE_LNK_FOLLOWED_MY",
					COUNT: "MY_FOLLOWED_COUNT",
					Route: {
						NAME: "followlistvariant",
						QUERY: {
							variant: "campaign"
						}
					},
					ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role"]
            }, {
					ICON: "sap-icon://lightbulb",
					LINK_TEXT: "IDEA_LIST_MIT_COMPLETED",
					COUNT: "COMPLETED_IDEA_COUNT",
					Route: {
						NAME: "idealistvariant",
						QUERY: {
							variant: "managedcompleted"
						}
					},
					ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role"]
            }]
		}
	};

	var mReport = {
		"UnchangedIdeasFrame": "ReportTemplates('sap.ino.config.7')",
		"VotesFrame": "ReportTemplates('sap.ino.config.16')"
	};

	// mapping of container and content ids for each layout size
	var mLayout = {
		XS: {
			centerProfileContainer: "identityProfileFragment--identityProfile",
			centerReportUnchangedIdeasContainer: "unchangedIdeasFragment--unchangedIdeas",
			centerReportUnchangedIdeasSplitContainer: undefined,
			leftReportUnchangedIdeasContainer: undefined,
			rightReportUnchangedIdeasContainer: undefined,
			centerReportVotesContainer: "votesFragment--votes",
			centerReportVotesSplitContainer: undefined,
			leftReportVotesContainer: undefined,
			rightReportVotesContainer: undefined
		},
		S: {
			leftProfileContainer: "identityProfileFragment--identityProfile",
			centerReportUnchangedIdeasContainer: "unchangedIdeasFragment--unchangedIdeas",
			centerReportVotesContainer: "votesFragment--votes"
		},
		M: {
			leftProfileContainer: "identityProfileFragment--identityProfile",
			centerReportUnchangedIdeasSplitContainer: "unchangedIdeasFragment--unchangedIdeas",
			centerReportVotesSplitContainer: "votesFragment--votes"
		},
		L: {
			leftProfileContainer: "identityProfileFragment--identityProfile",
			leftReportUnchangedIdeasContainer: "unchangedIdeasFragment--unchangedIdeas",
			leftReportVotesContainer: "votesFragment--votes"
		},
		XL: {
			leftProfileContainer: "identityProfileFragment--identityProfile",
			rightReportUnchangedIdeasContainer: "unchangedIdeasFragment--unchangedIdeas",
			rightReportVotesContainer: "votesFragment--votes"
		}
	};

	return Controller.extend("sap.ino.vc.home.BackOfficeHome", jQuery.extend({}, IdentityProfileMixin, FollowUpMixin, AssignmentActionMixin,
		ChangeStatusActionMixin, DeleteActionMixin, MergeActionMixin, BlogDeleteActionMixin, TagCardMixin, RegistrationMixin, FollowMixin,
		ObjectListFormatter, VoteMixin, VolunteerMixin, FeedsMixin, AddExpertFromClipboardMixin, IdeaFormCriteriaFilterMixin, {

			formatter: jQuery.extend(this.formatter, ObjectListFormatter, EvaluationFormatter, FollowUpMixin.followUpMixinFormatter,
				RewardFormatter),

			feedTitleLink: function(iObjectId, sObjectTypeCode) {
				if (!isNaN(parseInt(iObjectId, 10))) {
					switch (sObjectTypeCode) {
						case 'CAMPAIGN':
							return this.formatter.navigationLink.apply(this, ["campaign", {
								id: iObjectId
        				    }]);
						case 'IDEA':
							return this.formatter.navigationLink.apply(this, ["idea-display", {
								id: iObjectId
        				    }]);
						default:
							break;
					}

				}
				return undefined;
			},

			initialFocus: "backofficeButton--backofficeToogle",

			onInit: function() {
				Controller.prototype.onInit.apply(this, arguments);
				this.aBusyControls = [this.getView()];
				this._sBOHResizeIdeaListId = this.attachListControlResized(this.byId("ideasFragment--ideasList"));

				// get home page widget configuration
				var oDeffered = Homepagewidget.getBackofficeHomepageWidget();
				oDeffered.done(function(oData) {
					var oWidgetData = oData.RESULT[0] || {
						IS_VISIBLE: false,
						HTML_CONTENT: ""
					};
					oWidgetData.IS_VISIBLE = !!oWidgetData.IS_VISIBLE;
					this.getView().setModel(new JSONModel(oWidgetData), "widget");
				}.bind(this));
			},

			onExit: function() {
				Controller.prototype.onExit.apply(this, arguments);
				this.detachListControlResized(this._sBOHResizeIdeaListId);
			},

			getIdeaList: function() {
				return this.byId("ideasFragment--ideasList");
			},

			getCampaignList: function() {
				return this.byId("campaignsListFragment--campaignsList");
			},

			show: function(oParentView) {
				this._oParentView = oParentView;
				this.bindViewData();
				this.setIdentityProfileBinding();
				this.getIdeaList().attachUpdateFinished(this._onIdeaListUpdateFinished, this);
				this.getCampaignList().attachUpdateFinished(this._onCampaignListUpdateFinished, this);
			},

			_onIdeaListUpdateFinished: function() {
				// accessibility: we need to update the aria property like this due to (for us) not usable behaviour of UI5
				var oList = this.getIdeaList();

				oList.$().find(".sapMListUl").attr("role", "list");

				var aItems = oList.$().find("li");
				jQuery.each(aItems, function(iIdx, oItemDom) {
					var $Item = jQuery(oItemDom);
					$Item.attr("role", "group");
					var $Label = $Item.find(".sapInoItemAriaLabel");
					if ($Label && $Label.length > 0) {
						$Item.attr("aria-labelledby", $Label[0].id);
					}
					var $Content = $Item.find(".sapMLIBContent");
					if ($Content && $Content.length > 0) {
						$Content.attr("role", "listitem");
					}
				});
			},

			_onCampaignListUpdateFinished: function() {
				// accessibility: we need to update the aria property like this due to (for us) not usable behaviour of UI5
				var oList = this.getCampaignList();

				oList.$().find(".sapMListUl").attr("role", "list");

				var aItems = oList.$().find("li");
				jQuery.each(aItems, function(iIdx, oItemDom) {
					var $Item = jQuery(oItemDom);
					$Item.attr("role", "group");
					var $Label = $Item.find(".sapInoItemAriaLabel");
					if ($Label && $Label.length > 0) {
						$Item.attr("aria-labelledby", $Label[0].id);
					}
					var $Content = $Item.find(".sapMLIBContent");
					if ($Content && $Content.length > 0) {
						$Content.attr("role", "listitem");
					}
				});
			},

			_replaceReportName: function(oItems) {
				var that = this;
				oItems.forEach(function(oItem) {
    				var sKey = oItem.getProperty("name");
    				var sText = that.getText(sKey);
    				oItem.setProperty("name", sText);
				});
			},

			_changeReportTitle: function(oReport) {
				var that = this;
				if (oReport.getFeeds()) {
					oReport.getFeeds().forEach(function(oFeed) {
						var sKey = oFeed.getProperty("values");
						var sText = that.getText(sKey);
						oFeed.setProperty("values", [sText]);
					});
				}
				if (oReport.getDataset() && oReport.getDataset().getMeasures()) {
				    that._replaceReportName(oReport.getDataset().getMeasures());
				}
				if (oReport.getDataset() && oReport.getDataset().getDimensions()) {
				    that._replaceReportName(oReport.getDataset().getDimensions());
				}
			},

			onAfterRendering: function() {
				var that = this;
				var oUnchangedIdeas = this.byId("unchangedIdeasFragment--UnchangedIdeasFrame");
				var oVotes = this.byId("votesFragment--VotesFrame");
				var oVizProperties = {
					title: {
						visible: false
					},
					legendGroup: {
						layout: {
							position: "auto"
						}
					},
					categoryAxis: {
						title: {
							visible: false
						},
						label: {
							visible: false
						}
					},
					valueAxis: {
						title: {
							visible: false
						}
					}
				};
				if (oUnchangedIdeas) {
					oUnchangedIdeas.setVizProperties(oVizProperties);
					if (!this.getModel("device").getProperty("/system/phone") && !oUnchangedIdeas.aBindParameters) {
						oUnchangedIdeas.attachBrowserEvent("click", this.onNavigateToReport, this);
					}
					that._changeReportTitle(oUnchangedIdeas);
				}
				if (oVotes) {
					// show the x-axis label on mobile
					if (this.getModel("device").getProperty("/system/phone")) {
						oVizProperties.categoryAxis.label.visible = true;
					}
					oVotes.setVizProperties(oVizProperties);
					if (!this.getModel("device").getProperty("/system/phone") && !oVotes.aBindParameters) {
						oVotes.attachBrowserEvent("click", this.onNavigateToReport, this);
					}
					that._changeReportTitle(oVotes);
				}
			},

			getLayout: function(sLayout) {
				return mLayout[sLayout];
			},

			setIdentityProfileBinding: function() {
				this.bindIdentityProfile(this.byId("identityProfileFragment--identityProfile"), mIdentityProfile.Backoffice);

				if (this.getModel("data").getProperty(mIdentityProfile.Backoffice.PATH)) {
					var oController = this;
					this.getModel("data").read(mIdentityProfile.Backoffice.PATH, {
						success: function() {
							var oBinding = oController.byId("identityProfileFragment--identityProfileList").getBindingInfo("items");
							oController.byId("identityProfileFragment--identityProfileList").bindItems(oBinding);
						}
					});
				}
			},

			bindViewData: function() {
				this._bindCampaigns();
				// bind idea list
				var sIdeaViewKey;
				if (this.getModel("device").getProperty("/system/phone")) {
					sIdeaViewKey = this.byId("ideasFragment--sapInoCampHomeIdeasSelect").getSelectedKey();
				} else {
					sIdeaViewKey = this.byId("ideasFragment--sapInoCampHomeIdeasButtons").getSelectedKey();
				}
				this._sIdeaViewKey = sIdeaViewKey || Object.keys(mList)[0];
				this._bindIdeas(this._sIdeaViewKey);
				//For Blog 
				var sBlogViewKey;
				if (this.getModel("device").getProperty("/system/phone")) {
					sBlogViewKey = this.byId("blogsFragment--sapInoCampHomeBlogsSelect").getSelectedKey();
				} else {
					sBlogViewKey = this.byId("blogsFragment--sapInoCampHomeBlogsButtons").getSelectedKey();
				}
				this._sBlogViewKey = sBlogViewKey || Object.keys(mBlogList)[0];
				if (!this.getModel("component").getProperty("/SHOW_BACKOFFICE_BLOG")) { //Coach
					this._sBlogViewKey = Object.keys(mBlogList)[2];
				}
				this._bindBlogs(this._sBlogViewKey);
				//due to sizing issues we need to create a separate model
				this._bindUnchangedIdeas();
				this._bindVotes();
			},

			_bindCampaigns: function() {
				var bIsPhone = this.getModel("device").getProperty("/system/phone");
				// Special logic for innovation manager
				var bShowAll = Configuration.hasCurrentUserPrivilege('sap.ino.xs.rest.admin.application::campaign');
				var sFilterBackoffice = bShowAll ? 'filterBackoffice=0' : 'filterBackoffice=1';

				var sPath = "data>/CampaignSearchParams(searchToken=''," +
					"tagsToken=''," + "tagsToken1=''," + "tagsToken2=''," + "tagsToken3=''," + "tagsToken4=''," +
					"filterName='submittableCampaigns'," +
					sFilterBackoffice + ")/Results";
				if (bIsPhone) {
					var oCarousel = this.byId("campaignsListFragment--campaignsCarousel");
					oCarousel.bindAggregation(
						"pages", {
							path: sPath,
							template: this.createFragment("sap.ino.vc.home.fragments.CampaignBanner"),
							length: 4,
							top: 4,
							filters: [new Filter("STATUS_CODE", "NE", "sap.ino.config.CAMP_DRAFT")],
							sorter: new Sorter("SUBMIT_TO", false)
						});
				} else {
					var oList = this.byId("campaignsListFragment--campaignsList");
					oList.bindItems({
						path: sPath,
						template: this.getFragment("sap.ino.vc.campaign.fragments.HomeCampaignListItem"),
						length: 3,
						top: 3,
						filters: [new Filter("STATUS_CODE", "NE", "sap.ino.config.CAMP_DRAFT")],
						sorter: new Sorter("SUBMIT_TO", false)
					});
				}
			},
			_bindIdeas: function(sKey) {
				var bIsPhone = this.getModel("device").getProperty("/system/phone");
				var sPath = "data>/IdeaMediumBackofficeSearchParams(searchToken=''," +
					"searchType=" + "0" + "," +
					"tagsToken=''," + "tagsToken1=''," + "tagsToken2=''," + "tagsToken3=''," + "tagsToken4=''," +
					"filterName='" + mList[sKey].filterParam + "'," +
					"filterBackoffice=1" + this.getEmptyIdeaformFilters() +
					",cvt='" + "" + "'," + "cvr=" + "0" + "," + "cvy=" + "0" +
					")/Results";
				var oList = this.byId("ideasFragment--ideasList");
				var disableImage = Configuration.getSystemSetting("sap.ino.config.DISABLE_IDEA_IMAGE") * 1 || Configuration.getSystemSetting(
					"sap.ino.config.DISABLE_IDEA_IMAGE_HIDE_PHASE_BAR") * 1;
				var template = Number(disableImage) ? this.getFragment("sap.ino.vc.idea.fragments.ManageListItemNoImage") : this.getFragment(
					"sap.ino.vc.idea.fragments.ManageListItem");
				oList.bindItems({
					path: sPath,
					template: template,
					sorter: mList[sKey].sorter,
					filters: mList[sKey].filter,
					length: 4
				});
				//add "aria-label" to the right dom elements to make jaws read
				// var oBinding = oList.getBinding("items");
				// oBinding.attachDataReceived(function() {
				// 	jQuery.each(this.byId("ideasFragment--ideasList").getItems(), function(index0, item0) {
				// 	   item0.$().attr("aria-labelledby",item0.getContent()[1].getId());
				// 	});
				// }, this); 

				// set title accordingly to one of
				// CAMPAIGN_HOME_PANEL_IDEAS_FOLLOW CAMPAIGN_HOME_PANEL_IDEAS_UNASSIGNED CAMPAIGN_HOME_PANEL_IDEAS_COACHME CAMPAIGN_HOME_PANEL_IDEAS_EVALDONE
				var oTitle = this.byId("ideasFragment--panelTitle");
				oTitle.setText(this.getText("CAMPAIGN_HOME_PANEL_IDEAS_" + sKey.toUpperCase()));

				var bBackoffice = Configuration.hasCurrentUserPrivilege("sap.ino.ui::backoffice.access");
				var sOdataPath = "";
				if (bBackoffice) {
					sOdataPath = "/sap/ino/xs/rest/backoffice/odata.xsodata";
				} else {
					sOdataPath = "/sap/ino/xs/rest/community/odata.xsodata";
				}
				sPath = Configuration.getBackendRootURL() + sOdataPath + oList.mBindingInfos.items.binding.sPath + "?$format=json";
				var sFilter = oList.mBindingInfos.items.binding.sFilterParams;
				var sSorter = oList.mBindingInfos.items.binding.sSortParams;
				var sSelect = "&$select(ID)";
				sPath = sPath + "&" + sSorter + "&" + sFilter + sSelect;
				var oIdeaSearchParams = new JSONModel();
				oIdeaSearchParams.setData({
					path: sPath
				});
				sap.ui.getCore().setModel(oIdeaSearchParams, "ideaSearchParams");
			},

			_bindBlogs: function(sKey) {
				if (Configuration.getCurrentUser().USER_ID) {
					var bIsPhone = this.getModel("device").getProperty("/system/phone");
					var sPath = "data>/BlogSearchParams(searchToken=''," +
						"tagsToken=''," +
						"filterName='" + mBlogList[sKey].filterParam + "')/Results";
					var oBinding = {
						path: sPath,
						template: this.getFragment("sap.ino.vc.blog.fragments.ListItemHome"),
						sorter: mBlogList[sKey].sorter,
						length: 4,
						top: 4
					};
					if (bIsPhone) {
						var oCarousel = this.byId("blogsFragment--blogsCarousel");
						oCarousel.bindAggregation("pages", oBinding);
					} else {
						var oList = this.byId("blogsFragment--blogsList");
						if (oList) {
							oList.bindItems(oBinding);
						}
					}
					var oTitle = this.byId("blogsFragment--panelBlogTitle");
					if (this.getModel("component").getProperty("/SHOW_BACKOFFICE_BLOG")) {
						oTitle.setText(this.getText("CAMPAIGN_HOME_PANEL_BLOGS_" + sKey.toUpperCase()));
					} else {
						oTitle.setText(this.getText("HOMEPAGE_PANEL_CAMPAIGN_BLOGS"));
					}
				}
			},

			_bindUnchangedIdeas: function() {
				// bind Unchanged Ideas chart
				var oVizFrame = this.byId("unchangedIdeasFragment--UnchangedIdeasFrame");

				var oDatamodel = this.getModel("data");
				oDatamodel.read("/UnchangedIdeas", {
					async: true,
					success: function(oData) {
						var oModel = new sap.ui.model.json.JSONModel();
						oModel.setData(oData);
						oVizFrame.setModel(oModel);
					}
				});
			},

			_bindVotes: function() {
				// bind votes chart
				var oVizFrame = this.byId("votesFragment--VotesFrame");

				var oDatamodel = this.getModel("data");
				oDatamodel.read("/IdeaVotes", {
					async: true,
					sorters: [new Sorter("CHANGED_AT_YEAR_MONTH", false)],
					success: function(oData) {
						var oModel = new sap.ui.model.json.JSONModel();
						oModel.setData(oData);
						oVizFrame.setModel(oModel);
					}
				});
			},

			onCampaignsListItemPress: function(oEvent) {
				var oItem = oEvent.getSource();
				var oContext = oItem.getBindingContext("data");
				if (oContext) {
					this.navigateTo("campaign", {
						id: oContext.getProperty("ID")
					});
				}
			},

			onNavigateToCampaigns: function() {
				this.navigateTo("campaignlistvariant", {
					variant: "submittable"
				});
			},

			onOfficeToggle: function() {
				if (this._oParentView) {
					var oController = this._oParentView.getController();
					if (oController.switchView) {
						oController.switchView();
					}
				}
			},

			onOpenCampaignSettings: function(oEvent) {
				if (this._oParentView) {
					var oSource = oEvent.getSource();
					var oContext = oSource.getBindingContext("data");
					var oController = this._oParentView.getController();
					if (oController.openCampaignSettings) {
						oController.openCampaignSettings(oContext.getProperty("ID"));
					}
				}
			},

			onBackofficeSettings: function() {
				if (this._oParentView) {
					var oController = this._oParentView.getController();
					if (oController.onBackofficeSettings) {
						oController.onBackofficeSettings();
					}
				}
			},

			onCreateIdea: function(oEvent) {
				this.navigateTo("idea-create", {
					query: {
						campaign: oEvent.getParameter("campaignId")
					}
				});
			},

			onIdeaListTypeSelect: function(oEvent) {
				// two options: either by SegmentedButton or Select
				this._sIdeaViewKey = oEvent.getParameter("key") || oEvent.getParameter("selectedItem") && oEvent.getParameter("selectedItem").getKey();
				this._bindIdeas(this._sIdeaViewKey);
			},
			onBlogListTypeSelect: function(oEvent) {
				this._sBlogViewKey = oEvent.getParameter("key") || oEvent.getParameter("selectedItem") && oEvent.getParameter("selectedItem").getKey();
				this._bindBlogs(this._sBlogViewKey);
			},

			onOpenSubmitter: function(oEvent) {
				var oSource = oEvent.getSource();
				var iIdentityId = oSource.getBindingContext("data").getProperty("SUBMITTER_ID");
				this.openIdentityQuickView(oSource, iIdentityId);
			},

			onOpenCoach: function(oEvent) {
				var oSource = oEvent.getSource();
				var iIdentityId = oSource.getBindingContext("data").getProperty("COACH_ID");
				this.openIdentityQuickView(oSource, iIdentityId);
			},

			onNavigateToIdeas: function() {
				if (!this._sIdeaViewKey) {
					this.navigateTo("idealist");
				} else {
					this.navigateTo("idealistvariant", {
						variant: this._sIdeaViewKey
					});
				}
			},

			onNavigateToBlogs: function() {
				if (!this._sBlogViewKey) {
					this.navigateTo("bloglist");
				} else {
					this.navigateTo("bloglistvariant", {
						variant: mBlogList[this._sBlogViewKey].name
					});
				}
			},

			onNavigateToReport: function(oEvent) {
				var aIdComponents = ((oEvent.currentTarget && oEvent.currentTarget.id) ||
					(oEvent.oSource.sId)).split("--");
				var sFrameId = aIdComponents[aIdComponents.length - 1];

				this.navigateTo("report", {
					code: mReport[sFrameId]
				});
			},

			onItemPress: function(oEvent) {
				var oItem = oEvent.getSource();
				var oContext = oItem.getBindingContext("data");
				if (oContext) {
					this.navigateTo("idea-display", {
						id: oContext.getProperty("ID")
					});
				}
			},

			onBlogItemPress: function(oEvent) {
				if (this._bIsTokenPressed) {
					this._bIsTokenPressed = false;
					return;
				}
				var oItem = oEvent.getSource();
				var oContext = oItem.getBindingContext("data");
				if (oContext) {
					this.navigateTo("blog-display", {
						id: oContext.getProperty("ID")
					});
				}
			},

			onOpenCreator: function(oEvent) {
				var oSource = oEvent.getSource();
				var iIdentityId = oSource.getBindingContext("data").getProperty("CREATED_BY_ID");
				if (!this.oIdentityCardView) {
					this.oIdentityCardView = sap.ui.xmlview({
						viewName: "sap.ino.vc.iam.IdentityCard"
					});
					this.getView().addDependent(this.oIdentityCardView);
				}
				this.oIdentityCardView.getController().open(oSource, iIdentityId);
			},

			onNavigateToFeedList: function() {
				this.navigateTo("feedlist");
			},

			showPopupTagCard: function(oEvent) {
				this._bIsTokenPressed = true;
				if (!this._oPopover) {
					this._oPopover = sap.ui.xmlfragment("sap.ino.vc.tag.fragments.TagCardPopover", this);
					this.getView().addDependent(this._oPopover);
				}
				var oToken = oEvent.getSource();
				var sPath = "/SearchTagsAll(searchToken='',ID=" + oToken.getKey() + ")";
				var oDatamodel = this.getModel("data");
				var that = this;
				oDatamodel.read(sPath, {
					async: true,
					success: function(oData) {
						var oModel = new sap.ui.model.json.JSONModel();
						oModel.setData(oData);
						that._oPopover.setModel(oModel, "Tag");
						jQuery.sap.delayedCall(0, that, function() {
							that._oPopover.openBy(oToken);
						});
					}
				});

			}
		}));
});
}; // end of sap/ino/vc/home/BackOfficeHome.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.Display.controller') ) {
jQuery.sap.declare('sap.ino.vc.idea.Display.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.CheckBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.m.DialogType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ValueState'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.FlexBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.HTML'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/Display.controller",[
    "sap/ino/vc/commons/BaseObjectController",
    "sap/ino/vc/evaluation/EvaluationFormatter",
    "sap/ino/vc/idea/mixins/FollowUpMixin",
    "sap/ino/commons/models/object/Idea",
    "sap/ino/commons/application/Configuration",
    "sap/ui/model/json/JSONModel",
    "sap/m/MessageToast",
    "sap/ino/vc/commons/TopLevelPageFacet",
    "sap/ino/commons/models/object/Vote",
    "sap/ino/vc/idea/mixins/AssignmentActionMixin",
    "sap/ino/vc/idea/mixins/ChangeStatusActionMixin",
    "sap/ino/vc/commons/mixins/MailMixin",
    "sap/ino/vc/idea/mixins/VoteMixin",
    "sap/ino/vc/idea/mixins/VolunteerMixin",
    "sap/ino/vc/idea/mixins/MergeActionMixin",
    "sap/ino/commons/application/WebAnalytics",
    "sap/m/Label",
    "sap/m/Text",
    "sap/m/CheckBox",
    "sap/ino/commons/models/core/CodeModel",
    "sap/ino/vc/commons/mixins/FollowMixin",
    "sap/ino/vc/commons/mixins/TagCardMixin",
    "sap/ino/commons/models/object/RewardList",
    "sap/ino/vc/idea/mixins/CreateRewardActionMixin",
    "sap/ino/commons/models/aof/PropertyModel",
    "sap/ino/vc/idea/RewardFormatter",
    "sap/ino/commons/models/aof/ApplicationObjectChange",
    "sap/ino/controls/IdeaStatusType",
    "sap/ino/vc/idea/mixins/ChangeAuthorActionMixin",
    "sap/ino/vc/idea/mixins/ChangeAuthorActionFormatter",
    "sap/ino/vc/idea/mixins/ChangeDecisionMixin",
    "sap/ino/commons/models/object/IdeaObjectIntegration",
    "sap/ino/commons/models/object/IdeaLatest",
    "sap/m/Dialog",
    "sap/m/DialogType",
    "sap/ui/core/ValueState",
    "sap/m/MessageBox",
    "sap/m/FlexBox",
    "sap/m/Link",
    "sap/m/Button",
	"sap/m/ButtonType",
    "sap/ui/core/HTML"	
], function(BaseController,
	EvaluationFormatter,
	FollowUpMixin,
	Idea,
	Configuration,
	JSONModel,
	MessageToast,
	TopLevelPageFacet,
	Vote,
	AssignmentActionMixin,
	ChangeStatusActionMixin,
	MailMixin,
	VoteMixin,
	VolunteerMixin,
	MergeActionMixin,
	WebAnalytics,
	Label,
	Text,
	CheckBox,
	CodeModel,
	FollowMixin,
	TagCardMixin,
	Reward,
	CreateRewardActionMixin,
	PropertyModel,
	RewardFormatter,
	ApplicationObjectChange,
	IdeaStatusType,
	ChangeAuthorActionMixin,
	ChangeAuthorActionFormatter,
	ChangeDecisionMixin,
	IdeaObjectIntegration,
	IdeaLatest,
	Dialog,
	DialogType,
	ValueState,
	MessageBox,
	FlexBox,
	Link,
	Button,
	ButtonType,
	HTML
) {
	"use strict";

	var oFormatter = {
		decisionQuickViewVisibility: function(sDecisionPhaseCode, sDecisionStatusCode, sIdeaPhaseCode, sIdeaStatusCode, bDecisionVisible,
			sReasonCode, bBackofficePrivilege, sReasonComment) {
			if (sDecisionStatusCode !== sIdeaStatusCode || (sDecisionPhaseCode !== sIdeaPhaseCode || !sReasonCode || sReasonCode.trim() === '') &&
				(!sReasonComment || sReasonComment.trim() === '')) {
				return false;
			}
			if (bBackofficePrivilege || bDecisionVisible === 1) {
				return true;
			} else {
				return false;
			}
		},

		decisionValueOption: function(sReasonCode, sReasonComment) {
			if (sReasonCode && sReasonCode.trim() !== "") {
				return BaseController.prototype.formatter.valueOption.call(this, sReasonCode);
			}
			if (sReasonComment && sReasonComment.trim() !== "") {
				return sReasonComment.substr(0, 6);
			}
			return "";
		},

		voteTabVisibility: function(bPublish, bPublic, sCommentType, bBackofficePrivillge) {
			if (!bPublish & !bPublic && sCommentType !== 'TEXT' && sCommentType !== 'LIST') {
				return false;
			} else if (bBackofficePrivillge) {
				return true;
			} else if (bPublish) {
				return true;
			} else {
				return false;
			}
		},
		enableEditDecision: function(bEnable, aDecision, sIdeaPhaseCode, sIdeaStatusCode) {

			if (bEnable && aDecision && aDecision.length > 0) {
				aDecision.sort(function(a, b) {
					return b.ID - a.ID;
				});
				if (aDecision[0].STATUS_CODE !== sIdeaStatusCode || (aDecision[0].PHASE_CODE !== sIdeaPhaseCode || !aDecision[0].REASON_CODE ||
						aDecision[0].REASON_CODE
						.trim() === '') &&
					(!aDecision[0].REASON || aDecision[0].REASON.trim() === '')) {
					return false;
				}
				return true;
			} else {
				return false;
			}
		},
		editDecisionCustomData: function(aDecision) {
			if (aDecision && aDecision.length > 0) {
				aDecision.sort(function(a, b) {
					return b.ID - a.ID;
				});
				return aDecision[0].ID;
			}

		},
		visibleDecision: function(bBackofficePrivilege, aDecision, sIdeaPhaseCode, sIdeaStatusCode) {

			if (aDecision && aDecision.length > 0) {
				aDecision.sort(function(a, b) {
					return b.ID - a.ID;
				});
				if (aDecision[0].STATUS_CODE !== sIdeaStatusCode || (aDecision[0].PHASE_CODE !== sIdeaPhaseCode || !aDecision[0].REASON_CODE ||
						aDecision[0].REASON_CODE
						.trim() === '') &&
					(!aDecision[0].REASON || aDecision[0].REASON.trim() === '')) {
					return false;
				}
				if (bBackofficePrivilege || aDecision[0].DECISION_REASON_LIST_VISIBLE === 1) {
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
		},
		adjustDesWidth: function(bBackofficePrivilege, aDecision, sIdeaPhaseCode, sIdeaStatusCode) {
			var bVisible = oFormatter.visibleDecision(bBackofficePrivilege, aDecision, sIdeaPhaseCode, sIdeaStatusCode);
			if (bVisible === false) {
				return "IDEA_DEATAIL_WIDTH";
			} else {
				return "null";
			}
		},

		sectionTitle: function(iCounter, sText) {
			if (iCounter > 0) {
				return sText && sText + "(" + String(iCounter) + ")";
			} else {
				return sText;
			}
		},
		sectionInternalTitle: function(iNotesCount, iAttachCount, sText) {
			if (!parseInt(iNotesCount, 10) && !parseInt(iAttachCount, 10)) {
				return sText;
			} else {
				//return sText && sText + "(" + String(iNotesCount) + "/" + String(iAttachCount) + ")";
				return sText && sText + this.getText("MENU_MIT_INTERNAL_COUNTS", [String(iNotesCount), String(iAttachCount)]);
			}
		},
		sectionInternalTitleToolTip: function(iNotesCount, iAttachCount, sText) {
			if (!parseInt(iNotesCount, 10) && !parseInt(iAttachCount, 10)) {
				return null;
			} else {
				return sText;
			}
		},
		setIdeaDetailCommentsTab: function(iComment) {
			if (iComment === 1) {
				return "LATESTUPDATE_COMMENT_TAB";
			} else {
				return "null";
			}
		},
		setIdeaDetailCreateIcon: function(iCreate, iDisableImage) {
			if (iCreate === 1 && iDisableImage === false) {
				return "LATESTCTEATE_ICON";
			} else {
				return "null";
			}
		},

		isPreviousEnabled: function(ideaId) {
			var oideaListModel = this.getView().getModel("ideaList");
			if (oideaListModel && oideaListModel.getData()) {
				var ideaList = oideaListModel.getData();
				if (ideaList && ideaList.length >= 0) {
					var index = 0;
					$.each(ideaList, function(i, n) {
						if (n === ideaId) {
							index = i;
							return false;
						}
					});
					if (index - 1 >= 0) {
						return true;
					} else {
						return false;
					}
				} else {
					return false;
				}
			} else {
				return false;
			}

		},

		isNextEnabled: function(ideaId) {
			var ideaList = this.getView().getModel.getModel("ideaList").getData();
			if (ideaList && ideaList.length >= 0) {
				var index = 0;
				$.each(ideaList, function(i, n) {
					if (n === ideaId) {
						index = i;
						return false;
					}
				});
				if (index + 1 < ideaList.length) {
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
		},

		isPreviousOrNextVisible: function(ideaId) {
			var ideaList = this.getView().getModel("ideaList").getData();
			if (ideaList && ideaList.length >= 0) {
				var indicators = $.grep(ideaList, function(n, i) {
					return n === ideaId;
				});
				if (indicators.length > 0) {
					return true;
				}
				return false;
			} else {
				return false;
			}
		},
		aContributorsFirstPerson: function(aContributors) {
			if (!aContributors || aContributors.length <= 0) {
				return "";
			}
			if (aContributors.length === 1) {
				return aContributors[0].NAME;
			} else if (aContributors.length > 1) {
				return aContributors[0].NAME + "...";
			}
		},
		formatPressPreviousButton: function(indicator) {
			if (indicator === 1) {
				return false;
			}

		},
		formatPressNextButton: function(indicator, pageSize) {
			if (indicator === pageSize) {
				return false;
			}

		},
		enableLinkObject: function(system) {
			if (system) {
				return true;
			} else {
				return false;
			}
		}

	};

	jQuery.extend(oFormatter, BaseController.prototype.formatter, FollowUpMixin.followUpMixinFormatter, EvaluationFormatter, RewardFormatter,
		ChangeAuthorActionFormatter);

	/**
	 * @mixes TopLevelPageFacet, AssignmentActionMixin, ChangeStatusActionMixin, FollowUpMixin, MailMixin, VoteMixin
	 */
	return BaseController.extend("sap.ino.vc.idea.Display", jQuery.extend({}, TopLevelPageFacet, AssignmentActionMixin,
		ChangeStatusActionMixin, FollowUpMixin, MailMixin, VoteMixin, MergeActionMixin, FollowMixin, TagCardMixin, CreateRewardActionMixin,
		VolunteerMixin, ChangeAuthorActionMixin, ChangeDecisionMixin, {
			routes: ["idea-display"],
			formatter: oFormatter,
			preCheck: true,

			onInit: function() {
				BaseController.prototype.onInit.apply(this, arguments);
				this.setViewProperty("/EDIT", false);
				this.aBusyControls = [this.byId("ideaDisplay")];

				this.setModel(new JSONModel({
					EvaluationSelection: {},
					CreateAverageEvaluationEnabled: false,
					CreateTotalEvaluationEnabled: false
				}), "objectContext");

				this._initHandleRewardsAOChange();
			},

			createObjectModel: function(vObjectKey) {
				var oSettings = {
					nodes: ["Root", "Extension"],
					actions: ["modify", "modifyAndSubmit", "del", "assignCoach", "executeStatusTransition", "assignToMe", "unassignCoach",
						"mergeIdeas", "markAsDuplicate", "addExpert", "reassignCampaign", "changeAuthorStatic", "changeDecision", "createObject",
						"linkExistedObject", "copy"],
					continuousUse: true,
					readSource: {
						model: this.getDefaultODataModel(),
						includeNodes: [
							{
								name: "CampaignExperts",
								parentNode: "Root",
								primaryKey: "ID"
							},
							{
								name: "RespExperts",
								parentNode: "Root",
								primaryKey: "ID"
							}, {
								name: "CampaignManagers",
								parentNode: "Root",
								primaryKey: "ID"
							},
							{
								name: "Decisions",
								parentNode: "Root",
								primaryKey: "ID"
							},
							{
								name: "StatusDecisions",
								parentNode: "Root",
								primaryKey: "ID"
							}

                    ]
					}
				};
				WebAnalytics.logIdeaView(vObjectKey);
				return new Idea(vObjectKey, oSettings);
			},

			onRouteMatched: function(oEvent) {
				BaseController.prototype.onRouteMatched.apply(this, arguments);
				var that = this;
				var oIdea = this.getObjectModel();
				var oFormFields = this.byId("vBoxFormIdeals");
				var oAdminFormFields = this.byId("vBoxAdminFormIdeals");

				oIdea.getDataInitializedPromise().done(function(oDataInitializedData) {
					var iImageId = oDataInitializedData.CAMPAIGN_BACKGROUND_IMAGE_ID;
					var iSmallImageId = oDataInitializedData.CAMPAIGN_SMALL_BACKGROUND_IMAGE_ID;
					that.setBackgroundImages(iImageId, iSmallImageId);
					that.setViewProperty("/CO_AUTHOR", false);
					if (oIdea.oData.Contributors.length > 0) {
						that.setViewProperty("/CO_AUTHOR", true);
					}

					if (oFormFields) {
						oFormFields.removeAllItems();
					}
					if (oAdminFormFields) {
						oAdminFormFields.removeAllItems();
					}
					if (!!oIdea.oData.FieldsValue && oIdea.oData.FieldsValue.length > 0) {
						that.bindingFormIdeals(oFormFields, oIdea);
					}
					if (!!oIdea.oData.AdminFieldsValue && oIdea.oData.AdminFieldsValue.length > 0) {
						that.bindingAdminFormIdeals(oAdminFormFields, oIdea);
					}
					that.setVisibilityForRewards(oDataInitializedData);

					var oSearchModel = that.getOwnerComponent().getModel('search');
					if (oSearchModel) {
						oSearchModel.setProperty('/searchAguments', {
							"id": oIdea.getProperty("/CAMPAIGN_ID")
						});
					}
					//For mark as read when go to the detail section/comment section
					var oSectionTabSelected = that.byId('objectpage') ? that.byId('objectpage').getSelectedSection() : "";
					var aTypeCode = [];
					var bComment = oSectionTabSelected && (oSectionTabSelected.indexOf("sectionComments") > -1) ? true : false;
					var bDetail = oSectionTabSelected && (oSectionTabSelected.indexOf("sectionDetails") > -1) ? true : false;
					if (oIdea.getProperty("/SHOW_CREATED_VIEWER") === 1) {
						aTypeCode.push("CreatedViewer");
					}
					if (oIdea.getProperty("/SHOW_STATUSCHANGE_VIEWER") === 1) {
						aTypeCode.push("StatusChangeViewer");
					}
					if (bDetail && oIdea.getProperty("/SHOW_UPDATED_VIEWER") === 1) {
						aTypeCode.push("UpdatedViewer");
					}
					if (bComment && oIdea.getProperty("/SHOW_COMMENT_VIEWER") === 1) {
						aTypeCode.push("CommentViewer");
					}
					if (!bComment && that._commentAlreadyRead) {
						oIdea.setProperty("/SHOW_COMMENT_VIEWER", 0);
						that._commentAlreadyRead = false;
					}
					if (aTypeCode.length > 0) {
						var oMarkAsReadPara = {
							TYPE_CODE: aTypeCode,
							IDEA_ID: oIdea.getProperty("/ID")
						};
						var oMarkAsRequest = IdeaLatest.deleteViewerByObjectIdAndTypeCode(oMarkAsReadPara);
						oMarkAsRequest.done(function(oRes) {
							if (bComment && oIdea.getProperty("/SHOW_COMMENT_VIEWER") === 1) {
								that._commentAlreadyRead = true;
							}
						});
					}
					var bAttachment = oSectionTabSelected && (oSectionTabSelected.indexOf("sectionAttachments") > -1) ? true : false;
					if (bAttachment) {
						oIdea.setProperty("/EDITABLE", false);
					}
				});
				var objectContextModel = that.getModel("objectContext");
				var aAvgEvalId = Object.keys(objectContextModel.getProperty("/EvaluationSelection") || {});
				if (aAvgEvalId.length > 0) {
					objectContextModel.setProperty("/EvaluationSelection", {});
					objectContextModel.setProperty("/CreateAverageEvaluationEnabled", false);
					objectContextModel.setProperty("/CreateTotalEvaluationEnabled", false);
				}
				// TODO: Why can't we do that in a declarative mode? There is no dynamics contained at all
				this.setHelp("IDEA_DISPLAY", "IDEA_DISPLAY_ADDITIONAL");
				var ideaId = oEvent.getParameter("arguments").id;
				this.initPageIndicatorLabel(ideaId);
				var sURL = Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/update_object_view_count.xsjs";
				var oBody = {
					OBJECT_TYPE: "IDEA",
					OBJECT_ID: ideaId,
					USER_NAME: Configuration.getCurrentUser().USER_NAME
				};
				var oAjaxPromise = jQuery.ajax({
					url: sURL,
					headers: {
						"X-CSRF-Token": Configuration.getXSRFToken()
					},
					data: JSON.stringify(oBody),
					dataType: "json",
					type: "POST",
					contentType: "application/json; charset=UTF-8",
					async: true
				});
				oAjaxPromise.done();
			},

			onAfterRendering: function() {
				//var objectContextModel = that.getModel("objectContext");
				var that = this;
				var systeamSetting = Configuration.getSystemSetting("sap.ino.config.DISABLE_IDEA_IMAGE");
				var systeamSettingPhaseBar = Configuration.getSystemSetting("sap.ino.config.DISABLE_IDEA_IMAGE_HIDE_PHASE_BAR");
				that.setViewProperty('/DISABLE_IDEA_IMAGE', !!(systeamSetting * 1) || !!(systeamSettingPhaseBar * 1));
				that.setViewProperty('/DISABLE_IDEA_IMAGE_HIDE_PHASE_BAR', !!(systeamSettingPhaseBar * 1));
				that.setPageContentTopStyle();
				//preload for evaluation
				jQuery.sap.delayedCall(0, that, function() {
				    CodeModel.getCodes("sap.ino.xs.object.evaluation.Model.Criterion");
				    CodeModel.getCodes("sap.ino.xs.object.basis.Unit.Root");
				    CodeModel.getCodes("sap.ino.xs.object.status.Action.Root");
				});
			},

			bindingAdminFormIdeals: function(oFormFields, oIdea) {
				var that = this;
				jQuery.each(oIdea.oData.AdminFieldsValue, function(i, oField) {
					if (oField.STATE_OF_PUBLISH === 1) {
						var lblText = oField.DEFAULT_TEXT + ":";
						if (oField.UOM_CODE) {
							lblText = oField.DEFAULT_TEXT + "(" + CodeModel.getText("sap.ino.xs.object.basis.Unit.Root", oField.UOM_CODE) + "):";
						}
						var oLabel = new Label({
							text: lblText,
							tooltip: oField.DEFAULT_LONG_TEXT
						});
						oLabel.addStyleClass("sapInoIdeaFormLabelStyle");
						var sDataType;
						if (oField.DATATYPE_CODE === "BOOLEAN") {
							sDataType = "BOOL_VALUE";
						} else if (oField.DATATYPE_CODE === "TEXT") {
							sDataType = "TEXT_VALUE";
						} else if (oField.DATATYPE_CODE === "RICHTEXT") {
							sDataType = "RICH_TEXT_VALUE";
						} else if (oField.DATATYPE_CODE === "DATE") {
							sDataType = "DATE_VALUE";
						} else {
							sDataType = "NUM_VALUE";
						}
						var oTxt = oField[sDataType];
						var valueList = oField.valueOptionList;
						if (!valueList) {
							if (oField.VALUE_OPTION_LIST_CODE) {
								var sCodeTable = "sap.ino.xs.object.basis.ValueOptionList.Root_" + oField.VALUE_OPTION_LIST_CODE;
								valueList = CodeModel.getCodes(sCodeTable, function(oCode) {
									return oCode.ACTIVE === 1;
								});
							}
						}
						if (!!valueList && valueList.length > 0 && oTxt !== undefined && oTxt !== null && oTxt !== "") {
							jQuery.each(valueList, function(index, data) {
								if (data.CODE.toString() === oTxt.toString()) {
									oTxt = data.DEFAULT_TEXT;
									return;
								}
							});
						}
						if (oField.DATATYPE_CODE === "BOOLEAN" && (!valueList || valueList.length === 0)) {
							var bValue = oField[sDataType] === 0 || !oField[sDataType] ? false : true;
							var oCheckBox = new CheckBox({
								text: oField.DEFAULT_TEXT,
								selected: bValue,
								editable: false,
								tooltip: oField.DEFAULT_LONG_TEXT
							});
							var oCheckLabel = oCheckBox._getLabel();
							oCheckLabel.addStyleClass("sapInoIdeaFormLabelStyle");
							oFormFields.addItem(oCheckBox);
						} else {
							var contentLbl;
							if (oField.DATATYPE_CODE === "NUMERIC" && !!oTxt && (!valueList || valueList.length === 0)) {
								var oNumberFormat = sap.ui.core.format.NumberFormat.getFloatInstance({
									groupingEnabled: true,
									groupingSeparator: ","
								});
								contentLbl = new Text();
								contentLbl.setText(oNumberFormat.format(oTxt));
							} else if (oField.DATATYPE_CODE === "RICHTEXT" && !!oTxt && (!valueList || valueList.length === 0)) {
								contentLbl = new sap.ui.core.HTML({
									sanitizeContent: true,
									preferDOM: false
								});
								contentLbl.setContent(oTxt);
							} else if (oField.DATATYPE_CODE === "DATE" && !!oTxt && (!valueList || valueList.length === 0)) {
								// 			var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
								// 				relative: false
								// 			});
								contentLbl = new Text();
								// 			contentLbl.setText(oDateFormat.format(oTxt));
								contentLbl.setText(oFormatter.toDate(oTxt));
							} else {
								contentLbl = new Text();
								contentLbl.setText(oTxt);
							}
							oFormFields.addItem(oLabel);
							oFormFields.addItem(contentLbl);
						}
					}
				});

			},

			bindingFormIdeals: function(oFormFields, oIdea) {
				var that = this;

				jQuery.each(oIdea.oData.FieldsValue, function(i, oField) {
					var lblText = oField.DEFAULT_TEXT + ":";
				
				if(oField.IS_DISPLAY_ONLY){
				var oRichTextHtml = new HTML({
					sanitizeContent: true,
					preferDOM: false,
					content: {
						model: "object",
						path: "/FieldsValue/" + i + "/DISPLAY_TEXT",
						formatter: that.formatter.wrapHTML
					}
				});
				 oFormFields.addItem(oRichTextHtml);
				 return true;   
				}					
					
					if (oField.UOM_CODE) {
						lblText = oField.DEFAULT_TEXT + "(" + CodeModel.getText("sap.ino.xs.object.basis.Unit.Root", oField.UOM_CODE) + "):";
					}
					var oLabel = new Label({
						text: lblText,
						tooltip: oField.DEFAULT_LONG_TEXT
					});
					oLabel.addStyleClass("sapInoIdeaFormLabelStyle");
					var sDataType;
					if (oField.DATATYPE_CODE === "BOOLEAN") {
						sDataType = "BOOL_VALUE";
					} else if (oField.DATATYPE_CODE === "TEXT") {
						sDataType = "TEXT_VALUE";
					} else if (oField.DATATYPE_CODE === "RICHTEXT") {
						sDataType = "RICH_TEXT_VALUE";
					} else if (oField.DATATYPE_CODE === "DATE") {
						sDataType = "DATE_VALUE";
					} else {
						sDataType = "NUM_VALUE";
					}
					var oTxt = oField[sDataType];
					var valueList = oField.valueOptionList;
					if (!!valueList && valueList.length > 0 && oTxt !== undefined && oTxt !== null && oTxt !== "") {
						jQuery.each(valueList, function(index, data) {
							if (data.CODE.toString() === oTxt.toString()) {
								oTxt = data.DEFAULT_TEXT;
								return;
							}
						});
					}
					if (oField.DATATYPE_CODE === "BOOLEAN" && (!valueList || valueList.length === 0)) {
						if (oField.IS_HIDDEN === 1) {
							var hiddenTxt = new Text();
							hiddenTxt.setText("******");
							hiddenTxt.setTooltip(that.getText("IDEA_DISPLAY_FORM_HIDDEN_TOOLTIP"));
							oFormFields.addItem(oLabel);
							oFormFields.addItem(hiddenTxt);
						} else {
							var bValue = oField[sDataType] === 0 || !oField[sDataType] ? false : true;
							var oCheckBox = new CheckBox({
								text: oField.DEFAULT_TEXT,
								selected: bValue,
								editable: false,
								tooltip: oField.DEFAULT_LONG_TEXT
							});
							var oCheckLabel = oCheckBox._getLabel();
							oCheckLabel.addStyleClass("sapInoIdeaFormLabelStyle");
							oFormFields.addItem(oCheckBox);
						}
					} else {
						var contentLbl;
						if (oField.DATATYPE_CODE === "NUMERIC" && !!oTxt && (!valueList || valueList.length === 0)) {
							var oNumberFormat = sap.ui.core.format.NumberFormat.getFloatInstance({
								groupingEnabled: true,
								groupingSeparator: ","
							});
							contentLbl = new Text();
							contentLbl.setText(oNumberFormat.format(oTxt));
						} else if (oField.DATATYPE_CODE === "RICHTEXT" && !!oTxt && (!valueList || valueList.length === 0)) {
							contentLbl = new sap.ui.core.HTML({
								sanitizeContent: true,
								preferDOM: false
							});
							contentLbl.setContent(oTxt);
						} else if (oField.DATATYPE_CODE === "DATE" && !!oTxt && (!valueList || valueList.length === 0)) {
							// 			var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
							// 				relative: false
							// 			});
							contentLbl = new Text();
							// 			contentLbl.setText(oDateFormat.format(oTxt));
							contentLbl.setText(oFormatter.toDate(oTxt));
						} else {
							contentLbl = new Text();
							contentLbl.setText(oTxt);
						}
						if (oField.IS_HIDDEN === 1) {
							if (oField.DATATYPE_CODE === "RICHTEXT") {
								contentLbl = new Text();
							}
							contentLbl.setText("******");
							contentLbl.setTooltip(that.getText("IDEA_DISPLAY_FORM_HIDDEN_TOOLTIP"));
						}
						oFormFields.addItem(oLabel);
						oFormFields.addItem(contentLbl);
					}
				});
			},

			hasBackgroundImage: function() {
				// todo: why do we have to implement this not just give a parameter
				return true;
			},

			getODataEntitySet: function() {
				// can be redefined if OData Model is needed;
				return "IdeaFull";
			},

			onCampaignPressed: function(oEvent) {
				// prevent href
				oEvent.preventDefault();

				var iId = this.getObjectModel().getProperty("/CAMPAIGN_ID");
				this.navigateTo("campaign", {
					id: iId
				});
			},

			onIdeaPressed: function(oEvent) {
				// prevent href
				oEvent.preventDefault();

				var iId = this.getObjectModel().getProperty("/LINK_IDEA_ID");
				this.navigateTo("idea-display", {
					id: iId
				});
			},

			onEdit: function(oEvent) {
				this.navigateTo("idea-edit", {
					id: this.getObjectModel().getKey()
				});
			},

			onGeneralEdit: function(oEvent) {
				if (!this._oEditActionSheet) {
					this._oEditActionSheet = this.createFragment("sap.ino.vc.idea.fragments.EditActionSheet", this.getView().getId());
					this.getView().addDependent(this._oEditActionSheet);
				}
				this._oEditActionSheet.openBy(oEvent.getSource());
			},

			onRewardCreateEanble: function(IdeaId) {
				if (IdeaId) {
					return PropertyModel.getStaticActionEnabledStaticFormatter("sap.ino.xs.object.reward.RewardList", "create", {
						IDEA_ID: IdeaId
					})(IdeaId);
				}
				return false;
			},
			onCreate: function(oEvent) {
				//   var oIdea = this.getObjectModel();
				//             this.setViewProperty("/CREATE_REWARD",this.onRewardCreateEanble(oIdea.oData.ID));

				if (!this._oCreateActionSheet) {
					this._oCreateActionSheet = this.createFragment("sap.ino.vc.idea.fragments.CreateActionSheet", this.getView().getId());
					this.getView().addDependent(this._oCreateActionSheet);
				}
				this._oCreateActionSheet.openBy(oEvent.getSource());
			},

			onCreateEvaluation: function() {
				var oController = this;
				this.navigateTo("evaluation-create", {
					query: oController._getEvaluationQuery()
				});
			},

			_getEvaluationQuery: function() {
				var oQuery = {
					ideaId: this.getObjectModel().getKey()
				};
				var oData = this.getModel("data").oData;
				var oRegex = /^EvaluationRequestFullItem\((\d+)\)$/igm;
				var sRequestId;
				if (oData) {
					for (var prop in oData) {
						if (oData.hasOwnProperty(prop)) {
							var oMatch = oRegex.exec(prop);
							if (oMatch && oMatch.length > 1) {
								sRequestId = oMatch[1];
							}
						}
					}
				}
				if (sRequestId) {
					oQuery.EvalReqItemId = sRequestId;
				}
				return oQuery;
			},

			onCreateAverageEvaluation: function() {
				var oController = this;
				var fnCreateAvgEval = function(includeAttachs) {
					var aAvgEvalId = Object.keys(oController.getModel("objectContext").getProperty("/EvaluationSelection") || {});
					if (aAvgEvalId.length > 0) {
						oController.navigateTo("evaluation-create", {
							query: {
								ideaId: oController.getObjectModel().getKey(),
								EvalReqItemId: oController.getObjectModel().getKey(),
								evalIds: aAvgEvalId.join(","),
								evalAction: 1,
								includeAttachs: includeAttachs
							}
						});
					}
				};
				var aActions = [sap.m.MessageBox.Action.YES, sap.m.MessageBox.Action.NO];
				sap.m.MessageBox.confirm(oController.getText("IDEA_OBJECT_MSG_NEW_CREATE_AVERAGE_EVALUATION"), {
					actions: aActions,
					onClose: function(sAction) {
						var index = Math.pow(aActions.length, aActions.indexOf(sAction) + 1);
						if (index === 2) {
							fnCreateAvgEval(1);
						}
					}
				});
			},

			onCreateTotalEvaluation: function() {
				var oController = this;
				var fnCreateTotalEval = function(includeAttachs) {
					var aAvgEvalId = Object.keys(oController.getModel("objectContext").getProperty("/EvaluationSelection") || {});
					if (aAvgEvalId.length > 0) {
						oController.navigateTo("evaluation-create", {
							query: {
								ideaId: oController.getObjectModel().getKey(),
								EvalReqItemId: oController.getObjectModel().getKey(),
								evalIds: aAvgEvalId.join(","),
								evalAction: 2,
								includeAttachs: includeAttachs
							}
						});
					}
				};
				var aActions = [sap.m.MessageBox.Action.YES, sap.m.MessageBox.Action.NO];
				sap.m.MessageBox.confirm(oController.getText("IDEA_OBJECT_MSG_NEW_CREATE_TOTAL_EVALUATION"), {
					actions: aActions,
					onClose: function(sAction) {
						var index = Math.pow(aActions.length, aActions.indexOf(sAction) + 1);
						if (index === 2) {
							fnCreateTotalEval(1);
						}
					}
				});
			},

			onContactPeople: function(oEvent) {
				var oSource = oEvent.getSource();

				if (!this._oContactActionSheet) {
					this._oContactActionSheet = this.createFragment("sap.ino.vc.idea.fragments.ContactActionSheet", this.getView().getId());
					this.getView().addDependent(this._oContactActionSheet);
				}

				this._oContactActionSheet.openBy(oSource);
			},

			onContactContributors: function() {
				var oIdeaModel = this.getObjectModel();
				var aPeople = oIdeaModel.getProperty("/Contributors").concat(
					oIdeaModel.getProperty("/Submitter"));
				if (this.getObjectModel().getPropertyModel().getProperty("/nodes/Root/customProperties/EmailVisibilies").CONTRIBUTORS) {
					this.triggerMail(aPeople);
				} else {
					this.onIdeaContactMail(aPeople);
				}
			},

			onContactCoach: function() {
				var oIdeaModel = this.getObjectModel();
				var aPeople = oIdeaModel.getProperty("/Coach");
				if (this.getObjectModel().getPropertyModel().getProperty("/nodes/Root/customProperties/EmailVisibilies").COACHES) {
					this.triggerMail(aPeople);
				} else {
					this.onIdeaContactMail(aPeople);
				}
			},

			onContactIdeaExperts: function() {
				var oIdeaModel = this.getObjectModel();
				var aPeople = oIdeaModel.getProperty("/Experts");
				if (this.getObjectModel().getPropertyModel().getProperty("/nodes/Root/customProperties/EmailVisibilies").IDEA_EXPERTS) {
					this.triggerMail(aPeople);
				} else {
					this.onIdeaContactMail(aPeople);
				}
			},

			onContactCampaignExperts: function() {
				var oIdeaModel = this.getObjectModel();
				var aPeople = oIdeaModel.getProperty("/CampaignExperts");
				if (this.getObjectModel().getPropertyModel().getProperty("/nodes/Root/customProperties/EmailVisibilies").CAMP_EXPERTS) {
					this.triggerMail(aPeople);
				} else {
					this.onIdeaContactMail(aPeople);
				}
			},

			triggerMail: function(aPeople) {

				var sMailAddress = aPeople.filter(function(oPerson) {
					return oPerson.IS_VALID_EMAIL && oPerson.EMAIL;
				}).map(function(oRecipient) {
					return oRecipient.EMAIL;
				}).reduce(function(aRecipients, oRecipient) {
					if (aRecipients.indexOf(oRecipient) < 0) {
						aRecipients.push(oRecipient);
					}
					return aRecipients;
				}, []).join(";");

				var oMailContent = this.createMailContent();
				sap.m.URLHelper.triggerEmail(sMailAddress, oMailContent.subject, oMailContent.body);
			},

			onCreateWall: function(oEvent) {
				var that = this;
				var oIdea = this.getObjectModel();
				if (oIdea) {
					oIdea.createWall(this.getOwnerComponent()).done(function(iWallID) {
						that.navigateToWall("wall", {
							id: iWallID
						});
					});
				}
			},

			getCopyDialog: function(oEvent) {
				if (!this._oCopyIdeaDialog) {
					this._oCopyIdeaDialog = this.createFragment("sap.ino.vc.idea.fragments.Copy", this.getView().getId());
					this.getView().addDependent(this._oCopyIdeaDialog);
					this._oCopyOkBtn = this.byId(this.createId("copyok"));
					this._oCopyIdeaDialog.setInitialFocus();
				}
				return this._oCopyIdeaDialog;
			},

			onCopyIdea: function() {
				var oIdea = this.getObjectModel();
				var oDialog = this.getCopyDialog();
				oDialog.setModel(new JSONModel({
					"NAME": this.getText("IDEA_OBJECT_FLD_COPY_PREFIX", [oIdea.getProperty("/NAME")])
				}), "copy");

				oDialog.open();
			},

			onCopyIdeaTitleChange: function(oEvent) {
				if (oEvent.getParameters().newValue && oEvent.getParameters().newValue.length > 0) {
					this._oCopyOkBtn.setEnabled(true);
				} else {
					this._oCopyOkBtn.setEnabled(false);
				}
			},

			onCopyDialogOk: function() {
				var that = this;
				var oDialog = this.getCopyDialog();
				var sCopyTitle = oDialog.getModel("copy").getProperty("/NAME");

				oDialog.setBusy(true);

				var oCopyRequest = that.executeObjectAction("copy", {
					parameters: {
						ID: -1,
						NAME: sCopyTitle
					},
					messages: {
						success: "IDEA_OBJECT_MSG_COPY_SUCCESS",
						error: "IDEA_OBJECT_MSG_COPY_FAILURE"
					}
				});

				oCopyRequest.done(function(oResponse) {
					oDialog.close();
					// wait for success toast
					setTimeout(function() {
						that.navigateTo("idea-edit", {
							id: oResponse.getKey()
						});
					}, 500);
				});

				oCopyRequest.always(function() {
					oDialog.setBusy(false);
				});
			},

			onCopyDialogClose: function() {
				this.getCopyDialog().close();
			},

			onCopyDialogAfterClose: function() {
				this.resetClientMessages();
				//reset the dialog
				this.getCopyDialog().destroy();
				this._oCopyIdeaDialog = undefined;
			},

			onOpenDecisionQuickView: function(oEvent) {
				var oSource = oEvent.getSource();
				var iDecisionId = oSource.getBindingContext("object").getProperty("ID");
				if (oSource && iDecisionId) {
					if (!this._oDecisionCardView || !this._oDecisionCardView.getController()) {
						this._oDecisionCardView = sap.ui.xmlview({
							viewName: "sap.ino.vc.idea.DecisionQuickView"
						});
						oSource.addDependent(this._oDecisionCardView);
					}
					this._oDecisionCardView.getController().open(oSource, iDecisionId);
				}
			},

			onRespListHint: function(oEvent) {
				var oDialog = this._getRespListHintDialog();
				var oIdea = this.getObjectModel();
				var sCode = oIdea.getProperty("/RESP_VALUE_CODE");
				oDialog.bindElement({
					path: "data>/RespValues('" + sCode + "')/"
				});
				oDialog.open();
			},

			onRespListHintDialogClose: function() {
				var oDialog = this._getRespListHintDialog();
				oDialog.close();
			},

			_getRespListHintDialog: function() {
				var oDialog = this._oRespListHintDialog;
				if (!oDialog) {
					oDialog = this.createFragment("sap.ino.vc.idea.fragments.ResponsibilityDetail", this.getView().getId());
					this.getView().addDependent(oDialog);
					this._oRespListHintDialog = oDialog;
					this._oRespListHintDialog.setInitialFocus(this.createId("TagToken"));
				}
				return oDialog;
			},

			showPopupTagCard: function(oEvent) {
				if (!this._oPopover) {
					this._oPopover = sap.ui.xmlfragment("sap.ino.vc.tag.fragments.TagCardPopover", this);
					this.getView().addDependent(this._oPopover);
				}
				var oToken = oEvent.getSource();
				var sPath = "/SearchTagsAll(searchToken='',ID=" + oToken.getKey() + ")";
				var oDatamodel = this.getModel("data");
				var that = this;
				oDatamodel.read(sPath, {
					async: true,
					success: function(oData) {
						var oModel = new JSONModel();
						oModel.setData(oData);
						that._oPopover.setModel(oModel, "Tag");
						jQuery.sap.delayedCall(0, that, function() {
							that._oPopover.openBy(oToken);
						});
					}
				});
			},

			/**
			 * Update the reward create button visible, once an reward is
			 * created, deleted
			 */
			_initHandleRewardsAOChange: function() {
				var oController = this;

				var fnAOChangeListener = function(oEvent) {
					if (oEvent.getParameter("object").getMetadata().getName() === "sap.ino.commons.models.object.RewardList" && oController &&
						oController.getObjectModel()) {
						oController.getObjectModel().checkUpdate(true, false);
					}
				};

				ApplicationObjectChange.attachChange(ApplicationObjectChange.Action.Create, fnAOChangeListener);
				ApplicationObjectChange.attachChange(ApplicationObjectChange.Action.Del, fnAOChangeListener);
				ApplicationObjectChange.attachChange(ApplicationObjectChange.Action.Action, fnAOChangeListener);
			},

			/**
			 * set visibility for reward section manually to fix the redirect error from reward list page
			 */
			setVisibilityForRewards: function(oData) {
				if (this.byId("sectionRewards") && oData) {
					this.byId("sectionRewards").setVisible(oData.IDEA_HAS_REWARDS > 0 || oData.REWARD_ACTIVE > 0);
				}
			},
			hasPendingChanges: function() {
				var oIdea = this.getObjectModel();
				if (!oIdea) {
					return false;
				}
				var oCommentView = oIdea.getProperty("/IDEA_COMMENT_VIEW");
				var oInternalCommentView = oIdea.getProperty("/IDEA_INTERNAL_COMMENT_VIEW");
				var oCommentModel = oCommentView ? oCommentView.getModel("comment") : null;
				var oInternalCommentModel = oInternalCommentView ? oInternalCommentView.getModel("comment") : null;
				if (oCommentModel && (this.getCurrentRoute() !== "idea-display" || oCommentModel.getProperty("/OBJECT_ID") !== oIdea.getProperty(
					"/ID") || (this.getCurrentRoute() === "idea-display" && this.getRouter().getContext().indexOf("idea/") < 0))) {
					// 	return oCommentModel.hasPendingChanges();
					//	oCommentModel.revertChanges();
					oCommentView.setModel(null, "comment");
					oCommentModel = null;
				}
				if (oInternalCommentModel && (this.getCurrentRoute() !== "idea-display" || oInternalCommentModel.getProperty("/OBJECT_ID") !== oIdea
					.getProperty("/ID") || (this.getCurrentRoute() === "idea-display" && this.getRouter().getContext().indexOf("idea/") < 0))) {
					//return oInternalCommentModel.hasPendingChanges();
					//oInternalCommentModel.revertChanges();
					oInternalCommentView.setModel(null, "comment");
					oInternalCommentModel = null;
				}

				return false;
			},
			// 			resetPendingChanges: function() {
			// 				var oIdea = this.getObjectModel();
			// 				var oCommentView = oIdea.getProperty("/IDEA_COMMENT_VIEW");
			// 				var oInternalCommentView = oIdea.getProperty("/IDEA_INTERNAL_COMMENT_VIEW");
			// 				var oCommentModel = oCommentView ? oCommentView.getModel("comment") : null;
			// 				var oInternalCommentModel = oInternalCommentView ? oInternalCommentView.getModel("comment") : null;
			// 				if (oCommentModel && oCommentModel.hasPendingChanges()) {
			// 					oCommentModel.revertChanges();
			// 				}
			// 				if (oInternalCommentModel && oInternalCommentModel.hasPendingChanges()) {
			// 					oInternalCommentModel.revertChanges();
			// 				}
			// 			},
			getCorrespondingCommentModel: function(scommentType) {
				var oIdea = this.getObjectModel();
				var oModel, oCommentView;
				if (scommentType === "IDEA") {
					oCommentView = oIdea.getProperty("/IDEA_COMMENT_VIEW");
					oModel = oCommentView ? oCommentView.getModel("comment") : null;
				} else if (scommentType === "INTERNAL") {
					oCommentView = oIdea.getProperty("/IDEA_INTERNAL_COMMENT_VIEW");
					oModel = oCommentView ? oCommentView.getModel("comment") : null;
				}
				return oModel;
			},
			onCreateEvaluationRequest: function(oEvent) {
				this.navigateTo("evaluationrequest-create", {
					query: {
						idea: this.getObjectModel().getKey()
					}
				});
			},
			onOpenDecisionMaker: function(oEvent) {

				var oSource = oEvent.getSource();
				var oBindingContext = oSource.getBindingContext("object");
				var iIdentityId = oBindingContext.getProperty(oBindingContext.sPath + "/DECIDER_ID");
				if (!this._oIdentityCardView) {
					this._oIdentityCardView = sap.ui.xmlview({
						viewName: "sap.ino.vc.iam.IdentityCard"
					});
					this.getView().addDependent(this._oIdentityCardView);
				}
				this._oIdentityCardView.getController().open(oSource, iIdentityId);
			},
			onAuthorPressed: function(oEvent) {
				var oSource = oEvent.getSource();
				var oBindingContext = oSource.getBindingContext("object");
				var iSubmitterID = oBindingContext.getProperty(oBindingContext.sPath + "SUBMITTER_ID");
				this.callIdentityView(oSource, iSubmitterID);
			},
			onCoauthorPressed: function(oEvent) {
				var oSource = oEvent.getSource();
				var oBindingContext = oSource.getBindingContext("object");
				//var iCoauthorID = oBindingContext.getProperty(oBindingContext.sPath + "/IDENTITY_ID");
				var iFirstCoauthorID = oBindingContext.getProperty(oBindingContext.sPath + "Contributors")[0].IDENTITY_ID;
				this.callIdentityView(oSource, iFirstCoauthorID);
			},
			onCoachPressed: function(oEvent) {
				var oSource = oEvent.getSource();
				var oBindingContext = oSource.getBindingContext("object");
				var iCoachID = oBindingContext.getProperty(oBindingContext.sPath + "COACH_ID");
				this.callIdentityView(oSource, iCoachID);
			},
			callIdentityView: function(oSource, iIdentityId) {
				if (!this._oIdentityCardView) {
					this._oIdentityCardView = sap.ui.xmlview({
						viewName: "sap.ino.vc.iam.IdentityCard"
					});
					this.getView().addDependent(this._oIdentityCardView);
				}
				this._oIdentityCardView.getController().open(oSource, iIdentityId);
			},
			getIntegrationObjectDialog: function() {
				if (!this._oCopyIntegrationObject) {
					this._oCopyIntegrationObject = this.createFragment("sap.ino.vc.idea.fragments.IntegrationObjectDialog", this.getView().getId());
					this.getView().addDependent(this._oCopyIntegrationObject);
				}
				return this._oCopyIntegrationObject;
			},

			onCreateIntegrationObject: function() {
				var that = this;
				var oDialog = this.getIntegrationObjectDialog();
				IdeaObjectIntegration.getAllApiFromCampaign({
					CAMPAIGN_ID: this.getObjectModel().getProperty("/CAMPAIGN_ID")
				}).done(function(oData) {
					if (oData && oData.RESULT && oData.RESULT.length === 1) {
						that.enableCreateIntegrationObjectTag = true;
    					that.getIntegrationObjectDialog().getModel("objectContext").setProperty("/enableCreateIntegrationObjectBtn", true);
    					that.objectTechnicalName = oData.RESULT[0].TECHNICAL_NAME;
					} else {
						oData.enableCreateIntegrationObjectBtn = false;
					}
					setTimeout(function() {
						oDialog.setModel(new JSONModel(oData), "objectContext");
						oDialog.open();
					}, 500);
				}).fail(function(odata) {
					odata.RESULT = [];
				});
			},

			onIntegrationObjectTargetConfim: function() {
				var that = this;
				var oDialog = this.getIntegrationObjectDialog();
				oDialog.setBusy(true);
				var oMessageToast = {
					duration: 7000,
					width: '20em'
				};
				IdeaObjectIntegration.createObject({
					API_TECH_NAME: this.objectTechnicalName,
					CAMPAIGN_ID: this.getObjectModel().getProperty("/CAMPAIGN_ID"),
					IDEA_ID: this.getObjectModel().getProperty("/ID")
				}).done(function(res) {
					oDialog.setBusy(false);
					oDialog.close();
					var requestText = res.RESULT.status.toString().includes('20') ?
						'Your request to create a new object request has been sent successfully.' :
						'Your request to create a new object request has been failed.';
					var sShowText = requestText + 'The request ID is ' + (res.RESULT.generatedId ? res.RESULT.generatedId[-1] : '') +
						' and message status is: ' + (res.RESULT.status ? res.RESULT.status : '') + '.';
					var oTextControl = new Text({
						text: sShowText
					});
					var oLinkControl = new Link({
						href: Configuration.getBackendRootURL() + '/sap/ino/config#integrationMonitorList',
						text: 'For more detail, please navigate to Innovation Office->Monitor->Integration',
						target: '_blank'
					});
					if (!this.oSuccessMessageDialog) {
						this.oSuccessMessageDialog = new Dialog({
							type: DialogType.Message,
							title: res.RESULT.status.toString().includes('20') ? ValueState.Success : ValueState.Error,
							state: res.RESULT.status.toString().includes('20') ? ValueState.Success : ValueState.Error,
							content: new FlexBox({
								items: [oTextControl, oLinkControl],
								alignItems: "Start",
								justifyContent: "Start",
								alignContent: "Start"
							}),
							beginButton: new Button({
								type: ButtonType.Emphasized,
								text: "OK",
								press: function() {
									this.oSuccessMessageDialog.close();
								}.bind(this)
							})
						});
					}

					this.oSuccessMessageDialog.open();
				}).fail(function() {
					oDialog.setBusy(false);
					oDialog.close();
					MessageToast.show(that.getText("INTEGRATION_TARGET_MSG_STATUS_CREATE_FAILED"), oMessageToast);
				});
			},

			onIntegrationObjectDialogClose: function() {
				this.getIntegrationObjectDialog().close();
				this.getIntegrationObjectDialog().destroy();
				this._oCopyIntegrationObject = undefined;
			},

			selectIntegrationTarget: function(oEvent) {
				this.getIntegrationObjectDialog().getModel("objectContext").setProperty("/enableCreateIntegrationObjectBtn", true);
				this.objectTechnicalName = oEvent.getParameter("listItem").getBindingContext("objectContext").getProperty("TECHNICAL_NAME");
			},

			onUpdateFinished: function(oEvent) {
				if (this.enableCreateIntegrationObjectTag) {
					this.enableCreateIntegrationObjectTag = false;
					var oIntegrationTargetList = this.byId("integrationTargetList");
					if (oIntegrationTargetList && oIntegrationTargetList.getItems()) {
						oIntegrationTargetList.setSelectedItem(oIntegrationTargetList.getItems()[0]);
					}
				}
			},

			onLinkExternalObject: function() {
				var oDialog = this.getLinkExternalObjectDialog();
				IdeaObjectIntegration.getAllApiFromCampaign({
					CAMPAIGN_ID: this.getObjectModel().getProperty("/CAMPAIGN_ID")
				}).done(function(oData) {
					setTimeout(function() {
						oDialog.setModel(new JSONModel(oData), "ExternalObjectModel");
						oDialog.getModel("ExternalObjectModel").setProperty("/LINK_OBJECT_INFO", {
							API_TECHNICAL_NAME: oData && oData.RESULT && oData.RESULT.length === 1 ? oData.RESULT[0].TECHNICAL_NAME : null,
							OBJECT_ID: null,
							OBJECT_TYPE: null
						});
						oDialog.open();
					}, 500);
				}).fail(function(odata) {
					odata.RESULT = [];
				});
			},

			getLinkExternalObjectDialog: function() {
				if (!this._oLinkExternalObject) {
					this._oLinkExternalObject = this.createFragment("sap.ino.vc.idea.fragments.LinkExternalObjectDialog", this.getView().getId());
					this.getView().addDependent(this._oLinkExternalObject); // attach view configurations (includes model) to fragement
				}
				return this._oLinkExternalObject;
			},

			onTargetSystemChange: function(oEvent) {
				var oSource = oEvent.getSource();
			},

			onLinkExternalObjectSave: function() {
				var that = this;
				var oDialog = this.getLinkExternalObjectDialog();
				if (this.getView().getController().hasAnyClientErrorMessages()) {
					return;
				}
				var oModel = oDialog.getModel("ExternalObjectModel");
				oDialog.setBusy(true);
				var oMessageToast = {
					duration: 7000,
					width: '20em'
				};
				IdeaObjectIntegration.linkExistedObject({
					API_TECH_NAME: oModel.getProperty("/LINK_OBJECT_INFO/API_TECHNICAL_NAME"),
					OBJECT_ID: oModel.getProperty("/LINK_OBJECT_INFO/OBJECT_ID"),
					OBJECT_TYPE: oModel.getProperty("/LINK_OBJECT_INFO/OBJECT_TYPE"),
					CAMPAIGN_ID: this.getObjectModel().getProperty("/CAMPAIGN_ID"),
					IDEA_ID: this.getObjectModel().getProperty("/ID")
				}).done(function(res) {
					if (res.RESULT.existed) {
						oDialog.setBusy(false);
						MessageBox.show(that.getText("IDEA_OBJECT_MSG_INTEGRATION_LINK_EXISTED"), {
							title: that.getText("IDEA_OBJECT_TITLE_INTEGRATION_LINK_EXISTED"),
							icon: MessageBox.Icon.WARNING,
							actions: [MessageBox.Action.OK],
							onClose: function(sDialogAction) {}
						});
					} else {
						oDialog.setBusy(false);
						oDialog.close();

						var sMsgPara1 = res.RESULT.status.toString().includes('20') ? that.getText("IDEA_OBJECT_MSG_INTEGRATION_LINK_SUCCESS") : that.getText(
							"IDEA_OBJECT_MSG_INTEGRATION_LINK_FAILED");
						var sMsgPara2 = res.RESULT.generatedId ? res.RESULT.generatedId[-1] : '';
						var sMsgPara3 = res.RESULT.status ? res.RESULT.status : '';
						var sShowText = that.getText("IDEA_OBJECT_MSG_INTEGRATION_LINK_SHOW_TEXT", [sMsgPara1, sMsgPara2, sMsgPara3]);
						var oTextControl = new Text({
							text: sShowText
						});
						var oLinkControl = new Link({
							href: Configuration.getBackendRootURL() + '/sap/ino/config#integrationMonitorList',
							text: that.getText("IDEA_OBJECT_MSG_INTEGRATION_LINK_MORE_DETAIL"),
							target: '_blank'
						});
						that.oLinkMessageDialog = new Dialog({
							type: DialogType.Message,
							title: res.RESULT.status.toString().includes('20') ? ValueState.Success : ValueState.Error,
							state: res.RESULT.status.toString().includes('20') ? ValueState.Success : ValueState.Error,
							content: new FlexBox({
								items: [oTextControl, oLinkControl],
								alignItems: "Start",
								justifyContent: "Start",
								alignContent: "Start"
							}),
							beginButton: new Button({
								type: ButtonType.Emphasized,
								text: "OK",
								press: function() {
									that.oLinkMessageDialog.close();
								}.bind(this)
							})
						});

						that.oLinkMessageDialog.open();
					}
				}).fail(function() {
					oDialog.setBusy(false);
					oDialog.close();
					MessageToast.show(that.getText("INTEGRATION_TARGET_MSG_STATUS_CREATE_FAILED"), oMessageToast);
				});

			},

			onLinkExternalObjectDialogClose: function() {
				this.getLinkExternalObjectDialog().close();
				this.getLinkExternalObjectDialog().destroy();
				this._oLinkExternalObject = undefined;
			},

			onDelete: function(oEvent) {
				var oController = this;
				var oDelBtn = oEvent.getSource();
				var oObjectModel = oController.getObjectModel();
				var ppmConfig = Configuration.getSystemSettingsModel().getProperty("/sap.ino.config.PPM_INTEGRATION_ACTIVE");
				var intObjectExisted = oObjectModel.getProperty("/INTEGRATION_OBJECT_EXIST");
				var bHasReward = oObjectModel.getPropertyModel().getProperty("/actions/del/customProperties/hasReward");
				var bDeleteAllowed = oObjectModel.getPropertyModel().getProperty("/actions/del/enabled");
				var bIsMergedWithVote = oObjectModel.getPropertyModel().getProperty("/actions/del/customProperties/isMergeedWithVote");
				if (bHasReward) {
					//has reward ==> can't delete
					MessageToast.show(this.getText("MSG_IDEA_HAVE_REWARD_CANNOT_DELETE"));
				} else if (!bDeleteAllowed) {
					MessageToast.show(this.getText("OBJECT_MSG_DELETE_FAILED"));
				} else if (bIsMergedWithVote) {
					MessageToast.show(this.getText("MSG_IDEA_MERGED_WITH_VOTE_CANNOT_DELETE"));
				} else {
					//EVALUATION 
					var bHasEvaluation = oObjectModel.getProperty("/EVALUATION_COUNT");
					var isManager = oObjectModel.getPropertyModel().getProperty("/actions/del/customProperties/isManager");
					if (!bHasEvaluation || (bHasEvaluation && isManager)) {
						//havn't evaluation / hava evaluation and the user is manager/coach ==>add ppm check, then delete
						//var msgConfirm = ppmConfig === "1" ? "MSG_IDEA_CAMP_MANAGER_DEL_CONFIRM_HAVE_PPM" : "MSG_DEL_CONFIRM";
						var msgConfirm = "MSG_DEL_CONFIRM";
						if (ppmConfig === "1" || intObjectExisted) { //PPM Check and integration object check
							msgConfirm = "MSG_IDEA_CAMP_MANAGER_DEL_CONFIRM_HAVE_PPM_INTEGRATION";
						}

						var oDelRequest = oController.executeObjectAction("del", {
							messages: {
								confirm: msgConfirm,
								success: "MSG_DEL_SUCCESS"
							}
						});
						oDelRequest.done(function(oResponse) {
							if (oResponse && oResponse.confirmationCancelled === true) {
								if (oDelBtn && jQuery.type(oDelBtn.focus) === "function") {
									oDelBtn.focus();
								}
								return;
							}
							oController.navigateTo("idealist");
						});

					} else {
						MessageToast.show(this.getText("MSG_IDEA_DEL_FAILED_SUBMITTER_HAVE_EVALUATION"));
					}
				}

			},

			onPressPrevious: function() {
				var iId = this.getObjectModel().getProperty("/ID");
				var oIdeaCountModel = this.getView().getModel("ideaList");
				var ideaList = oIdeaCountModel.getData();
				var index;
				$.each(ideaList, function(i, n) {
					if (n === iId) {
						index = i;
						return false;
					}
				});
				var preItem = ideaList[index - 1];
				if (preItem) {
					this.setViewProperty("/PAGE_INDICATOR", index);
					this.navigateTo("idea-display", {
						id: preItem
					});
				}
			},

			onPressNext: function() {
				var iId = this.getObjectModel().getProperty("/ID");
				var oIdeaCountModel = this.getView().getModel("ideaList");
				var ideaList = oIdeaCountModel.getData();
				var index;
				$.each(ideaList, function(i, n) {
					if (n === iId) {
						index = i;
						return false;
					}
				});
				var nextItem = ideaList[index + 1];
				if (nextItem) {
					this.setViewProperty("/PAGE_INDICATOR", index + 2);
					this.navigateTo("idea-display", {
						id: nextItem
					});
				}
			},
			onExit: function() {
				BaseController.prototype.onExit.apply(this, arguments);
			},
			initPageIndicatorLabel: function(iId) {
				var that = this;

				//var oIdeaCountModel = this.getView().getModel("ideaList");
				var iOldIndicator, iOldPageSize;
				iOldIndicator = this.getViewProperty("/PAGE_INDICATOR");
				iOldPageSize = this.getViewProperty("/PAGE_SIZE");

				// if(oIdeaCountModel.getData().length > 0){
				var oIdeaSearchParams = sap.ui.getCore().getModel("ideaSearchParams");
				if (oIdeaSearchParams && oIdeaSearchParams.getData()) {
					var pageIndicatorCountPath = oIdeaSearchParams.getData().path;
					if (oIdeaSearchParams.getData().path.indexOf('IdeaMediumBackofficeSearchParams') > -1) {
						pageIndicatorCountPath = pageIndicatorCountPath.replace('IdeaMediumBackofficeSearchParams',
							'IdeaMediumBackofficeSearchParamsCount');
					} else {
						pageIndicatorCountPath = pageIndicatorCountPath.replace('IdeaMediumSearchParams', 'IdeaMediumSearchParamsCount');
					}

					jQuery.ajax({
						url: pageIndicatorCountPath,
						headers: {
							'X-CSRF-Token': 'Fetch'
						},
						type: 'GET',
						contentType: 'application/json; charset=UTF-8',
						async: true,
						success: function(oData) {
							var oModel = new JSONModel();
							var ideaList = $.map(oData.d.results, function(idea) {
								return idea.ID;
							});
							oModel.setData(ideaList);
							that.getView().setModel(oModel, "ideaList");
							var index;
							$.each(ideaList, function(i, n) {
								if (n === parseInt(iId, 10)) {
									index = i;
									return false;
								}
							});
							var sContainerId = that.getViewProperty("/IDEA_SECTION_CONTAINER_ID");
							if (index !== undefined) {
								that.byId("pageIndicatorPanel").setVisible(true);
								that.setViewProperty("/IS_IN_CURRENT_IDEA_LIST", true);
								if (sContainerId) {
									that.byId("ideaPageToolbar").setHeight("5rem");
									$(sContainerId).css("top", "5rem");
								}
								var iPageSize = ideaList.length;
								// var oPageSizeLabel = that.byId("pageSizeLabel");
								// oPageSizeLabel.setText(iPageSize);

								// var oPageIndicatorLabel = that.byId("pageIndicatorLabel");
								// oPageIndicatorLabel.setText(index + 1);
								if (iOldPageSize !== iPageSize) {
									that.setViewProperty("/PAGE_SIZE", iPageSize);
								}
								if (iOldIndicator !== index + 1) {
									that.setViewProperty("/PAGE_INDICATOR", index + 1);
								}

								// if (index - 1 >= 0) {
								// 	that.byId("previousIdeaBtn").setEnabled(true);
								// 	//this.byId("previousIdeaBtn").setVisible(true);
								// } else {
								// 	that.byId("previousIdeaBtn").setEnabled(false);
								// 	//this.byId("previousIdeaBtn").setVisible(false);
								// }
								// if (index + 1 < ideaList.length) {
								// 	that.byId("nextIdeaBtn").setEnabled(true);
								// 	//this.byId("nextIdeaBtn").setVisible(true);
								// } else {
								// 	that.byId("nextIdeaBtn").setEnabled(false);
								// 	//this.byId("nextIdeaBtn").setVisible(false);
								// }
							} else {
								that.byId("pageIndicatorPanel").setVisible(false);
								if (sContainerId) {
									that.byId("ideaPageToolbar").setHeight("2.5rem");
									$(sContainerId).css("top", "2.5rem");
								}
							}
						},
						error: function(oMessage) {
							that.byId("pageIndicatorPanel").setVisible(false);
							var sContainerId = that.getViewProperty("/IDEA_SECTION_CONTAINER_ID");
							if (sContainerId) {
								that.byId("ideaPageToolbar").setHeight("2.5rem");
								$(sContainerId).css("top", "2.5rem");
							}
						}
					});
				} else {
					that.byId("pageIndicatorPanel").setVisible(false);
				}
			},

			setPageContentTopStyle: function() {
				var oideaListModel = this.getView().getModel("ideaList");
				var sContainerId = "#" + this.byId("ideaDisplay").getScrollDelegate()._sContainerId;
				this.setViewProperty("/IDEA_SECTION_CONTAINER_ID", sContainerId);
				if ((oideaListModel && oideaListModel.getData().length > 0) && this.getViewProperty("/IS_IN_CURRENT_IDEA_LIST")) {
					this.byId("ideaPageToolbar").setHeight("5rem");
					$(sContainerId).css("top", "5rem");
				} else {
					this.byId("ideaPageToolbar").setHeight("2.5rem");
					$(sContainerId).css("top", "2.5rem");
				}

			}

		}));
});
}; // end of sap/ino/vc/idea/Display.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.Experts.controller') ) {
jQuery.sap.declare('sap.ino.vc.idea.Experts.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ListItem'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/Experts.controller",[
    "sap/ino/vc/commons/BaseObjectController",
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/application/Configuration",
    "sap/ino/commons/models/object/User",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/ui/Device",
    "sap/ui/core/ListItem",
    "sap/m/MessageToast",
    "sap/m/MessageBox",
    "sap/ino/vc/idea/mixins/AddExpertFromClipboardMixin"
], function(BaseController, JSONModel, Configuration, User, Filter, FilterOperator, Device, ListItem, MessageToast, MessageBox,
	AddExpertFromClipboardMixin) {
	"use strict";

	return BaseController.extend("sap.ino.vc.idea.Experts", jQuery.extend({}, AddExpertFromClipboardMixin, {

		view: {
			IDEACARD_SECTION_VISIBLE: 'STAT', // used in ExpertDetails.fragment.xml
			CLIPBOARD_ITEM_SELECT_COUNTER: 0, // used to refresh data bindings
			IS_EVALUATION_REQUEST: false // used to distinguish whether in evaluation request dialog or idea detail page
		},

		aSelectedExperts: [],

		onInit: function() {
			BaseController.prototype.onInit.apply(this, arguments);
			this.getView().setModel(new JSONModel(this.view), "view");
		},

		onBeforeRendering: function() {
			var that = this;
			var oView = this.getView();
			var iIdeaId;
			if (this.getObjectModel() && this.getObjectModel().getData().hasOwnProperty("IDEA_ID")) {
				this.setViewProperty("/IS_EVALUATION_REQUEST", true);
				iIdeaId = this.getObjectModel() && this.getObjectModel().getData().IDEA_ID;
			} else {
				this.setViewProperty("/IS_EVALUATION_REQUEST", false);
				iIdeaId = this.getObjectModel() && this.getObjectModel().getKey();
			}

			if (!this._iIdeaId || this._iIdeaId !== iIdeaId) {
				this._iIdeaId = iIdeaId;
				// proposed idea experts (community)
				var oProposedExperts = new JSONModel(Configuration.getIdeaExpertsByIdeaURL(iIdeaId));
				oView.setModel(oProposedExperts, "proposedExperts");
			}

			if (!this.getViewProperty("/IS_EVALUATION_REQUEST")) {
				this.getObjectModel().read("/Experts", {
					success: function() {
						var oBindingInfo = that.byId("ideaExperts").getBindingInfo("content");
						that.byId("ideaExperts").unbindAggregation("content");
						that.byId("ideaExperts").bindAggregation("content", oBindingInfo);
					}
				});
			}
		},

		onExpertExpand: function(oEvent) {
			var oItem = oEvent.getSource().getParent(); // selected List Item
			oItem.toggleStyleClass("sapInoIdeaExpertItemSelected");
		},

		onOpenIdea: function(oEvent) {
			if (Device.system.phone) {
				this.getView().getParent().close();
			}
			var oContext = oEvent.getSource().getBindingContext("proposedExperts");
			var iIdeaId = oContext.getProperty("IDEA/ID");
			if (iIdeaId) {
				this.navigateTo("idea-display", {
					id: iIdeaId
				});
			}
		},

		onSuggestIdeaExpert: function(oEvent) {
			var oControl = oEvent.getSource();
			var sValue = oEvent.getParameter("suggestValue");
			var oTemplate = new ListItem({
				text: "{data>NAME}",
				additionalText: "{data>USER_NAME}",
				key: "{data>ID}"
			});
			var sSuggestPath = "/SearchIdentity(searchToken='" + jQuery.sap.encodeURL(sValue) + "')/Results";

			var oFilter = this._getSuggestExpertFilter();

			if (Device.system.desktop) {
				oControl.bindAggregation("suggestionItems", {
					path: "data>" + sSuggestPath,
					template: oTemplate,
					filters: oFilter,
					parameters: {
						select: "searchToken,ID,NAME,USER_NAME"
					}
				});
			} else { // tablet or smartphone - workaround for loosing focus on tablets
				oControl._bBindingUpdated = true;
				oControl.getModel("data").read(sSuggestPath, {
					filters: oFilter,
					success: function(oData) {
						oControl.removeAllSuggestionItems();
						// we cannot set all items at once, therefore we use 
						// 0..n-1 addAggregation w/o list update
						// n addSuggestionItem which triggers a list refresh
						for (var ii = 0; ii < oData.results.length - 1; ii++) {
							oControl.addAggregation("suggestionItems", new ListItem({
								key: oData.results[ii].ID,
								text: oData.results[ii].NAME,
								additionalText: oData.results[ii].USER_NAME
							}), true);
						}
						if (oData.results.length > 0) {
							oControl.addSuggestionItem(new ListItem({
								key: oData.results[oData.results.length - 1].ID,
								text: oData.results[oData.results.length - 1].NAME,
								additionalText: oData.results[oData.results.length - 1].USER_NAME
							}));
						}
					}
				});
			}

			this.aSelectedExperts = [];
		},

		_getSuggestExpertFilter: function() {
			var aFilter = [];
			var aContributors = this.getObjectModel().getProperty("/SubmitterContributorsCoach");
			jQuery.each(aContributors, function(i, oContributor) {
				if (oContributor.ROLE_CODE === "IDEA_SUBMITTER" || oContributor.ROLE_CODE === "IDEA_CONTRIBUTOR") {
					var oFilter = new Filter({
						path: "ID",
						operator: FilterOperator.NE,
						value1: oContributor.IDENTITY_ID
					});
					aFilter.push(oFilter);
				}
			});
			return (aFilter.length === 0) ? [] : [new Filter(aFilter, true)];
		},

		onAddInputExpert: function(oEvent) {
			var oInputSuggestUsers = this.byId("suggestUser");
			var oSelectedItem = oEvent.getParameters().selectedItem;
			if (!oSelectedItem) {
				var aResult = jQuery.grep(oInputSuggestUsers.getSuggestionItems(), function(oSuggestionItem) {
					return oSuggestionItem.getText() === oInputSuggestUsers.getValue();
				});
				if (aResult.length > 0) {
					oSelectedItem = aResult[0];
				}
			}
			if (oSelectedItem) {
				var iExpertId = oSelectedItem && parseInt(oSelectedItem.getKey(), 10);
				this.openAddExpertDialog(iExpertId);
			}
			oInputSuggestUsers.setValue("");
			oInputSuggestUsers.focus();
		},

		onAddInputExpertForDialog: function(oEvent) {
			var oSelectedItem = oEvent.getParameters().selectedItem;
			if (oSelectedItem) {
				var iExpertId = oSelectedItem && parseInt(oSelectedItem.getKey(), 10);
				var sExpertName = oSelectedItem.getText();
				var aExpert = [{
					IDENTITY_ID: iExpertId,
					NAME: sExpertName
				}];
				this._addExpert(aExpert, sExpertName);
			}
		},

		getAddExpertDialog: function() {
			if (!this._oAddExpertDialog) {
				this._oAddExpertDialog = this.createFragment("sap.ino.vc.idea.fragments.AddExpert");
				this.getView().addDependent(this._oAddExpertDialog);
			}
			return this._oAddExpertDialog;
		},

		openAddExpertDialog: function(iExpertId) {
			var sEntityPath = "data>/Identity(" + iExpertId + ")";
			var oDialog = this.getAddExpertDialog();
			oDialog.bindElement({
				path: sEntityPath
			});
			oDialog.open();
		},

		onAddExpertDialogOK: function() {
			var oContext = this.getAddExpertDialog().getBindingContext("data");
			var iExpertId = oContext.getProperty("ID");
			var aExpert = [{
				IDENTITY_ID: iExpertId
				}];
			this._addExpert(aExpert, oContext.getProperty("NAME"));
			var oDialog = this.getAddExpertDialog();
			oDialog.close();
		},

		onAddExpertDialogCancel: function() {
			var oDialog = this.getAddExpertDialog();
			oDialog.close();
		},

		onAddRemoveExpert: function(oEvent) {
			var sAction = oEvent.getParameter("action");
			var iExpertId = oEvent.getParameter("identityId");
			var sExpertName = oEvent.getParameter("userName");
			var aExpert = [{
				IDENTITY_ID: iExpertId
			}];
			switch (sAction) {
				case "add":
					this.openAddExpertDialog(iExpertId);
					break;
				case "remove":
					this._removeExpert(aExpert, sExpertName);
					break;
				default:
					break;

			}
		},

		onAddRemoveExpertForDialog: function(oEvent) {
			var sAction = oEvent.getParameter("action");
			var iExpertId = oEvent.getParameter("identityId");
			var sExpertName = oEvent.getParameter("userName");
			var aExpert = [{
				IDENTITY_ID: iExpertId,
				NAME: sExpertName
			}];
			switch (sAction) {
				case "add":
					this._addExpert(aExpert);
					break;
				case "remove":
					this._removeExpert(aExpert);
					break;
				default:
					break;
			}
		},

		onTokenDelete: function(oEvent) {
			var oToken = oEvent.getSource();
			var iExpertId = Number(oToken.getKey());
			var aExpert = [{
				IDENTITY_ID: iExpertId
			}];
			this._removeExpert(aExpert);
		},

		isExpertActionable: function(iExpertId, bPrivilege, aIdeaExperts) {
			bPrivilege = bPrivilege || this.getObjectModel().getProperty("/property/nodes/Root/customProperties/backofficeChangeExpertPrivilege");
			aIdeaExperts = aIdeaExperts || this.getObjectModel().getProperty("/Experts");
			var aContributors = this.getObjectModel().getProperty("/SubmitterContributorsCoach");
			return !!(bPrivilege && aIdeaExperts && jQuery.isArray(aIdeaExperts) &&
				jQuery.grep(aIdeaExperts, function(o) {
					return o.IDENTITY_ID === iExpertId;
				}).length === 0 &&
				jQuery.grep(aContributors, function(o) {
					return (o.ROLE_CODE === "IDEA_SUBMITTER" || o.ROLE_CODE === "IDEA_CONTRIBUTOR") && o.IDENTITY_ID === iExpertId;
				}).length === 0);
		},

		isExpertAddedForDialog: function(iExpertId, aExperts) {
			aExperts = aExperts || this.getObjectModel().getProperty("/Experts") || [];
			return !!(jQuery.isArray(aExperts) &&
				jQuery.grep(aExperts, function(o) {
					return o.IDENTITY_ID === iExpertId;
				}).length === 0);
		},

		respExpertsFormatter: function(txt, val) {
			return jQuery.sap.formatMessage(txt, val || "");
		},

		// 		_addExpert: function(iExpertId, sExpertName) {
		// 			var that = this;
		// 			var oModel = this.getObjectModel();
		// 			var oNewExpert = {
		// 				IDENTITY_ID: iExpertId,
		// 				NAME: sExpertName
		// 			};
		// 			if (this.getViewProperty("/IS_EVALUATION_REQUEST")) {
		// 				oModel.addExpert(oNewExpert);
		// 			} else {
		// 				var oParameters = {
		// 					IDENTITY_ID: iExpertId
		// 				};
		// 				var oMessages = {
		// 					success: function() {
		// 						return that.getText("IDEA_OBJECT_MSG_EXPERT_ASSIGNED_SUCCESS", [sExpertName]);
		// 					},
		// 					error: function() {
		// 						return that.getText("IDEA_OBJECT_MSG_EXPERT_ASSIGNED_ERROR", [sExpertName]);
		// 					}
		// 				};
		// 				var oOptions = {
		// 					parameters: oParameters,
		// 					messages: oMessages,
		// 					staticparameters: undefined
		// 				};
		// 				var oActionPromise = BaseController.prototype.executeObjectAction.call(this, oModel, 'addExpert', oOptions);
		// 				return oActionPromise;
		// 			}
		// 		},

		// 		_removeExpert: function(iExpertId) {
		// 			var that = this;
		// 			var oModel = this.getObjectModel();

		// 			if (this.getViewProperty("/IS_EVALUATION_REQUEST")) {
		// 				oModel = this.getObjectModel();
		// 				oModel.removeExpert(iExpertId);
		// 			} else {
		// 				MessageBox.confirm(this.getText("MSG_DEL_CONFIRM"), {
		// 					onClose: function(sDialogAction) {
		// 						if (sDialogAction !== MessageBox.Action.OK) {
		// 							return;
		// 						} else {
		// 							var oMessage = oModel.removeExpert(iExpertId);
		// 							if (oMessage) {
		// 								MessageToast.show(that.getText("EXPERTS_MSG_UPDATE_FAILED"));
		// 							} else {
		// 								var oPromise = oModel.modify();
		// 								oPromise.fail(function() {
		// 									MessageToast.show(that.getText("EXPERTS_MSG_UPDATE_FAILED"));
		// 								});
		// 							}
		// 						}
		// 					}
		// 				});
		// 			}
		// 		}

	}));
});
}; // end of sap/ino/vc/idea/Experts.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.List.controller') ) {
jQuery.sap.declare('sap.ino.vc.idea.List.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Item'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.ViewType'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ValueState'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained
jQuery.sap.require('sap.m.Token'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/idea/List.controller",[
    "sap/ino/vc/library",
    "sap/ino/vc/commons/BaseVariantListController",
    "sap/ui/Device",
    "sap/ui/model/json/JSONModel",
    "sap/ui/model/Sorter",
    "sap/ui/core/Item",
    "sap/ino/commons/application/Configuration",
    "sap/ino/commons/models/core/CodeModel",
    "sap/ui/core/mvc/ViewType",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/ino/commons/formatters/ObjectListFormatter",
    "sap/ino/controls/OrientationType",
    "sap/ino/vc/idea/mixins/AssignmentActionMixin",
    "sap/ino/vc/idea/mixins/ChangeStatusActionMixin",
    "sap/ino/vc/idea/mixins/FollowUpMixin",
    "sap/ino/vc/idea/mixins/DeleteActionMixin",
    "sap/m/MessageToast",
    "sap/ui/core/ValueState",
    "sap/ui/core/format/DateFormat",
    "sap/ino/vc/evaluation/EvaluationFormatter",
    "sap/m/Token",
    "sap/ino/vc/commons/mixins/ExportMixin",
    "sap/ino/vc/idea/mixins/VoteMixin",
    "sap/ino/vc/idea/mixins/MergeActionMixin",
    "sap/ino/vc/commons/mixins/ExtensibilityMixin",
    "sap/m/MessageBox",
    "sap/ino/commons/models/object/PersonalizeSetting",
    "sap/ino/commons/models/aof/ApplicationObjectChange",
    "sap/ino/vc/commons/mixins/TagGroupMixin",
    "sap/ino/vc/commons/mixins/FollowMixin",
    "sap/ino/vc/idea/mixins/ChangeStatusActionFormatter",
    "sap/ino/vc/idea/mixins/VolunteerMixin",
    "sap/ino/vc/idea/mixins/AddExpertFromClipboardMixin",
    "sap/ino/vc/idea/mixins/CommonFilterMixin",
    "sap/ino/vc/idea/mixins/DueFilterMixin",
    "sap/ino/vc/idea/mixins/CampaignFormFilterMixin",
    "sap/ino/vc/idea/mixins/IdeaFormCriteriaFilterMixin",
    "sap/ino/vc/idea/mixins/ChangeAuthorActionMixin",
    "sap/ino/vc/idea/mixins/ChangeAuthorActionFormatter",
    "sap/ino/vc/idea/mixins/MarkAsReadActionMixin",
    "sap/ino/vc/idea/mixins/CompanyViewFilterMixin"
], function(lib,
	BaseController,
	Device,
	JSONModel,
	Sorter,
	Item,
	Configuration,
	CodeModel,
	ViewType,
	Filter,
	FilterOperator,
	ObjectListFormatter,
	OrientationType,
	AssignmentActionMixin,
	ChangeStatusActionMixin,
	FollowUpMixin,
	DeleteActionMixin,
	MessageToast,
	ValueState,
	DateFormat,
	EvaluationFormatter,
	Token,
	ExportMixin,
	VoteMixin,
	MergeActionMixin,
	ExtensibilityMixin,
	MessageBox,
	PersonalizeSetting,
	ApplicationObjectChange,
	TagGroupMixin,
	FollowMixin,
	ChangeStatusActionFormatter,
	VolunteerMixin,
	AddExpertFromClipboardMixin,
	CommonFilterMixin,
	DueFilterMixin,
	CampaignFormFilterMixin,
	IdeaFormCriteriaFilterMixin,
	ChangeAuthorActionMixin,
	ChangeAuthorActionFormatter,
	MarkAsReadActionMixin,
	CompanyViewFilterMixin
) {
	"use strict";

	var mStatus = {
		EMPTY: "",
		COMPLETED: "COMPLETED",
		NODISCONTINUED: "NODISCONTINUED",
		DISCONTINUED: "DISCONTINUED",
		ACTIVE: "ACTIVE",
		NEW: "NEW"
	};
	var mLatestUpdate = {
		EMPTY: "",
		// 		NEW_IDEAS: "SHOW_CREATED_VIEWER",
		NEW_UPDATES: "SHOW_UPDATED_VIEWER",
		NEW_STATUSES: "SHOW_STATUSCHANGE_VIEWER",
		NEW_COMMENTS: "SHOW_COMMENT_VIEWER"
	};
	var mOrder = {
		ASC: "ASC",
		DESC: "DESC"
	};

	var mIdeaRoutes = {
		IDEA: "idealist",
		IDEA_VARIANT: "idealistvariant"
	};

	var mOperator = {
		EQ: "EQ",
		GE: "GE",
		LE: "LE"
	};

	var mSort = {
		CHANGED_AT: "CHANGED_AT_DT",
		COMMENT_COUNT: "COMMENT_COUNT",
		EVALUATION_COUNT: "EVALUATION_COUNT",
		EXP_SCORE: "EXP_SCORE",
		FOLLOW_UP_DATE: "FOLLOW_UP_AT_DT",
		LAST_PUBL_EVAL_AT: "LAST_PUBL_EVAL_AT",
		NAME: "tolower(NAME)", // case insensitive sort order
		RESP_VALUE_LIST: "tolower(RESP_VALUE_NAME)",
		SCORE: "SCORE",
		SEARCH_SCORE: "SEARCH_SCORE",
		SUBMITTED_AT: "SUBMITTED_AT_DT",
		VOTE_COUNT: "VOTE_COUNT",
		CREATED_AT: "CREATED_AT"
	};

	var mVariant = {
		ALL: "all",
		MY: "my",
		VOTED: "voted",
		COMMENTED: "commented",
		VOTE: "vote",
		COMPLETED: "completed",
		MANAGED_COMPLETED: "managedcompleted",
		EVAL: "eval",
		EVAL_PENDING: "evalpending",
		MANAGE: "manage",
		FOLLOW_UP: "follow",
		UNASSIGNED: "unassigned",
		COACH_ME: "coachme",
		EVAL_DONE: "evaldone",
		EVAL_OPEN: "evalopen",
// 		MY_GROUP_COMPANY_AUTH: "mycompany",
// 		MY_GROUP_COMPANY_VOTED: "mycompanyvoted",
// 		MY_GROUP_COMPANY_COMMENTED: "mycompanycommented",
// 		MY_GROUP_ORGANIZATION_AUTH: "myorganization",
// 		MY_GROUP_ORGANIZATION_VOTED: "myorganizationvoted",
// 		MY_GROUP_ORGANIZATION_COMMENTED: "myorganizationcommented",
		MY_GROUP_VIEW_AUTH: "mygroup",
		MY_GROUP_VIEW_VOTED: "mygroupvoted",
		MY_GROUP_VIEW_COMMENTED: "mygroupcommented",
		FOLLOWING:"following"
	};

	var mFilter = {
		NONE: undefined,
		MY_AUTH: "myAuthoredIdeas",
		MY_VOTED: "myVotedIdeas",
		MY_COMMENTED: "myCommentedIdeas",
// 		MY_GROUP_COMPANY_AUTH: "myCompanyAuthoredIdeas",
// 		MY_GROUP_COMPANY_VOTED: "myCompanyVotedIdeas",
// 		MY_GROUP_COMPANY_COMMENTED: "myCompanyCommentedIdeas",	
// 		MY_GROUP_ORGANIZATION_AUTH: "myOrgAuthoredIdeas",
// 		MY_GROUP_ORGANIZATION_VOTED: "myOrgVotedIdeas",
// 		MY_GROUP_ORGANIZATION_COMMENTED: "myOrgCommentedIdeas",	
		MY_GROUP_VIEW_AUTH: "myGroupAuthoredIdeas",
		MY_GROUP_VIEW_VOTED: "myGroupVotedIdeas",
		MY_GROUP_VIEW_COMMENTED: "myGroupCommentedIdeas",
		OPEN_VOTE: "ideasIcanVoteFor",
		COMPLETED: "completedIdeas",
		MANAGED_COMPLETED: "managedCompletedIdeas",
		MY_EVAL: "myEvaluatedIdeas",
		EVAL_REQUIRED: "myEvaluatableIdeas",
		UNASSIGNED_COACH: "unassignedCoach",
		EVALUATED: "evaluatedIdeas",
		FOLLOW_UP: "followedupIdeas",
		COACH_ME: "coachedIdeasByMe",
		MANAGE: "",
		EVAL_OPEN: "openForEvaluation",
		FOLLOWING:"myFollowingIdeas"
	};

	var mList = {
		NAME: "IDEA_LIST_TIT_NAME",
		MANAGEDNAME: "IDEA_LIST_TIT_MANAGEDNAME",
		
		IS_FILTER_SUBPAGE: true,
		ADJUSTMENT_TITLE: "IDEA_LIST_TIT_ADJUSTMENT",
		Filter: {
			Values: [{
				TEXT: "IDEA_LIST_MIT_FILTER_PHASE",
				KEY: "PHASE"
            }, {
				TEXT: "IDEA_LIST_MIT_FILTER_STATUS",
				KEY: "STATUS"
            }],
			/* this is fixed content and not equal to "sap.ino.xs.object.idea.Status.Root" */
			Status: [
		  //  {
				// TEXT: "IDEA_LIST_MIT_FILTER_STATUS_EMPTY",
				// KEY: mStatus.EMPTY
    //         }, 
				{
					TEXT: "IDEA_LIST_MIT_FILTER_STATUS_COMPLETED",
					KEY: mStatus.COMPLETED
            }, {
					TEXT: "IDEA_LIST_MIT_FILTER_STATUS_NODISCONTINUED",
					KEY: mStatus.NODISCONTINUED
            }, {
					TEXT: "IDEA_LIST_MIT_FILTER_STATUS_DISCONTINUED",
					KEY: mStatus.DISCONTINUED
            }, {
					TEXT: "IDEA_LIST_MIT_FILTER_STATUS_ACTIVE",
					KEY: mStatus.ACTIVE
            }, {
					TEXT: "IDEA_LIST_MIT_FILTER_STATUS_NEW_IDEAS",
					KEY: mStatus.NEW
            }],
			PhaseBinding: {
				MODEL: "code",
				CODE_PATH: "CODE",
				TABLE_PATH: "sap.ino.xs.object.campaign.Phase.Root",
				EMPTY_CODE_TEXT: "IDEA_LIST_MIT_FILTER_PHASE_EMPTY"
			},
			LatestUpdate: [
				// {
				// 	TEXT: "IDEA_LIST_MIT_FILTER_LATEST_UPDATE_NEW_IDEAS",
				// 	KEY: mLatestUpdate.NEW_IDEAS
    //         }, 
				{
					TEXT: "IDEA_LIST_MIT_FILTER_LATEST_UPDATE_NEW_UPDATES",
					KEY: mLatestUpdate.NEW_UPDATES
            }, {
					TEXT: "IDEA_LIST_MIT_FILTER_LATEST_UPDATE_NEW_STATUSES",
					KEY: mLatestUpdate.NEW_STATUSES
            }, {
					TEXT: "IDEA_LIST_MIT_FILTER_LATEST_UPDATE_NEW_COMMENTS",
					KEY: mLatestUpdate.NEW_COMMENTS
            }]
		},
		QuickSorter: [
			{
				TEXT: "SORT_MIT_MOST_RECENT",
				ACTION: mSort.CREATED_AT,
				DEFAULT_ORDER: mOrder.DESC
            }, {
				TEXT: "SORT_MIT_LATEST_CHANGE",
				ACTION: mSort.CHANGED_AT,
				DEFAULT_ORDER: mOrder.DESC
            }, {
				TEXT: "SORT_MIT_MOST_VOTE",
				ACTION: mSort.VOTE_COUNT,
				DEFAULT_ORDER: mOrder.DESC
            }
		],
		Sorter: {
			Values: [{
				TEXT: "SORT_MIT_CHANGED",
				ACTION: mSort.CHANGED_AT,
				DEFAULT_ORDER: mOrder.DESC
            }, {
				TEXT: "SORT_MIT_SUBMITTED",
				ACTION: mSort.SUBMITTED_AT,
				DEFAULT_ORDER: mOrder.DESC
            }, {
				TEXT: "SORT_MIT_TITLE",
				ACTION: mSort.NAME,
				DEFAULT_ORDER: mOrder.ASC
            }, {
				TEXT: "SORT_MIT_VOTE",
				ACTION: mSort.SCORE,
				DEFAULT_ORDER: mOrder.DESC
            }, {
				TEXT: "SORT_MIT_VOTE_NUM",
				ACTION: mSort.VOTE_COUNT,
				DEFAULT_ORDER: mOrder.DESC
            }, {
				TEXT: "SORT_MIT_RESP_VALUE_LIST",
				ACTION: mSort.RESP_VALUE_LIST,
				DEFAULT_ORDER: mOrder.DESC
            }, {
				TEXT: "SORT_MIT_SEARCH_SCORE",
				ACTION: mSort.SEARCH_SCORE,
				DEFAULT_ORDER: mOrder.DESC
            }],
			Limit: 2
		},
		Order: {
			Values: [{
				TEXT: "ORDER_MIT_ASC",
				ACTION: mOrder.ASC
		    }, {
				TEXT: "ORDER_MIT_DESC",
				ACTION: mOrder.DESC
		    }]
		},
		Operator: {
			Values: [{
				TEXT: "OPERATOR_MIT_EQ",
				ACTION: mOperator.EQ
		    }, {
				TEXT: "OPERATOR_MIT_GE",
				ACTION: mOperator.GE
		    }, {
				TEXT: "OPERATOR_MIT_LE",
				ACTION: mOperator.LE
		    }]
		},
		Variants: {
			DEFAULT_VARIANT: mVariant.ALL,
			TITLE: "IDEA_LIST_TIT_VARIANTS",
			Values: [{
				TEXT: "IDEA_LIST_MIT_EVAL_PENDING",
				ACTION: mVariant.EVAL_PENDING,
				FILTER: mFilter.EVAL_REQUIRED,
				INCLUDE_DRAFT: false,
				COUNT: "0",
				DEFAULT_SORT: mSort.SUBMITTED_AT,
				HIERARCHY_LEVEL: "1",
				ACTIVE: true,
				SEQUENCE: 0,
				OBJECT_TYPE_CODE: mFilter.EVAL_REQUIRED,
				TYPE_CODE: "QUICK_LINK_STANDARD_IDEA",
				ENABLED: 1,
				ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role",
					"sap.ino.ui::camps_expert_role", "sap.ino.ui::camps_resp_expert_role"]
            }, {
				TEXT: "IDEA_LIST_MIT_OPEN_FOR_EVAL",
				ACTION: mVariant.EVAL_OPEN,
				FILTER: mFilter.EVAL_OPEN,
				INCLUDE_DRAFT: false,
				COUNT: "0",
				DEFAULT_SORT: mSort.SUBMITTED_AT,
				HIERARCHY_LEVEL: "1",
				ACTIVE: true,
				SEQUENCE: 1,
				ENABLED: 1,
				OBJECT_TYPE_CODE: mFilter.EVAL_OPEN,
				TYPE_CODE: "QUICK_LINK_STANDARD_IDEA",
				ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role",
					"sap.ino.ui::camps_expert_role",
					"sap.ino.ui::camps_resp_expert_role"]
            }, {
				TEXT: "IDEA_LIST_MIT_MY_EVAL",
				ACTION: mVariant.EVAL,
				FILTER: mFilter.MY_EVAL,
				INCLUDE_DRAFT: false,
				COUNT: "0",
				DEFAULT_SORT: mSort.SUBMITTED_AT,
				HIERARCHY_LEVEL: "1",
				ACTIVE: true,
				SEQUENCE: 2,
				ENABLED: 1,
				OBJECT_TYPE_CODE: mFilter.MY_EVAL,
				TYPE_CODE: "QUICK_LINK_STANDARD_IDEA",
				ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role",
					"sap.ino.ui::camps_expert_role", "sap.ino.ui::camps_resp_expert_role"]
            }, {
				TEXT: "IDEA_LIST_MIT_VOTE",
				ACTION: mVariant.VOTE,
				FILTER: mFilter.OPEN_VOTE,
				INCLUDE_DRAFT: false,
				COUNT: "0",
				DEFAULT_SORT: mSort.SUBMITTED_AT,
				HIERARCHY_LEVEL: "1",
				ACTIVE: true,
				SEQUENCE: 3,
				ENABLED: 1,
				OBJECT_TYPE_CODE: mFilter.OPEN_VOTE,
				TYPE_CODE: "QUICK_LINK_STANDARD_IDEA",
				ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role",
					"sap.ino.ui::camps_expert_role", "sap.ino.ui::camps_resp_expert_role", "sap.ino.ui::camps_part_role"]
            }, {
				TEXT: "IDEA_LIST_MIT_MY",
				ACTION: mVariant.MY,
				FILTER: mFilter.MY_AUTH,
				INCLUDE_DRAFT: true,
				COUNT: "0",
				DEFAULT_SORT: mSort.CHANGED_AT,
				HIERARCHY_LEVEL: "1",
				ACTIVE: true,
				SEQUENCE: 4,
				ENABLED: 1,
				OBJECT_TYPE_CODE: mFilter.MY_AUTH,
				TYPE_CODE: "QUICK_LINK_STANDARD_IDEA",
				ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role",
					"sap.ino.ui::camps_part_role", "sap.ino.ui::camps_expert_role", "sap.ino.ui::camps_resp_expert_role"]
            }, {
				TEXT: "IDEA_LIST_MIT_VOTED",
				ACTION: mVariant.VOTED,
				FILTER: mFilter.MY_VOTED,
				INCLUDE_DRAFT: true,
				COUNT: "0",
				DEFAULT_SORT: mSort.CHANGED_AT,
				HIERARCHY_LEVEL: "1",
				ACTIVE: true,
				SEQUENCE: 5,
				ENABLED: 1,
				OBJECT_TYPE_CODE: mFilter.MY_VOTED,
				TYPE_CODE: "QUICK_LINK_STANDARD_IDEA",
				ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role",
					"sap.ino.ui::camps_part_role", "sap.ino.ui::camps_resp_expert_role", "sap.ino.ui::camps_expert_role"]
            }, {
				TEXT: "IDEA_LIST_MIT_COMMENTED",
				ACTION: mVariant.COMMENTED,
				FILTER: mFilter.MY_COMMENTED,
				INCLUDE_DRAFT: true,
				COUNT: "0",
				DEFAULT_SORT: mSort.CHANGED_AT,
				HIERARCHY_LEVEL: "1",
				ACTIVE: true,
				SEQUENCE: 6,
				ENABLED: 1,
				OBJECT_TYPE_CODE: mFilter.MY_COMMENTED,
				TYPE_CODE: "QUICK_LINK_STANDARD_IDEA",
				ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role",
					"sap.ino.ui::camps_part_role", "sap.ino.ui::camps_resp_expert_role", "sap.ino.ui::camps_expert_role"]
            }, {
				TEXT: "IDEA_LIST_MIT_COMPLETED",
				ACTION: mVariant.COMPLETED,
				FILTER: mFilter.COMPLETED,
				INCLUDE_DRAFT: false,
				COUNT: 0,
				DEFAULT_SORT: mSort.SUBMITTED_AT,
				HIERARCHY_LEVEL: "1",
				ACTIVE: true,
				SEQUENCE: 7,
				ENABLED: 1,
				OBJECT_TYPE_CODE: mFilter.COMPLETED,
				TYPE_CODE: "QUICK_LINK_STANDARD_IDEA",
				ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role",
				    "sap.ino.ui::camps_part_role"]
            }, {
				TEXT: "IDEA_LIST_MIT_ALL",
				ACTION: mVariant.ALL,
				FILTER: mFilter.NONE,
				INCLUDE_DRAFT: false,
				COUNT: "0",
				DEFAULT_SORT: mSort.SUBMITTED_AT,
				ACTIVE: true,
				SEQUENCE: 8,
				OBJECT_TYPE_CODE: "all",
				ENABLED: 1,
				TYPE_CODE: "QUICK_LINK_STANDARD_IDEA",
				ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role",
					"sap.ino.ui::camps_expert_role", "sap.ino.ui::camps_resp_expert_role", "sap.ino.ui::camps_part_role"]
            }, {
				TEXT: "IDEA_LIST_MIT_MANAGE",
				ACTION: mVariant.MANAGE,
				FILTER: mFilter.MANAGE,
				INCLUDE_DRAFT: false,
				COUNT: "0",
				DEFAULT_SORT: mSort.SUBMITTED_AT,
				MANAGE: true,
				ACTIVE: true,
				SEQUENCE: 9,
				ENABLED: 1,
				OBJECT_TYPE_CODE: "IdeaTobeManaged",
				TYPE_CODE: "QUICK_LINK_STANDARD_IDEA",
				ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role"]
            }, {
				TEXT: "IDEA_LIST_MIT_FOLLOW_UP",
				ACTION: mVariant.FOLLOW_UP,
				FILTER: mFilter.FOLLOW_UP,
				INCLUDE_DRAFT: false,
				COUNT: "0",
				DEFAULT_SORT: mSort.FOLLOW_UP_DATE,
				HIERARCHY_LEVEL: "1",
				MANAGE: true,
				ACTIVE: true,
				SEQUENCE: 10,
				ENABLED: 1,
				OBJECT_TYPE_CODE: mFilter.FOLLOW_UP,
				TYPE_CODE: "QUICK_LINK_STANDARD_IDEA",
				ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role"]
            }, {
				TEXT: "IDEA_LIST_MIT_UNASSIGNED",
				ACTION: mVariant.UNASSIGNED,
				FILTER: mFilter.UNASSIGNED_COACH,
				INCLUDE_DRAFT: false,
				COUNT: "0",
				DEFAULT_SORT: mSort.SUBMITTED_AT,
				HIERARCHY_LEVEL: "1",
				MANAGE: true,
				ACTIVE: true,
				SEQUENCE: 11,
				ENABLED: 1,
				OBJECT_TYPE_CODE: mFilter.UNASSIGNED_COACH,
				TYPE_CODE: "QUICK_LINK_STANDARD_IDEA",
				ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role"]
            }, {
				TEXT: "IDEA_LIST_MIT_COACH_ME",
				ACTION: mVariant.COACH_ME,
				FILTER: mFilter.COACH_ME,
				INCLUDE_DRAFT: false,
				COUNT: "0",
				DEFAULT_SORT: mSort.SUBMITTED_AT,
				HIERARCHY_LEVEL: "1",
				MANAGE: true,
				ACTIVE: true,
				SEQUENCE: 12,
				ENABLED: 1,
				OBJECT_TYPE_CODE: mFilter.COACH_ME,
				TYPE_CODE: "QUICK_LINK_STANDARD_IDEA",
				ROLES: ["sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role"]
            }, {
				TEXT: "IDEA_LIST_MIT_EVAL_DONE",
				ACTION: mVariant.EVAL_DONE,
				FILTER: mFilter.EVALUATED,
				INCLUDE_DRAFT: false,
				COUNT: "0",
				DEFAULT_SORT: mSort.LAST_PUBL_EVAL_AT,
				HIERARCHY_LEVEL: "1",
				MANAGE: true,
				ACTIVE: true,
				SEQUENCE: 13,
				ENABLED: 1,
				OBJECT_TYPE_CODE: mFilter.EVALUATED,
				TYPE_CODE: "QUICK_LINK_STANDARD_IDEA",
				ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role"]
            }, {
				TEXT: "IDEA_LIST_MIT_COMPLETED",
				ACTION: mVariant.MANAGED_COMPLETED,
				FILTER: mFilter.MANAGED_COMPLETED,
				INCLUDE_DRAFT: false,
				COUNT: "0",
				DEFAULT_SORT: mSort.SUBMITTED_AT,
				HIERARCHY_LEVEL: "1",
				MANAGE: true,
				ACTIVE: true,
				SEQUENCE: 14,
				ENABLED: 1,
				OBJECT_TYPE_CODE: mFilter.MANAGED_COMPLETED,
				TYPE_CODE: "QUICK_LINK_STANDARD_IDEA",
				ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role"]
            },
          {   
				TEXT: "IDEA_LIST_MIT_FOLLOWING",
				ACTION: mVariant.FOLLOWING,
				FILTER: mFilter.FOLLOWING,
				INCLUDE_DRAFT: false,
				COUNT: "0",
				DEFAULT_SORT: mSort.CHANGED_AT,
				HIERARCHY_LEVEL: "1",
				ACTIVE: true,
				SEQUENCE: 15,
				ENABLED: 1,
				OBJECT_TYPE_CODE: mFilter.FOLLOWING,
				TYPE_CODE: "QUICK_LINK_STANDARD_IDEA",
				ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role",
					"sap.ino.ui::camps_part_role", "sap.ino.ui::camps_expert_role", "sap.ino.ui::camps_resp_expert_role"]
            } ,        

            {   
				TEXT: "IDEA_LIST_MIT_GROUP_" + Configuration.getGroupConfiguration().GROUP + "_AUTH",
				ACTION: mVariant.MY_GROUP_VIEW_AUTH,
				FILTER: mFilter.MY_GROUP_VIEW_AUTH,
				INCLUDE_DRAFT: false,
				COUNT: "0",
				DEFAULT_SORT: mSort.CHANGED_AT,
				HIERARCHY_LEVEL: "1",
				ACTIVE: true,
				SEQUENCE: 16,
				ENABLED: 1,
				OBJECT_TYPE_CODE: mFilter.MY_GROUP_VIEW_AUTH,
				TYPE_CODE: "QUICK_LINK_STANDARD_IDEA",
				DISPLAY_LABEL: Configuration.getGroupConfiguration().DISPLAY_LABEL,
				ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role",
					"sap.ino.ui::camps_part_role", "sap.ino.ui::camps_expert_role", "sap.ino.ui::camps_resp_expert_role"]
            },
            {   
				TEXT: "IDEA_LIST_MIT_GROUP_" + Configuration.getGroupConfiguration().GROUP + "_VOTED",
				ACTION: mVariant.MY_GROUP_VIEW_VOTED,
				FILTER: mFilter.MY_GROUP_VIEW_VOTED,
				INCLUDE_DRAFT: false,
				COUNT: "0",
				DEFAULT_SORT: mSort.CHANGED_AT,
				HIERARCHY_LEVEL: "1",
				ACTIVE: true,
				SEQUENCE: 17,
				ENABLED: 1,
				OBJECT_TYPE_CODE: mFilter.MY_GROUP_VIEW_VOTED,
				TYPE_CODE: "QUICK_LINK_STANDARD_IDEA",
				DISPLAY_LABEL: Configuration.getGroupConfiguration().DISPLAY_LABEL,				
				ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role",
					"sap.ino.ui::camps_part_role", "sap.ino.ui::camps_expert_role", "sap.ino.ui::camps_resp_expert_role"]
            } ,
            {   
				TEXT: "IDEA_LIST_MIT_GROUP_" + Configuration.getGroupConfiguration().GROUP + "_COMMENTED",
				ACTION: mVariant.MY_GROUP_VIEW_COMMENTED,
				FILTER: mFilter.MY_GROUP_VIEW_COMMENTED,
				INCLUDE_DRAFT: false,
				COUNT: "0",
				DEFAULT_SORT: mSort.CHANGED_AT,
				HIERARCHY_LEVEL: "1",
				ACTIVE: true,
				SEQUENCE: 18,
				ENABLED: 1,
				OBJECT_TYPE_CODE: mFilter.MY_GROUP_VIEW_COMMENTED,
				TYPE_CODE: "QUICK_LINK_STANDARD_IDEA",
				DISPLAY_LABEL: Configuration.getGroupConfiguration().DISPLAY_LABEL,				
				ROLES: ["sap.ino.ui::camps_mgr_role", "sap.ino.ui::camps_coach_role", "sap.ino.ui::camps_resp_coach_role",
					"sap.ino.ui::camps_part_role", "sap.ino.ui::camps_expert_role", "sap.ino.ui::camps_resp_expert_role"]
            }           
            
            
            
            ]
		}
	};

	var DateFormatter = DateFormat.getInstance({
		pattern: "YYYY-MM-dd"
	});

	var mTypeCode = ["QUICK_LINK_CUSTOM_IDEA", "QUICK_LINK_STANDARD_IDEA"];

	/**
	 * @mixes AssignmentActionMixin, ChangeStatusActionMixin, FollowUpMixin, ExportMixin, VoteMixin, MergeActionMixin, ExtensibilityMixin, TagGroupMixin, FollowMixin
	 */
	var oIdeaList = BaseController.extend("sap.ino.vc.idea.List", jQuery.extend({}, AssignmentActionMixin, ChangeStatusActionMixin,
		FollowUpMixin, DeleteActionMixin, ExportMixin, VoteMixin, MergeActionMixin, ExtensibilityMixin, TagGroupMixin, FollowMixin,
		VolunteerMixin, AddExpertFromClipboardMixin, CommonFilterMixin, DueFilterMixin, CampaignFormFilterMixin, IdeaFormCriteriaFilterMixin,
		ChangeAuthorActionMixin, MarkAsReadActionMixin, CompanyViewFilterMixin, {
			/* ListModel defining filter, sorter and variants of the list */
			list: mList,
			// id of control that get initial focus
			initialFocus: "filterButton",
			/* ViewModel storing the current configuration of the list */
			view: {
				"NAME": "IDEA_LIST",
				"List": {
					"SORT": mSort.SUBMITTED_AT,
					"ORDER": undefined,
					"PHASE": [],
					"LATEST_UPDATE": [],
					"STATUS": [], //mStatus.EMPTY,
					"SUB_STATUS": [],
					"VARIANT": mVariant.ALL,
					"MANAGE": false,
					"TAGS": [],
					"IS_TAGS_SELECTION": false,
					"CAMPAIGN": undefined,
					"DUE": undefined,
					"AUTHORS": [],
					"COACHES": [],
					"TAGCLOUD": true,
					"EXTENSION": {},
					"RESP_VALUE_CODE": [],
					"RESP_VALUE_NAME": "",
					"VOTE_OPERATOR": mOperator.EQ,
					"VOTE_NUMBER": "",
					"TAGCLOUD_EXPABLE": true,
					"TAGCLOUD_EXP": false,
					"TAGCLOUD_BAR_VISIBLE": false,
					"HIDE_PPT_EXPORT": false,
					"IS_FILTER_SUBPAGE": true,
					"IS_SHOW_MORE_FILTER": true,
					"SELECT_ALL": false,
					"SELECT_ALL_ENABLE": false,
					"SHOW_MASS_ACTION_BAR": true,
					"EXPORT_ALL": false,
					"EXPORT_IDEA_VIA_EMAIL": Configuration.getSystemSettingsModel().getProperty("/sap.ino.config.EXPORT_IDEALIST_VIA_EMAIL_ACTIVE") ===
						"1",
					"IDEA_FILTER_SWITCH_VISIBLE": Configuration.getPersonalize().FILTER_ACTIVE_IDEA,
					"IDEA_FILTER_NEW_AND_INPROCESS": Configuration.getPersonalize().FILTER_ACTIVE_IDEA ? Configuration.getPersonalize().FILTER_ACTIVE_IDEA : false,
					"IS_IDEA_FILTER_COMMUNITY_GROUP_VIEW": false,
					"IDEA_FILTER_COMMUNITY_GROUP_VIEW_VISIBLE": Configuration.getGroupConfiguration().ENABLE_GROUP_VIEW,
					"IDEA_LIST_FILTER_PERSONALIZATION": null,
					"QUICKLINKNAME": undefined,
					"ADDSHORTBYVALUE": true,
					"SELECTQUICKLINKID": undefined
				},
				"ORIENTATION": Configuration.getPersonalize().IDEA_VIEW ? OrientationType.PORTRAIT : OrientationType.LANDSCAPE,
				"CLIPBOARD_ITEM_SELECT_COUNTER": 0,
				"QUICK_LINK_COUNT": 0,
				"NEWQUICKLINKFUNCTION": false,
				"ORIGINALVARIANT": undefined,
				"CURRENTURL": undefined
			},

			formatter: jQuery.extend({}, ObjectListFormatter, FollowUpMixin.followUpMixinFormatter, EvaluationFormatter,
				ChangeStatusActionFormatter, ChangeAuthorActionFormatter),

			onInit: function() {
				this.formatter.filterStyleClass = function(sValue) {
					return sValue === undefined ? "" : "sapUiTinyMarginBegin";
				};

				BaseController.prototype.onInit.apply(this, arguments);

				this.oViewModel = this.getModel("view");
				this.oViewModel.setData(this.view, true);

				// TODO currently we always start with the card layout => instead use orientation in viewdata / real orientation
				this.getList().addStyleClass(this.getPortraitStyle());
				this.getList().setWrapping(true);

				this.getList().attachUpdateFinished(this.onUpdateFinished, this);
				this.initApplicationObjectChangeListeners();

				// if(this.byId("subStatusSelect")._oTokenizer){
				// this.byId("subStatusSelect")._oTokenizer.setEditable(false);
				// }
				this.initFilterItemModel();
				this.initCompanyView();
			},

			onAfterRendering: function() {
				/*var that = this;
				["panelFilterFragment--communityQuickLinkIdeaList","panelFilterFragment--backOfficeQuickLinkIdeaList"].forEach(function(oId){
					var quickLinkIdeaList = that.byId(oId);
					quickLinkIdeaList.addEventDelegate({
						onAfterRendering: function(oEvent){
							that.firstQuickIdea = quickLinkIdeaList.getVisibleItems()[0];
						} 
					},that);
				});*/
			},

			getScrollContainer: function() {
				return this.byId("scrollContainer");
			},

			addSubFilterPageContent: function(vContent) {
				var oNavContainer = this.getFilterNavContainer();
				var aPages = oNavContainer.getPages();
				aPages[0].getContent()[0].addItem(vContent);
				this.onSetFilterBarVisible("authorFilter", "coachFilter");
			},

			removeSubFilterPageContent: function() {
				var oNavContainer = this.getFilterNavContainer();
				var aPages = oNavContainer.getPages();
				var oFilterContainer = aPages[0].getContent()[0];
				if (oFilterContainer.getItems().length > 2) {
					//oFilterContainer.removeItem(oFilterContainer.getItems()[3]);
					oFilterContainer.getItems()[2].destroy(true);
				}
			},

			//TODO limit sietnature to 1: route 2: query => no support for onRouteMatched Signature
			show: function(oEvent, oObject) {
				var oQuery;
				var sVariant;
				if (oEvent && oEvent.getParameter) {
					var oArguments = oEvent.getParameter("arguments");
					oQuery = oArguments["?query"];
					sVariant = oArguments.variant;
				} else {
					sVariant = oObject.variant;
					oQuery = oObject;
				}

				var that = this;
				var currentUrl = location.href.split("#/")[1];
				if (currentUrl) {
					this.setViewProperty("/CURRENTURL", decodeURIComponent(currentUrl));
				}

				this.setViewProperty("/ORIGINALVARIANT", sVariant);
				if (this.getVariant(sVariant) && Configuration.hasCurrentUserPrivilege("sap.ino.ui::backoffice.access")) {
					var bChangedShowBackoffice = this.getVariant(sVariant).MANAGE ? true : false;
					this.getModel("component").setProperty("/SHOW_BACKOFFICE", bChangedShowBackoffice);
				}
				var bShowBackoffice = this.getModel("component").getProperty("/SHOW_BACKOFFICE");
				var sDefaultVariant = Configuration.hasCurrentUserPrivilege("sap.ino.ui::backoffice.access") && !this._iCampaignId &&
					bShowBackoffice ? mVariant.MANAGE : this.getListProperty("/Variants/DEFAULT_VARIANT");
                if(this.getViewProperty("/List/IS_IDEA_FILTER_COMMUNITY_GROUP_VIEW")){
                    sDefaultVariant = mVariant.MY;
                }
                
				//For Global search results
				if (oQuery && oQuery.managed && !sVariant) {
					if (!this.getModel("component").getProperty("/SHOW_BACKOFFICE")) {
						sDefaultVariant = this.getListProperty("/Variants/DEFAULT_VARIANT");
					} else {
						sDefaultVariant = mVariant.MANAGE;
					}
					this.setViewProperty("/ORIGINALVARIANT", sVariant || sDefaultVariant);
					oQuery.sort = mSort.SEARCH_SCORE;
				}

				this.setViewProperty("/isre", sVariant || sDefaultVariant);
				this.setViewProperty("/Variants/DEFAULT_VARIANT", sDefaultVariant);

				sVariant = this.getViewProperty("/isre");
				var oVariant = jQuery.extend(true, {}, this.getVariant(sVariant));
				this.changeDefaultSortOfVariant(oVariant, oQuery);
				this.setViewProperty("/List/VARIANT", oVariant.ACTION);
				this.campaignId = oObject && oObject.campaign || '';

				var aSorter, aQuickSorter;
				var bBound = this.getList().isBound("items");

				// even if there is no query defined, we need to add the default sorter that is applied
				if ((!oQuery || !oQuery.sort) && oVariant.DEFAULT_SORT) {
					var sDefaultSort = oVariant.DEFAULT_SORT;
					var sDefaultOrder;
					var aSort = this.getSort(sDefaultSort);
					if (aSort.length > 0) {
						sDefaultOrder = aSort[0].DEFAULT_ORDER;
					}
					oQuery = oQuery || {};

					oQuery.sort = oQuery.sort || sDefaultSort;

					// enhance for sort combination
					oQuery.sort = oQuery.sort + " " + (oQuery.order || sDefaultOrder);
				}
				// //If it's the search mode just use the search Score to sort
				// if(window.location.hash.indexOf('search') > -1){   
				//          oQuery = oQuery || {};
				// 	     oQuery.sort = mSort.SEARCH_SCORE + " " + mOrder.DESC;
				// 	     this.setViewProperty("/List/SORT",mSort.SEARCH_SCORE);
				// }
				var bRebindRequired = this.hasStateChanged(this.getCurrentRoute(), sVariant, oQuery, Device.orientation.portrait);
				bRebindRequired = bRebindRequired || this._bListChanged;
				this._bListChanged = false;

				var systeamSetting = Configuration.getSystemSetting("sap.ino.config.DISABLE_IDEA_IMAGE");
				this.setViewProperty('/List/DISABLE_IDEA_IMAGE', !!(systeamSetting * 1));

				var sIdeaFilterChange = this.getViewProperty("/List/IDEA_FILTER_NEW_AND_INPROCESS");
				if (!bBound || bRebindRequired) {

					this.setParameters(oQuery, oVariant);

					// update the VISIBILITY flag of all variants for binding in Filter
					this.setVariantVisibility(oVariant);

					//remove some filters not available in the variants
					this.removeInvalidFilters(oQuery.variant ? oQuery : {
						variant: sVariant
					});

					/* -- Do not show the filterbar automatically but let the user change it -- */

					aSorter = this.getSort(this.getViewProperty("/List/SORT"));
					aQuickSorter = this.getQuickSort(this.getViewProperty("/List/QUICKSORT"));

					this.setSorter(aQuickSorter.concat(aSorter));
					this.updateFilter();

					//TODO move to ListPage
					var iOrientation = this.getViewProperty("/ORIENTATION");
					this.onOrientationChange(Device.system.desktop ? iOrientation : Device.orientation);

					//this.setSortIcon(this.byId("panelFilterFragment--sortreverse"), this.getViewProperty("/List/ORDER"));

					//idea count  
					this.getIdeaFilterCount(oQuery); 

					//quick links
					this.getQuickLinkSetting(oVariant, oEvent, oQuery);

					//filter setting
					this.getIdeaFilterSetting();

					this.bindList();
					this.initialSorterItems();
					this.bindTagCloud();
					if (this.getViewProperty("/List/IS_SHOW_MORE_FILTER")) {
						this.bindFilters();
					}
				}

				["statusSelect", "subStatusSelect", "phaseSelect"].forEach(function(sId) {
					var oControl = that.byId(sId);
					if (!oControl) {
						return;
					}
					oControl.onAfterRendering = function() {
						if (oControl._oTokenizer) {
							oControl._oTokenizer.setEditable(false);
						}
					};
				});

				this._deriveMassActionButtonEnabledStatus();
				this.setShortByIcon("shortByIcon1", "shortByIcon2");
			},

			getIdeaFilterSetting: function() {
				var that = this;
				PersonalizeSetting.getFilterSettings().done(function(data) {
					var oViewModel = that.getModel("view");
					oViewModel.setProperty("/List/IDEA_LIST_FILTER_PERSONALIZATION", data.RESULT);
				});
			},

			getIdeaFilterCount: function(oQuery) {
				var aVariants = this.getModel("list").getProperty("/Variants/Values") || '';
				var aStatus = this.getViewProperty("/List/STATUS") || [];
				var sSubStatus = this.getViewProperty("/List/SUB_STATUS") && this.getViewProperty("/List/SUB_STATUS").toString();
				var sRespListValueCode = this.getViewProperty("/List/RESP_VALUE_CODE").map(function(oResp) {
					return oResp.code;
				});
				//var sRespName = this.getViewProperty("/List/RESP_VALUE_NAME") || '';
				var bShowBackoffice = this.getModel("component").getProperty("/SHOW_BACKOFFICE");
				var sPhase = this.getViewProperty("/List/PHASE") && this.getViewProperty("/List/PHASE").toString();
				var sCampaign = this.getViewProperty("/List/CAMPAIGN") || '';
				var oCampaignId = this.campaignId;
				var search = oQuery.search || "";
				var sVoteNum = this.getViewProperty("/List/VOTE_NUMBER");
				var sVoteOperator = this.getViewProperty("/List/VOTE_OPERATOR");
				var authorKeys = this.getViewProperty("/List/AUTHORS") && this.getViewProperty("/List/AUTHORS").toString();
				var coachKeys = this.getViewProperty("/List/COACHES") && this.getViewProperty("/List/COACHES").toString();
				var sLatestUpdate = this.getViewProperty("/List/LATEST_UPDATE") && this.getViewProperty("/List/LATEST_UPDATE").toString();
				var aTags = this.getViewProperty("/List/TAGS");
				var tagGroup = {};
				var tagGroupKey = [];

				aTags.forEach(function(item) {
					if (!tagGroup[item.ROOTGROUPID]) {
						tagGroup[item.ROOTGROUPID] = [];
						tagGroup[item.ROOTGROUPID].push(item.ID);
						tagGroupKey.push(item.ROOTGROUPID);
					} else {
						tagGroup[item.ROOTGROUPID].push(item.ID);
					}
				});
				if (oCampaignId === '') {
					oCampaignId = sCampaign;
				}

				var sIdeaFilterChangeNum = this.getViewProperty("/List/IDEA_FILTER_NEW_AND_INPROCESS");
				var oCamObeject = {
					searchToken: window.decodeURIComponent(search),
					searchType: this.getSearchType(),
					CAMPAIGN_ID: oCampaignId,
					oIdeaFilterChange: sIdeaFilterChangeNum,
					phase: sPhase,
					status_code: sSubStatus,
					status_type: aStatus.join(","),
					resp_code: sRespListValueCode.length > 0 ? sRespListValueCode.join(",") : "",
					dueFrom: this.getFilterItem("/DueFrom"),
					dueTo: this.getFilterItem("/DueTo"),
					vote_num: sVoteNum,
					vote_operator: sVoteOperator,
					authorKeys: authorKeys,
					coachKeys: coachKeys,
					latestUpdate: sLatestUpdate,
					tagTokens: tagGroup[tagGroupKey[0]] ? tagGroup[tagGroupKey[0]].join(",") : "",
					tagTokens1: tagGroup[tagGroupKey[1]] ? tagGroup[tagGroupKey[1]].join(",") : "",
					tagTokens2: tagGroup[tagGroupKey[2]] ? tagGroup[tagGroupKey[2]].join(",") : "",
					tagTokens3: tagGroup[tagGroupKey[3]] ? tagGroup[tagGroupKey[3]].join(",") : "",
					tagTokens4: tagGroup[tagGroupKey[4]] ? tagGroup[tagGroupKey[4]].join(",") : "",
					ideaFormId: this.getCampaignFormQuery(),
					bShowBackoffice: bShowBackoffice
				};
				this.getIdeaformQuery(oCamObeject);
				this.getCompanyViewQuery(oCamObeject);
				var oListModel = this.getModel("list");
				var oCurrentQuickLink = this.getModel("list").getProperty("/CURRENTQUICKLINK");
				Configuration.getIdeaFilterCount(oCamObeject, oListModel, aVariants, oCurrentQuickLink);
			},

			getQuickLinkSetting: function(oCurrentVariant, oEvent, oQuery) {
				var that = this;
				var aVariants = this.getModel("list").getProperty("/Variants/Values") || '';
				this.getModel("list").setProperty("/CURRENTQUICKLINK", undefined);
				PersonalizeSetting.getQuickLinkSettings({
					'TYPE_CODE': mTypeCode
				}).done(function(data) {
					if (data.RESULT.length > 0 && aVariants) {
						data.RESULT.forEach(function(oResult) {
							aVariants.forEach(function(oVariant) {
								if (oResult.TYPE_CODE === "QUICK_LINK_STANDARD_IDEA" && oVariant.TYPE_CODE === "QUICK_LINK_STANDARD_IDEA" && oResult.OBJECT_TYPE_CODE ===
									oVariant.OBJECT_TYPE_CODE) {
									oVariant.ACTIVE = oResult.ACTIVE === 1 ? true : false;
									oVariant.SEQUENCE = oResult.SEQUENCE;
									oVariant.ID = oResult.ID;
									oVariant.ENABLED = oResult.ENABLED;
								} else if (oResult.TYPE_CODE === "QUICK_LINK_CUSTOM_IDEA") {
									// get filter infomation from link url
									// oResult.FILTER_INFO = that.getFilterInfoByLink(oResult.LINK_URL);
									var newQuickLink = aVariants.every(function(oitem) {

										if (oitem.TYPE_CODE === "QUICK_LINK_STANDARD_IDEA") {
											return true;
										}

										if (oitem.TYPE_CODE === "QUICK_LINK_CUSTOM_IDEA") {
											return oResult.ID !== oitem.ID;
										}
									});

									if (newQuickLink && oVariant.TYPE_CODE === "QUICK_LINK_STANDARD_IDEA" && oResult.OBJECT_TYPE_CODE === oVariant.OBJECT_TYPE_CODE) {
										oResult.ACTIVE = oResult.ACTIVE === 1 ? true : false;
										oResult.FILTER = oVariant.FILTER;
										oResult.ACTION = oVariant.ACTION;
										oResult.ROLES = oVariant.ROLES;
										if (oVariant.MANAGE) {
											oResult.MANAGE = oVariant.MANAGE;
										}
										aVariants.push(oResult);
									}
								}
							});
						});
						that.setViewProperty("/NEWQUICKLINKFUNCTION", true);
					}
					that.getModel("list").setProperty("/Variants/Values", aVariants);
					that.setVariantVisibility(oCurrentVariant);

					//check visiablity for current Variiant
					var bVisible = that.getVariantVisibility(oCurrentVariant.ACTION);
					if (bVisible === false || typeof(bVisible) === "undefined") {
						that.navigateToTopLink(oQuery);
						return;
					}

					 	that.getCurrentUrlId();
					// 	var originalVariant = that.getViewProperty("/ORIGINALVARIANT");
					//  		var newQuickLinkFunction = that.getViewProperty("/NEWQUICKLINKFUNCTION");
					//  		if((!originalVariant && newQuickLinkFunction && oEvent.getParameter) || that.bOfficeToggle){
					//  			that.bOfficeToggle = false;
					// 		that.navigateToTopLink(oQuery);
					// 	}
				});
			},

			navigateToTopLink: function(oQuery) {
				var oQuickLinkList = this.getCurrentQuickIdeaList();
				this.navigateToFirstQuickLink(oQuickLinkList.getVisibleItems(), oQuery);

			},

			getFilterInfoByLink: function(sLink) {
				sLink = sLink || '';
				sLink = sLink.split('?');
				if (sLink.length >= 2) {
					sLink = sLink[1];
				}
				var aFilter = sLink !== '' ? sLink.split('&') : [];
				var oResult = {},
					aFound, sKey, sValue;
				var oRegex = /(.*)=([^&]+)/;
				for (var i = 0; i < aFilter.length; i++) {
					aFound = aFilter[i].match(oRegex);
					if (aFound && aFound.length === 3) {
						sKey = aFound[1].toUpperCase();
						sValue = aFound[2];
						oResult[sKey] = sValue;
					}
				}
				return oResult;
			},

			setShortByIcon: function(shortByIconA, shortByIconB) {
				var oIcon1 = this.byId(shortByIconA) || this.getFilterElementById(shortByIconA);
				var aIcons = ["sap-icon://sort-ascending", "sap-icon://sort-descending"];
				var sSort = this.getViewProperty("/List/SORT");
				var aSortOrder = sSort.split(",");
				var aSO1 = aSortOrder[0].split(" ");
				if (aSO1[1] === "ASC" && oIcon1) {
					oIcon1.setSrc(aIcons[0]);
					oIcon1.setTooltip(this.getText('EXP_ASCENDING_SORT_BUTTON'));
				} else if (aSO1[1] === "DESC" && oIcon1) {
					oIcon1.setSrc(aIcons[1]);
					oIcon1.setTooltip(this.getText('EXP_DESCENGDING_SORT_BUTTON'));
				}
				if (aSortOrder[1]) {
					var oIcon2 = this.byId(shortByIconB) || this.getFilterElementById(shortByIconB);
					var aSO2 = aSortOrder[1].split(" ");
					if (aSO2[1] === "ASC" && oIcon2) {
						oIcon2.setSrc(aIcons[0]);
						oIcon2.setTooltip(this.getText('EXP_ASCENDING_SORT_BUTTON'));
					} else if (aSO2[1] === "DESC" && oIcon2) {
						oIcon2.setSrc(aIcons[1]);
						oIcon2.setTooltip(this.getText('EXP_DESCENGDING_SORT_BUTTON'));
					}
				}
			},

			setVariantVisibility: function(oQueryVariant) {
				var aVariants = this.getModel("list").getProperty("/Variants/Values");
				// var oCampaignId;
				//  var IdeaFilterModel;
				// if(this.campaignId){
				//     oCampaignId = this.campaignId;
				//       IdeaFilterModel = Configuration.getIdeaFilterCount(oCampaignId);
				// }else{

				//      IdeaFilterModel = Configuration.getIdeaFilterCount();
				// }

				//             for(var i = 0; i < aVariants.length; i += 1){
				//             this.getModel("list").setProperty("/Variants/Values/" + i + "/COUNT",IdeaFilterModel[this.getModel("list").getProperty("/Variants/Values/" + i + "/ACTION")]);

				//}   
				var oExistsRoles = this.getModel("user").getProperty("/privileges");
				// fix in campaign idea list quicklink toggle office button not work issue
				// if (this.getModel('component').getProperty('/SHOW_BACKOFFICE') && oQueryVariant && !oQueryVariant.MANAGE) {
				// 	this.getModel('component').setProperty('/SHOW_BACKOFFICE', false);
				// }
				for (var i = 0; i < aVariants.length; i += 1) {
					var oVariant = aVariants[i];
					// 	var bIsManage = oVariant.MANAGE || false;
					// 	var bIsExpert = oVariant.EXPERT || false;
					// 	var bIsCampaignManage = oVariant.CAMPAIGN_MANAGE || false;

					// 	var bVisible = (!bIsManage && !bIsExpert && !bIsCampaignManage) ||
					// 		// user has expert role and variant is for experts
					// 		(bIsExpert && Configuration.hasCurrentUserPrivilege("sap.ino.ui::expert")) ||
					// 		// user has campaign manager role and variant is for campaign manager
					// 		(bIsCampaignManage && Configuration.hasCurrentUserPrivilege("sap.ino.ui::campaign_manager")) ||
					// 		// user has general backoffice privileges and variant has manage flag
					// 		(bIsManage && Configuration.hasCurrentUserPrivilege("sap.ino.ui::backoffice.access"));
					var bVisible = false;
					if (oExistsRoles) {
						for (var iRoleIndex = 0; iRoleIndex <= oVariant.ROLES.length - 1; iRoleIndex++) {
							if (oExistsRoles[oVariant.ROLES[iRoleIndex]]) {
								bVisible = true;
								break;
							}
						}
					}
					if( !this.getModel('component').getProperty('/SHOW_BACKOFFICE') && this.getViewProperty("/List/IDEA_FILTER_COMMUNITY_GROUP_VIEW_VISIBLE") ){
                              
                              if(oVariant.ACTION === mVariant.MY_GROUP_VIEW_AUTH
                                  || oVariant.ACTION === mVariant.MY_GROUP_VIEW_VOTED
                                  || oVariant.ACTION === mVariant.MY_GROUP_VIEW_COMMENTED 
                                  || oVariant.ACTION === mVariant.FOLLOWING){
                              bVisible = this.getViewProperty("/List/IS_IDEA_FILTER_COMMUNITY_GROUP_VIEW");
                              } else {
                                bVisible = !this.getViewProperty("/List/IS_IDEA_FILTER_COMMUNITY_GROUP_VIEW");
                              }
                              if(this.getViewProperty("/List/IS_IDEA_FILTER_COMMUNITY_GROUP_VIEW") && 
                                (oVariant.ACTION === mVariant.MY  || oVariant.ACTION === mVariant.COMMENTED || oVariant.ACTION === mVariant.VOTED )){
                                 bVisible = this.getViewProperty("/List/IS_IDEA_FILTER_COMMUNITY_GROUP_VIEW"); 
                              }
					}
					if(!this.getViewProperty("/List/IDEA_FILTER_COMMUNITY_GROUP_VIEW_VISIBLE") && oVariant.TEXT && oVariant.TEXT.indexOf("_GROUP_") > -1){
					    bVisible = false;
					}
					
					if (this.getModel('component').getProperty('/SHOW_BACKOFFICE') && Configuration.hasCurrentUserPrivilege(
						"sap.ino.ui::backoffice.access")) {
						bVisible = (oVariant.MANAGE || false) && bVisible;

						if (oVariant.ACTION === mVariant.MANAGED_COMPLETED && this.getViewProperty("/List/IDEA_FILTER_NEW_AND_INPROCESS")) {
							bVisible = false;
						}
					}
					

					
					this.getModel("list").setProperty("/Variants/Values/" + i + "/VISIBLE", bVisible);
				}
			},

			getVariantVisibility: function(sVariant) {
				var aVariants, bVisible;

				aVariants = this.getModel("list").getProperty("/Variants/Values");

				for (var i = 0; i < aVariants.length; i += 1) {
					var oVariant = aVariants[i];

					if (oVariant.ACTION === sVariant) {
						bVisible = oVariant.VISIBLE;
					}
				}

				return bVisible;
			},

			getPortraitStyle: function() {
				return "sapInoIdeaListCardItems";
			},

			getList: function() {
				return this.byId("objectlist");
			},

			getExportControl: function() {
				return this.getList();
			},

			removeInvalidFilters: function(oQuery) {
				var bIsManage = false;
				var sVariant = oQuery.variant ? oQuery.variant : this.getViewProperty("/List/VARIANT");
				if (sVariant) {
					var oVariant = this.getVariant(sVariant);
					bIsManage = oVariant ? oVariant.MANAGE : false;
				}

				if (!bIsManage) {
					// update the given query
					delete oQuery.due;
					delete oQuery.authors;
					delete oQuery.coaches;
					jQuery.each(this.getViewProperty("/List/EXTENSION") || {}, function(iIndex, sExtensionField) {
						delete oQuery[sExtensionField.toLowerCase()];
					});

					this.restDue();
					this.setViewProperty("/List/AUTHORS", []);
					this.setViewProperty("/List/COACHES", []);
					this.setViewProperty("/List/EXTENSION", {});
				}

				if (this.getViewProperty("/List/HIDE_STATUS")) {
					delete oQuery.status;
					this.setViewProperty("/List/STATUS", undefined);
				}
			},

			getBindingParameter: function() {
				var sVariant, sVariantFilter;
				sVariant = this.getViewProperty("/List/VARIANT");
				sVariantFilter = this.getCurrentVariant().FILTER;
				var sSearchTerm = this.getViewProperty("/List/SEARCH");
				var aTags = this.getViewProperty("/List/TAGS");
				var sCampaignId = this.getViewProperty("/List/CAMPAIGN");

				var aTagId = jQuery.map(aTags, function(oTag) {
					return oTag.ID;
				});

				var aRespValueCode = this.getViewProperty("/List/RESP_VALUE_CODE").map(function(oResp) {
					return oResp.code;
				});
				var aFilters = [{
						key: "ideaFilterContinuingChange",
						value: (this._check4ManagingList() && this.getViewProperty("/List/IDEA_FILTER_NEW_AND_INPROCESS")) ? 'true' : 'false'
				    }, {
						key: "status",
						value: this.getViewProperty("/List/STATUS")
				    }, {
						key: "sub_status",
						value: this.getViewProperty("/List/SUB_STATUS")
				    }, {
						key: "resp_value_code",
						value: aRespValueCode.join(",")
				    }, {
						key: "vote_number",
						value: this.getViewProperty("/List/VOTE_NUMBER")
				    }, {
						key: "vote_operator",
						value: this.getViewProperty("/List/VOTE_OPERATOR")
				    }, {
						key: "phase",
						value: this.getViewProperty("/List/PHASE")
				    }, {
						key: "authors",
						value: this.getViewProperty("/List/AUTHORS")
				    }, {
						key: "coaches",
						value: this.getViewProperty("/List/COACHES")
			    },
					{
						key: "latest_update",
						value: this.getViewProperty("/List/LATEST_UPDATE")
			    }
			    ];

				jQuery.each(this.getViewProperty("/List/EXTENSION"), function(sExtensionField, vValue) {
					if (vValue || vValue === 0 || vValue === 0.0) {
						aFilters.push(new Filter(sExtensionField, FilterOperator.EQ, vValue));
					}
				});
				if (this.hasDueFilter()) {
					aFilters.push(this.getDueFilter());
				}

				if (this.hasCampaignFormFilter()) {
					aFilters.push(this.getCampaignFormFilter());
				}

				return {
					Variant: sVariant,
					VariantFilter: sVariantFilter,
					SearchTerm: sSearchTerm,
					TagIds: aTagId,
					CampaignId: sCampaignId,
					Filters: aFilters
				};
			},

			onOpenSubmitter: function(oEvent) {

				var oSource = oEvent.getSource();
				var iIdentityId = oSource.getBindingContext("data").getProperty("SUBMITTER_ID") || oSource.getBindingContext("data").getProperty(
					"EMPLOYEE_ID");
				if (!this.oIdentityCardView) {
					this.oIdentityCardView = sap.ui.xmlview({
						viewName: "sap.ino.vc.iam.IdentityCard"
					});
					this.getView().addDependent(this.oIdentityCardView);
				}
				this.oIdentityCardView.getController().open(oSource.getAggregation("_ideaSubmitter") || oSource, iIdentityId);
			},

			onOpenCoach: function(oEvent) {
				var oSource = oEvent.getSource();
				var iIdentityId = oSource.getBindingContext("data").getProperty("COACH_ID");
				if (!this.oIdentityCardView) {
					this.oIdentityCardView = sap.ui.xmlview({
						viewName: "sap.ino.vc.iam.IdentityCard"
					});
					this.getView().addDependent(this.oIdentityCardView);
				}
				this.oIdentityCardView.getController().open(oSource, iIdentityId);
			},

			bindList: function() {
				this.saveState();

				// see BaseActionMixin.js - cleans all internal state for mass action execution
				this.resetActionState();

				var oBindingParameter = this.getBindingParameter();
				var sPath = "";
				var bIsLandscape = false;
				var searchTerm = oBindingParameter.SearchTerm || "";
				var bIsManaged = this._check4ManagingList();

				var orientationButton = this.byId('orientationButton');
				var tagGroup = {};
				var tagGroupKey = [];
				var aTagPool = this.getModel("view").getProperty("/List/TAGS");

				aTagPool.forEach(function(item, index) {
					if (!tagGroup[item.ROOTGROUPID]) {
						tagGroup[item.ROOTGROUPID] = [];
						tagGroup[item.ROOTGROUPID].push(item.ID);
						tagGroupKey.push(item.ROOTGROUPID);
					} else {
						tagGroup[item.ROOTGROUPID].push(item.ID);
					}
				}); 
				
                
				if (bIsManaged) { //for idea list to be managed
				    var searchType = this.getSearchType();
					sPath += "IdeaMediumBackofficeSearchParams";
					sPath += "(searchToken='" + searchTerm + "'," + 
					    "searchType=" + searchType + "," +
						"tagsToken='" + (tagGroup[tagGroupKey[0]] ? tagGroup[tagGroupKey[0]].join(",") : "") + "'," +
						"tagsToken1='" + (tagGroup[tagGroupKey[1]] ? tagGroup[tagGroupKey[1]].join(",") : "") + "'," +
						"tagsToken2='" + (tagGroup[tagGroupKey[2]] ? tagGroup[tagGroupKey[2]].join(",") : "") + "'," +
						"tagsToken3='" + (tagGroup[tagGroupKey[3]] ? tagGroup[tagGroupKey[3]].join(",") : "") + "'," +
						"tagsToken4='" + (tagGroup[tagGroupKey[4]] ? tagGroup[tagGroupKey[4]].join(",") : "") + "'," +
						"filterName='" + (oBindingParameter.VariantFilter || "") + "'," +
						"filterBackoffice=" + (bIsManaged ? "1" : "0") + this.getIdeaformFilters() + this.getCompanyViewFilters() +  ")/Results";
				} else { //for other idea list
                   var aGroupVariant = this.getGroupViewParameters(oBindingParameter);
					sPath += "IdeaMediumSearchParams";
					sPath += "(searchToken='" + searchTerm + "'," +
						"tagsToken='" + (tagGroup[tagGroupKey[0]] ? tagGroup[tagGroupKey[0]].join(",") : "") + "'," +
						"tagsToken1='" + (tagGroup[tagGroupKey[1]] ? tagGroup[tagGroupKey[1]].join(",") : "") + "'," +
						"tagsToken2='" + (tagGroup[tagGroupKey[2]] ? tagGroup[tagGroupKey[2]].join(",") : "") + "'," +
						"tagsToken3='" + (tagGroup[tagGroupKey[3]] ? tagGroup[tagGroupKey[3]].join(",") : "") + "'," +
						"tagsToken4='" + (tagGroup[tagGroupKey[4]] ? tagGroup[tagGroupKey[4]].join(",") : "") + "'," +
						"filterName='" + (oBindingParameter.VariantFilter || "") + "'," +
						"filterBackoffice=" + (bIsManaged ? "1" : "0") + this.getIdeaformFilters() +  "," +
						"cvt='" + aGroupVariant.groupToken + "'," + "cvr=" + aGroupVariant.groupRole  + "," +  "cvy=" + aGroupVariant.groupType  + 
						")/Results";
				}

				if (bIsManaged) {
					orientationButton.setVisible(false);
				} else {
					orientationButton.setVisible(true);
				}

				// if possible, access the "cheap" idea view
				if (!oBindingParameter.SearchTerm && oBindingParameter.TagIds.length === 0 && !oBindingParameter.VariantFilter && !bIsManaged && !
					this.hasCampaignFormFilter() && !this.hasIdeaformFilters()) {
					sPath = "IdeaMediumCommunity";
				}

				this.setPath("data>/" + sPath);

				if ((!Device.system.desktop && Device.orientation.landscape) ||
					(Device.system.desktop && this.getViewProperty("/ORIENTATION") === OrientationType.LANDSCAPE)) {
					bIsLandscape = true;
				}
				this.getList().setWrapping(!(bIsManaged || bIsLandscape));
				BaseController.prototype.bindList.apply(this);
			},
     
			//TODO move to ListPage
			onOrientationChange: function(eOrientation) {
				var bIsManaged = this._check4ManagingList();
				if (bIsManaged || eOrientation === OrientationType.LANDSCAPE || eOrientation.landscape) {
					if (this.getPortraitStyle) {
						this.getList().removeStyleClass(this.getPortraitStyle());
					}
					if (this.getLandscapeStyle) {
						this.getList().addStyleClass(this.getLandscapeStyle());
					}
				} else {
					if (this.getPortraitStyle) {
						this.getList().addStyleClass(this.getPortraitStyle());
					}
					if (this.getLandscapeStyle) {
						this.getList().removeStyleClass(this.getLandscapeStyle());
					}
				}

				this.getList().setWrapping(!(bIsManaged || eOrientation === OrientationType.LANDSCAPE || eOrientation.landscape));
				this.setViewProperty("/ORIENTATION", eOrientation);
				this.setViewProperty("/List/EXPORT_ALL", eOrientation === OrientationType.PORTRAIT && !bIsManaged);

				// toggle the display of select all button
				// this.byId("sapInoMassSelect").setVisible((eOrientation === OrientationType.LANDSCAPE) || bIsManaged);
			},

			_check4ManagingList: function() {
				var bBackoffice = Configuration.hasCurrentUserPrivilege("sap.ino.ui::backoffice.access");

				if (bBackoffice) {
					var sVariant = this.getViewProperty("/List/VARIANT");
					var aVariants = this.getListProperty("/Variants/Values");

					var vVariant = jQuery.grep(aVariants, function(oVariant) {
						return oVariant.ACTION === sVariant;
					});

					vVariant = (vVariant && vVariant.length > 0) ? vVariant[0] : {};

					return vVariant.MANAGE || vVariant.CAMPAIGN_MANAGE || false;
				}

				return false;
			},

			bindTagCloud: function() {
				var bIsManaged = this._check4ManagingList();
				var oBindingParameter = this.getBindingParameter();
				var sPath = Configuration.getTagcloudServiceURL(oBindingParameter.CampaignId, oBindingParameter.TagIds, oBindingParameter.SearchTerm,
					oBindingParameter.VariantFilter, !this.includeDrafts(), bIsManaged, oBindingParameter.Filters);

				var oController = this;

				// check whether refresh is necessary
				if (this._lastTagServicePath !== sPath) {
					var oTagModel = new JSONModel(sPath);
					var sOtherTxt = this.getText("IDEA_LIST_MIT_FILTER_TAG_OTHER");
					oTagModel.attachRequestCompleted(null, function() {
						var oRankedTag = oTagModel.getData().RANKED_TAG || [];
						var aTagGroup = oTagModel.getData().TAG_GROUP;
						var oTagData = oController.groupByTagGroup(oRankedTag, oController.getViewProperty("/List/TAGS"), sOtherTxt);
						jQuery.each(oTagData, function(element, object) {
							if (object.GROUP_NAME === "Other") {
								aTagGroup.push(object);
							}
						});
						oController.setTagCloudProperty(oTagData, oTagModel.getData().WITHOUT_GROUP !== "X");
						oTagModel.setData({
							"RANKED_TAG": oTagData,
							"TAG_GROUP": aTagGroup
						}, false);
						this.setFilterModel(oTagModel, "tag");
					}, this);
				}
				// swap last path for refresh checking
				this._lastTagServicePath = sPath;
			},

			onItemPress: function(oEvent) {
				var oItem = oEvent.getSource();
				var oContext = oItem.getBindingContext("data");
				if (oContext) {
					this.navigateTo("idea-display", {
						id: oContext.getProperty("ID")
					});
				}
			},

			onCardItemPress: function(oEvent) {
				var oItem = oEvent.getSource();
				var oIdeaCard = oItem.getAggregation("content")[0];
				oIdeaCard.getFocusDomRef().focus();
			},

			onIdeaCommentPress: function(oEvent) {
				var iIdeaId;

				if (oEvent.getParameter("ideaId")) {
					iIdeaId = oEvent.getParameter("ideaId");
				} else {
					try {
						if (oEvent.getSource().getProperty("objectId")) {
							iIdeaId = oEvent.getSource().getProperty("objectId");
						}
					} catch (e) {
						iIdeaId = oEvent.getSource().getBindingContext("data").getProperty("ID");
					}
				}
				if (iIdeaId) {
					this.navigateTo("idea-display", {
						id: iIdeaId,
						query: {
							section: "sectionComments"
						}
					});
				}
			},

			onCardItemAfterRendering: function() {},

			includeDrafts: function() {
				return this.getCurrentVariant().INCLUDE_DRAFT;
			},

			updateFilter: function() {
				var aStatus = this.getViewProperty("/List/STATUS") || [];
				var sSubStatus = this.getViewProperty("/List/SUB_STATUS");
				var sRespListValueCode = this.getViewProperty("/List/RESP_VALUE_CODE") || [];
				var sVoteNum = this.getViewProperty("/List/VOTE_NUMBER");
				var sPhase = this.getViewProperty("/List/PHASE");
				var sLatestUpdate = this.getViewProperty("/List/LATEST_UPDATE");
				var sCampaign = this.getViewProperty("/List/CAMPAIGN");
				var aAuthorKeys = this.getViewProperty("/List/AUTHORS");
				var aCoachKeys = this.getViewProperty("/List/COACHES");
				var oExtension = this.getViewProperty("/List/EXTENSION");
				var bIsManaged = this._check4ManagingList();
				var oIdeaFilterNewAndInprocess = this.getViewProperty("/List/IDEA_FILTER_NEW_AND_INPROCESS");
				
				//var bIdeaGroupView = this.getViewProperty("/List/IS_IDEA_FILTER_COMMUNITY_GROUP_VIEW");
				var aFilters = [];
				var that = this;
				this.setFilter([]);

				if (oIdeaFilterNewAndInprocess && bIsManaged) {
					var aTmpFilters = [];
					aTmpFilters.push(new Filter("STATUS_TYPE", FilterOperator.EQ, ""));
					aTmpFilters.push(new Filter("STATUS", FilterOperator.NE, "sap.ino.config.COMPLETED"));
					aTmpFilters.push(new Filter("STATUS", FilterOperator.NE, "sap.ino.config.DISCONTINUED"));
					aTmpFilters.push(new Filter("STATUS", FilterOperator.NE, "sap.ino.config.MERGED"));
					aFilters.push(new Filter({
						filters: [new Filter({
							filters: [
					            new Filter("STATUS_TYPE", FilterOperator.NE, "COMPLETED"),
					            new Filter("STATUS_TYPE", FilterOperator.NE, "DISCONTINUED"),
					            new Filter("BASE_PACKAGE", FilterOperator.NE, "sap.ino.config")
					        ],
							and: true
						}), new Filter({
							filters: aTmpFilters,
							and: true
						})],
						and: false
					}));
				} else if (oIdeaFilterNewAndInprocess === false) {
					aFilters = [];
				}
				if (sSubStatus && sSubStatus.length > 0) {
					var subStatus = [];
					jQuery.each(sSubStatus, function(iIdx, sKey) {
						subStatus.push(new Filter("STATUS", FilterOperator.EQ, sKey));
					});
					aFilters.push(new Filter({
						filters: subStatus,
						and: false
					}));
				} else if (aStatus.length > 0) {
					var aReducedFilters = aStatus.reduce(function(aStatusFilters, sStatus) {
						/* we are using fixed filters here as the status of "sap.ino.xs.object.idea.Status.Root"
                        cannot be used 1:1 in the UI but need to be combined to make sense, see below */
						switch (sStatus) {
							case mStatus.COMPLETED:
								aStatusFilters.push(new Filter({
									filters: [
    							        new Filter("STATUS_TYPE", FilterOperator.EQ, "COMPLETED"),
    							        new Filter({
											filters: [
    							                new Filter("STATUS_TYPE", FilterOperator.EQ, ""),
    							                new Filter("STATUS", FilterOperator.EQ, "sap.ino.config.COMPLETED")
    							            ],
											and: true
										})
    							    ],
									and: false
								}));
								break;
							case mStatus.NODISCONTINUED:
								// aStatusFilters.push(new Filter("STATUS", FilterOperator.NE, "sap.ino.config.DISCONTINUED"));
								// aStatusFilters.push(new Filter("STATUS", FilterOperator.NE, "sap.ino.config.MERGED")); 
								aStatusFilters.push(new Filter({
									filters: [new Filter("STATUS", FilterOperator.NE, "sap.ino.config.DISCONTINUED"),
								 new Filter("STATUS", FilterOperator.NE, "sap.ino.config.MERGED")],
									and: true
								}));

								that.setViewProperty("/List/IS_DISCONTINUED_CHECKBOX_SELECTED", true);
								break;
							case mStatus.DISCONTINUED:
								aStatusFilters.push(new Filter({
									filters: [
    							        new Filter("STATUS_TYPE", FilterOperator.EQ, "DISCONTINUED"),
    							        new Filter({
											filters: [
    							                new Filter("STATUS_TYPE", FilterOperator.EQ, ""),
    							                new Filter("STATUS", FilterOperator.EQ, "sap.ino.config.DISCONTINUED")
    							            ],
											and: true
										}),
    							        new Filter({
											filters: [
        						                new Filter("STATUS_TYPE", FilterOperator.EQ, ""),
        						                new Filter("STATUS", FilterOperator.EQ, "sap.ino.config.MERGED")
        						            ],
											and: true
										})
    							    ],
									and: false
								}));
								break;
							case mStatus.ACTIVE:
								var aTmpFilters = [];
								aTmpFilters.push(new Filter("STATUS_TYPE", FilterOperator.EQ, ""));
								aTmpFilters.push(new Filter("STATUS", FilterOperator.NE, "sap.ino.config.COMPLETED"));
								aTmpFilters.push(new Filter("STATUS", FilterOperator.NE, "sap.ino.config.DISCONTINUED"));
								aTmpFilters.push(new Filter("STATUS", FilterOperator.NE, "sap.ino.config.MERGED"));
								aTmpFilters.push(new Filter("STATUS", FilterOperator.NE, "sap.ino.config.NEW_IN_PHASE"));
								if (!bIsManaged && !that.getCurrentVariant().INCLUDE_DRAFT) {
									aTmpFilters.push(new Filter("STATUS", FilterOperator.NE, "sap.ino.config.DRAFT"));
								}
								aStatusFilters.push(new Filter({
									filters: [new Filter({
										filters: [
    							            new Filter("STATUS_TYPE", FilterOperator.NE, "COMPLETED"),
    							            new Filter("STATUS_TYPE", FilterOperator.NE, "DISCONTINUED"),
    							            new Filter("STATUS_TYPE", FilterOperator.NE, "NEW"),
    							            new Filter("BASE_PACKAGE", FilterOperator.NE, "sap.ino.config")
    							        ],
										and: true
									}), new Filter({
										filters: aTmpFilters,
										and: true
									})],
									and: false
								}));
								break;
							case mStatus.NEW:
								aStatusFilters.push(new Filter({
									filters: [
    							            new Filter("STATUS_TYPE", FilterOperator.EQ, "NEW"),
        							        new Filter({
											filters: [
        							                new Filter("STATUS_TYPE", FilterOperator.EQ, ""),
        							                new Filter("STATUS", FilterOperator.EQ, "sap.ino.config.NEW_IN_PHASE")
        							            ],
											and: true
										})
    							        ],
									and: false
								}));
								break;
							default:
								break;
						}
						return aStatusFilters;
					}, []);
					//var oStatusValue = this.getStatus(sStatus);

					aFilters.push(new Filter({
						filters: aReducedFilters,
						and: false
					}));
				}

				if (sPhase && sPhase.length > 0) {
					var oPhase = [];
					jQuery.each(sPhase, function(iIdx, sKey) {
						oPhase.push(new Filter("PHASE", FilterOperator.EQ, sKey));
					});
					aFilters.push(new Filter({
						filters: oPhase,
						and: false
					}));
				}

				if (sCampaign && sCampaign !== "0") {
					aFilters.push(new Filter("CAMPAIGN_ID", FilterOperator.EQ, sCampaign));
				}

				if (sRespListValueCode && sRespListValueCode.length > 0) {
					var oRespFilter = [];
					sRespListValueCode.forEach(function(oResp) {
						oRespFilter.push(new Filter("RESP_VALUE_CODE", FilterOperator.EQ, oResp.code));
					});
					aFilters.push(new Filter({
						filters: oRespFilter,
						and: false
					}));
				}

				if (sVoteNum) {
					var oOperator;
					var sOperator = this.getViewProperty("/List/VOTE_OPERATOR");
					switch (sOperator) {
						case mOperator.EQ:
							oOperator = FilterOperator.EQ;
							break;
						case mOperator.GE:
							oOperator = FilterOperator.GE;
							break;
						case mOperator.LE:
							oOperator = FilterOperator.LE;
							break;
						default:
							oOperator = FilterOperator.EQ;
					}
					aFilters.push(new Filter("VOTE_COUNT", oOperator, sVoteNum));
				}

				if (this.hasDueFilter()) {
					aFilters.push(this.getDueFilter());
				}

				if (this.hasCampaignFormFilter()) {
					aFilters.push(this.getCampaignFormFilter());
				}

				if (aAuthorKeys && aAuthorKeys.length > 0) {
					var aAuthorFilters = [];
					jQuery.each(aAuthorKeys, function(iIdx, sKey) {
						aAuthorFilters.push(new Filter("SUBMITTER_ID", FilterOperator.EQ, sKey));
					});
					aFilters.push(new Filter({
						filters: aAuthorFilters,
						and: false
					}));
				}

				if (aCoachKeys && aCoachKeys.length > 0) {
					var aCoachFilters = [];
					jQuery.each(aCoachKeys, function(iIdx, sKey) {
						aCoachFilters.push(new Filter("COACH_ID", FilterOperator.EQ, sKey));
					});
					aFilters.push(new Filter({
						filters: aCoachFilters,
						and: false
					}));
				}
				//add latest filter
				if (sLatestUpdate && sLatestUpdate.length > 0) {
					var oLatestUpdate = [];
					jQuery.each(sLatestUpdate, function(iIdx, sKey) {
						oLatestUpdate.push(new Filter(sKey, FilterOperator.EQ, 1));
					});
					aFilters.push(new Filter({
						filters: oLatestUpdate,
						and: false
					}));
				}

				// add some additional filters based on the managed list variant
				if (bIsManaged || !this.includeDrafts()) {
					// never include drafts
					aFilters.push(new Filter("STATUS", FilterOperator.NE, "sap.ino.config.DRAFT"));

					// 	switch (sVariant) {
					// 		case mVariant.MANAGE:
					// 			break;
					// 		case mVariant.FOLLOW_UP:
					// 			aFilters.push(new Filter("FOLLOW_UP_ID", FilterOperator.NE, null));
					// 			break;
					// 		case mVariant.COACH_ME:
					// 			aFilters.push(new Filter("COACH_ID", FilterOperator.EQ, this.getModel("user").getProperty("/data/USER_ID")));
					// 			break;
					// 	}
				}

				jQuery.each(oExtension, function(sExtensionField, vValue) {
					if (vValue || vValue === 0 || vValue === 0.0) {
						aFilters.push(new Filter(sExtensionField, FilterOperator.EQ, vValue));
					}
				});

				if (aFilters.length > 0) {
					this.addFilter(new Filter({
						filters: aFilters,
						and: true
					}));
				}
			},

			onFilterStatusChange: function(oEvent) {
				var aSelectedItems = oEvent.getParameter("selectedItems");
				if (aSelectedItems.length > 0) {
					// clear sub status list
					this.oViewModel.setProperty("/List/SUB_STATUS", []);
					// clear selected sub status
					this.oViewModel.setProperty("/subStatus", []);
				} else {
					this.bindFilters();
				}
			},

			onFilterSubStatusChange: function(oEvent) {
				var oSource = oEvent.getSource();
				if (oSource.getSelectedItem) {
					oSource = oSource.getSelectedItem();
				}
				this.setViewProperty("/List/SUB_STATUS", oSource.getProperty("key"));
				// this.navigateIntern(this.getQuery(), true, true);
			},
			handlePhaseSelectionFinish: function(oEvent) {
				var oSource = oEvent.getSource();
				if (oSource.getSelectedItem) {
					oSource = oSource.getSelectedItem();
				}
				this.setViewProperty("/List/PHASE", oSource.getSelectedKeys());
				// this.navigateIntern(this.getQuery(), true, true);

			},

			handleSubstatusSelectionFinish: function(oEvent) {
				var oSource = oEvent.getSource();
				oSource._oTokenizer.onAfterRendering = function() {
					oSource._oTokenizer.setEditable(false);
				};
				if (oSource.getSelectedItem) {
					oSource = oSource.getSelectedItem();
				}
				this.setViewProperty("/List/SUB_STATUS", oSource.getSelectedKeys());
				// this.navigateIntern(this.getQuery(), true, true);
			},
			handleLatestUpdateSelectionFinish: function(oEvent) {
				var oSource = oEvent.getSource();
				if (oSource.getSelectedItem) {
					oSource = oSource.getSelectedItem();
				}
				this.setViewProperty("/List/LATEST_UPDATE", oSource.getSelectedKeys());

			},
			onFilterVoteOperatorChange: function(oEvent) {
				var oSource = oEvent.getSource();
				if (!oSource.getSelectedItem()) {
					return;
				}
				var oVoteNum = this.getFilterElementById("voteNumber");
				if (oVoteNum.getValue() === undefined || oVoteNum.getValue().trim() === "") {
					return;
				}
				this.setViewProperty("/List/VOTE_OPERATOR", oSource.getSelectedItem().getProperty("key"));
				// this.navigateIntern(this.getQuery(), true, true);
			},

			onFilterVoteNumChange: function(oEvent) {
				var oVoteOperator = this.getFilterElementById("voteOperatorSelect");
				if (!oVoteOperator.getSelectedItem()) {
					return;
				}
				var oSource = oEvent.getSource();
				if (oSource.getValue() === undefined || oSource.getValue().trim() === "") {
					this.setViewProperty("/List/VOTE_NUMBER", "");
				} else {
					this.setViewProperty("/List/VOTE_NUMBER", oSource.getValue().trim());
				}
				// this.navigateIntern(this.getQuery(), true, true);
			},

			// 			onFilterRespListChange: function(oEvent) {
			// 				if (oEvent.getParameter("selectedItem")) {
			// 					var oSource = oEvent.getParameter("selectedItem");
			// 					var sKey = oSource.getProperty("key");
			// 					var sText = oSource.getProperty("text");
			// 					this.setViewProperty("/List/RESP_VALUE_CODE", sKey);
			// 					this.setViewProperty("/List/RESP_VALUE_NAME", sText);
			// 				}
			// 			},

			onHandleRespFilterRequest: function() {
				this.getRespFilterHelpDialog().open();
				this.oViewModel.setProperty("/oldResp",jQuery.extend(true,[],this.oViewModel.getData().resp));
				
			},

			getRespFilterHelpDialog: function() {
				if (!this._respHelpDialog) {
					this._respHelpDialog = this.createFragment("sap.ino.vc.idea.fragments.RespValueHelpDialog", this.getView().getId());
					this.getView().addDependent(this._respHelpDialog);
				}
				return this._respHelpDialog;
			},

			// 			onClearRespFilter: function(oEvent) {
			// 				var sValue = oEvent.getParameter("value");
			// 				if (sValue.trim() === "") {
			// 					this.setViewProperty("/List/RESP_VALUE_CODE", '');
			// 					this.setViewProperty("/List/RESP_VALUE_NAME", '');
			// 					// 	this.navigateIntern(this.getQuery(), true, true);
			// 				}
			// 			},

			// 			onRespSuggestion: function(oEvent) {
			// 				var oViewModel = this.getModel("view");
			// 				var that = this;
			// 				this.resetClientMessages();
			// 				var suggestResp = [];
			// 				jQuery.each(oViewModel.getProperty("/resp"), function(index, respValue) {
			// 					if (respValue.DEFAULT_TEXT.includes(oEvent.mParameters.suggestValue)) {
			// 						suggestResp.push(respValue);
			// 					}

			// 				});
			// 				oViewModel.setProperty("/respSuggestion", suggestResp);

			// 				var oRespFilter = that.byId("respListSuggestInput") || that.getFilterElementById("respListSuggestInput");
			// 				oRespFilter.setFilterSuggests(false);

			// 			},

			onHandleRespTokenUpdate: function(oEvent) {
				var aDelTokens = oEvent.getParameter("removedTokens");
				var fnFilterOutFilterData = function(aRemovedTokens, aTarget) {
					return aRemovedTokens.reduce(function(aData, oToken) {
						return aData.filter(function(oData) {
							return oData.code !== oToken.getKey();
						});
					}, aTarget);
				};
				var fnFilterOutHelperSel = function(aRemovedTokens, aTarget) {
					var _fnDeselect = function(oData, sDelKey) {
						if (oData.children && oData.children.length > 0) {
							oData.children.forEach(function(oChild) {
								_fnDeselect(oChild, sDelKey);
							});
						}
						if (oData.CODE === sDelKey && oData.checked) {
							oData.checked = "Unchecked";
							return true;
						} else {
							return false;
						}
					};
					return aRemovedTokens.reduce(function(aData, oToken) {
						aData.some(function(oData) {
							return _fnDeselect(oData, oToken.getKey());
						});
						return aData;
					}, aTarget);
				};
				var that = this;
				var fnCheckUntickRootSel = function(aRespValues) {

					for (var j = 0; j < aRespValues.length; j++) {
						var bChildCheckedAll, bChildUnCheckedAll;
						if (aRespValues[j].children && aRespValues[j].children.length > 0) {
							bChildUnCheckedAll = true;
							bChildCheckedAll = true;
							//bChildCheckedAll = that.checkChildUntickAll(aRespValues[j].children,bChildCheckedAll);
							bChildUnCheckedAll = that.checkChildUntickAll(aRespValues[j].children, bChildUnCheckedAll);
							bChildCheckedAll = that.checkChildTickAll(aRespValues[j].children, bChildCheckedAll);

						}
						if (bChildUnCheckedAll === false && bChildCheckedAll === false) {
							aRespValues[j].checked = "Mixed";
						} else if (bChildUnCheckedAll) {
							aRespValues[j].checked = "Unchecked";
						} else if (bChildCheckedAll) {
							aRespValues[j].checked = "Checked";
						}

					}
					return aRespValues;

				};
				if (aDelTokens && aDelTokens.length > 0) {
					// update view model && helper model
					this.oViewModel.getData().List.RESP_VALUE_CODE =
						fnFilterOutFilterData(aDelTokens, this.oViewModel.getProperty("/List/RESP_VALUE_CODE"));
					// get selected resp data from helper
					this.oViewModel.getData().resp = fnFilterOutHelperSel(aDelTokens, this.oViewModel.getData().resp);
					this.oViewModel.getData().resp = fnCheckUntickRootSel(this.oViewModel.getData().resp);

					// update helper dialog tree binding
					this.oViewModel.setProperty("/resp", this.oViewModel.getData().resp);
				}
			},

			onHandleRespHelpOK: function() {
				var aResp = [];
				this.oViewModel.getData().resp.forEach(function(oRespData) {
					this.getSelectedResp(aResp, oRespData);
				}.bind(this));
				this.oViewModel.setProperty('/List/RESP_VALUE_CODE', aResp);
				this._respHelpDialog.close();
			},

			getSelectedResp: function(aResp, vRespData) {
				if (vRespData.children && vRespData.children.length > 0) {
					vRespData.children.forEach(function(oRespData) {
						this.getSelectedResp(aResp, oRespData);
					}.bind(this));
				}
				if (vRespData.checked === "Checked" && vRespData.PARENT_CODE) {
					aResp.push({
						code: vRespData.CODE,
						text: vRespData.DEFAULT_TEXT
					});
				}
			},

			onHandleRespHelpCancel: function() {
                this.oViewModel.setProperty("/resp",jQuery.extend(true,[],this.oViewModel.getData().oldResp));
				this._respHelpDialog.close();				
				
			},

			onHandleRespSelectionChange: function(oEvent) {
				var cxt = oEvent.getSource().getParent().getBindingContext("view");
				var path = cxt.getPath();
				this.validateChild(this.oViewModel, path);
				// path = path.substring(0, path.lastIndexOf('/'));
				// this.validateParent(this.oViewModel, path);
				var sRootPath = path.substring(0, path.indexOf('children'));
				this.validateRootRespList(this.oViewModel, sRootPath);
			},

			setChildState: function(obj, state) {
				var that = this;
				this.getChildren(obj).forEach(function(x) {
					x.checked = state;
					that.setChildState(x, state);
				});
			},

			validateChild: function(model, path) {
				var cur = model.getProperty(path);
				if (cur.checked === "Checked" && cur.PARENT_CODE) {
					this.setChildState(cur, cur.checked);
				} else if (!cur.PARENT_CODE) {
					this.setChildState(cur, cur.checked);
				}
			},

			getChildren: function(obj) {
				if (obj.children) {
					return obj.children;
				} else {
					return [];
				}

			},
			checkChildUntickAll: function(array, bUnCheckAll) {
				for (var i = 0; i < array.length; i++) {
					if (array[i].checked && array[i].checked !== 'Unchecked') {
						bUnCheckAll = false;
						break;
					} else {
						if (array[i].children && array[i].children.length > 0) {
							bUnCheckAll = this.checkChildUntickAll(array[i].children, bUnCheckAll);
						}
					}
				}
				return bUnCheckAll;
			},
			checkChildTickAll: function(array, bCheckAll) {
				for (var i = 0; i < array.length; i++) {
					if (array[i].checked && array[i].checked === 'Unchecked') {
						bCheckAll = false;
						break;
					} else {
						if (array[i].children && array[i].children.length > 0) {
							bCheckAll = this.checkChildTickAll(array[i].children, bCheckAll);
						}
					}
				}
				return bCheckAll;
			},
			validateRootRespList: function(model, path) {

				if (path === '') {
					return;
				}
				var oRootList = model.getProperty(path);
				var bChildUnCheckedAll, bChildCheckedAll;
				if (oRootList.children && oRootList.children.length > 0) {
					bChildUnCheckedAll = true;
					bChildCheckedAll = true;
					bChildUnCheckedAll = this.checkChildUntickAll(oRootList.children, bChildUnCheckedAll);
					bChildCheckedAll = this.checkChildTickAll(oRootList.children, bChildCheckedAll);
				}

				if (bChildUnCheckedAll === false && bChildCheckedAll === false) {
					oRootList.checked = "Mixed";
				} else if (bChildUnCheckedAll) {
					oRootList.checked = "Unchecked";
				} else if (bChildCheckedAll) {
					oRootList.checked = "Checked";
				}
				model.setProperty(path, oRootList);

			},
			validateParent: function(model, path) {
				if (path === '/children' || path === '') {
					return;
				}
				var obj = model.getProperty(path);
				var children = this.getChildren(obj);

				var selectedCount = children.filter(function(x) {
					return x.checked === 'Checked';
				}).length;

				if (selectedCount === children.length) {
					obj.checked = 'Checked';
				} else {
					var unselectedCount = children.filter(function(x) {
						return x.checked === 'Unchecked';
					}).length;
					unselectedCount += children.filter(function(x) {
						return x.checked === void 0;
					}).length;
					if (!obj.PARENT_CODE) {
						if (unselectedCount === children.length) {
							obj.checked = 'Unchecked';
						} else {
							obj.checked = 'Mixed';
						}
					}
				}

				model.setProperty(path, obj);
				path = path.substring(0, path.lastIndexOf('/'));
				if (path !== '/children') {
					this.validateParent(model, path);
				}
			},

			onFilterPhaseChange: function(oEvent) {
				var oSource = oEvent.getSource().getSelectedItem();
				if (oSource.getSelectedItem) {
					oSource = oSource.getSelectedItem();
				}
				this.setViewProperty("/List/PHASE", oSource.getProperty("key"));
				// this.navigateIntern(this.getQuery(), true, true);
			},

			onFilterCampaignChange: function(oEvent) {
				//var sSelectedKey = oEvent.getParameter("selectedItem").getProperty("key");
				this.setCampaignForm(undefined);
				this.clearIdeaFormFieldsCriterias();
				var oSource = oEvent.getParameter("selectedItem");
				if (oSource) {
					var sSelectedKey = oSource.getProperty("key");
					this.setViewProperty("/List/CAMPAIGN", sSelectedKey);
					this.getIdeaFormFieldsCriterias();
					// 	this.navigateIntern(this.getQuery(), true, true);
				}
			},

			onFilterDueFromChange: function(oEvent) {
				this.clearDueValueState();
				this.setDueFrom(oEvent);
			},

			onFilterDueToChange: function(oEvent) {
				this.clearDueValueState();
				this.setDueTo(oEvent);
			},

			onFilterAuthorChange: function(oControl) {
				this._onFilterIdentityChange(oControl, "/List/AUTHORS");
			},

			onFilterCoachChange: function(oControl) {
				this._onFilterIdentityChange(oControl, "/List/COACHES");
			},

			_onFilterIdentityChange: function(oControl, sPath) {
				if (!oControl) {
					return;
				}

				var aKeys = [];
				var aTokens = oControl.getTokens();
				jQuery.each(aTokens, function(iIdx, oToken) {
					aKeys.push(oToken.getProperty("key"));
				});

				this.setViewProperty(sPath, aKeys);
				// this.navigateIntern(this.getQuery(), true, true);
			},

			resetFilter: function() {
				var route = this.getRoute();

				this.setViewProperty("/List/STATUS", "");
				this.setViewProperty("/List/SUB_STATUS", "");
				this.setViewProperty("/List/PHASE", "");
				this.restDue();
				this.setViewProperty("/List/AUTHORS", []);
				this.setViewProperty("/List/COACHES", []);
				this.setViewProperty("/List/EXTENSION", {});
				this.setViewProperty("/List/RESP_VALUE_CODE", "");
				this.setViewProperty("/List/RESP_VALUE_NAME", "");
				this.setViewProperty("/List/VOTE_NUMBER", "");
				this.setViewProperty("/List/VOTE_OPERATOR", mOperator.EQ);
				this.setFilterItem("/IdeaFormCriterias", "");
				this.setViewProperty("/List/LATEST_UPDATE", "");

				if (route === 'idealist') {
					this.setViewProperty("/List/CAMPAIGN", "");
					this.restCampaignForm();
					this.restIdeaFormFieldsCriterias();
					this.getIdeaFormFieldsCriterias();
					this.resetCompanyCriterias();

					var oCampaignFilter = this.byId("campaignFilterList") || this.getFilterElementById("campaignFilterList");
					if (oCampaignFilter) {
						oCampaignFilter.removeAllSuggestionItems();
						oCampaignFilter.setValue("");
					}

					var oCampaignFormFilter = this.byId("campaignFormFilterList") || this.getFilterElementById("campaignFormFilterList");
					if (oCampaignFormFilter) {
						oCampaignFormFilter.removeAllSuggestionItems();
						oCampaignFormFilter.setValue("");
					}

					var oCoachFilter = this.byId("coachFilter") || this.getFilterElementById("coachFilter");
					if (oCoachFilter) {
						oCoachFilter.removeAllSuggestionItems();
						oCoachFilter.removeAllTokens();
					}

					var oAuthorFilter = this.byId("authorFilter") || this.getFilterElementById("authorFilter");
					if (oAuthorFilter) {
						oAuthorFilter.removeAllSuggestionItems();
						oAuthorFilter.removeAllTokens();
					}
				}

				BaseController.prototype.resetFilter.apply(this, arguments);
			},

			initialCampaignItems: function() {
				var sCampaignId = this.getViewProperty("/List/CAMPAIGN");
				if (!sCampaignId) {
					return;
				}
				var oModel = this.getDefaultODataModel ? this.getDefaultODataModel() : this.getModel("data");
				var oViewModel = this.getModel("view");
				var that = this;
				var sManaged = this._check4ManagingList() ? "managedCampaigns" : "";

				oModel.read("/CampaignSuggestionParams(searchToken='',filterName='" + sManaged + "')/Results", {
					urlParameters: {
						"$orderby": "SHORT_NAME",
						"$filter": "ID eq " + sCampaignId
					},
					success: function(oData) {
						oViewModel.setProperty("/campaignSuggestion", oData.results);
						var oCampaignFilter = that.byId("campaignFilterList") || that.getFilterElementById("campaignFilterList");
						oCampaignFilter.setFilterSuggests(false);
						if (oCampaignFilter.getSuggestionItems().length > 0) {
							oCampaignFilter.setSelectionItem(oCampaignFilter.getSuggestionItems()[0]);
						}
					}
				});
			},

			addPhaseItems: function() {
				var sEmpty = this.getListProperty("/Filter/PhaseBinding/EMPTY_CODE_TEXT");
				var sPath = this.getListProperty("/Filter/PhaseBinding/TABLE_PATH");
				var sTablePath = "view>/Phases";
				var sCodePath = "view" + ">" + this.getListProperty("/Filter/PhaseBinding/CODE_PATH");
				var sPhaseUrl = Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/idea_filter_phase.xsjs";
				var oParameters = {
					CAMPAIGN_ID: this.getBindingParameter().CampaignId === undefined ? undefined : parseInt(this.getBindingParameter().CampaignId, 10)
				};
				var oViewModel = this.getModel("view");
				jQuery.ajax({
					url: sPhaseUrl,
					headers: {
						"X-CSRF-Token": "Fetch"
					},
					data: oParameters,
					type: "GET",
					contentType: "application/json; charset=UTF-8",
					async: false,
					success: function(oResponse) {
						var oData = oResponse.Phases;
						oViewModel.setProperty("/Phases", oData);
					}
				});
				var that = this;
				var fnFormatter = CodeModel.getFormatter(sPath);
				var oTemplate = new Item({
					text: {
						path: sCodePath,
						formatter: function(sCode) {
							return (!sCode) ? that.getText(sEmpty) : fnFormatter(sCode);
						}
					},
					key: {
						path: sCodePath
					}
				});

				var oPhaseSelect = this.getFilterElementById("phaseSelect");
				if (oPhaseSelect) {
					oPhaseSelect.bindItems({
						path: sTablePath,
						template: oTemplate,
						parameters: {
							includeEmptyCode: true
						}
					});
				}
			},

			addRespListItems: function() {
				var oViewModel = this.getModel("view");
				var sRespListUrl = Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/idea_filter_resp_values.xsjs";
				var oParameters = {
					CAMPAIGN_ID: this.getBindingParameter().CampaignId === undefined ? undefined : parseInt(this.getBindingParameter().CampaignId, 10)
				};
				jQuery.ajax({
					url: sRespListUrl,
					headers: {
						"X-CSRF-Token": "Fetch"
					},
					data: oParameters,
					type: "GET",
					contentType: "application/json; charset=UTF-8",
					async: false,
					success: function(oResponse) {
						var aRes = oResponse.RespValues;
						if (aRes && aRes.length > 0) {
							aRes.sort(function(oPrev, oNext) {
								return oPrev.DEFAULT_TEXT.localeCompare(oNext.DEFAULT_TEXT);
							});
						}
						var oData = [{
							CODE: "",
							DEFAULT_LONG_TEXT: "",
							DEFAULT_TEXT: ""
						}].concat(aRes);
						oViewModel.setProperty("/resp", oData);
					}
				});
			},

			addSubStatusFilterItems: function() {
				var oViewModel = this.getModel("view");
				/*if (oViewModel.getData().hasOwnProperty("subStatus")) {
					var o = oViewModel.getData();
					o.subStatus = [];
				}*/
				if (oViewModel.getProperty("/subStatus")) {
					oViewModel.setProperty("/subStatus", []);
				}
				var aFilters = [];
				var bIsManaged = this._check4ManagingList();
				var sStatus = this.getViewProperty("/List/STATUS");
				switch (sStatus) {
					case mStatus.COMPLETED:
						aFilters.push(new Filter({
							filters: [
						        new Filter("STATUS_TYPE", FilterOperator.EQ, "COMPLETED"),
						        new Filter({
									filters: [

						                new Filter("STATUS", FilterOperator.EQ, 'sap.ino.config.COMPLETED')
						            ],
									and: true
								})
						    ],
							and: false
						}));
						break;
					case mStatus.DISCONTINUED:
						aFilters.push(new Filter({
							filters: [
						        new Filter("STATUS_TYPE", FilterOperator.EQ, "DISCONTINUED"),
						        new Filter({
									filters: [

						                new Filter("STATUS", FilterOperator.EQ, "sap.ino.config.DISCONTINUED")
						            ],
									and: true
								}),
						        new Filter({
									filters: [

						                new Filter("STATUS", FilterOperator.EQ, "sap.ino.config.MERGED")
						            ],
									and: true
								})
						    ],
							and: false
						}));
						break;
					case mStatus.ACTIVE:
						var aTmpFilters = [];

						aTmpFilters.push(new Filter("STATUS", FilterOperator.NE, "sap.ino.config.COMPLETED"));
						aTmpFilters.push(new Filter("STATUS", FilterOperator.NE, "sap.ino.config.DISCONTINUED"));
						aTmpFilters.push(new Filter("STATUS", FilterOperator.NE, "sap.ino.config.MERGED"));
						if (!bIsManaged && !this.getCurrentVariant().INCLUDE_DRAFT) {
							aTmpFilters.push(new Filter("STATUS", FilterOperator.NE, "sap.ino.config.DRAFT"));
						}
						aFilters.push(new Filter({
							filters: [new Filter({
								filters: [
						            new Filter("STATUS_TYPE", FilterOperator.NE, "COMPLETED"),
						            new Filter("STATUS_TYPE", FilterOperator.NE, "DISCONTINUED"),
						            new Filter("BASE_PACKAGE", FilterOperator.NE, "sap.ino.config")
						        ],
								and: true
							}), new Filter({
								filters: aTmpFilters,
								and: true
							})],
							and: false
						}));
						break;
					case mStatus.NEW:
						aFilters.push(new Filter({
							filters: [
					            new Filter("STATUS_TYPE", FilterOperator.EQ, "NEW"),
						        new Filter({
									filters: [

						                new Filter("STATUS", FilterOperator.EQ, "sap.ino.config.NEW_IN_PHASE")
						            ],
									and: true
								})
					        ],
							and: false
						}));
						break;
					default:
						aFilters = [];
				}
				var oModel = this.getDefaultODataModel ? this.getDefaultODataModel() : this.getModel("data");
				//var that = this;
				var oParameters = {
					success: function(oData) {
						oData = [{
							STATUS: "",
							TEXT: "",
							STATUS_TYPE: "",
							BASE_PACKAGE: ""
				        }].concat(oData.results);
						oViewModel.setProperty("/subStatus", oData);
						/*if (that._global) {
						    that._global.getModel("view").setProperty("/subStatus", oData);
						}*/
					}
				};
				if (aFilters.length > 0) {
					oParameters.filters = aFilters;
				}
				if (this.getViewProperty('/List/CAMPAIGN')) {
					oModel.read("/AuthIdeasStatusParams(campaignId=" + this.getViewProperty('/List/CAMPAIGN') + ")/Results", oParameters);
				} else {
					oModel.read("/AuthIdeasStatusParams(campaignId=0)/Results", oParameters);
				}

			},

			// INM-477: sort/filter behavior
			getQuery: function(oParam) {
				var oQuery = {};
				var bSorterChange = oParam && oParam.bSorterChange;
				var bFilterChange = oParam && oParam.bFilterChange;

				if (bSorterChange) {
					var sSort = this.getViewProperty("/List/SORT");
					var quickSort = this.getViewProperty('/List/QUICKSORT');
				}

				if (bFilterChange) {
					//var sOrder = this.getViewProperty("/List/ORDER");
					var aStatus = this.getViewProperty("/List/STATUS");
					var sSubStatus = this.getViewProperty("/List/SUB_STATUS");
					var sVoteNum = this.getViewProperty("/List/VOTE_NUMBER");
					var sVoteOperator = this.getViewProperty("/List/VOTE_OPERATOR");
					//var sRespList = this.getViewProperty("/List/RESP_VALUE_CODE");
					var aRespList = this.getViewProperty("/List/RESP_VALUE_CODE");
					var sPhase = this.getViewProperty("/List/PHASE");
					var sCampaign = this.getViewProperty("/List/CAMPAIGN");
					var aAuthorKeys = this.getViewProperty("/List/AUTHORS");
					var aCoachKeys = this.getViewProperty("/List/COACHES");
					var oExtension = this.getViewProperty("/List/EXTENSION");
					var sLatestUpdate = this.getViewProperty("/List/LATEST_UPDATE");
					var bDueFromExisted = this.hasDueFromFilter();
					var bDueToExisted = this.hasDueToFilter();
					var bCampaignFormExisted = this.hasCampaignFormFilter();
				}

				//sorter
				if (sSort) {
					oQuery.sort = sSort;
					/*if (sOrder) {
						oQuery.order = sOrder;
					}*/
				}
				if (quickSort) {
					oQuery.quickSort = quickSort;
				}

				//filter
				if (aStatus && aStatus.length > 0) {
					oQuery.status = aStatus;
				}
				if (sSubStatus && sSubStatus.length > 0) {
					oQuery.subStatus = sSubStatus;
				}
				if (aRespList && aRespList.length > 0) {
					oQuery.respCode = aRespList.map(function(oResp) {
						return {
							code: encodeURIComponent(oResp.code),
							text: encodeURIComponent(oResp.text)
						};
					});
					oQuery.respCode = JSON.stringify(oQuery.respCode);
				}
				if (sPhase && sPhase.length > 0) {
					oQuery.phase = sPhase;
				}
				if (sVoteNum) {
					oQuery.voteNum = sVoteNum;
					if (sVoteOperator) {
						oQuery.voteOperator = sVoteOperator;
					}
				}
				if (sCampaign) {
					oQuery.campaign = sCampaign;
				}
				if (bDueFromExisted) {
					oQuery.dueFrom = this.getFilterItem("/DueFrom");
				}
				if (bDueToExisted) {
					oQuery.dueTo = this.getFilterItem("/DueTo");
				}
				if (aAuthorKeys && aAuthorKeys.length > 0) {
					oQuery.authors = aAuthorKeys;
				}
				if (aCoachKeys && aCoachKeys.length > 0) {
					oQuery.coaches = aCoachKeys;
				}
				if (bCampaignFormExisted) {
					oQuery.ideaformid = this.getCampaignFormQuery();
				}
				if (sLatestUpdate && sLatestUpdate.length > 0) {
					oQuery.latestUpdate = sLatestUpdate;
				}
				this.setIdeaformCriteriaToQuery(oQuery);
				this.setCompanyCriteriaToQuery(oQuery);

				jQuery.each(oExtension, function(sExtensionField, vValue) {
					if (vValue || vValue === 0 || vValue === 0.0) {
						oQuery[sExtensionField.toLowerCase()] = vValue;
					}
				});

				if (this._oQuery) {
					jQuery.each(this._oQuery, function(sKey, vValue) {
						if ((bFilterChange && !bSorterChange && (sKey === 'sort' || sKey === 'quickSort')) ||
							(bSorterChange && !bFilterChange && (sKey !== 'sort' && sKey !== 'quickSort')) ||
							(!bSorterChange && !bFilterChange)) {
							oQuery[sKey] = vValue;
						}
					});
				}

				// search
				var sSearchTerm = this.getViewProperty("/List/SEARCH");
				if (sSearchTerm) {
					oQuery.search = sSearchTerm;
				}

				// tags
				var aTags = this.getViewProperty("/List/TAGS");
				if (aTags && aTags.length > 0) {
					oQuery.tags = JSON.stringify(aTags);
				}

				// new and process
				var bIsManaged = this._check4ManagingList();
				var sIdeaFilterChange = this.getViewProperty("/List/IDEA_FILTER_NEW_AND_INPROCESS");
				if (bIsManaged) {
					oQuery.sIdeaFilterChange = sIdeaFilterChange;
				}
				if(!bIsManaged){
				var bIdeaGroupView = this.getViewProperty("/List/IS_IDEA_FILTER_COMMUNITY_GROUP_VIEW");				
                oQuery.bIdeaGroupView = bIdeaGroupView;
				}
				this._oQuery = jQuery.extend(true, {}, oQuery);

				return oQuery;
			},

			getSort: function(sSorterOrder) {
				var sVariant = this.getViewProperty("/List/VARIANT");
				var oVariant = this.getVariant(sVariant);

				var aManageSorter = [{
					TEXT: "SORT_MIT_FOLLOW_UP_DATE",
					ACTION: mSort.FOLLOW_UP_DATE,
					DEFAULT_ORDER: mOrder.ASC
                    }, {
					TEXT: "SORT_MIT_LAST_PUBL_EVAL_AT",
					ACTION: mSort.LAST_PUBL_EVAL_AT,
					DEFAULT_ORDER: mOrder.DESC
                    }, {
					TEXT: "SORT_MIT_EVAL_COUNT",
					ACTION: mSort.EVALUATION_COUNT,
					DEFAULT_ORDER: mOrder.DESC
                    }, {
					TEXT: "SORT_MIT_EXPERT_SCORE",
					ACTION: mSort.EXP_SCORE,
					DEFAULT_ORDER: mOrder.DESC
                    }, {
					TEXT: "SORT_MIT_SEARCH_SCORE",
					ACTION: mSort.SEARCH_SCORE,
					DEFAULT_ORDER: mOrder.DESC
                    }];

				var aExtensionSorter = this._extensibilityExtensionFieldSorter() || [];

				// must be managed and user must have backoffice privileges, otherwise FOLLOW_UP_DATE etc. are not contained in OData Service
				if (oVariant && oVariant.MANAGE && Configuration.hasCurrentUserPrivilege("sap.ino.ui::backoffice.access")) {
					this.addSorterConfig(aManageSorter, true);
					if (aExtensionSorter.length > 0) {
						this.addSorterConfig(aExtensionSorter, true);
					}
				} else {
					this.removeSorterConfig(aManageSorter);
					if (aExtensionSorter.length > 0) {
						this.removeSorterConfig(aExtensionSorter);
					}
				}

				// sort Sort list items
				var that = this;
				var aSorter = this.getListProperty("/Sorter/Values");
				aSorter.sort(function(obj1, obj2) {
					var sT1 = that.getText(obj1.TEXT);
					var sT2 = that.getText(obj2.TEXT);
					if (sT1 > sT2) {
						return 1;
					} else if (sT1 < sT2) {
						return -1;
					} else {
						return 0;
					}
				});
				return BaseController.prototype.getSort.call(this, sSorterOrder);
			},

			setParameters: function(oQuery, oVariant) {
				oQuery = oQuery || {};
				var sVariant = oVariant.ACTION;
				//var oSorter = this.getSort(oVariant.DEFAULT_SORT);

				var sSort = this.checkSort(oQuery, oVariant.DEFAULT_SORT);
				//var sOrder = this.checkOrder(oQuery, oSorter.DEFAULT_ORDER);
				var aStatus = this.checkStatus(oQuery.status, []);
				var sPhase = this.checkPhase(oQuery.phase, []);
				var sLatestUpdate = this.checkPhase(oQuery.latestUpdate, []);
				var aTags = this.checkTags(oQuery.tags);
				var sCampaign = oQuery.campaign;
				//var sRespList = oQuery.respCode;
				var aRespList = this.checkRespList(oQuery.respCode);
				var sRespName = oQuery.respName;
				var sSubStatus = this.checkIdentities(oQuery.subStatus, []);
				var sVoteOperator = oQuery.voteOperator;
				var sVoteNum = oQuery.voteNum;
				var sDueFrom = oQuery.dueFrom;
				var sDueTo = oQuery.dueTo;
				var aAuthorKeys = this.checkIdentities(oQuery.authors, []);
				var aCoachKeys = this.checkIdentities(oQuery.coaches, []);
				var sQuickSort = oQuery.quickSort;

				if (oQuery.sIdeaFilterChange === "false") {
					this.setViewProperty("/List/IDEA_FILTER_NEW_AND_INPROCESS", false);
				} else if (oQuery.sIdeaFilterChange === "true") {
					this.setViewProperty("/List/IDEA_FILTER_NEW_AND_INPROCESS", true);
				}
				if (oQuery.bIdeaGroupView === "false") {
					this.setViewProperty("/List/IS_IDEA_FILTER_COMMUNITY_GROUP_VIEW", false);
				} else if (oQuery.bIdeaGroupView === "true") {
					this.setViewProperty("/List/IS_IDEA_FILTER_COMMUNITY_GROUP_VIEW", true);
				}				
				

				this.setViewProperty("/List/VARIANT", oVariant.ACTION);
				this.setViewProperty("/List/SORT", sSort);
				//this.setViewProperty("/List/ORDER", sOrder);
				this.setViewProperty("/List/STATUS", aStatus);
				this.setViewProperty("/List/SUB_STATUS", sSubStatus);
				//this.setViewProperty("/List/RESP_VALUE_CODE", sRespList ? decodeURIComponent(sRespList) : '');
				this.setViewProperty("/List/RESP_VALUE_CODE", (function() {
					return aRespList.map(function(oResp) {
						return {
							code: decodeURIComponent(oResp.code),
							text: decodeURIComponent(oResp.text)
						};
					});
				}()));
				this.setViewProperty("/List/RESP_VALUE_NAME", sRespName);
				this.setViewProperty("/List/VOTE_NUMBER", sVoteNum);
				this.setViewProperty("/List/VOTE_OPERATOR", sVoteOperator);
				this.setViewProperty("/List/PHASE", sPhase);
				this.setViewProperty("/List/LATEST_UPDATE", sLatestUpdate);
				this.setViewProperty("/List/TAGS", aTags);
				this.setViewProperty("/List/IS_TAGS_SELECTION", aTags.length > 0);
				this.setViewProperty("/List/SEARCH", oQuery.search);
				this.setViewProperty("/List/MANAGE", oVariant.MANAGE || oVariant.CAMPAIGN_MANAGE);
				this.setViewProperty("/List/CAMPAIGN", sCampaign);
				this.setCampaignForm(oQuery.ideaformid);
				this.getIdeaFormFieldsCriterias();
				this.setDueFromValue(sDueFrom);
				this.setDueToValue(sDueTo);
				this.setViewProperty("/List/AUTHORS", aAuthorKeys);
				this.setViewProperty("/List/COACHES", aCoachKeys);
				this.setViewProperty("/List/QUICKSORT", sQuickSort);

				//	if (!!sCampaign || !!sPhase || !!sStatus || !!sSubStatus || !!sRespList || (
				//		aAuthorKeys.length > 0) || (aCoachKeys.length > 0) || !!sDueFrom || !!sDueTo) {
				//		this.setViewProperty("/List/IS_SHOW_MORE_FILTER", true);
				//	}

				var that = this;
				this.setViewProperty("/List/EXTENSION", {});
				jQuery.each(oQuery, function(sParam, vValue) {
					if (sParam.indexOf("_") === 0) {
						that.setViewProperty("/List/EXTENSION/" + sParam.toUpperCase(), vValue);
					}
				});
				this.initIdeaFormItems(oQuery);
				this.initCompanyViewItems(oQuery);
				this.setViewProperty("/List/TAGCLOUD", true);
				//this.setViewProperty("/List/IS_FILTER_SUBPAGE", true);
				this.setViewProperty("/List/HIDE_STATUS", false);
				this.setViewProperty("/List/SELECT_ALL", false);
				this.removeSubFilterPageContent();
				if ([mVariant.MANAGE, mVariant.FOLLOW_UP, mVariant.UNASSIGNED, mVariant.COACH_ME, mVariant.EVAL_DONE].indexOf(sVariant) >= 0) {
					this.setViewProperty("/List/MANAGE", true);
					this.addSubFilterPageContent(this.getAdditionalFilter());
					this.setMultiInputContent(this.getFilterElementById("authorFilter"), aAuthorKeys, true);
					this.setMultiInputContent(this.getFilterElementById("coachFilter"), aCoachKeys, true);
				} else if (mVariant.COMPLETED === sVariant) {
					this.setViewProperty("/List/MANAGE", false);
					this.setViewProperty("/List/HIDE_STATUS", true);
					this.setViewProperty("/List/STATUS", undefined);
					this.addSubFilterPageContent(this.getAdditionalFilter());
				} else {
					this.addSubFilterPageContent(this.getAdditionalFilter());
					this.setViewProperty("/List/MANAGE", false);
				}
				this.setViewProperty("/List/EXPORT_ALL", this.getViewProperty("/ORIENTAION") === OrientationType.PORTRAIT && !this.getViewProperty(
					"/List/MANAGE"));
			},

			getItemTemplate: function() {
				var sRequiredTemplate;

				if (this._check4ManagingList()) {
					sRequiredTemplate = "Managed";
				} else if ((!Device.system.desktop && Device.orientation.landscape) ||
					(Device.system.desktop && this.getViewProperty("/ORIENTATION") === OrientationType.LANDSCAPE)) {
					sRequiredTemplate = "Landscape";
				} else {
					sRequiredTemplate = "Portrait";
				}

				var oTemplate;
				var disableImage = Configuration.getSystemSetting("sap.ino.config.DISABLE_IDEA_IMAGE") * 1 || Configuration.getSystemSetting(
					"sap.ino.config.DISABLE_IDEA_IMAGE_HIDE_PHASE_BAR") * 1;
				//if(!this.getViewProperty('/List/DISABLE_IDEA_IMAGE'))				
				switch (sRequiredTemplate) {
					case "Managed":
						//oTemplate = this.getFragment("sap.ino.vc.idea.fragments.ManageListItem");
						oTemplate = disableImage ? this.getFragment("sap.ino.vc.idea.fragments.ManageListItemNoImage") : this.getFragment(
							"sap.ino.vc.idea.fragments.ManageListItem");
						break;
					case "Landscape":
						//oTemplate = this.getFragment("sap.ino.vc.idea.fragments.FlatListItem");
						oTemplate = disableImage ? this.getFragment("sap.ino.vc.idea.fragments.FlatListItemNoImage") : this.getFragment(
							"sap.ino.vc.idea.fragments.FlatListItem");
						break;
					case "Portrait":
						//oTemplate = this.getFragment("sap.ino.vc.idea.fragments.CardListItem");
						oTemplate = disableImage ? this.getFragment("sap.ino.vc.idea.fragments.CardListItemNoImage") : this.getFragment(
							"sap.ino.vc.idea.fragments.CardListItem");
						break;
					default:
						break;
				}

				return oTemplate;
			},

			createFilterController: function() {
				return sap.ui.controller("sap.ino.vc.idea.Filter");
			},

			createFilterView: function() {
				return this.createView({
					type: ViewType.XML,
					viewName: "sap.ino.vc.idea.Filter",
					controller: this._oFilterController
				});
			},

			createFilterDialog: function() {
				return sap.ui.xmlfragment("sap.ino.vc.idea.fragments.FilterDialog", this);
			},

			createState: function(sRoute, sVariant, oQuery, bPortrait) {
				var oState = BaseController.prototype.createState.apply(this, arguments);
				oState.query.status = oQuery.status;
				oState.query.subStatus = oQuery.subStatus;
				oState.query.respCode = oQuery.respCode;
				oState.query.respName = oQuery.respName;
				oState.query.phase = oQuery.phase;
				oState.query.campaign = oQuery.campaign;
				oState.query.due = oQuery.due;
				oState.query.authors = oQuery.authors;
				oState.query.coaches = oQuery.coaches;
				oState.query.voteNum = oQuery.voteNum;
				oState.query.voteOperator = oQuery.voteOperator;
				oState.query.sIdeaFilterChange = this.getViewProperty("/List/IDEA_FILTER_NEW_AND_INPROCESS");
				return oState;
			},

			onOpenIdea: function(oEvent) {
				var iIdeaId;

				if (oEvent.getParameter("ideaId")) {
					iIdeaId = oEvent.getParameter("ideaId");
				} else {
					try {
						if (oEvent.getSource().getProperty("objectId")) {
							iIdeaId = oEvent.getSource().getProperty("objectId");
						}
					} catch (e) {
						iIdeaId = oEvent.getSource().getBindingContext("data").getProperty("ID");
					}
				}
				if (iIdeaId) {
					this.navigateTo("idea-display", {
						id: iIdeaId
					});
				}
			},

			onOpenCampaign: function(oEvent) {
				this.navigateTo("campaign", {
					id: oEvent.getParameter("campaignId")
				});
			},

			setMultiInputContent: function(oControl, aUserIds, bSuppressTokenChangeEvent) {
				if (!oControl) {
					return;
				}
				if (bSuppressTokenChangeEvent) {
					// TODO find a better way to supress unwanted reuest due to token changes
					this._aIgnoreTokenChanges = this._aIgnoreTokenChanges ? this._aIgnoreTokenChanges : [];
					this._aIgnoreTokenChanges.push(oControl);
				}

				if (!aUserIds || aUserIds.length === 0) {
					oControl.removeAllTokens();
				} else {
					var oTokenTemplate = new Token({
						text: "{data>NAME}",
						key: "{data>ID}"
					});

					var aFilters = [];
					jQuery.each(aUserIds, function(iIdx, sId) {
						aFilters.push(new Filter({
							path: 'ID',
							operator: 'EQ',
							value1: sId
						}));
					});

					var aIdentityFilters = [];
					aIdentityFilters.push(new Filter({
						filters: aFilters,
						and: false
					}));

					var oMultiInput = oControl;
					oControl.bindAggregation("tokens", {
						path: "data>/Identity",
						filters: aIdentityFilters,
						template: oTokenTemplate,
						events: {
							dataRequested: function() {
								// if the system is slow and the list request is still running the binding of the token can take some time
								oMultiInput.setBusy(true);
							},
							dataReceived: function() {
								oMultiInput.setBusy(false);
							}
						}
					});
				}

				if (bSuppressTokenChangeEvent) {
					this._aIgnoreTokenChanges = this._aIgnoreTokenChanges.filter(function(o) {
						return o.id !== oControl.id;
					});
				}

			},

			addMultiInputHandling: function(oControl, mSettings) {
				if (!oControl) {
					return;
				}
				var that = this;
				var fnSuggestHandler = this._createSuggestHandler(mSettings.suggestion);
				oControl.attachSuggest(fnSuggestHandler, this);

				oControl.attachTokenUpdate(function(oEvent) {
					if (!that._aIgnoreTokenChanges || that._aIgnoreTokenChanges.filter(function(o) {
						return o.id === oEvent.oSource.id;
					}).length === 0) {
						if (oEvent.getParameter("type") === "removed") {
							if (oEvent.getParameter('removedTokens').length > 0) {
								oEvent.getSource().removeToken(oEvent.getParameter('removedTokens')[0]);
							}
							mSettings.tokenChangeCallback.apply(that, [oEvent.getSource()]);
						} else if (oEvent.getParameter("type") === "added") {
							mSettings.tokenChangeCallback.apply(that, [oEvent.getSource()]);
						}
					}
				});

				if (mSettings.identity) {
					this.setMultiInputContent(oControl, mSettings.identity);
				}
			},

			onSetFilterBarVisible: function(authorFilterId, coachFilterId) {
				/*this.addPhaseItems();
				this.addRespListItems();
				this.addSubStatusFilterItems();*/
				this.bindTagCloud();
				var oAuthorFilter = this.getFilterElementById(authorFilterId);
				if (oAuthorFilter && !oAuthorFilter.mEventRegistry.hasOwnProperty("tokenUpdate")) {
					this.addMultiInputHandling(oAuthorFilter, {
						suggestion: {
							key: "ID",
							text: "NAME",
							additionalText: "USER_NAME",
							path: "data>/SearchIdentity(searchToken='$suggestValue')/Results",
							filters: [new Filter({
								path: "TYPE_CODE",
								operator: FilterOperator.EQ,
								value1: "USER"
							})],
							sorter: new Sorter("NAME")
						},
						identity: this.getViewProperty("/List/AUTHORS"),
						tokenChangeCallback: this.onFilterAuthorChange,
						token: {
							key: "IDENTITY_ID",
							text: "NAME"
						}
					});
				}

				var oCoachFilter = this.getFilterElementById(coachFilterId);
				if (oCoachFilter && !oCoachFilter.mEventRegistry.hasOwnProperty("tokenUpdate")) {
					this.addMultiInputHandling(oCoachFilter, {
						suggestion: {
							key: "ID",
							text: "NAME",
							additionalText: "USER_NAME",
							path: "data>/SearchIdentity(searchToken='$suggestValue')/Results",
							filters: [new Filter({
								path: "TYPE_CODE",
								operator: FilterOperator.EQ,
								value1: "USER"
							})],
							sorter: new Sorter("NAME")
						},
						identity: this.getViewProperty("/List/COACHES"),
						tokenChangeCallback: this.onFilterCoachChange,
						token: {
							key: "IDENTITY_ID",
							text: "NAME"
						}
					});
				}
			},

			bindFilters: function(fnCallback) {
				// init campaign filter list
				this.initialCampaignItems();
				this.initCampaignFormItems();
				var sPath = Configuration.getBackendRootURL() + "/sap/ino/xs/rest/common/idea_filter.xsjs";
				var oParameters = {
					CAMPAIGN_ID: this.getBindingParameter().CampaignId ? parseInt(this.getBindingParameter().CampaignId, 10) : undefined,
					STATUS: this.getViewProperty("/List/STATUS"),
					IS_MANAGED: this._check4ManagingList(),
					INCLUDE_DRAFT: this.getCurrentVariant().INCLUDE_DRAFT
				};
				var oViewModel = this.getModel("view");
				var that = this;

				jQuery.ajax({
					url: sPath,
					headers: {
						"X-CSRF-Token": "Fetch"
					},
					data: oParameters,
					type: "GET",
					contentType: "application/json; charset=UTF-8",
					async: true,
					success: function(oResponse) {
						// set phase model
						oViewModel.setProperty("/Phases", oResponse.Phases);
						// set resp model
						var aRes = oResponse.RespValues;
						if (aRes && aRes.length > 0) {
							aRes.sort(function(oPrev, oNext) {
								return oPrev.DEFAULT_TEXT.localeCompare(oNext.DEFAULT_TEXT);
								//return oPrev.SEQUENCE_NO < oNext.SEQUENCE_NO;
							});
						}
						oViewModel.setProperty("/resp", that._filterRespValues(aRes));
						oViewModel.setSizeLimit(1000);
						// set substatus model
						oViewModel.setProperty("/subStatus", oResponse.Substatus);
						// bind phase filter manually
						that._bindPhase("phaseSelect");

						if (fnCallback && typeof fnCallback === "function") {
							fnCallback();
						}
					}
				});
			},

			_bindPhase: function(phaseseId) {
				var that = this;
				var sEmpty = that.getListProperty("/Filter/PhaseBinding/EMPTY_CODE_TEXT");
				var sTbPath = that.getListProperty("/Filter/PhaseBinding/TABLE_PATH");
				var sTablePath = "view>/Phases";
				var sCodePath = "view" + ">" + that.getListProperty("/Filter/PhaseBinding/CODE_PATH");
				var fnFormatter = CodeModel.getFormatter(sTbPath);
				var oTemplate = new Item({
					text: {
						path: sCodePath,
						formatter: function(sCode) {
							return (!sCode) ? that.getText(sEmpty) : fnFormatter(sCode);
						}
					},
					key: {
						path: sCodePath
					}
				});

				var oPhaseSelect = that.getFilterElementById(phaseseId);
				if (oPhaseSelect) {
					oPhaseSelect.bindItems({
						path: sTablePath,
						template: oTemplate,
						parameters: {
							includeEmptyCode: true
						}
					});
				}
			},

			_filterRespValues: function(respValues) {
				var that = this,
					respCode = that.getQuery(),
					aRespCode;
				if (!respCode || !respValues || respValues.length === 0) {
					return respValues;
				}
				try {
					aRespCode = JSON.parse(that.getQuery().respCode);
				} catch (ex) {
					return respValues;
				}
				if (!aRespCode || aRespCode.length === 0) {
					return respValues;
				}
				aRespCode.forEach(function(oRespCode) {
					that._filterRespChildrenValues(oRespCode, respValues);
				});
				return respValues;
			},

			_filterRespChildrenValues: function(oRespCode, oChildrenRespValues) {
				var that = this;
				oChildrenRespValues.forEach(function(oParent) {
					if (oRespCode.code === oParent.CODE) {
						oParent.checked = "Checked";
					}
					if (oParent.children && oParent.children.length > 0) {
						that._filterRespChildrenValues(oRespCode, oParent.children);
						/*if (oParent.children.length === oParent.children.filter(function(x) {
							return x.checked === 'Checked';
						}).length) {
							oParent.checked = "Checked";
						} else if (oParent.children.filter(function(x) {
							return x.checked === 'Checked';
						}).length === 0 && oParent.children.filter(function(x) {
							return x.checked === 'Mixed';
						}).length === 0) {
							oParent.checked = "Unchecked";
						} else {
							oParent.checked = "Mixed";
						}*/
					}
				});
			},

			getAdditionalFilter: function() {
				var oFragment;

				// if (this._oIdeaFilterFrag) {
				// 	return this._oIdeaFilterFrag;
				// }

				oFragment = this.createFragment("sap.ino.vc.idea.fragments.FilterItems", this.createIdForFilterElement());
				var oFilterItemsLayout = this.getFilterElementById("filterItems");
				this._extensibilityExtensionFilterItems(oFilterItemsLayout);
				// this._oIdeaFilterFrag = oFragment;

				return oFragment;
			},

			onApplyFilterToQuery: function() {
				if (this.isCanApply()) {
					this.navigateIntern(this.getQuery({
						bFilterChange: true
					}), true, true);
				}
			},

			reloadData: function() {
				this.bindList();
				this.bindTagCloud();
			},

			checkDate: function(dDate, dDefault) {
				var dCheck = new Date(dDate);
				return isNaN(dCheck.getTime()) ? dDefault : dCheck;
			},

			checkStatus: function(sStatus, sDefault) {
				if (sStatus && sStatus.length > 0) {
					return sStatus.split(",");
				} else {
					return sDefault;
				}
			},

			checkPhase: function(sName, sDefault) {
				var sPath = this.getListProperty("/Filter/PhaseBinding/TABLE_PATH");
				var name = sName;
				var aCodes = CodeModel.getCodes(sPath);
				if (sName) {
					var aResult = jQuery.grep(aCodes, function(oCode) {
						var aName = name.split(",");
						var code = oCode;
						return jQuery.grep(aName, function(oName) {
							return oName === code.CODE;
						});
					});

					if (aResult && aResult.length > 0) {
						return sName.split(",");
					}
				}
				return sDefault;
			},

			checkIdentities: function(sIdentities, oDefault) {
				if (!sIdentities) {
					return oDefault;
				} else {
					return sIdentities.split(",");
				}
			},

			onApplyFilter: function() {
				var oFilterDialog = this.getFilterDialog();
				if (JSON.stringify(this.getViewModelBackup()) === JSON.stringify(this.getViewProperty("/")) && JSON.stringify(this.getFilterItemModelBackup()) ===
					JSON.stringify(this.getModel("filterItemModel"))) {
					oFilterDialog.close();
					return;
				}

				var oQuery = this.getQuery({
					bFilterChange: true
				});

				var sVariant = this.getViewProperty("/List/VARIANT");
				var route = this.getRoute();
				// var isAll = sVariant === this.getListProperty("/Variants/DEFAULT_VARIANT");
				var params = {
					query: oQuery
				};
				if (route === "campaign-idealist" || route === "campaign-idealistvariant") {
					params.id = oQuery.campaign || this.campaignId;
				}
				// if (!isAll) {
				params.variant = sVariant;
				// }

				// this.navigateTo(this.getRoute(!isAll), params, true, true);
				this.navigateTo(this.getRoute(true), params, true, true);

				oFilterDialog.close();
			},

			getExportPrefix: function() {
				return this.getText("EXPORT_PREFIX_IDEA");
			},

			onMoreFilterChange: function(oEvent) {
				var oNavContainer = this.getFilterNavContainer();
				var aPages = oNavContainer.getPages();
				var oFilterContainer = aPages[0].getContent()[0];
				if (oFilterContainer.getItems().length > 2) {
					var _fncallback = function(oContainer) {
						oContainer.$().find('*[tabindex="0"]')[oContainer.getItems().length - 1].focus();
						// hide busyindicator
						this.getFilterElementById("filterItems").setBusy(false);
					}.bind(this, oFilterContainer);

					this.setViewProperty("/List/IS_SHOW_MORE_FILTER", true);
					oEvent.getSource().setVisible(false);
					this.getFilterElementById("filterItems").setBusyIndicatorDelay(0).setBusy(true);

					setTimeout(function(fnCallback) {
						this.bindFilters(fnCallback);
					}.bind(this, _fncallback), 0);
				}
			},

			onFilterReset: function() {
				this.setViewProperty("/List/TAGS", []);
				this.setViewProperty("/List/IS_TAGS_SELECTION", false);
				this.setViewProperty("/List/SORT", "");
				this.setViewProperty("/List/SELECTQUICKLINKID", undefined);
				this.getModel("list").setProperty("/CURRENTSELECTLINK", undefined);
				this.getModel("list").setProperty("/TITLESELECTQUICKLINK", undefined);
				//this.setViewProperty("/List/IS_SHOW_MORE_FILTER", false);
				this.resetFilter();

				// hide more filter items
				/*var oMoreFilters = this.getFilterElementById("filterItems");
				if (oMoreFilters) {
					oMoreFilters.setVisible(false);
					this.byId(this.getFilterFragmentId() + "--showMoreFiltersBtn").setVisible(true);
				}*/

				if (!Device.system.desktop) {
					//no navigation on mobile phones yet
					return;
				}

				this.navigateIntern(this.getQuery({
					bFilterChange: true,
					bSorterChange: true
				}), true);
			},

			onCampaignSuggestion: function(oEvent) {
				var oViewModel = this.getModel("view");
				var that = this;
				var oModel = this.getDefaultODataModel ? this.getDefaultODataModel() : this.getModel("data");
				var mEvent = jQuery.extend({}, oEvent, true);
				var sTerm = jQuery.sap.encodeURL(mEvent.getParameter("suggestValue"));
				var sManaged = this._check4ManagingList() ? "managedCampaigns" : "";
				this.resetClientMessages();
				oModel.read("/CampaignSuggestionParams(searchToken='" + sTerm + "',filterName='" + sManaged + "')/Results", {
					urlParameters: {
						"$orderby": "SHORT_NAME"
					},
					success: function(oData) {
						oViewModel.setProperty("/campaignSuggestion", oData.results);
						var oCampFilter = that.byId("campaignFilterList") || that.getFilterElementById("campaignFilterList");
						oCampFilter.setFilterSuggests(false);
					}
				});
			},

			onClearCampaignFilter: function(oEvent) {
				var sValue = oEvent.getParameter("value");
				if (sValue.trim() === "") {
					this.setViewProperty("/List/CAMPAIGN", "");
					// 	this.navigateIntern(this.getQuery(), true, true);
				}
				this.setCampaignForm(undefined);
				this.clearIdeaFormFieldsCriterias();
			},

			onCampaignDialogSearch: function(oEvent) {
				var sValue = jQuery.sap.encodeURL(oEvent.getParameter("value"));
				var oModel = this.getDefaultODataModel ? this.getDefaultODataModel() : this.getModel("data");
				var oViewModel = this.getModel("view");
				var sManaged = this._check4ManagingList() ? "managedCampaigns" : "";
				oModel.read("/CampaignSuggestionParams(searchToken='" + sValue + "',filterName='" + sManaged + "')/Results", {
					urlParameters: {
						"$orderby": "SHORT_NAME"
					},
					success: function(oData) {
						oViewModel.setProperty("/campaignSuggestion", oData.results);
					}
				});
			},

			onCampaignDialogItemsSelect: function(oEvent) {
				var sSelectedKey = oEvent.getParameter("selectedItem").data("ID") + "";
				var oCampaignFilterList = this.byId("campaignFilterList") || this.getFilterElementById("campaignFilterList");
				var oCampaignFilterItems = oCampaignFilterList.getSuggestionItems();
				oCampaignFilterItems.forEach(function(item) {
					if (item.getProperty("key") === sSelectedKey) {
						oCampaignFilterList.setSelectionItem(item);

					}
				});

				this.setViewProperty("/List/CAMPAIGN", sSelectedKey);
				this.clearIdeaFormFieldsCriterias();
				this.getIdeaFormFieldsCriterias();
				// this.navigateIntern(this.getQuery(), true, true);
			},

			onPressOpenIdeaListFilterPersonalization: function() {
				var that = this;
				var oViewModel = this.getModel("view");
				if (this._check4ManagingList()) {
					PersonalizeSetting.getFilterSettingsForDialogForBackoffice().done(function(data) {
						oViewModel.setProperty("/List/IDEA_LIST_FILTER_PERSONALIZATION_SETTING", data.RESULT);
						// create dialog
						var oIdeaListFilterPersonalizeDialog = that.createIdeaListFilterPersonalizeDialog();
						oIdeaListFilterPersonalizeDialog.open();
					});
				} else {
					PersonalizeSetting.getFilterSettingsForDialogForCommunity().done(function(data) {
						oViewModel.setProperty("/List/IDEA_LIST_FILTER_PERSONALIZATION_SETTING", data.RESULT);
						// create dialog
						var oIdeaListFilterPersonalizeDialog = that.createIdeaListFilterPersonalizeDialog();
						oIdeaListFilterPersonalizeDialog.open();
					});
				}

			},

			onUpdateIdeaFilterPersonzalization: function(oEvent) {
				var thatEvent = oEvent.getSource();
				var oViewModel = this.getModel("view");
				var oPersonalizationSetting = oViewModel.getProperty("/List/IDEA_LIST_FILTER_PERSONALIZATION_SETTING");
				var oPayload = {};
				var that = this;
				oPersonalizationSetting.forEach(function(item, index) {
					oPayload[item.CODE] = {
						VALUE: Number(item.VALUE),
						SEQUENCE: item.SEQUENCE !== undefined ? item.SEQUENCE + 1 : 9999
					};
				});
				PersonalizeSetting.updateFilterSettings({
					'IDEA_LIST_FILTER_PERSONALIZATION': oPayload
				}).done(function() {
					oViewModel.setProperty("/List/IDEA_LIST_FILTER_PERSONALIZATION", oPayload);
					thatEvent.close();
					that.resetFilter();
					//thatEvent.destroy();
				});
			},

			onIdeaFilterPersonzalizationCancel: function(oEvent) {
				oEvent.getSource().close();
				//oEvent.getSource().destroy();
			},

			handleIdeaFilterPersonzalizationSearch: function(oEvent) {
				var sValue = oEvent.getParameter("value");
				var oFilter = new Filter("CODE", sap.ui.model.FilterOperator.Contains, sValue);
				var oBinding = oEvent.getSource().getBinding("items");
				oBinding.filter([oFilter]);
			},

			onHandleCampaignFilterHelp: function() {
				var that = this;
				var oViewModel = this.getModel("view");
				var oModel = this.getDefaultODataModel ? this.getDefaultODataModel() : this.getModel("data");
				var sManaged = this._check4ManagingList() ? "managedCampaigns" : "";
				oModel.read("/CampaignSuggestionParams(searchToken='',filterName='" + sManaged + "')/Results", {
					urlParameters: {
						"$orderby": "SHORT_NAME"
					},
					success: function(oData) {
						oViewModel.setProperty("/campaignSuggestion", oData.results);
						var oCampFilter = that.byId("campaignFilterList") || that.getFilterElementById("campaignFilterList");
						oCampFilter.setFilterSuggests(false);
						// create dialog
						var oCampaignlistDialog = that.createCampaignListDialog();
						oCampaignlistDialog.open();
					}
				});
				that.setCampaignForm(undefined);
			},

			createIdeaListFilterPersonalizeDialog: function() {
				if (!this._IdeaListFilterPersonalizeDialog) {
					this._IdeaListFilterPersonalizeDialog = this.createFragment("sap.ino.vc.idea.fragments.IdeaListPersonalizeFilterPop", this.getView()
						.getId());
					this.getView().addDependent(this._IdeaListFilterPersonalizeDialog);
				}
				return this._IdeaListFilterPersonalizeDialog;
			},

			createCampaignListDialog: function() {
				if (!this._campaignDialog) {
					this._campaignDialog = this.createFragment("sap.ino.vc.idea.fragments.CampaignSuggestionSelectList", this.getView().getId());
					this.getView().addDependent(this._campaignDialog);
				}
				return this._campaignDialog;
			},

			initApplicationObjectChangeListeners: function() {
				var that = this;
				that._bListChanged = false;
				var aActions = ["create", "del", "modifyAndSubmit", "executeStatusTransition"];

				var fnAOChangeListener = function(oEvent) {
					var sAction = oEvent.getParameter("actionName");
					if (sAction && aActions.indexOf(sAction) > -1 && oEvent.getParameter("object").getMetadata().getName() ===
						"sap.ino.commons.models.object.Idea") {
						that._bListChanged = true;
					}
				};

				ApplicationObjectChange.attachChange(ApplicationObjectChange.Action.Create, fnAOChangeListener);
				ApplicationObjectChange.attachChange(ApplicationObjectChange.Action.Del, fnAOChangeListener);
				ApplicationObjectChange.attachChange(ApplicationObjectChange.Action.Action, fnAOChangeListener);
			},

			onObjectListUpdateFinished: function(event) {
				var parameters = event && event.getParameters();
				if (parameters && parameters.total > 0) {
					this.setViewProperty("/List/SELECT_ALL_ENABLE", true);
					// 	this.byId("sapInoMassExportBtn").setEnabled(this.getViewProperty("/List/EXPORT_ALL"));
				} else {
					this.setViewProperty("/List/SELECT_ALL_ENABLE", false);
					// 	this.byId("sapInoMassExportBtn").setEnabled(false);
				}
				BaseController.prototype.onObjectListUpdateFinished.apply(this, arguments);
				this.initIdeaSearchParam();
			},

			changeDefaultSortOfVariant: function(oVariant, oQuery) {
				if (oQuery && oQuery.search && (oVariant.ACTION === "manage" || oVariant.ACTION === "all")) {
					oVariant.DEFAULT_SORT = "SEARCH_SCORE";
				} else if (oVariant.ACTION === "manage" || oVariant.ACTION === "all") {
					jQuery.each(this.list.Variants.Values, function(iIdx, sSorter) {
						if (sSorter.ACTION === oVariant.ACTION) {
							oVariant.DEFAULT_SORT = sSorter.DEFAULT_SORT;
							return false;
						}
					});
				}
			},

			activeIdeaFilterSwitchChange: function() {
				this.setViewProperty("/List/IDEA_FILTER_NEW_AND_INPROCESS", !this.getViewProperty("/List/IDEA_FILTER_NEW_AND_INPROCESS"));
				this.navigateIntern(this.getQuery(), true, true);
			},
            activeIdeaFilterCommunityGroupView: function(){
				this.setViewProperty("/List/IS_IDEA_FILTER_COMMUNITY_GROUP_VIEW", !this.getViewProperty("/List/IS_IDEA_FILTER_COMMUNITY_GROUP_VIEW"));
				var aVariants = this.getModel("list").getProperty("/Variants/Values");
				var sText;
				for(var i = 0; i < aVariants.length; i ++){
				    var oVariant = aVariants[i]; 
				    sText = oVariant.TEXT;
				    if(oVariant.ACTION === mVariant.VOTED){
				        sText = this.getViewProperty("/List/IS_IDEA_FILTER_COMMUNITY_GROUP_VIEW") ?  "IDEA_LIST_MIT_MY_VOTED" : "IDEA_LIST_MIT_VOTED";
				    } else if(oVariant.ACTION === mVariant.COMMENTED)
				    {
				        sText = this.getViewProperty("/List/IS_IDEA_FILTER_COMMUNITY_GROUP_VIEW") ?   "IDEA_LIST_MIT_MY_COMMENTED" : "IDEA_LIST_MIT_COMMENTED";
				    }
				    this.getModel("list").setProperty("/Variants/Values/" + i + "/TEXT", sText);
				}
				
				
				var oRouteParams = {
					query: this.getQuery(),
					variant: ""
				};
				
				if (this.getViewProperty("/List/SEARCH")) {
					oRouteParams.query.search = this.getViewProperty("/List/SEARCH");
				}				
			   	var sRoute = "idealistvariant";
			   	if(this.getViewProperty("/List/IS_IDEA_FILTER_COMMUNITY_GROUP_VIEW")){
					oRouteParams.variant = mVariant.MY;
			   	} else {
			   	    oRouteParams.variant = mVariant.ALL;
			   	}
				if (this.getRoute().indexOf("campaign") > -1) {
					oRouteParams.id = this._iCampaignId;
					sRoute = "campaign-idealistvariant";
				} 			   	
								
				this.navigateTo(sRoute, oRouteParams, true, true);				
				
				
				
				//this.navigateIntern(this.getQuery(), true, true);                
            },
			onOfficeToggle: function() {
				this.bOfficeToggle = true;
				var newQuickLinkFunction = this.getViewProperty("/NEWQUICKLINKFUNCTION");
				var bShowBackoffice = this.getModel("component").getProperty("/SHOW_BACKOFFICE");
				bShowBackoffice = !bShowBackoffice;
				this.getModel("component").setProperty("/SHOW_BACKOFFICE", bShowBackoffice);
				var oRouteParams = {
					query: {},
					variant: ""
				};
				if (this.getViewProperty("/List/SEARCH")) {
					oRouteParams.query.search = this.getViewProperty("/List/SEARCH");
					oRouteParams.query.sort = this.getViewProperty("/List/SORT");
				}
				var sRoute = "idealistvariant";
				// if (bShowBackoffice && !newQuickLinkFunction) {
				// 	oRouteParams.variant = mVariant.MANAGE;
				// 	this.navigateTo(sRoute, oRouteParams, true, true);
				// } else if(!bShowBackoffice && !newQuickLinkFunction){
				// 	oRouteParams.variant = mVariant.ALL;
				// 	this.navigateTo(sRoute, oRouteParams, true, true);
				// }
				if (bShowBackoffice) {
					oRouteParams.variant = mVariant.MANAGE;
				} else {
					oRouteParams.variant = mVariant.ALL;
				}

				// if (this.getRoute().indexOf("campaign") > -1 && !newQuickLinkFunction) {
				// 	oRouteParams.id = this._iCampaignId;
				// 	sRoute = "campaign-idealistvariant";
				// 	this.navigateTo(sRoute, oRouteParams, true, true);
				// 	return;
				// } 

				if (this.getRoute().indexOf("campaign") > -1) {
					oRouteParams.variant = bShowBackoffice ? mVariant.MANAGE : mVariant.ALL;
					oRouteParams.id = this._iCampaignId;
					sRoute = "campaign-idealistvariant";
				}
				// if(this.getRoute().indexOf("campaign") === -1 ){
				//     this.navigateTo("idealist");
				//     return;
				// }
				this.navigateTo(sRoute, oRouteParams, true, true);
			},

			getCurrentUrlId: function() {
				this.setViewProperty("/List/SELECTQUICKLINKID", undefined);
				var aValues = this.getModel("list").getProperty("/Variants/Values");
				var currentUrl = this.getViewProperty("/CURRENTURL");
				var selectId = this.getViewProperty("/List/SELECTQUICKLINKID");
				var sVariant = this.getViewProperty("/isre");
				var that = this;
				var aCurrentUrl = currentUrl.split("/");
				if (aCurrentUrl[0].indexOf("campaign") > -1) {
					aCurrentUrl.splice(0, 2);
					currentUrl = aCurrentUrl.join("/");
				}
				aValues.forEach(function(oValues) {
					if (oValues.LINK_URL && decodeURIComponent(oValues.LINK_URL) === currentUrl) {
						that.setViewProperty("/List/SELECTQUICKLINKID", oValues.ID);
						that.getModel("list").setProperty("/TITLESELECTQUICKLINK", oValues);
						selectId = oValues.ID;
						return;
					}
				});

				if (selectId) {
					return;
				}

				aValues.forEach(function(oValues) {
					if (oValues.TYPE_CODE === "QUICK_LINK_STANDARD_IDEA" && oValues.ACTION === sVariant) {
						that.setViewProperty("/List/SELECTQUICKLINKID", oValues.ID);
						that.getModel("list").setProperty("/TITLESELECTQUICKLINK", oValues);
						selectId = oValues.ID;
						return;
					}
				});

				if (selectId) {
					return;
				} else {
					this.setViewProperty("/List/SELECTQUICKLINKID", undefined);
				}
			},

			getCurrentQuickIdeaList: function() {
				var bShowBackoffice = this.getModel("component").getProperty("/SHOW_BACKOFFICE");
				var oQuickLinkList;
				if (bShowBackoffice) {
					oQuickLinkList = this.byId("panelFilterFragment--backOfficeQuickLinkIdeaList");
				} else {
					oQuickLinkList = this.byId("panelFilterFragment--communityQuickLinkIdeaList");
				}

				return oQuickLinkList;
			},

			navigateToFirstQuickLink: function(aVisibelLink, oQuery) {
				var sCampaignId = this.campaignId;
				if (!Array.isArray(aVisibelLink) || !aVisibelLink.length) {
					return;
				}
				var sCustomerQuickLinkUrl;
				var currentFirstLink = aVisibelLink[0].getBindingContext("list").getObject();
				this.setViewProperty("/List/SELECTQUICKLINKID", currentFirstLink.ID);
				this.getModel("list").setProperty("/CURRENTSELECTLINK", currentFirstLink);
				this.getModel("list").setProperty("/TITLESELECTQUICKLINK", currentFirstLink);
				if (currentFirstLink.TYPE_CODE === "QUICK_LINK_CUSTOM_IDEA") {
					//this.getModel("list").setProperty("/CURRENTQUICKLINK" , currentFirstLink);
					sCustomerQuickLinkUrl = sCampaignId ?
						location.href.split("#")[0] + "#/campaign/" + sCampaignId + "/" + currentFirstLink.LINK_URL :
						location.href.split("#")[0] + "#/" + currentFirstLink.LINK_URL;
					sCustomerQuickLinkUrl = "search" in oQuery ? location.href.split("#")[0] + "#/" + currentFirstLink.LINK_URL + "&search=" + oQuery.search :
						location.href.split("#")[0] + "#/" + currentFirstLink.LINK_URL;
					this.setViewProperty("/firstQuickLink", sCustomerQuickLinkUrl);
					this.navigateToByURL(sCustomerQuickLinkUrl);
				} else {
					var oRouteParams = {
						variant: currentFirstLink.ACTION
					};
					if (sCampaignId) {
						oRouteParams.id = sCampaignId;

						sCustomerQuickLinkUrl = location.href.split("#")[0] + "#/campaign/" + sCampaignId + "/ideas-" + oRouteParams.variant;
					} else {
						sCustomerQuickLinkUrl = location.href.split("#")[0] + "#/ideas-" + oRouteParams.variant;
					}

					sCustomerQuickLinkUrl = "search" in oQuery ? sCustomerQuickLinkUrl + "/?search=" + oQuery.search : sCustomerQuickLinkUrl;
					// 	sCustomerQuickLinkUrl = location.href.split("#")[0] + "#/ideas-" + oRouteParams.variant;                
					this.setViewProperty("/firstQuickLink", sCustomerQuickLinkUrl);
					//this.navigateTo(this.getRoute(true), oRouteParams, true, true);
					this.navigateToByURL(sCustomerQuickLinkUrl);
				}
			},

			refreshQuickLinkSettings: function(data, aVariants) {
				var sVariant = this.getViewProperty("/isre");
				var oVariant = jQuery.extend(true, {}, this.getVariant(sVariant));
				if (data.RESULT.length > 0 && aVariants) {
					data.RESULT.forEach(function(oResult) {
						aVariants.forEach(function(oVariant) {
							if (oResult.TYPE_CODE === "QUICK_LINK_STANDARD_IDEA" && oVariant.TYPE_CODE === "QUICK_LINK_STANDARD_IDEA" && oResult.OBJECT_TYPE_CODE ===
								oVariant.OBJECT_TYPE_CODE) {
								oVariant.ACTIVE = oResult.ACTIVE === 1 ? true : false;
								oVariant.SEQUENCE = oResult.SEQUENCE;
								oVariant.ID = oResult.ID;
								oVariant.ENABLED = oResult.ENABLED;
							} else if (oResult.TYPE_CODE === "QUICK_LINK_CUSTOM_IDEA") {
								// get filter infomation from link url
								// oResult.FILTER_INFO = that.getFilterInfoByLink(oResult.LINK_URL);
								var newQuickLink = aVariants.every(function(oitem) {
									if (oitem.TYPE_CODE === "QUICK_LINK_STANDARD_IDEA") {
										return true;
									}

									if (oitem.TYPE_CODE === "QUICK_LINK_CUSTOM_IDEA") {
										return oResult.ID !== oitem.ID;
									}
								});
								if (newQuickLink && oVariant.TYPE_CODE === "QUICK_LINK_STANDARD_IDEA" && oResult.OBJECT_TYPE_CODE === oVariant.OBJECT_TYPE_CODE) {
									oResult.ACTIVE = oResult.ACTIVE === 1 ? true : false;
									oResult.FILTER = oVariant.FILTER;
									oResult.ACTION = oVariant.ACTION;
									oResult.ROLES = oVariant.ROLES;
									if (oVariant.MANAGE) {
										oResult.MANAGE = oVariant.MANAGE;
									}
									aVariants.push(oResult);
								}
							}
						});
					});
				}
				this.getModel("list").setProperty("/Variants/Values", aVariants);
				this.setVariantVisibility(oVariant);
			},

			setQuicklinkFilterListValue: function() {
				var that = this;
				var oViewModel = this.getModel("view");
				var oCampaignFilter = this.byId("campaignFilterList");
				var campaignFilterValue = oCampaignFilter.getValue();
				oViewModel.setProperty("/quickLinkcampaignName", campaignFilterValue);

				var aSelect = [];
				["phaseSelect", "statusSelect", "subStatusSelect", "latestUpdateSelect"].forEach(function(oSelect) {
					var oSelectItem = that.byId(oSelect).getSelectedItems();
					oSelectItem.forEach(function(oItem) {
						aSelect.push(oItem.getText());
					});
					oViewModel.setProperty("/quickLink" + oSelect, aSelect.toString());
					aSelect = [];
				});

				var aFilter = [];
				["authorFilter", "coachFilter", "respListMultiInput"].forEach(function(oFilter) {
					var oTokensItem = that.byId(oFilter).getTokens();
					oTokensItem.forEach(function(oItem) {
						aFilter.push(oItem.getProperty("text"));
					});
					oViewModel.setProperty("/quickLink" + oFilter, aFilter.toString());
					aFilter = [];
				});

				var aDate = [];
				["dpDue", "dpDueTo"].forEach(function(oDate) {
					var oDateValue = that.byId(oDate).getValue();
					aDate.push(oDateValue);
					oViewModel.setProperty("/quickLinkdateFilter", aDate.toString());
				});

				var sVoteOperator = this.byId("voteOperatorSelect").getSelectedItem().getText();
				oViewModel.setProperty("/quickLinkvoteOperator", sVoteOperator);

				var aCriterias = this.getModel("filterItemModel").getProperty("/IdeaFormCriterias");
				var aCampaignForm = this.getModel("filterItemModel").getProperty("/CAMPAIGNFORM");
				var aIdeaFormList = this.getModel("filterItemModel").getProperty("/IdeaFormList");
				var aCampaignFormName = this.byId("campaignFormFilterList").getValue();

				var aCampaignFormValue = [];
				if (aIdeaFormList && aCriterias) {
					aIdeaFormList.forEach(function(oIdeaFormList) {
						aCriterias.forEach(function(oCriteria) {
							if (oCriteria.CriteriaCode === oIdeaFormList.CODE) {
								if (oCriteria.CriteriaValue === "1" && oCriteria.CriteriaValueDataType === 1) {
									aCampaignFormValue.push(oIdeaFormList.DEFAULT_TEXT + ": true");
								} else if (oCriteria.CriteriaValue === "0" && oCriteria.CriteriaValueDataType === 1) {
									aCampaignFormValue.push(oIdeaFormList.DEFAULT_TEXT + ": false");
								} else {
									aCampaignFormValue.push(oIdeaFormList.DEFAULT_TEXT + ": " + oCriteria.CriteriaValue);
								}
							}
						});
					});
				}

				var bCriteriaValue = aCriterias.every(function(oCriteria) {
					return oCriteria.CriteriaValue === "" || oCriteria.CriteriaValue === undefined;
				});

				if (aCampaignForm !== "" && aCampaignForm !== undefined) {
					if (bCriteriaValue) {
						oViewModel.setProperty("/quickLinkCampaignForm", aCampaignFormName.toString());
					} else {
						oViewModel.setProperty("/quickLinkCampaignForm", aCampaignFormName + "(" + aCampaignFormValue.toString() + ")");
					}
				} else if (bCriteriaValue) {
					oViewModel.setProperty("/quickLinkCampaignForm", "");
				} else {
					oViewModel.setProperty("/quickLinkCampaignForm", aCampaignFormValue.toString());
				}
			},

			onQuickLinkOpen: function() {
				this.setQuicklinkFilterListValue();
				this.getQuickLinkDialog().open();
				this.setShortByIcon("shortByIcon3", "shortByIcon4");
			},

			getQuickLinkDialog: function() {
				if (!this._quickLinkDialog) {
					this._quickLinkDialog = this.createFragment("sap.ino.vc.idea.fragments.QuickLinkDialog", this.getView().getId());
					this.getView().addDependent(this._quickLinkDialog);
				}
				return this._quickLinkDialog;
			},

			onHandleQuickLinkOK: function() {
				var oQuickLinkName = this.byId("quickLinkName");
				if (oQuickLinkName.getValue() === "" || oQuickLinkName.getValue() === undefined) {
					oQuickLinkName.setValueState("Error");
					return;
				} else {
					this.createQuickLinkCustomSettings();
				}
			},

			createQuickLinkCustomSettings: function() {
				var that = this;
				var nACTIVE = 1;
				var aVisibelLink = this.getCurrentQuickIdeaList().getVisibleItems();
				if (aVisibelLink.length > 9) {
					nACTIVE = 0;
				}
				var aSequence = [];
				var aVariants = this.getModel("list").getProperty("/Variants/Values");
				aVariants.forEach(function(oVariant) {
					aSequence.push(oVariant.SEQUENCE);
				});
				var minSequence = Math.min.apply(null, aSequence);

				var linkUrl = this.getCustomLinkUrl();
				var linkText = this.getViewProperty("/List/QUICKLINKNAME");
				var objectTypeCode = this.getCurrentVariant().OBJECT_TYPE_CODE;
				var aSettings = [];
				aSettings.push({
					"ID": -1,
					"ACTIVE": nACTIVE,
					"SEQUENCE": minSequence - 1,
					"TYPE_CODE": "QUICK_LINK_CUSTOM_IDEA",
					"OBJECT_TYPE_CODE": objectTypeCode,
					"LINK_TEXT": linkText,
					"LINK_URL": linkUrl
				});

				var oMessageToast = {
					duration: 7000,
					width: '20em'
				};

				if (sap.ui.getCore().getMessageManager().getMessageModel().getData().length === 0) {
					this._quickLinkDialog.setBusy(true);
					PersonalizeSetting.updateQuickLinkSettings(aSettings).done(function() {
						PersonalizeSetting.getQuickLinkSettings({
							'TYPE_CODE': mTypeCode
						}).done(function(data) {
							that.refreshQuickLinkSettings(data, aVariants);
							var oList = that.getCurrentQuickIdeaList();
							oList.bindItems(oList.getBindingInfo('items'));
							//aVisibelLink = that.getQuickIdeaListVisiableItems();
							that._quickLinkDialog.setBusy(false);
							that.onHandleQuickLinkCancel();
							MessageToast.show(that.getText("QUICK_LINK_CREATE_CUSTOMER_IDEA_SUCCESS"), oMessageToast);
							//that.navigateToFirstQuickLink(aVisibelLink);
						});
					}).fail(function() {
						that._quickLinkDialog.setBusy(false);
						that.onHandleQuickLinkCancel();
						MessageToast.show(that.getText("QUICK_LINK_CREATE_CUSTOMER_IDEA_FAILURE"), oMessageToast);
					});
				}
			},

			getCustomLinkUrl: function() {
				var oQuery = this.getQuery();
				if ("search" in oQuery) {
					delete oQuery.search;
				}
				var sVariant = this.getViewProperty("/List/VARIANT");
				var currentRoute = this.getCurrentRoute();
				var params = {
					query: oQuery
				};

				if (currentRoute === "idealist") {
					currentRoute = "idealistvariant";
				}

				if (currentRoute === "campaign-idealist" || currentRoute === "campaign-idealistvariant") {
					params.id = oQuery.campaign || this.campaignId;
				}
				params.variant = sVariant;
				var oUrl = this.getRouter().getURL(currentRoute, params);
				return decodeURIComponent(oUrl);

			},

			onHandleQuickLinkCancel: function() {
				this._quickLinkDialog.close();
				this._quickLinkDialog.destroy();
				this._quickLinkDialog = undefined;
				this.setViewProperty("/List/QUICKLINKNAME", "");
			},

			onQuickLinkInfoPopoverOpen: function(oEvent) {
				if (this._oQuickLinkInfoPopover) {
					this._oQuickLinkInfoPopover.close();
					this._oQuickLinkInfoPopover = null;
				}
				this._oQuickLinkInfoPopover = this.createFragment("sap.ino.vc.idea.fragments.QuickLinkInfoPopover");
				this.getView().addDependent(this._oQuickLinkInfoPopover);
				this._oQuickLinkInfoPopover.openBy(oEvent.getSource());
			},

			onQuickLinkStandListDialogOpen: function() {
				this._currentItemIndex = -1;
				this._currentData = jQuery.extend(true, [], this.getModel('list').getProperty('/Variants/Values'));
				this.deleteId = [];
				this.getQuickLinkStandardListDialog().open();
				this.onQuickLinkSelectionChange();
			},

			getQuickLinkStandardListDialog: function() {
				var oTable, aItem;
				if (!this._quickLinkStandardListDialog) {
					this._quickLinkStandardListDialog = this.createFragment("sap.ino.vc.idea.fragments.QuickLinkStandardListDialog", this.getView().getId());
					this.getView().addDependent(this._quickLinkStandardListDialog);
					oTable = this.byId('quickLinkStandardListTable');
					// 	oTable.addEventDelegate({
					// 	    onAfterRendering: function(){
					// 	        this.updateQuickLinkCount(oTable.getVisibleItems().length);
					// 	        if(this._currentItemIndex >= 0 && oTable.getVisibleItems()[this._currentItemIndex]){
					// 	            oTable.getVisibleItems()[this._currentItemIndex].getCells()[2].firePress();
					// 	        }
					// 	    }
					// 	},this);
					aItem = oTable.getVisibleItems();
					for (var i = 0; i < aItem.length; i++) {
						aItem[i].addEventDelegate({
							onAfterRendering: function() {
								var aCurrentItem = oTable.getVisibleItems();
								if (this._currentItemIndex >= 0 && aCurrentItem[this._currentItemIndex]) {
									var oItem = aCurrentItem[this._currentItemIndex];
									if (oItem && oItem.getCells && oItem.getCells()[2] && oItem.getCells()[2].firePress) {
										oItem.getCells()[2].firePress();
									}
								}
							}
						}, this);
					}
					this.updateQuickLinkCount(aItem.length);
				} else {
					oTable = this.byId('quickLinkStandardListTable');
					aItem = oTable.getVisibleItems();
					this.updateQuickLinkCount(aItem.length);
				}
				return this._quickLinkStandardListDialog;
			},

			updateQuickLinkCount: function(iCount) {
				this.getModel('view').setProperty('/QUICK_LINK_COUNT', iCount);
			},

			onQuickLinkStandListMenuButtonPress: function(oEvent) {
				var oSource = oEvent.getSource();
				if (!this._quickLinkMenuPopover) {
					this._quickLinkMenuPopover = this._quickLinkStandardListDialog.getContent()[0].getContent()[1];
					this._quickLinkMenuPopover.setVisible(true);
					this.getView().addDependent(this._quickLinkMenuPopover);
				}
				this.setQuickLinkMenuButtonStatus(oSource.getParent().getParent(), oSource.getParent());

				this._quickLinkMenuPopover.getContent()[0].bindElement('list>' + oSource.getParent().getBindingContextPath());
				this._quickLinkMenuPopover.openBy(oSource);
			},

			setQuickLinkMenuButtonStatus: function(oTable, oSelectedItem) {
				var aControl = this._quickLinkMenuPopover.getContent()[0].getItems();
				var oMoveUpButton = aControl[0];
				var oMoveDownButton = aControl[1];
				var oDeleteButton = aControl[2];
				var aItems = oTable.getVisibleItems();
				var oContext = oSelectedItem.getBindingContext('list');
				var bDeleteButtonEnabled = oContext.getProperty(oContext.getPath() + '/TYPE_CODE') === 'QUICK_LINK_CUSTOM_IDEA';
				oMoveUpButton.setEnabled(oSelectedItem !== aItems[0]);
				oMoveDownButton.setEnabled(oSelectedItem !== aItems[aItems.length - 1]);
				oDeleteButton.setEnabled(bDeleteButtonEnabled);
			},

			onQuickLinkMoveUpButtonPress: function(oEvent) {
				var oContext = oEvent.getSource().getBindingContext('list');
				this.setQuickLinkItemSequence(oContext, 'UP');
				this._quickLinkMenuPopover.close();
			},

			onQuickLinkMoveDownButtonPress: function(oEvent) {
				var oContext = oEvent.getSource().getBindingContext('list');
				this.setQuickLinkItemSequence(oContext, 'DOWN');
				this._quickLinkMenuPopover.close();
			},

			setQuickLinkItemSequence: function(oContext, sDirection) {
				var that = this;
				var oTable = this.byId('quickLinkStandardListTable');
				var oModel = oContext.getModel();
				var sPath = oContext.getPath();
				var aItem = oTable.getVisibleItems();
				var oCurrentItem, oPrevItem, oNextItem, sCurrentPath, sPrevPath, sNextPath, iCurrentSequence, iPrevSequence, iNextSequence;
				for (var i = 0; i < aItem.length; i++) {
					oCurrentItem = aItem[i];
					sCurrentPath = oCurrentItem.getBindingContext('list').getPath();
					if (sCurrentPath === sPath) {
						iCurrentSequence = oCurrentItem.getBindingContext('list').getProperty(sCurrentPath + '/SEQUENCE');
						if (sDirection === 'UP') {
							oPrevItem = aItem[i - 1];
							sPrevPath = oPrevItem.getBindingContext('list').getPath();
							iPrevSequence = oPrevItem.getBindingContext('list').getProperty(sPrevPath + '/SEQUENCE');
							oModel.setProperty(sCurrentPath + '/SEQUENCE', iPrevSequence);
							oModel.setProperty(sPrevPath + '/SEQUENCE', iCurrentSequence);
							that._currentItemIndex = i - 1;
						}
						if (sDirection === 'DOWN') {
							oNextItem = aItem[i + 1];
							sNextPath = oNextItem.getBindingContext('list').getPath();
							iNextSequence = oNextItem.getBindingContext('list').getProperty(sNextPath + '/SEQUENCE');
							oModel.setProperty(sCurrentPath + '/SEQUENCE', iNextSequence);
							oModel.setProperty(sNextPath + '/SEQUENCE', iCurrentSequence);
							that._currentItemIndex = i + 1;
						}
						// this will not trigger table onafterrendering, but listitem onafterrendering, which fix the duplicated id issue
						oModel.refresh(true);
						//   oTable.bindItems(oTable.getBindingInfo('items'));
						return false;
					}
				}

			},

			onQuickLinkDeleteButtonPress: function(oEvent) {
				var oContext = oEvent.getSource().getBindingContext('list');
				var oObject = oContext.getObject();
				var oTable = this.byId('quickLinkStandardListTable');
				var aItem = oTable.getVisibleItems();
				var oCurrentItem, sCurrentPath;
				for (var i = 0; i < aItem.length; i++) {
					oCurrentItem = aItem[i];
					sCurrentPath = oCurrentItem.getBindingContext('list').getPath();
					if (oContext.getPath() === sCurrentPath) {
						oCurrentItem.getBindingContext('list').getObject().DELETE = 1;
						//  oTable.removeItem(oCurrentItem);
					}
				}
				this.getModel('list').refresh(true);
				this._currentItemIndex = -1;
				this.deleteId.push(oObject.ID);
				this.updateQuickLinkCount(oTable.getVisibleItems().length);
				this.onQuickLinkSelectionChange();
			},

			onQuickLinkInformationPopoverOpen: function(oEvent) {
				var oSource = oEvent.getSource();
				if (!this._quickLinkInfoPopover) {
					this._quickLinkInfoPopover = this.createFragment("sap.ino.vc.idea.fragments.QuickLinkInfoPopover");
					this.getView().addDependent(this._quickLinkInfoPopover);
				}
				this._quickLinkInfoPopover.openBy(oSource);
			},

			onQuickLinkSelectionChange: function() {
				var oListTable = this.byId("quickLinkStandardListTable");
				var aVailableList = oListTable.getVisibleItems();
				var selectNum = 0;
				var aUnselectItem = [];
				var oMessageToast = {
					duration: 7000,
					width: '20em'
				};
				aVailableList.forEach(function(oItem) {
					var bSelected = oItem.getAggregation("cells")[0].getSelected();
					if (bSelected === true) {
						selectNum += 1;
					} else {
						aUnselectItem.push(oItem);
					}
				});

				if (selectNum > 9) {
					MessageToast.show(this.getText("QUICK_LINK_LIST_SELECT_OVER_LIMIT"), oMessageToast);
					aUnselectItem.forEach(function(oUnselectItem) {
						oUnselectItem.getAggregation("cells")[0].setEnabled(false);
					});
				} else if (selectNum === 0) {
					MessageToast.show(this.getText("QUICK_LINK_LIST_SELECT_BELOW_LIMIT"), oMessageToast);
					this.byId('quickLinkStandardListDialogOKButton').setEnabled(false);
				} else {
					aUnselectItem.forEach(function(oUnselectItem) {
						oUnselectItem.getAggregation("cells")[0].setEnabled(true);
					});
					this.byId('quickLinkStandardListDialogOKButton').setEnabled(true);
				}
			},

			onHandleQuickLinkStandardListDialogOK: function() {
				var oListTable = this.byId("quickLinkStandardListTable");
				var aVailableList = oListTable.getVisibleItems();
				var selectNum = 0;
				var oMessageToast = {
					duration: 7000,
					width: '20em'
				};
				aVailableList.forEach(function(oItem) {
					var bSelected = oItem.getAggregation("cells")[0].getSelected();
					if (bSelected === true) {
						selectNum += 1;
					}
				});

				if (selectNum === 0) {
					MessageToast.show(this.getText("QUICK_LINK_LIST_SELECT_BELOW_LIMIT"), oMessageToast);
					return;
				}
				this.updateQuickLinkStandardSettings();
			},

			updateQuickLinkStandardSettings: function() {
				var that = this;
				var aValues = this.getModel("list").getProperty("/Variants/Values");
				var aSettings = [];
				var oMessageToast = {
					duration: 7000,
					width: '20em'
				};
				aValues.forEach(function(oValues) {
					if (oValues.TYPE_CODE === "QUICK_LINK_STANDARD_IDEA") {
						aSettings.push({
							"ID": oValues.ID ? oValues.ID : -1,
							"ACTIVE": oValues.ACTIVE === true ? 1 : 0,
							"SEQUENCE": oValues.SEQUENCE,
							"TYPE_CODE": "QUICK_LINK_STANDARD_IDEA",
							"OBJECT_TYPE_CODE": oValues.OBJECT_TYPE_CODE
						});
					} else {
						aSettings.push({
							"ID": oValues.ID ? oValues.ID : -1,
							"ACTIVE": oValues.ACTIVE === true ? 1 : 0,
							"SEQUENCE": oValues.SEQUENCE,
							"TYPE_CODE": "QUICK_LINK_CUSTOM_IDEA",
							"OBJECT_TYPE_CODE": oValues.OBJECT_TYPE_CODE,
							"LINK_TEXT": oValues.LINK_TEXT,
							"LINK_URL": oValues.LINK_URL
						});
					}
				});

				if (this.deleteId.length > 0) {
					aSettings.forEach(function(oSetting) {
						that.deleteId.forEach(function(oId) {
							if (oSetting.ID === oId) {
								oSetting.DELETE = 1;
							}
						});
					});

					this.deleteId.forEach(function(oId) {
						aValues = aValues.filter(function(oValues) {
							return oValues.ID !== oId;
						});
					});
				}
				PersonalizeSetting.updateQuickLinkSettings(aSettings).done(function() {
					PersonalizeSetting.getQuickLinkSettings({
						'TYPE_CODE': mTypeCode
					}).done(function(data) {
						that.refreshQuickLinkSettings(data, aValues);
						var oList = that.getCurrentQuickIdeaList();
						oList.bindItems(oList.getBindingInfo('items'));
						that._quickLinkStandardListDialog.close();
						MessageToast.show(that.getText("QUICK_LINK_UPDATE_SUCCESS"), oMessageToast);
					});
				}).fail(function() {
					that._quickLinkStandardListDialog.close();
					MessageToast.show(that.getText("QUICK_LINK_UPDATE_FAILURE"), oMessageToast);
				});
			},

			onHandleQuickLinkStandardListDialogCancel: function() {
				this.getModel('list').setProperty('/Variants/Values', this._currentData);
				this._quickLinkStandardListDialog.close();
				this._quickLinkStandardListDialog.destroy();
				this._quickLinkStandardListDialog = undefined;
			},

			onQuickLinkNameChange: function(oEvent) {
				var that = this;
				var oControl = oEvent.getSource();
				var sName = oControl.getValue();
				var aData = this.getModel('list').getProperty('/Variants/Values');
				var aStandardName = [
                    this.getText('IDEA_LIST_MIT_EVAL_PENDING'),
                    this.getText('IDEA_LIST_MIT_OPEN_FOR_EVAL'),
                    this.getText('IDEA_LIST_MIT_MY_EVAL'),
                    this.getText('IDEA_LIST_MIT_VOTE'),
                    this.getText('IDEA_LIST_MIT_MY'),
                    this.getText('IDEA_LIST_MIT_VOTED'),
                    this.getText('IDEA_LIST_MIT_COMMENTED'),
                    this.getText('IDEA_LIST_MIT_COMPLETED'),
                    this.getText('IDEA_LIST_MIT_ALL'),
                    this.getText('IDEA_LIST_MIT_FOLLOW_UP'),
                    this.getText('IDEA_LIST_MIT_MANAGE'),
                    this.getText('IDEA_LIST_MIT_UNASSIGNED'),
                    this.getText('IDEA_LIST_MIT_COACH_ME'),
                    this.getText('IDEA_LIST_MIT_EVAL_DONE')
                ];
				if (!PersonalizeSetting.checkQuickLinkNameValid(aData, sName, aStandardName)) {
					oControl.fireValidationError({
						element: oControl,
						property: 'value',
						type: 'Error',
						message: that.getText('MSG_QUICK_LINK_NAME_DUPLICATED')
					});
				} else {
					oControl.fireValidationSuccess({
						element: oControl,
						property: 'value'
					});
				}
			},

			initIdeaSearchParam: function() {
				var bBackoffice = Configuration.hasCurrentUserPrivilege("sap.ino.ui::backoffice.access");
				var sOdataPath = "";
				if (bBackoffice) {
					sOdataPath = "/sap/ino/xs/rest/backoffice/odata.xsodata";
				} else {
					sOdataPath = "/sap/ino/xs/rest/community/odata.xsodata";
				}
				var sPath = Configuration.getBackendRootURL() + sOdataPath + this.getList().mBindingInfos.items.binding.sPath + "?$format=json";
				var sFilter = this.getList().mBindingInfos.items.binding.sFilterParams;
				var sSorter = this.getList().mBindingInfos.items.binding.sSortParams;
				var sSelect = "&$select(ID)";
				sPath = sPath + "&" + sSorter + "&" + sFilter + sSelect;
				var oIdeaSearchParams = new JSONModel();
				oIdeaSearchParams.setData({
					path: sPath
				});
				sap.ui.getCore().setModel(oIdeaSearchParams, "ideaSearchParams");
			},
			getGroupViewParameters: function(oBindingParameter){
			    var sGroup = Configuration.getGroupConfiguration().GROUP;
				var sGroupVariant;
				if(sGroup === "COMPANY"){
				    sGroupVariant = 1;
				} else if(sGroup === "ORGANIZATION"){
				    sGroupVariant = 2;
				}
				var sRoleType;
				if( oBindingParameter.Variant === mVariant.MY_GROUP_VIEW_AUTH){
				    sRoleType = 1;
				} else if (oBindingParameter.Variant === mVariant.MY_GROUP_VIEW_VOTED){
				    sRoleType = 2;
				} else if (oBindingParameter.Variant === mVariant.MY_GROUP_VIEW_COMMENTED){
				    sRoleType = 3;
				}
				sRoleType = sRoleType ? sRoleType : 0;
				sGroupVariant = sGroupVariant ? sGroupVariant : 0;
				return {groupToken:'',
				        groupType:sGroupVariant,
				        groupRole:sRoleType
				};
			},
			getSearchType: function(){
			        var selectedCategory = this.getModel('search').getProperty('/selectedCategory');
				    var searchType = 0;
				    if(selectedCategory === 'campaign-idealistbycompany' || selectedCategory === 'idealistbycompany'){
				        searchType = 1;
				    }
				    return searchType;
			}
			

			//end
		}));

	oIdeaList.list = mList;
	oIdeaList.routes = mIdeaRoutes;

	return oIdeaList;
});
}; // end of sap/ino/vc/idea/List.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.idea.ListPage.controller') ) {
jQuery.sap.declare('sap.ino.vc.idea.ListPage.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ino/vc/idea/ListPage.controller",[
    "sap/ino/vc/idea/List.controller",
    "sap/ino/vc/commons/TopLevelPageFacet"
], function(IdeaList,
	TopLevelPageFacet) {
	"use strict";

	return IdeaList.extend("sap.ino.vc.idea.ListPage", jQuery.extend({}, TopLevelPageFacet, {
		/* Controller reacts when these routes match */
		routes: ["idealist", "idealistvariant"],

		onRouteMatched: function(oEvent) {
			this.setGlobalFilter([]);
			this.setHelp("IDEA_LIST");
			if (this.getRoute() === 'idealist') {
			    this._iCampaignId = null;
			    this.campaignId = null;
			}
			this.show(oEvent);
		},

		onAfterShow: function() {
// 			this._bPreviouslyFullscreen = this.getFullScreen();
// 			if (!this._bPreviouslyFullscreen) {
// 				this.setFullScreen(true);
// 			}
		},

		onBeforeHide: function() {
// 			this.setFullScreen(this._bPreviouslyFullscreen);
		}
	}));
});
}; // end of sap/ino/vc/idea/ListPage.controller.js
if ( !jQuery.sap.isDeclared('sap.ino.vc.campaign.CampaignIdeaList.controller') ) {
jQuery.sap.declare('sap.ino.vc.campaign.CampaignIdeaList.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ino/vc/campaign/CampaignIdeaList.controller",[
    "sap/ino/vc/idea/List.controller",
    "sap/ino/vc/commons/TopLevelPageFacet",
    "sap/ui/Device",
    "sap/ino/commons/application/Configuration",
    "sap/ui/model/json/JSONModel",
    "sap/ino/commons/models/aof/PropertyModel",
    "sap/ino/vc/campaign/mixins/CampaignInstanceRolesMixin"
], function(IdeaList,
	TopLevelPageFacet,
	Device,
	Configuration,
	JSONModel,
	PropertyModel,
	CampaignInstanceRolesMixin) {
	"use strict";

	return IdeaList.extend("sap.ino.vc.campaign.CampaignIdeaList", jQuery.extend({}, CampaignInstanceRolesMixin, TopLevelPageFacet, {
		/* Controller reacts when these routes match */
		routes: ["campaign-idealist", "campaign-idealistvariant"],

		onInit: function() {
			IdeaList.prototype.onInit.apply(this, arguments);
			this.setViewProperty("/HIDE_CAMPAIGN_FILTER", true);
		},

		onRouteMatched: function(oEvent) {
			this.setGlobalFilter([]);

			var oArguments = oEvent.mParameters.arguments;
			var oQuery = oArguments["?query"] || {};
			oQuery.campaign = oArguments.id;
			oQuery.variant = oArguments.variant;

			var that = this;
			var iImageId;
			var iSmallImageId;
			var oView = this.getView();

			var fnInit = function() {
				that.updateBackgroundColor(oView.getBindingContext("data").getProperty("COLOR_CODE"));
				iImageId = oView.getBindingContext("data").getProperty("CAMPAIGN_BACKGROUND_IMAGE_ID");
				iSmallImageId = oView.getBindingContext("data").getProperty("CAMPAIGN_SMALL_BACKGROUND_IMAGE_ID");
				that.setBackgroundImages(iImageId, iSmallImageId);

				that.show((this.getRoute() === "campaign-idealist") ? "idealist" : "idealistvariant", oQuery);
				that.getCampaignInstanceRolesData(that._iCampaignId);
			};

			var fnSetVariantVisibility = function(oEvnt) {
				// set visibility information of variants in filter sidebar
				var oProps = oEvnt.getSource();
				var aVariants = that.getModel("list").getProperty("/Variants/Values");

				// for (var i = 0; i < aVariants.length; i += 1) {
				// 	var oVariant = aVariants[i];
				// 	var bIsManage = oVariant.MANAGE || false;
				// 	var bIsExpert = oVariant.EXPERT || false;
				// 	var bIsCampaignManage = oVariant.CAMPAIGN_MANAGE || false;

				// 	var bVisible = (!bIsManage && !bIsExpert && !bIsCampaignManage) ||
				// 		// user has expert role and variant is for experts
				// 		(bIsExpert && oProps.getProperty("/nodes/Root/customProperties/expertInCampaign")) ||
				// 		// user has campaign manager role and variant is for campaign manager
				// 		(bIsCampaignManage && Configuration.hasCurrentUserPrivilege("sap.ino.ui::campaign_manager") && Configuration.getSystemSetting(
				// 			"sap.ino.config.REWARD_ACTIVE") === "1") ||
				// 		// user has general backoffice privileges and variant has manage flag
				// 		(bIsManage && oProps.getProperty("/nodes/Root/customProperties/backofficeCampaignPrivilege")) ||
				// 		bIsManage;
				// 	that.getModel("list").setProperty("/Variants/Values/" + i + "/VISIBLE", bVisible);
				// }

				oProps.destroy();
			};

			this._iCampaignId = parseInt(oArguments.id, 10);

			// static privilege is needed to technically access campaign properties
			if (Configuration.hasCurrentUserPrivilege("sap.ino.ui::backoffice.access")) {
				var oTemp = new PropertyModel("sap.ino.xs.object.campaign.Campaign", this._iCampaignId, {
					nodes: ["Root"]
				}, false, fnSetVariantVisibility);
			}

			this.bindCampaignODataModel(this._iCampaignId, fnInit);
		},

		onAfterShow: function() {
			this._bPreviouslyFullscreen = this.getFullScreen();
			if (!this._bPreviouslyFullscreen) {
				this.setFullScreen(true);
			}
		},

		onBeforeHide: function() {
			this.setFullScreen(this._bPreviouslyFullscreen);
		},

		hasBackgroundImage: function() {
			return true;
		},

		onVariantPress: function(sVariantAction) {
			if (!Device.system.desktop) {
				//no navigation on mobile phones yet
				return;
			}

			var oQuery = this.getQuery();

			// do not show invalid filters in URL => they are ignored, but we don't want to confuse users
			this.removeInvalidFilters(oQuery);

			// remove campaign filter
			delete oQuery.campaign;

			if (sVariantAction) {
				this.navigateTo(this.getRoute(true), {
					id: this._iCampaignId,
					variant: sVariantAction,
					query: oQuery
				}, true, true);
			} else {
				this.navigateTo(this.getRoute(false), {
					id: this._iCampaignId,
					query: oQuery
				}, true, true);
			}
		},

		navigateIntern: function(oQuery, bReplace) {
			var sVariant = this.getViewProperty("/List/VARIANT");

			this.navigateTo(this.getCurrentRoute(), {
				"variant": sVariant,
				"query": oQuery,
				"id": this._iCampaignId
			}, bReplace, true);
		},

		bindTagCloud: function() {
			var oBindingParameter = this.getBindingParameter();
			var sPath = Configuration.getTagcloudServiceURL(oBindingParameter.CampaignId, oBindingParameter.TagIds, oBindingParameter.SearchTerm,
				oBindingParameter.VariantFilter, !this.includeDrafts(), undefined, oBindingParameter.Filters);
			var oController = this;
			// check whether refresh is necessary
				if (this._lastTagServicePath !== sPath) {
					var oTagModel = new JSONModel(sPath);
					var sOtherTxt = this.getText("IDEA_LIST_MIT_FILTER_TAG_OTHER");
					oTagModel.attachRequestCompleted(null, function() {
						var oRankedTag = oTagModel.getData().RANKED_TAG || [];
						var aTagGroup = oTagModel.getData().TAG_GROUP;
						var oTagData = oController.groupByTagGroup(oRankedTag, oController.getViewProperty("/List/TAGS"), sOtherTxt);
						jQuery.each(oTagData, function(element, object) {
							if (object.GROUP_NAME === "Other") {
								aTagGroup.push(object);
							}
						});
						oController.setTagCloudProperty(oTagData, oTagModel.getData().WITHOUT_GROUP !== "X");
						oTagModel.setData({
							"RANKED_TAG": oTagData,
							"TAG_GROUP": aTagGroup
						}, false);
						this.setFilterModel(oTagModel, "tag");
					}, this);
				}
				// swap last path for refresh checking
				this._lastTagServicePath = sPath;
		},

		bindCampaignODataModel: function(iId, fnCallback) {
			var that = this;
			var sEntitySet = "CampaignFull";

			if (iId > 0) {
				this.getView().bindElement({
					path: "data>/" + sEntitySet + "(" + iId + ")",
					events: {
						dataRequested: function() {
							jQuery.each(that.getBusyControls(), function(iIdx, oControl) {
								if (jQuery.type(oControl.setBusy) === "function") {
									oControl.setBusy(true);
								}
							});
						},
						dataReceived: function() {
							jQuery.each(that.getBusyControls(), function(iIdx, oControl) {
								if (jQuery.type(oControl.setBusy) === "function") {
									oControl.setBusy(false);
								}
							});
							if (typeof fnCallback === "function") {
								fnCallback.apply(that);
							}
						}
					}
				});

				// if no request is needed, immediately trigger the callback
				if (typeof fnCallback === "function") {
					var oContext = this.getView().getBindingContext("data");
					if (oContext && oContext.getPath() === ("/" + sEntitySet + "(" + iId + ")")) {
						fnCallback.apply(that);
					}
				}
			}
		}
	}));
});
}; // end of sap/ino/vc/campaign/CampaignIdeaList.controller.js
